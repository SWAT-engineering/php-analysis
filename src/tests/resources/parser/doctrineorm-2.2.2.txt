["/**
     * @param array $fieldDeclaration
     * @param AbstractPlatform $platform
     * @return string
     */",
 "/**
     * Converts a value from its database representation to its PHP representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The PHP representation of the value.
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to clear the metadata cache of the various cache drivers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Is thrown when a transaction is required for the current operation, but there is none open.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * InExpression ::= StateFieldPathExpression [\"NOT\"] \"IN\" \"(\" (Literal {\",\" Literal}* | Subselect) \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * @param ClassMetadataInfo $metadata
     * @return string $exported
     */",
 "/**
*ClassMetadataexporterforPHPclasseswithannotations
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.org
*@since2.0
*@version$Revision$
*@authorJonathanWage<jonwage@gmail.com>
*/",
 "/**
     * Constructor.
     *
     * @param ObjectManager $objectManager
     */",
 "/**
     * Retrieve associated ObjectManager.
     *
     * @return ObjectManager
     */",
 "/**
 * Provides event arguments for the preFlush event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.2
 * @author      Roman Borschel <roman@code-factory.de>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * SimpleWhenClause ::= \"WHEN\" ScalarExpression \"THEN\" ScalarExpression
 *
 * @since   2.2
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Gets the single, empty and immutable EventArgs instance.
     *
     * This instance will be used when events are dispatched without any parameter,
     * like this: EventManager::dispatchEvent('eventname');
     *
     * The benefit from this is that only one empty instance is instantiated and shared
     * (otherwise there would be instances for every dispatched in the abovementioned form)
     *
     * @see EventManager::dispatchEvent
     * @link http://msdn.microsoft.com/en-us/library/system.eventargs.aspx
     * @static
     * @return EventArgs
     */",
 "/**
 * EventArgs is the base class for classes containing event data.
 *
 * This class contains no event data. It is used by events that do not pass state
 * information to an event handler when an event is raised. The single empty EventArgs
 * instance can be obtained through {@link getEmptyInstance}.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Initializes a new SchemaTool instance that uses the connection of the
     * provided EntityManager.
     *
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Creates the database schema for the given array of ClassMetadata instances.
     *
     * @throws ToolsException
     * @param array $classes
     * @return void
     */",
 "/**
     * Gets the list of DDL statements that are required to create the database schema for
     * the given list of ClassMetadata instances.
     *
     * @param array $classes
     * @return array $sql The SQL statements needed to create the schema for the classes.
     */",
 "/**
     * Some instances of ClassMetadata don't need to be processed in the SchemaTool context. This method detects them.
     *
     * @param ClassMetadata $class
     * @param array $processedClasses
     * @return bool
     */",
 "/**
     * From a given set of metadata classes this method creates a Schema instance.
     *
     * @param array $classes
     * @return Schema
     */",
 "/**
     * Gets a portable column definition as required by the DBAL for the discriminator
     * column of a class.
     *
     * @param ClassMetadata $class
     * @return array The portable column definition of the discriminator column as required by
     *              the DBAL.
     */",
 "/**
     * Gathers the column definitions as required by the DBAL of all field mappings
     * found in the given class.
     *
     * @param ClassMetadata $class
     * @param Table $table
     * @return array The list of portable column definitions as required by the DBAL.
     */",
 "/**
     * Creates a column definition as required by the DBAL from an ORM field mapping definition.
     *
     * @param ClassMetadata $class The class that owns the field mapping.
     * @param array $mapping The field mapping.
     * @param Table $table
     * @return array The portable column definition as required by the DBAL.
     */",
 "/**
     * Gathers the SQL for properly setting up the relations of the given class.
     * This includes the SQL for foreign key constraints and join tables.
     *
     * @param ClassMetadata $class
     * @param \Doctrine\DBAL\Schema\Table $table
     * @param \Doctrine\DBAL\Schema\Schema $schema
     * @return void
     */",
 "/**
     * Get the class metadata that is responsible for the definition of the referenced column name.
     *
     * Previously this was a simple task, but with DDC-117 this problem is actually recursive. If its
     * not a simple field, go through all identifier field names that are associations recursivly and
     * find that referenced column name.
     *
     * TODO: Is there any way to make this code more pleasing?
     *
     * @param ClassMetadata $class
     * @param string $referencedColumnName
     * @return array(ClassMetadata, referencedFieldName)
     */",
 "/**
     * Gather columns and fk constraints that are required for one part of relationship.
     *
     * @param array $joinColumns
     * @param \Doctrine\DBAL\Schema\Table $theJoinTable
     * @param ClassMetadata $class
     * @param array $mapping
     * @param array $primaryKeyColumns
     * @param array $uniqueConstraints
     */",
 "/**
     * Drops the database schema for the given classes.
     *
     * In any way when an exception is thrown it is supressed since drop was
     * issued for all classes of the schema and some probably just don't exist.
     *
     * @param array $classes
     * @return void
     */",
 "/**
     * Drops all elements in the database of the current connection.
     *
     * @return void
     */",
 "/**
     * Gets the SQL needed to drop the database schema for the connections database.
     *
     * @return array
     */",
 "/**
     * Get SQL to drop the tables defined by the passed classes.
     *
     * @param array $classes
     * @return array
     */",
 "/**
     * Updates the database schema of the given classes by comparing the ClassMetadata
     * instances to the current database schema that is inspected. If $saveMode is set
     * to true the command is executed in the Database, else SQL is returned.
     *
     * @param array $classes
     * @param boolean $saveMode
     * @return void
     */",
 "/**
     * Gets the sequence of SQL statements that need to be performed in order
     * to bring the given class mappings in-synch with the relational schema.
     * If $saveMode is set to true the command is executed in the Database,
     * else SQL is returned.
     *
     * @param array $classes The classes to consider.
     * @param boolean $saveMode True for writing to DB, false for SQL string
     * @return array The sequence of SQL statements.
     */",
 "/**
 * The SchemaTool is a tool to create/drop/update database schemas based on
 * <tt>ClassMetadata</tt> class descriptors.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Adds a listener that wants to be notified about property changes.
     *
     * @param PropertyChangedListener $listener
     */",
 "/**
 * Contract for classes that provide the service of notifying listeners of
 * changes to their properties.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Gets a portable column definition.
     *
     * The database type is mapped to a corresponding Doctrine mapping type.
     *
     * @param $tableColumn
     * @return array
     */",
 "/**
 * Schema manager for the MySql RDBMS.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Roman Borschel <roman@code-factory.org>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @version     $Revision$
 * @since       2.0
 */",
 "/**
     * Initializes a new UnitOfWork instance, bound to the given EntityManager.
     *
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Commits the UnitOfWork, executing all operations that have been postponed
     * up to this point. The state of all managed entities will be synchronized with
     * the database.
     *
     * The operations are executed in the following order:
     *
     * 1) All entity insertions
     * 2) All entity updates
     * 3) All collection deletions
     * 4) All collection updates
     * 5) All entity deletions
     *
     * @param object $entity
     * @return void
     */",
 "/**
     * Compute the changesets of all entities scheduled for insertion
     *
     * @return void
     */",
 "/**
     * Only flush the given entity according to a ruleset that keeps the UoW consistent.
     *
     * 1. All entities scheduled for insertion, (orphan) removals and changes in collections are processed as well!
     * 2. Read Only entities are skipped.
     * 3. Proxies are skipped.
     * 4. Only if entity is properly managed.
     *
     * @param  object $entity
     * @return void
     */",
 "/**
     * Executes any extra updates that have been scheduled.
     */",
 "/**
     * Gets the changeset for an entity.
     *
     * @return array
     */",
 "/**
     * Computes the changes that happened to a single entity.
     *
     * Modifies/populates the following properties:
     *
     * {@link _originalEntityData}
     * If the entity is NEW or MANAGED but not yet fully persisted (only has an id)
     * then it was not fetched from the database and therefore we have no original
     * entity data yet. All of the current entity data is stored as the original entity data.
     *
     * {@link _entityChangeSets}
     * The changes detected on all properties of the entity are stored there.
     * A change is a tuple array where the first entry is the old value and the second
     * entry is the new value of the property. Changesets are used by persisters
     * to INSERT/UPDATE the persistent entity state.
     *
     * {@link _entityUpdates}
     * If the entity is already fully MANAGED (has been fetched from the database before)
     * and any changes to its properties are detected, then a reference to the entity is stored
     * there to mark it for an update.
     *
     * {@link _collectionDeletions}
     * If a PersistentCollection has been de-referenced in a fully MANAGED entity,
     * then this collection is marked for deletion.
     *
     * @ignore
     * @internal Don't call from the outside.
     * @param ClassMetadata $class The class descriptor of the entity.
     * @param object $entity The entity for which to compute the changes.
     */",
 "/**
     * Computes all the changes that have been done to entities and collections
     * since the last commit and stores these changes in the _entityChangeSet map
     * temporarily for access by the persisters, until the UoW commit is finished.
     */",
 "/**
     * Computes the changes of an association.
     *
     * @param AssociationMapping $assoc
     * @param mixed $value The value of the association.
     */",
 "/**
     * INTERNAL:
     * Computes the changeset of an individual entity, independently of the
     * computeChangeSets() routine that is used at the beginning of a UnitOfWork#commit().
     *
     * The passed entity must be a managed entity. If the entity already has a change set
     * because this method is invoked during a commit cycle then the change sets are added.
     * whereby changes detected in this method prevail.
     *
     * @ignore
     * @param ClassMetadata $class The class descriptor of the entity.
     * @param object $entity The entity for which to (re)calculate the change set.
     * @throws InvalidArgumentException If the passed entity is not MANAGED.
     */",
 "/**
     * Executes all entity insertions for entities of the specified type.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
     * Executes all entity updates for entities of the specified type.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
     * Executes all entity deletions for entities of the specified type.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
     * Gets the commit order.
     *
     * @return array
     */",
 "/**
     * Schedules an entity for insertion into the database.
     * If the entity already has an identifier, it will be added to the identity map.
     *
     * @param object $entity The entity to schedule for insertion.
     */",
 "/**
     * Checks whether an entity is scheduled for insertion.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * Schedules an entity for being updated.
     *
     * @param object $entity The entity to schedule for being updated.
     */",
 "/**
     * INTERNAL:
     * Schedules an extra update that will be executed immediately after the
     * regular entity updates within the currently running commit cycle.
     *
     * Extra updates for entities are stored as (entity, changeset) tuples.
     *
     * @ignore
     * @param object $entity The entity for which to schedule an extra update.
     * @param array $changeset The changeset of the entity (what to update).
     */",
 "/**
     * Checks whether an entity is registered as dirty in the unit of work.
     * Note: Is not very useful currently as dirty entities are only registered
     * at commit time.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * Checks whether an entity is registered to be checked in the unit of work.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * INTERNAL:
     * Schedules an entity for deletion.
     *
     * @param object $entity
     */",
 "/**
     * Checks whether an entity is registered as removed/deleted with the unit
     * of work.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * Checks whether an entity is scheduled for insertion, update or deletion.
     *
     * @param $entity
     * @return boolean
     */",
 "/**
     * INTERNAL:
     * Registers an entity in the identity map.
     * Note that entities in a hierarchy are registered with the class name of
     * the root entity.
     *
     * @ignore
     * @param object $entity  The entity to register.
     * @return boolean  TRUE if the registration was successful, FALSE if the identity of
     *                  the entity in question is already managed.
     */",
 "/**
     * Gets the state of an entity with regard to the current unit of work.
     *
     * @param object $entity
     * @param integer $assume The state to assume if the state is not yet known (not MANAGED or REMOVED).
     *                        This parameter can be set to improve performance of entity state detection
     *                        by potentially avoiding a database lookup if the distinction between NEW and DETACHED
     *                        is either known or does not matter for the caller of the method.
     * @return int The entity state.
     */",
 "/**
     * INTERNAL:
     * Removes an entity from the identity map. This effectively detaches the
     * entity from the persistence management of Doctrine.
     *
     * @ignore
     * @param object $entity
     * @return boolean
     */",
 "/**
     * INTERNAL:
     * Gets an entity in the identity map by its identifier hash.
     *
     * @ignore
     * @param string $idHash
     * @param string $rootClassName
     * @return object
     */",
 "/**
     * INTERNAL:
     * Tries to get an entity by its identifier hash. If no entity is found for
     * the given hash, FALSE is returned.
     *
     * @ignore
     * @param string $idHash
     * @param string $rootClassName
     * @return mixed The found entity or FALSE.
     */",
 "/**
     * Checks whether an entity is registered in the identity map of this UnitOfWork.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * INTERNAL:
     * Checks whether an identifier hash exists in the identity map.
     *
     * @ignore
     * @param string $idHash
     * @param string $rootClassName
     * @return boolean
     */",
 "/**
     * Persists an entity as part of the current unit of work.
     *
     * @param object $entity The entity to persist.
     */",
 "/**
     * Persists an entity as part of the current unit of work.
     *
     * This method is internally called during persist() cascades as it tracks
     * the already visited entities to prevent infinite recursions.
     *
     * @param object $entity The entity to persist.
     * @param array $visited The already visited entities.
     */",
 "/**
     * Deletes an entity as part of the current unit of work.
     *
     * @param object $entity The entity to remove.
     */",
 "/**
     * Deletes an entity as part of the current unit of work.
     *
     * This method is internally called during delete() cascades as it tracks
     * the already visited entities to prevent infinite recursions.
     *
     * @param object $entity The entity to delete.
     * @param array $visited The map of the already visited entities.
     * @throws InvalidArgumentException If the instance is a detached entity.
     */",
 "/**
     * Merges the state of the given detached entity into this UnitOfWork.
     *
     * @param object $entity
     * @return object The managed copy of the entity.
     * @throws OptimisticLockException If the entity uses optimistic locking through a version
     *         attribute and the version check against the managed copy fails.
     *
     * @todo Require active transaction!? OptimisticLockException may result in undefined state!?
     */",
 "/**
     * Executes a merge operation on an entity.
     *
     * @param object $entity
     * @param array $visited
     * @return object The managed copy of the entity.
     * @throws OptimisticLockException If the entity uses optimistic locking through a version
     *         attribute and the version check against the managed copy fails.
     * @throws InvalidArgumentException If the entity instance is NEW.
     */",
 "/**
     * Detaches an entity from the persistence management. It's persistence will
     * no longer be managed by Doctrine.
     *
     * @param object $entity The entity to detach.
     */",
 "/**
     * Executes a detach operation on the given entity.
     *
     * @param object $entity
     * @param array $visited
     * @param boolean $noCascade if true, don't cascade detach operation
     */",
 "/**
     * Refreshes the state of the given entity from the database, overwriting
     * any local, unpersisted changes.
     *
     * @param object $entity The entity to refresh.
     * @throws InvalidArgumentException If the entity is not MANAGED.
     */",
 "/**
     * Executes a refresh operation on an entity.
     *
     * @param object $entity The entity to refresh.
     * @param array $visited The already visited entities during cascades.
     * @throws InvalidArgumentException If the entity is not MANAGED.
     */",
 "/**
     * Cascades a refresh operation to associated entities.
     *
     * @param object $entity
     * @param array $visited
     */",
 "/**
     * Cascades a detach operation to associated entities.
     *
     * @param object $entity
     * @param array $visited
     */",
 "/**
     * Cascades a merge operation to associated entities.
     *
     * @param object $entity
     * @param object $managedCopy
     * @param array $visited
     */",
 "/**
     * Cascades the save operation to associated entities.
     *
     * @param object $entity
     * @param array $visited
     * @param array $insertNow
     */",
 "/**
     * Cascades the delete operation to associated entities.
     *
     * @param object $entity
     * @param array $visited
     */",
 "/**
     * Acquire a lock on the given entity.
     *
     * @param object $entity
     * @param int $lockMode
     * @param int $lockVersion
     */",
 "/**
     * Gets the CommitOrderCalculator used by the UnitOfWork to order commits.
     *
     * @return \Doctrine\ORM\Internal\CommitOrderCalculator
     */",
 "/**
     * Clears the UnitOfWork.
     *
     * @param string $entityName if given, only entities of this type will get detached
     */",
 "/**
     * INTERNAL:
     * Schedules an orphaned entity for removal. The remove() operation will be
     * invoked on that entity at the beginning of the next commit of this
     * UnitOfWork.
     *
     * @ignore
     * @param object $entity
     */",
 "/**
     * INTERNAL:
     * Schedules a complete collection for removal when this UnitOfWork commits.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * @param ClassMetadata $class
     */",
 "/**
     * INTERNAL:
     * Creates an entity. Used for reconstitution of persistent entities.
     *
     * @ignore
     * @param string $className The name of the entity class.
     * @param array $data The data for the entity.
     * @param array $hints Any hints to account for during reconstitution/lookup of the entity.
     * @return object The managed entity instance.
     * @internal Highly performance-sensitive method.
     *
     * @todo Rename: getOrCreateEntity
     */",
 "/**
     * @return void
     */",
 "/**
     * Initializes (loads) an uninitialized persistent collection of an entity.
     *
     * @param PeristentCollection $collection The collection to initialize.
     * @todo Maybe later move to EntityManager#initialize($proxyOrCollection). See DDC-733.
     */",
 "/**
     * Gets the identity map of the UnitOfWork.
     *
     * @return array
     */",
 "/**
     * Gets the original data of an entity. The original data is the data that was
     * present at the time the entity was reconstituted from the database.
     *
     * @param object $entity
     * @return array
     */",
 "/**
     * @ignore
     */",
 "/**
     * INTERNAL:
     * Sets a property value of the original data array of an entity.
     *
     * @ignore
     * @param string $oid
     * @param string $property
     * @param mixed $value
     */",
 "/**
     * Gets the identifier of an entity.
     * The returned value is always an array of identifier values. If the entity
     * has a composite identifier then the identifier values are in the same
     * order as the identifier field names as returned by ClassMetadata#getIdentifierFieldNames().
     *
     * @param object $entity
     * @return array The identifier values.
     */",
 "/**
     * Tries to find an entity with the given identifier in the identity map of
     * this UnitOfWork.
     *
     * @param mixed $id The entity identifier to look for.
     * @param string $rootClassName The name of the root class of the mapped entity hierarchy.
     * @return mixed Returns the entity with the specified identifier if it exists in
     *               this UnitOfWork, FALSE otherwise.
     */",
 "/**
     * Schedules an entity for dirty-checking at commit-time.
     *
     * @param object $entity The entity to schedule for dirty-checking.
     * @todo Rename: scheduleForSynchronization
     */",
 "/**
     * Checks whether the UnitOfWork has any pending insertions.
     *
     * @return boolean TRUE if this UnitOfWork has pending insertions, FALSE otherwise.
     */",
 "/**
     * Calculates the size of the UnitOfWork. The size of the UnitOfWork is the
     * number of entities in the identity map.
     *
     * @return integer
     */",
 "/**
     * Gets the EntityPersister for an Entity.
     *
     * @param string $entityName  The name of the Entity.
     *
     * @return \Doctrine\ORM\Persisters\BasicEntityPersister
     */",
 "/**
     * Gets a collection persister for a collection-valued association.
     *
     * @param AssociationMapping $association
     *
     * @return AbstractCollectionPersister
     */",
 "/**
     * INTERNAL:
     * Registers an entity as managed.
     *
     * @param object $entity The entity.
     * @param array $id The identifier values.
     * @param array $data The original entity data.
     */",
 "/**
     * INTERNAL:
     * Clears the property changeset of the entity with the given OID.
     *
     * @param string $oid The entity's OID.
     */",
 "/**
     * Notifies this UnitOfWork of a property change in an entity.
     *
     * @param object $entity The entity that owns the property.
     * @param string $propertyName The name of the property that changed.
     * @param mixed $oldValue The old value of the property.
     * @param mixed $newValue The new value of the property.
     */",
 "/**
     * Gets the currently scheduled entity insertions in this UnitOfWork.
     *
     * @return array
     */",
 "/**
     * Gets the currently scheduled entity updates in this UnitOfWork.
     *
     * @return array
     */",
 "/**
     * Gets the currently scheduled entity deletions in this UnitOfWork.
     *
     * @return array
     */",
 "/**
     * Get the currently scheduled complete collection deletions
     *
     * @return array
     */",
 "/**
     * Gets the currently scheduled collection inserts, updates and deletes.
     *
     * @return array
     */",
 "/**
     * Helper method to initialize a lazy loading proxy or persistent collection.
     *
     * @param object
     * @return void
     */",
 "/**
     * Helper method to show an object as string.
     *
     * @param  object $obj
     * @return string
     */",
 "/**
     * Marks an entity as read-only so that it will not be considered for updates during UnitOfWork#commit().
     *
     * This operation cannot be undone as some parts of the UnitOfWork now keep gathering information
     * on this object that might be necessary to perform a correct udpate.
     *
     * @throws \InvalidArgumentException
     * @param $object
     * @return void
     */",
 "/**
     * Is this entity read only?
     *
     * @throws \InvalidArgumentException
     * @param $object
     * @return void
     */",
 "/**
 * The UnitOfWork is responsible for tracking changes to objects during an
 * \"object-level\" transaction and for writing out changes to the database
 * in the correct order.
 *
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 * @internal    This class contains highly performance-sensitive code.
 */",
 "/**
     * Attempts to establish a connection with the underlying driver.
     *
     * @param array $params
     * @param string $username
     * @param string $password
     * @param array $driverOptions
     * @return Doctrine\DBAL\Driver\Connection
     */",
 "/**
     * Constructs the MySql PDO DSN.
     *
     * @return string  The DSN.
     */",
 "/**
 * PDO MySql driver.
 *
 * @since 2.0
 */",
 "/**
     * Constructs a new parse tree printer.
     *
     * @param bool $silent Parse tree will not be printed if true.
     */",
 "/**
     * Prints an opening parenthesis followed by production name and increases
     * indentation level by one.
     *
     * This method is called before executing a production.
     *
     * @param string $name production name
     */",
 "/**
     * Decreases indentation level by one and prints a closing parenthesis.
     *
     * This method is called after executing a production.
     */",
 "/**
     * Prints text indented with spaces depending on current indentation level.
     *
     * @param string $str text
     */",
 "/**
 * A parse tree printer for Doctrine Query Language parser.
 *
 * @author      Janne Vanhala <jpvanhal@cc.hut.fi>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        http://www.phpdoctrine.org
 * @since       2.0
 * @version     $Revision$
 */",
 "/**
*DeterminesifaPHPvaluewouldrequiredoublequotinginYAML.
*
*@paramstring$valueAPHPvalue
*
*@returnBooleanTrueifthevaluewouldrequiredoublequotes.
*/",
 "/**
     * Escapes and surrounds a PHP value with double quotes.
     *
     * @param string $value A PHP value
     *
     * @return string The quoted, escaped string
     */",
 "/**
     * Determines if a PHP value would require single quoting in YAML.
     *
     * @param string $value A PHP value
     *
     * @return Boolean True if the value would require single quotes.
     */",
 "/**
     * Escapes and surrounds a PHP value with single quotes.
     *
     * @param string $value A PHP value
     *
     * @return string The quoted, escaped string
     */",
 "/**
 * Escaper encapsulates escaping rules for single and double-quoted
 * YAML strings.
 *
 * @author Matthew Lewinski <matthew@lewinski.org>
 */",
 "/**
 * Exception thrown when an ORM query unexpectedly does not return any results.
 *
 * @author robo
 * @since 2.0
 */",
 "/**
 * Description of GroupByClause
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Gets the SQL statements that are executed by the executor.
     *
     * @return array  All the SQL update statements.
     */",
 "/**
     * Executes all sql statements.
     *
     * @param \Doctrine\DBAL\Connection $conn The database connection that is used to execute the queries.
     * @param array $params  The parameters.
     * @param array $types The parameter types.
     * @return \Doctrine\DBAL\Driver\Statement
     */",
 "/**
 * Base class for SQL statement executors.
 *
 * @author      Roman Borschel <roman@code-factory.org>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        http://www.doctrine-project.org
 * @since       2.0
 * @todo Rename: AbstractSQLExecutor
 */",
 "/**
     * @return string
     */",
 "/**
 * Representation of a Database View
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Parses YAML into a PHP array.
     *
     * The parse method, when supplied with a YAML stream (string or file),
     * will do its best to convert YAML in a file into a PHP array.
     *
     *  Usage:
     *  <code>
     *   $array = Yaml::parse('config.yml');
     *   print_r($array);
     *  </code>
     *
     * @param string $input Path to a YAML file or a string containing YAML
     *
     * @return array The YAML converted to a PHP array
     *
     * @throws \InvalidArgumentException If the YAML is not valid
     *
     * @api
     */",
 "/**
     * Dumps a PHP array to a YAML string.
     *
     * The dump method, when supplied with an array, will do its best
     * to convert the array into friendly YAML.
     *
     * @param array   $array PHP array
     * @param integer $inline The level where you switch to inline YAML
     *
     * @return string A YAML string representing the original PHP array
     *
     * @api
     */",
 "/**
 * Yaml offers convenience methods to load and dump YAML.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Show information about mapped entities
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     *
     * @param string $tableName
     * @param array $columns
     * @param array $indexes
     * @param array $fkConstraints
     * @param int $idGeneratorType
     * @param array $options
     */",
 "/**
     * @param SchemaConfig $schemaConfig
     */",
 "/**
     * @return int
     */",
 "/**
     * Set Primary Key
     *
     * @param array $columns
     * @param string $indexName
     * @return Table
     */",
 "/**
     * @param array $columnNames
     * @param string $indexName
     * @return Table
     */",
 "/**
     *
     * @param array $columnNames
     * @param string $indexName
     * @return Table
     */",
 "/**
     * Check if an index begins in the order of the given columns.
     *
     * @param  array $columnsNames
     * @return bool
     */",
 "/**
     *
     * @param array $columnNames
     * @param string $indexName
     * @param bool $isUnique
     * @param bool $isPrimary
     * @return Table
     */",
 "/**
     * @param string $columnName
     * @param string $columnType
     * @param array $options
     * @return Column
     */",
 "/**
     * Rename Column
     *
     * @param string $oldColumnName
     * @param string $newColumnName
     * @return Table
     */",
 "/**
     * Change Column Details
     *
     * @param string $columnName
     * @param array $options
     * @return Table
     */",
 "/**
     * Drop Column from Table
     *
     * @param string $columnName
     * @return Table
     */",
 "/**
     * Add a foreign key constraint
     *
     * Name is inferred from the local columns
     *
     * @param Table $foreignTable
     * @param array $localColumns
     * @param array $foreignColumns
     * @param array $options
     * @param string $constraintName
     * @return Table
     */",
 "/**
     * Add a foreign key constraint
     *
     * Name is to be generated by the database itsself.
     *
     * @deprecated Use {@link addForeignKeyConstraint}
     * @param Table $foreignTable
     * @param array $localColumns
     * @param array $foreignColumns
     * @param array $options
     * @return Table
     */",
 "/**
     * Add a foreign key constraint with a given name
     *
     * @deprecated Use {@link addForeignKeyConstraint}
     * @param string $name
     * @param Table $foreignTable
     * @param array $localColumns
     * @param array $foreignColumns
     * @param array $options
     * @return Table
     */",
 "/**
     * @param string $name
     * @param string $value
     * @return Table
     */",
 "/**
     * @param Column $column
     */",
 "/**
     * Add index to table
     *
     * @param Index $indexCandidate
     * @return Table
     */",
 "/**
     * @param ForeignKeyConstraint $constraint
     */",
 "/**
     * Does Table have a foreign key constraint with the given name?
     *      *
     * @param  string $constraintName
     * @return bool
     */",
 "/**
     * @param string $constraintName
     * @return ForeignKeyConstraint
     */",
 "/**
     * @return Column[]
     */",
 "/**
     * Does this table have a column with the given name?
     *
     * @param  string $columnName
     * @return bool
     */",
 "/**
     * Get a column instance
     *
     * @param  string $columnName
     * @return Column
     */",
 "/**
     * @return Index|null
     */",
 "/**
     * Check if this table has a primary key.
     *
     * @return bool
     */",
 "/**
     * @param  string $indexName
     * @return bool
     */",
 "/**
     * @param  string $indexName
     * @return Index
     */",
 "/**
     * @return array
     */",
 "/**
     * Get Constraints
     *
     * @return array
     */",
 "/**
     * @param Visitor $visitor
     */",
 "/**
     * Clone of a Table triggers a deep clone of all affected assets
     */",
 "/**
 * Object Representation of a table
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Abtract Function Node.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Return an array of the parent classes (not interfaces) for the given class.
     *
     * @param string $class
     * @return array
     */",
 "/**
*Returntheshortnameofaclass.
*
*@paramstring$className
*@returnstring
*/",
 "/**
*Returnthenamespaceofaclass.
*
*@paramstring$className
*@returnstring
*/",
 "/**
*Returnareflectionclassinstanceornull
*
*@paramstring$class
*@returnReflectionClass|null
*/",
 "/**
*Returnanaccessibleproperty(setAccessible(true))ornull.
*
*@paramstring$class
*@paramstring$property
*@returnReflectionProperty|null
*/",
 "/**
*Checkiftheclasshaveapublicmethodwiththegivenname.
*
*@parammixed$class
*@parammixed$method
*@returnbool
*/",
 "/**
*PHPRuntimeReflectionService
*
*@authorBenjaminEberlei<kontakt@beberlei.de>
*/",
 "/**
     * @param string $seqName The name of the sequence to pass to lastInsertId()
     *                        to obtain the last generated identifier within the current
     *                        database session/connection, if any.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Id generator that obtains IDs from special \"identity\" columns. These are columns
 * that automatically get a database-generated, auto-incremented identifier on INSERT.
 * This generator obtains the last insert id after such an insert.
 */",
 "/**
 * Marker interface for contraints
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @param string $sql
     */",
 "/**
     * @param ConnectionEventArgs $args
     * @return void
     */",
 "/**
 * Session init listener for executing a single SQL statement right after a connection is opened.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor. Accepts the Connection instance to manage the schema for
     *
     * @param \Doctrine\DBAL\Connection $conn
     */",
 "/**
     * Return associated platform.
     *
     * @return \Doctrine\DBAL\Platform\AbstractPlatform
     */",
 "/**
     * Try any method on the schema manager. Normally a method throws an
     * exception when your DBMS doesn't support it or if an error occurs.
     * This method allows you to try and method on your SchemaManager
     * instance and will return false if it does not work or is not supported.
     *
     * <code>
     * $result = $sm->tryMethod('dropView', 'view_name');
     * </code>
     *
     * @return mixed
     */",
 "/**
     * List the available databases for this connection
     *
     * @return array $databases
     */",
 "/**
     * List the available sequences for this connection
     *
     * @return Sequence[]
     */",
 "/**
     * List the columns for a given table.
     *
     * In contrast to other libraries and to the old version of Doctrine,
     * this column definition does try to contain the 'primary' field for
     * the reason that it is not portable accross different RDBMS. Use
     * {@see listTableIndexes($tableName)} to retrieve the primary key
     * of a table. We're a RDBMS specifies more details these are held
     * in the platformDetails array.
     *
     * @param string $table The name of the table.
     * @param string $database
     * @return Column[]
     */",
 "/**
     * List the indexes for a given table returning an array of Index instances.
     *
     * Keys of the portable indexes list are all lower-cased.
     *
     * @param string $table The name of the table
     * @return Index[] $tableIndexes
     */",
 "/**
     * Return true if all the given tables exist.
     *
     * @param array $tableNames
     * @return bool
     */",
 "/**
     * Return a list of all tables in the current database
     *
     * @return array
     */",
 "/**
     * Filter asset names if they are configured to return only a subset of all
     * the found elements.
     *
     * @param array $assetNames
     * @return array
     */",
 "/**
     * List the tables for this connection
     *
     * @return Table[]
     */",
 "/**
     * @param  string $tableName
     * @return Table
     */",
 "/**
     * List the views this connection has
     *
     * @return View[]
     */",
 "/**
     * List the foreign keys for the given table
     *
     * @param string $table  The name of the table
     * @return ForeignKeyConstraint[]
     */",
 "/**
     * Drops a database.
     *
     * NOTE: You can not drop the database this SchemaManager is currently connected to.
     *
     * @param string $database The name of the database to drop
     */",
 "/**
     * Drop the given table
     *
     * @param string $table The name of the table to drop
     */",
 "/**
     * Drop the index from the given table
     *
     * @param Index|string $index  The name of the index
     * @param string|Table $table The name of the table
     */",
 "/**
     * Drop the constraint from the given table
     *
     * @param Constraint $constraint
     * @param string $table   The name of the table
     */",
 "/**
     * Drops a foreign key from a table.
     *
     * @param ForeignKeyConstraint|string $table The name of the table with the foreign key.
     * @param Table|string $name  The name of the foreign key.
     * @return boolean $result
     */",
 "/**
     * Drops a sequence with a given name.
     *
     * @param string $name The name of the sequence to drop.
     */",
 "/**
     * Drop a view
     *
     * @param string $name The name of the view
     * @return boolean $result
     */",
 "/**
     * Creates a new database.
     *
     * @param string $database The name of the database to create.
     */",
 "/**
     * Create a new table.
     *
     * @param Table $table
     * @param int $createFlags
     */",
 "/**
     * Create a new sequence
     *
     * @param Sequence $sequence
     * @throws Doctrine\DBAL\ConnectionException     if something fails at database level
     */",
 "/**
     * Create a constraint on a table
     *
     * @param Constraint $constraint
     * @param string|Table $table
     */",
 "/**
     * Create a new index on a table
     *
     * @param Index     $index
     * @param string    $table         name of the table on which the index is to be created
     */",
 "/**
     * Create a new foreign key
     *
     * @param ForeignKeyConstraint  $foreignKey    ForeignKey instance
     * @param string|Table          $table         name of the table on which the foreign key is to be created
     */",
 "/**
     * Create a new view
     *
     * @param View $view
     */",
 "/**
     * Drop and create a constraint
     *
     * @param Constraint    $constraint
     * @param string        $table
     * @see dropConstraint()
     * @see createConstraint()
     */",
 "/**
     * Drop and create a new index on a table
     *
     * @param string|Table $table         name of the table on which the index is to be created
     * @param Index $index
     */",
 "/**
     * Drop and create a new foreign key
     *
     * @param ForeignKeyConstraint  $foreignKey    associative array that defines properties of the foreign key to be created.
     * @param string|Table          $table         name of the table on which the foreign key is to be created
     */",
 "/**
     * Drop and create a new sequence
     *
     * @param Sequence $sequence
     * @throws Doctrine\DBAL\ConnectionException     if something fails at database level
     */",
 "/**
     * Drop and create a new table.
     *
     * @param Table $table
     */",
 "/**
     * Drop and creates a new database.
     *
     * @param string $database The name of the database to create.
     */",
 "/**
     * Drop and create a new view
     *
     * @param View $view
     */",
 "/**
     * Alter an existing tables schema
     *
     * @param TableDiff $tableDiff
     */",
 "/**
     * Rename a given table to another name
     *
     * @param string $name     The current name of the table
     * @param string $newName  The new name of the table
     */",
 "/**
     * Methods for filtering return values of list*() methods to convert
     * the native DBMS data definition to a portable Doctrine definition
     */",
 "/**
     * @param array $sequence
     * @return Sequence
     */",
 "/**
     * Independent of the database the keys of the column list result are lowercased.
     *
     * The name of the created column instance however is kept in its case.
     *
     * @param  string $table The name of the table.
     * @param  string $database
     * @param  array  $tableColumns
     * @return array
     */",
 "/**
     * Get Table Column Definition
     *
     * @param array $tableColumn
     * @return Column
     */",
 "/**
     * Aggregate and group the index results according to the required data result.
     *
     * @param  array $tableIndexRows
     * @param  string $tableName
     * @return array
     */",
 "/**
     * Create a schema instance for the current database.
     *
     * @return Schema
     */",
 "/**
     * Create the configuration for this schema.
     *
     * @return SchemaConfig
     */",
 "/**
     * The search path for namespaces in the currently connected database.
     *
     * The first entry is usually the default namespace in the Schema. All
     * further namespaces contain tables/sequences which can also be addressed
     * with a short, not full-qualified name.
     *
     * For databases that don't support subschema/namespaces this method
     * returns the name of the currently connected database.
     *
     * @return array
     */",
 "/**
     * Given a table comment this method tries to extract a typehint for Doctrine Type, or returns
     * the type given as default.
     *
     * @param  string $comment
     * @param  string $currentType
     * @return string
     */",
 "/**
 * Base class for schema managers. Schema managers are used to inspect and/or
 * modify the database schema/structure.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Roman Borschel <roman@code-factory.org>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @since       2.0
 */",
 "/**
     * Sets the memcache instance to use.
     *
     * @param Memcache $memcache
     */",
 "/**
     * Gets the memcache instance used by the cache.
     *
     * @return Memcache
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Memcache cache provider.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
 * A <tt>ClassMetadata</tt> instance holds all the object-relational mapping metadata
 * of an entity and it's associations.
 *
 * Once populated, ClassMetadata instances are usually cached in a serialized form.
 *
 * <b>IMPORTANT NOTE:</b>
 *
 * The fields of this class are only public for 2 reasons:
 * 1) To allow fast READ access.
 * 2) To drastically reduce the size of a serialized instance (private/protected members
 *    get the whole class name, namespace inclusive, prepended to every property in
 *    the serialized representation).
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @since 2.0
 */",
 "/**
     * @return EntityGenerator
     */",
 "/**
     * @param EntityGenerator $entityGenerator
     */",
 "/**
     * @return ClassMetadataExporter
     */",
 "/**
     * @param ClassMetadataExporter $metadataExporter
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @param \Doctrine\ORM\EntityManager $em
     * @param array $fromPaths
     * @param string $destPath
     * @param string $toType
     * @param int $numSpaces
     * @param string|null $extend
     * @param Console\Output\OutputInterface $output
     */",
 "/**
 * Command to convert a Doctrine 1 schema to a Doctrine 2 mapping file.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to convert your mapping information between the various formats.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * InstanceOfExpression ::= IdentificationVariable [\"NOT\"] \"INSTANCE\" [\"OF\"] (InstanceOfParameter | \"(\" InstanceOfParameter {\",\" InstanceOfParameter}* \")\")
 * InstanceOfParameter  ::= AbstractSchemaName | InputParameter
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     *
     * @param ClassMetadataBuilder $builder
     * @param array $mapping
     */",
 "/**
     * Set length.
     *
     * @param int $length
     * @return FieldBuilder
     */",
 "/**
     * Set nullable
     *
     * @param bool
     * @return FieldBuilder
     */",
 "/**
     * Set Unique
     *
     * @param bool
     * @return FieldBuilder
     */",
 "/**
     * Set column name
     *
     * @param string $name
     * @return FieldBuilder
     */",
 "/**
     * Set Precision
     *
     * @param  int $p
     * @return FieldBuilder
     */",
 "/**
     * Set scale.
     *
     * @param int $s
     * @return FieldBuilder
     */",
 "/**
     * Set field as primary key.
     *
     * @return FieldBuilder
     */",
 "/**
     * @param  int $strategy
     * @return FieldBuilder
     */",
 "/**
     * Set field versioned
     *
     * @return FieldBuilder
     */",
 "/**
     * Set Sequence Generator
     *
     * @param string $sequenceName
     * @param int $allocationSize
     * @param int $initialValue
     * @return FieldBuilder
     */",
 "/**
     * Set column definition.
     *
     * @param string $def
     * @return FieldBuilder
     */",
 "/**
     * Finalize this field and attach it to the ClassMetadata.
     *
     * Without this call a FieldBuilder has no effect on the ClassMetadata.
     *
     * @return ClassMetadataBuilder
     */",
 "/**
 * Field Builder
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Double-dispatch method, supposed to dispatch back to the walker.
     *
     * Implementation is not mandatory for all nodes.
     *
     * @param $walker
     */",
 "/**
     * Dumps the AST Node into a string representation for information purpose only
     *
     * @return string
     */",
 "/**
 * Abstract class of an AST node
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * ComparisonExpression ::= ArithmeticExpression ComparisonOperator ( QuantifiedExpression | ArithmeticExpression ) |
 *                          StringExpression ComparisonOperator (StringExpression | QuantifiedExpression) |
 *                          BooleanExpression (\"=\" | \"<>\" | \"!=\") (BooleanExpression | QuantifiedExpression) |
 *                          EnumExpression (\"=\" | \"<>\" | \"!=\") (EnumExpression | QuantifiedExpression) |
 *                          DatetimeExpression ComparisonOperator (DatetimeExpression | QuantifiedExpression) |
 *                          EntityExpression (\"=\" | \"<>\") (EntityExpression | QuantifiedExpression)
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
*Getsaclassannotation.
*
*@paramReflectionClass$classTheReflectionClassoftheclassfromwhich
*theclassannotationsshouldberead.
*@paramstring$annotationNameThenameoftheannotation.
*@returnTheAnnotationorNULL,iftherequestedannotationdoesnotexist.
*/",
 "/**
*Getsamethodannotation.
*
*@paramReflectionMethod$method
*@paramstring$annotationNameThenameoftheannotation.
*@returnTheAnnotationorNULL,iftherequestedannotationdoesnotexist.
*/",
 "/**
*Getsapropertyannotation.
*
*@paramReflectionProperty$property
*@paramstring$annotationNameThenameoftheannotation.
*@returnTheAnnotationorNULL,iftherequestedannotationdoesnotexist.
*/",
 "/**
*Filecachereaderforannotations.
*
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*@authorBenjaminEberlei<kontakt@beberlei.de>
*/",
 "/**
 * Expression class for building DQL and parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param AbstractPlatform $platform
     */",
 "/**
     * @param Schema $schema
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @param Column $column
     */",
 "/**
     * @param Table $localTable
     * @param ForeignKeyConstraint $fkConstraint
     */",
 "/**
     * @param Table $table
     * @param Index $index
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
     * @return void
     */",
 "/**
     * @return array
     */",
 "/**
 * Gather SQL statements that allow to completly drop the current schema.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new FileDriver that looks in the given path(s) for mapping
     * documents and operates in the specified operating mode.
     *
     * @param string|array|FileLocator $paths A FileLocator or one/multiple paths where mapping documents can be found.
     * @param string $fileExtension
     */",
 "/**
     * Get the element of schema meta data for the class from the mapping file.
     * This will lazily load the mapping file if it is not loaded yet
     *
     * @return array $element  The element of schema meta data
     */",
 "/**
     * Whether the class with the specified name should have its metadata loaded.
     * This is only the case if it is either mapped as an Entity or a
     * MappedSuperclass.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
     * Gets the names of all mapped classes known to this driver.
     *
     * @return array The names of all mapped classes known to this driver.
     */",
 "/**
     * Loads a mapping file with the given name and returns a map
     * from class/entity names to their corresponding file driver elements.
     *
     * @param string $file The mapping file to load.
     * @return array
     */",
 "/**
     * Initialize the class cache from all the global files.
     *
     * Using this feature adds a substantial performance hit to file drivers as
     * more metadata has to be loaded into memory than might actually be
     * necessary. This may not be relevant to scenarios where caching of
     * metadata is in place, however hits very hard in scenarios where no
     * caching is used.
     *
     * @return void
     */",
 "/**
 * Base driver for file-based metadata drivers.
 *
 * A file driver operates in a mode where it loads the mapping files of individual
 * classes on demand. This requires the user to adhere to the convention of 1 mapping
 * file per class and the file names of the mapping files must correspond to the full
 * class name, including namespace, with the namespace delimiters '\', replaced by dots '.'.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * The PDO implementation of the Statement interface.
 * Used by all PDO-based drivers.
 *
 * @since 2.0
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"CURRENT_DATE\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new <tt>EntityRepository</tt>.
     *
     * @param EntityManager $em The EntityManager to use.
     * @param ClassMetadata $classMetadata The class descriptor.
     */",
 "/**
     * Create a new QueryBuilder instance that is prepopulated for this entity name
     *
     * @param string $alias
     * @return QueryBuilder $qb
     */",
 "/**
     * Create a new Query instance based on a predefined metadata named query.
     *
     * @param string $queryName
     * @return Query
     */",
 "/**
     * Clears the repository, causing all managed entities to become detached.
     */",
 "/**
     * Finds an entity by its primary key / identifier.
     *
     * @param $id The identifier.
     * @param int $lockMode
     * @param int $lockVersion
     * @return object The entity.
     */",
 "/**
     * Finds all entities in the repository.
     *
     * @return array The entities.
     */",
 "/**
     * Finds entities by a set of criteria.
     *
     * @param array $criteria
     * @param array|null $orderBy
     * @param int|null $limit
     * @param int|null $offset
     * @return array The objects.
     */",
 "/**
     * Finds a single entity by a set of criteria.
     *
     * @param array $criteria
     * @return object
     */",
 "/**
     * Adds support for magic finders.
     *
     * @return array|object The found entity/entities.
     * @throws BadMethodCallException  If the method called is an invalid find* method
     *                                 or no find* method at all and therefore an invalid
     *                                 method call.
     */",
 "/**
     * @return string
     */",
 "/**
     * @return string
     */",
 "/**
     * @return EntityManager
     */",
 "/**
     * @return Mapping\ClassMetadata
     */",
 "/**
 * An EntityRepository serves as a repository for entities with generic as well as
 * business specific methods for retrieving entities.
 *
 * This class is designed for inheritance and users can subclass this class to
 * write their own repositories with business-specific methods to locate entities.
 *
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * UpdateStatement = UpdateClause [WhereClause]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Retrieve mysqli native resource handle.
     *
     * Could be used if part of your application is not using DBAL
     *
     * @return mysqli
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}non-PHPdoc)
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * @author Kim Hems?? Rasmussen <kimhemsoe@gmail.com>
 */",
 "/**
 * Expression class for building DQL select statements
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"LENGTH\" \"(\" StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * WinCache cache provider.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
     * @param EntityManager $$em
     */",
 "/**
     * Sets the cache driver used by the factory to cache ClassMetadata instances.
     *
     * @param \Doctrine\Common\Cache\Cache $cacheDriver
     */",
 "/**
     * Gets the cache driver used by the factory to cache ClassMetadata instances.
     *
     * @return \Doctrine\Common\Cache\Cache
     */",
 "/**
     * Forces the factory to load the metadata of all classes known to the underlying
     * mapping driver.
     *
     * @return array The ClassMetadata instances of all mapped classes.
     */",
 "/**
     * Lazy initialization of this stuff, especially the metadata driver,
     * since these are not needed at all when a metadata cache is active.
     */",
 "/**
*Getstheclassmetadatadescriptorforaclass.
*
*@paramstring$classNameThenameoftheclass.
*@return\Doctrine\ORM\Mapping\ClassMetadata
*/",
 "/**
*Checkswhetherthefactoryhasthemetadataforaclassloadedalready.
*
*@paramstring$className
*@returnbooleanTRUEifthemetadataoftheclassinquestionisalreadyloaded,FALSEotherwise.
*/",
 "/**
*Setsthemetadatadescriptorforaspecificclass.
*
*NOTE:Thisisonlyusefulinveryspecialcases,likewhengeneratingproxyclasses.
*
*@paramstring$className
*@paramClassMetadata$class
*/",
 "/**
*Getarrayofparentclassesforthegivenentityclass
*
*@paramstring$name
*@returnarray$parentClasses
*/",
 "/**
*Loadsthemetadataoftheclassinquestionandallit'sancestorswhosemetadata
*isstillnotloaded.
*
*@paramstring$nameThenameoftheclassforwhichthemetadatashouldgetloaded.
*@paramarray$tablesThemetadatacollectiontowhichtheloadedmetadataisadded.
*/",
 "/**
*Validateruntimemetadataiscorrectlydefined.
*
*@paramClassMetadata$class
*@paramClassMetadata$parent
*/",
 "/**
*CreatesanewClassMetadatainstanceforthegivenclassname.
*
*@paramstring$className
*@return\Doctrine\ORM\Mapping\ClassMetadata
*/",
 "/**
*Addsinheritedfieldstothesubclassmapping.
*
*@param\Doctrine\ORM\Mapping\ClassMetadata$subClass
*@param\Doctrine\ORM\Mapping\ClassMetadata$parentClass
*/",
 "/**
*Addsinheritedassociationmappingstothesubclassmapping.
*
*@param\Doctrine\ORM\Mapping\ClassMetadata$subClass
*@param\Doctrine\ORM\Mapping\ClassMetadata$parentClass
*/",
 "/**
*Addsinheritednamedqueriestothesubclassmapping.
*
*@since2.2
*@param\Doctrine\ORM\Mapping\ClassMetadata$subClass
*@param\Doctrine\ORM\Mapping\ClassMetadata$parentClass
*/",
 "/**
*CompletestheIDgeneratormapping.If\"auto\" is specified we choose the generator
     * most appropriate for the targeted database platform.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
*CheckifthisclassismappedbythisEntityManager+ClassMetadataconfiguration
*
*@param$class
*@returnbool
*/",
 "/**
*GetreflectionService.
*
*@return\Doctrine\Common\Persistence\Mapping\ReflectionService
*/",
 "/**
*SetreflectionService.
*
*@paramreflectionServicethevaluetoset.
*/",
 "/**
*WakeupreflectionafterClassMetadatagetsunserializedfromcache.
*
*@paramClassMetadataInfo$class
*@paramReflectionService$reflService
*@returnvoid
*/",
 "/**
*InitializeReflectionafterClassMetadatawasconstructed.
*
*@paramClassMetadataInfo$class
*@paramReflectionService$reflService
*@returnvoid
*/",
 "/**
*TheClassMetadataFactoryisusedtocreateClassMetadataobjectsthatcontainallthe
*metadatamappinginformationsofaclasswhichdescribeshowaclassshouldbemapped
*toarelationaldatabase.
*
*@since2.0
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to (re)generate the proxy classes used by doctrine.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Initializes console output formatter.
     *
     * @param   Boolean $decorated  Whether this formatter should actually decorate strings
     * @param   array   $styles     Array of \"name => FormatterStyle\" instance
     *
     * @api
     */",
 "/**
     * Sets the decorated flag.
     *
     * @param Boolean $decorated Whether to decorated the messages or not
     *
     * @api
     */",
 "/**
     * Gets the decorated flag.
     *
     * @return Boolean true if the output will decorate messages, false otherwise
     *
     * @api
     */",
 "/**
     * Sets a new style.
     *
     * @param string                        $name  The style name
     * @param OutputFormatterStyleInterface $style The style instance
     *
     * @api
     */",
 "/**
     * Checks if output formatter has style with specified name.
     *
     * @param   string  $name
     *
     * @return  Boolean
     *
     * @api
     */",
 "/**
     * Gets style options from style with specified name.
     *
     * @param   string  $name
     *
     * @return  OutputFormatterStyleInterface
     *
     * @api
     */",
 "/**
     * Formats a message according to the given styles.
     *
     * @param  string $message The message to style
     *
     * @return string The styled message
     *
     * @api
     */",
 "/**
     * Replaces style of the output.
     *
     * @param array $match
     *
     * @return string The replaced style
     */",
 "/**
     * Tries to create new style instance from string.
     *
     * @param   string  $string
     *
     * @return  Symfony\Component\Console\Format\FormatterStyle|Boolean false if string is not format string
     */",
 "/**
 * Formatter class for console output.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * @api
 */",
 "/**
     * Constructor
     *
     * @param object $entity
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Retireve associated Entity.
     *
     * @return object
     */",
 "/**
     * Retrieve associated EntityManager.
     *
     * @return \Doctrine\ORM\EntityManager
     */",
 "/**
 * Lifecycle Events are triggered by the UnitOfWork during lifecycle transitions
 * of entities.
 *
 * @link   www.doctrine-project.org
 * @since  2.0
 * @author Roman Borschel <roman@code-factory.de>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Convert word in to the format for a Doctrine table name. Converts 'ModelName' to 'model_name'
     *
     * @param  string $word  Word to tableize
     * @return string $word  Tableized word
     */",
 "/**
     * Convert a word in to the format for a Doctrine class name. Converts 'table_name' to 'TableName'
     *
     * @param string  $word  Word to classify
     * @return string $word  Classified word
     */",
 "/**
     * Camelize a word. This uses the classify() method and turns the first character to lowercase
     *
     * @param string $word
     * @return string $word
     */",
 "/**
 * Doctrine inflector has static methods for inflecting text
 *
 * The methods in these classes are from several different sources collected
 * across several different php projects and several different authors. The
 * original author names and emails are not known
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       1.0
 * @version     $Revision: 3189 $
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Initializes a new instance of the Connection class.
     *
     * @param array $params  The connection parameters.
     * @param Driver $driver
     * @param Configuration $config
     * @param EventManager $eventManager
     */",
 "/**
     * Gets the parameters used during instantiation.
     *
     * @return array $params
     */",
 "/**
     * Gets the name of the database this Connection is connected to.
     *
     * @return string $database
     */",
 "/**
     * Gets the hostname of the currently connected database.
     *
     * @return string
     */",
 "/**
     * Gets the port of the currently connected database.
     *
     * @return mixed
     */",
 "/**
     * Gets the username used by this connection.
     *
     * @return string
     */",
 "/**
     * Gets the password used by this connection.
     *
     * @return string
     */",
 "/**
     * Gets the DBAL driver instance.
     *
     * @return \Doctrine\DBAL\Driver
     */",
 "/**
     * Gets the Configuration used by the Connection.
     *
     * @return \Doctrine\DBAL\Configuration
     */",
 "/**
     * Gets the EventManager used by the Connection.
     *
     * @return \Doctrine\Common\EventManager
     */",
 "/**
     * Gets the DatabasePlatform for the connection.
     *
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * Gets the ExpressionBuilder for the connection.
     *
     * @return \Doctrine\DBAL\Query\ExpressionBuilder
     */",
 "/**
     * Establishes the connection with the database.
     *
     * @return boolean TRUE if the connection was successfully established, FALSE if
     *                 the connection is already open.
     */",
 "/**
     * Prepares and executes an SQL query and returns the first row of the result
     * as an associative array.
     *
     * @param string $statement The SQL query.
     * @param array $params The query parameters.
     * @return array
     */",
 "/**
     * Prepares and executes an SQL query and returns the first row of the result
     * as a numerically indexed array.
     *
     * @param string $statement         sql query to be executed
     * @param array $params             prepared statement params
     * @return array
     */",
 "/**
     * Prepares and executes an SQL query and returns the value of a single column
     * of the first row of the result.
     *
     * @param string $statement         sql query to be executed
     * @param array $params             prepared statement params
     * @param int $colnum               0-indexed column number to retrieve
     * @return mixed
     */",
 "/**
     * Whether an actual connection to the database is established.
     *
     * @return boolean
     */",
 "/**
     * Checks whether a transaction is currently active.
     *
     * @return boolean TRUE if a transaction is currently active, FALSE otherwise.
     */",
 "/**
     * Executes an SQL DELETE statement on a table.
     *
     * @param string $table The name of the table on which to delete.
     * @param array $identifier The deletion criteria. An associateve array containing column-value pairs.
     * @return integer The number of affected rows.
     */",
 "/**
     * Closes the connection.
     *
     * @return void
     */",
 "/**
     * Sets the transaction isolation level.
     *
     * @param integer $level The level to set.
     */",
 "/**
     * Gets the currently active transaction isolation level.
     *
     * @return integer The current transaction isolation level.
     */",
 "/**
     * Executes an SQL UPDATE statement on a table.
     *
     * @param string $table The name of the table to update.
     * @param array $identifier The update criteria. An associative array containing column-value pairs.
     * @param array $types Types of the merged $data and $identifier arrays in that order.
     * @return integer The number of affected rows.
     */",
 "/**
     * Inserts a table row with specified data.
     *
     * @param string $table The name of the table to insert data into.
     * @param array $data An associative array containing column-value pairs.
     * @param array $types Types of the inserted data.
     * @return integer The number of affected rows.
     */",
 "/**
     * Sets the given charset on the current connection.
     *
     * @param string $charset The charset to set.
     */",
 "/**
     * Quote a string so it can be safely used as a table or column name, even if
     * it is a reserved name.
     *
     * Delimiting style depends on the underlying database platform that is being used.
     *
     * NOTE: Just because you CAN use quoted identifiers does not mean
     * you SHOULD use them. In general, they end up causing way more
     * problems than they solve.
     *
     * @param string $str The name to be quoted.
     * @return string The quoted name.
     */",
 "/**
     * Quotes a given input parameter.
     *
     * @param mixed $input Parameter to be quoted.
     * @param string $type Type of the parameter.
     * @return string The quoted parameter.
     */",
 "/**
     * Prepares and executes an SQL query and returns the result as an associative array.
     *
     * @param string $sql The SQL query.
     * @param array $params The query parameters.
     * @return array
     */",
 "/**
     * Prepares an SQL statement.
     *
     * @param string $statement The SQL statement to prepare.
     * @return Doctrine\DBAL\Driver\Statement The prepared statement.
     */",
 "/**
     * Executes an, optionally parameterized, SQL query.
     *
     * If the query is parameterized, a prepared statement is used.
     * If an SQLLogger is configured, the execution is logged.
     *
     * @param string $query The SQL query to execute.
     * @param array $params The parameters to bind to the query, if any.
     * @param array $types The types the previous parameters are in.
     * @param QueryCacheProfile $qcp
     * @return Doctrine\DBAL\Driver\Statement The executed statement.
     * @internal PERF: Directly prepares a driver statement, not a wrapper.
     */",
 "/**
     * Execute a caching query and
     *
     * @param string $query
     * @param array $params
     * @param array $types
     * @param QueryCacheProfile $qcp
     * @return \Doctrine\DBAL\Driver\ResultStatement
     */",
 "/**
     * Executes an, optionally parameterized, SQL query and returns the result,
     * applying a given projection/transformation function on each row of the result.
     *
     * @param string $query The SQL query to execute.
     * @param array $params The parameters, if any.
     * @param Closure $mapper The transformation function that is applied on each row.
     *                        The function receives a single paramater, an array, that
     *                        represents a row of the result set.
     * @return mixed The projected result of the query.
     */",
 "/**
     * Executes an SQL statement, returning a result set as a Statement object.
     *
     * @param string $statement
     * @param integer $fetchType
     * @return Doctrine\DBAL\Driver\Statement
     */",
 "/**
     * Executes an SQL INSERT/UPDATE/DELETE query with the given parameters
     * and returns the number of affected rows.
     *
     * This method supports PDO binding types as well as DBAL mapping types.
     *
     * @param string $query The SQL query.
     * @param array $params The query parameters.
     * @param array $types The parameter types.
     * @return integer The number of affected rows.
     * @internal PERF: Directly prepares a driver statement, not a wrapper.
     */",
 "/**
     * Execute an SQL statement and return the number of affected rows.
     *
     * @param string $statement
     * @return integer The number of affected rows.
     */",
 "/**
     * Returns the current transaction nesting level.
     *
     * @return integer The nesting level. A value of 0 means there's no active transaction.
     */",
 "/**
     * Fetch the SQLSTATE associated with the last database operation.
     *
     * @return integer The last error code.
     */",
 "/**
     * Fetch extended error information associated with the last database operation.
     *
     * @return array The last error information.
     */",
 "/**
     * Returns the ID of the last inserted row, or the last value from a sequence object,
     * depending on the underlying driver.
     *
     * Note: This method may not return a meaningful or consistent result across different drivers,
     * because the underlying database may not even support the notion of AUTO_INCREMENT/IDENTITY
     * columns or sequences.
     *
     * @param string $seqName Name of the sequence object from which the ID should be returned.
     * @return string A string representation of the last inserted ID.
     */",
 "/**
     * Executes a function in a transaction.
     *
     * The function gets passed this Connection instance as an (optional) parameter.
     *
     * If an exception occurs during execution of the function or transaction commit,
     * the transaction is rolled back and the exception re-thrown.
     *
     * @param Closure $func The function to execute transactionally.
     */",
 "/**
     * Set if nested transactions should use savepoints
     *
     * @param boolean
     * @return void
     */",
 "/**
     * Get if nested transactions should use savepoints
     *
     * @return boolean
     */",
 "/**
     * Returns the savepoint name to use for nested transactions are false if they are not supported
     * \"savepointFormat\" parameter is not set
     *
     * @return mixed a string with the savepoint name or false
     */",
 "/**
     * Starts a transaction by suspending auto-commit mode.
     *
     * @return void
     */",
 "/**
     * Commits the current transaction.
     *
     * @return void
     * @throws ConnectionException If the commit failed due to no active transaction or
     *                             because the transaction was marked for rollback only.
     */",
 "/**
     * Cancel any database changes done during the current transaction.
     *
     * this method can be listened with onPreTransactionRollback and onTransactionRollback
     * eventlistener methods
     *
     * @throws ConnectionException If the rollback operation failed.
     */",
 "/**
     * createSavepoint
     * creates a new savepoint
     *
     * @param string $savepoint     name of a savepoint to set
     * @return void
     */",
 "/**
     * releaseSavePoint
     * releases given savepoint
     *
     * @param string $savepoint     name of a savepoint to release
     * @return void
     */",
 "/**
     * rollbackSavePoint
     * releases given savepoint
     *
     * @param string $savepoint     name of a savepoint to rollback to
     * @return void
     */",
 "/**
     * Gets the wrapped driver connection.
     *
     * @return Doctrine\DBAL\Driver\Connection
     */",
 "/**
     * Gets the SchemaManager that can be used to inspect or change the
     * database schema through the connection.
     *
     * @return Doctrine\DBAL\Schema\AbstractSchemaManager
     */",
 "/**
     * Marks the current transaction so that the only possible
     * outcome for the transaction to be rolled back.
     *
     * @throws ConnectionException If no transaction is active.
     */",
 "/**
     * Check whether the current transaction is marked for rollback only.
     *
     * @return boolean
     * @throws ConnectionException If no transaction is active.
     */",
 "/**
     * Converts a given value to its database representation according to the conversion
     * rules of a specific DBAL mapping type.
     *
     * @param mixed $value The value to convert.
     * @param string $type The name of the DBAL mapping type.
     * @return mixed The converted value.
     */",
 "/**
     * Converts a given value to its PHP representation according to the conversion
     * rules of a specific DBAL mapping type.
     *
     * @param mixed $value The value to convert.
     * @param string $type The name of the DBAL mapping type.
     * @return mixed The converted type.
     */",
 "/**
     * Binds a set of parameters, some or all of which are typed with a PDO binding type
     * or DBAL mapping type, to a given statement.
     *
     * @param $stmt The statement to bind the values to.
     * @param array $params The map/list of named/positional parameters.
     * @param array $types The parameter types (PDO binding types or DBAL mapping types).
     * @internal Duck-typing used on the $stmt parameter to support driver statements as well as
     *           raw PDOStatement instances.
     */",
 "/**
     * Gets the binding type of a given type. The given type can be a PDO or DBAL mapping type.
     *
     * @param mixed $value The value to bind
     * @param mixed $type The type to bind (PDO or DBAL)
     * @return array [0] => the (escaped) value, [1] => the binding type
     */",
 "/**
     * Create a new instance of a SQL query builder.
     *
     * @return Query\QueryBuilder
     */",
 "/**
 * A wrapper around a Doctrine\DBAL\Driver\Connection that adds features like
 * events, transaction isolation levels, configuration, emulated transaction nesting,
 * lazy connecting and more.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author  Lukas Smith <smith@pooteeweet.org> (MDB2 library)
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new sequence generator.
     *
     * @param \Doctrine\ORM\EntityManager $em The EntityManager to use.
     * @param string $sequenceName The name of the sequence.
     * @param integer $allocationSize The allocation size of the sequence.
     */",
 "/**
     * Generates an ID for the given entity.
     *
     * @param object $entity
     * @return integer|float The generated value.
     * @override
     */",
 "/**
     * Gets the maximum value of the currently allocated bag of values.
     *
     * @return integer|float
     */",
 "/**
     * Gets the next value that will be returned by generate().
     *
     * @return integer|float
     */",
 "/**
 * Represents an ID generator that uses a database sequence.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Set the namespace to prefix all cache ids with.
     *
     * @param string $namespace
     * @return void
     */",
 "/**
     * Retrieve the namespace that prefixes all cache ids.
     *
     * @return string
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Deletes all cache entries.
     *
     * @return boolean TRUE if the cache entries were successfully flushed, FALSE otherwise.
     */",
 "/**
     * Delete all cache entries.
     *
     * @return boolean TRUE if the cache entries were successfully deleted, FALSE otherwise.
     */",
 "/**
     * Prefix the passed id with the configured namespace value
     *
     * @param string $id  The id to namespace
     * @return string $id The namespaced id
     */",
 "/**
     * Fetches an entry from the cache.
     *
     * @param string $id cache id The id of the cache entry to fetch.
     * @return string The cached data or FALSE, if no cache entry exists for the given id.
     */",
 "/**
     * Test if an entry exists in the cache.
     *
     * @param string $id cache id The cache id of the entry to check for.
     * @return boolean TRUE if a cache entry exists for the given cache id, FALSE otherwise.
     */",
 "/**
     * Puts data into the cache.
     *
     * @param string $id The cache id.
     * @param string $data The cache entry/data.
     * @param int $lifeTime The lifetime. If != false, sets a specific lifetime for this cache entry (null => infinite lifeTime).
     * @return boolean TRUE if the entry was successfully stored in the cache, FALSE otherwise.
     */",
 "/**
     * Deletes a cache entry.
     *
     * @param string $id cache id
     * @return boolean TRUE if the cache entry was successfully deleted, FALSE otherwise.
     */",
 "/**
     * Deletes all cache entries.
     *
     * @return boolean TRUE if the cache entry was successfully deleted, FALSE otherwise.
     */",
 "/**
     * Retrieves cached information from data store
     *
     * @since   2.2
     * @return  array An associative array with server's statistics if available, NULL otherwise.
     */",
 "/**
 * Base class for cache provider implementations.
 *
 * @since   2.2
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Fabio B. Silva <fabio.bat.silva@gmail.com>
 */",
 "/**
 * SubselectFromClause ::= \"FROM\" SubselectIdentificationVariableDeclaration {\",\" SubselectIdentificationVariableDeclaration}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param int $lifetime
     * @param string $cacheKey
     * @param Cache $resultCache
     */",
 "/**
     * @return Cache
     */",
 "/**
     * @return int
     */",
 "/**
     * @return string
     */",
 "/**
     * Generate the real cache key from query, params and types.
     *
     * @param string $query
     * @param array $params
     * @param array $types
     * @return array
     */",
 "/**
     * @param Cache $cache
     * @return QueryCacheProfile
     */",
 "/**
     * @param string|null $cacheKey
     * @return QueryCacheProfile
     */",
 "/**
     * @param  int $lifetime
     * @return QueryCacheProfile
     */",
 "/**
 * Query Cache Profile handles the data relevant for query caching.
 *
 * It is a value object, setter methods return NEW instances.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to generate repository classes for mapping information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Adds a logger in the chain
     *
     * @param SQLLogger $logger
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Chains multiple SQLLogger
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Writes a message to the output.
     *
     * @param string $message A message to write to the output
     * @param Boolean $newline Whether to add a newline or not
     */",
 "/**
 * NullOutput suppresses all output.
 *
 *     $output = new NullOutput();
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Initialize this proxy if its not yet initialized.
     *
     * Acts as a no-op if already initialized.
     *
     * @return void
     */",
 "/**
     * Is this proxy initialized or not.
     *
     * @return bool
     */",
 "/**
 * Interface for proxy classes.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.2
 */",
 "/**
     * Finds a object by its identifier.
     *
     * This is just a convenient shortcut for getRepository($className)->find($id).
     *
     * @param string
     * @param mixed
     * @return object
     */",
 "/**
     * Tells the ObjectManager to make an instance managed and persistent.
     *
     * The object will be entered into the database as a result of the flush operation.
     *
     * NOTE: The persist operation always considers objects that are not yet known to
     * this ObjectManager as NEW. Do not pass detached objects to the persist operation.
     *
     * @param object $object The instance to make managed and persistent.
     */",
 "/**
     * Removes an object instance.
     *
     * A removed object will be removed from the database as a result of the flush operation.
     *
     * @param object $object The object instance to remove.
     */",
 "/**
     * Merges the state of a detached object into the persistence context
     * of this ObjectManager and returns the managed copy of the object.
     * The object passed to merge will not become associated/managed with this ObjectManager.
     *
     * @param object $object
     */",
 "/**
     * Detaches an object from the ObjectManager, causing a managed object to
     * become detached. Unflushed changes made to the object if any
     * (including removal of the object), will not be synchronized to the database.
     * Objects which previously referenced the detached object will continue to
     * reference it.
     *
     * @param object $object The object to detach.
     */",
 "/**
     * Refreshes the persistent state of an object from the database,
     * overriding any local changes that have not yet been persisted.
     *
     * @param object $object The object to refresh.
     */",
 "/**
     * Flushes all changes to objects that have been queued up to now to the database.
     * This effectively synchronizes the in-memory state of managed objects with the
     * database.
     */",
 "/**
     * Gets the repository for a class.
     *
     * @param string $className
     * @return \Doctrine\Common\Persistence\ObjectRepository
     */",
 "/**
     * Returns the ClassMetadata descriptor for a class.
     *
     * The class name must be the fully-qualified class name without a leading backslash
     * (as it is returned by get_class($obj)).
     *
     * @param string $className
     * @return \Doctrine\Common\Persistence\Mapping\ClassMetadata
     */",
 "/**
     * Gets the metadata factory used to gather the metadata of classes.
     *
     * @return Doctrine\Common\Persistence\Mapping\ClassMetadataFactory
     */",
 "/**
     * Helper method to initialize a lazy loading proxy or persistent collection.
     *
     * This method is a no-op for other objects.
     *
     * @param object $obj
     */",
 "/**
     * Check if the object is part of the current UnitOfWork and therefore
     * managed.
     *
     * @param object $object
     * @return bool
     */",
 "/**
 * Contract for a Doctrine persistence layer ObjectManager class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
 * Exception class thrown when an error occurs during dumping.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * The DisconnectedClassMetadataFactory is used to create ClassMetadataInfo objects
 * that do not require the entity class actually exist. This allows us to
 * load some mapping information and use it to do things like generate code
 * from the mapping information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Type that maps a PHP object to a clob SQL type.
 *
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param array           $parameters An array of parameters
     * @param InputDefinition $definition A InputDefinition instance
     *
     * @api
     */",
 "/**
     * Returns the first argument from the raw parameters (not parsed).
     *
     * @return string The value of the first argument or null otherwise
     */",
 "/**
     * Returns true if the raw parameters (not parsed) contains a value.
     *
     * This method is to be used to introspect the input parameters
     * before it has been validated. It must be used carefully.
     *
     * @param string|array $values The values to look for in the raw parameters (can be an array)
     *
     * @return Boolean true if the value is contained in the raw parameters
     */",
 "/**
     * Returns the value of a raw option (not parsed).
     *
     * This method is to be used to introspect the input parameters
     * before it has been validated. It must be used carefully.
     *
     * @param string|array $values The value(s) to look for in the raw parameters (can be an array)
     * @param mixed $default The default value to return if no result is found
     *
     * @return mixed The option value
     */",
 "/**
     * Processes command line arguments.
     */",
 "/**
     * Adds a short option value.
     *
     * @param string $shortcut The short option key
     * @param mixed  $value    The value for the option
     *
     * @throws \RuntimeException When option given doesn't exist
     */",
 "/**
     * Adds a long option value.
     *
     * @param string $name  The long option key
     * @param mixed  $value The value for the option
     *
     * @throws \InvalidArgumentException When option given doesn't exist
     * @throws \InvalidArgumentException When a required value is missing
     */",
 "/**
     * Adds an argument value.
     *
     * @param string $name  The argument name
     * @param mixed  $value The value for the argument
     *
     * @throws \InvalidArgumentException When argument given doesn't exist
     */",
 "/**
 * ArrayInput represents an input provided as an array.
 *
 * Usage:
 *
 *     $input = new ArrayInput(array('name' => 'foo', '--bar' => 'foobar'));
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
     * Sets the directory where Doctrine generates any necessary proxy class files.
     *
     * @param string $dir
     */",
 "/**
     * Gets the directory where Doctrine generates any necessary proxy class files.
     *
     * @return string
     */",
 "/**
     * Gets a boolean flag that indicates whether proxy classes should always be regenerated
     * during each script execution.
     *
     * @return boolean
     */",
 "/**
     * Sets a boolean flag that indicates whether proxy classes should always be regenerated
     * during each script execution.
     *
     * @param boolean $bool
     */",
 "/**
     * Gets the namespace where proxy classes reside.
     *
     * @return string
     */",
 "/**
     * Sets the namespace where proxy classes reside.
     *
     * @param string $ns
     */",
 "/**
     * Sets the cache driver implementation that is used for metadata caching.
     *
     * @param Driver $driverImpl
     * @todo Force parameter to be a Closure to ensure lazy evaluation
     *       (as soon as a metadata cache is in effect, the driver never needs to initialize).
     */",
 "/**
*Addanewdefaultannotationdriverwithacorrectlyconfiguredannotationreader.
*
*@paramarray$paths
*@returnMapping\Driver\AnnotationDriver
*/",
 "/**
*Addsanamespaceunderacertainalias.
*
*@paramstring$alias
*@paramstring$namespace
*/",
 "/**
*Resolvesaregisterednamespacealiastothefullnamespace.
*
*@paramstring$entityNamespaceAlias
*@returnstring
*@throwsMappingException
*/",
 "/**
*Settheentityaliasmap
*
*@paramarray$entityAliasMap
*@returnvoid
*/",
 "/**
*Retrievesthelistofregisteredentitynamespacealiases.
*
*@returnarray
*/",
 "/**
*Getsthecachedriverimplementationthatisusedforthemappingmetadata.
*
*@throwsORMException
*@returnMapping\Driver\Driver
*/",
 "/**
*Getsthecachedriverimplementationthatisusedforthequerycache(SQLcache).
*
*@return\Doctrine\Common\Cache\Cache
*/",
 "/**
*Setsthecachedriverimplementationthatisusedforthequerycache(SQLcache).
*
*@param\Doctrine\Common\Cache\Cache$cacheImpl
*/",
 "/**
*Getsthecachedriverimplementationthatisusedforthehydrationcache(SQLcache).
*
*@return\Doctrine\Common\Cache\Cache
*/",
 "/**
*Setsthecachedriverimplementationthatisusedforthehydrationcache(SQLcache).
*
*@param\Doctrine\Common\Cache\Cache$cacheImpl
*/",
 "/**
*Getsthecachedriverimplementationthatisusedformetadatacaching.
*
*@return\Doctrine\Common\Cache\Cache
*/",
 "/**
*Setsthecachedriverimplementationthatisusedformetadatacaching.
*
*@param\Doctrine\Common\Cache\Cache$cacheImpl
*/",
 "/**
*AddsanamedDQLquerytotheconfiguration.
*
*@paramstring$nameThenameofthequery.
*@paramstring$dqlTheDQLquerystring.
*/",
 "/**
*GetsapreviouslyregisterednamedDQLquery.
*
*@paramstring$nameThenameofthequery.
*@returnstringTheDQLquery.
*/",
 "/**
*Addsanamednativequerytotheconfiguration.
*
*@paramstring$nameThenameofthequery.
*@paramstring$sqlThenativeSQLquerystring.
*@paramResultSetMapping$rsmTheResultSetMappingusedfortheresultsoftheSQLquery.
*/",
 "/**
*Getsthecomponentsofapreviouslyregisterednamednativequery.
*
*@paramstring$nameThenameofthequery.
*@returnarrayAtuplewiththefirstelementbeingtheSQLstringandthesecond
*elementbeingtheResultSetMapping.
*/",
 "/**
*EnsuresthatthisConfigurationinstancecontainssettingsthatare
*suitableforaproductionenvironment.
*
*@throwsORMExceptionIfaconfigurationsettinghasavaluethatisnot
*suitableforaproductionenvironment.
*/",
 "/**
*RegistersacustomDQLfunctionthatproducesastringvalue.
*SuchafunctioncanthenbeusedinanyDQLstatementinanyplacewherestring
*functionsareallowed.
*
*DQLfunctionnamesarecase-insensitive.
*
*@paramstring$name
*@paramstring$className
*/",
 "/**
*GetstheimplementationclassnameofaregisteredcustomstringDQLfunction.
*
*@paramstring$name
*@returnstring
*/",
 "/**
*SetsamapofcustomDQLstringfunctions.
*
*KeysmustbefunctionnamesandvaluestheFQCNoftheimplementingclass.
*Thefunctionnameswillbecase-insensitiveinDQL.
*
*Anypreviouslyaddedstringfunctionsarediscarded.
*
*@paramarray$functionsThemapofcustomDQLstringfunctions.
*/",
 "/**
*RegistersacustomDQLfunctionthatproducesanumericvalue.
*SuchafunctioncanthenbeusedinanyDQLstatementinanyplacewherenumeric
*functionsareallowed.
*
*DQLfunctionnamesarecase-insensitive.
*
*@paramstring$name
*@paramstring$className
*/",
 "/**
*GetstheimplementationclassnameofaregisteredcustomnumericDQLfunction.
*
*@paramstring$name
*@returnstring
*/",
 "/**
*SetsamapofcustomDQLnumericfunctions.
*
*KeysmustbefunctionnamesandvaluestheFQCNoftheimplementingclass.
*Thefunctionnameswillbecase-insensitiveinDQL.
*
*Anypreviouslyaddednumericfunctionsarediscarded.
*
*@paramarray$functionsThemapofcustomDQLnumericfunctions.
*/",
 "/**
*RegistersacustomDQLfunctionthatproducesadate/timevalue.
*SuchafunctioncanthenbeusedinanyDQLstatementinanyplacewheredate/time
*functionsareallowed.
*
*DQLfunctionnamesarecase-insensitive.
*
*@paramstring$name
*@paramstring$className
*/",
 "/**
*Getstheimplementationclassnameofaregisteredcustomdate/timeDQLfunction.
*
*@paramstring$name
*@returnstring
*/",
 "/**
*SetsamapofcustomDQLdate/timefunctions.
*
*KeysmustbefunctionnamesandvaluestheFQCNoftheimplementingclass.
*Thefunctionnameswillbecase-insensitiveinDQL.
*
*Anypreviouslyaddeddate/timefunctionsarediscarded.
*
*@paramarray$functionsThemapofcustomDQLdate/timefunctions.
*/",
 "/**
*Getthehydratorclassforthegivenhydrationmodename.
*
*@paramstring$modeNameThehydrationmodename.
*@returnstring$hydratorThehydratorclassname.
*/",
 "/**
*Addacustomhydrationmode.
*
*@paramstring$modeNameThehydrationmodename.
*@paramstring$hydratorThehydratorclassname.
*/",
 "/**
*Setaclassmetadatafactory.
*
*@paramstring$cmf
*/",
 "/**
*@returnstring
*/",
 "/**
*Addafiltertothelistofpossiblefilters.
*
*@paramstring$nameThenameofthefilter.
*@paramstring$classNameTheclassnameofthefilter.
*/",
 "/**
*Getstheclassnameforagivenfiltername.
*
*@paramstring$nameThenameofthefilter.
*
*@returnstringTheclassnameofthefilter,ornullofitisnot
*defined.
*/",
 "/**
*Setdefaultrepositoryclass.
*
*@since2.2
*@paramstring$className
*@throwsORMExceptionIfnotisa\Doctrine\ORM\EntityRepository
*/",
 "/**
*Getdefaultrepositoryclass.
*
*@since2.2
*@returnstring
*/",
 "/**
*ConfigurationcontainerforallconfigurationoptionsofDoctrine.
*ItcombinesallconfigurationoptionsfromDBAL&ORM.
*
*@since2.0
*@internalWhenaddinganewconfigurationoptionjustwriteagetter/setterpair.
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * Create Master Slave Connection
     *
     * @param array $params
     * @param Driver $driver
     * @param Configuration $config
     * @param EventManager $eventManager
     */",
 "/**
     * Check if the connection is currently towards the master or not.
     *
     * @return bool
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Connect to a specific connection
     *
     * @param  string $connectionName
     * @return Driver
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Master-Slave Connection
 *
 * Connection can be used with master-slave setups.
 *
 * Important for the understanding of this connection should be how and when
 * it picks the slave or master.
 *
 * 1. Slave if master was never picked before and ONLY if 'getWrappedConnection'
 *    or 'executeQuery' is used.
 * 2. Master picked when 'exec', 'executeUpdate', 'insert', 'delete', 'update', 'createSavepoint',
 *    'releaseSavepoint', 'beginTransaction', 'rollback', 'commit', 'query' or
 *    'prepare' is called.
 * 3. If master was picked once during the lifetime of the connection it will always get picked afterwards.
 * 4. One slave connection is randomly picked ONCE during a request.
 *
 * ATTENTION: You can write to the slave with this connection if you execute a write query without
 * opening up a transaction. For example:
 *
 *      $conn = DriverManager::getConnection(...);
 *      $conn->executeQuery(\"DELETE FROM table\");
 *
 * Be aware that Connection#executeQuery is a method specifically for READ
 * operations only.
 *
 * This connection is limited to slave operations using the
 * Connection#executeQuery operation only, because it wouldn't be compatible
 * with the ORM or SchemaManager code otherwise. Both use all the other
 * operations in a context where writes could happen to a slave, which makes
 * this restricted approach necessary.
 *
 * You can manually connect to the master at any time by calling:
 *
 *      $conn->connect('master');
 *
 * Instantiation through the DriverManager looks like:
 *
 * @example
 *
 * $conn = DriverManager::getConnection(array(
 *    'wrapperClass' => 'Doctrine\DBAL\Connections\MasterSlaveConnection',
 *    'driver' => 'pdo_mysql',
 *    'master' => array('user' => '', 'password' => '', 'host' => '', 'dbname' => ''),
 *    'slaves' => array(
 *        array('user' => 'slave1', 'password', 'host' => '', 'dbname' => ''),
 *        array('user' => 'slave2', 'password', 'host' => '', 'dbname' => ''),
 *    )
 * ));
 *
 * You can also pass 'driverOptions' and any other documented option to each of this drivers to pass additional information.
 *
 * @author Lars Strojny <lstrojny@php.net>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Closes the cursor, enabling the statement to be executed again.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * columnCount
     * Returns the number of columns in the result set
     *
     * @return integer              Returns the number of columns in the result set represented
     *                              by the PDOStatement object. If there is no result set,
     *                              this method should return 0.
     */",
 "/**
     * setFetchMode
     * Set the fetch mode to use while iterating this statement.
     *
     * @param integer $fetchStyle
     */",
 "/**
     * fetch
     *
     * @see Query::HYDRATE_* constants
     * @param integer $fetchStyle           Controls how the next row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_* constants,
     *                                      defaulting to Query::HYDRATE_BOTH
     *
     * @param integer $cursorOrientation    For a PDOStatement object representing a scrollable cursor,
     *                                      this value determines which row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_ORI_* constants, defaulting to
     *                                      Query::HYDRATE_ORI_NEXT. To request a scrollable cursor for your
     *                                      PDOStatement object,
     *                                      you must set the PDO::ATTR_CURSOR attribute to Doctrine::CURSOR_SCROLL when you
     *                                      prepare the SQL statement with Doctrine_Adapter_Interface->prepare().
     *
     * @param integer $cursorOffset         For a PDOStatement object representing a scrollable cursor for which the
     *                                      $cursorOrientation parameter is set to Query::HYDRATE_ORI_ABS, this value specifies
     *                                      the absolute number of the row in the result set that shall be fetched.
     *
     *                                      For a PDOStatement object representing a scrollable cursor for
     *                                      which the $cursorOrientation parameter is set to Query::HYDRATE_ORI_REL, this value
     *                                      specifies the row to fetch relative to the cursor position before
     *                                      PDOStatement->fetch() was called.
     *
     * @return mixed
     */",
 "/**
     * Returns an array containing all of the result set rows
     *
     * @param integer $fetchStyle           Controls how the next row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_* constants,
     *                                      defaulting to Query::HYDRATE_BOTH
     *
     * @param integer $columnIndex          Returns the indicated 0-indexed column when the value of $fetchStyle is
     *                                      Query::HYDRATE_COLUMN. Defaults to 0.
     *
     * @return array
     */",
 "/**
     * fetchColumn
     * Returns a single column from the next row of a
     * result set or FALSE if there are no more rows.
     *
     * @param integer $columnIndex          0-indexed number of the column you wish to retrieve from the row. If no
     *                                      value is supplied, PDOStatement->fetchColumn()
     *                                      fetches the first column.
     *
     * @return string                       returns a single column in the next row of a result set.
     */",
 "/**
 * Interface for the reading part of a prepare statement only.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Annotation that can be used to signal to the parser to ignore specific
 * annotations during the parsing process.
 *
 * @Annotation
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Hydrator that hydrates a single scalar value from the result set.
 *
 * @since  2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 */",
 "/**
 * Annotation that can be used to signal to the parser
 * to check if that attribute is required during the parsing process.
 *
 * @author Fabio B. Silva <fabio.bat.silva@gmail.com>
 *
 * @Annotation
 */",
 "/**
     * @param \Doctrine\DBAL\Schema\Column $column
     * @param \Doctrine\DBAL\Schema\Table $table
     * @param \Doctrine\DBAL\Platforms\AbstractPlatform $platform
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\Column
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\Table
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @param string|array $sql
     * @return \Doctrine\DBAL\Event\SchemaCreateTableColumnEventArgs
     */",
 "/**
     * @return array
     */",
 "/**
 * Event Arguments used when SQL queries for creating table columns are generated inside Doctrine\DBAL\Platform\AbstractPlatform.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
     * Initializes output formatter style.
     *
     * @param   string  $foreground     style foreground color name
     * @param   string  $background     style background color name
     * @param   array   $options        style options
     *
     * @api
     */",
 "/**
     * Sets style foreground color.
     *
     * @param   string  $color  color name
     *
     * @api
     */",
 "/**
     * Sets style background color.
     *
     * @param   string  $color  color name
     *
     * @api
     */",
 "/**
     * Sets some specific style option.
     *
     * @param   string  $option     option name
     *
     * @api
     */",
 "/**
     * Unsets some specific style option.
     *
     * @param   string  $option     option name
     */",
 "/**
     * Set multiple style options at once.
     *
     * @param   array   $options
     */",
 "/**
     * Applies the style to a given text.
     *
     * @param string $text The text to style
     *
     * @return string
     */",
 "/**
 * Formatter style class for defining styles.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * @api
 */",
 "/**
 * Interface for proxy classes.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Initializes a new <tt>MultiTableUpdateExecutor</tt>.
     *
     * @param Node $AST The root AST node of the DQL query.
     * @param SqlWalker $sqlWalker The walker used for SQL generation from the AST.
     * @internal Any SQL construction and preparation takes place in the constructor for
     *           best performance. With a query cache the executor will be cached.
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Executes the SQL statements for bulk DQL UPDATE statements on classes in
 * Class Table Inheritance (JOINED).
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Proxy all methods to the delegate.
     *
     * @param type $method
     * @param type $args
     * @return type
     */",
 "/**
 * Allows the reader to be used in-place of Doctrine's reader.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * MsSQL Keywordlist
 *
 * @license  BSD http://www.opensource.org/licenses/bsd-license.php
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      David Coallier <davidc@php.net>
 */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
     * @param \Doctrine\DBAL\Schema\Table $table
     * @param array $columns
     * @param array $options
     * @param Doctrine\DBAL\Platforms\AbstractPlatform $platform
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\Table
     */",
 "/**
     * @return array
     */",
 "/**
     * @return array
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @param string|array $sql
     * @return \Doctrine\DBAL\Event\SchemaCreateTableEventArgs
     */",
 "/**
     * @return array
     */",
 "/**
 * Event Arguments used when SQL queries for creating tables are generated inside Doctrine\DBAL\Platform\AbstractPlatform.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
     * Initializes a new <tt>QueryBuilder</tt>.
     *
     * @param Doctrine\DBAL\Connection $connection DBAL Connection
     */",
 "/**
     * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
     * This producer method is intended for convenient inline usage. Example:
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where($qb->expr()->eq('u.id', 1));
     * </code>
     *
     * For more complex expression construction, consider storing the expression
     * builder object in a local variable.
     *
     * @return Doctrine\DBAL\Query\ExpressionBuilder
     */",
 "/**
     * Get the type of the currently built query.
     *
     * @return integer
     */",
 "/**
     * Get the associated DBAL Connection for this query builder.
     *
     * @return Doctrine\DBAL\Connection
     */",
 "/**
     * Get the state of this query builder instance.
     *
     * @return integer Either QueryBuilder::STATE_DIRTY or QueryBuilder::STATE_CLEAN.
     */",
 "/**
     * Execute this query using the bound parameters and their types.
     *
     * Uses {@see Connection::executeQuery} for select statements and {@see Connection::executeUpdate}
     * for insert, update and delete statements.
     *
     * @return mixed
     */",
 "/**
     * Get the complete SQL string formed by the current specifications of this QueryBuilder.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *     echo $qb->getSQL(); // SELECT u FROM User u
     * </code>
     *
     * @return string The sql query string.
     */",
 "/**
     * Sets a query parameter for the query being constructed.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where('u.id = :user_id')
     *         ->setParameter(':user_id', 1);
     * </code>
     *
     * @param string|integer $key The parameter position or name.
     * @param mixed $value The parameter value.
     * @param string|null $type PDO::PARAM_*
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Sets a collection of query parameters for the query being constructed.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where('u.id = :user_id1 OR u.id = :user_id2')
     *         ->setParameters(array(
     *             ':user_id1' => 1,
     *             ':user_id2' => 2
     *         ));
     * </code>
     *
     * @param array $params The query parameters to set.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets all defined query parameters for the query being constructed.
     *
     * @return array The currently defined query parameters.
     */",
 "/**
     * Gets a (previously set) query parameter of the query being constructed.
     *
     * @param mixed $key The key (index or name) of the bound parameter.
     * @return mixed The value of the bound parameter.
     */",
 "/**
     * Sets the position of the first result to retrieve (the \"offset\").
     *
     * @param integer $firstResult The first result to return.
     * @return Doctrine\DBAL\Query\QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets the position of the first result the query object was set to retrieve (the \"offset\").
     * Returns NULL if {@link setFirstResult} was not applied to this QueryBuilder.
     *
     * @return integer The position of the first result.
     */",
 "/**
     * Sets the maximum number of results to retrieve (the \"limit\").
     *
     * @param integer $maxResults The maximum number of results to retrieve.
     * @return Doctrine\DBAL\Query\QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets the maximum number of results the query object was set to retrieve (the \"limit\").
     * Returns NULL if {@link setMaxResults} was not applied to this query builder.
     *
     * @return integer Maximum number of results.
     */",
 "/**
     * Either appends to or replaces a single, generic query part.
     *
     * The available parts are: 'select', 'from', 'set', 'where',
     * 'groupBy', 'having' and 'orderBy'.
     *
     * @param string $sqlPartName
     * @param string $sqlPart
     * @param string $append
     * @return Doctrine\DBAL\Query\QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies an item that is to be returned in the query result.
     * Replaces any previously specified selections, if any.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.id', 'p.id')
     *         ->from('users', 'u')
     *         ->leftJoin('u', 'phonenumbers', 'p', 'u.id = p.user_id');
     * </code>
     *
     * @param mixed $select The selection expressions.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds an item that is to be returned in the query result.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.id')
     *         ->addSelect('p.id')
     *         ->from('users', 'u')
     *         ->leftJoin('u', 'phonenumbers', 'u.id = p.user_id');
     * </code>
     *
     * @param mixed $select The selection expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Turns the query being built into a bulk delete query that ranges over
     * a certain table.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->delete('users', 'u')
     *         ->where('u.id = :user_id');
     *         ->setParameter(':user_id', 1);
     * </code>
     *
     * @param string $delete The table whose rows are subject to the deletion.
     * @param string $alias The table alias used in the constructed query.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Turns the query being built into a bulk update query that ranges over
     * a certain table
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->update('users', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where('u.id = ?');
     * </code>
     *
     * @param string $update The table whose rows are subject to the update.
     * @param string $alias The table alias used in the constructed query.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Create and add a query root corresponding to the table identified by the
     * given alias, forming a cartesian product with any existing query roots.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.id')
     *         ->from('users', 'u')
     * </code>
     *
     * @param string $from   The table
     * @param string $alias  The alias of the table
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a join to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->join('u', 'phonenumbers', 'p', 'p.is_primary = 1');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause
     * @param string $join The table name to join
     * @param string $alias The alias of the join table
     * @param string $condition The condition for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a join to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->innerJoin('u', 'phonenumbers', 'p', 'p.is_primary = 1');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause
     * @param string $join The table name to join
     * @param string $alias The alias of the join table
     * @param string $condition The condition for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a left join to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->leftJoin('u', 'phonenumbers', 'p', 'p.is_primary = 1');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause
     * @param string $join The table name to join
     * @param string $alias The alias of the join table
     * @param string $condition The condition for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a right join to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->rightJoin('u', 'phonenumbers', 'p', 'p.is_primary = 1');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause
     * @param string $join The table name to join
     * @param string $alias The alias of the join table
     * @param string $condition The condition for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Sets a new value for a column in a bulk update query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->update('users', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where('u.id = ?');
     * </code>
     *
     * @param string $key The column to set.
     * @param string $value The value, expression, placeholder, etc.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies one or more restrictions to the query result.
     * Replaces any previously specified restrictions, if any.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->where('u.id = ?');
     *
     *     // You can optionally programatically build and/or expressions
     *     $qb = $conn->createQueryBuilder();
     *
     *     $or = $qb->expr()->orx();
     *     $or->add($qb->expr()->eq('u.id', 1));
     *     $or->add($qb->expr()->eq('u.id', 2));
     *
     *     $qb->update('users', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where($or);
     * </code>
     *
     * @param mixed $predicates The restriction predicates.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds one or more restrictions to the query results, forming a logical
     * conjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u')
     *         ->from('users', 'u')
     *         ->where('u.username LIKE ?')
     *         ->andWhere('u.is_active = 1');
     * </code>
     *
     * @param mixed $where The query restrictions.
     * @return QueryBuilder This QueryBuilder instance.
     * @see where()
     */",
 "/**
     * Adds one or more restrictions to the query results, forming a logical
     * disjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->where('u.id = 1')
     *         ->orWhere('u.id = 2');
     * </code>
     *
     * @param mixed $where The WHERE statement
     * @return QueryBuilder $qb
     * @see where()
     */",
 "/**
     * Specifies a grouping over the results of the query.
     * Replaces any previously specified groupings, if any.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->groupBy('u.id');
     * </code>
     *
     * @param mixed $groupBy The grouping expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a grouping expression to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select('u.name')
     *         ->from('users', 'u')
     *         ->groupBy('u.lastLogin');
     *         ->addGroupBy('u.createdAt')
     * </code>
     *
     * @param mixed $groupBy The grouping expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies a restriction over the groups of the query.
     * Replaces any previous having restrictions, if any.
     *
     * @param mixed $having The restriction over the groups.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a restriction over the groups of the query, forming a logical
     * conjunction with any existing having restrictions.
     *
     * @param mixed $having The restriction to append.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a restriction over the groups of the query, forming a logical
     * disjunction with any existing having restrictions.
     *
     * @param mixed $having The restriction to add.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies an ordering for the query results.
     * Replaces any previously specified orderings, if any.
     *
     * @param string $sort The ordering expression.
     * @param string $order The ordering direction.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds an ordering to the query results.
     *
     * @param string $sort The ordering expression.
     * @param string $order The ordering direction.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Get a query part by its name.
     *
     * @param string $queryPartName
     * @return mixed $queryPart
     */",
 "/**
     * Get all query parts.
     *
     * @return array $sqlParts
     */",
 "/**
     * Reset SQL parts
     *
     * @param array $queryPartNames
     * @return QueryBuilder
     */",
 "/**
     * Reset single SQL part
     *
     * @param string $queryPartName
     * @return QueryBuilder
     */",
 "/**
     * Converts this instance into a SELECT string in SQL.
     *
     * @return string
     */",
 "/**
     * Converts this instance into an UPDATE string in SQL.
     *
     * @return string
     */",
 "/**
     * Converts this instance into a DELETE string in SQL.
     *
     * @return string
     */",
 "/**
     * Gets a string representation of this QueryBuilder which corresponds to
     * the final SQL query being constructed.
     *
     * @return string The string representation of this QueryBuilder.
     */",
 "/**
     * Create a new named parameter and bind the value $value to it.
     *
     * This method provides a shortcut for PDOStatement::bindValue
     * when using prepared statements.
     *
     * The parameter $value specifies the value that you want to bind. If
     * $placeholder is not provided bindValue() will automatically create a
     * placeholder for you. An automatic placeholder will be of the name
     * ':dcValue1', ':dcValue2' etc.
     *
     * For more information see {@link http://php.net/pdostatement-bindparam}
     *
     * Example:
     * <code>
     * $value = 2;
     * $q->eq( 'id', $q->bindValue( $value ) );
     * $stmt = $q->executeQuery(); // executed with 'id = 2'
     * </code>
     *
     * @license New BSD License
     * @link http://www.zetacomponents.org
     * @param mixed $value
     * @param mixed $type
     * @param string $placeHolder the name to bind with. The string must start with a colon ':'.
     * @return string the placeholder name used.
     */",
 "/**
     * Create a new positional parameter and bind the given value to it.
     *
     * Attention: If you are using positional parameters with the query builder you have
     * to be very careful to bind all parameters in the order they appear in the SQL
     * statement , otherwise they get bound in the wrong order which can lead to serious
     * bugs in your code.
     *
     * Example:
     * <code>
     *  $qb = $conn->createQueryBuilder();
     *  $qb->select('u.*')
     *     ->from('users', 'u')
     *     ->where('u.username = ' . $qb->createPositionalParameter('Foo', PDO::PARAM_STR))
     *     ->orWhere('u.username = ' . $qb->createPositionalParameter('Bar', PDO::PARAM_STR))
     * </code>
     *
     * @param  mixed $value
     * @param  mixed $type
     * @return string
     */",
 "/**
 * QueryBuilder class is responsible to dynamically create SQL queries.
 *
 * Important: Verify that every feature you use will work with your database vendor.
 * SQL Query Builder does not attempt to validate the generated SQL at all.
 *
 * The query builder does no validation whatsoever if certain features even work with the
 * underlying database vendor. Limit queries and joins are NOT applied to UPDATE and DELETE statements
 * even if some vendors such as MySQL support it.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.1
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * WhenClause ::= \"WHEN\" ConditionalExpression \"THEN\" ScalarExpression
 *
 * @since   2.2
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Validate that the current mapping is valid
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Type that maps a database SMALLINT to a PHP integer.
 *
 * @author robo
 */",
 "/**
 * Pessimistic Lock Exception
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * JoinAssociationPathExpression ::= IdentificationVariable \".\" (SingleValuedAssociationField | CollectionValuedAssociationField)
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
     * @return \Doctrine\DBAL\Event\SchemaEventArgs
     */",
 "/**
     * @return boolean
     */",
 "/**
 * Base class for schema related events.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
     * @param EntityManager $em
     */",
 "/**
     * Checks the internal consistency of all mapping files.
     *
     * There are several checks that can't be done at runtime or are too expensive, which can be verified
     * with this command. For example:
     *
     * 1. Check if a relation with \"mappedBy\" is actually connected to that specified field.
     * 2. Check if \"mappedBy\" and \"inversedBy\" are consistent to each other.
     * 3. Check if \"referencedColumnName\" attributes are really pointing to primary key columns.
     * 4. Check if there are public properties that might cause problems with lazy loading.
     *
     * @return array
     */",
 "/**
     * Validate a single class of the current
     *
     * @param ClassMetadataInfo $class
     * @return array
     */",
 "/**
     * Check if the Database Schema is in sync with the current metadata state.
     *
     * @return bool
     */",
 "/**
 * Performs strict validation of the mapping schema
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
*GenerateandwriteentityclassesforthegivenarrayofClassMetadataInfoinstances
*
*@paramarray$metadatas
*@paramstring$outputDirectory
*@returnvoid
*/",
 "/**
*GeneratedandwriteentityclasstodiskforthegivenClassMetadataInfoinstance
*
*@paramClassMetadataInfo$metadata
*@paramstring$outputDirectory
*@returnvoid
*/",
 "/**
*GenerateaPHP5Doctrine2entityclassfromthegivenClassMetadataInfoinstance
*
*@paramClassMetadataInfo$metadata
*@returnstring$code
*/",
 "/**
*GeneratetheupdatedcodeforthegivenClassMetadataInfoandentityatpath
*
*@paramClassMetadataInfo$metadata
*@paramstring$path
*@returnstring$code;
*/",
 "/**
*Setthenumberofspacestheexportedclassshouldhave
*
*@paraminteger$numSpaces
*@returnvoid
*/",
 "/**
*Settheextensiontousewhenwritingphpfilestodisk
*
*@paramstring$extension
*@returnvoid
*/",
 "/**
*Setthenameoftheclassthegeneratedclassesshouldextendfrom
*
*@returnvoid
*/",
 "/**
*Setwhetherornottogenerateannotationsfortheentity
*
*@parambool$bool
*@returnvoid
*/",
 "/**
*Setanannotationprefix.
*
*@paramstring$prefix
*/",
 "/**
*Setwhetherornottotryandupdatetheentityifitalreadyexists
*
*@parambool$bool
*@returnvoid
*/",
 "/**
*Setwhetherornottoregeneratetheentityifitexists
*
*@parambool$bool
*@returnvoid
*/",
 "/**
*Setwhetherornottogeneratestubmethodsfortheentity
*
*@parambool$bool
*@returnvoid
*/",
 "/**
*Shouldanexistingentitybebackedupifitalreadyexists?
*/",
 "/**
*@todothiswon'tworkifthereisanamespaceinbracketsandaclassoutsideofit.
*@paramstring$src
*/",
 "/**
 * Generic class used to generate PHP5 entity classes from ClassMetadataInfo instances
 *
 *     [php]
 *     $classes = $em->getClassMetadataFactory()->getAllMetadata();
 *
 *     $generator = new \Doctrine\ORM\Tools\EntityGenerator();
 *     $generator->setGenerateAnnotations(true);
 *     $generator->setGenerateStubMethods(true);
 *     $generator->setRegenerateEntityIfExists(false);
 *     $generator->setUpdateEntityIfExists(true);
 *     $generator->generate($classes, '/path/to/generate/entities');
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Expression class for DQL math statements
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the name of the table that contains the discriminator column.
     *
     * @return string The table name.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Base class for entity persisters that implement a certain inheritance mapping strategy.
 * All these persisters are assumed to use a discriminator column to discriminate entity
 * types in the hierarchy.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 */",
 "/**
     * Formats a message within a section.
     *
     * @param string  $section The section name
     * @param string  $message The message
     * @param string  $style   The style to apply to the section
     */",
 "/**
     * Formats a message as a block of text.
     *
     * @param string|array $messages The message to write in the block
     * @param string       $style    The style to apply to the whole block
     * @param Boolean      $large    Whether to return a large block
     *
     * @return string The formatter message
     */",
 "/**
     * Returns the length of a string, uses mb_strlen if it is available.
     *
     * @param string $string The string to check its length
     *
     * @return integer The length of the string
     */",
 "/**
     * Returns the helper's canonical name
     *
     * @return string The canonical name of the helper
     */",
 "/**
 * The Formatter class provides helpers to format messages.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compares a Doctrine version with the current one.
     *
     * @param string $version Doctrine version to compare.
     * @return int Returns -1 if older, 0 if it is the same, 1 if version
     *             passed as argument is newer.
     */",
 "/**
 * Class to store and retrieve the version of Doctrine
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * NullIfExpression ::= \"NULLIF\" \"(\" ScalarExpression \",\" ScalarExpression \")\"
 *
 * @since   2.1
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param ObjectManager $objectManager
     * @param string $entityClass Optional entity class
     */",
 "/**
     * Retrieve associated ObjectManager.
     *
     * @return ObjectManager
     */",
 "/**
     * Name of the entity class that is cleared, or empty if all are cleared.
     *
     * @return string
     */",
 "/**
     * Check if event clears all entities.
     *
     * @return bool
     */",
 "/**
 * Provides event arguments for the onClear event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.2
 * @author      Roman Borschel <roman@code-factory.de>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @param string $word
     * @return array
     */",
 "/**
 * Expression class for building DQL and parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Tries to establish a database connection to SQLite.
     *
     * @param array $params
     * @param string $username
     * @param string $password
     * @param array $driverOptions
     * @return Connection
     */",
 "/**
     * Constructs the Sqlite PDO DSN.
     *
     * @return string  The DSN.
     * @override
     */",
 "/**
     * Gets the database platform that is relevant for this driver.
     */",
 "/**
     * Gets the schema manager that is relevant for this driver.
     *
     * @param Doctrine\DBAL\Connection $conn
     * @return Doctrine\DBAL\Schema\SqliteSchemaManager
     */",
 "/**
 * The PDO Sqlite driver.
 *
 * @since 2.0
 */",
 "/**
     * Configure Charset and Collation options of MySQL Client for each Connection
     *
     * @param string $charset
     * @param string $collation
     */",
 "/**
     * @param ConnectionEventArgs $args
     * @return void
     */",
 "/**
 * MySQL Session Init Event Subscriber which allows to set the Client Encoding of the Connection
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @deprecated  Use \"charset\" option to PDO MySQL Connection instead.
 */",
 "/**
     * Attempts to create a connection with the database.
     *
     * @param array $params All connection parameters passed by the user.
     * @param string $username The username to use when connecting.
     * @param string $password The password to use when connecting.
     * @param array $driverOptions The driver options to use when connecting.
     * @return Doctrine\DBAL\Driver\Connection The database connection.
     */",
 "/**
     * Gets the DatabasePlatform instance that provides all the metadata about
     * the platform this driver connects to.
     *
     * @return Doctrine\DBAL\Platforms\AbstractPlatform The database platform.
     */",
 "/**
     * Gets the SchemaManager that can be used to inspect and change the underlying
     * database schema of the platform this driver connects to.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return Doctrine\DBAL\SchemaManager
     */",
 "/**
     * Gets the name of the driver.
     *
     * @return string The name of the driver.
     */",
 "/**
     * Get the name of the database connected to for this driver.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return string $database
     */",
 "/**
 * Driver interface.
 * Interface that all DBAL drivers must implement.
 *
 * @since 2.0
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"MOD\" \"(\" SimpleArithmeticExpression \",\" SimpleArithmeticExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * SelectExpression ::= IdentificationVariable [\".\" \"*\"] | StateFieldPathExpression |
 *	                    (AggregateExpression | \"(\" Subselect \")\") [[\"AS\"] [\"HIDDEN\"] FieldAliasIdentificationVariable]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Get an array of the placeholders in an sql statements as keys and their positions in the query string.
     *
     * Returns an integer => integer pair (indexed from zero) for a positional statement
     * and a string => int[] pair for a named statement.
     *
     * @param string $statement
     * @param bool $isPositional
     * @return array
     */",
 "/**
     * For a positional query this method can rewrite the sql statement with regard to array parameters.
     *
     * @param string $query
     * @param array $params
     * @param array $types
     */",
 "/**
 * Utility class that parses sql statements with regard to types and parameters.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @return bool
     */",
 "/**
     * @param bool $flag
     */",
 "/**
     * @param int $length
     */",
 "/**
     * @return int
     */",
 "/**
     * Get default namespace of schema objects.
     *
     * @return string
     */",
 "/**
     * set default namespace name of schema objects.
     *
     * @param _name the value to set.
     */",
 "/**
 * Configuration for a Schema
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Sets the command
     *
     * @param Command $command The command to set
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * HelpCommand displays the help for a given command.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Locate mapping file for the given class name.
     *
     * @param string $className
     * @return string
     */",
 "/**
     * Get all class names that are found with this file locator.
     *
     * @param string $globalBasename Passed to allow excluding the basename
     * @return array
     */",
 "/**
     * Check if a file can be found for this class name.
     *
     * @return bool
     */",
 "/**
     * Get all the paths that this file locator looks for mapping files.
     *
     * @return array
     */",
 "/**
     * Get the file extension that mapping files are suffixed with.
     *
     * @return string
     */",
 "/**
 * Locate the file that contains the metadata information for a given class name.
 *
 * This behavior is inpependent of the actual content of the file. It just detects
 * the file which is responsible for the given class name.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Initializes a new FileDriver that looks in the given path(s) for mapping
     * documents and operates in the specified operating mode.
     *
     * @param string|array $paths One or multiple paths where mapping documents can be found.
     */",
 "/**
     * Append lookup paths to metadata driver.
     *
     * @param array $paths
     */",
 "/**
     * Retrieve the defined metadata lookup paths.
     *
     * @return array
     */",
 "/**
     * Get the file extension used to look for mapping files under
     *
     * @return void
     */",
 "/**
     * Set the file extension used to look for mapping files under
     *
     * @param string $fileExtension The file extension to set
     * @return void
     */",
 "/**
*Gettheelementofschemametadatafortheclassfromthemappingfile.
*Thiswilllazilyloadthemappingfileifitisnotloadedyet
*
*@returnarray$elementTheelementofschemametadata
*/",
 "/**
*Whethertheclasswiththespecifiednameshouldhaveitsmetadataloaded.
*ThisisonlythecaseifitiseithermappedasanEntityora
*MappedSuperclass.
*
*@paramstring$className
*@returnboolean
*/",
 "/**
*Getsthenamesofallmappedclassesknowntothisdriver.
*
*@returnarrayThenamesofallmappedclassesknowntothisdriver.
*/",
 "/**
*Findsthemappingfilefortheclasswiththegivennamebysearching
*throughtheconfiguredpaths.
*
*@param$className
*@returnstringThe(absolute)filename.
*@throwsMappingException
*/",
 "/**
*Loadsamappingfilewiththegivennameandreturnsamap
*fromclass/entitynamestotheircorrespondingelements.
*
*@paramstring$fileThemappingfiletoload.
*@returnarray
*/",
 "/**
*Basedriverforfile-basedmetadatadrivers.
*
*Afiledriveroperatesinamodewhereitloadsthemappingfilesofindividual
*classesondemand.Thisrequirestheusertoadheretotheconventionof1mapping
*fileperclassandthefilenamesofthemappingfilesmustcorrespondtothefull
*classname,includingnamespace,withthenamespacedelimiters'\',replacedbydots'.'.
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.com
*@since2.0
*@version$Revision$
*@author		BenjaminEberlei<kontakt@beberlei.de>
*@author		GuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanH.Wage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     *
     * @param string $name
     * @param int $allocationSize
     * @param int $initialValue
     */",
 "/**
     * @param Visitor $visitor
     */",
 "/**
 * Sequence Structure
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Writes a message to the output.
     *
     * @param string|array $messages The message as an array of lines of a single string
     * @param Boolean      $newline  Whether to add a newline or not
     * @param integer      $type     The type of output
     *
     * @throws \InvalidArgumentException When unknown output type is given
     *
     * @api
     */",
 "/**
     * Writes a message to the output and adds a newline at the end.
     *
     * @param string|array $messages The message as an array of lines of a single string
     * @param integer      $type     The type of output
     *
     * @api
     */",
 "/**
     * Sets the verbosity of the output.
     *
     * @param integer $level The level of verbosity
     *
     * @api
     */",
 "/**
     * Gets the current verbosity of the output.
     *
     * @return integer The current level of verbosity
     */",
 "/**
     * Sets the decorated flag.
     *
     * @param Boolean $decorated Whether to decorated the messages or not
     *
     * @api
     */",
 "/**
     * Gets the decorated flag.
     *
     * @return Boolean true if the output will decorate messages, false otherwise
     *
     * @api
     */",
 "/**
     * Sets output formatter.
     *
     * @param OutputFormatterInterface $formatter
     *
     * @api
     */",
 "/**
     * Returns current output formatter instance.
     *
     * @return  OutputFormatterInterface
     *
     * @api
     */",
 "/**
 * OutputInterface is the interface implemented by all Output classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Initializes a new <tt>MultiTableDeleteExecutor</tt>.
     *
     * @param Node $AST The root AST node of the DQL query.
     * @param SqlWalker $sqlWalker The walker used for SQL generation from the AST.
     * @internal Any SQL construction and preparation takes place in the constructor for
     *           best performance. With a query cache the executor will be cached.
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Executes the SQL statements for bulk DQL DELETE statements on classes in
 * Class Table Inheritance (JOINED).
 *
 * @author      Roman Borschel <roman@code-factory.org>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        http://www.doctrine-project.org
 * @since       2.0
 */",
 "/**
     * Wraps <tt>Statement</tt> and applies portability measures
     *
     * @param Doctrine\DBAL\Driver\Statement $stmt
     * @param Doctrine\DBAL\Connection $conn
     */",
 "/**
 * Portability Wrapper for a Statement
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Represent the change of a column
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritDoc}
     * @todo Same code exists in AnnotationDriver, should we re-use it somehow or not worry about it?
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The StaticPHPDriver calls a static loadMetadata() method on your entity
 * classes where you can manually populate the ClassMetadata instance.
 *
 * @license 	http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    	www.doctrine-project.org
 * @since   	2.2
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The PHPDriver includes php files which just populate ClassMetadataInfo
 * instances with plain php code
 *
 * @license 	http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    	www.doctrine-project.org
 * @since   	2.0
 * @version     $Revision$
 * @author		Benjamin Eberlei <kontakt@beberlei.de>
 * @author		Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 * @todo Rename: PHPDriver
 */",
 "/**
     * Attempts to establish a connection with the underlying driver.
     *
     * @param array $params
     * @param string $username
     * @param string $password
     * @param array $driverOptions
     * @return Doctrine\DBAL\Driver\Connection
     */",
 "/**
     * Constructs the MySql PDO DSN.
     *
     * @return string  The DSN.
     */",
 "/**
     * Gets the DatabasePlatform instance that provides all the metadata about
     * the platform this driver connects to.
     *
     * @return Doctrine\DBAL\Platforms\AbstractPlatform The database platform.
     */",
 "/**
     * Gets the SchemaManager that can be used to inspect and change the underlying
     * database schema of the platform this driver connects to.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return Doctrine\DBAL\SchemaManager
     */",
 "/**
     * Gets the name of the driver.
     *
     * @return string The name of the driver.
     */",
 "/**
     * Get the name of the database connected to for this driver.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return string $database
     */",
 "/**
 * Driver for the PDO IBM extension
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @return Doctrine\DBAL\Connection
     */",
 "/**
     * @return Doctrine\DBAL\Driver
     */",
 "/**
     * @return Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @return Doctrine\DBAL\Schema\AbstractSchemaManager
     */",
 "/**
 * Event Arguments used when a Driver connection is established inside Doctrine\DBAL\Connection.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new <tt>ExpressionBuilder</tt>.
     *
     * @param Doctrine\DBAL\Connection $connection DBAL Connection
     */",
 "/**
     * Creates a conjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?) AND (u.role = ?)
     *     $expr->andX('u.type = ?', 'u.role = ?'));
     *
     * @param mixed $x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     * @return CompositeExpression
     */",
 "/**
     * Creates a disjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?) OR (u.role = ?)
     *     $qb->where($qb->expr()->orX('u.type = ?', 'u.role = ?'));
     *
     * @param mixed $x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     * @return CompositeExpression
     */",
 "/**
     * Creates a comparison expression.
     *
     * @param mixed $x Left expression
     * @param string $operator One of the ExpressionBuikder::* constants.
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates an equality comparison expression with the given arguments.
     *
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> = <right expr>. Example:
     *
     *     [php]
     *     // u.id = ?
     *     $expr->eq('u.id', '?');
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a non equality comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <> <right expr>. Example:
     *
     *     [php]
     *     // u.id <> 1
     *     $q->where($q->expr()->neq('u.id', '1'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a lower-than comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> < <right expr>. Example:
     *
     *     [php]
     *     // u.id < ?
     *     $q->where($q->expr()->lt('u.id', '?'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a lower-than-equal comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <= <right expr>. Example:
     *
     *     [php]
     *     // u.id <= ?
     *     $q->where($q->expr()->lte('u.id', '?'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a greater-than comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> > <right expr>. Example:
     *
     *     [php]
     *     // u.id > ?
     *     $q->where($q->expr()->gt('u.id', '?'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a greater-than-equal comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> >= <right expr>. Example:
     *
     *     [php]
     *     // u.id >= ?
     *     $q->where($q->expr()->gte('u.id', '?'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates an IS NULL expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IS NULL
     *
     * @return string
     */",
 "/**
     * Creates an IS NOT NULL expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IS NOT NULL
     *
     * @return string
     */",
 "/**
     * Creates a LIKE() comparison expression with the given arguments.
     *
     * @param string $x Field in string format to be inspected by LIKE() comparison.
     * @param mixed $y Argument to be used in LIKE() comparison.
     *
     * @return string
     */",
 "/**
     * Quotes a given input parameter.
     *
     * @param mixed $input Parameter to be quoted.
     * @param string $type Type of the parameter.
     *
     * @return string
     */",
 "/**
 * ExpressionBuilder class is responsible to dynamically create SQL query parts.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.1
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     *
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaPgsqlReader.html
     * @param  array $tableIndexes
     * @param  string $tableName
     * @return array
     */",
 "/**
 * SqliteSchemaManager
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @version     $Revision$
 * @since       2.0
 */",
 "/**
     * Check if the given word is a keyword of this dialect/vendor platform.
     *
     * @param  string $word
     * @return bool
     */",
 "/**
     * Name of this keyword list.
     *
     * @return string
     */",
 "/**
 * Abstract interface for a SQL reserved keyword dictionary.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * DateTime type saving additional timezone information.
 *
 * Caution: Databases are not necessarily experts at storing timezone related
 * data of dates. First, of all the supported vendors only PostgreSQL and Oracle
 * support storing Timezone data. But those two don't save the actual timezone
 * attached to a DateTime instance (for example \"Europe/Berlin\" or \"America/Montreal\")
 * but the current offset of them related to UTC. That means depending on daylight saving times
 * or not you may get different offsets.
 *
 * This datatype makes only sense to use, if your application works with an offset, not
 * with an actual timezone that uses transitions. Otherwise your DateTime instance
 * attached with a timezone such as Europe/Berlin gets saved into the database with
 * the offset and re-created from persistence with only the offset, not the original timezone
 * attached.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Dispatches an event to all registered listeners.
     *
     * @param string $eventName The name of the event to dispatch. The name of the event is
     *                          the name of the method that is invoked on listeners.
     * @param EventArgs $eventArgs The event arguments to pass to the event handlers/listeners.
     *                             If not supplied, the single empty EventArgs instance is used.
     * @return boolean
     */",
 "/**
     * Gets the listeners of a specific event or all listeners.
     *
     * @param string $event The name of the event.
     * @return array The event listeners for the specified event, or all event listeners.
     */",
 "/**
     * Checks whether an event has any registered listeners.
     *
     * @param string $event
     * @return boolean TRUE if the specified event has any listeners, FALSE otherwise.
     */",
 "/**
     * Adds an event listener that listens on the specified events.
     *
     * @param string|array $events The event(s) to listen on.
     * @param object $listener The listener object.
     */",
 "/**
     * Removes an event listener from the specified events.
     *
     * @param string|array $events
     * @param object $listener
     */",
 "/**
     * Adds an EventSubscriber. The subscriber is asked for all the events he is
     * interested in and added as a listener for these events.
     *
     * @param Doctrine\Common\EventSubscriber $subscriber The subscriber.
     */",
 "/**
 * The EventManager is the central point of Doctrine's event listener system.
 * Listeners are registered on the manager and events are dispatched through the
 * manager.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Filter Metadatas by one or more filter options.
     *
     * @param array $metadatas
     * @param array|string $filter
     * @return array
     */",
 "/**
 * Used by CLI Tools to restrict entity-based commands to given patterns.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param \Doctrine\ORM\Internal\Hydration\AbstractHydrator $hydrator
     */",
 "/**
     * Gets the next set of results.
     *
     * @return array
     */",
 "/**
     * @return mixed
     */",
 "/**
     * @return int
     */",
 "/**
     * @return bool
     */",
 "/**
 * Represents a result structure that can be iterated over, hydrating row-by-row
 * during the iteration. An IterableResult is obtained by AbstractHydrator#iterate().
 *
 * @author robo
 * @since 2.0
 */",
 "/**
 * Id generator that uses a single-row database table and a hi/lo algorithm.
 *
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param Reader $reader
     * @param Cache $cache
     */",
 "/**
 * A cache aware annotation reader.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * ConditionalPrimary ::= SimpleConditionalExpression | \"(\" ConditionalExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/**
 * Persister for entities that participate in a hierarchy mapped with the
 * SINGLE_TABLE strategy.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Alexander <iam.asm89@gmail.com>
 * @since 2.0
 * @link http://martinfowler.com/eaaCatalog/singleTableInheritance.html
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
     * @override
     */",
 "/** @override */",
 "/**
 * Platform to ensure compatibility of Doctrine with SQLServer2005 version and
 * higher.
 *
 * Differences to SQL Server 2008 are:
 *
 * - DATETIME2 datatype does not exist, only DATETIME which has a precision of
 *   3. This is not supported by PHP DateTime, so we are emulating it by
 *   setting .000 manually.
 * - Starting with SQLServer2005 VARCHAR(MAX), VARBINARY(MAX) and
 *   NVARCHAR(max) replace the old TEXT, NTEXT and IMAGE types. See
 *   {@link http://www.sql-server-helper.com/faq/sql-server-2005-varchar-max-p01.aspx}
 *   for more information.
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Set the file extension used to look for mapping files under
     *
     * @param string $fileExtension The file extension to set
     * @return void
     */",
 "/**
*{@inheritDoc}
*/",
 "/**
*{@inheritDoc}
*/",
 "/**
*{@inheritDoc}
*/",
 "/**
*TheSymfonyFileLocatormakesasimplifyingassumptionscompared
*totheDefaultFileLocator.Byassumingpathsonlycontainentitiesofacertain
*namespacethemappingfilesconsistsoftheshortclassnameonly.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@licenseMIT
*/",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Retrieve column information form ResultSetMapping.
     *
     * @param string $entityName
     * @param string $column
     *
     * @return array
     */",
 "/**
 * @Annotation
 * @Target(\"ANNOTATION\")
 */",
 "/**
     * Private constructor (prevents from instantiation)
     *
     */",
 "/**
     * Prints a dump of the public, protected and private properties of $var.
     *
     * @static
     * @link http://xdebug.org/
     * @param mixed $var
     * @param integer $maxDepth Maximum nesting level for object properties
     * @param boolean $stripTags Flag that indicate if output should strip HTML tags
     */",
 "/**
 * Static class containing most used debug methods.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Giorgio Sironi <piccoloprincipeazzurro@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
     * Initializes a new instance of the <tt>ParserResult</tt> class.
     * The new instance is initialized with an empty <tt>ResultSetMapping</tt>.
     */",
 "/**
     * Gets the ResultSetMapping for the parsed query.
     *
     * @return ResultSetMapping The result set mapping of the parsed query or NULL
     *                          if the query is not a SELECT query.
     */",
 "/**
     * Sets the ResultSetMapping of the parsed query.
     *
     * @param ResultSetMapping $rsm
     */",
 "/**
     * Sets the SQL executor that should be used for this ParserResult.
     *
     * @param \Doctrine\ORM\Query\Exec\AbstractSqlExecutor $executor
     */",
 "/**
     * Gets the SQL executor used by this ParserResult.
     *
     * @return \Doctrine\ORM\Query\Exec\AbstractSqlExecutor
     */",
 "/**
     * Adds a DQL to SQL parameter mapping. One DQL parameter name/position can map to
     * several SQL parameter positions.
     *
     * @param string|integer $dqlPosition
     * @param integer $sqlPosition
     */",
 "/**
     * Gets all DQL to SQL parameter mappings.
     *
     * @return array The parameter mappings.
     */",
 "/**
     * Gets the SQL parameter positions for a DQL parameter name/position.
     *
     * @param string|integer $dqlPosition The name or position of the DQL parameter.
     * @return array The positions of the corresponding SQL parameters.
     */",
 "/**
 * Encapsulates the resulting components from a DQL query parsing process that
 * can be serialized.
 *
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Janne Vanhala <jpvanhal@cc.hut.fi>
 * @author		Roman Borschel <roman@code-factory.org>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        http://www.doctrine-project.org
 * @since       2.0
 * @version     $Revision$
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * @param ClassMetadataInfo $metadata
     * @return mixed $exported
     */",
 "/**
     * Set the array of ClassMetadataInfo instances to export
     *
     * @param array $metadata
     * @return void
     */",
 "/**
     * Get the extension used to generated the path to a class
     *
     * @return string $extension
     */",
 "/**
     * Set the directory to output the mapping files to
     *
     *     [php]
     *     $exporter = new YamlExporter($metadata);
     *     $exporter->setOutputDir(__DIR__ . '/yaml');
     *     $exporter->export();
     *
     * @param string $dir
     * @return void
     */",
 "/**
     * Export each ClassMetadata instance to a single Doctrine Mapping file
     * named after the entity
     *
     * @return void
     */",
 "/**
*GeneratethepathtowritetheclassforthegivenClassMetadataInfoinstance
*
*@paramClassMetadataInfo$metadata
*@returnstring$path
*/",
 "/**
*Setthedirectorytooutputthemappingfilesto
*
*[php]
*$exporter=newYamlExporter($metadata,__DIR__.'/yaml');
*$exporter->setExtension('.yml');
*$exporter->export();
*
*@paramstring$extension
*@returnvoid
*/",
 "/**
*AbstractbaseclasswhichistobeusedfortheExporterdrivers
*whichcanbefoundin\Doctrine\ORM\Tools\Export\Driver
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.org
*@since2.0
*@version$Revision$
*@authorJonathanWage<jonwage@gmail.com>
*/",
 "/**
     * Logs a SQL statement somewhere.
     *
     * @param string $sql The SQL to be executed.
     * @param array $params The SQL parameters.
     * @param array $types The SQL parameter types.
     * @return void
     */",
 "/**
     * Mark the last started query as stopped. This can be used for timing of queries.
     *
     * @return void
     */",
 "/**
 * Interface for SQL loggers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * return string to call a function to get a substring inside an SQL statement
     *
     * Note: Not SQL92, but common functionality.
     *
     * @param string $value         an sql string literal or column name/alias
     * @param integer $position     where to start the substring portion
     * @param integer $length       the substring portion length
     * @return string               SQL substring function with given parameters
     * @override
     */",
 "/**
     * Return string to call a variable with the current timestamp inside an SQL statement
     * There are three special variables for current date and time:
     * - CURRENT_TIMESTAMP (date and time, TIMESTAMP type)
     * - CURRENT_DATE (date, DATE type)
     * - CURRENT_TIME (time, TIME type)
     *
     * @return string to call a variable with the current timestamp
     * @override
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * Returns global unique identifier
     *
     * @return string to get global unique identifier
     * @override
     */",
 "/**
     * Get the number of days difference between two dates.
     *
     * Note: Since Oracle timestamp differences are calculated down to the microsecond we have to truncate
     * them to the difference in days. This is obviously a restriction of the original functionality, but we
     * need to make this a portable function.
     *
     * @param type $date1
     * @param type $date2
     * @return type
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the SQL used to create a sequence that starts with a given value
     * and increments by the given allocation size.
     *
     * Need to specifiy minvalue, since start with is hidden in the system and MINVALUE <= START WITH.
     * Therefore we can use MINVALUE to be able to get a hint what START WITH was for later introspection
     * in {@see listSequences()}
     *
     * @param \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * {@inheritdoc}
     *
     * @param string $sequenceName
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @param integer $level
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column on the Oracle platform.
     *
     * @params array $field
     * @override
     */",
 "/** @override */",
 "/**
     *
     * @param string $table
     * @param array $columns
     * @param array $options
     * @return array
     */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaOracleReader.html
     * @param  string $table
     * @return string
     */",
 "/**
     *
     * @param  \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * @param  ForeignKeyConstraint|string $foreignKey
     * @param  Table|string $table
     * @return string
     */",
 "/**
     * Gets the sql statements for altering an existing table.
     *
     * The method returns an array of sql statements, since some platforms need several statements.
     *
     * @param string $diff->name          name of the table that is intended to be changed.
     * @param array $changes        associative array that contains the details of each type      *
     * @param boolean $check        indicates whether the function should just check if the DBMS driver
     *                              can perform the requested table alterations if the value is true or
     *                              actually perform them otherwise.
     * @return array
     */",
 "/**
     * Whether the platform prefers sequences for ID generation.
     *
     * @return boolean
     */",
 "/**
     * Get the platform name for this instance
     *
     * @return string
     */",
 "/**
     * Adds an driver-specific LIMIT clause to the query
     *
     * @param string $query         query to modify
     * @param integer $limit        limit the number of rows
     * @param integer $offset       start reading from given offset
     * @return string               the modified query
     */",
 "/**
     * Gets the character casing of a column in an SQL result set of this platform.
     *
     * Oracle returns all column names in SQL result sets in uppercase.
     *
     * @param string $column The column name for which to get the correct character casing.
     * @return string The column name in the character casing used in SQL result sets.
     */",
 "/**
     * Maximum length of any given databse identifier, like tables or column names.
     *
     * @return int
     */",
 "/**
     * Whether the platform supports sequences.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports releasing savepoints.
     *
     * @return boolean
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * This is for test reasons, many vendors have special requirements for dummy statements.
     *
     * @return string
     */",
 "/**
     * Generate SQL to release a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Gets the SQL Snippet used to declare a BLOB column type.
     */",
 "/**
 * OraclePlatform.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Sets the input data to be tokenized.
     *
     * The Lexer is immediately reset and the new input tokenized.
     * Any unprocessed tokens from any previous input are lost.
     *
     * @param string $input The input to be tokenized.
     */",
 "/**
     * Resets the lexer.
     */",
 "/**
     * Resets the peek pointer to 0.
     */",
 "/**
     * Resets the lexer position on the input to the given position.
     *
     * @param integer $position Position to place the lexical scanner
     */",
 "/**
     * Checks whether a given token matches the current lookahead.
     *
     * @param integer|string $token
     * @return boolean
     */",
 "/**
     * Checks whether any of the given tokens matches the current lookahead
     *
     * @param array $tokens
     * @return boolean
     */",
 "/**
     * Moves to the next token in the input string.
     *
     * A token is an associative array containing three items:
     *  - 'value'    : the string value of the token in the input string
     *  - 'type'     : the type of the token (identifier, numeric, string, input
     *                 parameter, none)
     *  - 'position' : the position of the token in the input string
     *
     * @return array|null the next token; null if there is no more tokens left
     */",
 "/**
     * Tells the lexer to skip input tokens until it sees a token with the given value.
     *
     * @param $type The token type to skip until.
     */",
 "/**
     * Checks if given value is identical to the given token
     *
     * @param mixed $value
     * @param integer $token
     * @return boolean
     */",
 "/**
     * Moves the lookahead token forward.
     *
     * @return array | null The next token or NULL if there are no more tokens ahead.
     */",
 "/**
     * Peeks at the next token, returns it and immediately resets the peek.
     *
     * @return array|null The next token or NULL if there are no more tokens ahead.
     */",
 "/**
     * Scans the input string for tokens.
     *
     * @param string $input a query string
     */",
 "/**
     * Gets the literal for a given token.
     *
     * @param integer $token
     * @return string
     */",
 "/**
     * Lexical catchable patterns.
     *
     * @return array
     */",
 "/**
     * Lexical non-catchable patterns.
     *
     * @return array
     */",
 "/**
     * Retrieve token type. Also processes the token value if necessary.
     *
     * @param string $value
     * @return integer
     */",
 "/**
 * Base class for writing simple lexers, i.e. for creating small DSLs.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @todo Rename: AbstractLexer
 */",
 "/**
 * Annotation that can be used to signal to the parser
 * to check the types of all declared attributes during the parsing process.
 *
 * @author Fabio B. Silva <fabio.bat.silva@gmail.com>
 *
 * @Annotation
 */",
 "/**
     * Use this method to register all autoloaders for a setup where Doctrine is checked out from
     * its github repository at {@link http://github.com/doctrine/doctrine2}
     *
     * @param string $gitCheckoutRootPath
     * @return void
     */",
 "/**
     * Use this method to register all autoloaders for a setup where Doctrine is installed
     * though {@link http://pear.doctrine-project.org}.
     *
     * @return void
     */",
 "/**
     * Use this method to register all autoloads for a downloaded Doctrine library.
     * Pick the directory the library was uncompressed into.
     *
     * @param string $directory
     */",
 "/**
     * Create a configuration with an annotation metadata driver.
     *
     * @param array $paths
     * @param boolean $isDevMode
     * @param string $proxyDir
     * @param Cache $cache
     * @return Configuration
     */",
 "/**
     * Create a configuration with a xml metadata driver.
     *
     * @param array $paths
     * @param boolean $isDevMode
     * @param string $proxyDir
     * @param Cache $cache
     * @return Configuration
     */",
 "/**
     * Create a configuration with a yaml metadata driver.
     *
     * @param array $paths
     * @param boolean $isDevMode
     * @param string $proxyDir
     * @param Cache $cache
     * @return Configuration
     */",
 "/**
     * Create a configuration without a metadata driver.
     *
     * @param bool $isDevMode
     * @param string $proxyDir
     * @param Cache $cache
     * @return Configuration
     */",
 "/**
 * Convenience class for setting up Doctrine from different installations and configurations.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @override
     * @todo If the collection being counted is already joined, the SQL can be simpler (more efficient).
     */",
 "/**
     * @override
     */",
 "/**
 * \"SIZE\" \"(\" CollectionValuedPathExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
*XmlDriverthatadditionallylooksformappinginformationinaglobalfile.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@licenseMIT
*/",
 "/**
 * Subselect ::= SimpleSelectClause SubselectFromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param \Doctrine\DBAL\Schema\TableDiff $tableDiff
     * @param \Doctrine\DBAL\Platforms\AbstractPlatform $platform
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\TableDiff
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @param string|array $sql
     * @return \Doctrine\DBAL\Event\SchemaAlterTableEventArgs
     */",
 "/**
     * @return array
     */",
 "/**
 * Event Arguments used when SQL queries for creating tables are generated inside Doctrine\DBAL\Platform\*Platform.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.2
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"SUBSTRING\" \"(\" StringPrimary \",\" SimpleArithmeticExpression \",\" SimpleArithmeticExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Constructs a joinColumn mapping array based on the information
     * found in the given SimpleXMLElement.
     *
     * @param $joinColumnElement The XML element.
     * @return array The mapping array.
     */",
 "/**
     * Gathers a list of cascade options found in the given cascade element.
     *
     * @param $cascadeElement The cascade element.
     * @return array The list of cascade options.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * XmlDriver is a metadata driver that enables mapping through XML files.
 *
 * @license 	http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    	www.doctrine-project.org
 * @since   	2.0
 * @version     $Revision$
 * @author		Benjamin Eberlei <kontakt@beberlei.de>
 * @author		Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @return EntityManager
     */",
 "/**
 * Provides event arguments for the preFlush event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @version     $Revision$
 * @author      Roman Borschel <roman@code-factory.de>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @param \Doctrine\DBAL\Schema\ColumnDiff $columnDiff
     * @param \Doctrine\DBAL\Schema\TableDiff $tableDiff
     * @param \Doctrine\DBAL\Platforms\AbstractPlatform $platform
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\ColumnDiff
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\TableDiff
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @param string|array $sql
     * @return \Doctrine\DBAL\Event\SchemaAlterTableChangeColumnEventArgs
     */",
 "/**
     * @return array
     */",
 "/**
 * Event Arguments used when SQL queries for changing table columns are generated inside Doctrine\DBAL\Platform\*Platform.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/** @override */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Initializes a related collection.
     *
     * @param object $entity The entity to which the collection belongs.
     * @param ClassMetadata $class
     * @param string $name The name of the field on the entity that holds the collection.
     * @param string $parentDqlAlias Alias of the parent fetch joining this collection.
     */",
 "/**
     * Gets an entity instance.
     *
     * @param $data The instance data.
     * @param $dqlAlias The DQL alias of the entity's class.
     * @return object The entity.
     */",
 "/**
     * Gets a ClassMetadata instance from the local cache.
     * If the instance is not yet in the local cache, it is loaded into the
     * local cache.
     *
     * @param string $className The name of the class.
     * @return ClassMetadata
     */",
 "/**
     * Hydrates a single row in an SQL result set.
     *
     * @internal
     * First, the data of the row is split into chunks where each chunk contains data
     * that belongs to a particular component/class. Afterwards, all these chunks
     * are processed, one after the other. For each chunk of class data only one of the
     * following code paths is executed:
     *
     * Path A: The data chunk belongs to a joined/associated object and the association
     *         is collection-valued.
     * Path B: The data chunk belongs to a joined/associated object and the association
     *         is single-valued.
     * Path C: The data chunk belongs to a root result element/object that appears in the topmost
     *         level of the hydrated result. A typical example are the objects of the type
     *         specified by the FROM clause in a DQL query.
     *
     * @param array $data The data of the row to process.
     * @param array $cache The cache to use.
     * @param array $result The result array to fill.
     */",
 "/**
 * The ObjectHydrator constructs an object graph out of an SQL result set.
 *
 * @since  2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Guilherme Blanco <guilhermeblanoc@hotmail.com>
 *
 * @internal Highly performance-sensitive code.
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
     * @param Schema $schema
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
     * @param Column $column
     */",
 "/**
     * @param Table $localTable
     * @param ForeignKeyConstraint $fkConstraint
     */",
 "/**
     * @param Table $table
     * @param Index $index
     */",
 "/**
 * Remove assets from a schema that are not in the default namespace.
 *
 * Some databases such as MySQL support cross databases joins, but don't
 * allow to call DDLs to a database from another connected database.
 * Before a schema is serialized into SQL this visitor can cleanup schemas with
 * non default namespaces.
 *
 * This visitor filters all these non-default namespaced tables and sequences
 * and removes them from the SChema instance.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.2
 */",
 "/**
     * Constructor.
     *
     * @param Query|QueryBuilder $query A Doctrine ORM query or query builder.
     * @param Boolean $fetchJoinCollection Whether the query joins a collection (true by default).
     */",
 "/**
     * Returns the query
     *
     * @return Query
     */",
 "/**
     * Returns whether the query joins a collection.
     *
     * @return Boolean Whether the query joins a collection.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Clones a query.
     *
     * @param Query $query The query.
     *
     * @return Query The cloned query.
     */",
 "/**
 * Paginator
 *
 * The paginator can handle various complex scenarios with DQL.
 *
 * @author Pablo D??ez <pablodip@gmail.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @license New BSD
 */",
 "/** @override */",
 "/**
     * Converts a value from its database representation to its PHP representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The PHP representation of the value.
     */",
 "/**
 * Type that maps an SQL BLOB to a PHP resource stream
 *
 * @since 2.2
 */",
 "/**
 * Expression class for generating DQL functions
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param integer                  $verbosity The verbosity level (self::VERBOSITY_QUIET, self::VERBOSITY_NORMAL, self::VERBOSITY_VERBOSE)
     * @param Boolean                  $decorated Whether to decorate messages or not (null for auto-guessing)
     * @param OutputFormatterInterface $formatter Output formatter instance
     *
     * @api
     */",
 "/**
     * Sets output formatter.
     *
     * @param OutputFormatterInterface $formatter
     *
     * @api
     */",
 "/**
     * Returns current output formatter instance.
     *
     * @return  OutputFormatterInterface
     *
     * @api
     */",
 "/**
     * Sets the decorated flag.
     *
     * @param Boolean $decorated Whether to decorated the messages or not
     *
     * @api
     */",
 "/**
     * Gets the decorated flag.
     *
     * @return Boolean true if the output will decorate messages, false otherwise
     *
     * @api
     */",
 "/**
     * Sets the verbosity of the output.
     *
     * @param integer $level The level of verbosity
     *
     * @api
     */",
 "/**
     * Gets the current verbosity of the output.
     *
     * @return integer The current level of verbosity
     *
     * @api
     */",
 "/**
     * Writes a message to the output and adds a newline at the end.
     *
     * @param string|array $messages The message as an array of lines of a single string
     * @param integer      $type     The type of output
     *
     * @api
     */",
 "/**
     * Writes a message to the output.
     *
     * @param string|array $messages The message as an array of lines of a single string
     * @param Boolean      $newline  Whether to add a newline or not
     * @param integer      $type     The type of output
     *
     * @throws \InvalidArgumentException When unknown output type is given
     *
     * @api
     */",
 "/**
     * Writes a message to the output.
     *
     * @param string  $message A message to write to the output
     * @param Boolean $newline Whether to add a newline or not
     */",
 "/**
 * Base class for output classes.
 *
 * There is three level of verbosity:
 *
 *  * normal: no option passed (normal output - information)
 *  * verbose: -v (more output - debug)
 *  * quiet: -q (no output)
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns the first argument from the raw parameters (not parsed).
     *
     * @return string The value of the first argument or null otherwise
     */",
 "/**
     * Returns true if the raw parameters (not parsed) contains a value.
     *
     * This method is to be used to introspect the input parameters
     * before it has been validated. It must be used carefully.
     *
     * @param string|array $values The values to look for in the raw parameters (can be an array)
     *
     * @return Boolean true if the value is contained in the raw parameters
     */",
 "/**
     * Returns the value of a raw option (not parsed).
     *
     * This method is to be used to introspect the input parameters
     * before it has been validated. It must be used carefully.
     *
     * @param string|array $values The value(s) to look for in the raw parameters (can be an array)
     * @param mixed $default The default value to return if no result is found
     *
     * @return mixed The option value
     */",
 "/**
     * Binds the current Input instance with the given arguments and options.
     *
     * @param InputDefinition $definition A InputDefinition instance
     */",
 "/**
     * Validate if arguments given are correct.
     *
     * Throws an exception when not enough arguments are given.
     *
     * @throws \RuntimeException
     */",
 "/**
     * Returns all the given arguments merged with the default values.
     *
     * @return array
     */",
 "/**
     * Get argument by name.
     *
     * @param string $name The name of the argument
     * @return mixed
     */",
 "/**
     * @return array
     */",
 "/**
     * Get an option by name.
     *
     * @param string $name The name of the option
     * @return mixed
     */",
 "/**
     * Is this input means interactive?
     *
     * @return Boolean
     */",
 "/**
 * InputInterface is the interface implemented by all input classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param Helper[] $helpers An array of helper.
     */",
 "/**
     * Sets a helper.
     *
     * @param HelperInterface $helper The helper instance
     * @param string          $alias  An alias
     */",
 "/**
     * Returns true if the helper if defined.
     *
     * @param string  $name The helper name
     *
     * @return Boolean true if the helper is defined, false otherwise
     */",
 "/**
     * Gets a helper value.
     *
     * @param string $name The helper name
     *
     * @return HelperInterface The helper instance
     *
     * @throws \InvalidArgumentException if the helper is not defined
     */",
 "/**
     * Sets the command associated with this helper set.
     *
     * @param Command $command A Command instance
     */",
 "/**
     * Gets the command associated with this helper set.
     *
     * @return Command A Command instance
     */",
 "/**
 * HelperSet represents a set of helpers to be used with a command.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets the default connection name.
     *
     * @return string The default connection name
     */",
 "/**
     * Gets the named connection.
     *
     * @param string $name The connection name (null for the default one)
     *
     * @return Connection
     */",
 "/**
     * Gets an array of all registered connections
     *
     * @return array An array of Connection instances
     */",
 "/**
     * Gets all connection names.
     *
     * @return array An array of connection names
     */",
 "/**
 * Contract covering connection for a Doctrine persistence layer ManagerRegistry class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Fabien Potencier <fabien@symfony.com>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Lukas Kahwe Smith <smith@pooteeweet.org>
 */",
 "/**
     * Create a Connection to an Oracle Database using oci8 extension.
     *
     * @param string $username
     * @param string $password
     * @param string $db
     */",
 "/**
     * Create a non-executed prepared statement.
     *
     * @param  string $prepareString
     * @return OCI8Statement
     */",
 "/**
     * @param string $sql
     * @return OCI8Statement
     */",
 "/**
     * Quote input value.
     *
     * @param mixed $input
     * @param int $type PDO::PARAM*
     * @return mixed
     */",
 "/**
     *
     * @param  string $statement
     * @return int
     */",
 "/**
     * Start a transactiom
     *
     * Oracle has to explicitly set the autocommit mode off. That means
     * after connection, a commit or rollback there is always automatically
     * opened a new transaction.
     *
     * @return bool
     */",
 "/**
     * @throws OCI8Exception
     * @return bool
     */",
 "/**
     * @throws OCI8Exception
     * @return bool
     */",
 "/**
 * OCI8 implementation of the Connection interface.
 *
 * @since 2.0
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to clear the query cache of the various cache drivers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param integer         $verbosity The verbosity level (self::VERBOSITY_QUIET, self::VERBOSITY_NORMAL,
     *                                   self::VERBOSITY_VERBOSE)
     * @param Boolean         $decorated Whether to decorate messages or not (null for auto-guessing)
     * @param OutputFormatter $formatter Output formatter instance
     *
     * @api
     */",
 "/**
 * ConsoleOutput is the default class for all CLI output. It uses STDOUT.
 *
 * This class is a convenient wrapper around `StreamOutput`.
 *
 *     $output = new ConsoleOutput();
 *
 * This is equivalent to:
 *
 *     $output = new StreamOutput(fopen('php://stdout', 'w'));
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Expression class for building DQL Group By parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Type that maps a database BIGINT to a PHP string.
 *
 * @author robo
 * @since 2.0
 */",
 "/**
     * Add a new annotation to the globally ignored annotation names with regard to exception handling.
     *
     * @param string $name
     */",
 "/**
     * Constructor.
     *
     * Initializes a new AnnotationReader.
     */",
 "/**
     * Gets the annotations applied to a class.
     *
     * @param ReflectionClass $class The ReflectionClass of the class from which
     *                               the class annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets a class annotation.
     *
     * @param ReflectionClass $class The ReflectionClass of the class from which
     *                               the class annotations should be read.
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
     * Gets the annotations applied to a property.
     *
     * @param ReflectionProperty $property The ReflectionProperty of the property
     *                                     from which the annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets a property annotation.
     *
     * @param ReflectionProperty $property
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
     * Gets the annotations applied to a method.
     *
     * @param ReflectionMethod $property The ReflectionMethod of the method from which
     *                                   the annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets a method annotation.
     *
     * @param ReflectionMethod $method
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
     * Returns the ignored annotations for the given class.
     *
     * @param ReflectionClass $class
     * @return array
     */",
 "/**
     * Collects parsing metadata for a given class
     *
     * @param ReflectionClass $class
     */",
 "/**
 * A reader for docblock annotations.
 *
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to generate entity classes and method stubs from your mapping information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to generate the SQL needed to update the database schema to match
 * the current mapping information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Ryan Weaver <ryan@thatsquality.com>
 */",
 "/**
     * @throws ConversionException
     * @param string $value
     * @param AbstractPlatform $platform
     * @return DateTime
     */",
 "/**
 * Variable DateTime Type using date_create() instead of DateTime::createFromFormat()
 *
 * This type has performance implications as it runs twice as long as the regular
 * {@see DateTimeType}, however in certain PostgreSQL configurations with
 * TIMESTAMP(n) columns where n > 0 it is necessary to use this type.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Base exception class for package Doctrine\Common
 * @author heinrich
 *
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Array cache driver.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
 * ConditionalTerm ::= ConditionalFactor {\"AND\" ConditionalFactor}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Exception thrown when a Proxy fails to retrieve an Entity result.
 *
 * @author robo
 * @since 2.0
 */",
 "/**
     * Initializes a new AnnotationDriver that uses the given AnnotationReader for reading
     * docblock annotations.
     *
     * @param AnnotationReader $reader The AnnotationReader to use, duck-typed.
     * @param string|array $paths One or multiple paths where mapping classes can be found.
     */",
 "/**
     * Append lookup paths to metadata driver.
     *
     * @param array $paths
     */",
 "/**
     * Retrieve the defined metadata lookup paths.
     *
     * @return array
     */",
 "/**
     * Retrieve the current annotation reader
     *
     * @return AnnotationReader
     */",
 "/**
     * Get the file extension used to look for mapping files under
     *
     * @return void
     */",
 "/**
     * Set the file extension used to look for mapping files under
     *
     * @param string $fileExtension The file extension to set
     * @return void
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Whether the class with the specified name is transient. Only non-transient
     * classes, that is entities and mapped superclasses, should have their metadata loaded.
     * A class is non-transient if it is annotated with either @Entity or
     * @MappedSuperclass in the class doc block.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Attempts to resolve the fetch mode.
     *
     * @param string $className The class name
     * @param string $fetchMode The fetch mode
     * @return integer The fetch mode as defined in ClassMetadata
     * @throws MappingException If the fetch mode is not valid
     */",
 "/**
*FactorymethodfortheAnnotationDriver
*
*@paramarray|string$paths
*@paramAnnotationReader$reader
*@returnAnnotationDriver
*/",
 "/**
*TheAnnotationDriverreadsthemappingmetadatafromdocblockannotations.
*
*@since2.0
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanH.Wage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * @param string $from      The class name.
     * @param string $alias     The alias of the class.
     * @param string $indexBy   The index for the from.
     */",
 "/**
     * @return string
     */",
 "/**
     * @return string
     */",
 "/**
     * @return string
     */",
 "/**
 * Expression class for DQL from
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * RangeVariableDeclaration ::= AbstractSchemaName [\"AS\"] AliasIdentificationVariable
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Gets the Query instance used by the walker.
     *
     * @return Query.
     */",
 "/**
     * Gets the Connection used by the walker.
     *
     * @return Connection
     */",
 "/**
     * Gets the EntityManager used by the walker.
     *
     * @return EntityManager
     */",
 "/**
     * Gets the information about a single query component.
     *
     * @param string $dqlAlias The DQL alias.
     * @return array
     */",
 "/**
     * Gets an executor that can be used to execute the result of this walker.
     *
     * @return AbstractExecutor
     */",
 "/**
     * Generates a unique, short SQL table alias.
     *
     * @param string $tableName Table name
     * @param string $dqlAlias The DQL alias.
     * @return string Generated table alias.
     */",
 "/**
     * Forces the SqlWalker to use a specific alias for a table name, rather than
     * generating an alias on its own.
     *
     * @param string $tableName
     * @param string $alias
     * @param string $dqlAlias
     * @return string
     */",
 "/**
     * Gets an SQL column alias for a column name.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     * Generates the SQL JOINs that are necessary for Class Table Inheritance
     * for the given class.
     *
     * @param ClassMetadata $class The class for which to generate the joins.
     * @param string $dqlAlias The DQL alias of the class.
     * @return string The SQL.
     */",
 "/**
     * Generates a discriminator column SQL condition for the class with the given DQL alias.
     *
     * @param array $dqlAliases List of root DQL aliases to inspect for discriminator restrictions.
     * @return string
     */",
 "/**
     * Generates the filter SQL for a given entity and table alias.
     *
     * @param ClassMetadata $targetEntity Metadata of the target entity.
     * @param string $targetTableAlias The table alias of the joined/selected table.
     *
     * @return string The SQL query part to add to a query.
     */",
 "/**
     * Walks down a SelectStatement AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateStatement AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteStatement AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down an IdentificationVariable AST node, thereby generating the appropriate SQL.
     * This one differs of ->walkIdentificationVariable() because it generates the entity identifiers.
     *
     * @param string $identVariable
     * @return string
     */",
 "/**
     * Walks down an IdentificationVariable (no AST node associated), thereby generating the SQL.
     *
     * @param string $identificationVariable
     * @param string $fieldName
     * @return string The SQL.
     */",
 "/**
     * Walks down a PathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param $selectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a FromClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FunctionNode AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByClause AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByItem AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a HavingClause AST node, thereby generating the appropriate SQL.
     *
     * @param HavingClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a JoinVariableDeclaration AST node and creates the corresponding SQL.
     *
     * @param JoinVariableDeclaration $joinVarDecl
     * @return string The SQL.
     */",
 "/**
     * Walks down a CaseExpression AST node and generates the corresponding SQL.
     *
     * @param CoalesceExpression|NullIfExpression|GeneralCaseExpression|SimpleCaseExpression $expression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CoalesceExpression AST node and generates the corresponding SQL.
     *
     * @param CoalesceExpression $coalesceExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullIfExpression AST node and generates the corresponding SQL.
     *
     * @param NullIfExpression $nullIfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GeneralCaseExpression AST node and generates the corresponding SQL.
     *
     * @param GeneralCaseExpression $generalCaseExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleCaseExpression AST node and generates the corresponding SQL.
     *
     * @param SimpleCaseExpression $simpleCaseExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectExpression AST node and generates the corresponding SQL.
     *
     * @param SelectExpression $selectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a QuantifiedExpression AST node, thereby generating the appropriate SQL.
     *
     * @param QuantifiedExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a Subselect AST node, thereby generating the appropriate SQL.
     *
     * @param Subselect
     * @return string The SQL.
     */",
 "/**
     * Walks down a SubselectFromClause AST node, thereby generating the appropriate SQL.
     *
     * @param SubselectFromClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an AggregateExpression AST node, thereby generating the appropriate SQL.
     *
     * @param AggregateExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByClause AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByItem AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteClause AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateClause AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateItem AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a WhereClause AST node, thereby generating the appropriate SQL.
     * WhereClause or not, the appropriate discriminator sql is added.
     *
     * @param WhereClause
     * @return string The SQL.
     */",
 "/**
     * Walk down a ConditionalExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalTerm AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalTerm
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalFactor AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalFactor
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalPrimary AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalPrimary
     * @return string The SQL.
     */",
 "/**
     * Walks down an ExistsExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ExistsExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CollectionMemberExpression AST node, thereby generating the appropriate SQL.
     *
     * @param CollectionMemberExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an EmptyCollectionComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param EmptyCollectionComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param NullComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InstanceOfExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InstanceOfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down a literal that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a BetweenExpression AST node, thereby generating the appropriate SQL.
     *
     * @param BetweenExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a LikeExpression AST node, thereby generating the appropriate SQL.
     *
     * @param LikeExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a StateFieldPathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param StateFieldPathExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InputParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InputParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an SimpleArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticTerm AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticFactor that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a StringPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a ResultVriable that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param string $resultVariable
     * @return string The SQL.
     */",
 "/**
 * The SqlWalker is a TreeWalker that walks over a DQL AST and constructs
 * the corresponding SQL.
 *
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Alexander <iam.asm89@gmail.com>
 * @since  2.0
 * @todo Rename: SQLWalker
 */",
 "/**
     * Constructor.
     *
     * @param Command $command A Command instance to test.
     */",
 "/**
     * Executes the command.
     *
     * Available options:
     *
     *  * interactive: Sets the input interactive flag
     *  * decorated:   Sets the output decorated flag
     *  * verbosity:   Sets the output verbosity flag
     *
     * @param array $input   An array of arguments and options
     * @param array $options An array of options
     *
     * @return integer The command exit code
     */",
 "/**
     * Gets the display returned by the last execution of the command.
     *
     * @return string The display
     */",
 "/**
     * Gets the input instance used by the last execution of the command.
     *
     * @return InputInterface The current input instance
     */",
 "/**
     * Gets the output instance used by the last execution of the command.
     *
     * @return OutputInterface The current output instance
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Add a nested driver.
     *
     * @param Driver $nestedDriver
     * @param string $namespace
     */",
 "/**
     * Get the array of nested drivers.
     *
     * @return array $drivers
     */",
 "/**
     * Loads the metadata for the specified class into the provided container.
     *
     * @param string $className
     * @param ClassMetadataInfo $metadata
     */",
 "/**
     * Gets the names of all mapped classes known to this driver.
     *
     * @return array The names of all mapped classes known to this driver.
     */",
 "/**
     * Whether the class with the specified name should have its metadata loaded.
     *
     * This is only the case for non-transient classes either mapped as an Entity or MappedSuperclass.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
 * The DriverChain allows you to add multiple other mapping drivers for
 * certain namespaces
 *
 * @since 2.0
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 * @todo Rename: MappingDriverChain or MetadataDriverChain
 */",
 "/**
 * \"DATE_DIFF(date1, date2)\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * A MappingException indicates that something is wrong with the mapping setup.
 *
 * @since 2.2
 */",
 "/**
     * Return an array of the parent classes (not interfaces) for the given class.
     *
     * @param string $class
     * @return array
     */",
 "/**
     * Return the shortname of a class.
     *
     * @param string $class
     * @return string
     */",
 "/**
     * @param string $class
     * @return string
     */",
 "/**
     * Return a reflection class instance or null
     *
     * @param string $class
     * @return ReflectionClass|null
     */",
 "/**
     * Return an accessible property (setAccessible(true)) or null.
     *
     * @param string $class
     * @param string $property
     * @return ReflectionProperty|null
     */",
 "/**
     * Check if the class have a public method with the given name.
     *
     * @param mixed $class
     * @param mixed $method
     * @return bool
     */",
 "/**
 * Very simple reflection service abstraction.
 *
 * This is required inside metadata layers that may require either
 * static or runtime reflection.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Gets the entity that caused the exception.
     *
     * @return object
     */",
 "/**
 * An OptimisticLockException is thrown when a version check on an object
 * that uses optimistic locking through a version field fails.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 */",
 "/**
     * @param ClassMetadataBuilder $builder
     * @param array $mapping
     */",
 "/**
     * Add Join Columns
     *
     * @param string $columnName
     * @param string $referencedColumnName
     * @param bool $nullable
     * @param bool $unique
     * @param string $onDelete
     * @param string $columnDef
     */",
 "/**
     * @return ClassMetadataBuilder
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritDoc}
     * @todo Same code exists in AnnotationDriver, should we re-use it somehow or not worry about it?
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The StaticPHPDriver calls a static loadMetadata() method on your entity
 * classes where you can manually populate the ClassMetadata instance.
 *
 * @license 	http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    	www.doctrine-project.org
 * @since   	2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * DB2 Keywords
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
 * Type that maps an SQL DECIMAL to a PHP double.
 *
 * @since 2.0
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to create the database schema for a set of classes based on their mappings.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Sets the SQL of the query.
     *
     * @param string $sql
     * @return NativeQuery This query instance.
     */",
 "/**
     * Gets the SQL query.
     *
     * @return mixed The built SQL query or an array of all SQL queries.
     * @override
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Represents a native SQL query.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Retrieve associated EntityManager.
     *
     * @return \Doctrine\ORM\EntityManager
     */",
 "/**
 * Provides event arguments for the postFlush event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.0
 * @author      Daniel Freudenberger <df@rebuy.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Includes executed SQLs in a Debug Stack
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
     * Loads the metadata for the specified class into the provided container.
     *
     * @param string $className
     * @param ClassMetadataInfo $metadata
     */",
 "/**
     * Gets the names of all mapped classes known to this driver.
     *
     * @return array The names of all mapped classes known to this driver.
     */",
 "/**
     * Whether the class with the specified name should have its metadata loaded.
     * This is only the case if it is either mapped as an Entity or a
     * MappedSuperclass.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
 * Contract for metadata drivers.
 *
 * @since 2.0
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @todo Rename: MetadataDriver or MappingDriver
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
     * Creates a new query parser object.
     *
     * @param Query $query The Query to parse.
     */",
 "/**
     * Sets a custom tree walker that produces output.
     * This tree walker will be run last over the AST, after any other walkers.
     *
     * @param string $className
     */",
 "/**
     * Adds a custom tree walker for modifying the AST.
     *
     * @param string $className
     */",
 "/**
     * Gets the lexer used by the parser.
     *
     * @return \Doctrine\ORM\Query\Lexer
     */",
 "/**
     * Gets the ParserResult that is being filled with information during parsing.
     *
     * @return \Doctrine\ORM\Query\ParserResult
     */",
 "/**
     * Gets the EntityManager used by the parser.
     *
     * @return EntityManager
     */",
 "/**
     * Parse and build AST for the given Query.
     *
     * @return \Doctrine\ORM\Query\AST\SelectStatement |
     *         \Doctrine\ORM\Query\AST\\UpdateStatement |
     *         \Doctrine\ORM\Query\AST\DeleteStatement
     */",
 "/**
     * Attempts to match the given token with the current lookahead token.
     *
     * If they match, updates the lookahead token; otherwise raises a syntax
     * error.
     *
     * @param int token type
     * @return void
     * @throws QueryException If the tokens dont match.
     */",
 "/**
     * Free this parser enabling it to be reused
     *
     * @param boolean $deep     Whether to clean peek and reset errors
     * @param integer $position Position to reset
     */",
 "/**
     * Parses a query string.
     *
     * @return ParserResult
     */",
 "/**
     * Fix order of identification variables.
     *
     * They have to appear in the select clause in the same order as the
     * declarations (from ... x join ... y join ... z ...) appear in the query
     * as the hydration process relies on that order for proper operation.
     *
     * @param AST\SelectStatement|AST\DeleteStatement|AST\\UpdateStatement $AST
     * @return void
     */",
 "/**
     * Generates a new syntax error.
     *
     * @param string $expected Expected string.
     * @param array $token Got token.
     *
     * @throws \Doctrine\ORM\Query\QueryException
     */",
 "/**
     * Generates a new semantical error.
     *
     * @param string $message Optional message.
     * @param array $token Optional token.
     *
     * @throws \Doctrine\ORM\Query\QueryException
     */",
 "/**
     * Peeks beyond the specified token and returns the first token after that one.
     *
     * @param array $token
     * @return array
     */",
 "/**
     * Peek beyond the matched closing parenthesis and return the first token after that one.
     *
     * @return array
     */",
 "/**
     * Checks if the given token indicates a mathematical operator.
     *
     * @return boolean TRUE if the token is a mathematical operator, FALSE otherwise.
     */",
 "/**
     * Checks if the next-next (after lookahead) token starts a function.
     *
     * @return boolean TRUE if the next-next tokens start a function, FALSE otherwise.
     */",
 "/**
     * Checks whether the given token type indicates an aggregate function.
     *
     * @return boolean TRUE if the token type is an aggregate function, FALSE otherwise.
     */",
 "/**
     * Checks whether the current lookahead token of the lexer has the type T_ALL, T_ANY or T_SOME.
     *
     * @return boolean
     */",
 "/**
     * Validates that the given <tt>IdentificationVariable</tt> is semantically correct.
     * It must exist in query components list.
     *
     * @return void
     */",
 "/**
     * Validates that the given <tt>PartialObjectExpression</tt> is semantically correct.
     * It must exist in query components list.
     *
     * @return void
     */",
 "/**
     * Validates that the given <tt>ResultVariable</tt> is semantically correct.
     * It must exist in query components list.
     *
     * @return void
     */",
 "/**
     * Validates that the given <tt>PathExpression</tt> is semantically correct for grammar rules:
     *
     * AssociationPathExpression             ::= CollectionValuedPathExpression | SingleValuedAssociationPathExpression
     * SingleValuedPathExpression            ::= StateFieldPathExpression | SingleValuedAssociationPathExpression
     * StateFieldPathExpression              ::= IdentificationVariable \".\" StateField
     * SingleValuedAssociationPathExpression ::= IdentificationVariable \".\" SingleValuedAssociationField
     * CollectionValuedPathExpression        ::= IdentificationVariable \".\" CollectionValuedAssociationField
     *
     * @param array $deferredItem
     * @param mixed $AST
     */",
 "/**
     * QueryLanguage ::= SelectStatement | UpdateStatement | DeleteStatement
     *
     * @return \Doctrine\ORM\Query\AST\SelectStatement |
     *         \Doctrine\ORM\Query\AST\\UpdateStatement |
     *         \Doctrine\ORM\Query\AST\DeleteStatement
     */",
 "/**
     * SelectStatement ::= SelectClause FromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]
     *
     * @return \Doctrine\ORM\Query\AST\SelectStatement
     */",
 "/**
     * UpdateStatement ::= UpdateClause [WhereClause]
     *
     * @return \Doctrine\ORM\Query\AST\\UpdateStatement
     */",
 "/**
     * DeleteStatement ::= DeleteClause [WhereClause]
     *
     * @return \Doctrine\ORM\Query\AST\DeleteStatement
     */",
 "/**
     * IdentificationVariable ::= identifier
     *
     * @return string
     */",
 "/**
     * AliasIdentificationVariable = identifier
     *
     * @return string
     */",
 "/**
*AbstractSchemaName::=identifier
*
*@returnstring
*/",
 "/**
*AliasResultVariable::=identifier
*
*@returnstring
*/",
 "/**
*ResultVariable::=identifier
*
*@returnstring
*/",
 "/**
*JoinAssociationPathExpression::=IdentificationVariable\".\" (CollectionValuedAssociationField | SingleValuedAssociationField)
     *
     * @return \Doctrine\ORM\Query\AST\JoinAssociationPathExpression
     */",
 "/**
     * Parses an arbitrary path expression and defers semantical validation
     * based on expected types.
     *
     * PathExpression ::= IdentificationVariable \".\" identifier
     *
     * @param integer $expectedTypes
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * AssociationPathExpression ::= CollectionValuedPathExpression | SingleValuedAssociationPathExpression
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * SingleValuedPathExpression ::= StateFieldPathExpression | SingleValuedAssociationPathExpression
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * StateFieldPathExpression ::= IdentificationVariable \".\" StateField
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * SingleValuedAssociationPathExpression ::= IdentificationVariable \".\" SingleValuedAssociationField
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * CollectionValuedPathExpression ::= IdentificationVariable \".\" CollectionValuedAssociationField
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * SelectClause ::= \"SELECT\" [\"DISTINCT\"] SelectExpression {\",\" SelectExpression}
     *
     * @return \Doctrine\ORM\Query\AST\SelectClause
     */",
 "/**
     * SimpleSelectClause ::= \"SELECT\" [\"DISTINCT\"] SimpleSelectExpression
     *
     * @return \Doctrine\ORM\Query\AST\SimpleSelectClause
     */",
 "/**
     * UpdateClause ::= \"UPDATE\" AbstractSchemaName [\"AS\"] AliasIdentificationVariable \"SET\" UpdateItem {\",\" UpdateItem}*
     *
     * @return \Doctrine\ORM\Query\AST\\UpdateClause
     */",
 "/**
     * DeleteClause ::= \"DELETE\" [\"FROM\"] AbstractSchemaName [\"AS\"] AliasIdentificationVariable
     *
     * @return \Doctrine\ORM\Query\AST\DeleteClause
     */",
 "/**
     * FromClause ::= \"FROM\" IdentificationVariableDeclaration {\",\" IdentificationVariableDeclaration}*
     *
     * @return \Doctrine\ORM\Query\AST\FromClause
     */",
 "/**
     * SubselectFromClause ::= \"FROM\" SubselectIdentificationVariableDeclaration {\",\" SubselectIdentificationVariableDeclaration}*
     *
     * @return \Doctrine\ORM\Query\AST\SubselectFromClause
     */",
 "/**
     * WhereClause ::= \"WHERE\" ConditionalExpression
     *
     * @return \Doctrine\ORM\Query\AST\WhereClause
     */",
 "/**
     * HavingClause ::= \"HAVING\" ConditionalExpression
     *
     * @return \Doctrine\ORM\Query\AST\HavingClause
     */",
 "/**
     * GroupByClause ::= \"GROUP\" \"BY\" GroupByItem {\",\" GroupByItem}*
     *
     * @return \Doctrine\ORM\Query\AST\GroupByClause
     */",
 "/**
     * OrderByClause ::= \"ORDER\" \"BY\" OrderByItem {\",\" OrderByItem}*
     *
     * @return \Doctrine\ORM\Query\AST\OrderByClause
     */",
 "/**
     * Subselect ::= SimpleSelectClause SubselectFromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]
     *
     * @return \Doctrine\ORM\Query\AST\Subselect
     */",
 "/**
     * UpdateItem ::= SingleValuedPathExpression \"=\" NewValue
     *
     * @return \Doctrine\ORM\Query\AST\\UpdateItem
     */",
 "/**
     * GroupByItem ::= IdentificationVariable | ResultVariable | SingleValuedPathExpression
     *
     * @return string | \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * OrderByItem ::= (ResultVariable | SingleValuedPathExpression) [\"ASC\" | \"DESC\"]
     *
     * @return \Doctrine\ORM\Query\AST\OrderByItem
     */",
 "/**
     * NewValue ::= SimpleArithmeticExpression | StringPrimary | DatetimePrimary | BooleanPrimary |
     *      EnumPrimary | SimpleEntityExpression | \"NULL\"
     *
     * NOTE: Since it is not possible to correctly recognize individual types, here is the full
     * grammar that needs to be supported:
     *
     * NewValue ::= SimpleArithmeticExpression | \"NULL\"
     *
     * SimpleArithmeticExpression covers all *Primary grammar rules and also SimplEntityExpression
     */",
 "/**
     * IdentificationVariableDeclaration ::= RangeVariableDeclaration [IndexBy] {JoinVariableDeclaration}*
     *
     * @return \Doctrine\ORM\Query\AST\IdentificationVariableDeclaration
     */",
 "/**
     * SubselectIdentificationVariableDeclaration ::= IdentificationVariableDeclaration | (AssociationPathExpression [\"AS\"] AliasIdentificationVariable)
     *
     * @return \Doctrine\ORM\Query\AST\SubselectIdentificationVariableDeclaration |
     *         \Doctrine\ORM\Query\AST\IdentificationVariableDeclaration
     */",
 "/**
     * JoinVariableDeclaration ::= Join [IndexBy]
     *
     * @return \Doctrine\ORM\Query\AST\JoinVariableDeclaration
     */",
 "/**
     * RangeVariableDeclaration ::= AbstractSchemaName [\"AS\"] AliasIdentificationVariable
     *
     * @return \Doctrine\ORM\Query\AST\RangeVariableDeclaration
     */",
 "/**
     * PartialObjectExpression ::= \"PARTIAL\" IdentificationVariable \".\" PartialFieldSet
     * PartialFieldSet ::= \"{\" SimpleStateField {\",\" SimpleStateField}* \"}\"
     *
     * @return array
     */",
 "/**
     * Join ::= [\"LEFT\" [\"OUTER\"] | \"INNER\"] \"JOIN\" JoinAssociationPathExpression
     *          [\"AS\"] AliasIdentificationVariable [\"WITH\" ConditionalExpression]
     *
     * @return \Doctrine\ORM\Query\AST\Join
     */",
 "/**
     * IndexBy ::= \"INDEX\" \"BY\" StateFieldPathExpression
     *
     * @return \Doctrine\ORM\Query\AST\IndexBy
     */",
 "/**
     * ScalarExpression ::= SimpleArithmeticExpression | StringPrimary | DateTimePrimary |
     *                      StateFieldPathExpression | BooleanPrimary | CaseExpression |
     *                      InstanceOfExpression
     *
     * @return mixed One of the possible expressions or subexpressions.
     */",
 "/**
     * CaseExpression ::= GeneralCaseExpression | SimpleCaseExpression | CoalesceExpression | NullifExpression
     * GeneralCaseExpression ::= \"CASE\" WhenClause {WhenClause}* \"ELSE\" ScalarExpression \"END\"
     * WhenClause ::= \"WHEN\" ConditionalExpression \"THEN\" ScalarExpression
     * SimpleCaseExpression ::= \"CASE\" CaseOperand SimpleWhenClause {SimpleWhenClause}* \"ELSE\" ScalarExpression \"END\"
     * CaseOperand ::= StateFieldPathExpression | TypeDiscriminator
     * SimpleWhenClause ::= \"WHEN\" ScalarExpression \"THEN\" ScalarExpression
     * CoalesceExpression ::= \"COALESCE\" \"(\" ScalarExpression {\",\" ScalarExpression}* \")\"
     * NullifExpression ::= \"NULLIF\" \"(\" ScalarExpression \",\" ScalarExpression \")\"
     *
     * @return mixed One of the possible expressions or subexpressions.
     */",
 "/**
     * CoalesceExpression ::= \"COALESCE\" \"(\" ScalarExpression {\",\" ScalarExpression}* \")\"
     *
     * @return \Doctrine\ORM\Query\AST\CoalesceExpression
     */",
 "/**
     * NullIfExpression ::= \"NULLIF\" \"(\" ScalarExpression \",\" ScalarExpression \")\"
     *
     * @return \Doctrine\ORM\Query\AST\NullIfExpression
     */",
 "/**
     * GeneralCaseExpression ::= \"CASE\" WhenClause {WhenClause}* \"ELSE\" ScalarExpression \"END\"
     *
     * @return \Doctrine\ORM\Query\AST\GeneralExpression
     */",
 "/**
     * SimpleCaseExpression ::= \"CASE\" CaseOperand SimpleWhenClause {SimpleWhenClause}* \"ELSE\" ScalarExpression \"END\"
     * CaseOperand ::= StateFieldPathExpression | TypeDiscriminator
     */",
 "/**
     * WhenClause ::= \"WHEN\" ConditionalExpression \"THEN\" ScalarExpression
     *
     * @return \Doctrine\ORM\Query\AST\WhenExpression
     */",
 "/**
     * SimpleWhenClause ::= \"WHEN\" ScalarExpression \"THEN\" ScalarExpression
     *
     * @return \Doctrine\ORM\Query\AST\SimpleWhenExpression
     */",
 "/**
     * SelectExpression ::= (
     *     IdentificationVariable | ScalarExpression | AggregateExpression | FunctionDeclaration |
     *     PartialObjectExpression | \"(\" Subselect \")\" | CaseExpression
     * ) [[\"AS\"] [\"HIDDEN\"] AliasResultVariable]
     *
     * @return \Doctrine\ORM\Query\AST\SelectExpression
     */",
 "/**
     * SimpleSelectExpression ::=
     *      StateFieldPathExpression | IdentificationVariable |
     *      ((AggregateExpression | \"(\" Subselect \")\" | ScalarExpression) [[\"AS\"] AliasResultVariable])
     *
     * @return \Doctrine\ORM\Query\AST\SimpleSelectExpression
     */",
 "/**
     * ConditionalExpression ::= ConditionalTerm {\"OR\" ConditionalTerm}*
     *
     * @return \Doctrine\ORM\Query\AST\ConditionalExpression
     */",
 "/**
     * ConditionalTerm ::= ConditionalFactor {\"AND\" ConditionalFactor}*
     *
     * @return \Doctrine\ORM\Query\AST\ConditionalTerm
     */",
 "/**
     * ConditionalFactor ::= [\"NOT\"] ConditionalPrimary
     *
     * @return \Doctrine\ORM\Query\AST\ConditionalFactor
     */",
 "/**
     * ConditionalPrimary ::= SimpleConditionalExpression | \"(\" ConditionalExpression \")\"
     *
     * @return \Doctrine\ORM\Query\AST\ConditionalPrimary
     */",
 "/**
     * SimpleConditionalExpression ::=
     *      ComparisonExpression | BetweenExpression | LikeExpression |
     *      InExpression | NullComparisonExpression | ExistsExpression |
     *      EmptyCollectionComparisonExpression | CollectionMemberExpression |
     *      InstanceOfExpression
     */",
 "/**
     * EmptyCollectionComparisonExpression ::= CollectionValuedPathExpression \"IS\" [\"NOT\"] \"EMPTY\"
     *
     * @return \Doctrine\ORM\Query\AST\EmptyCollectionComparisonExpression
     */",
 "/**
     * CollectionMemberExpression ::= EntityExpression [\"NOT\"] \"MEMBER\" [\"OF\"] CollectionValuedPathExpression
     *
     * EntityExpression ::= SingleValuedAssociationPathExpression | SimpleEntityExpression
     * SimpleEntityExpression ::= IdentificationVariable | InputParameter
     *
     * @return \Doctrine\ORM\Query\AST\CollectionMemberExpression
     */",
 "/**
     * Literal ::= string | char | integer | float | boolean
     *
     * @return string
     */",
 "/**
     * InParameter ::= Literal | InputParameter
     *
     * @return string | \Doctrine\ORM\Query\AST\InputParameter
     */",
 "/**
     * InputParameter ::= PositionalParameter | NamedParameter
     *
     * @return \Doctrine\ORM\Query\AST\InputParameter
     */",
 "/**
     * ArithmeticExpression ::= SimpleArithmeticExpression | \"(\" Subselect \")\"
     *
     * @return \Doctrine\ORM\Query\AST\ArithmeticExpression
     */",
 "/**
     * SimpleArithmeticExpression ::= ArithmeticTerm {(\"+\" | \"-\") ArithmeticTerm}*
     *
     * @return \Doctrine\ORM\Query\AST\SimpleArithmeticExpression
     */",
 "/**
     * ArithmeticTerm ::= ArithmeticFactor {(\"*\" | \"/\") ArithmeticFactor}*
     *
     * @return \Doctrine\ORM\Query\AST\ArithmeticTerm
     */",
 "/**
     * ArithmeticFactor ::= [(\"+\" | \"-\")] ArithmeticPrimary
     *
     * @return \Doctrine\ORM\Query\AST\ArithmeticFactor
     */",
 "/**
     * ArithmeticPrimary ::= SingleValuedPathExpression | Literal | \"(\" SimpleArithmeticExpression \")\"
     *          | FunctionsReturningNumerics | AggregateExpression | FunctionsReturningStrings
     *          | FunctionsReturningDatetime | IdentificationVariable | ResultVariable | CaseExpression
     */",
 "/**
     * StringExpression ::= StringPrimary | \"(\" Subselect \")\"
     *
     * @return \Doctrine\ORM\Query\AST\StringPrimary |
     *         \Doctrine]ORM\Query\AST\Subselect
     */",
 "/**
     * StringPrimary ::= StateFieldPathExpression | string | InputParameter | FunctionsReturningStrings | AggregateExpression | CaseExpression
     */",
 "/**
     * EntityExpression ::= SingleValuedAssociationPathExpression | SimpleEntityExpression
     *
     * @return \Doctrine\ORM\Query\AST\SingleValuedAssociationPathExpression |
     *         \Doctrine\ORM\Query\AST\SimpleEntityExpression
     */",
 "/**
     * SimpleEntityExpression ::= IdentificationVariable | InputParameter
     *
     * @return string | \Doctrine\ORM\Query\AST\InputParameter
     */",
 "/**
     * AggregateExpression ::=
     *  (\"AVG\" | \"MAX\" | \"MIN\" | \"SUM\") \"(\" [\"DISTINCT\"] StateFieldPathExpression \")\" |
     *  \"COUNT\" \"(\" [\"DISTINCT\"] (IdentificationVariable | SingleValuedPathExpression) \")\"
     *
     * @return \Doctrine\ORM\Query\AST\AggregateExpression
     */",
 "/**
     * QuantifiedExpression ::= (\"ALL\" | \"ANY\" | \"SOME\") \"(\" Subselect \")\"
     *
     * @return \Doctrine\ORM\Query\AST\QuantifiedExpression
     */",
 "/**
     * BetweenExpression ::= ArithmeticExpression [\"NOT\"] \"BETWEEN\" ArithmeticExpression \"AND\" ArithmeticExpression
     *
     * @return \Doctrine\ORM\Query\AST\BetweenExpression
     */",
 "/**
     * ComparisonExpression ::= ArithmeticExpression ComparisonOperator ( QuantifiedExpression | ArithmeticExpression )
     *
     * @return \Doctrine\ORM\Query\AST\ComparisonExpression
     */",
 "/**
     * InExpression ::= SingleValuedPathExpression [\"NOT\"] \"IN\" \"(\" (InParameter {\",\" InParameter}* | Subselect) \")\"
     *
     * @return \Doctrine\ORM\Query\AST\InExpression
     */",
 "/**
     * InstanceOfExpression ::= IdentificationVariable [\"NOT\"] \"INSTANCE\" [\"OF\"] (InstanceOfParameter | \"(\" InstanceOfParameter {\",\" InstanceOfParameter}* \")\")
     *
     * @return \Doctrine\ORM\Query\AST\InstanceOfExpression
     */",
 "/**
     * InstanceOfParameter ::= AbstractSchemaName | InputParameter
     *
     * @return mixed
     */",
 "/**
     * LikeExpression ::= StringExpression [\"NOT\"] \"LIKE\" (string | input_parameter) [\"ESCAPE\" char]
     *
     * @return \Doctrine\ORM\Query\AST\LikeExpression
     */",
 "/**
     * NullComparisonExpression ::= (SingleValuedPathExpression | InputParameter) \"IS\" [\"NOT\"] \"NULL\"
     *
     * @return \Doctrine\ORM\Query\AST\NullComparisonExpression
     */",
 "/**
     * ExistsExpression ::= [\"NOT\"] \"EXISTS\" \"(\" Subselect \")\"
     *
     * @return \Doctrine\ORM\Query\AST\ExistsExpression
     */",
 "/**
     * ComparisonOperator ::= \"=\" | \"<\" | \"<=\" | \"<>\" | \">\" | \">=\" | \"!=\"
     *
     * @return string
     */",
 "/**
     * FunctionDeclaration ::= FunctionsReturningStrings | FunctionsReturningNumerics | FunctionsReturningDatetime
     */",
 "/**
     * Helper function for FunctionDeclaration grammar rule
     */",
 "/**
     * FunctionsReturningNumerics ::=
     *      \"LENGTH\" \"(\" StringPrimary \")\" |
     *      \"LOCATE\" \"(\" StringPrimary \",\" StringPrimary [\",\" SimpleArithmeticExpression]\")\" |
     *      \"ABS\" \"(\" SimpleArithmeticExpression \")\" |
     *      \"SQRT\" \"(\" SimpleArithmeticExpression \")\" |
     *      \"MOD\" \"(\" SimpleArithmeticExpression \",\" SimpleArithmeticExpression \")\" |
     *      \"SIZE\" \"(\" CollectionValuedPathExpression \")\"
     */",
 "/**
     * FunctionsReturningDateTime ::= \"CURRENT_DATE\" | \"CURRENT_TIME\" | \"CURRENT_TIMESTAMP\"
     */",
 "/**
     * FunctionsReturningStrings ::=
     *   \"CONCAT\" \"(\" StringPrimary \",\" StringPrimary \")\" |
     *   \"SUBSTRING\" \"(\" StringPrimary \",\" SimpleArithmeticExpression \",\" SimpleArithmeticExpression \")\" |
     *   \"TRIM\" \"(\" [[\"LEADING\" | \"TRAILING\" | \"BOTH\"] [char] \"FROM\"] StringPrimary \")\" |
     *   \"LOWER\" \"(\" StringPrimary \")\" |
     *   \"UPPER\" \"(\" StringPrimary \")\"
     */",
 "/**
 * An LL(*) recursive-descent parser for the context-free grammar of the Doctrine Query Language.
 * Parses a DQL query, reports any errors in it, and generates an AST.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Janne Vanhala <jpvanhal@cc.hut.fi>
 */",
 "/**
*YamlDriverthatadditionallylooksformappinginformationinaglobalfile.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@licenseMIT
*/",
 "/**
     * Initializes a new instance of a class derived from AbstractCollectionPersister.
     *
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Deletes the persistent state represented by the given collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL statement for deleting the given collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to delete
     * the given collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Updates the given collection, synchronizing it's state with the database
     * by inserting, updating and deleting individual elements.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL statement used for deleting a row from the collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to delete the given
     * element from the given collection.
     *
     * @param PersistentCollection $coll
     * @param mixed $element
     */",
 "/**
     * Gets the SQL statement used for updating a row in the collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL statement used for inserting a row in the collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to insert the given
     * element of the given collection into the database.
     *
     * @param PersistentCollection $coll
     * @param mixed $element
     */",
 "/**
 * Base class for all collection persisters.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Creates a new <tt>Statement</tt> for the given SQL and <tt>Connection</tt>.
     *
     * @param string $sql The SQL of the statement.
     * @param Doctrine\DBAL\Connection The connection on which the statement should be executed.
     */",
 "/**
     * Binds a parameter value to the statement.
     *
     * The value can optionally be bound with a PDO binding type or a DBAL mapping type.
     * If bound with a DBAL mapping type, the binding type is derived from the mapping
     * type and the value undergoes the conversion routines of the mapping type before
     * being bound.
     *
     * @param $name The name or position of the parameter.
     * @param $value The value of the parameter.
     * @param mixed $type Either a PDO binding type or a DBAL mapping type name or instance.
     * @return boolean TRUE on success, FALSE on failure.
     */",
 "/**
     * Binds a parameter to a value by reference.
     *
     * Binding a parameter by reference does not support DBAL mapping types.
     *
     * @param string $name The name or position of the parameter.
     * @param mixed $value The reference to the variable to bind
     * @param integer $type The PDO binding type.
     * @return boolean TRUE on success, FALSE on failure.
     */",
 "/**
     * Executes the statement with the currently bound parameters.
     *
     * @return boolean TRUE on success, FALSE on failure.
     */",
 "/**
     * Closes the cursor, freeing the database resources used by this statement.
     *
     * @return boolean TRUE on success, FALSE on failure.
     */",
 "/**
     * Returns the number of columns in the result set.
     *
     * @return integer
     */",
 "/**
     * Fetches the SQLSTATE associated with the last operation on the statement.
     *
     * @return string
     */",
 "/**
     * Fetches extended error information associated with the last operation on the statement.
     *
     * @return array
     */",
 "/**
     * Fetches the next row from a result set.
     *
     * @param integer $fetchStyle
     * @return mixed The return value of this function on success depends on the fetch type.
     *               In all cases, FALSE is returned on failure.
     */",
 "/**
     * Returns an array containing all of the result set rows.
     *
     * @param integer $fetchStyle
     * @param mixed $fetchArgument
     * @return array An array containing all of the remaining rows in the result set.
     */",
 "/**
     * Returns a single column from the next row of a result set.
     *
     * @param integer $columnIndex
     * @return mixed A single column from the next row of a result set or FALSE if there are no more rows.
     */",
 "/**
     * Returns the number of rows affected by the last execution of this statement.
     *
     * @return integer The number of affected rows.
     */",
 "/**
     * Gets the wrapped driver statement.
     *
     * @return Doctrine\DBAL\Driver\Statement
     */",
 "/**
 * A thin wrapper around a Doctrine\DBAL\Driver\Statement that adds support
 * for logging, DBAL mapping types, etc.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @param array $tables
     * @param array $sequences
     * @param array $views
     * @param array $triggers
     * @param SchemaConfig $schemaConfig
     */",
 "/**
     * @return bool
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
     * Get all tables of this schema.
     *
     * @return array
     */",
 "/**
     * @param string $tableName
     * @return Table
     */",
 "/**
     * @return string
     */",
 "/**
     * Does this schema have a table with the given name?
     *
     * @param  string $tableName
     * @return Schema
     */",
 "/**
     * Get all table names, prefixed with a schema name, even the default one
     * if present.
     *
     * @return array
     */",
 "/**
     * @throws SchemaException
     * @param  string $sequenceName
     * @return Doctrine\DBAL\Schema\Sequence
     */",
 "/**
     * @return Doctrine\DBAL\Schema\Sequence[]
     */",
 "/**
     * Create a new table
     *
     * @param  string $tableName
     * @return Table
     */",
 "/**
     * Rename a table
     *
     * @param string $oldTableName
     * @param string $newTableName
     * @return Schema
     */",
 "/**
     * Drop a table from the schema.
     *
     * @param string $tableName
     * @return Schema
     */",
 "/**
     * Create a new sequence
     *
     * @param  string $sequenceName
     * @param  int $allocationSize
     * @param  int $initialValue
     * @return Sequence
     */",
 "/**
     * @param string $sequenceName
     * @return Schema
     */",
 "/**
     * Return an array of necessary sql queries to create the schema on the given platform.
     *
     * @param AbstractPlatform $platform
     * @return array
     */",
 "/**
     * Return an array of necessary sql queries to drop the schema on the given platform.
     *
     * @param AbstractPlatform $platform
     * @return array
     */",
 "/**
     * @param Schema $toSchema
     * @param AbstractPlatform $platform
     */",
 "/**
     * @param Schema $fromSchema
     * @param AbstractPlatform $platform
     */",
 "/**
     * @param Visitor $visitor
     */",
 "/**
     * Cloning a Schema triggers a deep clone of all related assets.
     *
     * @return void
     */",
 "/**
 * Object representation of a database schema
 *
 * Different vendors have very inconsistent naming with regard to the concept
 * of a \"schema\". Doctrine understands a schema as the entity that conceptually
 * wraps a set of database objects such as tables, sequences, indexes and
 * foreign keys that belong to each other into a namespace. A Doctrine Schema
 * has nothing to do with the \"SCHEMA\" defined as in PostgreSQL, it is more
 * related to the concept of \"DATABASE\" that exists in MySQL and PostgreSQL.
 *
 * Every asset in the doctrine schema has a name. A name consists of either a
 * namespace.local name pair or just a local unqualified name.
 *
 * The abstraction layer that covers a PostgreSQL schema is the namespace of an
 * database object (asset). A schema can have a name, which will be used as
 * default namespace for the unqualified database objects that are created in
 * the schema.
 *
 * In the case of MySQL where cross-database queries are allowed this leads to
 * databases being \"misinterpreted\" as namespaces. This is intentional, however
 * the CREATE/DROP SQL visitors will just filter this queries and do not
 * execute them. Only the queries for the currently connected database are
 * executed.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @param EntityManager
     */",
 "/**
     * Adds a root entity and all of its fields to the result set.
     *
     * @param string $class The class name of the root entity.
     * @param string $alias The unique alias to use for the root entity.
     * @param array $renamedColumns Columns that have been renamed (tableColumnName => queryColumnName)
     */",
 "/**
     * Adds a joined entity and all of its fields to the result set.
     *
     * @param string $class The class name of the joined entity.
     * @param string $alias The unique alias to use for the joined entity.
     * @param string $parentAlias The alias of the entity result that is the parent of this joined result.
     * @param object $relation The association field that connects the parent entity result with the joined entity result.
     * @param array $renamedColumns Columns that have been renamed (tableColumnName => queryColumnName)
     */",
 "/**
     * Adds all fields of the given class to the result set mapping (columns and meta fields)
     */",
 "/**
 * A ResultSetMappingBuilder uses the EntityManager to automatically populate entity fields
 *
 * @author Michael Ridgway <mcridgway@gmail.com>
 * @since 2.1
 */",
 "/**
 * ORM Proxy Exception
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Injects responsible ObjectManager and the ClassMetadata into this persistent object.
     *
     * @param ObjectManager $objectManager
     * @param ClassMetadata $classMetadata
     */",
 "/**
 * Makes a Persistent Objects aware of its own object-manager.
 *
 * Using this interface the managing object manager and class metadata instances
 * are injected into the persistent object after construction. This allows
 * you to implement ActiveRecord functionality on top of the persistance-ignorance
 * that Doctrine propagates.
 *
 * Word of Warning: This is a very powerful hook to change how you can work with your domain models.
 * Using this hook will break the Single Responsibility Principle inside your Domain Objects
 * and increase the coupling of database and objects.
 *
 * Every ObjectManager has to implement this functionality itself.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Dumps a PHP value to YAML.
     *
     * @param  mixed   $input  The PHP value
     * @param  integer $inline The level where you switch to inline YAML
     * @param  integer $indent The level of indentation (used internally)
     *
     * @return string  The YAML representation of the PHP value
     */",
 "/**
 * Dumper dumps PHP variables to YAML strings.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param object $entity
     * @param \Doctrine\ORM\EntityManager $em
     * @param array $changeSet
     */",
 "/**
     * Retrieve entity changeset.
     *
     * @return array
     */",
 "/**
     * Check if field has a changeset.
     *
     * @return boolean
     */",
 "/**
     * Get the old value of the changeset of the changed field.
     *
     * @param  string $field
     * @return mixed
     */",
 "/**
     * Get the new value of the changeset of the changed field.
     *
     * @param  string $field
     * @return mixed
     */",
 "/**
     * Set the new value of this field.
     *
     * @param string $field
     * @param mixed $value
     */",
 "/**
     * Assert the field exists in changeset.
     *
     * @param string $field
     */",
 "/**
 * Class that holds event arguments for a preInsert/preUpdate event.
 *
 * @author Guilherme Blanco <guilehrmeblanco@hotmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since  2.0
 */",
 "/**
     * Creates a new query scanner object.
     *
     * @param string $input a query string
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
 * Scans a DQL query for tokens.
 *
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Janne Vanhala <jpvanhal@cc.hut.fi>
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
 * OrderByItem ::= (ResultVariable | StateFieldPathExpression) [\"ASC\" | \"DESC\"]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * \"DATE_ADD(date1, interval, unit)\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor
     *
     * @param array $data Key-value for properties to be defined in this class
     */",
 "/**
     * Error handler for unknown property accessor in Annotation class.
     *
     * @param string $name Unknown property name
     */",
 "/**
     * Error handler for unknown property mutator in Annotation class.
     *
     * @param string $name Unkown property name
     * @param mixed $value Property value
     */",
 "/**
 * Annotations class
 *
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
 * ConditionalFactor ::= [\"NOT\"] ConditionalPrimary
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns part of a string.
     *
     * Note: Not SQL92, but common functionality.
     *
     * @param string $value the target $value the string or the string column.
     * @param int $from extract from this characeter.
     * @param int $len extract this amount of characters.
     * @return string sql that extracts part of a string.
     * @override
     */",
 "/**
     * Returns the SQL string to return the current system date and time.
     *
     * @return string
     */",
 "/**
     * regexp
     *
     * @return string           the regular expression operator
     * @override
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * Whether the platform supports sequences.
     * Postgres has native support for sequences.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports database schemas.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports identity columns.
     * Postgres supports these through the SERIAL keyword.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform prefers sequences for ID generation.
     *
     * @return boolean
     */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaPgsqlReader.html
     * @param  string $table
     * @return string
     */",
 "/**
     * @param string $table
     * @param string $classAlias
     * @param string $namespaceAlias
     * @return string
     */",
 "/**
     * create a new database
     *
     * @param string $name name of the database that should be created
     * @throws PDOException
     * @return void
     * @override
     */",
 "/**
     * drop an existing database
     *
     * @param string $name name of the database that should be dropped
     * @throws PDOException
     * @access public
     */",
 "/**
     * Return the FOREIGN KEY query section dealing with non-standard options
     * as MATCH, INITIALLY DEFERRED, ON UPDATE, ...
     *
     * @param \Doctrine\DBAL\Schema\ForeignKeyConstraint $foreignKey         foreign key definition
     * @return string
     * @override
     */",
 "/**
     * generates the sql for altering an existing table on postgresql
     *
     * @param string $name          name of the table that is intended to be changed.
     * @param array $changes        associative array that contains the details of each type      *
     * @param boolean $check        indicates whether the function should just check if the DBMS driver
     *                              can perform the requested table alterations if the value is true or
     *                              actually perform them otherwise.
     * @see Doctrine_Export::alterTable()
     * @return array
     * @override
     */",
 "/**
     * Gets the SQL to create a sequence on this platform.
     *
     * @param \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * Drop existing sequence
     * @param  \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * @param  ForeignKeyConstraint|string $foreignKey
     * @param  Table|string $table
     * @return string
     */",
 "/**
     * Gets the SQL used to create a table.
     *
     * @param unknown_type $tableName
     * @param array $columns
     * @param array $options
     * @return unknown
     */",
 "/**
     * Postgres wants boolean values converted to the strings 'true'/'false'.
     *
     * @param array $item
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column on the MySql platform.
     *
     * @params array $field
     * @override
     */",
 "/** @override */",
 "/**
     * Get the platform name for this instance
     *
     * @return string
     */",
 "/**
     * Gets the character casing of a column in an SQL result set.
     *
     * PostgreSQL returns all column names in SQL result sets in lowercase.
     *
     * @param string $column The column name for which to get the correct character casing.
     * @return string The column name in the character casing used in SQL result sets.
     */",
 "/**
     * Get the insert sql for an empty insert statement
     *
     * @param string $tableName
     * @param string $identifierColumnName
     * @return string $sql
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * Gets the SQL Snippet used to declare a BLOB column type.
     */",
 "/**
 * PostgreSqlPlatform.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: PostgreSQLPlatform
 */",
 "/**
     * Sets the memcache instance to use.
     *
     * @param Memcached $memcached
     */",
 "/**
     * Gets the memcached instance used by the cache.
     *
     * @return Memcached
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Memcached cache provider.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
*Addatarget-entityclassnametoresolvetoanewclassname.
*
*@paramstring$originalEntity
*@paramstring$newEntity
*@paramarray$mapping
*@returnvoid
*/",
 "/**
*Processeventandresolvenewtargetentitynames.
*
*@paramLoadClassMetadataEventArgs$args
*@returnvoid
*/",
 "/**
*ResolveTargetEntityListener
*
*Mechanismtooverwriteinterfacesorclassesspecifiedasassociation
*targets.
*
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@since2.2
*/",
 "/**
     * @param array $oracleSessionVars
     */",
 "/**
     * @param ConnectionEventArgs $args
     * @return void
     */",
 "/**
 * Should be used when Oracle Server default enviroment does not match the Doctrine requirements.
 *
 * The following enviroment variables are required for the Doctrine default date format:
 *
 * NLS_TIME_FORMAT=\"HH24:MI:SS\"
 * NLS_DATE_FORMAT=\"YYYY-MM-DD HH24:MI:SS\"
 * NLS_TIMESTAMP_FORMAT=\"YYYY-MM-DD HH24:MI:SS\"
 * NLS_TIMESTAMP_TZ_FORMAT=\"YYYY-MM-DD HH24:MI:SS TZH:TZM\"
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Asks a question to the user.
     *
     * @param OutputInterface $output
     * @param string|array    $question The question to ask
     * @param string          $default  The default answer if none is given by the user
     *
     * @return string The user answer
     */",
 "/**
     * Asks a confirmation to the user.
     *
     * The question will be asked until the user answer by nothing, yes, or no.
     *
     * @param OutputInterface $output
     * @param string|array    $question The question to ask
     * @param Boolean         $default  The default answer if the user enters nothing
     *
     * @return Boolean true if the user has confirmed, false otherwise
     */",
 "/**
     * Asks for a value and validates the response.
     *
     * The validator receives the data to validate. It must return the
     * validated data when the data is valid and throw an exception
     * otherwise.
     *
     * @param OutputInterface $output
     * @param string|array    $question
     * @param callback        $validator A PHP callback
     * @param integer         $attempts Max number of times to ask before giving up (false by default, which means infinite)
     * @param string          $default  The default answer if none is given by the user
     *
     * @return mixed
     *
     * @throws \Exception When any of the validator returns an error
     */",
 "/**
     * Returns the helper's canonical name
     */",
 "/**
 * The Dialog class provides helpers to interact with the user.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * GeneralCaseExpression ::= \"CASE\" WhenClause {WhenClause}* \"ELSE\" ScalarExpression \"END\"
 *
 * @since   2.2
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Converts a value from its PHP representation to its database representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The database representation of the value.
     */",
 "/**
     * Converts a value from its database representation to its PHP representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The PHP representation of the value.
     */",
 "/**
     * Gets the default length of this type.
     *
     * @todo Needed?
     */",
 "/**
     * Gets the SQL declaration snippet for a field of this type.
     *
     * @param array $fieldDeclaration The field declaration.
     * @param AbstractPlatform $platform The currently used database platform.
     */",
 "/**
     * Gets the name of this type.
     *
     * @return string
     * @todo Needed?
     */",
 "/**
     * Factory method to create type instances.
     * Type instances are implemented as flyweights.
     *
     * @static
     * @throws DBALException
     * @param string $name The name of the type (as returned by getName()).
     * @return Doctrine\DBAL\Types\Type
     */",
 "/**
     * Adds a custom type to the type map.
     *
     * @static
     * @param string $name Name of the type. This should correspond to what getName() returns.
     * @param string $className The class name of the custom type.
     * @throws DBALException
     */",
 "/**
     * Checks if exists support for a type.
     *
     * @static
     * @param string $name Name of the type
     * @return boolean TRUE if type is supported; FALSE otherwise
     */",
 "/**
     * Overrides an already defined type to use a different implementation.
     *
     * @static
     * @param string $name
     * @param string $className
     * @throws DBALException
     */",
 "/**
     * Gets the (preferred) binding type for values of this type that
     * can be used when binding parameters to prepared statements.
     *
     * This method should return one of the PDO::PARAM_* constants, that is, one of:
     *
     * PDO::PARAM_BOOL
     * PDO::PARAM_NULL
     * PDO::PARAM_INT
     * PDO::PARAM_STR
     * PDO::PARAM_LOB
     *
     * @return integer
     */",
 "/**
     * Get the types array map which holds all registered types and the corresponding
     * type class
     *
     * @return array $typesMap
     */",
 "/**
*DoesworkingwiththiscolumnrequireSQLconversionfunctions?
*
*ThisisametadatafunctionthatisrequiredforexampleintheORM.
*Usageof{@linkconvertToDatabaseValueSQL}and
*{@linkconvertToPHPValueSQL}worksforanytypeandmostly
*doesnothing.Thismethodcanadditionallybeusedforoptimizationpurposes.
*
*@returnbool
*/",
 "/**
*ModifiestheSQLexpression(identifier,parameter)toconverttoadatabasevalue.
*
*@paramstring$sqlExpr
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*ModifiestheSQLexpression(identifier,parameter)toconverttoaPHPvalue.
*
*@paramstring$sqlExpr
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*Thebaseclassforso-calledDoctrinemappingtypes.
*
*ATypeobjectisobtainedbycallingthestatic{@linkgetType()}method.
*
*@authorRomanBorschel<roman@code-factory.org>
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@since2.0
*/",
 "/**
     * @param \Doctrine\DBAL\Schema\Column $column
     * @param \Doctrine\DBAL\Schema\TableDiff $tableDiff
     * @param \Doctrine\DBAL\Platforms\AbstractPlatform $platform
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\Column
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\TableDiff
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @param string|array $sql
     * @return \Doctrine\DBAL\Event\SchemaAlterTableAddColumnEventArgs
     */",
 "/**
     * @return array
     */",
 "/**
 * Event Arguments used when SQL queries for adding table columns are generated inside Doctrine\DBAL\Platform\*Platform.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
 * @Annotation
 * @Target(\"ANNOTATION\")
 */",
 "/**
     * @param string $oldColumnName
     * @param \Doctrine\DBAL\Schema\Column $column
     * @param \Doctrine\DBAL\Schema\TableDiff $tableDiff
     * @param \Doctrine\DBAL\Platforms\AbstractPlatform $platform
     */",
 "/**
     * @return string
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\Column
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\TableDiff
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @param string|array $sql
     * @return \Doctrine\DBAL\Event\SchemaAlterTableRenameColumnEventArgs
     */",
 "/**
     * @return array
     */",
 "/**
 * Event Arguments used when SQL queries for renaming table columns are generated inside Doctrine\DBAL\Platform\*Platform.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
     * Notifies the listener of a property change.
     *
     * @param object $sender The object on which the property changed.
     * @param string $propertyName The name of the property that changed.
     * @param mixed $oldValue The old value of the property that changed.
     * @param mixed $newValue The new value of the property that changed.
     */",
 "/**
 * Contract for classes that are potential listeners of a <tt>NotifyPropertyChanged</tt>
 * implementor.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Annotation that can be used to signal to the parser
 * to check the attribute type during the parsing process.
 *
 * @author Fabio B. Silva <fabio.bat.silva@gmail.com>
 *
 * @Annotation
 */",
 "/**
     * Clears the current graph.
     *
     * @return void
     */",
 "/**
     * Gets a valid commit order for all current nodes.
     *
     * Uses a depth-first search (DFS) to traverse the graph.
     * The desired topological sorting is the reverse postorder of these searches.
     *
     * @return array The list of ordered classes.
     */",
 "/**
 * The CommitOrderCalculator is used by the UnitOfWork to sort out the
 * correct order in which changes to entities need to be persisted.
 *
 * @since 	2.0
 * @author 	Roman Borschel <roman@code-factory.org>
 * @author	Guilherme Blanco <guilhermeblanco@hotmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $name The name of the command
     *
     * @throws \LogicException When the command name is empty
     *
     * @api
     */",
 "/**
     * Sets the application instance for this command.
     *
     * @param Application $application An Application instance
     *
     * @api
     */",
 "/**
     * Gets the application instance for this command.
     *
     * @return Application An Application instance
     *
     * @api
     */",
 "/**
     * Configures the current command.
     */",
 "/**
     * Executes the current command.
     *
     * This method is not abstract because you can use this class
     * as a concrete class. In this case, instead of defining the
     * execute() method, you set the code to execute by passing
     * a Closure to the setCode() method.
     *
     * @param InputInterface  $input  An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     *
     * @return integer 0 if everything went fine, or an error code
     *
     * @throws \LogicException When this abstract method is not implemented
     * @see    setCode()
     */",
 "/**
     * Interacts with the user.
     *
     * @param InputInterface  $input  An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     */",
 "/**
     * Initializes the command just after the input has been validated.
     *
     * This is mainly useful when a lot of commands extends one main command
     * where some things need to be initialized based on the input arguments and options.
     *
     * @param InputInterface  $input  An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     */",
 "/**
     * Runs the command.
     *
     * The code to execute is either defined directly with the
     * setCode() method or by overriding the execute() method
     * in a sub-class.
     *
     * @param InputInterface  $input  An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     *
     * @see setCode()
     * @see execute()
     *
     * @api
     */",
 "/**
     * Sets the code to execute when running this command.
     *
     * If this method is used, it overrides the code defined
     * in the execute() method.
     *
     * @param \Closure $code A \Closure
     *
     * @return Command The current instance
     *
     * @see execute()
     *
     * @api
     */",
 "/**
     * Merges the application definition with the command definition.
     */",
 "/**
     * Sets an array of argument and option instances.
     *
     * @param array|Definition $definition An array of argument and option instances or a definition instance
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Gets the InputDefinition attached to this Command.
     *
     * @return InputDefinition An InputDefinition instance
     *
     * @api
     */",
 "/**
     * Adds an argument.
     *
     * @param string  $name        The argument name
     * @param integer $mode        The argument mode: InputArgument::REQUIRED or InputArgument::OPTIONAL
     * @param string  $description A description text
     * @param mixed   $default     The default value (for InputArgument::OPTIONAL mode only)
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Adds an option.
     *
     * @param string  $name        The option name
     * @param string  $shortcut    The shortcut (can be null)
     * @param integer $mode        The option mode: One of the InputOption::VALUE_* constants
     * @param string  $description A description text
     * @param mixed   $default     The default value (must be null for InputOption::VALUE_REQUIRED or self::VALUE_NONE)
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Sets the name of the command.
     *
     * This method can set both the namespace and the name if
     * you separate them by a colon (:)
     *
     *     $command->setName('foo:bar');
     *
     * @param string $name The command name
     *
     * @return Command The current instance
     *
     * @throws \InvalidArgumentException When command name given is empty
     *
     * @api
     */",
 "/**
     * Returns the command name.
     *
     * @return string The command name
     *
     * @api
     */",
 "/**
     * Sets the description for the command.
     *
     * @param string $description The description for the command
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Returns the description for the command.
     *
     * @return string The description for the command
     *
     * @api
     */",
 "/**
     * Sets the help for the command.
     *
     * @param string $help The help for the command
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Returns the help for the command.
     *
     * @return string The help for the command
     *
     * @api
     */",
 "/**
     * Returns the processed help for the command replacing the %command.name% and
     * %command.full_name% patterns with the real values dynamically.
     *
     * @return string  The processed help for the command
     */",
 "/**
     * Sets the aliases for the command.
     *
     * @param array $aliases An array of aliases for the command
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Returns the aliases for the command.
     *
     * @return array An array of aliases for the command
     *
     * @api
     */",
 "/**
     * Returns the synopsis for the command.
     *
     * @return string The synopsis
     */",
 "/**
     * Gets a helper instance by name.
     *
     * @param string $name The helper name
     *
     * @return mixed The helper value
     *
     * @throws \InvalidArgumentException if the helper is not defined
     *
     * @api
     */",
 "/**
     * Returns a text representation of the command.
     *
     * @return string A string representing the command
     */",
 "/**
     * Returns an XML representation of the command.
     *
     * @param Boolean $asDom Whether to return a DOM or an XML string
     *
     * @return string|DOMDocument An XML string representing the command
     */",
 "/**
 * Base class for all commands.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Initializes a new AnnotationDriver that uses the given AnnotationReader for reading
     * docblock annotations.
     *
     * @param AnnotationReader $reader The AnnotationReader to use, duck-typed.
     * @param string|array $paths One or multiple paths where mapping classes can be found.
     */",
 "/**
     * Append lookup paths to metadata driver.
     *
     * @param array $paths
     */",
 "/**
     * Retrieve the defined metadata lookup paths.
     *
     * @return array
     */",
 "/**
     * Retrieve the current annotation reader
     *
     * @return AnnotationReader
     */",
 "/**
     * Get the file extension used to look for mapping files under
     *
     * @return void
     */",
 "/**
     * Set the file extension used to look for mapping files under
     *
     * @param string $fileExtension The file extension to set
     * @return void
     */",
 "/**
     * Whether the class with the specified name is transient. Only non-transient
     * classes, that is entities and mapped superclasses, should have their metadata loaded.
     *
     * A class is non-transient if it is annotated with an annotation
     * from the {@see AnnotationDriver::entityAnnotationClasses}.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * The AnnotationDriver reads the mapping metadata from docblock annotations.
 *
 * @since 2.2
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Updates the result pointer for an Entity. The result pointers point to the
     * last seen instance of each Entity type. This is used for graph construction.
     *
     * @param array $coll  The element.
     * @param boolean|integer $index  Index of the element in the collection.
     * @param string $dqlAlias
     * @param boolean $oneToOne  Whether it is a single-valued association or not.
     */",
 "/**
     * Retrieve ClassMetadata associated to entity class name.
     *
     * @param string $className
     *
     * @return \Doctrine\ORM\Mapping\ClassMetadata
     */",
 "/**
 * The ArrayHydrator produces a nested array \"graph\" that is often (not always)
 * interchangeable with the corresponding object graph for read-only access.
 *
 * @since  2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Guilherme Blanco <guilhermeblanoc@hotmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * This function finds the ClassMetadata instance in an inheritance hierarchy
     * that is responsible for enabling versioning.
     *
     * @return \Doctrine\ORM\Mapping\ClassMetadata
     */",
 "/**
     * Gets the name of the table that owns the column the given field is mapped to.
     *
     * @param string $fieldName
     * @return string
     * @override
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Get the FROM and optionally JOIN conditions to lock the entity managed by this persister.
     *
     * @return string
     */",
 "/** {@inheritdoc} */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The joined subclass persister maps a single entity instance to several tables in the
 * database as it is defined by the <tt>Class Table Inheritance</tt> strategy.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Alexander <iam.asm89@gmail.com>
 * @since 2.0
 * @see http://martinfowler.com/eaaCatalog/classTableInheritance.html
 */",
 "/**
     * Set name of this asset
     *
     * @param string $name
     */",
 "/**
     * Is this asset in the default namespace?
     *
     * @param string $defaultNamespaceName
     * @return bool
     */",
 "/**
     * Get namespace name of this asset.
     *
     * If NULL is returned this means the default namespace is used.
     *
     * @return string
     */",
 "/**
     * The shortest name is stripped of the default namespace. All other
     * namespaced elements are returned as full-qualified names.
     *
     * @param string
     * @return string
     */",
 "/**
     * The normalized name is full-qualified and lowerspaced. Lowerspacing is
     * actually wrong, but we have to do it to keep our sanity. If you are
     * using database objects that only differentiate in the casing (FOO vs
     * Foo) then you will NOT be able to use Doctrine Schema abstraction.
     *
     * Every non-namespaced element is prefixed with the default namespace
     * name which is passed as argument to this method.
     *
     * @return string
     */",
 "/**
     * Check if this identifier is quoted.
     *
     * @param  string $identifier
     * @return bool
     */",
 "/**
     * Trim quotes from the identifier.
     *
     * @param  string $identifier
     * @return string
     */",
 "/**
     * Return name of this schema asset.
     *
     * @return string
     */",
 "/**
     * Get the quoted representation of this asset but only if it was defined with one. Otherwise
     * return the plain unquoted value as inserted.
     *
     * @param AbstractPlatform $platform
     * @return string
     */",
 "/**
     * Generate an identifier from a list of column names obeying a certain string length.
     *
     * This is especially important for Oracle, since it does not allow identifiers larger than 30 chars,
     * however building idents automatically for foreign keys, composite keys or such can easily create
     * very long names.
     *
     * @param  array $columnNames
     * @param  string $prefix
     * @param  int $maxSize
     * @return string
     */",
 "/**
 * The abstract asset allows to reset the name of all assets without publishing this to the public userland.
 *
 * This encapsulation hack is necessary to keep a consistent state of the database schema. Say we have a list of tables
 * array($tableName => Table($tableName)); if you want to rename the table, you have to make sure
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Creates a new EntityManager that operates on the given database connection
     * and uses the given Configuration and EventManager implementations.
     *
     * @param \Doctrine\DBAL\Connection $conn
     * @param \Doctrine\ORM\Configuration $config
     * @param \Doctrine\Common\EventManager $eventManager
     */",
 "/**
     * Gets the database connection object used by the EntityManager.
     *
     * @return \Doctrine\DBAL\Connection
     */",
 "/**
     * Gets the metadata factory used to gather the metadata of classes.
     *
     * @return \Doctrine\ORM\Mapping\ClassMetadataFactory
     */",
 "/**
     * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
     *
     * Example:
     *
     * <code>
     *     $qb = $em->createQueryBuilder();
     *     $expr = $em->getExpressionBuilder();
     *     $qb->select('u')->from('User', 'u')
     *         ->where($expr->orX($expr->eq('u.id', 1), $expr->eq('u.id', 2)));
     * </code>
     *
     * @return \Doctrine\ORM\Query\Expr
     */",
 "/**
     * Starts a transaction on the underlying database connection.
     *
     * @deprecated Use {@link getConnection}.beginTransaction().
     */",
 "/**
     * Executes a function in a transaction.
     *
     * The function gets passed this EntityManager instance as an (optional) parameter.
     *
     * {@link flush} is invoked prior to transaction commit.
     *
     * If an exception occurs during execution of the function or flushing or transaction commit,
     * the transaction is rolled back, the EntityManager closed and the exception re-thrown.
     *
     * @param Closure $func The function to execute transactionally.
     * @return mixed Returns the non-empty value returned from the closure or true instead
     */",
 "/**
     * Commits a transaction on the underlying database connection.
     *
     * @deprecated Use {@link getConnection}.commit().
     */",
 "/**
     * Performs a rollback on the underlying database connection.
     *
     * @deprecated Use {@link getConnection}.rollback().
     */",
 "/**
     * Returns the ORM metadata descriptor for a class.
     *
     * The class name must be the fully-qualified class name without a leading backslash
     * (as it is returned by get_class($obj)) or an aliased class name.
     *
     * Examples:
     * MyProject\Domain\\User
     * sales:PriceRequest
     *
     * @return \Doctrine\ORM\Mapping\ClassMetadata
     * @internal Performance-sensitive method.
     */",
 "/**
     * Creates a new Query object.
     *
     * @param string  The DQL string.
     * @return \Doctrine\ORM\Query
     */",
 "/**
     * Creates a Query from a named query.
     *
     * @param string $name
     * @return \Doctrine\ORM\Query
     */",
 "/**
     * Creates a native SQL query.
     *
     * @param string $sql
     * @param ResultSetMapping $rsm The ResultSetMapping to use.
     * @return NativeQuery
     */",
 "/**
     * Creates a NativeQuery from a named native query.
     *
     * @param string $name
     * @return \Doctrine\ORM\NativeQuery
     */",
 "/**
     * Create a QueryBuilder instance
     *
     * @return QueryBuilder $qb
     */",
 "/**
     * Flushes all changes to objects that have been queued up to now to the database.
     * This effectively synchronizes the in-memory state of managed objects with the
     * database.
     *
     * If an entity is explicitly passed to this method only this entity and
     * the cascade-persist semantics + scheduled inserts/removals are synchronized.
     *
     * @param object $entity
     * @throws \Doctrine\ORM\OptimisticLockException If a version check on an entity that
     *         makes use of optimistic locking fails.
     */",
 "/**
     * Finds an Entity by its identifier.
     *
     * This is just a convenient shortcut for getRepository($entityName)->find($id).
     *
     * @param string $entityName
     * @param mixed $identifier
     * @param int $lockMode
     * @param int $lockVersion
     * @return object
     */",
 "/**
*Getsareferencetotheentityidentifiedbythegiventypeandidentifier
*withoutactuallyloadingit,iftheentityisnotyetloaded.
*
*@paramstring$entityNameThenameoftheentitytype.
*@parammixed$idTheentityidentifier.
*@returnobjectTheentityreference.
*/",
 "/**
*Getsapartialreferencetotheentityidentifiedbythegiventypeandidentifier
*withoutactuallyloadingit,iftheentityisnotyetloaded.
*
*Thereturnedreferencemaybeapartialobjectiftheentityisnotyetloaded/managed.
*Ifitisapartialobjectitwillnotinitializetherestoftheentitystateonaccess.
*Thusyoucanonlyeversafelyaccesstheidentifierofanentityobtainedthrough
*thismethod.
*
*Theuse-casesforpartialreferencesinvolvemaintainingbidirectionalassociations
*withoutloadingonesideoftheassociationortoupdateanentitywithoutloadingit.
*Note,however,thatinthelattercasetheoriginal(persistent)entitydatawill
*neverbevisibletotheapplication(especiallynoteventlisteners)asitwill
*neverbeloadedinthefirstplace.
*
*@paramstring$entityNameThenameoftheentitytype.
*@parammixed$identifierTheentityidentifier.
*@returnobjectThe(partial)entityreference.
*/",
 "/**
*ClearstheEntityManager.Allentitiesthatarecurrentlymanaged
*bythisEntityManagerbecomedetached.
*
*@paramstring$entityNameifgiven,onlyentitiesofthistypewillgetdetached
*/",
 "/**
*ClosestheEntityManager.Allentitiesthatarecurrentlymanaged
*bythisEntityManagerbecomedetached.TheEntityManagermaynolonger
*beusedafteritisclosed.
*/",
 "/**
*TellstheEntityManagertomakeaninstancemanagedandpersistent.
*
*Theentitywillbeenteredintothedatabaseatorbeforetransaction
*commitorasaresultoftheflushoperation.
*
*NOTE:Thepersistoperationalwaysconsidersentitiesthatarenotyetknownto
*thisEntityManagerasNEW.Donotpassdetachedentitiestothepersistoperation.
*
*@paramobject$objectTheinstancetomakemanagedandpersistent.
*/",
 "/**
*Removesanentityinstance.
*
*Aremovedentitywillberemovedfromthedatabaseatorbeforetransactioncommit
*orasaresultoftheflushoperation.
*
*@paramobject$entityTheentityinstancetoremove.
*/",
 "/**
*Refreshesthepersistentstateofanentityfromthedatabase,
*overridinganylocalchangesthathavenotyetbeenpersisted.
*
*@paramobject$entityTheentitytorefresh.
*/",
 "/**
*DetachesanentityfromtheEntityManager,causingamanagedentityto
*becomedetached.Unflushedchangesmadetotheentityifany
*(includingremovaloftheentity),willnotbesynchronizedtothedatabase.
*Entitieswhichpreviouslyreferencedthedetachedentitywillcontinueto
*referenceit.
*
*@paramobject$entityTheentitytodetach.
*/",
 "/**
*Mergesthestateofadetachedentityintothepersistencecontext
*ofthisEntityManagerandreturnsthemanagedcopyoftheentity.
*Theentitypassedtomergewillnotbecomeassociated/managedwiththisEntityManager.
*
*@paramobject$entityThedetachedentitytomergeintothepersistencecontext.
*@returnobjectThemanagedcopyoftheentity.
*/",
 "/**
*Createsacopyofthegivenentity.Cancreateashalloworadeepcopy.
*
*@paramobject$entityTheentitytocopy.
*@returnobjectThenewentity.
*@todoImplementationneed.Thisisnecessarysince$e2=clone$e1;throwsanE_FATALwhenaccessanythingon$e:
*Fatalerror:Maximumfunctionnestinglevelof'100'reached,aborting!
*/",
 "/**
*Acquirealockonthegivenentity.
*
*@paramobject$entity
*@paramint$lockMode
*@paramint$lockVersion
*@throwsOptimisticLockException
*@throwsPessimisticLockException
*/",
 "/**
*Getstherepositoryforanentityclass.
*
*@paramstring$entityNameThenameoftheentity.
*@returnEntityRepositoryTherepositoryclass.
*/",
 "/**
*DetermineswhetheranentityinstanceismanagedinthisEntityManager.
*
*@paramobject$entity
*@returnbooleanTRUEifthisEntityManagercurrentlymanagesthegivenentity,FALSEotherwise.
*/",
 "/**
*GetstheEventManagerusedbytheEntityManager.
*
*@return\Doctrine\Common\EventManager
*/",
 "/**
*GetstheConfigurationusedbytheEntityManager.
*
*@return\Doctrine\ORM\Configuration
*/",
 "/**
*ThrowsanexceptioniftheEntityManagerisclosedorcurrentlynotactive.
*
*@throwsORMExceptionIftheEntityManagerisclosed.
*/",
 "/**
*CheckiftheEntitymanagerisopenorclosed.
*
*@returnbool
*/",
 "/**
*GetstheUnitOfWorkusedbytheEntityManagertocoordinateoperations.
*
*@return\Doctrine\ORM\\UnitOfWork
*/",
 "/**
*Getsahydratorforthegivenhydrationmode.
*
*Thismethodcachesthehydratorinstanceswhichisusedforallqueriesthatdon't
*selectivelyiterateovertheresult.
*
*@paramint$hydrationMode
*@return\Doctrine\ORM\Internal\Hydration\AbstractHydrator
*/",
 "/**
*Createanewinstanceforthegivenhydrationmode.
*
*@paramint$hydrationMode
*@return\Doctrine\ORM\Internal\Hydration\AbstractHydrator
*/",
 "/**
*GetstheproxyfactoryusedbytheEntityManagertocreateentityproxies.
*
*@returnProxyFactory
*/",
 "/**
*Helpermethodtoinitializealazyloadingproxyorpersistentcollection.
*
*Thismethodisano-opforotherobjects
*
*@paramobject$obj
*/",
 "/**
*FactorymethodtocreateEntityManagerinstances.
*
*@parammixed$connAnarraywiththeconnectionparametersoranexisting
*Connectioninstance.
*@paramConfiguration$configTheConfigurationinstancetouse.
*@paramEventManager$eventManagerTheEventManagerinstancetouse.
*@returnEntityManagerThecreatedEntityManager.
*/",
 "/**
*Getstheenabledfilters.
*
*@returnFilterCollectionTheactivefiltercollection.
*/",
 "/**
*Checkswhetherthestateofthefiltercollectionisclean.
*
*@returnbooleanTrue,ifthefiltercollectionisclean.
*/",
 "/**
*CheckswhethertheEntityManagerhasfilters.
*
*@returnTrue,iftheEMhasafiltercollection.
*/",
 "/**
*TheEntityManageristhecentralaccesspointtoORMfunctionality.
*
*@since2.0
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * @param Schema $schema
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @param Column $column
     */",
 "/**
     * @param Table $localTable
     * @param ForeignKeyConstraint $fkConstraint
     */",
 "/**
     * @param Table $table
     * @param Index $index
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
 * Schema Visitor used for Validation or Generation purposes.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new AnnotationDriver that uses the given AnnotationReader for reading
     * docblock annotations.
     *
     * @param AnnotationReader $reader The AnnotationReader to use.
     */",
 "/**
     * Set tables manually instead of relying on the reverse engeneering capabilities of SchemaManager.
     *
     * @param array $entityTables
     * @param array $manyToManyTables
     * @return void
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Return all the class names supported by this driver.
     *
     * IMPORTANT: This method must return an array of class not tables names.
     *
     * @return array
     */",
 "/**
     * Set class name for a table.
     *
     * @param string $tableName
     * @param string $className
     * @return void
     */",
 "/**
     * Set field name for a column on a specific table.
     *
     * @param string $tableName
     * @param string $columnName
     * @param string $fieldName
     * @return void
     */",
 "/**
     * Return the mapped class name for a table if it exists. Otherwise return \"classified\" version.
     *
     * @param string $tableName
     * @return string
     */",
 "/**
     * Return the mapped field name for a column, if it exists. Otherwise return camelized version.
     *
     * @param string $tableName
     * @param string $columnName
     * @param boolean $fk Whether the column is a foreignkey or not.
     * @return string
     */",
 "/**
     * Set the namespace for the generated entities.
     *
     * @param string $namespace
     * @return void
     */",
 "/**
 * The DatabaseDriver reverse engineers the mapping metadata from a database.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Replaces the whereClause in the AST
     *
     * Generates a clause equivalent to WHERE IN (:dpid_1, :dpid_2, ...)
     *
     * The parameter namespace (dpid) is defined by
     * the PAGINATOR_ID_ALIAS
     *
     * The total number of parameters is retrieved from
     * the HINT_PAGINATOR_ID_COUNT query hint
     *
     * @param  SelectStatement $AST
     * @return void
     */",
 "/**
 * Replaces the whereClause of the AST with a WHERE id IN (:foo_1, :foo_2) equivalent
 *
 * @category    DoctrineExtensions
 * @package     DoctrineExtensions\Paginate
 * @author      David Abdemoulaie <dave@hobodave.com>
 * @copyright   Copyright (c) 2010 David Abdemoulaie (http://hobodave.com/)
 * @license     http://hobodave.com/license.txt New BSD License
 */",
 "/**
 * Type that maps an SQL boolean to a PHP boolean.
 *
 * @since 2.0
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Zend Data Cache cache driver.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Ralph Schindler <ralph.schindler@zend.com>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 */",
 "/**
 * Join ::= [\"LEFT\" [\"OUTER\"] | \"INNER\"] \"JOIN\" JoinAssociationPathExpression
 *          [\"AS\"] AliasIdentificationVariable [(\"ON\" | \"WITH\") ConditionalExpression]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @inheritdoc
     */",
 "/**
     * Adds a tree walker to the chain.
     *
     * @param string $walkerClass The class of the walker to instantiate.
     */",
 "/**
     * Walks down a SelectStatement AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FromClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FunctionNode AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByClause AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByItem AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a HavingClause AST node, thereby generating the appropriate SQL.
     *
     * @param HavingClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a JoinVariableDeclaration AST node and creates the corresponding SQL.
     *
     * @param JoinVariableDeclaration $joinVarDecl
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectExpression AST node and generates the corresponding SQL.
     *
     * @param SelectExpression $selectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a QuantifiedExpression AST node, thereby generating the appropriate SQL.
     *
     * @param QuantifiedExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a Subselect AST node, thereby generating the appropriate SQL.
     *
     * @param Subselect
     * @return string The SQL.
     */",
 "/**
     * Walks down a SubselectFromClause AST node, thereby generating the appropriate SQL.
     *
     * @param SubselectFromClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an AggregateExpression AST node, thereby generating the appropriate SQL.
     *
     * @param AggregateExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByClause AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByItem AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateStatement AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteStatement AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteClause AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateClause AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateItem AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a WhereClause AST node, thereby generating the appropriate SQL.
     *
     * @param WhereClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalTerm AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalTerm
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalFactor AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalFactor
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalPrimary AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalPrimary
     * @return string The SQL.
     */",
 "/**
     * Walks down an ExistsExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ExistsExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CollectionMemberExpression AST node, thereby generating the appropriate SQL.
     *
     * @param CollectionMemberExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an EmptyCollectionComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param EmptyCollectionComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param NullComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InstanceOfExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InstanceOfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a literal that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a BetweenExpression AST node, thereby generating the appropriate SQL.
     *
     * @param BetweenExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a LikeExpression AST node, thereby generating the appropriate SQL.
     *
     * @param LikeExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a StateFieldPathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param StateFieldPathExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InputParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InputParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticTerm AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a StringPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticFactor that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an SimpleArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an PathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ResultVariable AST node, thereby generating the appropriate SQL.
     *
     * @param string $resultVariable
     * @return string The SQL.
     */",
 "/**
     * Gets an executor that can be used to execute the result of this walker.
     *
     * @return AbstractExecutor
     */",
 "/**
 * Represents a chain of tree walkers that modify an AST and finally emit output.
 * Only the last walker in the chain can emit output. Any previous walkers can modify
 * the AST to influence the final output produced by the last walker.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"CURRENT_TIMESTAMP\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Write dot language output to a file. This should usually be a *.dot file.
     *
     * You have to convert the output into a viewable format. For example use \"neato\" on linux systems
     * and execute:
     *
     *  neato -Tpng -o er.png er.dot
     *
     * @param string $filename
     * @return void
     */",
 "/**
 * @author Kim Hems?? Rasmussen <kimhemsoe@gmail.com>
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
     * @param string $tableName
     * @return DBALException
     */",
 "/**
     * @param string $tableName
     * @return DBALException
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"ABS\" \"(\" SimpleArithmeticExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Connection interface.
 * Driver connections must implement this interface.
 *
 * This resembles (a subset of) the PDO interface.
 *
 * @since 2.0
 */",
 "/**
     * Walks down a SelectStatement AST node, modifying it to retrieve DISTINCT ids
     * of the root Entity
     *
     * @param SelectStatement $AST
     * @return void
     */",
 "/**
 * Replaces the selectClause of the AST with a SELECT DISTINCT root.id equivalent
 *
 * @category    DoctrineExtensions
 * @package     DoctrineExtensions\Paginate
 * @author      David Abdemoulaie <dave@hobodave.com>
 * @copyright   Copyright (c) 2010 David Abdemoulaie (http://hobodave.com/)
 * @license     http://hobodave.com/license.txt New BSD License
 */",
 "/**
     * Attempts to connect to the database and returns a driver connection on success.
     *
     * @return Doctrine\DBAL\Driver\Connection
     */",
 "/**
     * Constructs the Postgres PDO DSN.
     *
     * @return string The DSN.
     */",
 "/**
 * Driver that connects through pdo_pgsql.
 *
 * @since 2.0
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Executor that executes the SQL statements for DQL DELETE/UPDATE statements on classes
 * that are mapped to a single table.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Roman Borschel <roman@code-factory.org>
 * @link        www.doctrine-project.org
 * @since       2.0
 * @todo This is exactly the same as SingleSelectExecutor. Unify in SingleStatementExecutor.
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"CONCAT\" \"(\" StringPrimary \",\" StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new <tt>QueryBuilder</tt> that uses the given <tt>EntityManager</tt>.
     *
     * @param EntityManager $em The EntityManager to use.
     */",
 "/**
     * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
     * This producer method is intended for convenient inline usage. Example:
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->where($qb->expr()->eq('u.id', 1));
     * </code>
     *
     * For more complex expression construction, consider storing the expression
     * builder object in a local variable.
     *
     * @return Query\Expr
     */",
 "/**
     * Get the type of the currently built query.
     *
     * @return integer
     */",
 "/**
     * Get the associated EntityManager for this query builder.
     *
     * @return EntityManager
     */",
 "/**
     * Get the state of this query builder instance.
     *
     * @return integer Either QueryBuilder::STATE_DIRTY or QueryBuilder::STATE_CLEAN.
     */",
 "/**
     * Get the complete DQL string formed by the current specifications of this QueryBuilder.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *     echo $qb->getDql(); // SELECT u FROM User u
     * </code>
     *
     * @return string The DQL query string.
     */",
 "/**
     * Constructs a Query instance from the current specifications of the builder.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u');
     *     $q = $qb->getQuery();
     *     $results = $q->execute();
     * </code>
     *
     * @return Query
     */",
 "/**
     * Gets the FIRST root alias of the query. This is the first entity alias involved
     * in the construction of the query.
     *
     * <code>
     * $qb = $em->createQueryBuilder()
     * ->select('u')
     * ->from('User', 'u');
     *
     * echo $qb->getRootAlias(); // u
     * </code>
     *
     * @deprecated Please use $qb->getRootAliases() instead.
     * @return string $rootAlias
     */",
 "/**
     * Gets the root aliases of the query. This is the entity aliases involved
     * in the construction of the query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u');
     *
     *     $qb->getRootAliases(); // array('u')
     * </code>
     *
     * @return array $rootAliases
     */",
 "/**
     * Gets the root entities of the query. This is the entity aliases involved
     * in the construction of the query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u');
     *
     *     $qb->getRootEntities(); // array('User')
     * </code>
     *
     * @return array $rootEntities
     */",
 "/**
     * Sets a query parameter for the query being constructed.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->where('u.id = :user_id')
     *         ->setParameter('user_id', 1);
     * </code>
     *
     * @param string|integer $key The parameter position or name.
     * @param mixed $value The parameter value.
     * @param string|null $type PDO::PARAM_* or \Doctrine\DBAL\Types\Type::* constant
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Sets a collection of query parameters for the query being constructed.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->where('u.id = :user_id1 OR u.id = :user_id2')
     *         ->setParameters(array(
     *             'user_id1' => 1,
     *             'user_id2' => 2
              ));
     * </code>
     *
     * @param array $params The query parameters to set.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets all defined query parameters for the query being constructed.
     *
     * @return array The currently defined query parameters.
     */",
 "/**
     * Gets a (previously set) query parameter of the query being constructed.
     *
     * @param mixed $key The key (index or name) of the bound parameter.
     * @return mixed The value of the bound parameter.
     */",
 "/**
     * Sets the position of the first result to retrieve (the \"offset\").
     *
     * @param integer $firstResult The first result to return.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets the position of the first result the query object was set to retrieve (the \"offset\").
     * Returns NULL if {@link setFirstResult} was not applied to this QueryBuilder.
     *
     * @return integer The position of the first result.
     */",
 "/**
     * Sets the maximum number of results to retrieve (the \"limit\").
     *
     * @param integer $maxResults The maximum number of results to retrieve.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets the maximum number of results the query object was set to retrieve (the \"limit\").
     * Returns NULL if {@link setMaxResults} was not applied to this query builder.
     *
     * @return integer Maximum number of results.
     */",
 "/**
     * Either appends to or replaces a single, generic query part.
     *
     * The available parts are: 'select', 'from', 'join', 'set', 'where',
     * 'groupBy', 'having' and 'orderBy'.
     *
     * @param string $dqlPartName
     * @param string $dqlPart
     * @param string $append
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies an item that is to be returned in the query result.
     * Replaces any previously specified selections, if any.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u', 'p')
     *         ->from('User', 'u')
     *         ->leftJoin('u.Phonenumbers', 'p');
     * </code>
     *
     * @param mixed $select The selection expressions.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Add a DISTINCT flag to this query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->distinct()
     *         ->from('User', 'u');
     * </code>
     *
     * @param bool
     * @return QueryBuilder
     */",
 "/**
     * Adds an item that is to be returned in the query result.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->addSelect('p')
     *         ->from('User', 'u')
     *         ->leftJoin('u.Phonenumbers', 'p');
     * </code>
     *
     * @param mixed $select The selection expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Turns the query being built into a bulk delete query that ranges over
     * a certain entity type.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->delete('User', 'u')
     *         ->where('u.id = :user_id');
     *         ->setParameter('user_id', 1);
     * </code>
     *
     * @param string $delete The class/type whose instances are subject to the deletion.
     * @param string $alias The class/type alias used in the constructed query.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Turns the query being built into a bulk update query that ranges over
     * a certain entity type.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->update('User', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where('u.id = ?');
     * </code>
     *
     * @param string $update The class/type whose instances are subject to the update.
     * @param string $alias The class/type alias used in the constructed query.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Create and add a query root corresponding to the entity identified by the given alias,
     * forming a cartesian product with any existing query roots.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     * </code>
     *
     * @param string $from   The class name.
     * @param string $alias  The alias of the class.
     * @param string $indexBy The index for the from.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a join over an entity association to the query.
     *
     * The entities in the joined association will be fetched as part of the query
     * result if the alias used for the joined association is placed in the select
     * expressions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->join('u.Phonenumbers', 'p', Expr\Join::WITH, 'p.is_primary = 1');
     * </code>
     *
     * @param string $join The relationship to join
     * @param string $alias The alias of the join
     * @param string $conditionType The condition type constant. Either ON or WITH.
     * @param string $condition The condition for the join
     * @param string $indexBy The index for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a join over an entity association to the query.
     *
     * The entities in the joined association will be fetched as part of the query
     * result if the alias used for the joined association is placed in the select
     * expressions.
     *
     *     [php]
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->innerJoin('u.Phonenumbers', 'p', Expr\Join::WITH, 'p.is_primary = 1');
     *
     * @param string $join The relationship to join
     * @param string $alias The alias of the join
     * @param string $conditionType The condition type constant. Either ON or WITH.
     * @param string $condition The condition for the join
     * @param string $indexBy The index for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a left join over an entity association to the query.
     *
     * The entities in the joined association will be fetched as part of the query
     * result if the alias used for the joined association is placed in the select
     * expressions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->leftJoin('u.Phonenumbers', 'p', Expr\Join::WITH, 'p.is_primary = 1');
     * </code>
     *
     * @param string $join The relationship to join
     * @param string $alias The alias of the join
     * @param string $conditionType The condition type constant. Either ON or WITH.
     * @param string $condition The condition for the join
     * @param string $indexBy The index for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Sets a new value for a field in a bulk update query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->update('User', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where('u.id = ?');
     * </code>
     *
     * @param string $key The key/field to set.
     * @param string $value The value, expression, placeholder, etc.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies one or more restrictions to the query result.
     * Replaces any previously specified restrictions, if any.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->where('u.id = ?');
     *
     *     // You can optionally programatically build and/or expressions
     *     $qb = $em->createQueryBuilder();
     *
     *     $or = $qb->expr()->orx();
     *     $or->add($qb->expr()->eq('u.id', 1));
     *     $or->add($qb->expr()->eq('u.id', 2));
     *
     *     $qb->update('User', 'u')
     *         ->set('u.password', md5('password'))
     *         ->where($or);
     * </code>
     *
     * @param mixed $predicates The restriction predicates.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds one or more restrictions to the query results, forming a logical
     * conjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->where('u.username LIKE ?')
     *         ->andWhere('u.is_active = 1');
     * </code>
     *
     * @param mixed $where The query restrictions.
     * @return QueryBuilder This QueryBuilder instance.
     * @see where()
     */",
 "/**
     * Adds one or more restrictions to the query results, forming a logical
     * disjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->where('u.id = 1')
     *         ->orWhere('u.id = 2');
     * </code>
     *
     * @param mixed $where The WHERE statement
     * @return QueryBuilder $qb
     * @see where()
     */",
 "/**
     * Specifies a grouping over the results of the query.
     * Replaces any previously specified groupings, if any.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->groupBy('u.id');
     * </code>
     *
     * @param string $groupBy The grouping expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a grouping expression to the query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select('u')
     *         ->from('User', 'u')
     *         ->groupBy('u.lastLogin');
     *         ->addGroupBy('u.createdAt')
     * </code>
     *
     * @param string $groupBy The grouping expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies a restriction over the groups of the query.
     * Replaces any previous having restrictions, if any.
     *
     * @param mixed $having The restriction over the groups.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a restriction over the groups of the query, forming a logical
     * conjunction with any existing having restrictions.
     *
     * @param mixed $having The restriction to append.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a restriction over the groups of the query, forming a logical
     * disjunction with any existing having restrictions.
     *
     * @param mixed $having The restriction to add.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies an ordering for the query results.
     * Replaces any previously specified orderings, if any.
     *
     * @param string $sort The ordering expression.
     * @param string $order The ordering direction.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds an ordering to the query results.
     *
     * @param string $sort The ordering expression.
     * @param string $order The ordering direction.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Get a query part by its name.
     *
     * @param string $queryPartName
     * @return mixed $queryPart
     * @todo Rename: getQueryPart (or remove?)
     */",
 "/**
     * Get all query parts.
     *
     * @return array $dqlParts
     * @todo Rename: getQueryParts (or remove?)
     */",
 "/**
     * Reset DQL parts
     *
     * @param array $parts
     * @return QueryBuilder
     */",
 "/**
     * Reset single DQL part
     *
     * @param string $part
     * @return QueryBuilder;
     */",
 "/**
     * Gets a string representation of this QueryBuilder which corresponds to
     * the final DQL query being constructed.
     *
     * @return string The string representation of this QueryBuilder.
     */",
 "/**
     * Deep clone of all expression objects in the DQL parts.
     *
     * @return void
     */",
 "/**
 * This class is responsible for building DQL query strings via an object oriented
 * PHP interface.
 *
 * @since 2.0
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * CoalesceExpression ::= \"COALESCE\" \"(\" ScalarExpression {\",\" ScalarExpression}* \")\"
 *
 * @since   2.1
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Type that maps a PHP array to a clob SQL type.
 *
 * @since 2.0
 */",
 "/**
 * AssociationPathExpression ::= CollectionValuedPathExpression | SingleValuedAssociationPathExpression
 * SingleValuedPathExpression ::= StateFieldPathExpression | SingleValuedAssociationPathExpression
 * StateFieldPathExpression ::= SimpleStateFieldPathExpression | SimpleStateFieldAssociationPathExpression
 * SingleValuedAssociationPathExpression ::= IdentificationVariable \".\" SingleValuedAssociationField
 * CollectionValuedPathExpression ::= IdentificationVariable \".\" CollectionValuedAssociationField
 * StateField ::= {EmbeddedClassStateField \".\"}* SimpleStateField
 * SimpleStateFieldPathExpression ::= IdentificationVariable \".\" StateField
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
     * returns the regular expression operator
     *
     * @return string
     * @override
     */",
 "/**
     * Return string to call a variable with the current timestamp inside an SQL statement
     * There are three special variables for current date and time.
     *
     * @return string       sqlite function as string
     * @override
     */",
 "/**
     * Trim a string, leading/trailing/both and with a given char which defaults to space.
     *
     * @param string $str
     * @param int $pos
     * @param string $char
     * @return string
     */",
 "/**
     * return string to call a function to get a substring inside an SQL statement
     *
     * Note: Not SQL92, but common functionality.
     *
     * SQLite only supports the 2 parameter variant of this function
     *
     * @param string $value         an sql string literal or column name/alias
     * @param integer $position     where to start the substring portion
     * @param integer $length       the substring portion length
     * @return string               SQL substring function with given parameters
     * @override
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * create a new table
     *
     * @param string $name   Name of the database that should be created
     * @param array $fields  Associative array that contains the definition of each field of the new table
     *                       The indexes of the array entries are the names of the fields of the table an
     *                       the array entry values are associative arrays like those that are meant to be
     *                       passed with the field definitions to get[Type]Declaration() functions.
     *                          array(
     *                              'id' => array(
     *                                  'type' => 'integer',
     *                                  'unsigned' => 1
     *                                  'notnull' => 1
     *                                  'default' => 0
     *                              ),
     *                              'name' => array(
     *                                  'type' => 'text',
     *                                  'length' => 12
     *                              ),
     *                              'password' => array(
     *                                  'type' => 'text',
     *                                  'length' => 12
     *                              )
     *                          );
     * @param array $options  An associative array of table options:
     *
     * @return void
     * @override
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * SQLite does support foreign key constraints, but only in CREATE TABLE statements...
     * This really limits their usefulness and requires SQLite specific handling, so
     * we simply say that SQLite does NOT support foreign keys for now...
     *
     * @return boolean FALSE
     * @override
     */",
 "/**
     * Get the platform name for this instance
     *
     * @return string
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * User-defined function for Sqlite that is used with PDO::sqliteCreateFunction()
     *
     * @param  int|float $value
     * @return float
     */",
 "/**
     * User-defined function for Sqlite that implements MOD(a, b)
     */",
 "/**
     * @param string $str
     * @param string $substr
     * @param int $offset
     */",
 "/**
     * Gets the SQL Snippet used to declare a BLOB column type.
     */",
 "/**
     * Sqlite Platform emulates schema by underscoring each dot and generating tables
     * into the default database.
     *
     * This hack is implemented to be able to use SQLite as testdriver when
     * using schema supporting databases.
     *
     * @return bool
     */",
 "/**
 * The SqlitePlatform class describes the specifics and dialects of the SQLite
 * database platform.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: SQLitePlatform
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
	 */",
 "/**
     * @override
	 */",
 "/**
     * Adding Datetime2 Type
     */",
 "/**
 * Platform to ensure compatibility of Doctrine with SQLServer2008 version.
 *
 * Differences to SQL Server 2005 and before are that a new DATETIME2 type was
 * introduced that has a higher precision.
 */",
 "/**
     * Constructs the Oracle DSN.
     *
     * @return string The DSN.
     */",
 "/**
 * A Doctrine DBAL driver for the Oracle OCI8 PHP extensions.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param string  $name    The name of the application
     * @param string  $version The version of the application
     *
     * @api
     */",
 "/**
     * Runs the current application.
     *
     * @param InputInterface  $input  An Input instance
     * @param OutputInterface $output An Output instance
     *
     * @return integer 0 if everything went fine, or an error code
     *
     * @throws \Exception When doRun returns Exception
     *
     * @api
     */",
 "/**
     * Runs the current application.
     *
     * @param InputInterface  $input  An Input instance
     * @param OutputInterface $output An Output instance
     *
     * @return integer 0 if everything went fine, or an error code
     */",
 "/**
     * Set a helper set to be used with the command.
     *
     * @param HelperSet $helperSet The helper set
     *
     * @api
     */",
 "/**
     * Get the helper set associated with the command.
     *
     * @return HelperSet The HelperSet instance associated with this command
     *
     * @api
     */",
 "/**
     * Gets the InputDefinition related to this Application.
     *
     * @return InputDefinition The InputDefinition instance
     */",
 "/**
     * Gets the help message.
     *
     * @return string A help message.
     */",
 "/**
     * Sets whether to catch exceptions or not during commands execution.
     *
     * @param Boolean $boolean Whether to catch exceptions or not during commands execution
     *
     * @api
     */",
 "/**
     * Sets whether to automatically exit after a command execution or not.
     *
     * @param Boolean $boolean Whether to automatically exit after a command execution or not
     *
     * @api
     */",
 "/**
     * Gets the name of the application.
     *
     * @return string The application name
     *
     * @api
     */",
 "/**
     * Sets the application name.
     *
     * @param string $name The application name
     *
     * @api
     */",
 "/**
     * Gets the application version.
     *
     * @return string The application version
     *
     * @api
     */",
 "/**
     * Sets the application version.
     *
     * @param string $version The application version
     *
     * @api
     */",
 "/**
     * Returns the long version of the application.
     *
     * @return string The long application version
     *
     * @api
     */",
 "/**
     * Registers a new command.
     *
     * @param string $name The command name
     *
     * @return Command The newly created command
     *
     * @api
     */",
 "/**
     * Adds an array of command objects.
     *
     * @param Command[] $commands An array of commands
     *
     * @api
     */",
 "/**
     * Adds a command object.
     *
     * If a command with the same name already exists, it will be overridden.
     *
     * @param Command $command A Command object
     *
     * @return Command The registered command
     *
     * @api
     */",
 "/**
     * Returns a registered command by name or alias.
     *
     * @param string $name The command name or alias
     *
     * @return Command A Command object
     *
     * @throws \InvalidArgumentException When command name given does not exist
     *
     * @api
     */",
 "/**
     * Returns true if the command exists, false otherwise.
     *
     * @param string $name The command name or alias
     *
     * @return Boolean true if the command exists, false otherwise
     *
     * @api
     */",
 "/**
     * Returns an array of all unique namespaces used by currently registered commands.
     *
     * It does not returns the global namespace which always exists.
     *
     * @return array An array of namespaces
     */",
 "/**
     * Finds a registered namespace by a name or an abbreviation.
     *
     * @param string $namespace A namespace or abbreviation to search for
     *
     * @return string A registered namespace
     *
     * @throws \InvalidArgumentException When namespace is incorrect or ambiguous
     */",
 "/**
     * Finds a command by name or alias.
     *
     * Contrary to get, this command tries to find the best
     * match if you give it an abbreviation of a name or alias.
     *
     * @param  string $name A command name or a command alias
     *
     * @return Command A Command instance
     *
     * @throws \InvalidArgumentException When command name is incorrect or ambiguous
     *
     * @api
     */",
 "/**
     * Gets the commands (registered in the given namespace if provided).
     *
     * The array keys are the full names and the values the command instances.
     *
     * @param  string  $namespace A namespace name
     *
     * @return array An array of Command instances
     *
     * @api
     */",
 "/**
     * Returns an array of possible abbreviations given a set of names.
     *
     * @param array $names An array of names
     *
     * @return array An array of abbreviations
     */",
 "/**
     * Returns a text representation of the Application.
     *
     * @param string $namespace An optional namespace name
     *
     * @return string A string representing the Application
     */",
 "/**
     * Returns an XML representation of the Application.
     *
     * @param string  $namespace An optional namespace name
     * @param Boolean $asDom     Whether to return a DOM or an XML string
     *
     * @return string|DOMDocument An XML string representing the Application
     */",
 "/**
     * Renders a catched exception.
     *
     * @param Exception       $e      An exception instance
     * @param OutputInterface $output An OutputInterface instance
     */",
 "/**
     * Gets the name of the command based on input.
     *
     * @param InputInterface $input The input interface
     *
     * @return string The command name
     */",
 "/**
     * Sorts commands in alphabetical order.
     *
     * @param array $commands An associative array of commands to sort
     *
     * @return array A sorted array of commands
     */",
 "/**
     * Returns abbreviated suggestions in string format.
     *
     * @param array $abbrevs Abbreviated suggestions to convert
     *
     * @return string A formatted string of abbreviated suggestions
     */",
 "/**
 * An Application is the container for a collection of commands.
 *
 * It is the main entry point of a Console application.
 *
 * This class is optimized for a standard CLI environment.
 *
 * Usage:
 *
 *     $app = new Application('myapp', '1.0 (stable)');
 *     $app->add(new SimpleCommand());
 *     $app->run();
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * ArithmeticFactor ::= [(\"+\" | \"-\")] ArithmeticPrimary
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     *
     * @param array $localColumnNames
     * @param string $foreignTableName
     * @param array $foreignColumnNames
     * @param string $cascade
     * @param string|null $name
     */",
 "/**
     * @return string
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @return array
     */",
 "/**
     * @return string
     */",
 "/**
     * @return array
     */",
 "/**
     * Foreign Key onUpdate status
     *
     * @return string|null
     */",
 "/**
     * Foreign Key onDelete status
     *
     * @return string|null
     */",
 "/**
     * @param  string $event
     * @return string|null
     */",
 "/**
     * @param \Doctrine\ORM\Mapping\ClassMetadataInfo $cm
     */",
 "/**
     * @return ClassMetadata
     */",
 "/**
     * Mark the class as mapped superclass.
     *
     * @return ClassMetadataBuilder
     */",
 "/**
     * Set custom Repository class name
     *
     * @param string $repositoryClassName
     * @return ClassMetadataBuilder
     */",
 "/**
     * Mark class read only
     *
     * @return ClassMetadataBuilder
     */",
 "/**
     * Set the table name
     *
     * @param string $name
     * @return ClassMetadataBuilder
     */",
 "/**
     * Add Index
     *
     * @param array $columns
     * @param string $name
     * @return ClassMetadataBuilder
     */",
 "/**
     * Add Unique Constraint
     *
     * @param array $columns
     * @param string $name
     * @return ClassMetadataBuilder
     */",
 "/**
     * Add named query
     *
     * @param string $name
     * @param string $dqlQuery
     * @return ClassMetadataBuilder
     */",
 "/**
     * Set class as root of a joined table inheritance hierachy.
     *
     * @return ClassMetadataBuilder
     */",
 "/**
     * Set class as root of a single table inheritance hierachy.
     *
     * @return ClassMetadataBuilder
     */",
 "/**
     * Set the discriminator column details.
     *
     * @param string $name
     * @param string $type
     */",
 "/**
     * Add a subclass to this inheritance hierachy.
     *
     * @param string $name
     * @param string $class
     * @return ClassMetadataBuilder
     */",
 "/**
     * Set deferred explicit change tracking policy.
     *
     * @return ClassMetadataBuilder
     */",
 "/**
     * Set notify change tracking policy.
     *
     * @return ClassMetadataBuilder
     */",
 "/**
     * Add lifecycle event
     *
     * @param string $methodName
     * @param string $event
     * @return ClassMetadataBuilder
     */",
 "/**
     * Add Field
     *
     * @param string $name
     * @param string $type
     * @param array $mapping
     */",
 "/**
     * Create a field builder.
     *
     * @param string $name
     * @param string $type
     * @return FieldBuilder
     */",
 "/**
     * Add a simple many to one association, optionally with the inversed by field.
     *
     * @param string $name
     * @param string $targetEntity
     * @param string|null $inversedBy
     * @return ClassMetadataBuilder
     */",
 "/**
     * Create a ManyToOne Assocation Builder.
     *
     * Note: This method does not add the association, you have to call build() on the AssociationBuilder.
     *
     * @param string $name
     * @param string $targetEntity
     * @return AssociationBuilder
     */",
 "/**
     * Create OneToOne Assocation Builder
     *
     * @param string $name
     * @param string $targetEntity
     * @return AssociationBuilder
     */",
 "/**
     * Add simple inverse one-to-one assocation.
     *
     * @param string $name
     * @param string $targetEntity
     * @param string $mappedBy
     * @return ClassMetadataBuilder
     */",
 "/**
     * Add simple owning one-to-one assocation.
     *
     * @param string $name
     * @param string $targetEntity
     * @param string $inversedBy
     * @return ClassMetadataBuilder
     */",
 "/**
     * Create ManyToMany Assocation Builder
     *
     * @param string $name
     * @param string $targetEntity
     * @return ManyToManyAssociationBuilder
     */",
 "/**
     * Add a simple owning many to many assocation.
     *
     * @param string $name
     * @param string $targetEntity
     * @param string|null $inversedBy
     * @return ClassMetadataBuilder
     */",
 "/**
     * Add a simple inverse many to many assocation.
     *
     * @param string $name
     * @param string $targetEntity
     * @param string $mappedBy
     * @return ClassMetadataBuilder
     */",
 "/**
     * Create a one to many assocation builder
     *
     * @param string $name
     * @param string $targetEntity
     * @return OneToManyAssociationBuilder
     */",
 "/**
     * Add simple OneToMany assocation.
     *
     * @param string $name
     * @param string $targetEntity
     * @param string $mappedBy
     * @return ClassMetadataBuilder
     */",
 "/**
 * Builder Object for ClassMetadata
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 */",
 "/**
 * ExistsExpression ::= [\"NOT\"] \"EXISTS\" \"(\" Subselect \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Retrieve associated EntityManager.
     *
     * @return \Doctrine\ORM\EntityManager
     */",
 "/**
 * Provides event arguments for the preFlush event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.0
 * @author      Roman Borschel <roman@code-factory.de>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @param string $indexName
     * @param array $column
     * @param bool $isUnique
     * @param bool $isPrimary
     */",
 "/**
     * @param string $column
     */",
 "/**
     * @return array
     */",
 "/**
     * Is the index neither unique nor primary key?
     *
     * @return bool
     */",
 "/**
     * @return bool
     */",
 "/**
     * @return bool
     */",
 "/**
     * @param  string $columnName
     * @param  int $pos
     * @return bool
     */",
 "/**
     * Check if this index exactly spans the given column names in the correct order.
     *
     * @param array $columnNames
     * @return boolean
     */",
 "/**
     * Check if the other index already fullfills all the indexing and constraint needs of the current one.
     *
     * @param Index $other
     * @return bool
     */",
 "/**
     * Detect if the other index is a non-unique, non primary index that can be overwritten by this one.
     *
     * @param Index $other
     * @return bool
     */",
 "/**
 * Description of BetweenExpression
 *
  @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * LikeExpression ::= StringExpression [\"NOT\"] \"LIKE\" string [\"ESCAPE\" char]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
 * ConditionalExpression ::= ConditionalTerm {\"OR\" ConditionalTerm}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Loads the metadata for the specified class into the provided container.
     *
     * @param string $className
     * @param ClassMetadata $metadata
     */",
 "/**
     * Gets the names of all mapped classes known to this driver.
     *
     * @return array The names of all mapped classes known to this driver.
     */",
 "/**
     * Whether the class with the specified name should have its metadata loaded.
     * This is only the case if it is either mapped as an Entity or a
     * MappedSuperclass.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
 * Contract for metadata drivers.
 *
 * @since 2.2
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/** @override */",
 "/**
     * Converts a value from its database representation to its PHP representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The PHP representation of the value.
     */",
 "/**
 * Type that maps an SQL CLOB to a PHP string.
 *
 * @since 2.0
 */",
 "/**
 * SelectClause = \"SELECT\" [\"DISTINCT\"] SelectExpression {\",\" SelectExpression}
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to execute DQL queries in a given EntityManager.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Abstract base Expr class for building DQL parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Persister for collections of basic elements / value types.
 *
 * @author robo
 * @todo Implementation once support for collections of basic elements (i.e. strings) is added.
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
     * Return a list of all tables in the current database
     *
     * Apparently creator is the schema not the user who created it:
     * {@link http://publib.boulder.ibm.com/infocenter/dzichelp/v2r2/index.jsp?topic=/com.ibm.db29.doc.sqlref/db2z_sysibmsystablestable.htm}
     *
     * @return array
     */",
 "/**
     * Get Table Column Definition
     *
     * @param array $tableColumn
     * @return Column
     */",
 "/**
 * IBM Db2 Schema Manager
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructs the Oracle PDO DSN.
     *
     * @return string  The DSN.
     */",
 "/**
 * PDO Oracle driver
 *
 * WARNING: This driver gives us segfauls in our testsuites on CLOB and other
 * stuff. PDO Oracle is not maintained by Oracle or anyone in the PHP community,
 * which leads us to the recommendation to use the \"oci8\" driver to connect
 * to Oracle instead.
 */",
 "/**
 * MySQL Keywordlist
 *
 * @license  BSD http://www.opensource.org/licenses/bsd-license.php
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      David Coallier <davidc@php.net>
 */",
 "/**
     * Thrown when a Database to Doctrine Type Conversion fails.
     *
     * @param  string $value
     * @param  string $toType
     * @return ConversionException
     */",
 "/**
     * Thrown when a Database to Doctrine Type Conversion fails and we can make a statement
     * about the expected format.
     *
     * @param  string $value
     * @param  string $toType
     * @return ConversionException
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to drop the database schema for a set of classes based on their mappings.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Generates the SQL UPDATE that updates a particular row's foreign
     * key to null.
     *
     * @param PersistentCollection $coll
     * @return string
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to insert the given
     * element of the given collection into the database.
     *
     * @param PersistentCollection $coll
     * @param mixed $element
     */",
 "/**
     * Generates the SQL UPDATE that updates all the foreign keys to null.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to delete
     * the given collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @param PersistentCollection $coll
     * @param int $offset
     * @param int $length
     * @return \Doctrine\Common\Collections\ArrayCollection
     */",
 "/**
     * @param PersistentCollection $coll
     * @param object $element
     * @return boolean
     */",
 "/**
     * @param PersistentCollection $coll
     * @param object $element
     * @return boolean
     */",
 "/**
 * Persister for one-to-many collections.
 *
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Alexander <iam.asm89@gmail.com>
 * @since   2.0
 */",
 "/**
     * Creates a new persistent collection.
     *
     * @param EntityManager $em The EntityManager the collection will be associated with.
     * @param ClassMetadata $class The class descriptor of the entity type of this collection.
     * @param array The collection elements.
     */",
 "/**
     * INTERNAL:
     * Sets the collection's owning entity together with the AssociationMapping that
     * describes the association between the owner and the elements of the collection.
     *
     * @param object $entity
     * @param AssociationMapping $assoc
     */",
 "/**
     * INTERNAL:
     * Gets the collection owner.
     *
     * @return object
     */",
 "/**
     * INTERNAL:
     * Adds an element to a collection during hydration. This will automatically
     * complete bidirectional associations in the case of a one-to-many association.
     *
     * @param mixed $element The element to add.
     */",
 "/**
     * INTERNAL:
     * Sets a keyed element in the collection during hydration.
     *
     * @param mixed $key The key to set.
     * $param mixed $value The element to set.
     */",
 "/**
     * Initializes the collection by loading its contents from the database
     * if the collection is not yet initialized.
     */",
 "/**
     * INTERNAL:
     * Tells this collection to take a snapshot of its current state.
     */",
 "/**
     * INTERNAL:
     * Returns the last snapshot of the elements in the collection.
     *
     * @return array The last snapshot of the elements.
     */",
 "/**
     * INTERNAL:
     * getDeleteDiff
     *
     * @return array
     */",
 "/**
     * INTERNAL:
     * getInsertDiff
     *
     * @return array
     */",
 "/**
     * INTERNAL: Gets the association mapping of the collection.
     *
     * @return \Doctrine\ORM\Mapping\AssociationMapping
     */",
 "/**
     * Marks this collection as changed/dirty.
     */",
 "/**
     * Gets a boolean flag indicating whether this collection is dirty which means
     * its state needs to be synchronized with the database.
     *
     * @return boolean TRUE if the collection is dirty, FALSE otherwise.
     */",
 "/**
     * Sets a boolean flag, indicating whether this collection is dirty.
     *
     * @param boolean $dirty Whether the collection should be marked dirty or not.
     */",
 "/**
     * Sets the initialized flag of the collection, forcing it into that state.
     *
     * @param boolean $bool
     */",
 "/**
     * Checks whether this collection has been initialized.
     *
     * @return boolean
     */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Called by PHP when this collection is serialized. Ensures that only the
     * elements are properly serialized.
     *
     * @internal Tried to implement Serializable first but that did not work well
     *           with circular references. This solution seems simpler and works well.
     */",
 "/**
     * @see containsKey()
     */",
 "/**
     * @see get()
     */",
 "/**
     * @see add()
     * @see set()
     */",
 "/**
     * @see remove()
     */",
 "/**
     * Gets the element of the collection at the current iterator position.
     */",
 "/**
     * Moves the internal iterator position to the next element.
     */",
 "/**
     * Retrieves the wrapped Collection instance.
     *
     * @return \Doctrine\Common\Collections\Collection
     */",
 "/**
     * Extract a slice of $length elements starting at position $offset from the Collection.
     *
     * If $length is null it returns all elements from $offset to the end of the Collection.
     * Keys have to be preserved by this method. Calling this method will only return the
     * selected slice and NOT change the elements contained in the collection slice is called on.
     *
     * @param int $offset
     * @param int $length
     *
     * @return array
     */",
 "/**
     * Cleanup internal state of cloned persistent collection.
     *
     * The following problems have to be prevented:
     * 1. Added entities are added to old PC
     * 2. New collection is not dirty, if reused on other entity nothing
     * changes.
     * 3. Snapshot leads to invalid diffs being generated.
     * 4. Lazy loading grabs entities from old owner object.
     * 5. New collection is connected to old owner and leads to duplicate keys.
     */",
 "/**
 * A PersistentCollection represents a collection of elements that have persistent state.
 *
 * Collections of entities represent only the associations (links) to those entities.
 * That means, if the collection is part of a many-many mapping and you remove
 * entities from the collection, only the links in the relation table are removed (on flush).
 * Similarly, if you remove entities from a collection that is part of a one-many
 * mapping this will only result in the nulling out of the foreign keys on flush.
 *
 * @since     2.0
 * @author    Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author    Roman Borschel <roman@code-factory.org>
 * @author    Giorgio Sironi <piccoloprincipeazzurro@gmail.com>
 * @todo Design for inheritance to allow custom implementations?
 */",
 "/**
 * Expression class for DQL comparison expressions
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Initializes a new ArrayCollection.
     *
     * @param array $elements
     */",
 "/**
     * Gets the PHP array representation of this collection.
     *
     * @return array The PHP array representation of this collection.
     */",
 "/**
     * Sets the internal iterator to the first element in the collection and
     * returns this element.
     *
     * @return mixed
     */",
 "/**
     * Sets the internal iterator to the last element in the collection and
     * returns this element.
     *
     * @return mixed
     */",
 "/**
     * Gets the current key/index at the current internal iterator position.
     *
     * @return mixed
     */",
 "/**
     * Moves the internal iterator position to the next element.
     *
     * @return mixed
     */",
 "/**
     * Gets the element of the collection at the current internal iterator position.
     *
     * @return mixed
     */",
 "/**
     * Removes an element with a specific key/index from the collection.
     *
     * @param mixed $key
     * @return mixed The removed element or NULL, if no element exists for the given key.
     */",
 "/**
     * Removes the specified element from the collection, if it is found.
     *
     * @param mixed $element The element to remove.
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */",
 "/**
     * ArrayAccess implementation of offsetExists()
     *
     * @see containsKey()
     */",
 "/**
     * ArrayAccess implementation of offsetGet()
     *
     * @see get()
     */",
 "/**
     * ArrayAccess implementation of offsetGet()
     *
     * @see add()
     * @see set()
     */",
 "/**
     * ArrayAccess implementation of offsetUnset()
     *
     * @see remove()
     */",
 "/**
     * Checks whether the collection contains a specific key/index.
     *
     * @param mixed $key The key to check for.
     * @return boolean TRUE if the given key/index exists, FALSE otherwise.
     */",
 "/**
     * Checks whether the given element is contained in the collection.
     * Only element values are compared, not keys. The comparison of two elements
     * is strict, that means not only the value but also the type must match.
     * For objects this means reference equality.
     *
     * @param mixed $element
     * @return boolean TRUE if the given element is contained in the collection,
     *          FALSE otherwise.
     */",
 "/**
     * Tests for the existance of an element that satisfies the given predicate.
     *
     * @param Closure $p The predicate.
     * @return boolean TRUE if the predicate is TRUE for at least one element, FALSE otherwise.
     */",
 "/**
     * Searches for a given element and, if found, returns the corresponding key/index
     * of that element. The comparison of two elements is strict, that means not
     * only the value but also the type must match.
     * For objects this means reference equality.
     *
     * @param mixed $element The element to search for.
     * @return mixed The key/index of the element or FALSE if the element was not found.
     */",
 "/**
     * Gets the element with the given key/index.
     *
     * @param mixed $key The key.
     * @return mixed The element or NULL, if no element exists for the given key.
     */",
 "/**
     * Gets all keys/indexes of the collection elements.
     *
     * @return array
     */",
 "/**
     * Gets all elements.
     *
     * @return array
     */",
 "/**
     * Returns the number of elements in the collection.
     *
     * Implementation of the Countable interface.
     *
     * @return integer The number of elements in the collection.
     */",
 "/**
     * Adds/sets an element in the collection at the index / with the specified key.
     *
     * When the collection is a Map this is like put(key,value)/add(key,value).
     * When the collection is a List this is like add(position,value).
     *
     * @param mixed $key
     * @param mixed $value
     */",
 "/**
     * Adds an element to the collection.
     *
     * @param mixed $value
     * @return boolean Always TRUE.
     */",
 "/**
     * Checks whether the collection is empty.
     *
     * Note: This is preferrable over count() == 0.
     *
     * @return boolean TRUE if the collection is empty, FALSE otherwise.
     */",
 "/**
     * Gets an iterator for iterating over the elements in the collection.
     *
     * @return ArrayIterator
     */",
 "/**
     * Applies the given function to each element in the collection and returns
     * a new collection with the elements returned by the function.
     *
     * @param Closure $func
     * @return Collection
     */",
 "/**
     * Returns all the elements of this collection that satisfy the predicate p.
     * The order of the elements is preserved.
     *
     * @param Closure $p The predicate used for filtering.
     * @return Collection A collection with the results of the filter operation.
     */",
 "/**
     * Applies the given predicate p to all elements of this collection,
     * returning true, if the predicate yields true for all elements.
     *
     * @param Closure $p The predicate.
     * @return boolean TRUE, if the predicate yields TRUE for all elements, FALSE otherwise.
     */",
 "/**
     * Partitions this collection in two collections according to a predicate.
     * Keys are preserved in the resulting collections.
     *
     * @param Closure $p The predicate on which to partition.
     * @return array An array with two elements. The first element contains the collection
     *               of elements where the predicate returned TRUE, the second element
     *               contains the collection of elements where the predicate returned FALSE.
     */",
 "/**
     * Returns a string representation of this object.
     *
     * @return string
     */",
 "/**
     * Clears the collection.
     */",
 "/**
     * Extract a slice of $length elements starting at position $offset from the Collection.
     *
     * If $length is null it returns all elements from $offset to the end of the Collection.
     * Keys have to be preserved by this method. Calling this method will only return the
     * selected slice and NOT change the elements contained in the collection slice is called on.
     *
     * @param int $offset
     * @param int $length
     * @return array
     */",
 "/**
 * An ArrayCollection is a Collection implementation that wraps a regular PHP array.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Oracle Keywordlist
 *
 * @license  BSD http://www.opensource.org/licenses/bsd-license.php
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      David Coallier <davidc@php.net>
 */",
 "/**
     * Constructor
     *
     * @param object $entity
     * @param ObjectManager $objectManager
     */",
 "/**
     * Retireve associated Entity.
     *
     * @return object
     */",
 "/**
     * Retrieve associated ObjectManager.
     *
     * @return ObjectManager
     */",
 "/**
 * Lifecycle Events are triggered by the UnitOfWork during lifecycle transitions
 * of entities.
 *
 * @link   www.doctrine-project.org
 * @since  2.2
 * @author Roman Borschel <roman@code-factory.de>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Expression class for building DQL Order By parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns the identifier assigned to the given entity.
     *
     * @param object $entity
     * @return mixed
     * @override
     */",
 "/**
 * Special generator for application-assigned identifiers (doesnt really generate anything).
 *
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"ALL\")
 * @todo check available targets
 */",
 "/**
 * Driver interface.
 * Interface that all DBAL drivers must implement.
 *
 * @since 2.1.4
 */",
 "/**
 * @Annotation
 * @Target(\"ANNOTATION\")
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * @param ClassMetadataInfo $metadata
     * @return mixed $exported
     */",
 "/**
     * @param \SimpleXMLElement $simpleXml
     * @return string $xml
     */",
 "/**
 * ClassMetadata exporter for Doctrine XML mapping files
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
 * DeleteClause ::= \"DELETE\" [\"FROM\"] AbstractSchemaName [[\"AS\"] AliasIdentificationVariable]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Type that maps an SQL DATETIME/TIMESTAMP to a PHP DateTime object.
 *
 * @since 2.0
 */",
 "/**
     * Get all the existing schema names.
     *
     * @return array
     */",
 "/**
     * Return an array of schema search paths
     *
     * This is a PostgreSQL only function.
     *
     * @return array
     */",
 "/**
     * Get names of all existing schemas in the current users search path.
     *
     * This is a PostgreSQL only function.
     *
     * @return array
     */",
 "/**
     * Use this to set or reset the order of the existing schemas in the current search path of the user
     *
     * This is a PostgreSQL only function.
     *
     * @return type
     */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaPgsqlReader.html
     * @param  array $tableIndexes
     * @param  string $tableName
     * @return array
     */",
 "/**
 * PostgreSQL Schema Manager
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @since       2.0
 */",
 "/**
     * @param array  $tableColumn
     * @param string $table
     * @param string $database
     * @param \Doctrine\DBAL\Connection $conn
     */",
 "/**
     * Allows to clear the column which means the column will be excluded from
     * tables column list.
     *
     * @param null|\Doctrine\DBAL\Schema\Column $column
     * @return SchemaColumnDefinitionEventArgs
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\Column
     */",
 "/**
     * @return array
     */",
 "/**
     * @return string
     */",
 "/**
     * @return string
     */",
 "/**
     * @return \Doctrine\DBAL\Connection
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
 * Event Arguments used when the portable column definition is generated inside Doctrine\DBAL\Schema\AbstractSchemaManager.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
     * Binds a value to a corresponding named or positional
     * placeholder in the SQL statement that was used to prepare the statement.
     *
     * @param mixed $param          Parameter identifier. For a prepared statement using named placeholders,
     *                              this will be a parameter name of the form :name. For a prepared statement
     *                              using question mark placeholders, this will be the 1-indexed position of the parameter
     *
     * @param mixed $value          The value to bind to the parameter.
     * @param integer $type         Explicit data type for the parameter using the PDO::PARAM_* constants.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * Binds a PHP variable to a corresponding named or question mark placeholder in the
     * SQL statement that was use to prepare the statement. Unlike PDOStatement->bindValue(),
     * the variable is bound as a reference and will only be evaluated at the time
     * that PDOStatement->execute() is called.
     *
     * Most parameters are input parameters, that is, parameters that are
     * used in a read-only fashion to build up the query. Some drivers support the invocation
     * of stored procedures that return data as output parameters, and some also as input/output
     * parameters that both send in data and are updated to receive it.
     *
     * @param mixed $param          Parameter identifier. For a prepared statement using named placeholders,
     *                              this will be a parameter name of the form :name. For a prepared statement
     *                              using question mark placeholders, this will be the 1-indexed position of the parameter
     *
     * @param mixed $variable       Name of the PHP variable to bind to the SQL statement parameter.
     *
     * @param integer $type         Explicit data type for the parameter using the PDO::PARAM_* constants. To return
     *                              an INOUT parameter from a stored procedure, use the bitwise OR operator to set the
     *                              PDO::PARAM_INPUT_OUTPUT bits for the data_type parameter.
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * errorCode
     * Fetch the SQLSTATE associated with the last operation on the statement handle
     *
     * @see Doctrine_Adapter_Interface::errorCode()
     * @return string       error code string
     */",
 "/**
     * errorInfo
     * Fetch extended error information associated with the last operation on the statement handle
     *
     * @see Doctrine_Adapter_Interface::errorInfo()
     * @return array        error info array
     */",
 "/**
     * Executes a prepared statement
     *
     * If the prepared statement included parameter markers, you must either:
     * call PDOStatement->bindParam() to bind PHP variables to the parameter markers:
     * bound variables pass their value as input and receive the output value,
     * if any, of their associated parameter markers or pass an array of input-only
     * parameter values
     *
     *
     * @param array $params             An array of values with as many elements as there are
     *                                  bound parameters in the SQL statement being executed.
     * @return boolean                  Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * rowCount
     * rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement
     * executed by the corresponding object.
     *
     * If the last SQL statement executed by the associated Statement object was a SELECT statement,
     * some databases may return the number of rows returned by that statement. However,
     * this behaviour is not guaranteed for all databases and should not be
     * relied on for portable applications.
     *
     * @return integer                      Returns the number of rows.
     */",
 "/**
 * Statement interface.
 * Drivers must implement this interface.
 *
 * This resembles (a subset of) the PDOStatement interface.
 *
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Roman Borschel <roman@code-factory.org>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.0
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Task for executing arbitrary SQL that can come from a file or directly from
 * the command line.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructs an SchemaDiff object.
     *
     * @param array(string=>Table)      $newTables
     * @param array(string=>TableDiff)  $changedTables
     * @param array(string=>bool)       $removedTables
     */",
 "/**
     * The to save sql mode ensures that the following things don't happen:
     *
     * 1. Tables are deleted
     * 2. Sequences are deleted
     * 3. Foreign Keys which reference tables that would otherwise be deleted.
     *
     * This way it is ensured that assets are deleted which might not be relevant to the metadata schema at all.
     *
     * @param AbstractPlatform $platform
     * @return array
     */",
 "/**
     * @param AbstractPlatform $platform
     * @return array
     */",
 "/**
     * @param AbstractPlatform $platform
     * @param bool $saveMode
     * @return array
     */",
 "/**
 * Schema Diff
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @copyright Copyright (C) 2005-2009 eZ Systems AS. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Description of HavingClause
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param string $className
     * @param string $field
     */",
 "/**
 * Base exception class for all ORM exceptions.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to clear the result cache of the various cache drivers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @param SchemaTool $schemaTool
     * @param array $metadatas
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
*Parsesaclass.
*
*@param\ReflectionClass$classA<code>ReflectionClass</code>object.
*@returnarrayAlistwithusestatementsintheform(Alias=>FQN).
*/",
 "/**
*Getthecontentofthefilerightuptothegivenlinenumber.
*
*@paramstring$filenameThenameofthefiletoload.
*@paramint$lineNumberThenumberoflinestoreadfromfile.
*@returnstringThecontentofthefile.
*/",
 "/**
*Getsthenextnonwhitespaceandnoncommenttoken.
*
*@returnarrayThetokenifexists,nullotherwise.
*/",
 "/**
*Getallusestatements.
*
*@paramstring$namespaceNameThenamespacenameofthereflectedclass.
*@returnarrayAlistwithallfoundusestatements.
*/",
 "/**
*Getthenamespacename.
*
*@returnstringThefoundnamespacename.
*/",
 "/**
*Parseasingleusestatement.
*
*@returnarrayAlistwithallfoundclassnamesforausestatement.
*/",
 "/**
*Parsesafilefornamespaces/use/classdeclarations.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorChristianKaps<christian.kaps@mohiva.com>
*/",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Checks that xcache.admin.enable_auth is Off
     *
     * @throws \BadMethodCallException When xcache.admin.enable_auth is On
     * @return void
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Xcache cache driver.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
     * Infer type of a given value, returning a compatible constant:
     * - Type (\Doctrine\DBAL\Types\Type::*)
     * - Connection (\Doctrine\DBAL\Connection::PARAM_*)
     *
     * @param mixed $value Parameter value
     *
     * @return mixed Parameter type constant
     */",
 "/**
 * Provides an enclosed support for parameter infering.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * A SQL logger that logs to the standard output using echo/var_dump.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Creates a conjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?1) AND (u.role = ?2)
     *     $expr->andX($expr->eq('u.type', ':1'), $expr->eq('u.role', ':2'));
     *
     * @param \Doctrine\ORM\Query\Expr\Comparison |
     *          \Doctrine\ORM\Query\Expr\Func |
     *          \Doctrine\ORM\Query\Expr\Orx
    *               $x Optional clause. Defaults = null, but requires at least one defined when converting to string.
     * @return Expr\Andx
     */",
 "/**
     * Creates a disjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?1) OR (u.role = ?2)
     *     $q->where($q->expr()->orX('u.type = ?1', 'u.role = ?2'));
     *
     * @param mixed $x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     * @return Expr\Orx
     */",
 "/**
     * Creates an ASCending order expression.
     *
     * @param $sort
     * @return Expr\OrderBy
     */",
 "/**
     * Creates a DESCending order expression.
     *
     * @param $sort
     * @return Expr\OrderBy
     */",
 "/**
     * Creates an equality comparison expression with the given arguments.
     *
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> = <right expr>. Example:
     *
     *     [php]
     *     // u.id = ?1
     *     $expr->eq('u.id', '?1');
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <> <right expr>. Example:
     *
     *     [php]
     *     // u.id <> ?1
     *     $q->where($q->expr()->neq('u.id', '?1'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> < <right expr>. Example:
     *
     *     [php]
     *     // u.id < ?1
     *     $q->where($q->expr()->lt('u.id', '?1'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <= <right expr>. Example:
     *
     *     [php]
     *     // u.id <= ?1
     *     $q->where($q->expr()->lte('u.id', '?1'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> > <right expr>. Example:
     *
     *     [php]
     *     // u.id > ?1
     *     $q->where($q->expr()->gt('u.id', '?1'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> >= <right expr>. Example:
     *
     *     [php]
     *     // u.id >= ?1
     *     $q->where($q->expr()->gte('u.id', '?1'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of AVG() function, with the given argument.
     *
     * @param mixed $x Argument to be used in AVG() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of MAX() function, with the given argument.
     *
     * @param mixed $x Argument to be used in MAX() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of MIN() function, with the given argument.
     *
     * @param mixed $x Argument to be used in MIN() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of COUNT() function, with the given argument.
     *
     * @param mixed $x Argument to be used in COUNT() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of COUNT(DISTINCT) function, with the given argument.
     *
     * @param mixed $x Argument to be used in COUNT(DISTINCT) function.
     * @return string
     */",
 "/**
     * Creates an instance of EXISTS() function, with the given DQL Subquery.
     *
     * @param mixed $subquery DQL Subquery to be used in EXISTS() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of ALL() function, with the given DQL Subquery.
     *
     * @param mixed $subquery DQL Subquery to be used in ALL() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a SOME() function expression with the given DQL subquery.
     *
     * @param mixed $subquery DQL Subquery to be used in SOME() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an ANY() function expression with the given DQL subquery.
     *
     * @param mixed $subquery DQL Subquery to be used in ANY() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a negation expression of the given restriction.
     *
     * @param mixed $restriction Restriction to be used in NOT() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an ABS() function expression with the given argument.
     *
     * @param mixed $x Argument to be used in ABS() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a product mathematical expression with the given arguments.
     *
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> * <right expr>. Example:
     *
     *     [php]
     *     // u.salary * u.percentAnualSalaryIncrease
     *     $q->expr()->prod('u.salary', 'u.percentAnualSalaryIncrease')
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Math
     */",
 "/**
     * Creates a difference mathematical expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> - <right expr>. Example:
     *
     *     [php]
     *     // u.monthlySubscriptionCount - 1
     *     $q->expr()->diff('u.monthlySubscriptionCount', '1')
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Math
     */",
 "/**
     * Creates a sum mathematical expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> + <right expr>. Example:
     *
     *     [php]
     *     // u.numChildren + 1
     *     $q->expr()->diff('u.numChildren', '1')
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Math
     */",
 "/**
     * Creates a quotient mathematical expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> / <right expr>. Example:
     *
     *     [php]
     *     // u.total / u.period
     *     $expr->quot('u.total', 'u.period')
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Math
     */",
 "/**
     * Creates a SQRT() function expression with the given argument.
     *
     * @param mixed $x Argument to be used in SQRT() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an IN() expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IN() function
     * @param mixed $y Argument to be used in IN() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a NOT IN() expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by NOT IN() function
     * @param mixed $y Argument to be used in NOT IN() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an IS NULL expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IS NULL
     * @return string
     */",
 "/**
     * Creates an IS NOT NULL expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IS NOT NULL
     * @return string
     */",
 "/**
     * Creates a LIKE() comparison expression with the given arguments.
     *
     * @param string $x Field in string format to be inspected by LIKE() comparison.
     * @param mixed $y Argument to be used in LIKE() comparison.
     * @return Expr\Comparison
     */",
 "/**
     * Creates a CONCAT() function expression with the given arguments.
     *
     * @param mixed $x First argument to be used in CONCAT() function.
     * @param mixed $x Second argument to be used in CONCAT() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a SUBSTRING() function expression with the given arguments.
     *
     * @param mixed $x Argument to be used as string to be cropped by SUBSTRING() function.
     * @param integer $from Initial offset to start cropping string. May accept negative values.
     * @param integer $len Length of crop. May accept negative values.
     * @return Expr\Func
     */",
 "/**
     * Creates a LOWER() function expression with the given argument.
     *
     * @param mixed $x Argument to be used in LOWER() function.
     * @return Expr\Func A LOWER function expression.
     */",
 "/**
     * Creates an UPPER() function expression with the given argument.
     *
     * @param mixed $x Argument to be used in UPPER() function.
     * @return Expr\Func An UPPER function expression.
     */",
 "/**
     * Creates a LENGTH() function expression with the given argument.
     *
     * @param mixed $x Argument to be used as argument of LENGTH() function.
     * @return Expr\Func A LENGTH function expression.
     */",
 "/**
     * Creates a literal expression of the given argument.
     *
     * @param mixed $literal Argument to be converted to literal.
     * @return Expr\Literal
     */",
 "/**
     * Quotes a literal value, if necessary, according to the DQL syntax.
     *
     * @param mixed $literal The literal value.
     * @return string
     */",
 "/**
     * Creates an instance of BETWEEN() function, with the given argument.
     *
     * @param mixed $val Valued to be inspected by range values.
     * @param integer $x Starting range value to be used in BETWEEN() function.
     * @param integer $y End point value to be used in BETWEEN() function.
     * @return Expr\Func A BETWEEN expression.
     */",
 "/**
     * Creates an instance of TRIM() function, with the given argument.
     *
     * @param mixed $x Argument to be used as argument of TRIM() function.
     * @return Expr\Func a TRIM expression.
     */",
 "/**
 * This class is used to generate DQL expressions via a set of PHP static functions
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: ExpressionBuilder
 */",
 "/**
 * ArithmeticExpression ::= SimpleArithmeticExpression | \"(\" Subselect \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Expression class for DQL from
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @override
     */",
 "/**
 * QuantifiedExpression ::= (\"ALL\" | \"ANY\" | \"SOME\") \"(\" Subselect \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string     $input An array of parameters from the CLI (in the argv format)
     * @param InputDefinition $definition A InputDefinition instance
     *
     * @api
     */",
 "/**
     * Tokenizes a string.
     *
     * @param string $input The input to tokenize
     * @throws \InvalidArgumentException When unable to parse input (should never happen)
     */",
 "/**
 * StringInput represents an input provided as a string.
 *
 * Usage:
 *
 *     $input = new StringInput('foo --bar=\"foobar\"');
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * SimpleSelectClause  ::= \"SELECT\" [\"DISTINCT\"] SimpleSelectExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * @param ClassMetadataInfo $metadata
     * @return mixed $exported
     */",
 "/**
 * ClassMetadata exporter for PHP code
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
 * Interface for annotation readers.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Sets the helper set associated with this helper.
     *
     * @param HelperSet $helperSet A HelperSet instance
     */",
 "/**
     * Gets the helper set associated with this helper.
     *
     * @return HelperSet A HelperSet instance
     */",
 "/**
 * Helper is the base class for all helper classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Sets the decorated flag.
     *
     * @param Boolean $decorated Whether to decorated the messages or not
     *
     * @api
     */",
 "/**
     * Gets the decorated flag.
     *
     * @return Boolean true if the output will decorate messages, false otherwise
     *
     * @api
     */",
 "/**
     * Sets a new style.
     *
     * @param string                        $name  The style name
     * @param OutputFormatterStyleInterface $style The style instance
     *
     * @api
     */",
 "/**
     * Checks if output formatter has style with specified name.
     *
     * @param   string  $name
     *
     * @return  Boolean
     *
     * @api
     */",
 "/**
     * Gets style options from style with specified name.
     *
     * @param   string  $name
     *
     * @return  OutputFormatterStyleInterface
     *
     * @api
     */",
 "/**
     * Formats a message according to the given styles.
     *
     * @param  string $message The message to style
     *
     * @return string The styled message
     *
     * @api
     */",
 "/**
 * Formatter interface for console output.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * @api
 */",
 "/**
     * Initializes a new ClassMetadata instance that will hold the object-relational mapping
     * metadata of the class with the given name.
     *
     * @param string $entityName The name of the entity class the new instance is used for.
     */",
 "/**
     * Gets the ReflectionPropertys of the mapped class.
     *
     * @return array An array of ReflectionProperty instances.
     */",
 "/**
     * Gets a ReflectionProperty for a specific field of the mapped class.
     *
     * @param string $name
     * @return ReflectionProperty
     */",
 "/**
     * Gets the ReflectionProperty for the single identifier field.
     *
     * @return ReflectionProperty
     * @throws BadMethodCallException If the class has a composite identifier.
     */",
 "/**
     * Extracts the identifier values of an entity of this class.
     *
     * For composite identifiers, the identifier values are returned as an array
     * with the same order as the field order in {@link identifier}.
     *
     * @param object $entity
     * @return array
     */",
 "/**
     * Populates the entity identifier of an entity.
     *
     * @param object $entity
     * @param mixed $id
     * @todo Rename to assignIdentifier()
     */",
 "/**
     * Sets the specified field to the specified value on the given entity.
     *
     * @param object $entity
     * @param string $field
     * @param mixed $value
     */",
 "/**
     * Gets the specified field's value off the given entity.
     *
     * @param object $entity
     * @param string $field
     */",
 "/**
     * Creates a string representation of this instance.
     *
     * @return string The string representation of this instance.
     * @todo Construct meaningful string representation.
     */",
 "/**
     * Determines which fields get serialized.
     *
     * It is only serialized what is necessary for best unserialization performance.
     * That means any metadata properties that are not set or empty or simply have
     * their default value are NOT serialized.
     *
     * Parts that are also NOT serialized because they can not be properly unserialized:
     *      - reflClass (ReflectionClass)
     *      - reflFields (ReflectionProperty array)
     *
     * @return array The names of all the fields that should be serialized.
     */",
 "/**
     * Creates a new instance of the mapped class, without invoking the constructor.
     *
     * @return object
     */",
 "/**
     * Restores some state that can not be serialized/unserialized.
     *
     * @param ReflectionService $reflService
     * @return void
     */",
 "/**
     * Initializes a new ClassMetadata instance that will hold the object-relational mapping
     * metadata of the class with the given name.
     *
     * @param string $entityName The name of the entity class the new instance is used for.
     */",
 "/**
     * Validate Identifier
     *
     * @return void
     */",
 "/**
     * Validate association targets actually exist.
     *
     * @return void
     */",
 "/**
     * Validate lifecycle callbacks
     *
     * @param ReflectionService $reflService
     * @return void
     */",
 "/**
     * Gets the ReflectionClass instance of the mapped class.
     *
     * @return ReflectionClass
     */",
 "/**
     * Sets the change tracking policy used by this class.
     *
     * @param integer $policy
     */",
 "/**
     * Whether the change tracking policy of this class is \"deferred explicit\".
     *
     * @return boolean
     */",
 "/**
     * Whether the change tracking policy of this class is \"deferred implicit\".
     *
     * @return boolean
     */",
 "/**
     * Whether the change tracking policy of this class is \"notify\".
     *
     * @return boolean
     */",
 "/**
     * Checks whether a field is part of the identifier/primary key field(s).
     *
     * @param string $fieldName  The field name
     * @return boolean  TRUE if the field is part of the table identifier/primary key field(s),
     *                  FALSE otherwise.
     */",
 "/**
     * Check if the field is unique.
     *
     * @param string $fieldName  The field name
     * @return boolean  TRUE if the field is unique, FALSE otherwise.
     */",
 "/**
     * Check if the field is not null.
     *
     * @param string $fieldName  The field name
     * @return boolean  TRUE if the field is not null, FALSE otherwise.
     */",
 "/**
     * Gets a column name for a field name.
     * If the column name for the field cannot be found, the given field name
     * is returned.
     *
     * @param string $fieldName The field name.
     * @return string  The column name.
     */",
 "/**
     * Gets the mapping of a (regular) field that holds some data but not a
     * reference to another object.
     *
     * @param string $fieldName  The field name.
     * @return array  The field mapping.
     */",
 "/**
     * Gets the mapping of an association.
     *
     * @see ClassMetadataInfo::$associationMappings
     * @param string $fieldName  The field name that represents the association in
     *                           the object model.
     * @return array The mapping.
     */",
 "/**
     * Gets all association mappings of the class.
     *
     * @return array
     */",
 "/**
     * Gets the field name for a column name.
     * If no field name can be found the column name is returned.
     *
     * @param string $columnName    column name
     * @return string               column alias
     */",
 "/**
     * Gets the named query.
     *
     * @see ClassMetadataInfo::$namedQueries
     * @throws MappingException
     * @param string $queryName The query name
     * @return string
     */",
 "/**
     * Gets all named queries of the class.
     *
     * @return array
     */",
 "/**
     * Validates & completes the given field mapping.
     *
     * @param array $mapping  The field mapping to validated & complete.
     * @return array  The validated and completed field mapping.
     */",
 "/**
*Validates&completesthebasicmappinginformationthatiscommontoall
*associationmappings(one-to-one,many-ot-one,one-to-many,many-to-many).
*
*@paramarray$mappingThemapping.
*@returnarrayTheupdatedmapping.
*@throwsMappingExceptionIfsomethingiswrongwiththemapping.
*/",
 "/**
*Validates&completesaone-to-oneassociationmapping.
*
*@paramarray$mappingThemappingtovalidate&complete.
*@returnarrayThevalidated&completedmapping.
*@override
*/",
 "/**
*Validatesandcompletesthemapping.
*
*@paramarray$mappingThemappingtovalidateandcomplete.
*@returnarrayThevalidatedandcompletedmapping.
*@override
*/",
 "/**
*Getstheidentifier(primarykey)fieldnamesoftheclass.
*
*@returnmixed
*/",
 "/**
*Getsthenameofthesingleidfield.Notethatthisonlyworkson
*entityclassesthathaveasingle-fieldpk.
*
*@returnstring
*@throwsMappingExceptionIftheclasshasacompositeprimarykey.
*/",
 "/**
*Getsthecolumnnameofthesingleidcolumn.Notethatthisonlyworkson
*entityclassesthathaveasingle-fieldpk.
*
*@returnstring
*@throwsMappingExceptionIftheclasshasacompositeprimarykey.
*/",
 "/**
*INTERNAL:
*Setsthemappedidentifier/primarykeyfieldsofthisclass.
*MainlyusedbytheClassMetadataFactorytoassigninheritedidentifiers.
*
*@paramarray$identifier
*/",
 "/**
*Getsthemappedidentifierfieldofthisclass.
*
*@returnstring$identifier
*/",
 "/**
*Checkswhethertheclasshasa(mapped)fieldwithacertainname.
*
*@returnboolean
*/",
 "/**
*Getsanarraycontainingallthecolumnnames.
*
*@returnarray
*/",
 "/**
*Returnsanarraywithalltheidentifiercolumnnames.
*
*@returnarray
*/",
 "/**
*SetsthetypeofIdgeneratortouseforthemappedclass.
*/",
 "/**
*CheckswhetherthemappedclassusesanIdgenerator.
*
*@returnbooleanTRUEifthemappedclassusesanIdgenerator,FALSEotherwise.
*/",
 "/**
*@returnboolean
*/",
 "/**
*CheckswhetherthemappedclassusestheJOINEDinheritancemappingstrategy.
*
*@returnbooleanTRUEiftheclassparticipatesinaJOINEDinheritancemapping,
*FALSEotherwise.
*/",
 "/**
*CheckswhetherthemappedclassusestheSINGLE_TABLEinheritancemappingstrategy.
*
*@returnbooleanTRUEiftheclassparticipatesinaSINGLE_TABLEinheritancemapping,
*FALSEotherwise.
*/",
 "/**
*CheckswhetherthemappedclassusestheTABLE_PER_CLASSinheritancemappingstrategy.
*
*@returnbooleanTRUEiftheclassparticipatesinaTABLE_PER_CLASSinheritancemapping,
*FALSEotherwise.
*/",
 "/**
*CheckswhethertheclassusesanidentitycolumnfortheIdgeneration.
*
*@returnbooleanTRUEiftheclassusestheIDENTITYgenerator,FALSEotherwise.
*/",
 "/**
*Checkswhethertheclassusesasequenceforidgeneration.
*
*@returnbooleanTRUEiftheclassusestheSEQUENCEgenerator,FALSEotherwise.
*/",
 "/**
*Checkswhethertheclassusesatableforidgeneration.
*
*@returnbooleanTRUEiftheclassusestheTABLEgenerator,FALSEotherwise.
*/",
 "/**
*Checkswhethertheclasshasanaturalidentifier/pk(whichmeansitdoes
*notuseanyIdgenerator.
*
*@returnboolean
*/",
 "/**
*Getsthetypeofafield.
*
*@paramstring$fieldName
*@return\Doctrine\DBAL\Types\Type
*/",
 "/**
*Getsthetypeofacolumn.
*
*@return\Doctrine\DBAL\Types\Type
*/",
 "/**
*Getsthenameoftheprimarytable.
*
*@returnstring
*/",
 "/**
*Getsthetablenametousefortemporaryidentifiertablesofthisclass.
*
*@returnstring
*/",
 "/**
*Setsthemappedsubclassesofthisclass.
*
*@paramarray$subclassesThenamesofallmappedsubclasses.
*/",
 "/**
*Setstheparentclassnames.
*Assumesthattheclassnamesinthepassedarrayareintheorder:
*directParent->directParentParent->directParentParentParent...->root.
*/",
 "/**
*Setstheinheritancetypeusedbytheclassandit'ssubclasses.
*
*@paraminteger$type
*/",
 "/**
*Checkswhetheramappedfieldisinheritedfromanentitysuperclass.
*
*@returnbooleanTRUEifthefieldisinherited,FALSEotherwise.
*/",
 "/**
*Checkswhetheramappedassociationfieldisinheritedfromasuperclass.
*
*@paramstring$fieldName
*@returnbooleanTRUEifthefieldisinherited,FALSEotherwise.
*/",
 "/**
*Setsthenameoftheprimarytabletheclassismappedto.
*
*@paramstring$tableNameThetablename.
*@deprecatedUse{@linksetPrimaryTable}.
*/",
 "/**
*Setstheprimarytabledefinition.Theprovidedarraysupportsthe
*followingstructure:
*
*name=><tableName>(optional,defaultstoclassname)
*indexes=>arrayofindexes(optional)
*uniqueConstraints=>arrayofconstraints(optional)
*
*Ifakeyisomitted,thecurrentvalueiskept.
*
*@paramarray$tableThetabledescription.
*/",
 "/**
*Checkswhetherthegiventypeidentifiesaninheritancetype.
*
*@paraminteger$type
*@returnbooleanTRUEifthegiventypeidentifiesaninheritancetype,FALSeotherwise.
*/",
 "/**
*Addsamappedfieldtotheclass.
*
*@paramarray$mappingThefieldmapping.
*/",
 "/**
*INTERNAL:
*Addsanassociationmappingwithoutcompleting/validatingit.
*Thisismainlyusedtoaddinheritedassociationmappingstoderivedclasses.
*
*@paramarray$mapping
*/",
 "/**
*INTERNAL:
*Addsafieldmappingwithoutcompleting/validatingit.
*Thisismainlyusedtoaddinheritedfieldmappingstoderivedclasses.
*
*@paramarray$mapping
*/",
 "/**
*INTERNAL:
*Addsanamedquerytothisclass.
*
*@throwsMappingException
*@paramarray$queryMapping
*/",
 "/**
*Addsaone-to-onemapping.
*
*@paramarray$mappingThemapping.
*/",
 "/**
*Addsaone-to-manymapping.
*
*@paramarray$mappingThemapping.
*/",
 "/**
*Addsamany-to-onemapping.
*
*@paramarray$mappingThemapping.
*/",
 "/**
*Addsamany-to-manymapping.
*
*@paramarray$mappingThemapping.
*/",
 "/**
*Storestheassociationmapping.
*
*@paramarray$assocMapping
*/",
 "/**
*Registersacustomrepositoryclassfortheentityclass.
*
*@paramstring$mapperClassNameTheclassnameofthecustommapper.
*/",
 "/**
*Dispatchesthelifecycleeventofthegivenentitytotheregistered
*lifecyclecallbacksandlifecyclelisteners.
*
*@paramstring$eventThelifecycleevent.
*@paramEntity$entityTheEntityonwhichtheeventoccured.
*/",
 "/**
*Whethertheclasshasanyattachedlifecyclelistenersorcallbacksforalifecycleevent.
*
*@paramstring$lifecycleEvent
*@returnboolean
*/",
 "/**
*Getstheregisteredlifecyclecallbacksforanevent.
*
*@paramstring$event
*@returnarray
*/",
 "/**
*Addsalifecyclecallbackforentitiesofthisclass.
*
*@paramstring$callback
*@paramstring$event
*/",
 "/**
*Setsthelifecyclecallbacksforentitiesofthisclass.
*Anypreviouslyregisteredcallbacksareoverwritten.
*
*@paramarray$callbacks
*/",
 "/**
*Setsthediscriminatorcolumndefinition.
*
*@paramarray$columnDef
*@seegetDiscriminatorColumn()
*/",
 "/**
*Setsthediscriminatorvaluesusedbythisclass.
*UsedforJOINEDandSINGLE_TABLEinheritancemappingstrategies.
*
*@paramarray$map
*/",
 "/**
*Addoneentryofthediscriminatormapwithanewclassandcorrespondingname.
*
*@paramstring$name
*@paramstring$className
*/",
 "/**
*Checkswhethertheclasshasanamedquerywiththegivenqueryname.
*
*@paramstring$fieldName
*@returnboolean
*/",
 "/**
*Checkswhethertheclasshasamappedassociationwiththegivenfieldname.
*
*@paramstring$fieldName
*@returnboolean
*/",
 "/**
*Checkswhethertheclasshasamappedassociationforthespecifiedfield
*andifyes,checkswhetheritisasingle-valuedassociation(to-one).
*
*@paramstring$fieldName
*@returnbooleanTRUEiftheassociationexistsandissingle-valued,FALSEotherwise.
*/",
 "/**
*Checkswhethertheclasshasamappedassociationforthespecifiedfield
*andifyes,checkswhetheritisacollection-valuedassociation(to-many).
*
*@paramstring$fieldName
*@returnbooleanTRUEiftheassociationexistsandiscollection-valued,FALSEotherwise.
*/",
 "/**
*Isthisanassociationthatonlyhasasinglejoincolumn?
*
*@paramstring$fieldName
*@returnbool
*/",
 "/**
*Returnthesingleassociationjoincolumn(ifany).
*
*@paramstring$fieldName
*@returnstring
*/",
 "/**
*Returnthesingleassociationreferencedjoincolumnname(ifany).
*
*@paramstring$fieldName
*@returnstring
*/",
 "/**
*Usedtoretrieveafieldnameforeitherfieldorassociationfromagivencolumn,
*
*Thismethodisusedinforeign-keyasprimary-keycontexts.
*
*@paramstring$columnName
*@returnstring
*/",
 "/**
*SetstheIDgeneratorusedtogenerateIDsforinstancesofthisclass.
*
*@paramAbstractIdGenerator$generator
*/",
 "/**
*SetsthedefinitionofthesequenceIDgeneratorforthisclass.
*
*Thedefinitionmusthavethefollowingstructure:
*<code>
*array(
*'sequenceName'=>'name',
*'allocationSize'=>20,
*'initialValue'=>1
*)
*</code>
*
*@paramarray$definition
*/",
 "/**
*Setstheversionfieldmappingusedforversioning.Setsthedefault
*valuetousedependingonthecolumntype.
*
*@paramarray$mappingTheversionfieldmappingarray
*/",
 "/**
*Setswhetherthisclassistobeversionedforoptimisticlocking.
*
*@paramboolean$bool
*/",
 "/**
*Setsthenameofthefieldthatistobeusedforversioningifthisclassis
*versionedforoptimisticlocking.
*
*@paramstring$versionField
*/",
 "/**
*Markthisclassasreadonly,nochangetrackingisappliedtoit.
*
*@returnvoid
*/",
 "/**
*Anumericallyindexedlistoffieldnamesofthispersistentclass.
*
*Thisarrayincludesidentifierfieldsifpresentonthisclass.
*
*@returnarray
*/",
 "/**
*Anumericallyindexedlistofassociationnamesofthispersistentclass.
*
*Thisarrayincludesidentifierassociationsifpresentonthisclass.
*
*@returnarray
*/",
 "/**
*Returnsthetargetclassnameofthegivenassociation.
*
*@paramstring$assocName
*@returnstring
*/",
 "/**
*Getfully-qualifiedclassnameofthispersistentclass.
*
*@returnstring
*/",
 "/**
*Getsthe(possiblyquoted)identifiercolumnnamesforsafeuseinanSQLstatement.
*
*@paramAbstractPlatform$platform
*@returnarray
*/",
 "/**
*Getsthe(possiblyquoted)columnnameofamappedfieldforsafeuse
*inanSQLstatement.
*
*@paramstring$field
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*Getsthe(possiblyquoted)primarytablenameofthisclassforsafeuse
*inanSQLstatement.
*
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*Getsthe(possiblyquoted)nameofthejointable.
*
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*@paramstring$fieldName
*@returnbool
*/",
 "/**
*@paramstring$fieldName
*@returnstring
*/",
 "/**
*A<tt>ClassMetadata</tt>instanceholdsalltheobject-relationalmappingmetadata
*ofanentityandit'sassociations.
*
*Oncepopulated,ClassMetadatainstancesareusuallycachedinaserializedform.
*
*<b>IMPORTANTNOTE:</b>
*
*Thefieldsofthisclassareonlypublicfor2reasons:
*1)ToallowfastREADaccess.
*2)Todrasticallyreducethesizeofaserializedinstance(private/protectedmembers
*getthewholeclassname,namespaceinclusive,prependedtoeverypropertyin
*theserializedrepresentation).
*
*@authorRomanBorschel<roman@code-factory.org>
*@authorJonathanH.Wage<jonwage@gmail.com>
*@since2.0
*/",
 "/**
     * Sets the SQL logger to use. Defaults to NULL which means SQL logging is disabled.
     *
     * @param SQLLogger $logger
     */",
 "/**
     * Gets the SQL logger that is used.
     *
     * @return SQLLogger
     */",
 "/**
     * Gets the cache driver implementation that is used for query result caching.
     *
     * @return \Doctrine\Common\Cache\Cache
     */",
 "/**
     * Sets the cache driver implementation that is used for query result caching.
     *
     * @param \Doctrine\Common\Cache\Cache $cacheImpl
     */",
 "/**
     * Filter schema assets expression.
     *
     * Only include tables/sequences matching the filter expression regexp in
     * schema instances generated for the active connection when calling
     * {AbstractSchemaManager#createSchema()}.
     *
     * @param string $filterExpression
     */",
 "/**
     * Return filter schema assets expression.
     *
     * @return string|null
     */",
 "/**
 * Configuration container for the Doctrine DBAL.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @internal When adding a new configuration option just write a getter/setter
 *           pair and add the option to the _attributes array with a proper default value.
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Whether the platform prefers identity columns for ID generation.
     * MsSql prefers \"autoincrement\" identity columns since sequences can only
     * be emulated with a table.
     *
     * @return boolean
     * @override
     */",
 "/**
     * Whether the platform supports identity columns.
     * MsSql supports this through AUTO_INCREMENT columns.
     *
     * @return boolean
     * @override
     */",
 "/**
     * Whether the platform supports releasing savepoints.
     *
     * @return boolean
     */",
 "/**
     * create a new database
     *
     * @param string $name name of the database that should be created
     * @return string
     * @override
     */",
 "/**
     * drop an existing database
     *
     * @param string $name name of the database that should be dropped
     * @return string
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Extend unique key constraint with required filters
     *
     * @param string $sql
     * @param Index $index
     * @return string
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Returns the regular expression operator.
     *
     * @return string
     * @override
     */",
 "/**
     * Returns global unique identifier
     *
     * @return string to get global unique identifier
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/** Original query used to get those expressions
              declare @c varchar(100) = 'xxxBarxxx', @trim_char char(1) = 'x';
              declare @pat varchar(10) = '%[^' + @trim_char + ']%';
              select @c as string
              , @trim_char as trim_char
              , stuff(@c, 1, patindex(@pat, @c) - 1, null) as trim_leading
              , reverse(stuff(reverse(@c), 1, patindex(@pat, reverse(@c)) - 1, null)) as trim_trailing
              , reverse(stuff(reverse(stuff(@c, 1, patindex(@pat, @c) - 1, null)), 1, patindex(@pat, reverse(stuff(@c, 1, patindex(@pat, @c) - 1, null))) - 1, null)) as trim_both;
             */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/** @override */",
 "/** @override */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Adds an adapter-specific LIMIT clause to the SELECT statement.
     *
     * @param string $query
     * @param integer $limit
     * @param integer $offset
     * @link http://lists.bestpractical.com/pipermail/rt-devel/2005-June/007339.html
     * @return string
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Get the platform name for this instance
     *
     * @return string
     */",
 "/**
     * @override
     */",
 "/**
     * Generate SQL to create a new savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Generate SQL to release a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Generate SQL to rollback a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Gets the SQL Snippet used to declare a BLOB column type.
     */",
 "/**
 * The SQLServerPlatform provides the behavior, features and SQL dialect of the
 * Microsoft SQL Server database platform.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Prepares an SQL statement.
     *
     * @param string $statement The SQL statement to prepare.
     * @return Doctrine\DBAL\Driver\Statement The prepared statement.
     */",
 "/**
     * Walks down a SelectStatement AST node, modifying it to retrieve a COUNT
     *
     * @param SelectStatement $AST
     * @return void
     */",
 "/**
 * Replaces the selectClause of the AST with a COUNT statement
 *
 * @category    DoctrineExtensions
 * @package     DoctrineExtensions\Paginate
 * @author      David Abdemoulaie <dave@hobodave.com>
 * @copyright   Copyright (c) 2010 David Abdemoulaie (http://hobodave.com/)
 * @license     http://hobodave.com/license.txt New BSD License
 */",
 "/**
     * Return an array of the parent classes (not interfaces) for the given class.
     *
     * @param string $class
     * @return array
     */",
 "/**
     * Return the shortname of a class.
     *
     * @param string $class
     * @return string
     */",
 "/**
     * @param string $class
     * @return string
     */",
 "/**
     * Return a reflection class instance or null
     *
     * @param string $class
     * @return ReflectionClass|null
     */",
 "/**
     * Return an accessible property (setAccessible(true)) or null.
     *
     * @param string $class
     * @param string $property
     * @return ReflectionProperty|null
     */",
 "/**
     * Check if the class have a public method with the given name.
     *
     * @param mixed $class
     * @param mixed $method
     * @return bool
     */",
 "/**
 * PHP Runtime Reflection Service
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param string  $name        The argument name
     * @param integer $mode        The argument mode: self::REQUIRED or self::OPTIONAL
     * @param string  $description A description text
     * @param mixed   $default     The default value (for self::OPTIONAL mode only)
     *
     * @throws \InvalidArgumentException When argument mode is not valid
     *
     * @api
     */",
 "/**
     * Returns the argument name.
     *
     * @return string The argument name
     */",
 "/**
     * Returns true if the argument is required.
     *
     * @return Boolean true if parameter mode is self::REQUIRED, false otherwise
     */",
 "/**
     * Returns true if the argument can take multiple values.
     *
     * @return Boolean true if mode is self::IS_ARRAY, false otherwise
     */",
 "/**
     * Sets the default value.
     *
     * @param mixed $default The default value
     *
     * @throws \LogicException When incorrect default value is given
     */",
 "/**
     * Returns the default value.
     *
     * @return mixed The default value
     */",
 "/**
     * Returns the description text.
     *
     * @return string The description text
     */",
 "/**
 * Represents a command line argument.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
     * Constructor
     *
     * @param integer $offset The offset of YAML document (used for line numbers in error messages)
     */",
 "/**
     * Parses a YAML string to a PHP value.
     *
     * @param  string $value A YAML string
     *
     * @return mixed  A PHP value
     *
     * @throws ParseException If the YAML is not valid
     */",
 "/**
     * Returns the current line number (takes the offset into account).
     *
     * @return integer The current line number
     */",
 "/**
     * Returns the current line indentation.
     *
     * @return integer The current line indentation
     */",
 "/**
     * Returns the next embed block of YAML.
     *
     * @param integer $indentation The indent level at which the block is to be read, or null for default
     *
     * @return string A YAML string
     *
     * @throws ParseException When indentation problem are detected
     */",
 "/**
     * Moves the parser to the next line.
     *
     * @return Boolean
     */",
 "/**
     * Moves the parser to the previous line.
     */",
 "/**
     * Parses a YAML value.
     *
     * @param  string $value A YAML value
     *
     * @return mixed  A PHP value
     *
     * @throws ParseException When reference does not exist
     */",
 "/**
     * Parses a folded scalar.
     *
     * @param  string  $separator   The separator that was used to begin this folded scalar (| or >)
     * @param  string  $indicator   The indicator that was used to begin this folded scalar (+ or -)
     * @param  integer $indentation The indentation that was used to begin this folded scalar
     *
     * @return string  The text value
     */",
 "/**
     * Returns true if the next line is indented.
     *
     * @return Boolean Returns true if the next line is indented, false otherwise
     */",
 "/**
     * Returns true if the current line is blank or if it is a comment line.
     *
     * @return Boolean Returns true if the current line is empty or if it is a comment line, false otherwise
     */",
 "/**
     * Returns true if the current line is blank.
     *
     * @return Boolean Returns true if the current line is blank, false otherwise
     */",
 "/**
     * Returns true if the current line is a comment line.
     *
     * @return Boolean Returns true if the current line is a comment line, false otherwise
     */",
 "/**
     * Cleanups a YAML string to be parsed.
     *
     * @param  string $value The input YAML string
     *
     * @return string A cleaned up YAML string
     */",
 "/**
 * Parser parses YAML strings to convert them to PHP arrays.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"IDENTITY\" \"(\" SingleValuedAssociationPathExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * If you want to add or replace a keywords list use this command
     *
     * @param string $name
     * @param string $class
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * Annotation construct
     *
     * @param array $values
     */",
 "/**
 * Annotation that can be used to signal to the parser
 * to check the annotation target during the parsing process.
 *
 * @author Fabio B. Silva <fabio.bat.silva@gmail.com>
 *
 * @Annotation
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
     * Creates a new OCI8Statement that uses the given connection handle and SQL statement.
     *
     * @param resource $dbh The connection handle.
     * @param string $statement The SQL statement.
     */",
 "/**
     * Convert positional (?) into named placeholders (:param<num>)
     *
     * Oracle does not support positional parameters, hence this method converts all
     * positional parameters into artificially named parameters. Note that this conversion
     * is not perfect. All question marks (?) in the original statement are treated as
     * placeholders and converted to a named parameter.
     *
     * The algorithm uses a state machine with two possible states: InLiteral and NotInLiteral.
     * Question marks inside literal strings are therefore handled correctly by this method.
     * This comes at a cost, the whole sql statement has to be looped over.
     *
     * @todo extract into utility class in Doctrine\DBAL\\Util namespace
     * @todo review and test for lost spaces. we experienced missing spaces with oci8 in some sql statements.
     * @param string $statement The SQL statement to convert.
     * @return string
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Closes the cursor, enabling the statement to be executed again.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The OCI8 implementation of the Statement interface.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/** Private constructor. This class cannot be instantiated. */",
 "/**
     * Creates a connection object based on the specified parameters.
     * This method returns a Doctrine\DBAL\Connection which wraps the underlying
     * driver connection.
     *
     * $params must contain at least one of the following.
     *
     * Either 'driver' with one of the following values:
     *     pdo_mysql
     *     pdo_sqlite
     *     pdo_pgsql
     *     pdo_oracle
     *     pdo_sqlsrv
     *
     * OR 'driverClass' that contains the full class name (with namespace) of the
     * driver class to instantiate.
     *
     * Other (optional) parameters:
     *
     * <b>user (string)</b>:
     * The username to use when connecting.
     *
     * <b>password (string)</b>:
     * The password to use when connecting.
     *
     * <b>driverOptions (array)</b>:
     * Any additional driver-specific options for the driver. These are just passed
     * through to the driver.
     *
     * <b>pdo</b>:
     * You can pass an existing PDO instance through this parameter. The PDO
     * instance will be wrapped in a Doctrine\DBAL\Connection.
     *
     * <b>wrapperClass</b>:
     * You may specify a custom wrapper class through the 'wrapperClass'
     * parameter but this class MUST inherit from Doctrine\DBAL\Connection.
     *
     * <b>driverClass</b>:
     * The driver class to use.
     *
     * @param array $params The parameters.
     * @param Doctrine\DBAL\Configuration The configuration to use.
     * @param Doctrine\Common\EventManager The event manager to use.
     * @return Doctrine\DBAL\Connection
     */",
 "/**
     * Checks the list of parameters.
     *
     * @param array $params
     */",
 "/**
 * Factory for creating Doctrine\DBAL\Connection instances.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Pass a stream and contet information for the debugging session.
     *
     * The stream can be php://output to print to the screen.
     *
     * @param string $file
     * @param string $context
     */",
 "/**
     * Dump the contents of the identity map into a stream.
     *
     * @param EntityManager $em
     * @return void
     */",
 "/**
 * Use this logger to dump the identity map during the onFlush event. This is useful for debugging
 * weird UnitOfWork behavior with complex operations.
 */",
 "/**
     * Sets the cache driver used by the factory to cache ClassMetadata instances.
     *
     * @param Doctrine\Common\Cache\Cache $cacheDriver
     */",
 "/**
     * Gets the cache driver used by the factory to cache ClassMetadata instances.
     *
     * @return Doctrine\Common\Cache\Cache
     */",
 "/**
     * Return an array of all the loaded metadata currently in memory.
     *
     * @return array
     */",
 "/**
     * Forces the factory to load the metadata of all classes known to the underlying
     * mapping driver.
     *
     * @return array The ClassMetadata instances of all mapped classes.
     */",
 "/**
     * Lazy initialization of this stuff, especially the metadata driver,
     * since these are not needed at all when a metadata cache is active.
     *
     * @return void
     */",
 "/**
     * Get the fully qualified class-name from the namespace alias.
     *
     * @param string $namespaceAlias
     * @param string $simpleClassName
     * @return string
     */",
 "/**
     * Return the mapping driver implementation.
     *
     * @return MappingDriver
     */",
 "/**
     * Wakeup reflection after ClassMetadata gets unserialized from cache.
     *
     * @param ClassMetadata $class
     * @param ReflectionService $reflService
     * @return void
     */",
 "/**
     * Initialize Reflection after ClassMetadata was constructed.
     *
     * @param ClassMetadata $class
     * @param ReflectionSErvice $reflService
     * @return void
     */",
 "/**
     * Gets the class metadata descriptor for a class.
     *
     * @param string $className The name of the class.
     * @return Doctrine\Common\Persistence\Mapping\ClassMetadata
     */",
 "/**
     * Checks whether the factory has the metadata for a class loaded already.
     *
     * @param string $className
     * @return boolean TRUE if the metadata of the class in question is already loaded, FALSE otherwise.
     */",
 "/**
     * Sets the metadata descriptor for a specific class.
     *
     * NOTE: This is only useful in very special cases, like when generating proxy classes.
     *
     * @param string $className
     * @param ClassMetadata $class
     */",
 "/**
     * Get array of parent classes for the given entity class
     *
     * @param string $name
     * @return array $parentClasses
     */",
 "/**
     * Loads the metadata of the class in question and all it's ancestors whose metadata
     * is still not loaded.
     *
     * @param string $name The name of the class for which the metadata should get loaded.
     * @param array  $tables The metadata collection to which the loaded metadata is added.
     */",
 "/**
     * Actually load the metadata from the underlying metadata
     *
     * @param ClassMetadata $class
     * @param ClassMetadata $parent
     * @param bool $rootEntityFound
     * @return void
     */",
 "/**
     * Creates a new ClassMetadata instance for the given class name.
     *
     * @param string $className
     * @return ClassMetadata
     */",
 "/**
     * Check if this class is mapped by this Object Manager + ClassMetadata configuration
     *
     * @param $class
     * @return bool
     */",
 "/**
     * Set reflectionService.
     *
     * @param ReflectionService $reflectionService
     */",
 "/**
     * Get the reflection service associated with this metadata factory.
     *
     * @return ReflectionService
     */",
 "/**
 * The ClassMetadataFactory is used to create ClassMetadata objects that contain all the
 * metadata mapping informations of a class which describes how a class should be mapped
 * to a relational database.
 *
 * This class was abstracted from the ORM ClassMetadataFactory
 *
 * @since   2.2
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor
     *
     * @param Connection $connection Doctrine Database Connection
     */",
 "/**
     * Retrieves Doctrine Database Connection
     *
     * @return Connection
     */",
 "/**
     * @see Helper
     */",
 "/**
 * Doctrine CLI Connection Helper.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * PDO implementation of the Connection interface.
 * Used by all PDO-based drivers.
 *
 * @since 2.0
 */",
 "/**
 * Exception thrown when an ORM query unexpectedly returns more than one result.
 *
 * @author robo
 * @since 2.0
 */",
 "/**
     * Gets the default object manager name.
     *
     * @return string The default object manager name
     */",
 "/**
     * Gets a named object manager.
     *
     * @param string $name The object manager name (null for the default one)
     *
     * @return \Doctrine\Common\Persistence\ObjectManager
     */",
 "/**
     * Gets an array of all registered object managers
     *
     * @return array An array of ObjectManager instances
     */",
 "/**
     * Resets a named object manager.
     *
     * This method is useful when an object manager has been closed
     * because of a rollbacked transaction AND when you think that
     * it makes sense to get a new one to replace the closed one.
     *
     * Be warned that you will get a brand new object manager as
     * the existing one is not useable anymore. This means that any
     * other object with a dependency on this object manager will
     * hold an obsolete reference. You can inject the registry instead
     * to avoid this problem.
     *
     * @param string $name The object manager name (null for the default one)
     *
     * @return \Doctrine\Common\Persistence\ObjectManager
     */",
 "/**
     * Resolves a registered namespace alias to the full namespace.
     *
     * This method looks for the alias in all registered object managers.
     *
     * @param string $alias The alias
     *
     * @return string The full namespace
     */",
 "/**
     * Gets all connection names.
     *
     * @return array An array of connection names
     */",
 "/**
     * Gets the ObjectRepository for an persistent object.
     *
     * @param string $persistentObject        The name of the persistent object.
     * @param string $persistentManagerName The object manager name (null for the default one)
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository
     */",
 "/**
     * Gets the object manager associated with a given class.
     *
     * @param string $class A persistent object class name
     *
     * @return \Doctrine\Common\Persistence\ObjectManager|null
     */",
 "/**
 * Contract covering object managers for a Doctrine persistence layer ManagerRegistry class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Fabien Potencier <fabien@symfony.com>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Lukas Kahwe Smith <smith@pooteeweet.org>
 */",
 "/**
     * @param ClassMetadata $classMetadata
     * @param Schema $schema
     * @param Table $classTable
     */",
 "/**
     * @return EntityManager
     */",
 "/**
     * @return Schema
     */",
 "/**
 * Event Args used for the Events::postGenerateSchema event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Gets the SQL Snippet used to declare a BLOB column type.
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column type.
     *
     * @param array $field
     */",
 "/**
     * Gets the SQL snippet used to declare a CLOB column type.
     *
     * @param array $field
     */",
 "/**
     * Gets the name of the platform.
     *
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a boolean column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a 4 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares an 8 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a 2 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares common properties of an integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create datetime fields in
     * statements like CREATE TABLE
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create date fields in statements
     * like CREATE TABLE.
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create time fields in statements
     * like CREATE TABLE.
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * This code fragment is originally from the Zend_Db_Adapter_Db2 class.
     *
     * @license New BSD License
     * @param  string $table
     * @return string
     */",
 "/**
     * Get the SQL to list all views of a database or user.
     *
     * @param string $database
     * @return string
     */",
 "/**
     * Whether the platform supports releasing savepoints.
     *
     * @return boolean
     */",
 "/**
     * Gets the SQL specific for the platform to get the current date.
     *
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current time.
     *
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current timestamp
     *
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set an index
     * declaration to be used in statements like CREATE TABLE.
     *
     * @param string $name          name of the index
     * @param Index $index          index definition
     * @return string               DBMS specific SQL code portion needed to set an index
     */",
 "/**
     * @param string $tableName
     * @param array $columns
     * @param array $options
     * @return array
     */",
 "/**
     * Gets the SQL to alter an existing table.
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * Get the insert sql for an empty insert statement
     *
     * @param string $tableName
     * @param string $identifierColumnName
     * @return string $sql
     */",
 "/**
     * DB2 automatically moves temporary tables into the SESSION. schema.
     *
     * @param  string $tableName
     * @return string
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * return string to call a function to get a substring inside an SQL statement
     *
     * Note: Not SQL92, but common functionality.
     *
     * SQLite only supports the 2 parameter variant of this function
     *
     * @param  string $value         an sql string literal or column name/alias
     * @param  integer $from     where to start the substring portion
     * @param  integer $len       the substring portion length
     * @return string
     */",
 "/**
     * Gets the character casing of a column in an SQL result set of this platform.
     *
     * DB2 returns all column names in SQL result sets in uppercase.
     *
     * @param string $column The column name for which to get the correct character casing.
     * @return string The column name in the character casing used in SQL result sets.
     */",
 "/**
     * DB2 supports savepoints, but they work semantically different than on other vendor platforms.
     *
     * TODO: We have to investigate how to get DB2 up and running with savepoints.
     *
     * @return bool
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The PHPDriver includes php files which just populate ClassMetadataInfo
 * instances with plain php code
 *
 * @license 	http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    	www.doctrine-project.org
 * @since   	2.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Attempts to create a connection with the database.
     *
     * @param array $params All connection parameters passed by the user.
     * @param string $username The username to use when connecting.
     * @param string $password The password to use when connecting.
     * @param array $driverOptions The driver options to use when connecting.
     * @return Doctrine\DBAL\Driver\Connection The database connection.
     */",
 "/**
     * Gets the DatabasePlatform instance that provides all the metadata about
     * the platform this driver connects to.
     *
     * @return Doctrine\DBAL\Platforms\AbstractPlatform The database platform.
     */",
 "/**
     * Gets the SchemaManager that can be used to inspect and change the underlying
     * database schema of the platform this driver connects to.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return Doctrine\DBAL\SchemaManager
     */",
 "/**
     * Gets the name of the driver.
     *
     * @return string The name of the driver.
     */",
 "/**
     * Get the name of the database connected to for this driver.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return string $database
     */",
 "/**
 * IBM DB2 Driver
 *
 * @since 2.0
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * SimpleArithmeticExpression ::= ArithmeticTerm {(\"+\" | \"-\") ArithmeticTerm}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param ClassMetadata $classMetadata
     * @param Schema $schema
     * @param Table $classTable
     */",
 "/**
     * @return ClassMetadata
     */",
 "/**
     * @return Schema
     */",
 "/**
     * @return Table
     */",
 "/**
 * Event Args used for the Events::postGenerateSchemaTable event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     */",
 "/**
     * Sets the EventManager used by the Platform.
     *
     * @param \Doctrine\Common\EventManager
     */",
 "/**
     * Gets the EventManager used by the Platform.
     *
     * @return \Doctrine\Common\EventManager
     */",
 "/**
     * Gets the SQL snippet that declares a boolean column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a 4 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares an 8 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a 2 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares common properties of an integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Lazy load Doctrine Type Mappings
     *
     * @return void
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column type.
     *
     * @param array $field
     */",
 "/**
     * Gets the SQL snippet used to declare a CLOB column type.
     *
     * @param array $field
     */",
 "/**
     * Gets the SQL Snippet used to declare a BLOB column type.
     */",
 "/**
     * Gets the name of the platform.
     *
     * @return string
     */",
 "/**
     * Register a doctrine type to be used in conjunction with a column type of this platform.
     *
     * @param string $dbType
     * @param string $doctrineType
     */",
 "/**
     * Get the Doctrine type that is mapped for the given database column type.
     *
     * @param  string $dbType
     * @return string
     */",
 "/**
     * Check if a database type is currently supported by this platform.
     *
     * @param string $dbType
     * @return bool
     */",
 "/**
     * Initialize the Doctrine Type comments instance variable for in_array() checks.
     *
     * @return void
     */",
 "/**
     * Is it necessary for the platform to add a parsable type comment to allow reverse engineering the given type?
     *
     * @param Type $doctrineType
     * @return bool
     */",
 "/**
     * Mark this type as to be commented in ALTER TABLE and CREATE TABLE statements.
     *
     * @param Type $doctrineType
     * @return void
     */",
 "/**
     * Get the comment to append to a column comment that helps parsing this type in reverse engineering.
     *
     * @param Type $doctrineType
     * @return string
     */",
 "/**
     * Return the comment of a passed column modified by potential doctrine type comment hints.
     *
     * @param Column $column
     * @return string
     */",
 "/**
     * Gets the character used for identifier quoting.
     *
     * @return string
     */",
 "/**
     * Gets the string portion that starts an SQL comment.
     *
     * @return string
     */",
 "/**
     * Gets the string portion that ends an SQL comment.
     *
     * @return string
     */",
 "/**
     * Gets the maximum length of a varchar field.
     *
     * @return integer
     */",
 "/**
     * Gets the default length of a varchar field.
     *
     * @return integer
     */",
 "/**
     * Gets all SQL wildcard characters of the platform.
     *
     * @return array
     */",
 "/**
     * Returns the regular expression operator.
     *
     * @return string
     */",
 "/**
     * Returns global unique identifier
     *
     * @return string to get global unique identifier
     */",
 "/**
     * Returns the average value of a column
     *
     * @param string $column    the column to use
     * @return string           generated sql including an AVG aggregate function
     */",
 "/**
     * Returns the number of rows (without a NULL value) of a column
     *
     * If a '*' is used instead of a column the number of selected rows
     * is returned.
     *
     * @param string|integer $column    the column to use
     * @return string                   generated sql including a COUNT aggregate function
     */",
 "/**
     * Returns the highest value of a column
     *
     * @param string $column    the column to use
     * @return string           generated sql including a MAX aggregate function
     */",
 "/**
     * Returns the lowest value of a column
     *
     * @param string $column the column to use
     * @return string
     */",
 "/**
     * Returns the total sum of a column
     *
     * @param string $column the column to use
     * @return string
     */",
 "/**
     * Returns the md5 sum of a field.
     *
     * Note: Not SQL92, but common functionality
     *
     * @return string
     */",
 "/**
     * Returns the length of a text field.
     *
     * @param string $expression1
     * @param string $expression2
     * @return string
     */",
 "/**
     * Rounds a numeric field to the number of decimals specified.
     *
     * @param string $expression1
     * @param string $expression2
     * @return string
     */",
 "/**
     * Returns the remainder of the division operation
     * $expression1 / $expression2.
     *
     * @param string $expression1
     * @param string $expression2
     * @return string
     */",
 "/**
     * Trim a string, leading/trailing/both and with a given char which defaults to space.
     *
     * @param string $str
     * @param int $pos
     * @param string $char has to be quoted already
     * @return string
     */",
 "/**
     * rtrim
     * returns the string $str with proceeding space characters removed
     *
     * @param string $str       literal string or column name
     * @return string
     */",
 "/**
     * ltrim
     * returns the string $str with leading space characters removed
     *
     * @param string $str       literal string or column name
     * @return string
     */",
 "/**
     * upper
     * Returns the string $str with all characters changed to
     * uppercase according to the current character set mapping.
     *
     * @param string $str       literal string or column name
     * @return string
     */",
 "/**
     * lower
     * Returns the string $str with all characters changed to
     * lowercase according to the current character set mapping.
     *
     * @param string $str       literal string or column name
     * @return string
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * Returns the current system date.
     *
     * @return string
     */",
 "/**
     * return string to call a function to get a substring inside an SQL statement
     *
     * Note: Not SQL92, but common functionality.
     *
     * SQLite only supports the 2 parameter variant of this function
     *
     * @param  string $value         an sql string literal or column name/alias
     * @param  integer $from     where to start the substring portion
     * @param  integer $len       the substring portion length
     * @return string
     */",
 "/**
     * Returns a series of strings concatinated
     *
     * concat() accepts an arbitrary number of parameters. Each parameter
     * must contain an expression
     *
     * @param string $arg1, $arg2 ... $argN     strings that will be concatinated.
     * @return string
     */",
 "/**
     * Returns the SQL for a logical not.
     *
     * Example:
     * <code>
     * $q = new Doctrine_Query();
     * $e = $q->expr;
     * $q->select('*')->from('table')
     *   ->where($e->eq('id', $e->not('null'));
     * </code>
     *
     * @return string a logical expression
     */",
 "/**
     * Returns the SQL to check if a value is one in a set of
     * given values.
     *
     * in() accepts an arbitrary number of parameters. The first parameter
     * must always specify the value that should be matched against. Successive
     * must contain a logical expression or an array with logical expressions.
     * These expressions will be matched against the first parameter.
     *
     * @param string $column        the value that should be matched against
     * @param string|array(string)  values that will be matched against $column
     * @return string logical expression
     */",
 "/**
     * Returns SQL that checks if a expression is null.
     *
     * @param string $expression the expression that should be compared to null
     * @return string logical expression
     */",
 "/**
     * Returns SQL that checks if a expression is not null.
     *
     * @param string $expression the expression that should be compared to null
     * @return string logical expression
     */",
 "/**
     * Returns SQL that checks if an expression evaluates to a value between
     * two values.
     *
     * The parameter $expression is checked if it is between $value1 and $value2.
     *
     * Note: There is a slight difference in the way BETWEEN works on some databases.
     * http://www.w3schools.com/sql/sql_between.asp. If you want complete database
     * independence you should avoid using between().
     *
     * @param string $expression the value to compare to
     * @param string $value1 the lower value to compare with
     * @param string $value2 the higher value to compare with
     * @return string logical expression
     */",
 "/**
     * Calculate the difference in days between the two passed dates.
     *
     * Computes diff = date1 - date2
     *
     * @param string $date1
     * @param string $date2
     * @return string
     */",
 "/**
     * Add the number of given days to a date.
     *
     * @param string $date
     * @param int $days
     * @return string
     */",
 "/**
     * Substract the number of given days to a date.
     *
     * @param string $date
     * @param int $days
     * @return string
     */",
 "/**
     * Add the number of given months to a date.
     *
     * @param string $date
     * @param int $months
     * @return string
     */",
 "/**
     * Substract the number of given months to a date.
     *
     * @param string $date
     * @param int $months
     * @return string
     */",
 "/**
     * Gets SQL bit AND comparison  expression
     *
     * @param   string $value1
     * @param   string $value2
     * @return  string
     */",
 "/**
     * Gets SQL bit OR comparison expression
     *
     * @param   string $value1
     * @param   string $value2
     * @return  string
     */",
 "/**
     * Honors that some SQL vendors such as MsSql use table hints for locking instead of the ANSI SQL FOR UPDATE specification.
     *
     * @param  string $fromClause
     * @param  int $lockMode
     * @return string
     */",
 "/**
     * Get the sql snippet to append to any SELECT statement which locks rows in shared read lock.
     *
     * This defaults to the ASNI SQL \"FOR UPDATE\", which is an exclusive lock (Write). Some database
     * vendors allow to lighten this constraint up to be a real read lock.
     *
     * @return string
     */",
 "/**
     * Get the SQL snippet to append to any SELECT statement which obtains an exclusive lock on the rows.
     *
     * The semantics of this lock mode should equal the SELECT .. FOR UPDATE of the ASNI SQL standard.
     *
     * @return string
     */",
 "/**
     * Drop a Table
     *
     * @throws \InvalidArgumentException
     * @param  Table|string $table
     * @return string
     */",
 "/**
     * Get SQL to safely drop a temporary table WITHOUT implicitly committing an open transaction.
     *
     * @param Table|string $table
     * @return string
     */",
 "/**
     * Drop index from a table
     *
     * @param Index|string $name
     * @param string|Table $table
     * @return string
     */",
 "/**
     * Get drop constraint sql
     *
     * @param  \Doctrine\DBAL\Schema\Constraint $constraint
     * @param  string|Table $table
     * @return string
     */",
 "/**
     * @param  ForeignKeyConstraint|string $foreignKey
     * @param  Table|string $table
     * @return string
     */",
 "/**
     * Gets the SQL statement(s) to create a table with the specified name, columns and constraints
     * on this platform.
     *
     * @param string $table The name of the table.
     * @param int $createFlags
     * @return array The sequence of SQL statements.
     */",
 "/**
     * @param string $tableName
     * @param array $columns
     * @param array $options
     * @return array
     */",
 "/**
     * Gets the SQL to create a sequence on this platform.
     *
     * @param \Doctrine\DBAL\Schema\Sequence $sequence
     * @throws DBALException
     */",
 "/**
     * Gets the SQL statement to change a sequence on this platform.
     *
     * @param \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * Gets the SQL to create a constraint on a table on this platform.
     *
     * @param Constraint $constraint
     * @param string|Table $table
     * @return string
     */",
 "/**
     * Gets the SQL to create an index on a table on this platform.
     *
     * @param Index $index
     * @param string|Table $table name of the table on which the index is to be created
     * @return string
     */",
 "/**
     * Get SQL to create an unnamed primary key constraint.
     *
     * @param Index $index
     * @param string|Table $table
     * @return string
     */",
 "/**
     * Quotes a string so that it can be safely used as a table or column name,
     * even if it is a reserved word of the platform. This also detects identifier
     * chains seperated by dot and quotes them independently.
     *
     * NOTE: Just because you CAN use quoted identifiers doesn't mean
     * you SHOULD use them.  In general, they end up causing way more
     * problems than they solve.
     *
     * @param string $str           identifier name to be quoted
     * @return string               quoted identifier string
     */",
 "/**
     * Quote a single identifier (no dot chain seperation)
     *
     * @param string $str
     * @return string
     */",
 "/**
     * Create a new foreign key
     *
     * @param ForeignKeyConstraint  $foreignKey    ForeignKey instance
     * @param string|Table          $table         name of the table on which the foreign key is to be created
     * @return string
     */",
 "/**
     * Gets the sql statements for altering an existing table.
     *
     * The method returns an array of sql statements, since some platforms need several statements.
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * @param Column $column
     * @param TableDiff $diff
     * @param array $columnSql
     */",
 "/**
     * @param Column $column
     * @param TableDiff $diff
     * @param array $columnSql
     */",
 "/**
     * @param ColumnDiff $columnDiff
     * @param TableDiff $diff
     * @param array $columnSql
     */",
 "/**
     * @param string $oldColumnName
     * @param Column $column
     * @param TableDiff $diff
     * @param array $columnSql
     */",
 "/**
     * @param TableDiff $diff
     * @param array $columnSql
     */",
 "/**
     * Common code for alter table statement generation that updates the changed Index and Foreign Key definitions.
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * Get declaration of a number of fields in bulk
     *
     * @param array $fields  a multidimensional associative array.
     *      The first dimension determines the field name, while the second
     *      dimension is keyed with the name of the properties
     *      of the field being declared as array indexes. Currently, the types
     *      of supported field properties are as follows:
     *
     *      length
     *          Integer value that determines the maximum length of the text
     *          field. If this argument is missing the field should be
     *          declared to have the longest length allowed by the DBMS.
     *
     *      default
     *          Text value to be used as default for this field.
     *
     *      notnull
     *          Boolean flag that indicates whether this field is constrained
     *          to not be set to null.
     *      charset
     *          Text value with the default CHARACTER SET for this field.
     *      collation
     *          Text value with the default COLLATION for this field.
     *      unique
     *          unique constraint
     *
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to declare a generic type
     * field to be used in statements like CREATE TABLE.
     *
     * @param string $name   name the field to be declared.
     * @param array  $field  associative array with the name of the properties
     *      of the field being declared as array indexes. Currently, the types
     *      of supported field properties are as follows:
     *
     *      length
     *          Integer value that determines the maximum length of the text
     *          field. If this argument is missing the field should be
     *          declared to have the longest length allowed by the DBMS.
     *
     *      default
     *          Text value to be used as default for this field.
     *
     *      notnull
     *          Boolean flag that indicates whether this field is constrained
     *          to not be set to null.
     *      charset
     *          Text value with the default CHARACTER SET for this field.
     *      collation
     *          Text value with the default COLLATION for this field.
     *      unique
     *          unique constraint
     *      check
     *          column check constraint
     *      columnDefinition
     *          a string that defines the complete column
     *
     * @return string  DBMS specific SQL code portion that should be used to declare the column.
     */",
 "/**
     * Gets the SQL snippet that declares a floating point column of arbitrary precision.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set a default value
     * declaration to be used in statements like CREATE TABLE.
     *
     * @param array $field      field definition array
     * @return string           DBMS specific SQL code portion needed to set a default value
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set a CHECK constraint
     * declaration to be used in statements like CREATE TABLE.
     *
     * @param array $definition     check definition
     * @return string               DBMS specific SQL code portion needed to set a CHECK constraint
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set a unique
     * constraint declaration to be used in statements like CREATE TABLE.
     *
     * @param string $name          name of the unique constraint
     * @param Index $index          index definition
     * @return string               DBMS specific SQL code portion needed
     *                              to set a constraint
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set an index
     * declaration to be used in statements like CREATE TABLE.
     *
     * @param string $name          name of the index
     * @param Index $index          index definition
     * @return string               DBMS specific SQL code portion needed to set an index
     */",
 "/**
     * getCustomTypeDeclarationSql
     * Obtail SQL code portion needed to create a custom column,
     * e.g. when a field has the \"columnDefinition\" keyword.
     * Only \"AUTOINCREMENT\" and \"PRIMARY KEY\" are added if appropriate.
     *
     * @return string
     */",
 "/**
     * getIndexFieldDeclarationList
     * Obtain DBMS specific SQL code portion needed to set an index
     * declaration to be used in statements like CREATE TABLE.
     *
     * @return string
     */",
 "/**
     * A method to return the required SQL string that fits between CREATE ... TABLE
     * to create the table as a temporary table.
     *
     * Should be overridden in driver classes to return the correct string for the
     * specific database type.
     *
     * The default is to return the string \"TEMPORARY\" - this will result in a
     * SQL error for any database that does not support temporary tables, or that
     * requires a different SQL command from \"CREATE TEMPORARY TABLE\".
     *
     * @return string The string required to be placed between \"CREATE\" and \"TABLE\"
     *                to generate a temporary table, if possible.
     */",
 "/**
     * Some vendors require temporary table names to be qualified specially.
     *
     * @param  string $tableName
     * @return string
     */",
 "/**
     * Get sql query to show a list of database.
     *
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the FOREIGN KEY constraint
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param array $definition         an associative array with the following structure:
     *          name                    optional constraint name
     *
     *          local                   the local field(s)
     *
     *          foreign                 the foreign reference field(s)
     *
     *          foreignTable            the name of the foreign table
     *
     *          onDelete                referential delete action
     *
     *          onUpdate                referential update action
     *
     *          deferred                deferred constraint checking
     *
     * The onDelete and onUpdate keys accept the following values:
     *
     * CASCADE: Delete or update the row from the parent table and automatically delete or
     *          update the matching rows in the child table. Both ON DELETE CASCADE and ON UPDATE CASCADE are supported.
     *          Between two tables, you should not define several ON UPDATE CASCADE clauses that act on the same column
     *          in the parent table or in the child table.
     *
     * SET NULL: Delete or update the row from the parent table and set the foreign key column or columns in the
     *          child table to NULL. This is valid only if the foreign key columns do not have the NOT NULL qualifier
     *          specified. Both ON DELETE SET NULL and ON UPDATE SET NULL clauses are supported.
     *
     * NO ACTION: In standard SQL, NO ACTION means no action in the sense that an attempt to delete or update a primary
     *           key value is not allowed to proceed if there is a related foreign key value in the referenced table.
     *
     * RESTRICT: Rejects the delete or update operation for the parent table. NO ACTION and RESTRICT are the same as
     *           omitting the ON DELETE or ON UPDATE clause.
     *
     * SET DEFAULT
     *
     * @return string  DBMS specific SQL code portion needed to set the FOREIGN KEY constraint
     *                 of a field declaration.
     */",
 "/**
     * Return the FOREIGN KEY query section dealing with non-standard options
     * as MATCH, INITIALLY DEFERRED, ON UPDATE, ...
     *
     * @param ForeignKeyConstraint $foreignKey     foreign key definition
     * @return string
     */",
 "/**
     * returns given referential action in uppercase if valid, otherwise throws
     * an exception
     *
     * @throws Doctrine_Exception_Exception     if unknown referential action given
     * @param string $action    foreign key referential action
     * @param string            foreign key referential action in uppercase
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the FOREIGN KEY constraint
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param ForeignKeyConstraint $foreignKey
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the UNIQUE constraint
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @return string  DBMS specific SQL code portion needed to set the UNIQUE constraint
     *                 of a field declaration.
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the CHARACTER SET
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param string $charset   name of the charset
     * @return string  DBMS specific SQL code portion needed to set the CHARACTER SET
     *                 of a field declaration.
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the COLLATION
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param string $collation   name of the collation
     * @return string  DBMS specific SQL code portion needed to set the COLLATION
     *                 of a field declaration.
     */",
 "/**
     * Whether the platform prefers sequences for ID generation.
     * Subclasses should override this method to return TRUE if they prefer sequences.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform prefers identity columns (eg. autoincrement) for ID generation.
     * Subclasses should override this method to return TRUE if they prefer identity columns.
     *
     * @return boolean
     */",
 "/**
     * Some platforms need the boolean values to be converted.
     *
     * The default conversion in this implementation converts to integers (false => 0, true => 1).
     *
     * @param mixed $item
     */",
 "/**
     * Gets the SQL statement specific for the platform to set the charset.
     *
     * This function is MySQL specific and required by
     * {@see \Doctrine\DBAL\Connection::setCharset($charset)}
     *
     * @param string $charset
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current date.
     *
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current time.
     *
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current timestamp
     *
     * @return string
     */",
 "/**
     * Get sql for transaction isolation level Connection constant
     *
     * @param integer $level
     */",
 "/**
     * Get the SQL to list all views of a database or user.
     *
     * @param string $database
     * @return string
     */",
 "/**
     * Get the list of indexes for the current database.
     *
     * The current database parameter is optional but will always be passed
     * when using the SchemaManager API and is the database the given table is in.
     *
     * Attention: Some platforms only support currentDatabase when they
     * are connected with that database. Cross-database information schema
     * requests may be impossible.
     *
     * @param string $table
     * @param string $currentDatabase
     */",
 "/**
     * Get sql to set the transaction isolation level
     *
     * @param integer $level
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create datetime fields in
     * statements like CREATE TABLE
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create datetime with timezone offset fields.
     *
     * @param array $fieldDeclaration
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create date fields in statements
     * like CREATE TABLE.
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create time fields in statements
     * like CREATE TABLE.
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Gets the default transaction isolation level of the platform.
     *
     * @return integer The default isolation level.
     * @see Doctrine\DBAL\Connection\TRANSACTION_* constants.
     */",
 "/**
     * Whether the platform supports sequences.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports identity columns.
     * Identity columns are columns that recieve an auto-generated value from the
     * database on insert of a row.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports indexes.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports transactions.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports savepoints.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports releasing savepoints.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports primary key constraints.
     *
     * @return boolean
     */",
 "/**
     * Does the platform supports foreign key constraints?
     *
     * @return boolean
     */",
 "/**
     * Does this platform supports onUpdate in foreign key constraints?
     *
     * @return bool
     */",
 "/**
     * Whether the platform supports database schemas.
     *
     * @return boolean
     */",
 "/**
     * Can this platform emulate schemas?
     *
     * Platforms that either support or emulate schemas don't automatically
     * filter a schema for the namespaced elements in {@link
     * AbstractManager#createSchema}.
     *
     * @return bool
     */",
 "/**
     * Some databases don't allow to create and drop databases at all or only with certain tools.
     *
     * @return bool
     */",
 "/**
     * Whether the platform supports getting the affected rows of a recent
     * update/delete type query.
     *
     * @return boolean
     */",
 "/**
     * Does this plaform support to add inline column comments as postfix.
     *
     * @return bool
     */",
 "/**
     * Does this platform support the propriortary synatx \"COMMENT ON asset\"
     *
     * @return bool
     */",
 "/**
     * Gets the format string, as accepted by the date() function, that describes
     * the format of a stored datetime value of this platform.
     *
     * @return string The format string.
     */",
 "/**
     * Gets the format string, as accepted by the date() function, that describes
     * the format of a stored datetime with timezone value of this platform.
     *
     * @return string The format string.
     */",
 "/**
     * Gets the format string, as accepted by the date() function, that describes
     * the format of a stored date value of this platform.
     *
     * @return string The format string.
     */",
 "/**
     * Gets the format string, as accepted by the date() function, that describes
     * the format of a stored time value of this platform.
     *
     * @return string The format string.
     */",
 "/**
     * Modify limit query
     *
     * @param string $query
     * @param int $limit
     * @param int $offset
     * @return string
     */",
 "/**
     * @param string $query
     * @param int $limit
     * @param int $offset
     * @return string
     */",
 "/**
     * Does the database platform support offsets in modify limit clauses?
     *
     * @return bool
     */",
 "/**
     * Gets the character casing of a column in an SQL result set of this platform.
     *
     * @param string $column The column name for which to get the correct character casing.
     * @return string The column name in the character casing used in SQL result sets.
     */",
 "/**
     * Makes any fixes to a name of a schema element (table, sequence, ...) that are required
     * by restrictions of the platform, like a maximum length.
     *
     * @param string $schemaName
     * @return string
     */",
 "/**
     * Maximum length of any given databse identifier, like tables or column names.
     *
     * @return int
     */",
 "/**
     * Get the insert sql for an empty insert statement
     *
     * @param string $tableName
     * @param string $identifierColumnName
     * @return string $sql
     */",
 "/**
     * Generate a Truncate Table SQL statement for a given table.
     *
     * Cascade is not supported on many platforms but would optionally cascade the truncate by
     * following the foreign keys.
     *
     * @param  string $tableName
     * @param  bool $cascade
     * @return string
     */",
 "/**
     * This is for test reasons, many vendors have special requirements for dummy statements.
     *
     * @return string
     */",
 "/**
     * Generate SQL to create a new savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Generate SQL to release a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Generate SQL to rollback a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Return the keyword list instance of this platform.
     *
     * Throws exception if no keyword list is specified.
     *
     * @throws DBALException
     * @return KeywordList
     */",
 "/**
     * The class name of the reserved keywords list.
     *
     * @return string
     */",
 "/**
 * Base class for all DatabasePlatforms. The DatabasePlatforms are the central
 * point of abstraction of platform-specific behaviors, features and SQL dialects.
 * They are a passive source of information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Remove any unnecessary methods.
 */",
 "/**
     * Set the object manager responsible for all persistent object base classes.
     *
     * @param ObjectManager $objectManager
     */",
 "/**
     * @return ObjectManager
     */",
 "/**
     * Inject Doctrine Object Manager
     *
     * @param ObjectManager $objectManager
     * @param ClassMetadata $classMetadata
     */",
 "/**
     * Sets a persistent fields value.
     *
     * @throws InvalidArgumentException - When the wrong target object type is passed to an association
     * @throws BadMethodCallException - When no persistent field exists by that name.
     * @param string $field
     * @param array $args
     * @return void
     */",
 "/**
     * Get persistent field value.
     *
     * @throws BadMethodCallException - When no persistent field exists by that name.
     * @param string $field
     * @return mixed
     */",
 "/**
     * If this is an inverse side association complete the owning side.
     *
     * @param string $field
     * @param ClassMetadata $targetClass
     * @param object $targetObject
     */",
 "/**
     * Add an object to a collection
     *
     * @param type $field
     * @param assoc $args
     */",
 "/**
     * Initialize Doctrine Metadata for this class.
     *
     * @return void
     */",
 "/**
     * Magic method that implements
     *
     * @param string $method
     * @param array $args
     * @return mixed
     */",
 "/**
 * PersistentObject base class that implements getter/setter methods for all mapped fields and associations
 * by overriding __call.
 *
 * This class is a forward compatible implementation of the PersistentObject trait.
 *
 *
 * Limitations:
 *
 * 1. All persistent objects have to be associated with a single ObjectManager, multiple
 *    ObjectManagers are not supported. You can set the ObjectManager with `PersistentObject#setObjectManager()`.
 * 2. Setters and getters only work if a ClassMetadata instance was injected into the PersistentObject.
 *    This is either done on `postLoad` of an object or by accessing the global object manager.
 * 3. There are no hooks for setters/getters. Just implement the method yourself instead of relying on __call().
 * 4. Slower than handcoded implementations: An average of 7 method calls per access to a field and 11 for an association.
 * 5. Only the inverse side associations get autoset on the owning side aswell. Setting objects on the owning side
 *    will not set the inverse side associations.
 *
 * @example
 *
 *  PersistentObject::setObjectManager($em);
 *
 *  class Foo extends PersistentObject
 *  {
 *      private $id;
 *  }
 *
 *  $foo = new Foo();
 *  $foo->getId(); // method exists through __call
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Doctrine\DBAL\ConnectionException
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.0
 * @version     $Revision: 4628 $
 * @author      Jonathan H. Wage <jonwage@gmail.com
 */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Hydrator that produces flat, rectangular results of scalar data.
 * The created result is almost the same as a regular SQL result set, except
 * that column names are mapped to field names and data type conversions take place.
 *
 * @since  2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 */",
 "/** @override */",
 "/** @override */",
 "/** @override */",
 "/**
 * Type that maps an SQL VARCHAR to a PHP string.
 *
 * @since 2.0
 */",
 "/**
     * Constructor
     *
     * @param Connection $connection Doctrine Database Connection
     */",
 "/**
     * Retrieves Doctrine ORM EntityManager
     *
     * @return EntityManager
     */",
 "/**
     * @see Helper
     */",
 "/**
 * Doctrine CLI Connection Helper.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param string $tableName
     * @return SchemaException
     */",
 "/**
     * @param string $indexName
     * @return SchemaException
     */",
 "/**
     * @param string $indexName
     * @return SchemaException
     */",
 "/**
     * @param string $indexName
     * @return SchemaException
     */",
 "/**
     * @param string $columnName
     * @return SchemaException
     */",
 "/**
     *
     * @param  string $tableName
     * @return SchemaException
     */",
 "/**
     *
     * @param string $tableName
     * @param string $columnName
     * @return SchemaException
     */",
 "/**
     * @param string $sequenceName
     * @return SchemaException
     */",
 "/**
     * @param string $sequenceName
     * @return SchemaException
     */",
 "/**
     * @param  string $fkName
     * @return SchemaException
     */",
 "/**
     * Constructs a new DocParser.
     */",
 "/**
     * Sets the annotation names that are ignored during the parsing process.
     *
     * The names are supposed to be the raw names as used in the class, not the
     * fully qualified class names.
     *
     * @param array $names
     */",
 "/**
     * Sets the default namespaces.
     * @param array $namespaces
     */",
 "/**
     * Sets current target context as bitmask.
     *
     * @param integer $target
     */",
 "/**
     * Parses the given docblock string for annotations.
     *
     * @param string $input The docblock string to parse.
     * @param string $context The parsing context.
     * @return array Array of annotations. If no annotations are found, an empty array is returned.
     */",
 "/**
     * Attempts to match the given token with the current lookahead token.
     * If they match, updates the lookahead token; otherwise raises a syntax error.
     *
     * @param int Token type.
     * @return bool True if tokens match; false otherwise.
     */",
 "/**
     * Attempts to match the current lookahead token with any of the given tokens.
     *
     * If any of them matches, this method updates the lookahead token; otherwise
     * a syntax error is raised.
     *
     * @param array $tokens
     * @return bool
     */",
 "/**
     * Generates a new syntax error.
     *
     * @param string $expected Expected string.
     * @param array $token Optional token.
     * @throws SyntaxException
     */",
 "/**
     * Attempt to check if a class exists or not. This never goes through the PHP autoloading mechanism
     * but uses the {@link AnnotationRegistry} to load classes.
     *
     * @param string $fqcn
     * @return boolean
     */",
 "/**
     * Collects parsing metadata for a given annotation class
     *
     * @param   string $name        The annotation name
     */",
 "/**
     * Annotations ::= Annotation {[ \"*\" ]* [Annotation]}*
     *
     * @return array
     */",
 "/**
     * Annotation     ::= \"@\" AnnotationName [\"(\" [Values] \")\"]
     * AnnotationName ::= QualifiedName | SimpleName
     * QualifiedName  ::= NameSpacePart \"\\\" {NameSpacePart \"\\\"}* SimpleName
     * NameSpacePart  ::= identifier | null | false | true
     * SimpleName     ::= identifier | null | false | true
     *
     * @return mixed False if it is not a valid annotation.
     */",
 "/**
     * Values ::= Array | Value {\",\" Value}*
     *
     * @return array
     */",
 "/**
     * Value ::= PlainValue | FieldAssignment
     *
     * @return mixed
     */",
 "/**
     * PlainValue ::= integer | string | float | boolean | Array | Annotation
     *
     * @return mixed
     */",
 "/**
     * FieldAssignment ::= FieldName \"=\" PlainValue
     * FieldName ::= identifier
     *
     * @return array
     */",
 "/**
     * Array ::= \"{\" ArrayEntry {\",\" ArrayEntry}* [\",\"] \"}\"
     *
     * @return array
     */",
 "/**
     * ArrayEntry ::= Value | KeyValuePair
     * KeyValuePair ::= Key (\"=\" | \":\") PlainValue
     * Key ::= string | integer
     *
     * @return array
     */",
 "/**
 * A parser for docblock annotations.
 *
 * It is strongly discouraged to change the default annotation parsing process.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 * @author Fabio B. Silva <fabio.bat.silva@gmail.com>
 */",
 "/**
     * Gets the SQL query/queries that correspond to this DQL query.
     *
     * @return mixed The built sql query or an array of all sql queries.
     * @override
     */",
 "/**
     * Returns the corresponding AST for this DQL query.
     *
     * @return \Doctrine\ORM\Query\AST\SelectStatement |
     *         \Doctrine\ORM\Query\AST\\UpdateStatement |
     *         \Doctrine\ORM\Query\AST\DeleteStatement
     */",
 "/**
     * Parses the DQL query, if necessary, and stores the parser result.
     *
     * Note: Populates $this->_parserResult as a side-effect.
     *
     * @return \Doctrine\ORM\Query\ParserResult
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Processes query parameter mappings
     *
     * @param array $paramMappings
     * @return array
     */",
 "/**
     * Defines a cache driver to be used for caching queries.
     *
     * @param Doctrine_Cache_Interface|null $driver Cache driver
     * @return Query This query instance.
     */",
 "/**
     * Defines whether the query should make use of a query cache, if available.
     *
     * @param boolean $bool
     * @return @return Query This query instance.
     */",
 "/**
     * Returns the cache driver used for query caching.
     *
     * @return CacheDriver The cache driver used for query caching or NULL, if this
     * 					   Query does not use query caching.
     */",
 "/**
     * Defines how long the query cache will be active before expire.
     *
     * @param integer $timeToLive How long the cache entry is valid
     * @return Query This query instance.
     */",
 "/**
     * Retrieves the lifetime of resultset cache.
     *
     * @return int
     */",
 "/**
     * Defines if the query cache is active or not.
     *
     * @param boolean $expire Whether or not to force query cache expiration.
     * @return Query This query instance.
     */",
 "/**
     * Retrieves if the query cache is active or not.
     *
     * @return bool
     */",
 "/**
     * @override
     */",
 "/**
     * Sets a DQL query string.
     *
     * @param string $dqlQuery DQL Query
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Returns the DQL query that is represented by this query object.
     *
     * @return string DQL query
     */",
 "/**
     * Returns the state of this query object
     * By default the type is Doctrine_ORM_Query_Abstract::STATE_CLEAN but if it appears any unprocessed DQL
     * part, it is switched to Doctrine_ORM_Query_Abstract::STATE_DIRTY.
     *
     * @see AbstractQuery::STATE_CLEAN
     * @see AbstractQuery::STATE_DIRTY
     *
     * @return integer Return the query state
     */",
 "/**
     * Method to check if an arbitrary piece of DQL exists
     *
     * @param string $dql Arbitrary piece of DQL to check for
     * @return boolean
     */",
 "/**
     * Sets the position of the first result to retrieve (the \"offset\").
     *
     * @param integer $firstResult The first result to return.
     * @return Query This query object.
     */",
 "/**
     * Gets the position of the first result the query object was set to retrieve (the \"offset\").
     * Returns NULL if {@link setFirstResult} was not applied to this query.
     *
     * @return integer The position of the first result.
     */",
 "/**
     * Sets the maximum number of results to retrieve (the \"limit\").
     *
     * @param integer $maxResults
     * @return Query This query object.
     */",
 "/**
     * Gets the maximum number of results the query object was set to retrieve (the \"limit\").
     * Returns NULL if {@link setMaxResults} was not applied to this query.
     *
     * @return integer Maximum number of results.
     */",
 "/**
     * Executes the query and returns an IterableResult that can be used to incrementally
     * iterated over the result.
     *
     * @param array $params The query parameters.
     * @param integer $hydrationMode The hydration mode to use.
     * @return \Doctrine\ORM\Internal\Hydration\IterableResult
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Set the lock mode for this Query.
     *
     * @see \Doctrine\DBAL\LockMode
     * @param  int $lockMode
     * @return Query
     */",
 "/**
     * Get the current lock mode for this query.
     *
     * @return int
     */",
 "/**
     * Generate a cache id for the query cache - reusing the Result-Cache-Id generator.
     *
     * The query cache
     *
     * @return string
     */",
 "/**
     * Cleanup Query resource when clone is called.
     *
     * @return void
     */",
 "/**
 * A Query object represents a DQL query.
 *
 * @since   1.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Type that maps an SQL TIME to a PHP DateTime object.
 *
 * @since 2.0
 */",
 "/**
     * Initializes a new instance of a class derived from <tt>AbstractQuery</tt>.
     *
     * @param \Doctrine\ORM\EntityManager $entityManager
     */",
 "/**
     * Retrieves the associated EntityManager of this Query instance.
     *
     * @return \Doctrine\ORM\EntityManager
     */",
 "/**
     * Frees the resources used by the query object.
     *
     * Resets Parameters, Parameter Types and Query Hints.
     *
     * @return void
     */",
 "/**
     * Get all defined parameters.
     *
     * @return array The defined query parameters.
     */",
 "/**
     * Get all defined parameter types.
     *
     * @return array The defined query parameter types.
     */",
 "/**
     * Gets a query parameter.
     *
     * @param mixed $key The key (index or name) of the bound parameter.
     * @return mixed The value of the bound parameter.
     */",
 "/**
     * Gets a query parameter type.
     *
     * @param mixed $key The key (index or name) of the bound parameter.
     * @return mixed The parameter type of the bound parameter.
     */",
 "/**
     * Gets the SQL query that corresponds to this query object.
     * The returned SQL syntax depends on the connection driver that is used
     * by this query object at the time of this method call.
     *
     * @return string SQL query
     */",
 "/**
     * Sets a query parameter.
     *
     * @param string|integer $key The parameter position or name.
     * @param mixed $value The parameter value.
     * @param string $type The parameter type. If specified, the given value will be run through
     *                     the type conversion of this type. This is usually not needed for
     *                     strings and numeric types.
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Process an individual parameter value
     *
     * @param mixed $value
     * @return array
     */",
 "/**
     * Sets a collection of query parameters.
     *
     * @param array $params
     * @param array $types
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Sets the ResultSetMapping that should be used for hydration.
     *
     * @param ResultSetMapping $rsm
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Set a cache profile for hydration caching.
     *
     * If no result cache driver is set in the QueryCacheProfile, the default
     * result cache driver is used from the configuration.
     *
     * Important: Hydration caching does NOT register entities in the
     * UnitOfWork when retrieved from the cache. Never use result cached
     * entities for requests that also flush the EntityManager. If you want
     * some form of caching with UnitOfWork registration you should use
     * {@see AbstractQuery::setResultCacheProfile()}.
     *
     * @example
     * $lifetime = 100;
     * $resultKey = \"abc\";
     * $query->setHydrationCacheProfile(new QueryCacheProfile());
     * $query->setHydrationCacheProfile(new QueryCacheProfile($lifetime, $resultKey));
     *
     * @param \Doctrine\DBAL\Cache\QueryCacheProfile $profile
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * @return \Doctrine\DBAL\Cache\QueryCacheProfile
     */",
 "/**
     * Set a cache profile for the result cache.
     *
     * If no result cache driver is set in the QueryCacheProfile, the default
     * result cache driver is used from the configuration.
     *
     * @param \Doctrine\DBAL\Cache\QueryCacheProfile $profile
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Defines a cache driver to be used for caching result sets and implictly enables caching.
     *
     * @param \Doctrine\Common\Cache\Cache $driver Cache driver
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Returns the cache driver used for caching result sets.
     *
     * @deprecated
     * @return \Doctrine\Common\Cache\Cache Cache driver
     */",
 "/**
     * Set whether or not to cache the results of this query and if so, for
     * how long and which ID to use for the cache entry.
     *
     * @param boolean $bool
     * @param integer $lifetime
     * @param string $resultCacheId
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Defines how long the result cache will be active before expire.
     *
     * @param integer $lifetime How long the cache entry is valid.
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Retrieves the lifetime of resultset cache.
     *
     * @deprecated
     * @return integer
     */",
 "/**
     * Defines if the result cache is active or not.
     *
     * @param boolean $expire Whether or not to force resultset cache expiration.
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Retrieves if the resultset cache is active or not.
     *
     * @return boolean
     */",
 "/**
     * @return QueryCacheProfile
     */",
 "/**
     * Change the default fetch mode of an association for this query.
     *
     * $fetchMode can be one of ClassMetadata::FETCH_EAGER or ClassMetadata::FETCH_LAZY
     *
     * @param  string $class
     * @param  string $assocName
     * @param  int $fetchMode
     * @return AbstractQuery
     */",
 "/**
     * Defines the processing mode to be used during hydration / result set transformation.
     *
     * @param integer $hydrationMode Doctrine processing mode to be used during hydration process.
     *                               One of the Query::HYDRATE_* constants.
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Gets the hydration mode currently used by the query.
     *
     * @return integer
     */",
 "/**
     * Gets the list of results for the query.
     *
     * Alias for execute(array(), $hydrationMode = HYDRATE_OBJECT).
     *
     * @return array
     */",
 "/**
     * Gets the array of results for the query.
     *
     * Alias for execute(array(), HYDRATE_ARRAY).
     *
     * @return array
     */",
 "/**
     * Gets the scalar results for the query.
     *
     * Alias for execute(array(), HYDRATE_SCALAR).
     *
     * @return array
     */",
 "/**
     * Get exactly one result or null.
     *
     * @throws NonUniqueResultException
     * @param int $hydrationMode
     * @return mixed
     */",
 "/**
     * Gets the single result of the query.
     *
     * Enforces the presence as well as the uniqueness of the result.
     *
     * If the result is not unique, a NonUniqueResultException is thrown.
     * If there is no result, a NoResultException is thrown.
     *
     * @param integer $hydrationMode
     * @return mixed
     * @throws NonUniqueResultException If the query result is not unique.
     * @throws NoResultException If the query returned no result.
     */",
 "/**
     * Gets the single scalar result of the query.
     *
     * Alias for getSingleResult(HYDRATE_SINGLE_SCALAR).
     *
     * @return mixed
     * @throws QueryException If the query result is not unique.
     */",
 "/**
     * Sets a query hint. If the hint name is not recognized, it is silently ignored.
     *
     * @param string $name The name of the hint.
     * @param mixed $value The value of the hint.
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Gets the value of a query hint. If the hint name is not recognized, FALSE is returned.
     *
     * @param string $name The name of the hint.
     * @return mixed The value of the hint or FALSE, if the hint name is not recognized.
     */",
 "/**
     * Return the key value map of query hints that are currently set.
     *
     * @return array
     */",
 "/**
     * Executes the query and returns an IterableResult that can be used to incrementally
     * iterate over the result.
     *
     * @param array $params The query parameters.
     * @param integer $hydrationMode The hydration mode to use.
     * @return \Doctrine\ORM\Internal\Hydration\IterableResult
     */",
 "/**
     * Executes the query.
     *
     * @param array $params Any additional query parameters.
     * @param integer $hydrationMode Processing mode to be used during the hydration process.
     * @return mixed
     */",
 "/**
     * Get the result cache id to use to store the result set cache entry.
     * Will return the configured id if it exists otherwise a hash will be
     * automatically generated for you.
     *
     * @return array ($key, $hash)
     */",
 "/**
     * Set the result cache id to use to store the result set cache entry.
     * If this is not explicitely set by the developer then a hash is automatically
     * generated for you.
     *
     * @param string $id
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Get the result cache id to use to store the result set cache entry if set.
     *
     * @deprecated
     * @return string
     */",
 "/**
     * Executes the query and returns a the resulting Statement object.
     *
     * @return \Doctrine\DBAL\Driver\Statement The executed database statement that holds the results.
     */",
 "/**
     * Cleanup Query resource when clone is called.
     *
     * @return void
     */",
 "/**
 * Base contract for ORM queries. Base class for Query and NativeQuery.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Konsta Vesterinen <kvesteri@cc.hut.fi>
 */",
 "/**
 * NullComparisonExpression ::= (SingleValuedPathExpression | InputParameter) \"IS\" [\"NOT\"] \"NULL\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Initializes TreeWalker with important information about the ASTs to be walked
     *
     * @param Query $query The parsed Query.
     * @param ParserResult $parserResult The result of the parsing process.
     * @param array $queryComponents Query components (symbol table)
     */",
 "/**
     * Walks down a SelectStatement AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FromClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FunctionNode AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByClause AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByItem AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a HavingClause AST node, thereby generating the appropriate SQL.
     *
     * @param HavingClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a JoinVariableDeclaration AST node and creates the corresponding SQL.
     *
     * @param JoinVariableDeclaration $joinVarDecl
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectExpression AST node and generates the corresponding SQL.
     *
     * @param SelectExpression $selectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a QuantifiedExpression AST node, thereby generating the appropriate SQL.
     *
     * @param QuantifiedExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a Subselect AST node, thereby generating the appropriate SQL.
     *
     * @param Subselect
     * @return string The SQL.
     */",
 "/**
     * Walks down a SubselectFromClause AST node, thereby generating the appropriate SQL.
     *
     * @param SubselectFromClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an AggregateExpression AST node, thereby generating the appropriate SQL.
     *
     * @param AggregateExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByClause AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByItem AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateStatement AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteStatement AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteClause AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateClause AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateItem AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a WhereClause AST node, thereby generating the appropriate SQL.
     *
     * @param WhereClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalTerm AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalTerm
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalFactor AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalFactor
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalPrimary AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalPrimary
     * @return string The SQL.
     */",
 "/**
     * Walks down an ExistsExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ExistsExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CollectionMemberExpression AST node, thereby generating the appropriate SQL.
     *
     * @param CollectionMemberExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an EmptyCollectionComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param EmptyCollectionComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param NullComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InstanceOfExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InstanceOfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a literal that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a BetweenExpression AST node, thereby generating the appropriate SQL.
     *
     * @param BetweenExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a LikeExpression AST node, thereby generating the appropriate SQL.
     *
     * @param LikeExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a StateFieldPathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param StateFieldPathExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InputParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InputParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticTerm AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a StringPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticFactor that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an SimpleArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an PathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ResultVariable AST node, thereby generating the appropriate SQL.
     *
     * @param string $resultVariable
     * @return string The SQL.
     */",
 "/**
     * Gets an executor that can be used to execute the result of this walker.
     *
     * @return AbstractExecutor
     */",
 "/**
 * Interface for walkers of DQL ASTs (abstract syntax trees).
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @param Statement $stmt
     * @param Cache $resultCache
     * @param string $cacheKey
     * @param string $realKey
     * @param int $lifetime
     */",
 "/**
     * Closes the cursor, enabling the statement to be executed again.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * columnCount
     * Returns the number of columns in the result set
     *
     * @return integer              Returns the number of columns in the result set represented
     *                              by the PDOStatement object. If there is no result set,
     *                              this method should return 0.
     */",
 "/**
     * fetch
     *
     * @see Query::HYDRATE_* constants
     * @param integer $fetchStyle           Controls how the next row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_* constants,
     *                                      defaulting to Query::HYDRATE_BOTH
     *
     * @param integer $cursorOrientation    For a PDOStatement object representing a scrollable cursor,
     *                                      this value determines which row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_ORI_* constants, defaulting to
     *                                      Query::HYDRATE_ORI_NEXT. To request a scrollable cursor for your
     *                                      PDOStatement object,
     *                                      you must set the PDO::ATTR_CURSOR attribute to Doctrine::CURSOR_SCROLL when you
     *                                      prepare the SQL statement with Doctrine_Adapter_Interface->prepare().
     *
     * @param integer $cursorOffset         For a PDOStatement object representing a scrollable cursor for which the
     *                                      $cursorOrientation parameter is set to Query::HYDRATE_ORI_ABS, this value specifies
     *                                      the absolute number of the row in the result set that shall be fetched.
     *
     *                                      For a PDOStatement object representing a scrollable cursor for
     *                                      which the $cursorOrientation parameter is set to Query::HYDRATE_ORI_REL, this value
     *                                      specifies the row to fetch relative to the cursor position before
     *                                      PDOStatement->fetch() was called.
     *
     * @return mixed
     */",
 "/**
     * Returns an array containing all of the result set rows
     *
     * @param integer $fetchStyle           Controls how the next row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_* constants,
     *                                      defaulting to Query::HYDRATE_BOTH
     *
     * @param integer $columnIndex          Returns the indicated 0-indexed column when the value of $fetchStyle is
     *                                      Query::HYDRATE_COLUMN. Defaults to 0.
     *
     * @return array
     */",
 "/**
     * fetchColumn
     * Returns a single column from the next row of a
     * result set or FALSE if there are no more rows.
     *
     * @param integer $columnIndex          0-indexed number of the column you wish to retrieve from the row. If no
     *                                      value is supplied, PDOStatement->fetchColumn()
     *                                      fetches the first column.
     *
     * @return string                       returns a single column in the next row of a result set.
     */",
 "/**
     * rowCount
     * rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement
     * executed by the corresponding object.
     *
     * If the last SQL statement executed by the associated Statement object was a SELECT statement,
     * some databases may return the number of rows returned by that statement. However,
     * this behaviour is not guaranteed for all databases and should not be
     * relied on for portable applications.
     *
     * @return integer                      Returns the number of rows.
     */",
 "/**
 * Cache statement for SQL results.
 *
 * A result is saved in multiple cache keys, there is the originally specified
 * cache key which is just pointing to result rows by key. The following things
 * have to be ensured:
 *
 * 1. lifetime of the original key has to be longer than that of all the individual rows keys
 * 2. if any one row key is missing the query has to be re-executed.
 *
 * Also you have to realize that the cache will load the whole result into memory at once to ensure 2.
 * This means that the memory usage for cached results might increase by using this feature.
 */",
 "/**
     * Adds an element at the end of the collection.
     *
     * @param mixed $element The element to add.
     * @return boolean Always TRUE.
     */",
 "/**
     * Clears the collection, removing all elements.
     */",
 "/**
     * Checks whether an element is contained in the collection.
     * This is an O(n) operation, where n is the size of the collection.
     *
     * @param mixed $element The element to search for.
     * @return boolean TRUE if the collection contains the element, FALSE otherwise.
     */",
 "/**
     * Checks whether the collection is empty (contains no elements).
     *
     * @return boolean TRUE if the collection is empty, FALSE otherwise.
     */",
 "/**
     * Removes the element at the specified index from the collection.
     *
     * @param string|integer $key The kex/index of the element to remove.
     * @return mixed The removed element or NULL, if the collection did not contain the element.
     */",
 "/**
     * Removes the specified element from the collection, if it is found.
     *
     * @param mixed $element The element to remove.
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */",
 "/**
     * Checks whether the collection contains an element with the specified key/index.
     *
     * @param string|integer $key The key/index to check for.
     * @return boolean TRUE if the collection contains an element with the specified key/index,
     *          FALSE otherwise.
     */",
 "/**
     * Gets the element at the specified key/index.
     *
     * @param string|integer $key The key/index of the element to retrieve.
     * @return mixed
     */",
 "/**
     * Gets all keys/indices of the collection.
     *
     * @return array The keys/indices of the collection, in the order of the corresponding
     *          elements in the collection.
     */",
 "/**
     * Gets all values of the collection.
     *
     * @return array The values of all elements in the collection, in the order they
     *          appear in the collection.
     */",
 "/**
     * Sets an element in the collection at the specified key/index.
     *
     * @param string|integer $key The key/index of the element to set.
     * @param mixed $value The element to set.
     */",
 "/**
     * Gets a native PHP array representation of the collection.
     *
     * @return array
     */",
 "/**
     * Sets the internal iterator to the first element in the collection and
     * returns this element.
     *
     * @return mixed
     */",
 "/**
     * Sets the internal iterator to the last element in the collection and
     * returns this element.
     *
     * @return mixed
     */",
 "/**
     * Gets the key/index of the element at the current iterator position.
     *
     */",
 "/**
     * Gets the element of the collection at the current iterator position.
     *
     */",
 "/**
     * Moves the internal iterator position to the next element.
     *
     */",
 "/**
     * Tests for the existence of an element that satisfies the given predicate.
     *
     * @param Closure $p The predicate.
     * @return boolean TRUE if the predicate is TRUE for at least one element, FALSE otherwise.
     */",
 "/**
     * Returns all the elements of this collection that satisfy the predicate p.
     * The order of the elements is preserved.
     *
     * @param Closure $p The predicate used for filtering.
     * @return Collection A collection with the results of the filter operation.
     */",
 "/**
     * Applies the given predicate p to all elements of this collection,
     * returning true, if the predicate yields true for all elements.
     *
     * @param Closure $p The predicate.
     * @return boolean TRUE, if the predicate yields TRUE for all elements, FALSE otherwise.
     */",
 "/**
     * Applies the given function to each element in the collection and returns
     * a new collection with the elements returned by the function.
     *
     * @param Closure $func
     * @return Collection
     */",
 "/**
     * Partitions this collection in two collections according to a predicate.
     * Keys are preserved in the resulting collections.
     *
     * @param Closure $p The predicate on which to partition.
     * @return array An array with two elements. The first element contains the collection
     *               of elements where the predicate returned TRUE, the second element
     *               contains the collection of elements where the predicate returned FALSE.
     */",
 "/**
     * Gets the index/key of a given element. The comparison of two elements is strict,
     * that means not only the value but also the type must match.
     * For objects this means reference equality.
     *
     * @param mixed $element The element to search for.
     * @return mixed The key/index of the element or FALSE if the element was not found.
     */",
 "/**
     * Extract a slice of $length elements starting at position $offset from the Collection.
     *
     * If $length is null it returns all elements from $offset to the end of the Collection.
     * Keys have to be preserved by this method. Calling this method will only return the
     * selected slice and NOT change the elements contained in the collection slice is called on.
     *
     * @param int $offset
     * @param int $length
     * @return array
     */",
 "/**
 * The missing (SPL) Collection/Array/OrderedMap interface.
 *
 * A Collection resembles the nature of a regular PHP array. That is,
 * it is essentially an <b>ordered map</b> that can also be used
 * like a list.
 *
 * A Collection has an internal iterator just like a PHP array. In addition,
 * a Collection can be iterated with external iterators, which is preferrable.
 * To use an external iterator simply use the foreach language construct to
 * iterate over the collection (which calls {@link getIterator()} internally) or
 * explicitly retrieve an iterator though {@link getIterator()} which can then be
 * used to iterate over the collection.
 * You can not rely on the internal iterator of the collection being at a certain
 * position unless you explicitly positioned it before. Prefer iteration with
 * external iterators.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param Application $application An Application instance to test.
     */",
 "/**
     * Executes the application.
     *
     * Available options:
     *
     *  * interactive: Sets the input interactive flag
     *  * decorated:   Sets the output decorated flag
     *  * verbosity:   Sets the output verbosity flag
     *
     * @param array $input   An array of arguments and options
     * @param array $options An array of options
     *
     * @return integer The command exit code
     */",
 "/**
     * Gets the display returned by the last execution of the application.
     *
     * @return string The display
     */",
 "/**
     * Gets the input instance used by the last execution of the application.
     *
     * @return InputInterface The current input instance
     */",
 "/**
     * Gets the output instance used by the last execution of the application.
     *
     * @return OutputInterface The current output instance
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * SelectStatement = SelectClause FromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Run console with the given helperset.
     *
     * @param \Symfony\Component\Console\Helper\HelperSet $helperSet
     * @return void
     */",
 "/**
     * @param Application $cli
     */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
     * Unescapes a single quoted string.
     *
     * @param string $value A single quoted string.
     *
     * @return string The unescaped string.
     */",
 "/**
     * Unescapes a double quoted string.
     *
     * @param string $value A double quoted string.
     *
     * @return string The unescaped string.
     */",
 "/**
*Unescapesacharacterthatwasfoundinadouble-quotedstring
*
*@paramstring$valueAnescapedcharacter
*
*@returnstringTheunescapedcharacter
*/",
 "/**
*Convertastringfromoneencodingtoanother.
*
*@paramstring$valueThestringtoconvert
*@paramstring$toTheinputencoding
*@paramstring$fromTheoutputencoding
*
*@returnstringThestringwiththenewencoding
*
*@throws\RuntimeExceptionifnosuitableencodingfunctionisfound(iconvormbstring)
*/",
 "/**
*Unescaperencapsulatesunescapingrulesforsingleanddouble-quoted
*YAMLstrings.
*
*@authorMatthewLewinski<matthew@lewinski.org>
*/",
 "/**
     * Compares a Doctrine version with the current one.
     *
     * @param string $version Doctrine version to compare.
     * @return int Returns -1 if older, 0 if it is the same, 1 if version
     *             passed as argument is newer.
     */",
 "/**
 * Class to store and retrieve the version of Doctrine
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param \Doctrine\ORM\Mapping\AssociationMapping $assoc
     */",
 "/**
 * Description of QueryException
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"CURRENT_TIME\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * IndexBy ::= \"INDEX\" \"BY\" SimpleStateFieldPathExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Task for executing arbitrary SQL that can come from a file or directly from
 * the command line.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Get fully-qualified class name of this persistent class.
     *
     * @return string
     */",
 "/**
     * Gets the mapped identifier field name.
     *
     * The returned structure is an array of the identifier field names.
     *
     * @return array
     */",
 "/**
     * Gets the ReflectionClass instance for this mapped class.
     *
     * @return ReflectionClass
     */",
 "/**
     * Checks if the given field name is a mapped identifier for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * Checks if the given field is a mapped property for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * Checks if the given field is a mapped association for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * Checks if the given field is a mapped single valued association for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * Checks if the given field is a mapped collection valued association for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * A numerically indexed list of field names of this persistent class.
     *
     * This array includes identifier fields if present on this class.
     *
     * @return array
     */",
 "/**
     * Returns an array of identifier field names numerically indexed.
     *
     * @return array
     */",
 "/**
     * A numerically indexed list of association names of this persistent class.
     *
     * This array includes identifier associations if present on this class.
     *
     * @return array
     */",
 "/**
     * Returns a type name of this field.
     *
     * This type names can be implementation specific but should at least include the php types:
     * integer, string, boolean, float/double, datetime.
     *
     * @param string $fieldName
     * @return string
     */",
 "/**
     * Returns the target class name of the given association.
     *
     * @param string $assocName
     * @return string
     */",
 "/**
     * Checks if the association is the inverse side of a bidirectional association
     *
     * @param string $assocName
     * @return boolean
     */",
 "/**
     * Returns the target field of the owning side of the association
     *
     * @param string $assocName
     * @return string
     */",
 "/**
     * Return the identifier of this object as an array with field name as key.
     *
     * Has to return an empty array if no identifier isset.
     *
     * @param object $object
     * @return array
     */",
 "/**
 * Contract for a Doctrine persistence layer ClassMetadata class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
 * UpdateClause ::= \"UPDATE\" AbstractSchemaName [[\"AS\"] AliasIdentificationVariable] \"SET\" UpdateItem {\",\" UpdateItem}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Creates a new AnnotationException describing a Syntax error.
     *
     * @param string $message Exception message
     * @return AnnotationException
     */",
 "/**
     * Creates a new AnnotationException describing a Semantical error.
     *
     * @param string $message Exception message
     * @return AnnotationException
     */",
 "/**
     * Creates a new AnnotationException describing an error which occurred during
     * the creation of the annotation.
     *
     * @since 2.2
     * @param string $message
     * @return AnnotationException
     */",
 "/**
     * Creates a new AnnotationException describing an type error of an attribute.
     *
     * @since 2.2
     * @param string $attributeName
     * @param string $annotationName
     * @param string $context
     * @param string $expected
     * @param mixed $actual
     * @return AnnotationException
     */",
 "/**
     * Creates a new AnnotationException describing an required error of an attribute.
     *
     * @since 2.2
     * @param string $attributeName
     * @param string $annotationName
     * @param string $context
     * @param string $expected
     * @return AnnotationException
     */",
 "/**
 * Description of AnnotationException
 *
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
     * {@inheritdoc}
     *
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     * @internal Order of the parameters must be the same as the order of the columns in
     *           _getDeleteRowSql.
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     * @internal Order of the parameters must be the same as the order of the columns in
     *           _getInsertRowSql.
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     * @internal Order of the parameters must be the same as the order of the columns in
     *           _getInsertRowSql.
     */",
 "/**
     * Collects the parameters for inserting/deleting on the join table in the order
     * of the join table columns as specified in ManyToManyMapping#joinTableColumns.
     *
     * @param $coll
     * @param $element
     * @return array
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     * @internal Order of the parameters must be the same as the order of the columns in
     *           _getDeleteSql.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @param PersistentCollection $coll
     * @param int $offset
     * @param int $length
     * @return array
     */",
 "/**
     * @param PersistentCollection $coll
     * @param object $element
     * @return boolean
     */",
 "/**
     * @param PersistentCollection $coll
     * @param object $element
     * @return boolean
     */",
 "/**
     * @param \Doctrine\ORM\PersistentCollection $coll
     * @param object $element
     * @param boolean $addFilters Whether the filter SQL should be included or not.
     * @return array
     */",
 "/**
     * Generates the filter SQL for a given mapping.
     *
     * This method is not used for actually grabbing the related entities
     * but when the extra-lazy collection methods are called on a filtered
     * association. This is why besides the many to many table we also
     * have to join in the actual entities table leading to additional
     * JOIN.
     *
     * @param array $mapping Array containing mapping information.
     *
     * @return string The SQL query part to add to a query.
     */",
 "/**
     * Generates the filter SQL for a given entity and table alias.
     *
     * @param ClassMetadata $targetEntity Metadata of the target entity.
     * @param string $targetTableAlias The table alias of the joined/selected table.
     *
     * @return string The SQL query part to add to a query.
     */",
 "/**
 * Persister for many-to-many collections.
 *
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Alexander <iam.asm89@gmail.com>
 * @since   2.0
 */",
 "/**
     * @param array  $tableIndex
     * @param string $table
     * @param \Doctrine\DBAL\Connection $conn
     */",
 "/**
     * Allows to clear the index which means the index will be excluded from
     * tables index list.
     *
     * @param null|\Doctrine\DBAL\Schema\Index $index
     * @return SchemaIndexDefinitionEventArgs
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\Index
     */",
 "/**
     * @return array
     */",
 "/**
     * @return string
     */",
 "/**
     * @return \Doctrine\DBAL\Connection
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
 * Event Arguments used when the portable index definition is generated inside Doctrine\DBAL\Schema\AbstractSchemaManager.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"BIT_AND\" \"(\" ArithmeticPrimary \",\" ArithmeticPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Fabio B. Silva <fabio.bat.silva@gmail.com>
 */",
 "/**
     * Constructor passes the directory or array of directories
     * to convert the Doctrine 1 schema files from
     *
     * @param array $from
     * @author Jonathan Wage
     */",
 "/**
     * Get an array of ClassMetadataInfo instances from the passed
     * Doctrine 1 schema
     *
     * @return array $metadatas  An array of ClassMetadataInfo instances
     */",
 "/**
 * Class to help with converting Doctrine 1 schema files to Doctrine 2 mapping files
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * TODO: Should this code be pulled out in to a toArray() method in ClassMetadata
     *
     * @param ClassMetadataInfo $metadata
     * @return mixed $exported
     */",
 "/**
 * ClassMetadata exporter for Doctrine YAML mapping files
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
 * CollectionMemberExpression ::= EntityExpression [\"NOT\"] \"MEMBER\" [\"OF\"] CollectionValuedPathExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target({\"PROPERTY\",\"ANNOTATION\"})
 */",
 "/**
 * SQLite Keywords
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Type that maps an SQL DATE to a PHP Date object.
 *
 * @since 2.0
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * APC cache provider.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
 * Description of AggregateExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Compare the current object to the passed $other.
     *
     * Returns 0 if they are semantically equal, 1 if the other object
     * is less than the current one, or -1 if its more than the current one.
     *
     * This method should not check for identity using ===, only for semantical equality for example
     * when two different DateTime instances point to the exact same Date + TZ.
     *
     * @return int
     */",
 "/**
 * Comparable interface that allows to compare two value objects to each other for similarity.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 */",
 "/**
 * SimpleSelectExpression ::= StateFieldPathExpression | IdentificationVariable
 *                          | (AggregateExpression [[\"AS\"] FieldAliasIdentificationVariable])
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * WhereClause ::= \"WHERE\" ConditionalExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string  $name        The option name
     * @param string  $shortcut    The shortcut (can be null)
     * @param integer $mode        The option mode: One of the VALUE_* constants
     * @param string  $description A description text
     * @param mixed   $default     The default value (must be null for self::VALUE_REQUIRED or self::VALUE_NONE)
     *
     * @throws \InvalidArgumentException If option mode is invalid or incompatible
     *
     * @api
     */",
 "/**
     * Returns the shortcut.
     *
     * @return string The shortcut
     */",
 "/**
     * Returns the name.
     *
     * @return string The name
     */",
 "/**
     * Returns true if the option accepts a value.
     *
     * @return Boolean true if value mode is not self::VALUE_NONE, false otherwise
     */",
 "/**
     * Returns true if the option requires a value.
     *
     * @return Boolean true if value mode is self::VALUE_REQUIRED, false otherwise
     */",
 "/**
     * Returns true if the option takes an optional value.
     *
     * @return Boolean true if value mode is self::VALUE_OPTIONAL, false otherwise
     */",
 "/**
     * Returns true if the option can take multiple values.
     *
     * @return Boolean true if mode is self::VALUE_IS_ARRAY, false otherwise
     */",
 "/**
     * Sets the default value.
     *
     * @param mixed $default The default value
     */",
 "/**
     * Returns the default value.
     *
     * @return mixed The default value
     */",
 "/**
     * Returns the description text.
     *
     * @return string The description text
     */",
 "/**
 * Represents a command line option.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Container for all ORM events.
 *
 * This class cannot be instantiated.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Create a new Column
     *
     * @param string $columnName
     * @param Doctrine\DBAL\Types\Type $type
     * @param int $length
     * @param bool $notNull
     * @param mixed $default
     * @param bool $unsigned
     * @param bool $fixed
     * @param int $precision
     * @param int $scale
     * @param array $platformOptions
     */",
 "/**
     * @param array $options
     * @return Column
     */",
 "/**
     * @param Type $type
     * @return Column
     */",
 "/**
     * @param int $length
     * @return Column
     */",
 "/**
     * @param int $precision
     * @return Column
     */",
 "/**
     * @param  int $scale
     * @return Column
     */",
 "/**
     *
     * @param  bool $unsigned
     * @return Column
     */",
 "/**
     *
     * @param  bool $fixed
     * @return Column
     */",
 "/**
     * @param  bool $notnull
     * @return Column
     */",
 "/**
     *
     * @param  mixed $default
     * @return Column
     */",
 "/**
     *
     * @param array $platformOptions
     * @return Column
     */",
 "/**
     *
     * @param  string $name
     * @param  mixed $value
     * @return Column
     */",
 "/**
     *
     * @param  string
     * @return Column
     */",
 "/**
     * @param  string $name
     * @param  mixed $value
     * @return Column
     */",
 "/**
     * @param  string $name
     * @return boolean
     */",
 "/**
     * @param  string $name
     * @return mixed
     */",
 "/**
     * @param array $customSchemaOptions
     * @return Column
     */",
 "/**
     * @return array
     */",
 "/**
     * @param Visitor $visitor
     */",
 "/**
     * @return array
     */",
 "/**
 * Object representation of a database column
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @param Schema $fromSchema
     * @param Schema $toSchema
     * @return SchemaDiff
     */",
 "/**
     * Returns a SchemaDiff object containing the differences between the schemas $fromSchema and $toSchema.
     *
     * The returned diferences are returned in such a way that they contain the
     * operations to change the schema stored in $fromSchema to the schema that is
     * stored in $toSchema.
     *
     * @param Schema $fromSchema
     * @param Schema $toSchema
     *
     * @return SchemaDiff
     */",
 "/**
     *
     * @param Sequence $sequence1
     * @param Sequence $sequence2
     */",
 "/**
     * Returns the difference between the tables $table1 and $table2.
     *
     * If there are no differences this method returns the boolean false.
     *
     * @param Table $table1
     * @param Table $table2
     *
     * @return bool|TableDiff
     */",
 "/**
     * Try to find columns that only changed their name, rename operations maybe cheaper than add/drop
     * however ambiguouties between different possibilites should not lead to renaming at all.
     *
     * @param TableDiff $tableDifferences
     */",
 "/**
     * @param ForeignKeyConstraint $key1
     * @param ForeignKeyConstraint $key2
     * @return bool
     */",
 "/**
     * Returns the difference between the fields $field1 and $field2.
     *
     * If there are differences this method returns $field2, otherwise the
     * boolean false.
     *
     * @param Column $column1
     * @param Column $column2
     *
     * @return array
     */",
 "/**
     * Finds the difference between the indexes $index1 and $index2.
     *
     * Compares $index1 with $index2 and returns $index2 if there are any
     * differences or false in case there are no differences.
     *
     * @param Index $index1
     * @param Index $index2
     * @return bool
     */",
 "/**
 * Compare to Schemas and return an instance of SchemaDiff
 *
 * @copyright Copyright (C) 2005-2009 eZ Systems AS. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"BIT_OR\" \"(\" ArithmeticPrimary \",\" ArithmeticPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Fabio B. Silva <fabio.bat.silva@gmail.com>
 */",
 "/**
     * Add a nested driver.
     *
     * @param Driver $nestedDriver
     * @param string $namespace
     */",
 "/**
     * Get the array of nested drivers.
     *
     * @return array $drivers
     */",
 "/**
     * Loads the metadata for the specified class into the provided container.
     *
     * @param string $className
     * @param ClassMetadataInfo $metadata
     */",
 "/**
     * Gets the names of all mapped classes known to this driver.
     *
     * @return array The names of all mapped classes known to this driver.
     */",
 "/**
     * Whether the class with the specified name should have its metadata loaded.
     *
     * This is only the case for non-transient classes either mapped as an Entity or MappedSuperclass.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
 * The DriverChain allows you to add multiple other mapping drivers for
 * certain namespaces
 *
 * @since  2.2
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Forces the factory to load the metadata of all classes known to the underlying
     * mapping driver.
     *
     * @return array The ClassMetadata instances of all mapped classes.
     */",
 "/**
     * Gets the class metadata descriptor for a class.
     *
     * @param string $className The name of the class.
     * @return ClassMetadata
     */",
 "/**
     * Checks whether the factory has the metadata for a class loaded already.
     *
     * @param string $className
     * @return boolean TRUE if the metadata of the class in question is already loaded, FALSE otherwise.
     */",
 "/**
     * Sets the metadata descriptor for a specific class.
     *
     * @param string $className
     * @param ClassMetadata $class
     */",
 "/**
     * Whether the class with the specified name should have its metadata loaded.
     * This is only the case if it is either mapped directly or as a
     * MappedSuperclass.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
 * Contract for a Doctrine persistence layer ClassMetadata class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * @param string $value
     */",
 "/**
 * Description of InputParameter
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string $type Instance type of composite expression
     * @param array $parts Composition of expressions to be joined on composite expression
     */",
 "/**
     * Adds multiple parts to composite expression.
     *
     * @param array $args
     *
     * @return CompositeExpression
     */",
 "/**
     * Adds an expression to composite expression.
     *
     * @param mixed $part
     * @return CompositeExpression
     */",
 "/**
     * Retrieves the amount of expressions on composite expression.
     *
     * @return integer
     */",
 "/**
     * Retrieve the string representation of this composite expression.
     *
     * @return string
     */",
 "/**
     * Return type of this composite expression (AND/OR)
     *
     * @return string
     */",
 "/**
 * Composite expression is responsible to build a group of similar expression.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.1
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * UpdateItem ::= [IdentificationVariable \".\"] {StateField | SingleValuedAssociationField} \"=\" NewValue
 * NewValue ::= SimpleArithmeticExpression | StringPrimary | DatetimePrimary | BooleanPrimary |
 *              EnumPrimary | SimpleEntityExpression | \"NULL\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Adds an entity result to this ResultSetMapping.
     *
     * @param string $class The class name of the entity.
     * @param string $alias The alias for the class. The alias must be unique among all entity
     *                      results or joined entity results within this ResultSetMapping.
     * @param string $resultAlias The result alias with which the entity result should be
     *                            placed in the result structure.
     * @return ResultSetMapping This ResultSetMapping instance.
     * @todo Rename: addRootEntity
     */",
 "/**
     * Sets a discriminator column for an entity result or joined entity result.
     * The discriminator column will be used to determine the concrete class name to
     * instantiate.
     *
     * @param string $alias The alias of the entity result or joined entity result the discriminator
     *                      column should be used for.
     * @param string $discrColumn The name of the discriminator column in the SQL result set.
     * @return ResultSetMapping This ResultSetMapping instance.
     * @todo Rename: addDiscriminatorColumn
     */",
 "/**
     * Sets a field to use for indexing an entity result or joined entity result.
     *
     * @param string $alias The alias of an entity result or joined entity result.
     * @param string $fieldName The name of the field to use for indexing.
     * @return ResultSetMapping This ResultSetMapping instance.
     */",
 "/**
     * Set to index by a scalar result column name
     *
     * @param $resultColumnName
     * @return ResultSetMapping This ResultSetMapping instance.
     */",
 "/**
     * Sets a column to use for indexing an entity or joined entity result by the given alias name.
     *
     * @param $alias
     * @param $resultColumnName
     * @return ResultSetMapping This ResultSetMapping instance.
     */",
 "/**
     * Checks whether an entity result or joined entity result with a given alias has
     * a field set for indexing.
     *
     * @param string $alias
     * @return boolean
     * @todo Rename: isIndexed($alias)
     */",
 "/**
     * Checks whether the column with the given name is mapped as a field result
     * as part of an entity result or joined entity result.
     *
     * @param string $columnName The name of the column in the SQL result set.
     * @return boolean
     * @todo Rename: isField
     */",
 "/**
     * Adds a field to the result that belongs to an entity or joined entity.
     *
     * @param string $alias The alias of the root entity or joined entity to which the field belongs.
     * @param string $columnName The name of the column in the SQL result set.
     * @param string $fieldName The name of the field on the declaring class.
     * @param string $declaringClass The name of the class that declares/owns the specified field.
     *                               When $alias refers to a superclass in a mapped hierarchy but
     *                               the field $fieldName is defined on a subclass, specify that here.
     *                               If not specified, the field is assumed to belong to the class
     *                               designated by $alias.
     * @return ResultSetMapping This ResultSetMapping instance.
     * @todo Rename: addField
     */",
 "/**
     * Adds a joined entity result.
     *
     * @param string $class The class name of the joined entity.
     * @param string $alias The unique alias to use for the joined entity.
     * @param string $parentAlias The alias of the entity result that is the parent of this joined result.
     * @param object $relation The association field that connects the parent entity result with the joined entity result.
     * @return ResultSetMapping This ResultSetMapping instance.
     * @todo Rename: addJoinedEntity
     */",
 "/**
     * Adds a scalar result mapping.
     *
     * @param string $columnName The name of the column in the SQL result set.
     * @param string $alias The result alias with which the scalar result should be placed in the result structure.
     * @param string $type The column type
     *
     * @return ResultSetMapping This ResultSetMapping instance.
     *
     * @todo Rename: addScalar
     */",
 "/**
     * Checks whether a column with a given name is mapped as a scalar result.
     *
     * @param string $columName The name of the column in the SQL result set.
     * @return boolean
     * @todo Rename: isScalar
     */",
 "/**
     * Gets the name of the class of an entity result or joined entity result,
     * identified by the given unique alias.
     *
     * @param string $alias
     * @return string
     */",
 "/**
     * Gets the field alias for a column that is mapped as a scalar value.
     *
     * @param string $columnName The name of the column in the SQL result set.
     * @return string
     */",
 "/**
     * Gets the name of the class that owns a field mapping for the specified column.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     *
     * @param string $alias
     * @return AssociationMapping
     */",
 "/**
     *
     * @param string $alias
     * @return boolean
     */",
 "/**
     * Gets the alias of the class that owns a field mapping for the specified column.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     * Gets the parent alias of the given alias.
     *
     * @param string $alias
     * @return string
     */",
 "/**
     * Checks whether the given alias has a parent alias.
     *
     * @param string $alias
     * @return boolean
     */",
 "/**
     * Gets the field name for a column name.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     *
     * @return array
     */",
 "/**
     * Gets the number of different entities that appear in the mapped result.
     *
     * @return integer
     */",
 "/**
     * Checks whether this ResultSetMapping defines a mixed result.
     * Mixed results can only occur in object and array (graph) hydration. In such a
     * case a mixed result means that scalar values are mixed with objects/array in
     * the result.
     *
     * @return boolean
     */",
 "/**
     * Adds a meta column (foreign key or discriminator column) to the result set.
     *
     * @param string $alias
     * @param string $columnName
     * @param string $fieldName
     * @param bool
     * @return ResultSetMapping This ResultSetMapping instance.
     */",
 "/**
 * A ResultSetMapping describes how a result set of an SQL query maps to a Doctrine result.
 *
 * IMPORTANT NOTE:
 * The properties of this class are only public for fast internal READ access and to (drastically)
 * reduce the size of serialized instances for more effective caching due to better (un-)serialization
 * performance.
 *
 * <b>Users should use the public methods.</b>
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 * @todo Think about whether the number of lookup maps can be reduced.
 */",
 "/**
     * Compares a Doctrine version with the current one.
     *
     * @param string $version Doctrine version to compare.
     * @return int Returns -1 if older, 0 if it is the same, 1 if version
     *             passed as argument is newer.
     */",
 "/**
 * Class to store and retrieve the version of Doctrine
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @return array
     */",
 "/**
     * Retrieve Query Instance reponsible for the current walkers execution.
     *
     * @return \Doctrine\ORM\Query
     */",
 "/**
     * Retrieve ParserResult
     *
     * @return \Doctrine\ORM\Query\ParserResult
     */",
 "/**
     * Walks down a SelectStatement AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FromClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FunctionNode AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByClause AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByItem AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a HavingClause AST node, thereby generating the appropriate SQL.
     *
     * @param HavingClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a JoinVariableDeclaration AST node and creates the corresponding SQL.
     *
     * @param JoinVariableDeclaration $joinVarDecl
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectExpression AST node and generates the corresponding SQL.
     *
     * @param SelectExpression $selectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a QuantifiedExpression AST node, thereby generating the appropriate SQL.
     *
     * @param QuantifiedExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a Subselect AST node, thereby generating the appropriate SQL.
     *
     * @param Subselect
     * @return string The SQL.
     */",
 "/**
     * Walks down a SubselectFromClause AST node, thereby generating the appropriate SQL.
     *
     * @param SubselectFromClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an AggregateExpression AST node, thereby generating the appropriate SQL.
     *
     * @param AggregateExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByClause AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByItem AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateStatement AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteStatement AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteClause AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateClause AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateItem AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a WhereClause AST node, thereby generating the appropriate SQL.
     *
     * @param WhereClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalTerm AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalTerm
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalFactor AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalFactor
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalPrimary AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalPrimary
     * @return string The SQL.
     */",
 "/**
     * Walks down an ExistsExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ExistsExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CollectionMemberExpression AST node, thereby generating the appropriate SQL.
     *
     * @param CollectionMemberExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an EmptyCollectionComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param EmptyCollectionComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param NullComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InstanceOfExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InstanceOfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a literal that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a BetweenExpression AST node, thereby generating the appropriate SQL.
     *
     * @param BetweenExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a LikeExpression AST node, thereby generating the appropriate SQL.
     *
     * @param LikeExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a StateFieldPathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param StateFieldPathExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InputParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InputParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticTerm AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a StringPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticFactor that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an SimpleArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an PathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ResultVariable AST node, thereby generating the appropriate SQL.
     *
     * @param string $resultVariable
     * @return string The SQL.
     */",
 "/**
     * Gets an executor that can be used to execute the result of this walker.
     *
     * @return AbstractExecutor
     */",
 "/**
 * An adapter implementation of the TreeWalker interface. The methods in this class
 * are empty. ???This class exists as convenience for creating tree walkers.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
 * Exception interface for all exceptions thrown by the component.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Tools related Exceptions
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Executor that executes the SQL statement for simple DQL SELECT statements.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Roman Borschel <roman@code-factory.org>
 * @link        www.doctrine-project.org
 * @since       2.0
 */",
 "/**
     * @override
     */",
 "/**
 * Sqlsrv Connection implementation.
 *
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param InputDefinition $definition A InputDefinition instance
     */",
 "/**
     * Binds the current Input instance with the given arguments and options.
     *
     * @param InputDefinition $definition A InputDefinition instance
     */",
 "/**
     * Processes command line arguments.
     */",
 "/**
     * Validates the input.
     *
     * @throws \RuntimeException When not enough arguments are given
     */",
 "/**
     * Checks if the input is interactive.
     *
     * @return Boolean Returns true if the input is interactive
     */",
 "/**
     * Sets the input interactivity.
     *
     * @param Boolean $interactive If the input should be interactive
     */",
 "/**
     * Returns the argument values.
     *
     * @return array An array of argument values
     */",
 "/**
     * Returns the argument value for a given argument name.
     *
     * @param string $name The argument name
     *
     * @return mixed The argument value
     *
     * @throws \InvalidArgumentException When argument given doesn't exist
     */",
 "/**
     * Sets an argument value by name.
     *
     * @param string $name  The argument name
     * @param string $value The argument value
     *
     * @throws \InvalidArgumentException When argument given doesn't exist
     */",
 "/**
     * Returns true if an InputArgument object exists by name or position.
     *
     * @param string|integer $name The InputArgument name or position
     *
     * @return Boolean true if the InputArgument object exists, false otherwise
     */",
 "/**
     * Returns the options values.
     *
     * @return array An array of option values
     */",
 "/**
     * Returns the option value for a given option name.
     *
     * @param string $name The option name
     *
     * @return mixed The option value
     *
     * @throws \InvalidArgumentException When option given doesn't exist
     */",
 "/**
     * Sets an option value by name.
     *
     * @param string $name  The option name
     * @param string $value The option value
     *
     * @throws \InvalidArgumentException When option given doesn't exist
     */",
 "/**
     * Returns true if an InputOption object exists by name.
     *
     * @param string $name The InputOption name
     *
     * @return Boolean true if the InputOption object exists, false otherwise
     */",
 "/**
 * Input is the base class for all concrete Input classes.
 *
 * Three concrete classes are provided by default:
 *
 *  * `ArgvInput`: The input comes from the CLI arguments (argv)
 *  * `StringInput`: The input is provided as a string
 *  * `ArrayInput`: The input is provided as an array
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param array           $argv An array of parameters from the CLI (in the argv format)
     * @param InputDefinition $definition A InputDefinition instance
     *
     * @api
     */",
 "/**
     * Processes command line arguments.
     */",
 "/**
     * Parses a short option.
     *
     * @param string $token The current token.
     */",
 "/**
     * Parses a short option set.
     *
     * @param string $name The current token
     *
     * @throws \RuntimeException When option given doesn't exist
     */",
 "/**
     * Parses a long option.
     *
     * @param string $token The current token
     */",
 "/**
     * Parses an argument.
     *
     * @param string $token The current token
     *
     * @throws \RuntimeException When too many arguments are given
     */",
 "/**
     * Adds a short option value.
     *
     * @param string $shortcut The short option key
     * @param mixed  $value    The value for the option
     *
     * @throws \RuntimeException When option given doesn't exist
     */",
 "/**
     * Adds a long option value.
     *
     * @param string $name  The long option key
     * @param mixed  $value The value for the option
     *
     * @throws \RuntimeException When option given doesn't exist
     */",
 "/**
     * Returns the first argument from the raw parameters (not parsed).
     *
     * @return string The value of the first argument or null otherwise
     */",
 "/**
     * Returns true if the raw parameters (not parsed) contains a value.
     *
     * This method is to be used to introspect the input parameters
     * before it has been validated. It must be used carefully.
     *
     * @param string|array $values The value(s) to look for in the raw parameters (can be an array)
     *
     * @return Boolean true if the value is contained in the raw parameters
     */",
 "/**
     * Returns the value of a raw option (not parsed).
     *
     * This method is to be used to introspect the input parameters
     * before it has been validated. It must be used carefully.
     *
     * @param string|array $values The value(s) to look for in the raw parameters (can be an array)
     * @param mixed $default The default value to return if no result is found
     * @return mixed The option value
     */",
 "/**
 * ArgvInput represents an input coming from the CLI arguments.
 *
 * Usage:
 *
 *     $input = new ArgvInput();
 *
 * By default, the `$_SERVER['argv']` array is used for the input values.
 *
 * This can be overridden by explicitly passing the input values in the constructor:
 *
 *     $input = new ArgvInput($_SERVER['argv']);
 *
 * If you pass it yourself, don't forget that the first element of the array
 * is the name of the running program.
 *
 * When passing an argument to the constructor, be sure that it respects
 * the same rules as the argv one. It's almost always better to use the
 * `StringInput` when you want to provide your own input.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @see http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
 * @see http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02
 *
 * @api
 */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaPgsqlReader.html
     * @param  array $tableIndexes
     * @param  string $tableName
     * @return array
     */",
 "/**
 * Oracle Schema Manager
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @version     $Revision$
 * @since       2.0
 */",
 "/**
*Createsanew<tt>ClassLoader</tt>thatloadsclassesofthe
*specifiednamespacefromthespecifiedincludepath.
*
*Ifnoincludepathisgiven,theClassLoaderreliesonthePHPinclude_path.
*Ifneitheranamespacenoranincludepathisgiven,theClassLoaderwill
*beresponsibleforloadingallclasses,therebyrelyingonthePHPinclude_path.
*
*@paramstring$nsThenamespaceoftheclassestoload.
*@paramstring$includePathThebaseincludepathtouse.
*/",
 "/**
*SetsthenamespaceseparatorusedbyclassesinthenamespaceofthisClassLoader.
*
*@paramstring$sepTheseparatortouse.
*/",
 "/**
*GetsthenamespaceseparatorusedbyclassesinthenamespaceofthisClassLoader.
*
*@returnstring
*/",
 "/**
*SetsthebaseincludepathforallclassfilesinthenamespaceofthisClassLoader.
*
*@paramstring$includePath
*/",
 "/**
*GetsthebaseincludepathforallclassfilesinthenamespaceofthisClassLoader.
*
*@returnstring
*/",
 "/**
*SetsthefileextensionofclassfilesinthenamespaceofthisClassLoader.
*
*@paramstring$fileExtension
*/",
 "/**
*GetsthefileextensionofclassfilesinthenamespaceofthisClassLoader.
*
*@returnstring
*/",
 "/**
*RegistersthisClassLoaderontheSPLautoloadstack.
*/",
 "/**
*RemovesthisClassLoaderfromtheSPLautoloadstack.
*/",
 "/**
*Loadsthegivenclassorinterface.
*
*@paramstring$classnameThenameoftheclasstoload.
*@returnbooleanTRUEiftheclasshasbeensuccessfullyloaded,FALSEotherwise.
*/",
 "/**
*AsksthisClassLoaderwhetheritcanpotentiallyloadtheclass(file)with
*thegivenname.
*
*@paramstring$classNameThefully-qualifiednameoftheclass.
*@returnbooleanTRUEifthisClassLoadercanloadtheclass,FALSEotherwise.
*/",
 "/**
*Checkswhetheraclasswithagivennameexists.Aclass\"exists\" if it is either
     * already defined in the current request or if there is an autoloader on the SPL
     * autoload stack that is a) responsible for the class in question and b) is able to
     * load a class file in which the class definition resides.
     *
     * If the class is not already defined, each autoloader in the SPL autoload stack
     * is asked whether it is able to tell if the class exists. If the autoloader is
     * a <tt>ClassLoader</tt>, {@link canLoadClass} is used, otherwise the autoload
     * function of the autoloader is invoked and expected to return a value that
     * evaluates to TRUE if the class (file) exists. As soon as one autoloader reports
     * that the class exists, TRUE is returned.
     *
     * Note that, depending on what kinds of autoloaders are installed on the SPL
     * autoload stack, the class (file) might already be loaded as a result of checking
     * for its existence. This is not the case with a <tt>ClassLoader</tt>, who separates
     * these responsibilities.
     *
     * @param string $className The fully-qualified name of the class.
     * @return boolean TRUE if the class exists as per the definition given above, FALSE otherwise.
     */",
 "/**
     * Gets the <tt>ClassLoader</tt> from the SPL autoload stack that is responsible
     * for (and is able to load) the class with the given name.
     *
     * @param string $className The name of the class.
     * @return The <tt>ClassLoader</tt> for the class or NULL if no such <tt>ClassLoader</tt> exists.
     */",
 "/**
 * A <tt>ClassLoader</tt> is an autoloader for class files that can be
 * installed on the SPL autoload stack. It is a class loader that either loads only classes
 * of a specific namespace or all namespaces and it is suitable for working together
 * with other autoloaders in the SPL autoload stack.
 *
 * If no include path is configured through the constructor or {@link setIncludePath}, a ClassLoader
 * relies on the PHP <code>include_path</code>.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param \Doctrine\ORM\EntityManager $em
     * @param string $entityClass Optional entity class
     */",
 "/**
     * Retrieve associated EntityManager.
     *
     * @return \Doctrine\ORM\EntityManager
     */",
 "/**
     * Name of the entity class that is cleared, or empty if all are cleared.
     *
     * @return string
     */",
 "/**
     * Check if event clears all entities.
     *
     * @return bool
     */",
 "/**
 * Provides event arguments for the onClear event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.0
 * @author      Roman Borschel <roman@code-factory.de>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @param array $fieldNames
     * @return OneToManyAssociationBuilder
     */",
 "/**
     * @return ClassMetadataBuilder
     */",
 "/**
 * OneToMany Association Builder
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * \"DATE_ADD(date1, interval, unit)\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Finds an object by its primary key / identifier.
     *
     * @param $id The identifier.
     * @return object The object.
     */",
 "/**
     * Finds all objects in the repository.
     *
     * @return mixed The objects.
     */",
 "/**
     * Finds objects by a set of criteria.
     *
     * Optionally sorting and limiting details can be passed. An implementation may throw
     * an UnexpectedValueException if certain values of the sorting or limiting details are
     * not supported.
     *
     * @throws UnexpectedValueException
     * @param array $criteria
     * @param array|null $orderBy
     * @param int|null $limit
     * @param int|null $offset
     * @return mixed The objects.
     */",
 "/**
     * Finds a single object by a set of criteria.
     *
     * @param array $criteria
     * @return object The object.
     */",
 "/**
     * Returns the class name of the object managed by the repository
     *
     * @return string
     */",
 "/**
 * Contract for a Doctrine persistence layer ObjectRepository class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to ensure that Doctrine is properly configured for a production environment.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns an array of events this subscriber wants to listen to.
     *
     * @return array
     */",
 "/**
 * An EventSubscriber knows himself what events he is interested in.
 * If an EventSubscriber is added to an EventManager, the manager invokes
 * {@link getSubscribedEvents} and registers the subscriber as a listener for all
 * returned events.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * OrderByClause ::= \"ORDER\" \"BY\" OrderByItem {\",\" OrderByItem}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param array $definition An array of InputArgument and InputOption instance
     *
     * @api
     */",
 "/**
     * Sets the definition of the input.
     *
     * @param array $definition The definition array
     *
     * @api
     */",
 "/**
     * Sets the InputArgument objects.
     *
     * @param array $arguments An array of InputArgument objects
     *
     * @api
     */",
 "/**
     * Add an array of InputArgument objects.
     *
     * @param InputArgument[] $arguments An array of InputArgument objects
     *
     * @api
     */",
 "/**
     * Add an InputArgument object.
     *
     * @param InputArgument $argument An InputArgument object
     *
     * @throws \LogicException When incorrect argument is given
     *
     * @api
     */",
 "/**
     * Returns an InputArgument by name or by position.
     *
     * @param string|integer $name The InputArgument name or position
     *
     * @return InputArgument An InputArgument object
     *
     * @throws \InvalidArgumentException When argument given doesn't exist
     *
     * @api
     */",
 "/**
     * Returns true if an InputArgument object exists by name or position.
     *
     * @param string|integer $name The InputArgument name or position
     *
     * @return Boolean true if the InputArgument object exists, false otherwise
     *
     * @api
     */",
 "/**
     * Gets the array of InputArgument objects.
     *
     * @return array An array of InputArgument objects
     *
     * @api
     */",
 "/**
     * Returns the number of InputArguments.
     *
     * @return integer The number of InputArguments
     */",
 "/**
     * Returns the number of required InputArguments.
     *
     * @return integer The number of required InputArguments
     */",
 "/**
     * Gets the default values.
     *
     * @return array An array of default values
     */",
 "/**
     * Sets the InputOption objects.
     *
     * @param array $options An array of InputOption objects
     *
     * @api
     */",
 "/**
     * Add an array of InputOption objects.
     *
     * @param InputOption[] $options An array of InputOption objects
     *
     * @api
     */",
 "/**
     * Add an InputOption object.
     *
     * @param InputOption $option An InputOption object
     *
     * @throws \LogicException When option given already exist
     *
     * @api
     */",
 "/**
     * Returns an InputOption by name.
     *
     * @param string $name The InputOption name
     *
     * @return InputOption A InputOption object
     *
     * @api
     */",
 "/**
     * Returns true if an InputOption object exists by name.
     *
     * @param string $name The InputOption name
     *
     * @return Boolean true if the InputOption object exists, false otherwise
     *
     * @api
     */",
 "/**
     * Gets the array of InputOption objects.
     *
     * @return array An array of InputOption objects
     *
     * @api
     */",
 "/**
     * Returns true if an InputOption object exists by shortcut.
     *
     * @param string $name The InputOption shortcut
     *
     * @return Boolean true if the InputOption object exists, false otherwise
     */",
 "/**
     * Gets an InputOption by shortcut.
     *
     * @param string $shortcut the Shortcut name
     *
     * @return InputOption An InputOption object
     */",
 "/**
     * Gets an array of default values.
     *
     * @return array An array of all default values
     */",
 "/**
     * Returns the InputOption name given a shortcut.
     *
     * @param string $shortcut The shortcut
     *
     * @return string The InputOption name
     *
     * @throws \InvalidArgumentException When option given does not exist
     */",
 "/**
     * Gets the synopsis.
     *
     * @return string The synopsis
     */",
 "/**
     * Returns a textual representation of the InputDefinition.
     *
     * @return string A string representing the InputDefinition
     */",
 "/**
     * Returns an XML representation of the InputDefinition.
     *
     * @param Boolean $asDom Whether to return a DOM or an XML string
     *
     * @return string|DOMDocument An XML string representing the InputDefinition
     */",
 "/**
 * A InputDefinition represents a set of valid command line arguments and options.
 *
 * Usage:
 *
 *     $definition = new InputDefinition(array(
 *       new InputArgument('name', InputArgument::REQUIRED),
 *       new InputOption('foo', 'f', InputOption::VALUE_REQUIRED),
 *     ));
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructs the SQLFilter object.
     *
     * @param EntityManager $em The EM
     */",
 "/**
     * Sets a parameter that can be used by the filter.
     *
     * @param string $name Name of the parameter.
     * @param string $value Value of the parameter.
     * @param string $type The parameter type. If specified, the given value will be run through
     *                     the type conversion of this type. This is usually not needed for
     *                     strings and numeric types.
     *
     * @return SQLFilter The current SQL filter.
     */",
 "/**
     * Gets a parameter to use in a query.
     *
     * The function is responsible for the right output escaping to use the
     * value in a query.
     *
     * @param string $name Name of the parameter.
     *
     * @return string The SQL escaped parameter to use in a query.
     */",
 "/**
     * Returns as string representation of the SQLFilter parameters (the state).
     *
     * @return string String representation of the SQLFilter.
     */",
 "/**
     * Gets the SQL query part to add to a query.
     *
     * @return string The constraint SQL if there is available, empty string otherwise
     */",
 "/**
 * The base class that user defined filters should extend.
 *
 * Handles the setting and escaping of parameters.
 *
 * @author Alexander <iam.asm89@gmail.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @abstract
 */",
 "/**
 * IdentificationVariableDeclaration ::= RangeVariableDeclaration [IndexBy] {JoinVariableDeclaration}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"LOCATE\" \"(\" StringPrimary \",\" StringPrimary [\",\" SimpleArithmeticExpression]\")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param object $entity
     * @param ObjectManager $objectManager
     * @param array $changeSet
     */",
 "/**
     * Retrieve entity changeset.
     *
     * @return array
     */",
 "/**
     * Check if field has a changeset.
     *
     * @return boolean
     */",
 "/**
     * Get the old value of the changeset of the changed field.
     *
     * @param  string $field
     * @return mixed
     */",
 "/**
     * Get the new value of the changeset of the changed field.
     *
     * @param  string $field
     * @return mixed
     */",
 "/**
     * Set the new value of this field.
     *
     * @param string $field
     * @param mixed $value
     */",
 "/**
     * Assert the field exists in changeset.
     *
     * @param string $field
     */",
 "/**
 * Class that holds event arguments for a preUpdate event.
 *
 * @author Guilherme Blanco <guilehrmeblanco@hotmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since  2.2
 */",
 "/**
     * Constructor.
     *
     * @param mixed           $stream    A stream resource
     * @param integer         $verbosity The verbosity level (self::VERBOSITY_QUIET, self::VERBOSITY_NORMAL,
     *                                   self::VERBOSITY_VERBOSE)
     * @param Boolean         $decorated Whether to decorate messages or not (null for auto-guessing)
     * @param OutputFormatter $formatter Output formatter instance
     *
     * @throws \InvalidArgumentException When first argument is not a real stream
     *
     * @api
     */",
 "/**
     * Gets the stream attached to this StreamOutput instance.
     *
     * @return resource A stream resource
     */",
 "/**
     * Writes a message to the output.
     *
     * @param string  $message A message to write to the output
     * @param Boolean $newline Whether to add a newline or not
     *
     * @throws \RuntimeException When unable to write output (should never happen)
     */",
 "/**
*Returnstrueifthestreamsupportscolorization.
*
*Colorizationisdisabledifnotsupportedbythestream:
*
*-windowswithoutansicon
*-nonttyconsoles
*
*@returnBooleantrueifthestreamsupportscolorization,falseotherwise
*/",
 "/**
*StreamOutputwritestheoutputtoagivenstream.
*
*Usage:
*
*$output=newStreamOutput(fopen('php://stdout','w'));
*
*As`StreamOutput`canuseanystream,youcanalsouseafile:
*
*$output=newStreamOutput(fopen('/path/to/output.log','a',false));
*
*@authorFabienPotencier<fabien@symfony.com>
*
*@api
*/",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Constructs a joinColumn mapping array based on the information
     * found in the given join column element.
     *
     * @param $joinColumnElement The array join column element
     * @return array The mapping array.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The YamlDriver reads the mapping metadata from yaml schema files.
 *
 * @since 2.0
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * @author Kim Hems?? Rasmussen <kimhemsoe@gmail.com>
 */",
 "/**
     * Fetches an entry from the cache.
     *
     * @param string $id cache id The id of the cache entry to fetch.
     * @return string The cached data or FALSE, if no cache entry exists for the given id.
     */",
 "/**
     * Test if an entry exists in the cache.
     *
     * @param string $id cache id The cache id of the entry to check for.
     * @return boolean TRUE if a cache entry exists for the given cache id, FALSE otherwise.
     */",
 "/**
     * Puts data into the cache.
     *
     * @param string $id The cache id.
     * @param string $data The cache entry/data.
     * @param int $lifeTime The lifetime. If != 0, sets a specific lifetime for this cache entry (0 => infinite lifeTime).
     * @return boolean TRUE if the entry was successfully stored in the cache, FALSE otherwise.
     */",
 "/**
     * Deletes a cache entry.
     *
     * @param string $id cache id
     * @return boolean TRUE if the cache entry was successfully deleted, FALSE otherwise.
     */",
 "/**
     * Retrieves cached information from data store
     *
     * The server's statistics array has the following values:
     *
     * - <b>hits</b>
     * Number of keys that have been requested and found present.
     *
     * - <b>misses</b>
     * Number of items that have been requested and not found.
     *
     * - <b>uptime</b>
     * Time that the server is running.
     *
     * - <b>memory_usage</b>
     * Memory used by this server to store items.
     *
     * - <b>memory_available</b>
     * Memory allowed to use for storage.
     *
     * @since   2.2
     * @var     array Associative array with server's statistics if available, NULL otherwise.
     */",
 "/**
 * Interface for cache drivers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Fabio B. Silva <fabio.bat.silva@gmail.com>
 */",
 "/**
     * Sets style foreground color.
     *
     * @param   string  $color  color name
     *
     * @api
     */",
 "/**
     * Sets style background color.
     *
     * @param   string  $color  color name
     *
     * @api
     */",
 "/**
     * Sets some specific style option.
     *
     * @param   string  $option     option name
     *
     * @api
     */",
 "/**
     * Unsets some specific style option.
     *
     * @param   string  $option     option name
     */",
 "/**
     * Set multiple style options at once.
     *
     * @param   array   $options
     */",
 "/**
     * Applies the style to a given text.
     *
     * @param string $text The text to style
     *
     * @return string
     */",
 "/**
 * Formatter style interface for defining styles.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * @api
 */",
 "/**
*Classtogenerateentityrepositoryclasses
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.org
*@since2.0
*@version$Revision$
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"UPPER\" \"(\" StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
 * DeleteStatement = DeleteClause [WhereClause]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 * @Target(\"CLASS\")
 */",
 "/**
     * Sets the helper set associated with this helper.
     *
     * @param HelperSet $helperSet A HelperSet instance
     *
     * @api
     */",
 "/**
     * Gets the helper set associated with this helper.
     *
     * @return HelperSet A HelperSet instance
     *
     * @api
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     *
     * @api
     */",
 "/**
 * HelperInterface is the interface all helpers must implement.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
*Resolveproxyclassnametoafilenamebasedonthefollowingpattern.
*
*1.RemoveProxynamespacefromclassname
*2.Removenamespaceseperatorsfromremainingclassname.
*3.ReturnPHPfilenamefromproxy-dirwiththeresultfrom2.
*
*@paramstring$proxyDir
*@paramstring$proxyNamespace
*@paramstring$className
*@returnstring
*/",
 "/**
*Registerandreturnautoloadercallbackforthegivenproxydirand
*namespace.
*
*@paramstring$proxyDir
*@paramstring$proxyNamespace
*@paramClosure$notFoundCallbackInvokedwhentheproxyfileisnotfound.
*@returnClosure
*/",
 "/**
*SpecialAutoloaderforProxyclassesbecausethemnotbeingPSR-0compatible.
*
*@authorBenjaminEberlei<kontakt@beberlei.de>
*/",
 "/**
     * Generates an identifier for an entity.
     *
     * @param \Doctrine\ORM\Entity $entity
     * @return mixed
     */",
 "/**
     * Gets whether this generator is a post-insert generator which means that
     * {@link generate()} must be called after the entity has been inserted
     * into the database.
     *
     * By default, this method returns FALSE. Generators that have this requirement
     * must override this method and return TRUE.
     *
     * @return boolean
     */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
     * Called if a required option was not found but is required
     *
     * @param string $field which field cannot be processed?
     * @param string $expectedOption which option is required
     * @param string $hint  Can optionally be used to supply a tip for common mistakes,
     *                      e.g. \"Did you think of the plural s?\"
     * @return MappingException
     */",
 "/**
     * Generic exception for invalid mappings.
     *
     * @param string $fieldName
     */",
 "/**
     * Exception for reflection exceptions - adds the entity name,
     * because there might be long classnames that will be shortened
     * within the stacktrace
     *
     * @param string $entity The entity's name
     * @param \ReflectionException $previousException
     */",
 "/**
     *
     * @param string $entity The entity's name
     * @param string $fieldName The name of the field that was already declared
     */",
 "/**
     * Throws an exception that indicates that a class used in a discriminator map does not exist.
     * An example would be an outdated (maybe renamed) classname.
     *
     * @param string $className The class that could not be found
     * @param string $owningClass The class that declares the discriminator map.
     * @return self
     */",
 "/**
     * @param  string $className
     * @param  string $columnName
     * @return self
     */",
 "/**
     * @param string $className
     * @param string $targetEntity
     * @param string $targetField
     * @return self
     */",
 "/**
 * A MappingException indicates that something is wrong with the mapping setup.
 *
 * @since 2.0
 */",
 "/**
     * Register a new exporter driver class under a specified name
     *
     * @param string $name
     * @param string $class
     */",
 "/**
     * Get a exporter driver instance
     *
     * @param string $type   The type to get (yml, xml, etc.)
     * @param string $source    The directory where the exporter will export to
     * @return AbstractExporter $exporter
     */",
 "/**
 * Class used for converting your mapping information between the
 * supported formats: yaml, xml, and php/annotation.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * @param AbstractPlatform $platform
     */",
 "/**
     * @param Schema $schema
     */",
 "/**
     * Generate DDL Statements to create the accepted table with all its dependencies.
     *
     * @param Table $table
     */",
 "/**
     * @param Table $localTable
     * @param ForeignKeyConstraint $fkConstraint
     */",
 "/**
     * @param Table $table
     * @param Index $index
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
     * @return array
     */",
 "/**
     * Get all queries collected so far.
     *
     * @return array
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
*@inheritdoc
*/",
 "/**
*Simplelexerfordocblockannotations.
*
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*/",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * List the indexes for a given table returning an array of Index instances.
     *
     * Keys of the portable indexes list are all lower-cased.
     *
     * @param string $table The name of the table
     * @return Index[] $tableIndexes
     */",
 "/**
 * SQL Server Schema Manager
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Juozas Kaziukenas <juozas@juokaz.com>
 * @since       2.0
 */",
 "/**
     * Helper method to show an object as string.
     *
     * @param  object $obj
     * @return string
     */",
 "/**
 * Contains exception messages for all invalid lifecycle state exceptions inside UnitOfWork
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new instance of the <tt>ProxyFactory</tt> class that is
     * connected to the given <tt>EntityManager</tt>.
     *
     * @param EntityManager $em The EntityManager the new factory works for.
     * @param string $proxyDir The directory to use for the proxy classes. It must exist.
     * @param string $proxyNs The namespace to use for the proxy classes.
     * @param boolean $autoGenerate Whether to automatically generate proxy classes.
     */",
 "/**
     * Gets a reference proxy instance for the entity of the given type and identified by
     * the given identifier.
     *
     * @param string $className
     * @param mixed $identifier
     * @return object
     */",
 "/**
*GeneratetheProxyfilename
*
*@paramstring$className
*@paramstring$baseDirOptionalbasedirectoryforproxyfilenamegeneration.
*Ifnotspecified,thedirectoryconfiguredontheConfigurationofthe
*EntityManagerwillbeusedbythisfactory.
*@returnstring
*/",
 "/**
*Generatesproxyclassesforallgivenclasses.
*
*@paramarray$classesTheclasses(ClassMetadatainstances)forwhichtogenerateproxies.
*@paramstring$toDirThetargetdirectoryoftheproxyclasses.Ifnotspecified,the
*directoryconfiguredontheConfigurationoftheEntityManagerused
*bythisfactoryisused.
*@returnintNumberofgeneratedproxies.
*/",
 "/**
*Generatesaproxyclassfile.
*
*@param$class
*@param$proxyClassName
*@param$fileThepathofthefiletowriteto.
*/",
 "/**
     * Generates the methods of a proxy class.
     *
     * @param ClassMetadata $class
     * @return string The code of the generated methods.
     */",
 "/**
     * Check if the method is a short identifier getter.
     *
     * What does this mean? For proxy objects the identifier is already known,
     * however accessing the getter for this identifier usually triggers the
     * lazy loading, leading to a query that may not be necessary if only the
     * ID is interesting for the userland code (for example in views that
     * generate links to the entity, but do not display anything else).
     *
     * @param ReflectionMethod $method
     * @param ClassMetadata $class
     * @return bool
     */",
 "/**
     * Generates the code for the __sleep method for a proxy class.
     *
     * @param $class
     * @return string
     */",
 "/**
 * This factory is used to create proxy objects for entities at runtime.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Giorgio Sironi <piccoloprincipeazzurro@gmail.com>
 * @since 2.0
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Bind a array of values to bound parameters
     *
     * @param array $values
     * @return boolean
     */",
 "/**
     * @return null|false|array
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * @author Kim Hems?? Rasmussen <kimhemsoe@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param ClasseMetadata $classMetadata
     * @param ObjectManager $objectManager
     */",
 "/**
     * Retrieve associated ClassMetadata.
     *
     * @return ClassMetadata
     */",
 "/**
     * Retrieve associated ObjectManager.
     *
     * @return ObjectManager
     */",
 "/**
 * Class that holds event arguments for a loadMetadata event.
 *
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @since  2.2
 */",
 "/**
     * Converts a YAML string to a PHP array.
     *
     * @param string $value A YAML string
     *
     * @return array A PHP array representing the YAML string
     */",
 "/**
     * Dumps a given PHP variable to a YAML string.
     *
     * @param mixed $value The PHP variable to convert
     *
     * @return string The YAML string representing the PHP array
     *
     * @throws DumpException When trying to dump PHP resource
     */",
 "/**
     * Dumps a PHP array to a YAML string.
     *
     * @param array $value The PHP array to dump
     *
     * @return string The YAML string representing the PHP array
     */",
 "/**
     * Parses a scalar to a YAML string.
     *
     * @param scalar  $scalar
     * @param string  $delimiters
     * @param array   $stringDelimiters
     * @param integer &$i
     * @param Boolean $evaluate
     *
     * @return string A YAML string
     *
     * @throws ParseException When malformed inline YAML string is parsed
     */",
 "/**
     * Parses a quoted scalar to YAML.
     *
     * @param string  $scalar
     * @param integer $i
     *
     * @return string A YAML string
     *
     * @throws ParseException When malformed inline YAML string is parsed
     */",
 "/**
     * Parses a sequence to a YAML string.
     *
     * @param string  $sequence
     * @param integer $i
     *
     * @return string A YAML string
     *
     * @throws ParseException When malformed inline YAML string is parsed
     */",
 "/**
     * Parses a mapping to a YAML string.
     *
     * @param string  $mapping
     * @param integer $i
     *
     * @return string A YAML string
     *
     * @throws ParseException When malformed inline YAML string is parsed
     */",
 "/**
     * Evaluates scalars and replaces magic values.
     *
     * @param string $scalar
     *
     * @return string A YAML string
     */",
 "/**
     * Gets a regex that matches an unix timestamp
     *
     * @return string The regular expression
     */",
 "/**
 * Inline implements a YAML parser/dumper for the YAML inline syntax.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @Annotation
 * @Target(\"PROPERTY\")
 */",
 "/**
 * Type that maps an SQL INT to a PHP integer.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @param string|\Doctrine\DBAL\Schema\Table $table
     * @param \Doctrine\DBAL\Platforms\AbstractPlatform $platform
     */",
 "/**
     * @return string|\Doctrine\DBAL\Schema\Table
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @param string $sql
     * @return \Doctrine\DBAL\Event\SchemaDropTableEventArgs
     */",
 "/**
     * @return string
     */",
 "/**
 * Event Arguments used when the SQL query for dropping tables are generated inside Doctrine\DBAL\Platform\AbstractPlatform.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
 * Contains all DBAL LockModes
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * EmptyCollectionComparisonExpression ::= CollectionValuedPathExpression \"IS\" [\"NOT\"] \"EMPTY\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * Initializes a new SimpleAnnotationReader.
     */",
 "/**
     * Adds a namespace in which we will look for annotations.
     *
     * @param string $namespace
     */",
 "/**
     * Gets the annotations applied to a class.
     *
     * @param ReflectionClass $class The ReflectionClass of the class from which
     *                               the class annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets the annotations applied to a method.
     *
     * @param ReflectionMethod $property The ReflectionMethod of the method from which
     *                                   the annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets the annotations applied to a property.
     *
     * @param ReflectionProperty $property The ReflectionProperty of the property
     *                                     from which the annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets a class annotation.
     *
     * @param ReflectionClass $class The ReflectionClass of the class from which
     *                               the class annotations should be read.
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
     * Gets a method annotation.
     *
     * @param ReflectionMethod $method
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
     * Gets a property annotation.
     *
     * @param ReflectionProperty $property
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
 * Simple Annotation Reader.
 *
 * This annotation reader is intended to be used in projects where you have
 * full-control over all annotations that are available.
 *
 * @since  2.2
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 * @author Fabio B. Silva <fabio.bat.silva@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * If there is no readline support for the current PHP executable
     * a \RuntimeException exception is thrown.
     *
     * @param Application $application An application instance
     *
     * @throws \RuntimeException When Readline extension is not enabled
     */",
 "/**
     * Runs the shell.
     */",
 "/**
     * Tries to return autocompletion for the current entered text.
     *
     * @param string  $text     The last segment of the entered text
     * @param integer $position The current position
     */",
 "/**
     * Returns the shell header.
     *
     * @return string The header string
     */",
 "/**
 * A Shell wraps an Application to add shell capabilities to it.
 *
 * This class only works with a PHP compiled with readline support
 * (either --with-readline or --with-libedit)
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructs the Sqlsrv PDO DSN.
     *
     * @return string  The DSN.
     */",
 "/**
 * The PDO-based Sqlsrv driver.
 *
 * @since 2.0
 */",
 "/**
     * Fetches/creates the given services
     *
     * A service in this context is connection or a manager instance
     *
     * @param string $name name of the service
     * @return object instance of the given service
     */",
 "/**
     * Resets the given services
     *
     * A service in this context is connection or a manager instance
     *
     * @param string $name name of the service
     * @return void
     */",
 "/**
     * Get the name of the registry
     *
     * @return string
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
 * Abstract implementation of the ManagerRegistry contract.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.2
 * @author  Fabien Potencier <fabien@symfony.com>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Lukas Kahwe Smith <smith@pooteeweet.org>
 */",
 "/**
 * SimpleCaseExpression ::= \"CASE\" CaseOperand SimpleWhenClause {SimpleWhenClause}* \"ELSE\" ScalarExpression \"END\"
 *
 * @since   2.2
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * FromClause ::= \"FROM\" IdentificationVariableDeclaration {\",\" IdentificationVariableDeclaration}
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadataInfo $classMetadata
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Retrieve associated ClassMetadata.
     *
     * @return \Doctrine\ORM\Mapping\ClassMetadataInfo
     */",
 "/**
     * Retrieve associated EntityManager.
     *
     * @return \Doctrine\ORM\EntityManager
     */",
 "/**
 * Class that holds event arguments for a loadMetadata event.
 *
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @since  2.0
 */",
 "/**
 * ArithmeticTerm ::= ArithmeticFactor {(\"*\" | \"/\") ArithmeticFactor}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"LOWER\" \"(\" StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * PostgreSQL Keywordlist
 *
 * @license     BSD http://www.opensource.org/licenses/bsd-license.php
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Marcelo Santos Araujo <msaraujo@php.net>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * ListCommand displays the list of all available commands for the application.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Add Inverse Join Columns
     *
     * @param string $columnName
     * @param string $referencedColumnName
     * @param bool $nullable
     * @param bool $unique
     * @param string $onDelete
     * @param string $columnDef
     */",
 "/**
     * @return ClassMetadataBuilder
     */",
 "/**
 * ManyToMany Association Builder
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructs an TableDiff object.
     *
     * @param array(string=>Column) $addedColumns
     * @param array(string=>Column) $changedColumns
     * @param array(string=>bool)   $removedColumns
     * @param array(string=>Index)  $addedIndexes
     * @param array(string=>Index)  $changedIndexes
     * @param array(string=>bool)   $removedIndexes
     */",
 "/**
 * Table Diff
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @copyright Copyright (C) 2005-2009 eZ Systems AS. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new FileDriver that looks in the given path(s) for mapping
     * documents and operates in the specified operating mode.
     *
     * @param string|array $paths One or multiple paths where mapping documents can be found.
     */",
 "/**
     * Append lookup paths to metadata driver.
     *
     * @param array $paths
     */",
 "/**
     * Retrieve the defined metadata lookup paths.
     *
     * @return array
     */",
 "/**
     * Get the file extension used to look for mapping files under
     *
     * @return void
     */",
 "/**
     * Set the file extension used to look for mapping files under
     *
     * @param string $fileExtension The file extension to set
     * @return void
     */",
 "/**
*{@inheritDoc}
*/",
 "/**
*{@inheritDoc}
*/",
 "/**
*{@inheritDoc}
*/",
 "/**
*Locatethefilethatcontainsthemetadatainformationforagivenclassname.
*
*Thisbehaviorisinpependentoftheactualcontentofthefile.Itjustdetects
*thefilewhichisresponsibleforthegivenclassname.
*
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*/",
 "/**
     * Initializes a new <tt>BasicEntityPersister</tt> that uses the given EntityManager
     * and persists instances of the class described by the given ClassMetadata descriptor.
     *
     * @param \Doctrine\ORM\EntityManager $em
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
     * @return \Doctrine\ORM\Mapping\ClassMetadata
     */",
 "/**
     * Adds an entity to the queued insertions.
     * The entity remains queued until {@link executeInserts} is invoked.
     *
     * @param object $entity The entity to queue for insertion.
     */",
 "/**
     * Executes all queued entity insertions and returns any generated post-insert
     * identifiers that were created as a result of the insertions.
     *
     * If no inserts are queued, invoking this method is a NOOP.
     *
     * @return array An array of any generated post-insert IDs. This will be an empty array
     *               if the entity class does not use the IDENTITY generation strategy.
     */",
 "/**
     * Retrieves the default version value which was created
     * by the preceding INSERT statement and assigns it back in to the
     * entities version field.
     *
     * @param object $entity
     * @param mixed $id
     */",
 "/**
     * Fetch the current version value of a versioned entity.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $versionedClass
     * @param mixed $id
     * @return mixed
     */",
 "/**
     * Updates a managed entity. The entity is updated according to its current changeset
     * in the running UnitOfWork. If there is no changeset, nothing is updated.
     *
     * The data to update is retrieved through {@link _prepareUpdateData}.
     * Subclasses that override this method are supposed to obtain the update data
     * in the same way, through {@link _prepareUpdateData}.
     *
     * Subclasses are also supposed to take care of versioning when overriding this method,
     * if necessary. The {@link _updateTable} method can be used to apply the data retrieved
     * from {@_prepareUpdateData} on the target tables, thereby optionally applying versioning.
     *
     * @param object $entity The entity to update.
     */",
 "/**
     * Performs an UPDATE statement for an entity on a specific table.
     * The UPDATE can optionally be versioned, which requires the entity to have a version field.
     *
     * @param object $entity The entity object being updated.
     * @param string $quotedTableName The quoted name of the table to apply the UPDATE on.
     * @param array $updateData The map of columns to update (column => value).
     * @param boolean $versioned Whether the UPDATE should be versioned.
     */",
 "/**
     * @todo Add check for platform if it supports foreign keys/cascading.
     * @param array $identifier
     * @return void
     */",
 "/**
     * Deletes a managed entity.
     *
     * The entity to delete must be managed and have a persistent identifier.
     * The deletion happens instantaneously.
     *
     * Subclasses may override this method to customize the semantics of entity deletion.
     *
     * @param object $entity The entity to delete.
     */",
 "/**
     * Prepares the changeset of an entity for database insertion (UPDATE).
     *
     * The changeset is obtained from the currently running UnitOfWork.
     *
     * During this preparation the array that is passed as the second parameter is filled with
     * <columnName> => <value> pairs, grouped by table name.
     *
     * Example:
     * <code>
     * array(
     *    'foo_table' => array('column1' => 'value1', 'column2' => 'value2', ...),
     *    'bar_table' => array('columnX' => 'valueX', 'columnY' => 'valueY', ...),
     *    ...
     * )
     * </code>
     *
     * @param object $entity The entity for which to prepare the data.
     * @return array The prepared data.
     */",
 "/**
     * Prepares the data changeset of a managed entity for database insertion (initial INSERT).
     * The changeset of the entity is obtained from the currently running UnitOfWork.
     *
     * The default insert data preparation is the same as for updates.
     *
     * @param object $entity The entity for which to prepare the data.
     * @return array The prepared data for the tables to update.
     * @see _prepareUpdateData
     */",
 "/**
     * Gets the name of the table that owns the column the given field is mapped to.
     *
     * The default implementation in BasicEntityPersister always returns the name
     * of the table the entity type of this persister is mapped to, since an entity
     * is always persisted to a single table with a BasicEntityPersister.
     *
     * @param string $fieldName The field name.
     * @return string The table name.
     */",
 "/**
     * Loads an entity by a list of field criteria.
     *
     * @param array $criteria The criteria by which to load the entity.
     * @param object $entity The entity to load the data into. If not specified,
     *        a new entity is created.
     * @param $assoc The association that connects the entity to load to another entity, if any.
     * @param array $hints Hints for entity creation.
     * @param int $lockMode
     * @param int $limit Limit number of results
     * @return object The loaded and managed entity instance or NULL if the entity can not be found.
     * @todo Check identity map? loadById method? Try to guess whether $criteria is the id?
     */",
 "/**
     * Loads an entity of this persister's mapped class as part of a single-valued
     * association from another entity.
     *
     * @param array $assoc The association to load.
     * @param object $sourceEntity The entity that owns the association (not necessarily the \"owning side\").
     * @param array $identifier The identifier of the entity to load. Must be provided if
     *                          the association to load represents the owning side, otherwise
     *                          the identifier is derived from the $sourceEntity.
     * @return object The loaded and managed entity instance or NULL if the entity can not be found.
     */",
 "/**
     * Refreshes a managed entity.
     *
     * @param array $id The identifier of the entity as an associative array from
     *                  column or field names to values.
     * @param object $entity The entity to refresh.
     */",
 "/**
     * Loads a list of entities by a list of field criteria.
     *
     * @param array $criteria
     * @param array $orderBy
     * @param int $limit
     * @param int $offset
     * @return array
     */",
 "/**
     * Get (sliced or full) elements of the given collection.
     *
     * @param array $assoc
     * @param object $sourceEntity
     * @param int|null $offset
     * @param int|null $limit
     * @return array
     */",
 "/**
     * Load an array of entities from a given dbal statement.
     *
     * @param array $assoc
     * @param \Doctrine\DBAL\Statement $stmt
     *
     * @return array
     */",
 "/**
     * Hydrate a collection from a given dbal statement.
     *
     * @param array $assoc
     * @param \Doctrine\DBAL\Statement $stmt
     * @param PersistentCollection $coll
     *
     * @return array
     */",
 "/**
     * Loads a collection of entities of a many-to-many association.
     *
     * @param ManyToManyMapping $assoc The association mapping of the association being loaded.
     * @param object $sourceEntity The entity that owns the collection.
     * @param PersistentCollection $coll The collection to fill.
     * @param int|null $offset
     * @param int|null $limit
     * @return array
     */",
 "/**
     * Gets the SELECT SQL to select one or more entities by a set of field criteria.
     *
     * @param array $criteria
     * @param AssociationMapping $assoc
     * @param string $orderBy
     * @param int $lockMode
     * @param int $limit
     * @param int $offset
     * @param array $orderBy
     * @return string
     * @todo Refactor: _getSelectSQL(...)
     */",
 "/**
     * Gets the ORDER BY SQL snippet for ordered collections.
     *
     * @param array $orderBy
     * @param string $baseTableAlias
     * @return string
     */",
 "/**
     * Gets the SQL fragment with the list of columns to select when querying for
     * an entity in this persister.
     *
     * Subclasses should override this method to alter or change the select column
     * list SQL fragment. Note that in the implementation of BasicEntityPersister
     * the resulting SQL fragment is generated only once and cached in {@link _selectColumnListSql}.
     * Subclasses may or may not do the same.
     *
     * @return string The SQL fragment.
     * @todo Rename: _getSelectColumnsSQL()
     */",
 "/**
     * Gets the SQL join fragment used when selecting entities from an association.
     *
     * @param string $field
     * @param array $assoc
     * @param ClassMetadata $class
     * @param string $alias
     *
     * @return string
     */",
 "/**
     * Gets the SQL join fragment used when selecting entities from a
     * many-to-many association.
     *
     * @param ManyToManyMapping $manyToMany
     * @return string
     */",
 "/**
     * Gets the INSERT SQL used by the persister to persist a new entity.
     *
     * @return string
     */",
 "/**
     * Gets the list of columns to put in the INSERT SQL statement.
     *
     * Subclasses should override this method to alter or change the list of
     * columns placed in the INSERT statements used by the persister.
     *
     * @return array The list of columns.
     */",
 "/**
     * Gets the SQL snippet of a qualified column name for the given field name.
     *
     * @param string $field The field name.
     * @param ClassMetadata $class The class that declares this field. The table this class is
     *                             mapped to must own the column for the given field.
     * @param string $alias
     */",
 "/**
     * Gets the SQL table alias for the given class name.
     *
     * @param string $className
     * @return string The SQL table alias.
     * @todo Reconsider. Binding table aliases to class names is not such a good idea.
     */",
 "/**
     * Lock all rows of this entity matching the given criteria with the specified pessimistic lock mode
     *
     * @param array $criteria
     * @param int $lockMode
     * @return void
     */",
 "/**
     * Get the FROM and optionally JOIN conditions to lock the entity managed by this persister.
     *
     * @return string
     */",
 "/**
     * Gets the conditional SQL fragment used in the WHERE clause when selecting
     * entities in this persister.
     *
     * Subclasses are supposed to override this method if they intend to change
     * or alter the criteria by which entities are selected.
     *
     * @param array $criteria
     * @param AssociationMapping $assoc
     * @return string
     */",
 "/**
     * Return an array with (sliced or full list) of elements in the specified collection.
     *
     * @param array $assoc
     * @param object $sourceEntity
     * @param int $offset
     * @param int $limit
     * @return array
     */",
 "/**
     * Loads a collection of entities in a one-to-many association.
     *
     * @param array $assoc
     * @param object $sourceEntity
     * @param PersistentCollection $coll The collection to load/fill.
     * @param int|null $offset
     * @param int|null $limit
     */",
 "/**
     * Build criteria and execute SQL statement to fetch the one to many entities from.
     *
     * @param array $assoc
     * @param object $sourceEntity
     * @param int|null $offset
     * @param int|null $limit
     * @return \Doctrine\DBAL\Statement
     */",
 "/**
     * Expand the parameters from the given criteria and use the correct binding types if found.
     *
     * @param  array $criteria
     * @return array
     */",
 "/**
     * Infer field type to be used by parameter type casting.
     *
     * @param string $field
     * @param mixed $value
     * @return integer
     */",
 "/**
     * Retrieve parameter value
     *
     * @param mixed $value
     * @return mixed
     */",
 "/**
     * Retrieve an invidiual parameter value
     *
     * @param mixed $value
     * @return mixed
     */",
 "/**
     * Checks whether the given managed entity exists in the database.
     *
     * @param object $entity
     * @return boolean TRUE if the entity exists in the database, FALSE otherwise.
     */",
 "/**
     * Generates the appropriate join SQL for the given join column.
     *
     * @param array $joinColumns The join columns definition of an association.
     * @return string LEFT JOIN if one of the columns is nullable, INNER JOIN otherwise.
     */",
 "/**
     * Gets an SQL column alias for a column name.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     * Generates the filter SQL for a given entity and table alias.
     *
     * @param ClassMetadata $targetEntity Metadata of the target entity.
     * @param string $targetTableAlias The table alias of the joined/selected table.
     *
     * @return string The SQL query part to add to a query.
     */",
 "/**
 * A BasicEntityPersiter maps an entity to a single table in a relational database.
 *
 * A persister is always responsible for a single entity type.
 *
 * EntityPersisters are used during a UnitOfWork to apply any changes to the persistent
 * state of entities onto a relational database when the UnitOfWork is committed,
 * as well as for basic querying of entities and their associations (not DQL).
 *
 * The persisting operations that are invoked during a commit of a UnitOfWork to
 * persist the persistent entity state are:
 *
 *   - {@link addInsert} : To schedule an entity for insertion.
 *   - {@link executeInserts} : To execute all scheduled insertions.
 *   - {@link update} : To update the persistent state of an entity.
 *   - {@link delete} : To delete the persistent state of an entity.
 *
 * As can be seen from the above list, insertions are batched and executed all at once
 * for increased efficiency.
 *
 * The querying operations invoked during a UnitOfWork, either through direct find
 * requests or lazy-loading, are the following:
 *
 *   - {@link load} : Loads (the state of) a single, managed entity.
 *   - {@link loadAll} : Loads multiple, managed entities.
 *   - {@link loadOneToOneEntity} : Loads a one/many-to-one entity association (lazy-loading).
 *   - {@link loadOneToManyCollection} : Loads a one-to-many entity association (lazy-loading).
 *   - {@link loadManyToManyCollection} : Loads a many-to-many entity association (lazy-loading).
 *
 * The BasicEntityPersister implementation provides the default behavior for
 * persisting and querying entities that are mapped to a single database table.
 *
 * Subclasses can be created to provide custom persisting and querying strategies,
 * i.e. spanning multiple tables.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Giorgio Sironi <piccoloprincipeazzurro@gmail.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Alexander <iam.asm89@gmail.com>
 * @since 2.0
 */",
 "/**
     * @param \Doctrine\DBAL\Schema\Column $column
     * @param \Doctrine\DBAL\Schema\TableDiff $tableDiff
     * @param \Doctrine\DBAL\Platforms\AbstractPlatform $platform
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\Column
     */",
 "/**
     * @return \Doctrine\DBAL\Schema\TableDiff
     */",
 "/**
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @param string|array $sql
     * @return \Doctrine\DBAL\Event\SchemaAlterTableRemoveColumnEventArgs
     */",
 "/**
     * @return array
     */",
 "/**
 * Event Arguments used when SQL queries for removing table columns are generated inside Doctrine\DBAL\Platform\*Platform.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.2
 * @author      Jan Sorgalla <jsorgalla@googlemail.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"TRIM\" \"(\" [[\"LEADING\" | \"TRAILING\" | \"BOTH\"] [char] \"FROM\"] StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Expression class for building DQL OR clauses
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"SQRT\" \"(\" SimpleArithmeticExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param EntityManager $em
     */",
 "/**
     * Get all the enabled filters.
     *
     * @return array The enabled filters.
     */",
 "/**
     * Enables a filter from the collection.
     *
     * @param string $name Name of the filter.
     *
     * @throws \InvalidArgumentException If the filter does not exist.
     *
     * @return SQLFilter The enabled filter.
     */",
 "/**
     * Disables a filter.
     *
     * @param string $name Name of the filter.
     *
     * @return SQLFilter The disabled filter.
     *
     * @throws \InvalidArgumentException If the filter does not exist.
     */",
 "/**
     * Get an enabled filter from the collection.
     *
     * @param string $name Name of the filter.
     *
     * @return SQLFilter The filter.
     *
     * @throws \InvalidArgumentException If the filter is not enabled.
     */",
 "/**
     * @return boolean True, if the filter collection is clean.
     */",
 "/**
     * Generates a string of currently enabled filters to use for the cache id.
     *
     * @return string
     */",
 "/**
     * Set the filter state to dirty.
     */",
 "/**
 * Collection class for all the query filters.
 *
 * @author Alexander <iam.asm89@gmail.com>
 */",
 "/**
*Gettherealclassnameofaclassnamethatcouldbeaproxy.
*
*@paramstring
*@returnstring
*/",
 "/**
*Gettherealclassnameofanobject(evenifitsaproxy)
*
*@paramobject
*@returnstring
*/",
 "/**
*Gettherealparentclassnameofaclassorobject
*
*@paramstring
*@returnstring
*/",
 "/**
*Createanewreflectionclass
*
*@paramstring
*@returnReflectionClass
*/",
 "/**
*Createanewreflectionobject
*
*@paramobject
*@returnReflectionObject
*/",
 "/**
*Givenaclassnameandaproxynamespacereturntheproxyname.
*
*@paramstring$className
*@paramstring$proxyNamespace
*@returnstring
*/",
 "/**
*Classandreflectionrelatedfunctionalityforobjectsthat
*mightornotbeproxyobjectsatthemoment.
*
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorJohannesSchmitt<schmittjoh@gmail.com>
*/",
 "/**
 * Container for all DBAL events.
 *
 * This class cannot be instantiated.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param string    $message  The error message
     * @param integer   $lineno   The line where the error occurred
     * @param integer   $snippet  The snippet of code near the problem
     * @param string    $filename The file name where the error occurred
     * @param Exception $previous The previous exception
     */",
 "/**
     * Gets the snippet of code near the error.
     *
     * @return string The snippet of code
     */",
 "/**
     * Sets the snippet of code near the error.
     *
     * @param string $parsedFile The filename
     */",
 "/**
     * Gets the filename where the error occurred.
     *
     * This method returns null if a string is parsed.
     *
     * @return string The filename
     */",
 "/**
     * Sets the filename where the error occurred.
     *
     * @param string $parsedFile The filename
     */",
 "/**
     * Gets the line where the error occurred.
     *
     * @return integer The file line
     */",
 "/**
     * Sets the line where the error occurred.
     *
     * @param integer $parsedLine The file line
     */",
 "/**
 * Exception class thrown when an error occurs during parsing.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Gets the character used for identifier quoting.
     *
     * @return string
     * @override
     */",
 "/**
     * Returns the regular expression operator.
     *
     * @return string
     * @override
     */",
 "/**
     * Returns global unique identifier
     *
     * @return string to get global unique identifier
     * @override
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * Returns a series of strings concatinated
     *
     * concat() accepts an arbitrary number of parameters. Each parameter
     * must contain an expression or an array with expressions.
     *
     * @param string|array(string) strings that will be concatinated.
     * @override
     */",
 "/**
     * Two approaches to listing the table indexes. The information_schema is
     * prefered, because it doesn't cause problems with SQL keywords such as \"order\" or \"table\".
     *
     * @param string $table
     * @param string $currentDatabase
     * @return string
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column on the MySql platform.
     *
     * @params array $field
     */",
 "/** @override */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the COLLATION
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param string $collation   name of the collation
     * @return string  DBMS specific SQL code portion needed to set the COLLATION
     *                 of a field declaration.
     */",
 "/**
     * Whether the platform prefers identity columns for ID generation.
     * MySql prefers \"autoincrement\" identity columns since sequences can only
     * be emulated with a table.
     *
     * @return boolean
     * @override
     */",
 "/**
     * Whether the platform supports identity columns.
     * MySql supports this through AUTO_INCREMENT columns.
     *
     * @return boolean
     * @override
     */",
 "/**
     * create a new database
     *
     * @param string $name name of the database that should be created
     * @return string
     * @override
     */",
 "/**
     * drop an existing database
     *
     * @param string $name name of the database that should be dropped
     * @return string
     * @override
     */",
 "/**
     * create a new table
     *
     * @param string $tableName   Name of the database that should be created
     * @param array $columns  Associative array that contains the definition of each field of the new table
     *                       The indexes of the array entries are the names of the fields of the table an
     *                       the array entry values are associative arrays like those that are meant to be
     *                       passed with the field definitions to get[Type]Declaration() functions.
     *                          array(
     *                              'id' => array(
     *                                  'type' => 'integer',
     *                                  'unsigned' => 1
     *                                  'notnull' => 1
     *                                  'default' => 0
     *                              ),
     *                              'name' => array(
     *                                  'type' => 'text',
     *                                  'length' => 12
     *                              ),
     *                              'password' => array(
     *                                  'type' => 'text',
     *                                  'length' => 12
     *                              )
     *                          );
     * @param array $options  An associative array of table options:
     *                          array(
     *                              'comment' => 'Foo',
     *                              'charset' => 'utf8',
     *                              'collate' => 'utf8_unicode_ci',
     *                              'engine' => 'innodb',
     *                              'foreignKeys' => array(
     *                                  new ForeignKeyConstraint(),
     *                                  new ForeignKeyConstraint(),
     *                                  new ForeignKeyConstraint(),
     *                                  // etc
     *                              )
     *                          );
     *
     * @return void
     * @override
     */",
 "/**
     * Gets the SQL to alter an existing table.
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * Fix for DROP/CREATE index after foreign key change from OneToOne to ManyToOne
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to declare an integer type
     * field to be used in statements like CREATE TABLE.
     *
     * @param string  $name   name the field to be declared.
     * @param string  $field  associative array with the name of the properties
     *                        of the field being declared as array indexes.
     *                        Currently, the types of supported field
     *                        properties are as follows:
     *
     *                       unsigned
     *                        Boolean flag that indicates whether the field
     *                        should be declared as unsigned integer if
     *                        possible.
     *
     *                       default
     *                        Integer value to be used as default for this
     *                        field.
     *
     *                       notnull
     *                        Boolean flag that indicates whether this field is
     *                        constrained to not be set to null.
     * @return string  DBMS specific SQL code portion that should be used to
     *                 declare the specified field.
     * @override
     */",
 "/** @override */",
 "/** @override */",
 "/** @override */",
 "/**
     * Return the FOREIGN KEY query section dealing with non-standard options
     * as MATCH, INITIALLY DEFERRED, ON UPDATE, ...
     *
     * @param ForeignKeyConstraint $foreignKey
     * @return string
     * @override
     */",
 "/**
     * Gets the SQL to drop an index of a table.
     *
     * @param Index $index           name of the index to be dropped
     * @param string|Table $table          name of table that should be used in method
     * @override
     */",
 "/**
     * @param Index $index
     * @param Table $table
     */",
 "/**
     * Get the platform name for this instance.
     *
     * @return string
     */",
 "/**
     * Get SQL to safely drop a temporary table WITHOUT implicitly committing an open transaction.
     *
     * MySQL commits a transaction implicitly when DROP TABLE is executed, however not
     * if DROP TEMPORARY TABLE is executed.
     *
     * @throws \InvalidArgumentException
     * @param $table
     * @return string
     */",
 "/**
     * Gets the SQL Snippet used to declare a BLOB column type.
     */",
 "/**
 * The MySqlPlatform provides the behavior, features and SQL dialect of the
 * MySQL database platform. This platform represents a MySQL 5.0 or greater platform that
 * uses the InnoDB storage engine.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: MySQLPlatform
 */",
 "/**
     * Initializes a new instance of a class derived from <tt>AbstractHydrator</tt>.
     *
     * @param \Doctrine\ORM\EntityManager $em The EntityManager to use.
     */",
 "/**
     * Initiates a row-by-row hydration.
     *
     * @param object $stmt
     * @param object $resultSetMapping
     *
     * @return IterableResult
     */",
 "/**
     * Hydrates all rows returned by the passed statement instance at once.
     *
     * @param object $stmt
     * @param object $resultSetMapping
     * @return mixed
     */",
 "/**
     * Hydrates a single row returned by the current statement instance during
     * row-by-row hydration with {@link iterate()}.
     *
     * @return mixed
     */",
 "/**
     * Excutes one-time preparation tasks, once each time hydration is started
     * through {@link hydrateAll} or {@link iterate()}.
     */",
 "/**
     * Excutes one-time cleanup tasks at the end of a hydration that was initiated
     * through {@link hydrateAll} or {@link iterate()}.
     */",
 "/**
     * Hydrates a single row from the current statement instance.
     *
     * Template method.
     *
     * @param array $data The row data.
     * @param array $cache The cache to use.
     * @param mixed $result The result to fill.
     */",
 "/**
     * Hydrates all rows from the current statement instance at once.
     */",
 "/**
     * Processes a row of the result set.
     *
     * Used for identity-based hydration (HYDRATE_OBJECT and HYDRATE_ARRAY).
     * Puts the elements of a result row into a new array, grouped by the dql alias
     * they belong to. The column names in the result set are mapped to their
     * field names during this procedure as well as any necessary conversions on
     * the values applied. Scalar values are kept in a specfic key 'scalars'.
     *
     * @param array $data SQL Result Row
     * @param array &$cache Cache for column to field result information
     * @param array &$id Dql-Alias => ID-Hash
     * @param array &$nonemptyComponents Does this DQL-Alias has at least one non NULL value?
     *
     * @return array  An array with all the fields (name => value) of the data row,
     *                grouped by their component alias.
     */",
 "/**
     * Processes a row of the result set.
     *
     * Used for HYDRATE_SCALAR. This is a variant of _gatherRowData() that
     * simply converts column names to field names and properly converts the
     * values according to their types. The resulting row has the same number
     * of elements as before.
     *
     * @param array $data
     * @param array $cache
     *
     * @return array The processed row.
     */",
 "/**
     * Register entity as managed in UnitOfWork.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     * @param object $entity
     * @param array $data
     *
     * @todo The \"$id\" generation is the same of UnitOfWork#createEntity. Remove this duplication somehow
     */",
 "/**
 * Base class for all hydrators. A hydrator is a class that provides some form
 * of transformation of an SQL result set into another structure.
 *
 * @since  2.0
 * @author Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author Roman Borschel <roman@code-factory.org>
 * @author Guilherme Blanco <guilhermeblanoc@hotmail.com>
 */",
 "/**
 * JoinVariableDeclaration ::= Join [IndexBy]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Add a namespace with one or many directories to look for files or null for the include path.
     *
     * Loading of this namespaces will be done with a PSR-0 namespace loading algorithm.
     *
     * @param string $namespace
     * @param string|array|null $dirs
     */",
 "/**
     * Register multiple namespaces
     *
     * Loading of this namespaces will be done with a PSR-0 namespace loading algorithm.
     *
     * @param array $namespaces
     */",
 "/**
     * Register an autoloading callabale for annotations, much like spl_autoload_register().
     *
     * NOTE: These class loaders HAVE to be silent when a class was not found!
     * IMPORTANT: Loaders have to return true if they loaded a class that could contain the searched annotation class.
     *
     * @param callabale $callabale
     */",
 "/**
*Autoloadanannotationclasssilently.
*
*@paramstring$class
*@returnvoid
*/"
]
