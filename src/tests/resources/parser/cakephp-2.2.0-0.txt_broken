 ["/**
 * testIniCheck method
 *
 * @return void
 */",
 "/**
 * check should accept a user array.
 *
 * @return void
 */",
 "/**
 * Test case for the IniAcl implementation
 *
 * @package       Cake.Test.Case.Controller.Component.Acl
 */",
 "/**
 * Constructor
 *
 * The execution of the script is stopped after dispatching the request with
 * a status code of either 0 or 1 according to the result of the dispatch.
 *
 * @param array $args the argv from PHP
 * @param boolean $bootstrap Should the environment be bootstrapped.
 */",
 "/**
 * Run the dispatcher
 *
 * @param array $argv The argv from PHP
 * @return void
 */",
 "/**
 * Defines core configuration.
 *
 * @return void
 */",
 "/**
 * Defines current working environment.
 *
 * @return void
 * @throws CakeException
 */",
 "/**
 * Initializes the environment and loads the Cake core.
 *
 * @return boolean Success.
 */",
 "/**
 * Set the error/exception handlers for the console
 * based on the `Error.consoleHandler`, and `Exception.consoleHandler` values
 * if they are set. If they are not set, the default ConsoleErrorHandler will be
 * used.
 *
 * @return void
 */",
 "/**
 * Dispatches a CLI request
 *
 * @return boolean
 * @throws MissingShellMethodException
 */",
 "/**
 * Get shell to use, either plugin shell or application shell
 *
 * All paths in the loaded shell paths are searched.
 *
 * @param string $shell Optionally the name of a plugin
 * @return mixed An object
 * @throws MissingShellException when errors are encountered.
 */",
 "/**
 * Parses command line options and extracts the directory paths from $params
 *
 * @param array $args Parameters to parse
 * @return void
*/",
 "/**
 * Removes first argument and shifts other arguments up
 *
 * @return mixed Null if there are no arguments otherwise the shifted argument
*/",
 "/**
 * validatePost method
 *
 * @param Controller $controller
 * @return boolean
 */",
 "/**
 * TestSecurityComponent
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * fail method
 *
 * @return void
 */",
 "/**
 * redirect method
 *
 * @param string|array $url
 * @param mixed $code
 * @param mixed $exit
 * @return void
 */",
 "/**
 * Convenience method for header()
 *
 * @param string $status
 * @return void
 */",
 "/**
 * SecurityTestController
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * Tear-down method. Resets environment state.
 *
 * @return void
 */",
 "/**
 * test that initialize can set properties.
 *
 * @return void
 */",
 "/**
 * testStartup method
 *
 * @return void
 */",
 "/**
 * testRequirePostFail method
 *
 * @return void
 */",
 "/**
 * testRequirePostSucceed method
 *
 * @return void
 */",
 "/**
 * testRequireSecureFail method
 *
 * @return void
 */",
 "/**
 * testRequireSecureSucceed method
 *
 * @return void
 */",
 "/**
 * testRequireAuthFail method
 *
 * @return void
 */",
 "/**
 * testRequireAuthSucceed method
 *
 * @return void
 */",
 "/**
 * testRequirePostSucceedWrongMethod method
 *
 * @return void
 */",
 "/**
 * testRequireGetFail method
 *
 * @return void
 */",
 "/**
 * testRequireGetSucceed method
 *
 * @return void
 */",
 "/**
 * testRequireGetSucceedWrongMethod method
 *
 * @return void
 */",
 "/**
 * testRequirePutFail method
 *
 * @return void
 */",
 "/**
 * testRequirePutSucceed method
 *
 * @return void
 */",
 "/**
 * testRequirePutSucceedWrongMethod method
 *
 * @return void
 */",
 "/**
 * testRequireDeleteFail method
 *
 * @return void
 */",
 "/**
 * testRequireDeleteSucceed method
 *
 * @return void
 */",
 "/**
 * testRequireDeleteSucceedWrongMethod method
 *
 * @return void
 */",
 "/**
 * Simple hash validation test
 *
 * @return void
 */",
 "/**
 * Test that validatePost fails if you are missing the session information.
 *
 * @return void
 */",
 "/**
 * test that validatePost fails if any of its required fields are missing.
 *
 * @return void
 */",
 "/**
 * Test that objects can\'t be passed into the serialized string. This was a vector for RFI and LFI
 * attacks. Thanks to Felix Wilhelm
 *
 * @return void
 */",
 "/**
 * Tests validation of checkbox arrays
 *
 * @return void
 */",
 "/**
 * testValidatePostNoModel method
 *
 * @return void
 */",
 "/**
 * testValidatePostSimple method
 *
 * @return void
 */",
 "/**
 * Tests hash validation for multiple records, including locked fields
 *
 * @return void
 */",
 "/**
 * test ValidatePost with multiple select elements.
 *
 * @return void
 */",
 "/**
 * testValidatePostCheckbox method
 *
 * First block tests un-checked checkbox
 * Second block tests checked checkbox
 *
 * @return void
 */",
 "/**
 * testValidatePostHidden method
 *
 * @return void
 */",
 "/**
 * testValidatePostWithDisabledFields method
 *
 * @return void
 */",
 "/**
 * test validating post data with posted unlocked fields.
 *
 * @return void
 */",
 "/**
 * test that missing \'unlocked\' input causes failure
 *
 * @return void
 */",
 "/**
 * Test that validatePost fails when unlocked fields are changed.
 *
 * @return
 */",
 "/**
 * testValidateHiddenMultipleModel method
 *
 * @return void
 */",
 "/**
 * testValidateHasManyModel method
 *
 * @return void
 */",
 "/**
 * testValidateHasManyRecordsPass method
 *
 * @return void
 */",
 "/**
 * Test that values like Foo.0.1
 *
 * @return void
 */",
 "/**
 * testValidateHasManyRecords method
 *
 * validatePost should fail, hidden fields have been changed.
 *
 * @return void
 */",
 "/**
 * testFormDisabledFields method
 *
 * @return void
 */",
 "/**
 * testRadio method
 *
 * @return void
 */",
 "/**
 * test that a requestAction\'s controller will have the _Token appended to
 * the params.
 *
 * @return void
 * @see http://cakephp.lighthouseapp.com/projects/42648/tickets/68
 */",
 "/**
 * test that blackhole doesn\'t delete the _Token session key so repeat data submissions
 * stay blackholed.
 *
 * @link http://cakephp.lighthouseapp.com/projects/42648/tickets/214
 * @return void
 */",
 "/**
 * test that csrf checks are skipped for request action.
 *
 * @return void
 */",
 "/**
 * test setting
 *
 * @return void
 */",
 "/**
 * Test setting multiple nonces, when startup() is called more than once, (ie more than one request.)
 *
 * @return void
 */",
 "/**
 * test that nonces are consumed by form submits.
 *
 * @return void
 */",
 "/**
 * test that expired values in the csrfTokens are cleaned up.
 *
 * @return void
 */",
 "/**
 * test that when the key is missing the request is blackHoled
 *
 * @return void
 */",
 "/**
 * test that when the key is missing the request is blackHoled
 *
 * @return void
 */",
 "/**
 * test that csrfUseOnce = false works.
 *
 * @return void
 */",
 "/**
 * ensure that longer session tokens are not consumed
 *
 * @return void
 */",
 "/**
 * Test generateToken()
 *
 * @return void
 */",
 "/**
 * Test the limiting of CSRF tokens.
 *
 * @return void
 */",
 "/**
 * SecurityComponentTest class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testHasPrevious method
 *
 * @return void
 */",
 "/**
 * testHasNext method
 *
 * @return void
 */",
 "/**
 * testDisabledLink method
 *
 * @return void
 */",
 "/**
 * testSortLinks method
 *
 * @return void
 */",
 "/**
 * test that sort() works with virtual field order options.
 *
 * @return void
 */",
 "/**
 * testSortLinksUsingDirectionOption method
 *
 * @return void
 */",
 "/**
 * testSortLinksUsingDotNotation method
 *
 * @return void
 */",
 "/**
 * testSortKey method
 *
 * @return void
 */",
 "/**
 * Test that sortKey falls back to the default sorting options set
 * in the $params which are the default pagination options.
 *
 * @return void
 */",
 "/**
 * testSortDir method
 *
 * @return void
 */",
 "/**
 * Test that sortDir falls back to the default sorting options set
 * in the $params which are the default pagination options.
 *
 * @return void
 */",
 "/**
 * testSortAdminLinks method
 *
 * @return void
 */",
 "/**
 * testUrlGeneration method
 *
 * @return void
 */",
 "/**
 * test URL generation with prefix routes
 *
 * @return void
 */",
 "/**
 * testOptions method
 *
 * @return void
 */",
 "/**
 * testPassedArgsMergingWithUrlOptions method
 *
 * @return void
 */",
 "/**
 * testPassedArgsMergingWithUrlOptionsParamTypeQuerystring method
 *
 * @return void
 */",
 "/**
 * testPagingLinks method
 *
 * @return void
 */",
 "/**
 * test that __pagingLink methods use $options when $disabledOptions is an empty value.
 * allowing you to use shortcut syntax
 *
 * @return void
 */",
 "/**
 * testPagingLinksNotDefaultModel
 *
 * Test the creation of paging links when the non default model is used.
 *
 * @return void
 */",
 "/**
 * testGenericLinks method
 *
 * @return void
 */",
 "/**
 * Tests generation of generic links with preset options
 *
 * @return void
 */",
 "/**
 * testNumbers method
 *
 * @return void
 */",
 "/**
 * test first() and last() with tag options
 *
 * @return void
 */",
 "/**
 * test that on the last page you don\'t get a link ot the last page.
 *
 * @return void
 */",
 "/**
 * test first() on the first page.
 *
 * @return void
 */",
 "/**
 * test first() and options()
 *
 * @return void
 */",
 "/**
 * test first() on the fence-post
 *
 * @return void
 */",
 "/**
 * test Last method
 *
 * @return void
 */",
 "/**
 * undocumented function
 *
 * @return void
 */",
 "/**
 * testCounter method
 *
 * @return void
 */",
 "/**
 * testHasPage method
 *
 * @return void
 */",
 "/**
 * testWithPlugin method
 *
 * @return void
 */",
 "/**
 * testNextLinkUsingDotNotation method
 *
 * @return void
 */",
 "/**
 * Ensure that the internal link class object is called when the update key is present
 *
 * @return void
 */",
 "/**
 * test that paginatorHelper::link() uses JsHelper to make links when \'update\' key is present
 *
 * @return void
 */",
 "/**
 * test that mock classes injected into paginatorHelper are called when using link()
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * test that querystring urls can be generated.
 *
 * @return void
 */",
 "/**
 * test querystring paging link.
 *
 * @return void
 */",
 "/**
 * test that additional keys can be flagged as query string args.
 *
 * @return void
 */",
 "/**
 * test the current() method
 *
 * @return void
 */",
 "/**
 * test the defaultModel() method
 *
 * @return void
 */",
 "/**
 * test the numbers() method when there is only one page
 *
 * @return void
 */",
 "/**
 * test the numbers() method when there is only one page
 *
 * @return void
 */",
 "/**
 * PaginatorHelperTest class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testFullBaseURL method
 *
 * @return void
 */",
 "/**
 * testRouteDefaultParams method
 *
 * @return void
 */",
 "/**
 * testMapResources method
 *
 * @return void
 */",
 "/**
 * testMapResources with plugin controllers.
 *
 * @return void
 */",
 "/**
 * Test mapResources with a plugin and prefix.
 *
 * @return void
 */",
 "/**
 * testMultipleResourceRoute method
 *
 * @return void
 */",
 "/**
 * testGenerateUrlResourceRoute method
 *
 * @return void
 */",
 "/**
 * testUrlNormalization method
 *
 * @return void
 */",
 "/**
 * test generation of basic urls.
 *
 * @return void
 */",
 "/**
 * Tests using arrays in named parameters
 *
 * @return void
 */",
 "/**
 * Test generation of routes with query string parameters.
 *
 * @return void
 **/",
 "/**
 * test that regex validation of keyed route params is working.
 *
 * @return void
 **/",
 "/**
 * Test url generation with an admin prefix
 *
 * @return void
 */",
 "/**
 * testUrlGenerationWithExtensions method
 *
 * @return void
 */",
 "/**
 * testPluginUrlGeneration method
 *
 * @return void
 */",
 "/**
 * test that you can leave active plugin routes with plugin = null
 *
 * @return void
 */",
 "/**
 * testUrlParsing method
 *
 * @return void
 */",
 "/**
 * test that the persist key works.
 *
 * @return void
 */",
 "/**
 * testUuidRoutes method
 *
 * @return void
 */",
 "/**
 * testRouteSymmetry method
 *
 * @return void
 */",
 "/**
 * Test that Routing.prefixes are used when a Router instance is created
 * or reset
 *
 * @return void
 */",
 "/**
 * Test prefix routing and plugin combinations
 *
 * @return void
 */",
 "/**
 * testParseExtensions method
 *
 * @return void
 */",
 "/**
 * testSetExtensions method
 *
 * @return void
 */",
 "/**
 * testExtensionParsing method
 *
 * @return void
 */",
 "/**
 * testQuerystringGeneration method
 *
 * @return void
 */",
 "/**
 * testConnectNamed method
 *
 * @return void
 */",
 "/**
 * testNamedArgsUrlGeneration method
 *
 * @return void
 */",
 "/**
 * testNamedArgsUrlParsing method
 *
 * @return void
 */",
 "/**
 * test url generation with legacy (1.2) style prefix routes.
 *
 * @return void
 * @todo Remove tests related to legacy style routes.
 * @see testUrlGenerationWithAutoPrefixes
 */",
 "/**
 * test newer style automatically generated prefix routes.
 *
 * @return void
 */",
 "/**
 * test that auto-generated prefix routes persist
 *
 * @return void
 */",
 "/**
 * test that setting a prefix override the current one
 *
 * @return void
 */",
 "/**
 * Test that setting a prefix to false is ignored, as its generally user error.
 *
 * @return void
 */",
 "/**
 * testRemoveBase method
 *
 * @return void
 */",
 "/**
 * testPagesUrlParsing method
 *
 * @return void
 */",
 "/**
 * test that requests with a trailing dot don\'t loose the do.
 *
 * @return void
 */",
 "/**
 * test that requests with a trailing dot don\'t loose the do.
 *
 * @return void
 */",
 "/**
 * test that patterns work for :action
 *
 * @return void
 */",
 "/**
 * testParsingWithPrefixes method
 *
 * @return void
 */",
 "/**
 * Tests URL generation with flags and prefixes in and out of context
 *
 * @return void
 */",
 "/**
 * test url generation with prefixes and custom routes
 *
 * @return void
 */",
 "/**
 * testPassedArgsOrder method
 *
 * @return void
 */",
 "/**
 * testRegexRouteMatching method
 *
 * @return void
 */",
 "/**
 * testStripPlugin
 *
 * @return void
 */",
 "/**
 * testCurrentRoute
 *
 * This test needs some improvement and actual requestAction() usage
 *
 * @return void
 */",
 "/**
 * testRequestRoute
 *
 * @return void
 */",
 "/**
 * testGetParams
 *
 * @return void
 */",
 "/**
 * test that connectDefaults() can disable default route connection
 *
 * @return void
 */",
 "/**
 * test that the required default routes are connected.
 *
 * @return void
 */",
 "/**
 * test using a custom route class for route connection
 *
 * @return void
 */",
 "/**
 * test that route classes must extend CakeRoute
 *
 * @expectedException RouterException
 * @return void
 */",
 "/**
 * test reversing parameter arrays back into strings.
 *
 * @return void
 */",
 "/**
 * Test that extensions work with Router::reverse()
 *
 * @return void
 */",
 "/**
 * test that setRequestInfo can accept arrays and turn that into a CakeRequest object.
 *
 * @return void
 */",
 "/**
 * Test that Router::url() uses the first request
 */",
 "/**
 * test that a route object returning a full url is not modified.
 *
 * @return void
 */",
 "/**
 * test protocol in url
 *
 * @return void
 */",
 "/**
 * Testing that patterns on the :action param work properly.
 *
 * @return void
 */",
 "/**
 * Tests resourceMap as getter and setter.
 *
 * @return void
 */",
 "/**
 * test setting redirect routes
 *
 * @return void
 */",
 "/**
 * Test setting the default route class
 *
 * @return void
 */",
 "/**
 * Test getting the default route class
 *
 * @return void
 */",
 "/**
 * Test that route classes must extend CakeRoute
 *
 * @expectedException RouterException
 * @return void
 */",
 "/**
 * Test that route classes must extend CakeRoute
 *
 * @expectedException RouterException
 * @return void
 */",
 "/**
 * Test that class must exist
 *
 * @expectedException RouterException
 * @return void
 */",
 "/**
 * Tests generating well-formed querystrings
 *
 * @return void
 */",
 "/**
 * RouterTest class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * Example public method
 *
 * @return void
 */",
 "/**
 * Example Secondary public method
 *
 * @return void
 */",
 "/**
 * Example protected method
 *
 * @return void
 */",
 "/**
 * Test Article model
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Tag Testing Model
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Simulated plugin
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Testing AppMode (TaskComment)
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Test Task Comments Controller
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Test that file path generation doesn\'t continuously append paths.
 *
 * @return void
 */",
 "/**
 * Test that method introspection pulls all relevant non parent class
 * methods into the test case.
 *
 * @return void
 */",
 "/**
 * test that the generation of fixtures works correctly.
 *
 * @return void
 */",
 "/**
 * test that the generation of fixtures works correctly.
 *
 * @return void
 */",
 "/**
 * test user interaction to get object type
 *
 * @return void
 */",
 "/**
 * creating test subjects should clear the registry so the registry is always fresh
 *
 * @return void
 */",
 "/**
 * test that getClassName returns the user choice as a classname.
 *
 * @return void
 */",
 "/**
 * Test the user interaction for defining additional fixtures.
 *
 * @return void
 */",
 "/**
 * test that resolving classnames works
 *
 * @return void
 */",
 "/**
 * test baking files.  The conditionally run tests are known to fail in PHP4
 * as PHP4 classnames are all lower case, breaking the plugin path inflection.
 *
 * @return void
 */",
 "/**
 * test baking controller test files
 *
 * @return void
 */",
 "/**
 * test baking component test files,
 *
 * @return void
 */",
 "/**
 * test baking behavior test files,
 *
 * @return void
 */",
 "/**
 * test baking helper test files,
 *
 * @return void
 */",
 "/**
 * test Constructor generation ensure that constructClasses is called for controllers
 *
 * @return void
 */",
 "/**
 * Test generateUses()
 */",
 "/**
 * Test that mock class generation works for the appropriate classes
 *
 * @return void
 */",
 "/**
 * test bake() with a -plugin param
 *
 * @return void
 */",
 "/**
 * test interactive with plugins lists from the plugin
 *
 * @return void
 */",
 "/**
 * Test filename generation for each type + plugins
 *
 * @dataProvider caseFileNameProvider
 * @return void
 */",
 "/**
 * Test filename generation for plugins.
 *
 * @return void
 */",
 "/**
 * test execute with a type defined
 *
 * @return void
 */",
 "/**
 * test execute with type and class name defined
 *
 * @return void
 */",
 "/**
 * test execute with type and class name defined and lower case.
 *
 * @return void
 */",
 "/**
 * Data provider for mapType() tests.
 *
 * @return array
 */",
 "/**
 * Test that mapType returns the correct package names.
 *
 * @dataProvider mapTypeProvider
 * @return void
 */",
 "/**
 * TestTaskTest class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Formats a number with a level of precision.
 *
 * @param float $number A floating point number.
 * @param integer $precision The precision of the returned number.
 * @return float Formatted float.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::precision
 */",
 "/**
 * Returns a formatted-for-humans file size.
 *
 * @param integer $size Size in bytes
 * @return string Human readable size
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::toReadableSize
 */",
 "/**
 * Formats a number into a percentage string.
 *
 * @param float $number A floating point number
 * @param integer $precision The precision of the returned number
 * @return string Percentage string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::toPercentage
 */",
 "/**
 * Formats a number into a currency format.
 *
 * @param float $number A floating point number
 * @param integer $options if int then places, if string then before, if (,.-) then use it
 *   or array with places and before keys
 * @return string formatted number
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::format
 */",
 "/**
 * Alternative number_format() to accommodate multibyte decimals and thousands < PHP 5.4
 *
 * @param float $number
 * @param integer $places
 * @param string $decimals
 * @param string $thousands
 * @return string
 */",
 "/**
 * Formats a number into a currency format.
 *
 * ### Options
 *
 * - `wholeSymbol` - The currency symbol to use for whole numbers,
 *   greater than 1, or less than -1.
 * - `wholePosition` - The position the whole symbol should be placed
 *   valid options are \'before\' & \'after\'.
 * - `fractionSymbol` - The currency symbol to use for fractional numbers.
 * - `fractionPosition` - The position the fraction symbol should be placed
 *   valid options are \'before\' & \'after\'.
 * - `before` - The currency symbol to place before whole numbers
 *   ie. \'$\'. `before` is an alias for `wholeSymbol`.
 * - `after` - The currency symbol to place after decimal numbers
 *   ie. \'c\'. Set to boolean false to use no decimal symbol.
 *   eg. 0.35 => $0.35.  `after` is an alias for `fractionSymbol`
 * - `zero` - The text to use for zero values, can be a
 *   string or a number. ie. 0, \'Free!\'
 * - `places` - Number of decimal places to use. ie. 2
 * - `thousands` - Thousands separator ie. \',\'
 * - `decimals` - Decimal separator symbol ie. \'.\'
 * - `negative` - Symbol for negative numbers. If equal to \'()\',
 *   the number will be wrapped with ( and )
 * - `escape` - Should the output be htmlentity escaped? Defaults to true
 *
 * @param float $number
 * @param string $currency Shortcut to default options. Valid values are
 *   \'USD\', \'EUR\', \'GBP\', otherwise set at least \'before\' and \'after\' options.
 * @param array $options
 * @return string Number formatted as a currency.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::currency
 */",
 "/**
 * Add a currency format to the Number helper.  Makes reusing
 * currency formats easier.
 *
 * {{{ $number->addFormat(\'NOK\', array(\'before\' => \'Kr. \')); }}}
 *
 * You can now use `NOK` as a shortform when formatting currency amounts.
 *
 * {{{ $number->currency($value, \'NOK\'); }}}
 *
 * Added formats are merged with the defaults defined in CakeNumber::$_currencyDefaults
 * See CakeNumber::currency() for more information on the various options and their function.
 *
 * @param string $formatName The format name to be used in the future.
 * @param array $options The array of options for this format.
 * @return void
 * @see NumberHelper::currency()
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::addFormat
 */",
 "/**
 * Number helper library.
 *
 * Methods to make numbers more readable.
 *
 * @package       Cake.Utility
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html
 */",
 "/**
 * request method
 *
 * @param mixed $request
 * @return void
 */",
 "/**
 * This function sets up a HttpSocket instance we are going to use for testing
 *
 * @return void
 */",
 "/**
 * We use this function to clean up after the test case was executed
 *
 * @return void
 */",
 "/**
 * testBasic method
 *
 * @return void
 */",
 "/**
 * testQop method
 *
 * @return void
 */",
 "/**
 * testOpaque method
 *
 * @return void
 */",
 "/**
 * testMultipleRequest method
 *
 * @return void
 */",
 "/**
 * testPathChanged method
 *
 * @return void
 */",
 "/**
 * testNoDigestResponse method
 *
 * @return void
 */",
 "/**
 * DigestAuthenticationTest class
 *
 * @package       Cake.Test.Case.Network.Http
 */",
 "/**
 * Initialize the Cache Engine
 *
 * Called automatically by the cache frontend
 * To reinitialize the settings call Cache::engine(\'EngineName\', [optional] settings = array());
 *
 * @param array $settings array of setting for the engine
 * @return boolean True if the engine has been successfully initialized, false if not
 */",
 "/**
 * Parses the server address into the host/port.  Handles both IPv6 and IPv4
 * addresses and Unix sockets
 *
 * @param string $server The server address string.
 * @return array Array containing host, port
 */",
 "/**
 * Write data for key into cache.  When using memcache as your cache engine
 * remember that the Memcache pecl extension does not support cache expiry times greater
 * than 30 days in the future. Any duration greater than 30 days will be treated as never expiring.
 *
 * @param string $key Identifier for the data
 * @param mixed $value Data to be cached
 * @param integer $duration How long to cache the data, in seconds
 * @return boolean True if the data was successfully cached, false on failure
 * @see http://php.net/manual/en/memcache.set.php
 */",
 "/**
 * Read a key from the cache
 *
 * @param string $key Identifier for the data
 * @return mixed The cached data, or false if the data doesn\'t exist, has expired, or if there was an error fetching it
 */",
 "/**
 * Increments the value of an integer cached key
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to increment
 * @return New incremented value, false otherwise
 * @throws CacheException when you try to increment with compress = true
 */",
 "/**
 * Decrements the value of an integer cached key
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to subtract
 * @return New decremented value, false otherwise
 * @throws CacheException when you try to decrement with compress = true
 */",
 "/**
 * Delete a key from the cache
 *
 * @param string $key Identifier for the data
 * @return boolean True if the value was successfully deleted, false if it didn\'t exist or couldn\'t be removed
 */",
 "/**
 * Delete all keys from the cache
 *
 * @param boolean $check
 * @return boolean True if the cache was successfully cleared, false otherwise
 */",
 "/**
 * Connects to a server in connection pool
 *
 * @param string $host host ip address or name
 * @param integer $port Server port
 * @return boolean True if memcache server was connected
 */",
 "/**
 * Returns the `group value` for each of the configured groups
 * If the group initial value was not found, then it initializes
 * the group accordingly.
 *
 * @return array
 **/",
 "/**
 * Increments the group value to simulate deletion of all keys under a group
 * old values will remain in storage until they expire.
 *
 * @return boolean success
 **/",
 "/**
 * Memcache storage engine for cache.  Memcache has some limitations in the amount of
 * control you have over expire times far in the future.  See MemcacheEngine::write() for
 * more information.
 *
 * @package       Cake.Cache.Engine
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * TestsAppsController file
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Controller
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Write method to handle writes being made to the Logger
 *
 * @param string $type
 * @param string $message
 * @return void
 */",
 "/**
 * CakeLogStreamInterface is the interface that should be implemented
 * by all classes that are going to be used as Log streams.
 *
 * @package       Cake.Log
 */",
 "/**
 * Method to interact with the User and get path selections.
 *
 * @return void
 */",
 "/**
 * Execution method always used for tasks
 *
 * @return void
 */",
 "/**
 * Add a translation to the internal translations property
 *
 * Takes care of duplicate translations
 *
 * @param string $domain
 * @param string $msgid
 * @param array $details
 */",
 "/**
 * Extract text
 *
 * @return void
 */",
 "/**
 * Get & configure the option parser
 *
 * @return void
 */",
 "/**
 * Extract tokens out of all files to be processed
 *
 * @return void
 */",
 "/**
 * Parse tokens
 *
 * @param string $functionName Function name that indicates translatable string (e.g: \'__\')
 * @param array $map Array containing what variables it will find (e.g: domain, singular, plural)
 * @return void
 */",
 "/**
 * Looks for models in the application and extracts the validation messages
 * to be added to the translation map
 *
 * @return void
 */",
 "/**
 * Process a validation rule for a field and looks for a message to be added
 * to the translation map
 *
 * @param string $field the name of the field that is being processed
 * @param array $rules the set of validation rules for the field
 * @param string $file the file name where this validation rule was found
 * @param string $domain default domain to bind the validations to
 * @return void
 */",
 "/**
 * Build the translate template file contents out of obtained strings
 *
 * @return void
 */",
 "/**
 * Prepare a file to be stored
 *
 * @param string $domain
 * @param string $header
 * @param string $sentence
 * @return void
 */",
 "/**
 * Write the files that need to be stored
 *
 * @return void
 */",
 "/**
 * Build the translation template header
 *
 * @return string Translation template header
 */",
 "/**
 * Get the strings from the position forward
 *
 * @param integer $position Actual position on tokens array
 * @param integer $target Number of strings to extract
 * @return array Strings extracted
 */",
 "/**
 * Format a string to be added as a translatable string
 *
 * @param string $string String to format
 * @return string Formatted string
 */",
 "/**
 * Indicate an invalid marker on a processed file
 *
 * @param string $file File where invalid marker resides
 * @param integer $line Line number
 * @param string $marker Marker found
 * @param integer $count Count
 * @return void
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Constructor
 *
 * @param string $template Template string with parameter placeholders
 * @param array $defaults Array of defaults for the route.
 * @param array $options Array of additional options for the Route
 */",
 "/**
 * Parses a string url into an array. Parsed urls will result in an automatic
 * redirection
 *
 * @param string $url The url to parse
 * @return boolean False on failure
 */",
 "/**
 * There is no reverse routing redirection routes
 *
 * @param array $url Array of parameters to convert to a string.
 * @return mixed either false or a string url.
 */",
 "/**
 * Stop execution of the current script. Wraps exit() making
 * testing easier.
 *
 * @param integer|string $status see http://php.net/exit for values
 * @return void
 */",
 "/**
 * Redirect route will perform an immediate redirect. Redirect routes
 * are useful when you want to have Routing layer redirects occur in your
 * application, for when URLs move.
 *
 * @package Cake.Routing.Route
 */",
 "/**
 * Sets the current cache key this class is managing, and creates a writable SplFileObject
 * for the cache file the key is referring to.
 *
 * @param string $key The key
 * @param boolean $createKey Whether the key should be created if it doesn\'t exists, or not
 * @return boolean true if the cache key could be set, false otherwise
 */",
 "/**
 * Determine is cache directory is writable
 *
 * @return boolean
 */",
 "/**
 * Generates a safe key for use with cache engine storage engines.
 *
 * @param string $key the key passed over
 * @return mixed string $key or false
 */",
 "/**
 * Recursively deletes all files under any directory named as $group
 *
 * @return boolean success
 **/",
 "/**
 * File Storage engine for cache.  Filestorage is the slowest cache storage
 * to read and write.  However, it is good for servers that don\'t have other storage
 * engine available, or have content which is not performance sensitive.
 *
 * You can configure a FileEngine cache, using Cache::config()
 *
 * @package       Cake.Cache.Engine
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test Suite TestPlugin Other Library
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Lib
 * @since         CakePHP(tm) v 2.0.1
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * A testing stub that doesn\'t send headers.
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * invoke method
 *
 * @param Controller $controller
 * @param CakeRequest $request
 * @param CakeResponse $response
 * @return void
 */",
 "/**
 * Helper function to test single method attaching for dispatcher filters
 *
 * @param CakeEvent $event
 * @return void
 */",
 "/**
 * Helper function to test single method attaching for dispatcher filters
 *
 * @param CakeEvent
 * @return void
 */",
 "/**
 * TestDispatcher class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * MyPluginAppController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * add method
 *
 * @return void
 */",
 "/**
 * admin_add method
 *
 * @param mixed $id
 * @return void
 */",
 "/**
 * MyPluginController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * display method
 *
 * @param string $page
 * @return void
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * Test method for returning responses.
 *
 * @return CakeResponse
 */",
 "/**
 * SomePagesController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * display method
 *
 * @param string $page
 * @return void
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * OtherPagesController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * admin_index method
 *
 * @return void
 */",
 "/**
 * camelCased method
 *
 * @return void
 */",
 "/**
 * TestDispatchPagesController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * ArticlesTestAppController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * admin_index method
 *
 * @return void
 */",
 "/**
 * fake index method.
 *
 * @return void
 */",
 "/**
 * ArticlesTestController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * beforeFilter method
 *
 * @return void
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * change method
 *
 * @return void
 */",
 "/**
 * SomePostsController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * test_nocache_tags method
 *
 * @return void
 */",
 "/**
 * view method
 *
 * @return void
 */",
 "/**
 * test cached forms / tests view object being registered
 *
 * @return void
 */",
 "/**
 * Test cached views with themes.
 */",
 "/**
 * TestCachedPagesController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * TimesheetsController class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testParseParamsWithoutZerosAndEmptyPost method
 *
 * @return void
 */",
 "/**
 * testParseParamsReturnsPostedData method
 *
 * @return void
 */",
 "/**
 * testParseParamsWithSingleZero method
 *
 * @return void
 */",
 "/**
 * testParseParamsWithManySingleZeros method
 *
 * @return void
 */",
 "/**
 * testParseParamsWithManyZerosInEachSectionOfUrl method
 *
 * @return void
 */",
 "/**
 * testParseParamsWithMixedOneToManyZerosInEachSectionOfUrl method
 *
 * @return void
 */",
 "/**
 * testQueryStringOnRoot method
 *
 * @return void
 */",
 "/**
 * testMissingController method
 *
 * @expectedException MissingControllerException
 * @expectedExceptionMessage Controller class SomeControllerController could not be found.
 * @return void
 */",
 "/**
 * testMissingControllerInterface method
 *
 * @expectedException MissingControllerException
 * @expectedExceptionMessage Controller class DispatcherTestInterfaceController could not be found.
 * @return void
 */",
 "/**
 * testMissingControllerInterface method
 *
 * @expectedException MissingControllerException
 * @expectedExceptionMessage Controller class DispatcherTestAbstractController could not be found.
 * @return void
 */",
 "/**
 * testDispatch method
 *
 * @return void
 */",
 "/**
 * Test that Dispatcher handles actions that return response objects.
 *
 * @return void
 */",
 "/**
 * testAdminDispatch method
 *
 * @return void
 */",
 "/**
 * testPluginDispatch method
 *
 * @return void
 */",
 "/**
 * testAutomaticPluginDispatch method
 *
 * @return void
 */",
 "/**
 * testAutomaticPluginControllerDispatch method
 *
 * @return void
 */",
 "/**
 * test Plugin dispatching without controller name and using
 * plugin short form instead.
 *
 * @return void
 */",
 "/**
 * test plugin shortcut urls with controllers that need to be loaded,
 * the above test uses a controller that has already been included.
 *
 * @return void
 */",
 "/**
 * testAutomaticPluginControllerMissingActionDispatch method
 *
 * @expectedException MissingActionException
 * @expectedExceptionMessage Action MyPluginController::not_here() could not be found.
 * @return void
 */",
 "/**
 * testAutomaticPluginControllerMissingActionDispatch method
 *
 * @expectedException MissingActionException
 * @expectedExceptionMessage Action MyPluginController::param:value() could not be found.
 * @return void
 */",
 "/**
 * Test dispatching into the TestPlugin in the test_app
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to attach filter classes to the dispatch cycle
 *
 * @return void
 */",
 "/**
 * Tests that attaching an inexistent class as filter will throw an exception
 *
 * @expectedException MissingDispatcherFilterException
 * @return void
 */",
 "/**
 * Tests it is possible to attach single callables as filters
 *
 * @return void
 */",
 "/**
 * testChangingParamsFromBeforeFilter method
 *
 * @return void
 */",
 "/**
 * testStaticAssets method
 *
 * @return void
 */",
 "/**
 * Data provider for asset filter
 *
 * - theme assets.
 * - plugin assets.
 * - plugin assets in sub directories.
 * - unknown plugin assets.
 *
 * @return array
 */",
 "/**
 * Test assets
 *
 * @dataProvider assetProvider
 * @outputBuffering enabled
 * @return void
 */",
 "/**
 * test that missing asset processors trigger a 404 with no response body.
 *
 * @return void
 */",
 "/**
 * Data provider for cached actions.
 *
 * - Test simple views
 * - Test views with nocache tags
 * - Test requests with named + passed params.
 * - Test requests with query string params
 * - Test themed views.
 *
 * @return array
 */",
 "/**
 * testFullPageCachingDispatch method
 *
 * @dataProvider cacheActionProvider
 * @return void
 */",
 "/**
 * testHttpMethodOverrides method
 *
 * @return void
 */",
 "/**
 * backupEnvironment method
 *
 * @return void
 */",
 "/**
 * reloadEnvironment method
 *
 * @return void
 */",
 "/**
 * loadEnvironment method
 *
 * @param array $env
 * @return void
 */",
 "/**
 * cachePath method
 *
 * @param string $here
 * @return string
 */",
 "/**
 * DispatcherTest class
 *
 * @package       Cake.Test.Case.Routing
 */",
 "/**
 * AdFixture class
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * test method for testing option mapping
 *
 * @return array
 */",
 "/**
 * test method for option parsing
 *
 * @return void
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Switches $this->Js to a mocked engine.
 *
 * @return void
 */",
 "/**
 * test object construction
 *
 * @return void
 */",
 "/**
 * test that methods dispatch internally and to the engine class
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * Test that method dispatching for events respects buffer parameters and bufferedMethods Lists.
 *
 * @return void
 */",
 "/**
 * Test that method dispatching for effects respects buffer parameters and bufferedMethods Lists.
 *
 * @return void
 */",
 "/**
 * test that writeScripts generates scripts inline.
 *
 * @return void
 */",
 "/**
 * test that writing the buffer with inline = false includes a script tag.
 *
 * @return void
 */",
 "/**
 * test that writeBuffer() sets domReady = false when the request is done by XHR.
 * Including a domReady() when in XHR can cause issues as events aren\'t triggered by some libraries
 *
 * @return void
 */",
 "/**
 * test that writeScripts makes files, and puts the events into them.
 *
 * @return void
 */",
 "/**
 * test link()
 *
 * @return void
 */",
 "/**
 * test link with a mock and confirmation
 *
 * @return void
 */",
 "/**
 * test link passing on htmlAttributes
 *
 * @return void
 */",
 "/**
 * test that link() and no buffering returns an <a> and <script> tags.
 *
 * @return void
 */",
 "/**
 * test link with buffering off and safe on.
 *
 * @return void
 */",
 "/**
 * test submit() with a Mock to check Engine method calls
 *
 * @return void
 */",
 "/**
 * test submit() with a mock
 *
 * @return void
 */",
 "/**
 * test that no buffer works with submit() and that parameters are leaking into the script tag.
 *
 * @return void
 */",
 "/**
 * Test that Object::Object() is not breaking json output in JsHelper
 *
 * @return void
 */",
 "/**
 * Test that inherited Helper::value() is overwritten in JsHelper::value()
 * and calls JsBaseEngineHelper::value().
 *
 * @return void
 */",
 "/**
 * test set()\'ing variables to the Javascript buffer and controlling the output var name.
 *
 * @return void
 */",
 "/**
 * test that vars set with Js->set() go to the top of the buffered scripts list.
 *
 * @return void
 */",
 "/**
 * JsHelper TestCase.
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test escape string skills
 *
 * @return void
 */",
 "/**
 * test prompt() creation
 *
 * @return void
 */",
 "/**
 * test alert generation
 *
 * @return void
 */",
 "/**
 * test confirm generation
 *
 * @return void
 */",
 "/**
 * test Redirect
 *
 * @return void
 */",
 "/**
 * testObject encoding with non-native methods.
 *
 * @return void
 */",
 "/**
 * test Mapping of options.
 *
 * @return void
 */",
 "/**
 * test that option parsing escapes strings and saves what is supposed to be saved.
 *
 * @return void
 */",
 "/**
 * JsBaseEngine Class Test case
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * setup, create mocks
 *
 * @return Mock object
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test that the console error handler can deal with CakeExceptions.
 *
 * @return void
 */",
 "/**
 * test that the console error handler can deal with CakeExceptions.
 *
 * @return void
 */",
 "/**
 * test a non CakeException exception.
 *
 * @return void
 */",
 "/**
 * test a Error404 exception.
 *
 * @return void
 */",
 "/**
 * test a Error500 exception.
 *
 * @return void
 */",
 "/**
 * ConsoleErrorHandler Test case.
 *
 * @package       Cake.Test.Case.Console
 */",
 "/**
 * Initialize method
 *
 * @param AclBase $component
 * @return void
 */",
 "/**
 * No op method, allow cannot be done with IniAcl
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * No op method, deny cannot be done with IniAcl
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * No op method, inherit cannot be done with IniAcl
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Main ACL check function. Checks to see if the ARO (access request object) has access to the
 * ACO (access control object).Looks at the acl.ini.php file for permissions
 * (see instructions in /config/acl.ini.php).
 *
 * @param string $aro ARO
 * @param string $aco ACO
 * @param string $action Action
 * @return boolean Success
 */",
 "/**
 * Parses an INI file and returns an array that reflects the 
 * INI file\'s section structure. Double-quote friendly.
 *
 * @param string $filename File
 * @return array INI section structure
 */",
 "/**
 * Removes trailing spaces on all array elements (to prepare for searching)
 *
 * @param array $array Array to trim
 * @return array Trimmed array
 */",
 "/**
 * IniAcl implements an access control system using an INI file.  An example
 * of the ini file used can be found in /config/acl.ini.php.
 *
 * @package       Cake.Controller.Component
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Display or download the given file
 *
 * @param string $view Not used
 * @param string $layout Not used
 * @return mixed
 * @throws NotFoundException
 */",
 "/**
 * Reads out a file handle, and echos the content to the client.
 *
 * @param resource $handle A file handle or stream
 * @return void
 */",
 "/**
 * Returns true if connection is still active
 *
 * @return boolean
 */",
 "/**
 * Clears the contents of the topmost output buffer and discards them
 *
 * @return boolean
 */",
 "/**
 * Flushes the contents of the output buffer
 *
 * @return void
 */",
 "/**
 * Media View provides a custom view implementation for sending files to visitors.  Its great
 * for making the response of a controller action be a file that is saved somewhere on the filesystem.
 *
 * An example use comes from the CakePHP internals. MediaView is used to serve plugin and theme assets,
 * as they are not normally accessible from an application\'s webroot.  Unlike other views, MediaView
 * uses several viewVars that have special meaning:
 *
 * - `id` The filename on the server\'s filesystem, including extension.
 * - `name` The filename that will be sent to the user, specified without the extension.
 * - `download` Set to true to set a `Content-Disposition` header.  This is ideal for file downloads.
 * - `extension` The extension of the file being served. This is used to set the mimetype.
 * 	If not provided its extracted from filename provided as `id`.
 * - `path` The absolute path, including the trailing / on the server\'s filesystem to `id`.
 * - `mimeType` The mime type of the file if CakeResponse doesn\'t know about it.
 * 	Must be an associative array with extension as key and mime type as value eg. array(\'ini\' => \'text/plain\')
 *
 * ### Usage
 *
 * {{{
 * class ExampleController extends AppController {
 *		public function download() {
 *			$this->viewClass = \'Media\';
 *			$params = array(
 *				\'id\' => \'example.zip\',
 *				\'name\' => \'example\',
 *				\'download\' => true,
 *				\'extension\' => \'zip\',
 *				\'path\' => APP . \'files\' . DS
 *			);
 *			$this->set($params);
 *		}
 * }
 * }}}
 *
 * @package       Cake.View
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * ContactTestController class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * Contact class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * ContactTagsContact class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * ContactNonStandardPk class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * ContactTag class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * UserForm class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * beforeValidate method
 *
 * @return void
 */",
 "/**
 * OpenidUrl class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * beforeValidate method
 *
 * @return void
 */",
 "/**
 * ValidateUser class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * beforeValidate method
 *
 * @return void
 */",
 "/**
 * ValidateProfile class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * beforeValidate method
 *
 * @return void
 */",
 "/**
 * ValidateItem class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * TestMail class
 *
 * @package	   cake
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testFormCreateWithSecurity method
 *
 * Test form->create() with security key.
 *
 * @return void
 */",
 "/**
 * test that create() clears the fields property so it starts fresh
 *
 * @return void
 */",
 "/**
 * Tests form hash generation with model-less data
 *
 * @return void
 */",
 "/**
 * Tests that models with identical field names get resolved properly
 *
 * @return void
 */",
 "/**
 * Tests that hidden fields generated for checkboxes don\'t get locked
 *
 * @return void
 */",
 "/**
 * testFormSecurityFields method
 *
 * Test generation of secure form hash generation.
 *
 * @return void
 */",
 "/**
 * Tests correct generation of number fields for double and float fields
 *
 * @return void
 */",
 "/**
 * Tests correct generation of number fields for integer fields
 *
 * @access public
 * @return void
 */",
 "/**
 * testFormSecurityMultipleFields method
 *
 * Test secure() with multiple row form. Ensure hash is correct.
 *
 * @return void
 */",
 "/**
 * testFormSecurityMultipleSubmitButtons
 *
 * test form submit generation and ensure that _Token is only created on end()
 *
 * @return void
 */",
 "/**
 * Test that buttons created with foo[bar] name attributes are unlocked correctly.
 *
 * @return void
 */",
 "/**
 * Test that submit inputs created with foo[bar] name attributes are unlocked correctly.
 *
 * @return void
 */",
 "/**
 * Test that the correct fields are unlocked for image submits with no names.
 *
 * @return void
 */",
 "/**
 * Test that the correct fields are unlocked for image submits with names.
 *
 * @return void
 */",
 "/**
 * testFormSecurityMultipleInputFields method
 *
 * Test secure form creation with multiple row creation.  Checks hidden, text, checkbox field types
 *
 * @return void
 */",
 "/**
 * Test form security with Model.field.0 style inputs
 *
 * @return void
 */",
 "/**
 * testFormSecurityMultipleInputDisabledFields method
 *
 * test secure form generation with multiple records and disabled fields.
 *
 * @return void
 */",
 "/**
 * testFormSecurityInputDisabledFields method
 *
 * Test single record form with disabled fields.
 *
 * @return void
 */",
 "/**
 * test securing inputs with custom name attributes.
 *
 * @return void
 */",
 "/**
 * testFormSecuredInput method
 *
 * Test generation of entire secure form, assertions made on input() output.
 *
 * @return void
 */",
 "/**
 * Tests that the correct keys are added to the field hash index
 *
 * @return void
 */",
 "/**
 * test that multiple selects keys are added to field hash
 *
 * @return void
 */",
 "/**
 * testFormSecuredRadio method
 *
 * @return void
 */",
 "/**
 * test that forms with disabled inputs + secured forms leave off the inputs from the form
 * hashing.
 *
 * @return void
 */",
 "/**
 * testDisableSecurityUsingForm method
 *
 * @return void
 */",
 "/**
 * test disableField
 *
 * @return void
 */",
 "/**
 * test unlockField removing from fields array.
 *
 * @return void
 */",
 "/**
 * testTagIsInvalid method
 *
 * @return void
 */",
 "/**
 * testPasswordValidation method
 *
 * test validation errors on password input.
 *
 * @return void
 */",
 "/**
 * testEmptyErrorValidation method
 *
 * test validation error div when validation message is an empty string
 *
 * @access public
 * @return void
 */",
 "/**
 * testEmptyInputErrorValidation method
 *
 * test validation error div when validation message is overridden by an empty string when calling input()
 *
 * @access public
 * @return void
 */",
 "/**
 * testFormValidationAssociated method
 *
 * test display of form errors in conjunction with model::validates.
 *
 * @return void
 */",
 "/**
 * testFormValidationAssociatedFirstLevel method
 *
 * test form error display with associated model.
 *
 * @return void
 */",
 "/**
 * testFormValidationAssociatedSecondLevel method
 *
 * test form error display with associated model.
 *
 * @return void
 */",
 "/**
 * testFormValidationMultiRecord method
 *
 * test form error display with multiple records.
 *
 * @return void
 */",
 "/**
 * testMultipleInputValidation method
 *
 * test multiple record form validation error display.
 *
 * @return void
 */",
 "/**
 * testInput method
 *
 * Test various incarnations of input().
 *
 * @return void
 */",
 "/**
 * test input() with checkbox creation
 *
 * @return void
 */",
 "/**
 * test form->input() with time types.
 *
 */",
 "/**
 * test form->input() with datetime, date and time types
 *
 * @return void
 */",
 "/**
 * Test generating checkboxes in a loop.
 *
 * @return void
 */",
 "/**
 * test input name with leading integer, ensure attributes are generated correctly.
 *
 * @return void
 */",
 "/**
 * test form->input() with select type inputs.
 *
 * @return void
 */",
 "/**
 * test that input() and a non standard primary key makes a hidden input by default.
 *
 * @return void
 */",
 "/**
 * test that overriding the magic select type widget is possible
 *
 * @return void
 */",
 "/**
 * Test that magic input() selects can easily be converted into radio types without error.
 *
 * @return void
 */",
 "/**
 * fields with the same name as the model should work.
 *
 * @return void
 */",
 "/**
 * testFormInputs method
 *
 * test correct results from form::inputs().
 *
 * @return void
 */",
 "/**
 * testSelectAsCheckbox method
 *
 * test multi-select widget with checkbox formatting.
 *
 * @return void
 */",
 "/**
 * testLabel method
 *
 * test label generation.
 *
 * @return void
 */",
 "/**
 * testTextbox method
 *
 * test textbox element generation
 *
 * @return void
 */",
 "/**
 * testDefaultValue method
 *
 * Test default value setting
 *
 * @return void
 */",
 "/**
 * testCheckboxDefaultValue method
 *
 * Test default value setting on checkbox() method
 *
 * @return void
 */",
 "/** Testing error messages list options **/",
 "/**
 * testError method
 *
 * Test field error generation
 *
 * @return void
 */",
 "/**
 * test error options when using form->input();
 *
 * @return void
 */",
 "/**
 * testPassword method
 *
 * Test password element generation
 *
 * @return void
 */",
 "/**
 * testRadio method
 *
 * Test radio element set generation
 *
 * @return void
 */",
 "/**
 * test disabled radio options
 *
 * @return void
 */",
 "/**
 * test disabling the hidden input for radio buttons
 *
 * @return void
 */",
 "/**
 * test adding an empty option for radio buttons
 *
 * @return void
 */",
 "/**
 * testSelect method
 *
 * Test select element generation.
 *
 * @return void
 */",
 "/**
 * test that select() with optiongroups listens to the escape param.
 *
 * @return void
 */",
 "/**
 * Tests that FormHelper::select() allows null to be passed in the $attributes parameter
 *
 * @return void
 */",
 "/**
 * testNestedSelect method
 *
 * test select element generation with optgroups
 *
 * @return void
 */",
 "/**
 * testSelectMultiple method
 *
 * test generation of multiple select elements
 *
 * @return void
 */",
 "/**
 * test generation of habtm select boxes.
 *
 * @return void
 */",
 "/**
 * test generation of multi select elements in checkbox format
 *
 * @return void
 */",
 "/**
 * test multiple checkboxes with div styles.
 *
 * @return void
 */",
 "/**
 * Checks the security hash array generated for multiple-input checkbox elements
 *
 * @return void
 */",
 "/**
 * testInputMultipleCheckboxes method
 *
 * test input() resulting in multi select elements being generated.
 *
 * @return void
 */",
 "/**
 * testSelectHiddenFieldOmission method
 *
 * test that select() with \'hiddenField\' => false omits the hidden field
 *
 * @return void
 */",
 "/**
 * test that select() with multiple = checkbox works with overriding name attribute.
 *
 * @return void
 */",
 "/**
 * Test that \'id\' overrides all the checkbox id\'s as well.
 *
 * @return void
 */",
 "/**
 * testCheckbox method
 *
 * Test generation of checkboxes
 *
 * @return void
 */",
 "/**
 * test checkbox() with a custom name attribute
 *
 * @return void
 */",
 "/**
 * test the checked option for checkboxes.
 *
 * @return void
 */",
 "/**
 * Test that disabled attribute works on both the checkbox and hidden input.
 *
 * @return void
 */",
 "/**
 * Test that the hidden input for checkboxes can be omitted or set to a
 * specific value.
 *
 * @return void
 */",
 "/**
 * testDateTime method
 *
 * Test generation of date/time select elements
 *
 * @return void
 */",
 "/**
 * test that datetime() and default values work.
 *
 * @return void
 */",
 "/**
 * test that bogus non-date time data doesn\'t cause errors.
 *
 * @return void
 */",
 "/**
 * testFormDateTimeMulti method
 *
 * test multiple datetime element generation
 *
 * @return void
 */",
 "/**
 * When changing the date format, the label should always focus the first select box when
 * clicked.
 *
 * @return void
 */",
 "/**
 * testMonth method
 *
 * @return void
 */",
 "/**
 * testDay method
 *
 * @return void
 */",
 "/**
 * testMinute method
 *
 * @return void
 */",
 "/**
 * testHour method
 *
 * @return void
 */",
 "/**
 * testYear method
 *
 * @return void
 */",
 "/**
 * testTextArea method
 *
 * @return void
 */",
 "/**
 * testTextAreaWithStupidCharacters method
 *
 * test text area with non-ascii characters
 *
 * @return void
 */",
 "/**
 * testHiddenField method
 *
 * @return void
 */",
 "/**
 * testFileUploadField method
 *
 * @return void
 */",
 "/**
 * test File upload input on a model not used in create();
 *
 * @return void
 */",
 "/**
 * testButton method
 *
 * @return void
 */",
 "/**
 * Test that button() makes unlocked fields by default.
 *
 * @return void
 */",
 "/**
 * testPostButton method
 *
 * @return void
 */",
 "/**
 * Test that postButton adds _Token fields.
 *
 * @return void
 */",
 "/**
 * testPostLink method
 *
 * @return void
 */",
 "/**
 * Test that postLink adds _Token fields.
 *
 * @return void
 */",
 "/**
 * testSubmitButton method
 *
 * @return void
 */",
 "/**
 * test image submit types.
 *
 * @return void
 */",
 "/**
 * Submit buttons should be unlocked by default as there could be multiples, and only one will
 * be submitted at a time.
 *
 * @return void
 */",
 "/**
 * Test submit image with timestamps.
 *
 * @return void
 */",
 "/**
 * test the create() method
 *
 * @return void
 */",
 "/**
 * Test the onsubmit option for create()
 *
 * @return void
 */",
 "/**
 * test create() with automatic url generation
 *
 * @return void
 */",
 "/**
 * test create() with a custom route
 *
 * @return void
 */",
 "/**
 * test that inputDefaults are stored and used.
 *
 * @return void
 */",
 "/**
 * test automatic accept-charset overriding
 *
 * @return void
 */",
 "/**
 * Test base form url when url param is passed with multiple parameters (&)
 *
 */",
 "/**
 * test that create() doesn\'t cause errors by multiple id\'s being in the primary key
 * as could happen with multiple select or checkboxes.
 *
 * @return void
 */",
 "/**
 * test that create() doesn\'t add in extra passed params.
 *
 * @return void
 */",
 "/**
 * test creating a get form, and get form inputs.
 *
 * @return void
 */",
 "/**
 * test get form, and inputs when the model param is false
 *
 * @return void
 */",
 "/**
 * test that datetime() works with GET style forms.
 *
 * @return void
 */",
 "/**
 * testEditFormWithData method
 *
 * test auto populating form elements from submitted data.
 *
 * @return void
 */",
 "/**
 * Test that required fields are created for various types of validation.
 *
 * @return void
 */",
 "/**
 * testFormMagicInput method
 *
 * @return void
 */",
 "/**
 * testForMagicInputNonExistingNorValidated method
 *
 * @return void
 */",
 "/**
 * testFormMagicInputLabel method
 *
 * @return void
 */",
 "/**
 * testFormEnd method
 *
 * @return void
 */",
 "/**
 * testMultipleFormWithIdFields method
 *
 * @return void
 */",
 "/**
 * testDbLessModel method
 *
 * @return void
 */",
 "/**
 * testBrokenness method
 *
 * @return void
 */",
 "/**
 * Test the generation of fields for a multi record form.
 *
 * @return void
 */",
 "/**
 * test the correct display of multi-record form validation errors.
 *
 * @return void
 */",
 "/**
 * tests the ability to change the order of the form input placeholder \"input\", \"label\", \"before\", \"between\", \"after\", \"error\"
 *
 * @return void
 */",
 "/**
 * test that some html5 inputs + FormHelper::__call() work
 *
 * @return void
 */",
 "/**
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Tests that a model can be loaded from the model names passed in the request object
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to set the validation errors directly in the helper for a field
 *
 * @return void
 */",
 "/**
 * Tests that the \'on\' key validates as expected on create
 *
 * @return void
 */",
 "/**
 * Tests that the \'on\' key validates as expected on update
 *
 * @return void
 */",
 "/**
 * Test inputDefaults setter and getter
 *
 * @return void
 */",
 "/**
 * FormHelperTest class
 *
 * @package	   cake
 * @subpackage       Cake.Test.Case.View.Helper
 * @property FormHelper $Form
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Get / Set the userAgent
 *
 * @param string $userAgent Set the userAgent
 * @return void
 */",
 "/**
 * Used to write a value to a session key.
 *
 * In your controller: $this->Session->write(\'Controller.sessKey\', \'session value\');
 *
 * @param string $name The name of the key your are setting in the session.
 * 							This should be in a Controller.key format for better organizing
 * @param string $value The value you want to store in a session.
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/sessions.html#SessionComponent::write
 */",
 "/**
 * Used to read a session values for a key or return values for all keys.
 *
 * In your controller: $this->Session->read(\'Controller.sessKey\');
 * Calling the method without a param will return all session vars
 *
 * @param string $name the name of the session key you want to read
 * @return mixed value from the session vars
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/sessions.html#SessionComponent::read
 */",
 "/**
 * Wrapper for SessionComponent::del();
 *
 * In your controller: $this->Session->delete(\'Controller.sessKey\');
 *
 * @param string $name the name of the session key you want to delete
 * @return boolean true is session variable is set and can be deleted, false is variable was not set.
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/sessions.html#SessionComponent::delete
 */",
 "/**
 * Used to check if a session variable is set
 *
 * In your controller: $this->Session->check(\'Controller.sessKey\');
 *
 * @param string $name the name of the session key you want to check
 * @return boolean true is session variable is set, false if not
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/sessions.html#SessionComponent::check
 */",
 "/**
 * Used to determine the last error in a session.
 *
 * In your controller: $this->Session->error();
 *
 * @return string Last session error
 */",
 "/**
 * Used to set a session variable that can be used to output messages in the view.
 *
 * In your controller: $this->Session->setFlash(\'This has been saved\');
 *
 * Additional params below can be passed to customize the output, or the Message.[key].
 * You can also set additional parameters when rendering flash messages. See SessionHelper::flash()
 * for more information on how to do that.
 *
 * @param string $message Message to be flashed
 * @param string $element Element to wrap flash message in.
 * @param array $params Parameters to be sent to layout as view variables
 * @param string $key Message key, default is \'flash\'
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/sessions.html#creating-notification-messages
 */",
 "/**
 * Used to renew a session id
 *
 * In your controller: $this->Session->renew();
 *
 * @return void
 */",
 "/**
 * Used to check for a valid session.
 *
 * In your controller: $this->Session->valid();
 *
 * @return boolean true is session is valid, false is session is invalid
 */",
 "/**
 * Used to destroy sessions
 *
 * In your controller: $this->Session->destroy();
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/sessions.html#SessionComponent::destroy
 */",
 "/**
 * Get/Set the session id.
 *
 * When fetching the session id, the session will be started
 * if it has not already been started.  When setting the session id,
 * the session will not be started.
 *
 * @param string $id Id to use (optional)
 * @return string The current session id.
 */",
 "/**
 * Returns a bool, whether or not the session has been started.
 *
 * @return boolean
 */",
 "/**
 * The CakePHP SessionComponent provides a way to persist client data between 
 * page requests. It acts as a wrapper for the `$_SESSION` as well as providing 
 * convenience methods for several `$_SESSION` related functions.
 *
 * @package       Cake.Controller.Component
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/sessions.html
 * @link http://book.cakephp.org/2.0/en/development/sessions.html
 */",
 "/**
 * Constructor, completes configuration for digest authentication.
 *
 * @param ComponentCollection $collection The Component collection used on this request.
 * @param array $settings An array of settings.
 */",
 "/**
 * Authenticate a user using Digest HTTP auth.  Will use the configured User model and attempt a
 * login using Digest HTTP auth.
 *
 * @param CakeRequest $request The request to authenticate with.
 * @param CakeResponse $response The response to add headers to.
 * @return mixed Either false on failure, or an array of user data on success.
 */",
 "/**
 * Get a user based on information in the request.  Used by cookie-less auth for stateless clients.
 *
 * @param CakeRequest $request Request object.
 * @return mixed Either false or an array of user information
 */",
 "/**
 * Find a user record using the standard options.
 *
 * @param string $username The username/identifier.
 * @param string $password Unused password, digest doesn\'t require passwords.
 * @return Mixed Either false on failure, or an array of user data.
 */",
 "/**
 * Gets the digest headers from the request/environment.
 *
 * @return array Array of digest information.
 */",
 "/**
 * Parse the digest authentication headers and split them up.
 *
 * @param string $digest The raw digest authentication headers.
 * @return array An array of digest authentication headers
 */",
 "/**
 * Generate the response hash for a given digest array.
 *
 * @param array $digest Digest information containing data from DigestAuthenticate::parseAuthData().
 * @param string $password The digest hash password generated with DigestAuthenticate::password()
 * @return string Response hash
 */",
 "/**
 * Creates an auth digest password hash to store
 *
 * @param string $username The username to use in the digest hash.
 * @param string $password The unhashed password to make a digest hash for.
 * @param string $realm The realm the password is for.
 * @return string the hashed password that can later be used with Digest authentication.
 */",
 "/**
 * Generate the login headers
 *
 * @return string Headers for logging in.
 */",
 "/**
 * Digest Authentication adapter for AuthComponent.
 *
 * Provides Digest HTTP authentication support for AuthComponent.  Unlike most AuthComponent adapters,
 * DigestAuthenticate requires a special password hash that conforms to RFC2617.  You can create this
 * password using `DigestAuthenticate::password()`.  If you wish to use digest authentication alongside other
 * authentication methods, its recommended that you store the digest authentication separately.
 *
 * Clients using Digest Authentication  must support cookies.  Since AuthComponent identifies users based
 * on Session contents, clients without support for cookies will not function properly.
 *
 * ### Using Digest auth
 *
 * In your controller\'s components array, add auth + the required settings.
 * {{{
 *	public $components = array(
 *		\'Auth\' => array(
 *			\'authenticate\' => array(\'Digest\')
 *		)
 *	);
 * }}}
 *
 * In your login function just call `$this->Auth->login()` without any checks for POST data.  This
 * will send the authentication headers, and trigger the login dialog in the browser/client.
 *
 * ### Generating passwords compatible with Digest authentication.
 *
 * Due to the Digest authentication specification, digest auth requires a special password value.  You
 * can generate this password using `DigestAuthenticate::password()`
 *
 * `$digestPass = DigestAuthenticate::password($username, env(\'SERVER_NAME\'), $password);`
 *
 * Its recommended that you store this digest auth only password separate from password hashes used for other
 * login methods.  For example `User.digest_pass` could be used for a digest password, while `User.password` would
 * store the password hash for use with other methods like Basic or Form.
 *
 * @package       Cake.Controller.Component.Auth
 * @since 2.0
 */",
 "/**
 * suite declares tests to run
 *
 * @return void
 */",
 "/**
 * HelpersGroupTest class
 *
 * This test group will run all Helper related tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * TestPluginController used by Dispatcher test to test plugin shortcut urls.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Controller
 * @since         CakePHP(tm) v 1.3
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Constructor
 *
 * @param ComponentCollection $collection A ComponentCollection this component can use to lazy load its components
 * @param array $settings Array of configuration settings.
 */",
 "/**
 * Initialize component
 *
 * @param Controller $controller Instantiating controller
 * @return void
 */",
 "/**
 * Send an email using the specified content, template and layout
 *
 * @param string|array $content Either an array of text lines, or a string with contents
 *  If you are rendering a template this variable will be sent to the templates as `$content`
 * @param string $template Template to use when sending email
 * @param string $layout Layout to use to enclose email body
 * @return boolean Success
 */",
 "/**
 * Reset all EmailComponent internal variables to be able to send out a new email.
 *
 * @return void
 */",
 "/**
 * Format the attach array
 *
 * @return array
 */",
 "/**
 * Find the specified attachment in the list of file paths
 *
 * @param string $attachment Attachment file name to find
 * @return string Path to located file
 */",
 "/**
 * Format addresses to be an array with email as key and alias as value
 *
 * @param array $addresses
 * @return array
 */",
 "/**
 * Remove certain elements (such as bcc:, to:, %0a) from given value.
 * Helps prevent header injection / manipulation on user content.
 *
 * @param string $value Value to strip
 * @param boolean $message Set to true to indicate main message content
 * @return string Stripped value
 */",
 "/**
 * EmailComponent
 *
 * This component is used for handling Internet Message Format based
 * based on the standard outlined in http://www.rfc-editor.org/rfc/rfc2822.txt
 *
 * @package       Cake.Controller.Component
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/email.html
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/email.html
 * @deprecated Use Network/CakeEmail
 */",
 "/**
 * testGet method
 *
 * @return void
 */",
 "/**
 * testGetAutoLanguage method
 *
 * @return void
 */",
 "/**
 * testMap method
 *
 * @return void
 */",
 "/**
 * testCatalog method
 *
 * @return void
 */",
 "/**
 * L10nTest class
 *
 * @package       Cake.Test.Case.I18n
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * tests that rendering a file that does not exists throws an exception
 *
 * @expectedException NotFoundException
 * @return void
 */",
 "/**
 * testRender method
 *
 * @return void
 */",
 "/**
 * testRenderWithUnknownFileTypeGeneric method
 *
 * @return void
 */",
 "/**
 * testRenderWithUnknownFileTypeOpera method
 *
 * @return void
 */",
 "/**
 * testRenderWithUnknownFileTypeIE method
 *
 * @return void
 */",
 "/**
 * testConnectionAborted method
 *
 * @return void
 */",
 "/**
 * testConnectionAbortedOnBuffering method
 *
 * @return void
 */",
 "/**
 * Test downloading files with UPPERCASE extensions.
 *
 * @return void
 */",
 "/**
 * Test downloading files with extension not explicitly set.
 *
 * @return void
 */",
 "/**
 * MediaViewTest class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * Constructor.
 *
 * @param string $path Path to folder
 * @param boolean $create Create folder if not found
 * @param string|boolean $mode Mode (CHMOD) to apply to created folder, false to ignore
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder
 */",
 "/**
 * Return current path.
 *
 * @return string Current path
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::pwd
 */",
 "/**
 * Change directory to $path.
 *
 * @param string $path Path to the directory to change to
 * @return string The new path. Returns false on failure
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::cd
 */",
 "/**
 * Returns an array of the contents of the current directory.
 * The returned array holds two arrays: One of directories and one of files.
 *
 * @param boolean $sort Whether you want the results sorted, set this and the sort property
 *   to false to get unsorted results.
 * @param array|boolean $exceptions Either an array or boolean true will not grab dot files
 * @param boolean $fullPath True returns the full path
 * @return mixed Contents of current directory as an array, an empty array on failure
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::read
 */",
 "/**
 * Returns an array of all matching files in current directory.
 *
 * @param string $regexpPattern Preg_match pattern (Defaults to: .*)
 * @param boolean $sort Whether results should be sorted.
 * @return array Files that match given pattern
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::find
 */",
 "/**
 * Returns an array of all matching files in and below current directory.
 *
 * @param string $pattern Preg_match pattern (Defaults to: .*)
 * @param boolean $sort Whether results should be sorted.
 * @return array Files matching $pattern
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::findRecursive
 */",
 "/**
 * Private helper function for findRecursive.
 *
 * @param string $pattern Pattern to match against
 * @param boolean $sort Whether results should be sorted.
 * @return array Files matching pattern
 */",
 "/**
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::correctSlashFor
 */",
 "/**
 * Returns $path with added terminating slash (corrected for Windows or other OS).
 *
 * @param string $path Path to check
 * @return string Path with ending slash
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::slashTerm
 */",
 "/**
 * Returns $path with $element added, with correct slash in-between.
 *
 * @param string $path Path
 * @param string $element Element to and at end of path
 * @return string Combined path
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::addPathElement
 */",
 "/**
 * Returns true if the File is in a given CakePath.
 *
 * @param string $path The path to check.
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::inCakePath
 */",
 "/**
 * Returns true if the File is in given path.
 *
 * @param string $path The path to check that the current pwd() resides with in.
 * @param boolean $reverse Reverse the search, check that pwd() resides within $path.
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::inPath
 */",
 "/**
 * Change the mode on a directory structure recursively. This includes changing the mode on files as well.
 *
 * @param string $path The path to chmod
 * @param integer $mode octal value 0755
 * @param boolean $recursive chmod recursively, set to false to only change the current directory.
 * @param array $exceptions array of files, directories to skip
 * @return boolean Returns TRUE on success, FALSE on failure
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::chmod
 */",
 "/**
 * Returns an array of nested directories and files in each directory
 *
 * @param string $path the directory path to build the tree from
 * @param array|boolean $exceptions Either an array of files/folder to exclude
 *   or boolean true to not grab dot files/folders
 * @param string $type either \'file\' or \'dir\'. null returns both files and directories
 * @return mixed array of nested directories and files in each directory
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::tree
 */",
 "/**
 * Create a directory structure recursively. Can be used to create
 * deep path structures like `/foo/bar/baz/shoe/horn`
 *
 * @param string $pathname The directory structure to create
 * @param integer $mode octal value 0755
 * @return boolean Returns TRUE on success, FALSE on failure
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::create
 */",
 "/**
 * Returns the size in bytes of this Folder and its contents.
 *
 * @return integer size in bytes of current folder
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::dirsize
 */",
 "/**
 * Recursively Remove directories if the system allows.
 *
 * @param string $path Path of directory to delete
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::delete
 */",
 "/**
 * Recursive directory copy.
 *
 * ### Options
 *
 * - `to` The directory to copy to.
 * - `from` The directory to copy from, this will cause a cd() to occur, changing the results of pwd().
 * - `mode` The mode to copy the files/directories with.
 * - `skip` Files/directories to skip.
 *
 * @param array|string $options Either an array of options (see above) or a string of the destination directory.
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::copy
 */",
 "/**
 * Recursive directory move.
 *
 * ### Options
 *
 * - `to` The directory to copy to.
 * - `from` The directory to copy from, this will cause a cd() to occur, changing the results of pwd().
 * - `chmod` The mode to copy the files/directories with.
 * - `skip` Files/directories to skip.
 *
 * @param array $options (to, from, chmod, skip)
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::move
 */",
 "/**
 * get messages from latest method
 *
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::messages
 */",
 "/**
 * get error from latest method
 *
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::errors
 */",
 "/**
 * Get the real path (taking \"..\" and such into account)
 *
 * @param string $path Path to resolve
 * @return string The resolved path
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#Folder::realpath
 */",
 "/**
 * Constructor
 *
 * Sets a few default settings up.
 */",
 "/**
 * Initialize method
 * 
 * @param AclComponent $Component Component instance 
 * @return void
 */",
 "/**
 * build and setup internal ACL representation
 *
 * @param array $config configuration array, see docs
 * @return void
 * @throws AclException When required keys are missing.
 */",
 "/**
 * No op method, allow cannot be done with PhpAcl
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * deny ARO access to ACO
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * No op method
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Main ACL check function. Checks to see if the ARO (access request object) has access to the
 * ACO (access control object).
 *
 * @param string $aro ARO
 * @param string $aco ACO
 * @param string $action Action
 * @return boolean true if access is granted, false otherwise
 */",
 "/**
 * PhpAcl implements an access control system using a plain PHP configuration file. 
 * An example file can be found in app/Config/acl.php
 *
 * @package Cake.Controller.Component.Acl
 */",
 "/**
 * return path to the requested ACO with allow and deny rules attached on each level
 *
 * @return array
 */",
 "/**
 * allow/deny ARO access to ARO
 *
 * @return void 
 */",
 "/**
 * resolve given ACO string to a path
 *
 * @param string $aco ACO string
 * @return array path
 */",
 "/**
 * build a tree representation from the given allow/deny informations for ACO paths
 *
 * @param array $allow ACO allow rules
 * @param array $deny ACO deny rules
 * @return void 
 */",
 "/**
 * Access Control Object
 *
 */",
 "/**
 * From the perspective of the given ARO, walk down the tree and
 * collect all inherited AROs levelwise such that AROs from different
 * branches with equal distance to the requested ARO will be collected at the same
 * index. The resulting array will contain a prioritized list of (list of) roles ordered from 
 * the most distant AROs to the requested one itself.
 * 
 * @param string|array $aro An ARO identifier
 * @return array prioritized AROs
 */",
 "/**
 * resolve an ARO identifier to an internal ARO string using
 * the internal mapping information. 
 *
 * @param string|array $aro ARO identifier (User.jeff, array(\'User\' => ...), etc)
 * @return string internal aro string (e.g. User/jeff, Role/default)
 */",
 "/**
 * adds a new ARO to the tree
 *
 * @param array $aro one or more ARO records
 * @return void
 */",
 "/**
 * adds one or more aliases to the internal map. Overwrites existing entries.
 *
 * @param array $alias alias from => to (e.g. Role/13 -> Role/editor)
 * @return void
 */",
 "/**
 * build an ARO tree structure for internal processing
 *
 * @param array $aros array of AROs as key and their inherited AROs as values
 * @return void 
 */",
 "/**
 * Access Request Object
 *
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Initiate behavior for the model using specified settings.
 *
 * Available settings:
 *
 * - recursive: (boolean, optional) set to true to allow containable to automatically
 *   determine the recursiveness level needed to fetch specified models,
 *   and set the model recursiveness to this level. setting it to false
 *   disables this feature. DEFAULTS TO: true
 * - notices: (boolean, optional) issues E_NOTICES for bindings referenced in a
 *   containable call that are not valid. DEFAULTS TO: true
 * - autoFields: (boolean, optional) auto-add needed fields to fetch requested
 *   bindings. DEFAULTS TO: true
 *
 * @param Model $Model Model using the behavior
 * @param array $settings Settings to override for model.
 * @return void
 */",
 "/**
 * Runs before a find() operation. Used to allow \'contain\' setting
 * as part of the find call, like this:
 *
 * `Model->find(\'all\', array(\'contain\' => array(\'Model1\', \'Model2\')));`
 *
 * {{{
 * Model->find(\'all\', array(\'contain\' => array(
 * 	\'Model1\' => array(\'Model11\', \'Model12\'),
 * 	\'Model2\',
 * 	\'Model3\' => array(
 * 		\'Model31\' => \'Model311\',
 * 		\'Model32\',
 * 		\'Model33\' => array(\'Model331\', \'Model332\')
 * )));
 * }}}
 *
 * @param Model $Model	Model using the behavior
 * @param array $query Query parameters as set by cake
 * @return array
 */",
 "/**
 * Unbinds all relations from a model except the specified ones. Calling this function without
 * parameters unbinds all related models.
 *
 * @param Model $Model Model on which binding restriction is being applied
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/containable.html#using-containable
 */",
 "/**
 * Permanently restore the original binding settings of given model, useful
 * for restoring the bindings after using \'reset\' => false as part of the
 * contain call.
 *
 * @param Model $Model Model on which to reset bindings
 * @return void
 */",
 "/**
 * Process containments for model.
 *
 * @param Model $Model Model on which binding restriction is being applied
 * @param array $contain Parameters to use for restricting this model
 * @param array $containments Current set of containments
 * @param boolean $throwErrors Whether non-existent bindings show throw errors
 * @return array Containments
 */",
 "/**
 * Calculate needed fields to fetch the required bindings for the given model.
 *
 * @param Model $Model Model
 * @param array $map Map of relations for given model
 * @param array|boolean $fields If array, fields to initially load, if false use $Model as primary model
 * @return array Fields
 */",
 "/**
 * Build the map of containments
 *
 * @param array $containments Containments
 * @return array Built containments
 */",
 "/**
 * Behavior to allow for dynamic and atomic manipulation of a Model\'s associations 
 * used for a find call. Most useful for limiting the amount of associations and 
 * data returned.
 *
 * @package       Cake.Model.Behavior
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/containable.html
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testDocument method
 *
 * @return void
 */",
 "/**
 * testChannel method
 *
 * @return void
 */",
 "/**
 * test correct creation of channel sub elements.
 *
 * @return void
 */",
 "/**
 * testItems method
 *
 * @return void
 */",
 "/**
 * testItem method
 *
 * @return void
 */",
 "/**
 * test item() with cdata blocks.
 *
 * @return void
 */",
 "/**
 * test item() with enclosure data.
 *
 * @return void
 */",
 "/**
 * testElementAttrNotInParent method
 *
 * @return void
 */",
 "/**
 * RssHelperTest class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * Access Request Object
 *
 * @package       Cake.Model
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * DB ACL wrapper test class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Aro Test Wrapper
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Aco Test Wrapper
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Permission Test Wrapper
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * DboActionTest class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * bindNode method
 *
 * @param string|array|Model $ref
 * @return void
 */",
 "/**
 * DbAroUserTest class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * construct method
 *
 * @return void
 */",
 "/**
 * TestDbAcl class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * testNode method
 *
 * @return void
 */",
 "/**
 * test that node() doesn\'t dig deeper than it should.
 *
 * @return void
 */",
 "/**
 * testNodeArrayFind method
 *
 * @return void
 */",
 "/**
 * testNodeObjectFind method
 *
 * @return void
 */",
 "/**
 * testNodeAliasParenting method
 *
 * @return void
 */",
 "/**
 * testNodeActionAuthorize method
 *
 * @return void
 */",
 "/**
 * AclNodeTest class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Create an `alert()` message in Javascript
 *
 * @param string $message Message you want to alter.
 * @return string completed alert()
 */",
 "/**
 * Redirects to a URL.  Creates a window.location modification snippet
 * that can be used to trigger \'redirects\' from Javascript.
 *
 * @param string|array $url
 * @param array  $options
 * @return string completed redirect in javascript
 */",
 "/**
 * Create a `confirm()` message
 *
 * @param string $message Message you want confirmed.
 * @return string completed confirm()
 */",
 "/**
 * Generate a confirm snippet that returns false from the current
 * function scope.
 *
 * @param string $message Message to use in the confirm dialog.
 * @return string completed confirm with return script
 */",
 "/**
 * Create a `prompt()` Javascript function
 *
 * @param string $message Message you want to prompt.
 * @param string $default Default message
 * @return string completed prompt()
 */",
 "/**
 * Generates a JavaScript object in JavaScript Object Notation (JSON)
 * from an array.  Will use native JSON encode method if available, and $useNative == true
 *
 * ### Options:
 *
 * - `prefix` - String prepended to the returned data.
 * - `postfix` - String appended to the returned data.
 *
 * @param array $data Data to be converted.
 * @param array $options Set of options, see above.
 * @return string A JSON code block
 */",
 "/**
 * Converts a PHP-native variable of any type to a JSON-equivalent representation
 *
 * @param mixed $val A PHP variable to be converted to JSON
 * @param boolean $quoteString If false, leaves string values unquoted
 * @return string a JavaScript-safe/JSON representation of $val
 */",
 "/**
 * Escape a string to be JSON friendly.
 *
 * List of escaped elements:
 *
 * - \"\r\" => \'\n\'
 * - \"\n\" => \'\n\'
 * - \'\"\' => \'\\\"\'
 *
 * @param string $string String that needs to get escaped.
 * @return string Escaped string.
 */",
 "/**
*###Options
*
*-`handle`-selectortothehandleelement.
*-`snapGrid`-Thepixelgridthatmovementsnapsto,anarray(x,y)
*-`container`-Theelementthatactsasaboundingboxforthedraggableelement.
*
*###EventOptions
*
*-`start`-Eventfiredwhenthedragstarts
*-`drag`-Eventfiredoneverystepofthedrag
*-`stop`-Eventfiredwhendraggingstops(mouserelease)
*
*@paramarray$optionsOptionsarrayseeabove.
*@returnstringCompleteddragscript
*/",
 "/**
*Createadroppableelement.Allowsfordraggableelementstobedroppedonit.
*Additionaloptionsmaybesupportedbythelibraryimplementation.
*
*###Options
*
*-`accept`-Selectorforelementsthisdroppablewillaccept.
*-`hoverclass`-Classtoaddtodroppablewhenadraggableisover.
*
*###EventOptions
*
*-`drop`-Eventfiredwhenanelementisdroppedintothedropzone.
*-`hover`-Eventfiredwhenadragentersadropzone.
*-`leave`-Eventfiredwhenadragisremovedfromadropzonewithoutbeingdropped.
*
*@paramarray$optionsArrayofoptionsforthedrop.Seeabove.
*@returnstringCompleteddropscript
*/",
 "/**
*Createasortableelement.
*Additionaloptionsmaybesupportedbythelibraryimplementation.
*
*###Options
*
*-`containment`-Containerformoveaction
*-`handle`-Selectortohandleelement.Onlythiselementwillstartsortaction.
*-`revert`-Whetherornottouseaneffecttomovesortableintofinalposition.
*-`opacity`-Opacityoftheplaceholder
*-`distance`-Distanceasortablemustbedraggedbeforesortingstarts.
*
*###EventOptions
*
*-`start`-Eventfiredwhensortingstarts
*-`sort`-Eventfiredduringsorting
*-`complete`-Eventfiredwhensortingcompletes.
*
*@paramarray$optionsArrayofoptionsforthesortable.Seeabove.
*@returnstringCompletedsortablescript.
*/",
 "/**
*CreateasliderUIwidget.Comprisedofatrackandknob.
*Additionaloptionsmaybesupportedbythelibraryimplementation.
*
*###Options
*
*-`handle`-Theidoftheelementusedinsliding.
*-`direction`-Thedirectionoftheslidereither\'vertical\'or\'horizontal\'
*-`min`-Theminvaluefortheslider.
*-`max`-Themaxvaluefortheslider.
*-`step`-Thenumberofstepsorticksthesliderwillhave.
*-`value`-Theinitialoffsetoftheslider.
*
*###Events
*
*-`change`-Firedwhentheslider\'svalueisupdated
*-`complete`-Firedwhentheuserstopsslidingthehandle
*
*@paramarray$optionsArrayofoptionsfortheslider.Seeabove.
*@returnstringCompletedsliderscript
*/",
 "/**
*Serializetheformattachedto$selector.
*Pass`true`for$isFormifthecurrentselectionisaformelement.
*Convertstheformortheformelementattachedtothecurrentselectionintoastring/jsonobject
*(dependingonthelibraryimplementation)forusewithXHRoperations.
*
*###Options
*
*-`isForm`-isthecurrentselectionaform,oraninput?(defaultstofalse)
*-`inline`-istherenderedstatementgoingtobeusedinsideanotherJSstatement?(defaultstofalse)
*
*@paramarray$optionsoptionsforserializationgeneration.
*@returnstringcompletedformserializationscript
*/",
 "/**
*ParseanoptionsassocarrayintoanJavascriptobjectliteral.
*Similartoobject()buttreatsanynon-integervalueasastring,
*doesnotinclude`{}`
*
*@paramarray$optionsOptionstobeconverted
*@paramarray$safeKeysKeysthatshouldnotbeescaped.
*@returnstringParsedJSONoptionswithoutenclosing{}.
*/",
 "/**
*MapsAbstractoptionstoenginespecificoptionnames.
*Ifattributesaremissingfromthemap,theyarenotchanged.
*
*@paramstring$methodNameofmethodwhoseoptionsarebeingworkedwith.
*@paramarray$optionsArrayofoptionstomap.
*@returnarrayArrayofmappedoptions.
*/",
 "/**
*Preparecallbacksandwrapthemwithfunction([args]){}asdefinedin
*_callbackArgsarray.
*
*@paramstring$methodNameofthemethodyouarepreparingcallbacksfor.
*@paramarray$optionsArrayofoptionsbeingparsed
*@paramarray$callbacksAdditionalKeysthatcontaincallbacks
*@returnarrayArrayofoptionswithcallbacksadded.
*/",
 "/**
*Conveniencewrappermethodforallcommonoptionprocessingsteps.
*Runs_mapOptions,_prepareCallbacks,and_parseOptionsinorder.
*
*@paramstring$methodNameofmethodprocessingoptionsfor.
*@paramarray$optionsArrayofoptionstoprocess.
*@returnstringParsedoptionsstring.
*/",
 "/**
*Convertanarrayofdataintoaquerystring
*
*@paramarray$parametersArrayofparameterstoconverttoaquerystring
*@returnstringQuerystringfragment
*/",
 "/**
*JsEngineBaseClass
*
*AbstractBaseClassforAllJsEnginestoextend.Providesgenericmethods.
*
*@packageCake.View.Helper
*/",
 "/**
 * Renders the response for the exception.
 *
 * @return void
 */",
 "/**
 * Application model for Cake.
 *
 * Add your application-wide methods in the class below, your models
 * will inherit them.
 *
 * @package       app.Model
 */",
 "/**
 * constructor, no-op
 *
 */",
 "/**
 * Object-to-string conversion.
 * Each class can override this method as necessary.
 *
 * @return string The name of this class
 */",
 "/**
 * Calls a controller\'s method from any location. Can be used to connect controllers together
 * or tie plugins into a main application. requestAction can be used to return rendered views
 * or fetch the return value from controller actions.
 *
 * Under the hood this method uses Router::reverse() to convert the $url parameter into a string
 * URL.  You should use URL formats that are compatible with Router::reverse()
 *
 * #### Passing POST and GET data
 *
 * POST and GET data can be simulated in requestAction.  Use `$extra[\'url\']` for
 * GET data.  The `$extra[\'data\']` parameter allows POST data simulation.
 *
 * @param string|array $url String or array-based url.  Unlike other url arrays in CakePHP, this
 *    url will not automatically handle passed and named arguments in the $url parameter.
 * @param array $extra if array includes the key \"return\" it sets the AutoRender to true.  Can
 *    also be used to submit GET/POST data, and named/passed arguments.
 * @return mixed Boolean true or false on success/failure, or contents
 *    of rendered action if \'return\' is set in $extra.
 */",
 "/**
 * Calls a method on this object with the given parameters. Provides an OO wrapper
 * for `call_user_func_array`
 *
 * @param string $method  Name of the method to call
 * @param array $params  Parameter list to use when calling $method
 * @return mixed  Returns the result of the method call
 */",
 "/**
 * Stop execution of the current script.  Wraps exit() making
 * testing easier.
 *
 * @param integer|string $status see http://php.net/exit for values
 * @return void
 */",
 "/**
 * Convenience method to write a message to CakeLog.  See CakeLog::write()
 * for more information on writing to logs.
 *
 * @param string $msg Log message
 * @param integer $type Error type constant. Defined in app/Config/core.php.
 * @return boolean Success of log write
 */",
 "/**
 * Allows setting of multiple properties of the object in a single line of code.  Will only set
 * properties that are part of a class declaration.
 *
 * @param array $properties An associative array containing properties and corresponding values.
 * @return void
 */",
 "/**
 * Merges this objects $property with the property in $class\' definition.
 * This classes value for the property will be merged on top of $class\'
 *
 * This provides some of the DRY magic CakePHP provides.  If you want to shut it off, redefine
 * this method as an empty function.
 *
 * @param array $properties The name of the properties to merge.
 * @param string $class The class to merge the property with.
 * @param boolean $normalize Set to true to run the properties through Hash::normalize() before merging.
 * @return void
 */",
 "/**
 * Object class provides a few generic methods used in several subclasses.
 *
 * Also includes methods for logging and the special method RequestAction,
 * to call other Controllers\' Actions from anywhere.
 *
 * @package       Cake.Core
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllUtilityTest class
 *
 * This test group will run all non mvc related lib class tests
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Initialize callback.  Setup paths for the template task.
 *
 * @return void
 */",
 "/**
*Findthepathstoalltheinstalledshellthemesintheapp.
*
*Bakethemesaredirectoriesnotnamed`skel`insidea`Console/Templates`path.
*Theyarelistedinthisorder:app->plugin->default
*
*@returnarrayArrayofbakethemesthatareinstalled.
*/",
 "/**
*Setvariablevaluestothetemplatescope
*
*@paramstring|array$oneAstringoranarrayofdata.
*@paramstring|array$twoValueincase$oneisastring(whichthenworksasthekey).
*Unusedif$oneisanassociativearray,otherwiseservesasthevaluesto$one\'skeys.
*@returnvoid
*/",
 "/**
*Runsthetemplate
*
*@paramstring$directorydirectory/typeofthingyouwant
*@paramstring$filenametemplatename
*@paramarray$varsAdditionalvarstosettotemplatescope.
*@returnstringcontentsofgeneratedcodetemplate
*/",
 "/**
*Findthethemenameforthecurrentoperation.
*Ifthereisonlyonethemein$templatePathsitwillbeused.
*Ifthereisa-themeparaminthecliargs,itwillbeused.
*Ifthereismorethanoneinstalledthemeuserinteractionwillhappen
*
*@returnstringreturnsthepathtotheselectedtheme.
*/",
 "/**
*Findatemplateinsideadirectoryinsideapath.
*Willscanallotherthemedirsifthetemplateisnotfoundinthefirstdirectory.
*
*@paramstring$pathTheinitialpathtolookforthefileon.Ifitisnotfoundfallbackswillbeused.
*@paramstring$directorySubdirectorytolookforie.\'views\',\'objects\'
*@paramstring$filenamelower_case_underscoredfilenameyouwant.
*@returnstringfilenamewillexitprogramiftemplateisnotfound.
*/",
 "/**
*TemplateTaskcangeneratetemplatedoutputUsedinotherTasks.
*ActslikeasimplifiedViewclass.
*
*@packageCake.Console.Command.Task
*/",
 "/**
 * Application Shell
 *
 * Add your application-wide methods in the class below, your shells
 * will inherit them.
 *
 * @package       app.Console.Command
 */",
 "/**
 * Creates the controller to perform rendering on the error response.
 * If the error is a CakeException it will be converted to either a 400 or a 500
 * code error depending on the code used to construct the error.
 *
 * @param Exception $exception Exception
 */",
 "/**
 * Get the controller instance to handle the exception.
 * Override this method in subclasses to customize the controller used.
 * This method returns the built in `CakeErrorController` normally, or if an error is repeated
 * a bare controller will be used.
 *
 * @param Exception $exception The exception to get a controller for.
 * @return Controller
 */",
 "/**
 * Renders the response for the exception.
 *
 * @return void
 */",
 "/**
 * Generic handler for the internal framework errors CakePHP can generate.
 *
 * @param CakeException $error
 * @return void
 */",
 "/**
 * Convenience method to display a 400 series page.
 *
 * @param Exception $error
 * @return void
 */",
 "/**
 * Convenience method to display a 500 page.
 *
 * @param Exception $error
 * @return void
 */",
 "/**
 * Convenience method to display a PDOException.
 *
 * @param PDOException $error
 * @return void
 */",
 "/**
 * Generate the response using the controller object.
 *
 * @param string $template The template to render.
 * @return void
 */",
 "/**
 * A safer way to render error messages, replaces all helpers, with basics
 * and doesn\'t call component methods.
 *
 * @param string $template The template to render
 * @return void
 */",
 "/**
 * Exception Renderer.
 *
 * Captures and handles all unhandled exceptions. Displays helpful framework errors when debug > 1.
 * When debug < 1 a CakeException will render 404 or  500 errors.  If an uncaught exception is thrown
 * and it is a type that ExceptionHandler does not know about it will be treated as a 500 error.
 *
 * ### Implementing application specific exception rendering
 *
 * You can implement application specific exception handling in one of a few ways:
 *
 * - Create a AppController::appError();
 * - Create a subclass of ExceptionRenderer and configure it to be the `Exception.renderer`
 *
 * #### Using AppController::appError();
 *
 * This controller method is called instead of the default exception handling.  It receives the
 * thrown exception as its only argument.  You should implement your error handling in that method.
 *
 * #### Using a subclass of ExceptionRenderer
 *
 * Using a subclass of ExceptionRenderer gives you full control over how Exceptions are rendered, you
 * can configure your class in your core.php, with `Configure::write(\'Exception.renderer\', \'MyClass\');`
 * You should place any custom exception renderers in `app/Lib/Error`.
 *
 * @package       Cake.Error
 */",
 "/**
 * Class constructor
 *
 * @param array $options list of parameters to setup the response. Possible values are:
 *	- body: the response text that should be sent to the client
 *	- status: the HTTP status code to respond with
 *	- type: a complete mime-type string or an extension mapped in this class
 *	- charset: the charset for the response body
 */",
 "/**
 * Sends the complete response to the client including headers and message body.
 * Will echo out the content in the response body.
 *
 * @return void
 */",
 "/**
 * Sets the cookies that have been added via static method CakeResponse::addCookie()
 * before any other output is sent to the client.
 * Will set the cookies in the order they have been set.
 *
 * @return void
 */",
 "/**
 * Formats the Content-Type header based on the configured contentType and charset
 * the charset will only be set in the header if the response is of type text/*
 *
 * @return void
 */",
 "/**
 * Sets the response body to an empty text if the status code is 204 or 304
 *
 * @return void
 */",
 "/**
 * Calculates the correct Content-Length and sets it as a header in the response
 * Will not set the value if already set or if the output is compressed.
 *
 * @return void
 */",
 "/**
 * Sends a header to the client.
 *
 * @param string $name the header name
 * @param string $value the header value
 * @return void
 */",
 "/**
 * Sends a content string to the client.
 *
 * @param string $content string to send as response body
 * @return void
 */",
 "/**
 * Buffers a header string to be sent
 * Returns the complete list of buffered headers
 *
 * ### Single header
 * e.g `header(\'Location\', \'http://example.com\');`
 *
 * ### Multiple headers
 * e.g `header(array(\'Location\' => \'http://example.com\', \'X-Extra\' => \'My header\'));`
 *
 * ### String header
 * e.g `header(\'WWW-Authenticate: Negotiate\');`
 *
 * ### Array of string headers
 * e.g `header(array(\'WWW-Authenticate: Negotiate\', \'Content-type: application/pdf\'));`
 *
 * Multiple calls for setting the same header name will have the same effect as setting the header once
 * with the last value sent for it
 *  e.g `header(\'WWW-Authenticate: Negotiate\'); header(\'WWW-Authenticate: Not-Negotiate\');`
 * will have the same effect as only doing `header(\'WWW-Authenticate: Not-Negotiate\');`
 *
 * @param string|array $header. An array of header strings or a single header string
 *	- an associative array of \"header name\" => \"header value\" is also accepted
 *	- an array of string headers is also accepted
 * @param string $value. The header value.
 * @return array list of headers to be sent
 */",
 "/**
 * Buffers the response message to be sent
 * if $content is null the current buffer is returned
 *
 * @param string $content the string message to be sent
 * @return string current message buffer if $content param is passed as null
 */",
 "/**
 * Sets the HTTP status code to be sent
 * if $code is null the current code is returned
 *
 * @param integer $code
 * @return integer current status code
 * @throws CakeException When an unknown status code is reached.
 */",
 "/**
 * Queries & sets valid HTTP response codes & messages.
 *
 * @param integer|array $code If $code is an integer, then the corresponding code/message is
 *        returned if it exists, null if it does not exist. If $code is an array,
 *        then the \'code\' and \'message\' keys of each nested array are added to the default
 *        HTTP codes. Example:
 *
 *        httpCodes(404); // returns array(404 => \'Not Found\')
 *
 *        httpCodes(array(
 *            701 => \'Unicorn Moved\',
 *            800 => \'Unexpected Minotaur\'
 *        )); // sets these new values, and returns true
 *
 * @return mixed associative array of the HTTP codes as keys, and the message
 *    strings as values, or null of the given $code does not exist.
 */",
 "/**
 * Sets the response content type. It can be either a file extension
 * which will be mapped internally to a mime-type or a string representing a mime-type
 * if $contentType is null the current content type is returned
 * if $contentType is an associative array, content type definitions will be stored/replaced
 *
 * ### Setting the content type
 *
 * e.g `type(\'jpg\');`
 *
 * ### Returning the current content type
 *
 * e.g `type();`
 *
 * ### Storing content type definitions
 *
 * e.g `type(array(\'keynote\' => \'application/keynote\', \'bat\' => \'application/bat\'));`
 *
 * ### Replacing a content type definition
 *
 * e.g `type(array(\'jpg\' => \'text/plain\'));`
 *
 * @param string $contentType
 * @return mixed current content type or false if supplied an invalid content type
 */",
 "/**
 * Returns the mime type definition for an alias
 *
 * e.g `getMimeType(\'pdf\'); // returns \'application/pdf\'`
 *
 * @param string $alias the content type alias to map
 * @return mixed string mapped mime type or false if $alias is not mapped
 */",
 "/**
 * Maps a content-type back to an alias
 *
 * e.g `mapType(\'application/pdf\'); // returns \'pdf\'`
 *
 * @param string|array $ctype Either a string content type to map, or an array of types.
 * @return mixed Aliases for the types provided.
 */",
 "/**
 * Sets the response charset
 * if $charset is null the current charset is returned
 *
 * @param string $charset
 * @return string current charset
 */",
 "/**
 * Sets the correct headers to instruct the client to not cache the response
 *
 * @return void
 */",
 "/**
 * Sets the correct headers to instruct the client to cache the response.
 *
 * @param string $since a valid time since the response text has not been modified
 * @param string $time a valid time for cache expiry
 * @return void
 */",
 "/**
 * Sets whether a response is eligible to be cached by intermediate proxies
 * This method controls the `public` or `private` directive in the Cache-Control
 * header
 *
 * @param boolean $public  if set to true, the Cache-Control header will be set as public
 * if set to false, the response will be set to private
 * if no value is provided, it will return whether the response is sharable or not
 * @param integer $time time in seconds after which the response should no longer be considered fresh
 * @return boolean
 */",
 "/**
 * Sets the Cache-Control s-maxage directive.
 * The max-age is the number of seconds after which the response should no longer be considered
 * a good candidate to be fetched from a shared cache (like in a proxy server).
 * If called with no parameters, this function will return the current max-age value if any
 *
 * @param integer $seconds if null, the method will return the current s-maxage value
 * @return int
 */",
 "/**
 * Sets the Cache-Control max-age directive.
 * The max-age is the number of seconds after which the response should no longer be considered
 * a good candidate to be fetched from the local (client) cache.
 * If called with no parameters, this function will return the current max-age value if any
 *
 * @param integer $seconds if null, the method will return the current max-age value
 * @return int
 */",
 "/**
 * Sets the Cache-Control must-revalidate directive.
 * must-revalidate indicates that the response should not be served
 * stale by a cache under any cirumstance without first revalidating
 * with the origin.
 * If called with no parameters, this function will return wheter must-revalidate is present.
 *
 * @param integer $seconds if null, the method will return the current
 * must-revalidate value
 * @return boolean
 */",
 "/**
 * Helper method to generate a valid Cache-Control header from the options set
 * in other methods
 *
 * @return void
 */",
 "/**
 * Sets the Expires header for the response by taking an expiration time
 * If called with no parameters it will return the current Expires value
 *
 * ## Examples:
 *
 * `$response->expires(\'now\')` Will Expire the response cache now
 * `$response->expires(new DateTime(\'+1 day\'))` Will set the expiration in next 24 hours
 * `$response->expires()` Will return the current expiration header value
 *
 * @param string|DateTime $time
 * @return string
 */",
 "/**
 * Sets the Last-Modified header for the response by taking an modification time
 * If called with no parameters it will return the current Last-Modified value
 *
 * ## Examples:
 *
 * `$response->modified(\'now\')` Will set the Last-Modified to the current time
 * `$response->modified(new DateTime(\'+1 day\'))` Will set the modification date in the past 24 hours
 * `$response->modified()` Will return the current Last-Modified header value
 *
 * @param string|DateTime $time
 * @return string
 */",
 "/**
 * Sets the response as Not Modified by removing any body contents
 * setting the status code to \"304 Not Modified\" and removing all
 * conflicting headers
 *
 * @return void
 **/",
 "/**
 * Sets the Vary header for the response, if an array is passed,
 * values will be imploded into a comma separated string. If no
 * parameters are passed, then an array with the current Vary header
 * value is returned
 *
 * @param string|array $cacheVariances a single Vary string or a array
 * containig the list for variances.
 * @return array
 **/",
 "/**
 * Sets the response Etag, Etags are a strong indicative that a response
 * can be cached by a HTTP client. A bad way of generaing Etags is
 * creating a hash of the response output, instead generate a unique
 * hash of the unique components that identifies a request, such as a
 * modification time, a resource Id, and anything else you consider it
 * makes it unique.
 *
 * Second parameter is used to instuct clients that the content has
 * changed, but sematicallly, it can be used as the same thing. Think
 * for instance of a page with a hit counter, two different page views
 * are equivalent, but they differ by a few bytes. This leaves off to
 * the Client the decision of using or not the cached page.
 *
 * If no parameters are passed, current Etag header is returned.
 *
 * @param string $hash the unique has that identifies this resposnse
 * @param boolean $weak whether the response is semantically the same as
 * other with th same hash or not
 * @return string
 **/",
 "/**
 * Returns a DateTime object initialized at the $time param and using UTC
 * as timezone
 *
 * @param string|integer|DateTime $time
 * @return DateTime
 */",
 "/**
 * Sets the correct output buffering handler to send a compressed response. Responses will
 * be compressed with zlib, if the extension is available.
 *
 * @return boolean false if client does not accept compressed responses or no handler is available, true otherwise
 */",
 "/**
 * Returns whether the resulting output will be compressed by PHP
 *
 * @return boolean
 */",
 "/**
 * Sets the correct headers to instruct the browser to download the response as a file.
 *
 * @param string $filename the name of the file as the browser will download the response
 * @return void
 */",
 "/**
 * Sets the protocol to be used when sending the response. Defaults to HTTP/1.1
 * If called with no arguments, it will return the current configured protocol
 *
 * @return string protocol to be used for sending response
 */",
 "/**
 * Sets the Content-Length header for the response
 * If called with no arguments returns the last Content-Length set
 *
 * @return int
 */",
 "/**
 * Checks whether a response has not been modified according to the \'If-None-Match\'
 * (Etags) and \'If-Modified-Since\' (last modification date) request
 * headers headers. If the response is detected to be not modified, it
 * is marked as so accordingly so the client can be informed of that.
 *
 * In order to mark a response as not modified, you need to set at least
 * the Last-Modified response header or a response etag to be compared
 * with the request itself
 *
 * @return boolean whether the response was marked as not modified or
 * not
 **/",
 "/**
 * String conversion.  Fetches the response body as a string.
 * Does *not* send headers.
 *
 * @return string
 */",
 "/**
 * Getter/Setter for cookie configs
 *
 * This method acts as a setter/getter depending on the type of the argument.
 * If the method is called with no arguments, it returns all configurations.
 *
 * If the method is called with a string as argument, it returns either the
 * given configuration if it is set, or null, if it\'s not set.
 *
 * If the method is called with an array as argument, it will set the cookie
 * configuration to the cookie container.
 *
 * @param $options Either null to get all cookies, string for a specific cookie
 *  or array to set cookie.
 *
 * ### Options (when setting a configuration)
 *  - name: The Cookie name
 *  - value: Value of the cookie
 *  - expire: Time the cookie expires in
 *  - path: Path the cookie applies to
 *  - domain: Domain the cookie is for.
 *  - secure: Is the cookie https?
 *  - httpOnly: Is the cookie available in the client?
 *
 * ## Examples
 *
 * ### Getting all cookies
 *
 * `$this->cookie()`
 *
 * ### Getting a certain cookie configuration
 *
 * `$this->cookie(\'MyCookie\')`
 *
 * ### Setting a cookie configuration
 *
 * `$this->cookie((array) $options)`
 *
 * @return mixed
 */",
 "/**
 * CakeResponse is responsible for managing the response text, status and headers of a HTTP response.
 *
 * By default controllers will use this class to render their response. If you are going to use
 * a custom response class it should subclass this object in order to ensure compatibility.
 *
 * @package       Cake.Network
 */",
 "/**
 * main method
 *
 * @return void
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPluginTwo.Console.Command
 * @since         CakePHP(tm) v 1.2.0.7871
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Test Suite TestPlugin Library
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Lib
 * @since         CakePHP(tm) v 1.2.0.5432
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * testInsertAnotherHabtmRecordWithSameForeignKey method
 *
 * @access public
 * @return void
 */",
 "/**
 * testSaveDateAsFirstEntry method
 *
 * @return void
 */",
 "/**
 * testUnderscoreFieldSave method
 *
 * @return void
 */",
 "/**
 * testAutoSaveUuid method
 *
 * @return void
 */",
 "/**
 * Ensure that if the id key is null but present the save doesn\'t fail (with an
 * x sql error: \"Column id specified twice\")
 *
 * @return void
 */",
 "/**
 * testZeroDefaultFieldValue method
 *
 * @return void
 */",
 "/**
 * Tests validation parameter order in custom validation methods
 *
 * @return void
 */",
 "/**
 * test that Caches are getting cleared on save().
 * ensure that both inflections of controller names are getting cleared
 * as url for controller could be either overallFavorites/index or overall_favorites/index
 *
 * @return void
 */",
 "/**
 * testSaveWithCounterCache method
 *
 * @return void
 */",
 "/**
 * Tests that counter caches are updated when records are added
 *
 * @return void
 */",
 "/**
 * Tests that counter caches are updated when records are deleted
 *
 * @return void
 */",
 "/**
 * Tests that counter caches are updated when foreign keys of counted records change
 *
 * @return void
 */",
 "/**
 * Test counter cache with models that use a non-standard (i.e. not using \'id\')
 * as their primary key.
 *
 * @return void
 */",
 "/**
 * test Counter Cache With Self Joining table
 *
 * @return void
 */",
 "/**
 * testSaveWithCounterCacheScope method
 *
 * @return void
 */",
 "/**
 * Tests having multiple counter caches for an associated model
 *
 * @access public
 * @return void
 */",
 "/**
 * test that beforeValidate returning false can abort saves.
 *
 * @return void
 */",
 "/**
 * test that beforeSave returning false can abort saves.
 *
 * @return void
 */",
 "/**
 * testSaveField method
 *
 * @return void
 */",
 "/**
 * testSaveWithCreate method
 *
 * @return void
 */",
 "/**
 * test that a null Id doesn\'t cause errors
 *
 * @return void
 */",
 "/**
 * testSaveWithSet method
 *
 * @return void
 */",
 "/**
 * testSaveWithNonExistentFields method
 *
 * @return void
 */",
 "/**
 * testSaveFromXml method
 *
 * @return void
 */",
 "/**
 * testSaveHabtm method
 *
 * @return void
 */",
 "/**
 * testSaveHabtmNoPrimaryData method
 *
 * @return void
 */",
 "/**
 * testSaveHabtmCustomKeys method
 *
 * @return void
 */",
 "/**
 * test that saving habtm records respects conditions set in the \'conditions\' key
 * for the association.
 *
 * @return void
 */",
 "/**
 * testHabtmSaveKeyResolution method
 *
 * @return void
 */",
 "/**
 * testCreationOfEmptyRecord method
 *
 * @return void
 */",
 "/**
 * testCreateWithPKFiltering method
 *
 * @return void
 */",
 "/**
 * testCreationWithMultipleData method
 *
 * @return void
 */",
 "/**
 * testCreationWithMultipleDataSameModel method
 *
 * @return void
 */",
 "/**
 * testCreationWithMultipleDataSameModelManualInstances method
 *
 * @return void
 */",
 "/**
 * testRecordExists method
 *
 * @return void
 */",
 "/**
 * testRecordExistsMissingTable method
 *
 * @expectedException PDOException
 * @return void
 */",
 "/**
 * testUpdateExisting method
 *
 * @return void
 */",
 "/**
 * test updating records and saving blank values.
 *
 * @return void
 */",
 "/**
 * testUpdateMultiple method
 *
 * @return void
 */",
 "/**
 * testHabtmUuidWithUuidId method
 *
 * @return void
 */",
 "/**
 * test HABTM saving when join table has no primary key and only 2 columns.
 *
 * @return void
 */",
 "/**
 * test HABTM saving when join table has no primary key and only 2 columns, no with model is used.
 *
 * @return void
 */",
 "/**
 * testHabtmUuidWithNumericId method
 *
 * @return void
 */",
 "/**
 * testSaveMultipleHabtm method
 *
 * @return void
 */",
 "/**
 * testSaveAll method
 *
 * @return void
 */",
 "/**
 * Test SaveAll with Habtm relations
 *
 * @return void
 */",
 "/**
 * Test SaveAll with Habtm relations and extra join table fields
 *
 * @return void
 */",
 "/**
 * testSaveAllHasOne method
 *
 * @return void
 */",
 "/**
 * testSaveAllBelongsTo method
 *
 * @return void
 */",
 "/**
 * testSaveAllHasOneValidation method
 *
 * @return void
 */",
 "/**
 * testSaveAllAtomic method
 *
 * @return void
 */",
 "/**
 * testSaveAllDeepAssociated method
 *
 * @return void
 */",
 "/**
 * testSaveAllDeepMany
 * tests the validate methods with deeper recursive data
 *
 * @return void
 */",
 "/**
 * testSaveAllDeepValidateOnly
 * tests the validate methods with deeper recursive data
 *
 * @return void
 */",
 "/**
 * testSaveAllNotDeepAssociated method
 * test that only directly associated data gets saved
 *
 * @return void
 */",
 "/**
 * testSaveAllNotDeepMany
 * tests the save methods to not save deeper recursive data
 *
 * @return void
 */",
 "/**
 * testSaveAllNotDeepValidateOnly
 * tests the validate methods to not validate deeper recursive data
 *
 * @return void
 */",
 "/**
 * testSaveAllHasMany method
 *
 * @return void
 */",
 "/**
 * testSaveAllHasManyValidation method
 *
 * @return void
 */",
 "/**
 * test saveAll with transactions and ensure there is no missing rollback.
 *
 * @return void
 */",
 "/**
 * test saveAll with transactions and ensure there is no missing rollback.
 *
 * @return void
 */",
 "/**
 * test saveAll with nested saveAll call.
 *
 * @return void
 */",
 "/**
 * testSaveAllTransaction method
 *
 * @return void
 */",
 "/**
 * testSaveAllValidation method
 *
 * @return void
 */",
 "/**
 * testSaveAllValidationOnly method
 *
 * @return void
 */",
 "/**
 * testSaveAllValidateFirst method
 *
 * @return void
 */",
 "/**
 * test saveAll()\'s return is correct when using atomic = false and validate = first.
 *
 * @return void
 */",
 "/**
 * testSaveAllHasManyValidationOnly method
 *
 * @return void
 */",
 "/**
 * test that saveAll behaves like plain save() when supplied empty data
 *
 * @link http://cakephp.lighthouseapp.com/projects/42648/tickets/277-test-saveall-with-validation-returns-incorrect-boolean-when-saving-empty-data
 * @return void
 */",
 "/**
 * testSaveAssociated method
 *
 * @return void
 */",
 "/**
 * testSaveMany method
 *
 * @return void
 */",
 "/**
 * Test SaveAssociated with Habtm relations
 *
 * @return void
 */",
 "/**
 * Test SaveAssociated with Habtm relations and extra join table fields
 *
 * @return void
 */",
 "/**
 * testSaveAssociatedHasOne method
 *
 * @return void
 */",
 "/**
 * testSaveAssociatedBelongsTo method
 *
 * @return void
 */",
 "/**
 * testSaveAssociatedHasOneValidation method
 *
 * @return void
 */",
 "/**
 * testSaveAssociatedAtomic method
 *
 * @return void
 */",
 "/**
 * testSaveManyAtomic method
 *
 * @return void
 */",
 "/**
 * testSaveAssociatedHasMany method
 *
 * @return void
 */",
 "/**
 * testSaveAssociatedHasManyEmpty method
 *
 * @return void
 */",
 "/**
 * testSaveAssociatedHasManyValidation method
 *
 * @return void
 */",
 "/**
 * test saveMany with transactions and ensure there is no missing rollback.
 *
 * @return void
 */",
 "/**
 * test saveAssociated with transactions and ensure there is no missing rollback.
 *
 * @return void
 */",
 "/**
 * test saveMany with nested saveMany call.
 *
 * @return void
 */",
 "/**
 * testSaveManyTransaction method
 *
 * @return void
 */",
 "/**
 * testSaveManyValidation method
 *
 * @return void
 */",
 "/**
 * testValidateMany method
 *
 * @return void
 */",
 "/**
 * testSaveAssociatedValidateFirst method
 *
 * @return void
 */",
 "/**
 * test saveMany()\'s return is correct when using atomic = false and validate = first.
 *
 * @return void
 */",
 "/**
 * testValidateAssociated method
 *
 * @return void
 */",
 "/**
 * test that saveMany behaves like plain save() when suplied empty data
 *
 * @link http://cakephp.lighthouseapp.com/projects/42648/tickets/277-test-saveall-with-validation-returns-incorrect-boolean-when-saving-empty-data
 * @return void
 */",
 "/**
 * test that saveAssociated behaves like plain save() when supplied empty data
 *
 * @link http://cakephp.lighthouseapp.com/projects/42648/tickets/277-test-saveall-with-validation-returns-incorrect-boolean-when-saving-empty-data
 * @return void
 */",
 "/**
 * testUpdateWithCalculation method
 *
 * @return void
 */",
 "/**
 * TestFindAllWithoutForeignKey
 *
 * @return void
 */",
 "/**
 * test updateAll with empty values.
 *
 * @return void
 */",
 "/**
 * testUpdateAllWithJoins
 *
 * @return void
 */",
 "/**
 * testUpdateAllWithoutForeignKey
 *
 * @return void
 */",
 "/**
 * test writing floats in german locale.
 *
 * @return void
 */",
 "/**
 * Test returned array contains primary key when save creates a new record
 *
 * @return void
 */",
 "/**
 * testSaveAllFieldListValidateBelongsTo
 *
 * @return void
 */",
 "/**
 * testSaveAllFieldListHasMany method
 *
 * return @void
 */",
 "/**
 * testSaveAllFieldListHasOne method
 *
 * @return void
 */",
 "/**
 * testSaveAllDeepFieldListValidateBelongsTo
 *
 * @return void
 */",
 "/**
 * testSaveAllDeepFieldListHasMany method
 *
 * return @void
 */",
 "/**
 * testSaveAllDeepHasManyBelongsTo method
 *
 * return @void
 */",
 "/**
 * testSaveAllDeepHasManyhasMany method
 *
 * return @void
 */",
 "/**
 * testSaveAllDeepOrderHasManyHasMany method
 *
 * return @void
 */",
 "/**
 * testSaveAllDeepEmptyHasManyHasMany method
 *
 * return @void
 */",
 "/**
 * testUpdateAllBoolean
 *
 * return @void
 */",
 "/**
 * testUpdateAllBooleanConditions
 *
 * return @void
 */",
 "/**
 * testUpdateBoolean
 *
 * return @void
 */",
 "/**
 * ModelWriteTest
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Command-line code generation utility to automate programmer chores.
 *
 * PHP 5
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       Cake.Console
 * @since         CakePHP(tm) v 1.2.0.5012
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * public accessor to _parseServerString
 *
 * @param string $server
 * @return array
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testSettings method
 *
 * @return void
 */",
 "/**
 * testSettings method
 *
 * @return void
 */",
 "/**
 * testConnect method
 *
 * @return void
 */",
 "/**
 * test connecting to an ipv6 server.
 *
 * @return void
 */",
 "/**
 * test non latin domains.
 *
 * @return void
 */",
 "/**
 * test unix sockets.
 *
 * @return void
 */",
 "/**
 * testReadAndWriteCache method
 *
 * @return void
 */",
 "/**
 * testExpiry method
 *
 * @return void
 */",
 "/**
 * testDeleteCache method
 *
 * @return void
 */",
 "/**
 * testDecrement method
 *
 * @return void
 */",
 "/**
 * testIncrement method
 *
 * @return void
 */",
 "/**
 * test that configurations don\'t conflict, when a file engine is declared after a memcache one.
 *
 * @return void
 */",
 "/**
 * test clearing memcache.
 *
 * @return void
 */",
 "/**
 * test that a 0 duration can successfully write.
 *
 * @return void
 */",
 "/**
 * test that durations greater than 30 days never expire
 *
 * @return void
 */",
 "/**
 * Tests that configuring groups for stored keys return the correct values when read/written
 * Shows that altering the group value is equivalent to deleting all keys under the same
 * group
 *
 * @return void
 */",
 "/**
 * Tests that deleteing from a groups-enabled config is possible
 *
 * @return void
 */",
 "/**
 * Test clearing a cache group
 *
 * @return void
 **/",
 "/**
 * MemcacheEngineTest class
 *
 * @package       Cake.Test.Case.Cache.Engine
 */",
 "/**
 * Test App Comment Model
 *
 *
 *
 * PHP 5
 *
 * CakePHP : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc.
 * @link          http://cakephp.org CakePHP Project
 * @package       Cake.Test.test_app.Model
 * @since         CakePHP v 1.2.0.7726
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Parses a string url into an array. If a plugin key is found, it will be copied to the
 * controller parameter
 *
 * @param string $url The url to parse
 * @return mixed false on failure, or an array of request parameters
 */",
 "/**
 * Reverse route plugin shortcut urls. If the plugin and controller
 * are not the same the match is an auto fail.
 *
 * @param array $url Array of parameters to convert to a string.
 * @return mixed either false or a string url.
 */",
 "/**
 * Plugin short route, that copies the plugin param to the controller parameters
 * It is used for supporting /:plugin routes.
 *
 * @package Cake.Routing.Route
 */",
 "/**
 * Application model for Cake.
 *
 * This is a placeholder class.
 * Create the same file in app/Model/AppModel.php
 * Add your application-wide methods to the class, your models will inherit them.
 *
 * @package       Cake.Model
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test selector method
 *
 * @return void
 */",
 "/**
 * test event binding
 *
 * @return void
 */",
 "/**
 * test dom ready event creation
 *
 * @return void
 */",
 "/**
 * test Each method
 *
 * @return void
 */",
 "/**
 * test Effect generation
 *
 * @return void
 */",
 "/**
 * Test Request Generation
 *
 * @return void
 */",
 "/**
 * test sortable list generation
 *
 * @return void
 */",
 "/**
 * test drag() method
 *
 * @return void
 */",
 "/**
 * test drop() method with the required drag option missing
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * test drop() method
 *
 * @return void
 */",
 "/**
 * test slider generation
 *
 * @return void
 */",
 "/**
 * test the serializeForm implementation.
 *
 * @return void
 */",
 "/**
 * listSources
 *
 * @return boolean
 */",
 "/**
 * Returns the schema for the datasource to enable create/update
 *
 * @param object $Model
 * @return array
 */",
 "/**
 * Just return $func to pass to read() to figure out the COUNT
 * Required for delete/update to work
 *
 * @param Model $Model
 * @param type $func
 * @param type $params
 * @return array
 */",
 "/**
 * TestSource
 *
 * @package       Cake.Test.Case.Model.Datasource
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testCreate
 *
 * @return void
 */",
 "/**
 * testRead
 *
 * @return void
 */",
 "/**
 * testUpdate
 *
 * @return void
 */",
 "/**
 * testDelete
 *
 * @return void
 */",
 "/**
 * DataSourceTest class
 *
 * @package       Cake.Test.Case.Model.Datasource
 */",
 "/**
 * Empty method to be overridden in subclasses
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 */",
 "/**
 * Allow methods are used to grant an ARO access to an ACO.
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Deny methods are used to remove permission from an ARO to access an ACO.
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Inherit methods modify the permission for an ARO to be that of its parent object.
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Initialization method for the Acl implementation
 *
 * @param AclComponent $component
 */",
 "/**
 * Access Control List interface.
 * Implementing classes are used by AclComponent to perform ACL checks in Cake.
 *
 * @package       Cake.Controller.Component
 */",
 "/**
 * This is a placeholder class.
 * Create the same file in app/Controller/AppController.php
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package       Cake.Controller
 * @link http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * test the parsing of routes.
 *
 * @return void
 */",
 "/**
 * test the reverse routing of the plugin shortcut urls.
 *
 * @return void
 */",
 "/**
 * test case for PluginShortRoute
 *
 * @package       Cake.Test.Case.Routing.Route
 */",
 "/**
 * AdFixture class
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test Suite Library
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Lib
 * @since         CakePHP(tm) v 1.3
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * startup
 *
 * @return void
 */",
 "/**
 * Main function Prints out the list of shells.
 *
 * @return void
 */",
 "/**
 * Gets the shell command listing.
 *
 * @return array
 */",
 "/**
 * Scan the provided paths for shells, and append them into $shellList
 *
 * @param string $type
 * @param array $shells
 * @param array $shellList
 * @return array
 */",
 "/**
 * Output text.
 *
 * @param array $shellList
 * @return void
 */",
 "/**
 * Output as XML
 *
 * @param array $shellList
 * @return void
 */",
 "/**
 * get the option parser
 *
 * @return void
 */",
 "/**
 * Shows a list of commands available from the console.
 *
 * @package       Cake.Console.Command
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Start test callback, clears all streams enabled.
 *
 * @return void
 */",
 "/**
 * test importing loggers from app/libs and plugins.
 *
 * @return void
 */",
 "/**
 * test all the errors from failed logger imports
 *
 * @expectedException CakeLogException
 * @return void
 */",
 "/**
 * test config() with valid key name
 *
 * @return void
 */",
 "/**
 * test config() with invalid key name
 *
 * @expectedException CakeLogException
 * @return void
 */",
 "/**
 * test that loggers have to implement the correct interface.
 *
 * @expectedException CakeLogException
 * @return void
 */",
 "/**
 * Test that CakeLog autoconfigures itself to use a FileLogger with the LOGS dir.
 * When no streams are there.
 *
 * @return void
 */",
 "/**
 * test configuring log streams
 *
 * @return void
 */",
 "/**
 * explicit tests for drop()
 *
 * @return void
 **/",
 "/**
 * testLogFileWriting method
 *
 * @return void
 */",
 "/**
 * test selective logging by level/type
 *
 * @return void
 */",
 "/**
 * test enable
 *
 * @expectedException CakeLogException
 */",
 "/**
 * test disable
 *
 * @expectedException CakeLogException
 */",
 "/**
 * test enabled() invalid stream
 *
 * @expectedException CakeLogException
 */",
 "/**
 * test disable invalid stream
 *
 * @expectedException CakeLogException
 */",
 "/**
 * test backward compatible scoped logging
 */",
 "/**
 * test scoped logging
 *
 * @return void
 */",
 "/**
 * test bogus type and scope
 *
 */",
 "/**
 * test scoped logging with convenience methods
 */",
 "/**
 * test convenience methods
 */",
 "/**
*testlevelscustomization
*/",
 "/**
*Testwritinglogfileswithcustomlevels
*/",
 "/**
*CakeLogTestclass
*
*@packageCake.Test.Case.Log
*/",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test that count queries with conditions get the correct joins
 *
 * @return void
 */",
 "/**
 * testTranslateModel method
 *
 * @return void
 */",
 "/**
 * testLocaleFalsePlain method
 *
 * @return void
 */",
 "/**
 * testLocaleFalseAssociations method
 *
 * @return void
 */",
 "/**
 * testLocaleSingle method
 *
 * @return void
 */",
 "/**
 * testLocaleSingleWithConditions method
 *
 * @return void
 */",
 "/**
 * testLocaleSingleAssociations method
 *
 * @return void
 */",
 "/**
 * testLocaleMultiple method
 *
 * @return void
 */",
 "/**
 * testMissingTranslation method
 *
 * @return void
 */",
 "/**
 * testTranslatedFindList method
 *
 * @return void
 */",
 "/**
 * testReadSelectedFields method
 *
 * @return void
 */",
 "/**
 * testSaveCreate method
 *
 * @return void
 */",
 "/**
 * testSaveUpdate method
 *
 * @return void
 */",
 "/**
 * testMultipleCreate method
 *
 * @return void
 */",
 "/**
 * testMultipleUpdate method
 *
 * @return void
 */",
 "/**
 * testMixedCreateUpdateWithArrayLocale method
 *
 * @return void
 */",
 "/**
 * Test that saveAll() works with hasMany associations that contain
 * translations.
 *
 * @return void
 */",
 "/**
 * testValidation method
 *
 * @return void
 */",
 "/**
 * testAttachDetach method
 *
 * @return void
 */",
 "/**
 * testAnotherTranslateTable method
 *
 * @return void
 */",
 "/**
 * testTranslateWithAssociations method
 *
 * @return void
 */",
 "/**
 * testTranslateTableWithPrefix method
 * Tests that is possible to have a translation model with a custom tablePrefix
 *
 * @return void
 */",
 "/**
 * Test infinite loops not occurring with unbindTranslation()
 *
 * @return void
 */",
 "/**
 * Test that an exception is raised when you try to over-write the name attribute.
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Test that translations can be bound and unbound dynamically.
 *
 * @return void
 */",
 "/**
 * TranslateBehaviorTest class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test selector method
 *
 * @return void
 */",
 "/**
 * test event binding
 *
 * @return void
 */",
 "/**
 * test dom ready event creation
 *
 * @return void
 */",
 "/**
 * test Each method
 *
 * @return void
 */",
 "/**
 * test Effect generation
 *
 * @return void
 */",
 "/**
 * Test Request Generation
 *
 * @return void
 */",
 "/**
 * test that alternate jQuery object values work for request()
 *
 * @return void
 */",
 "/**
 * test sortable list generation
 *
 * @return void
 */",
 "/**
 * test drag() method
 *
 * @return void
 */",
 "/**
 * test drop() method
 *
 * @return void
 */",
 "/**
 * test slider generation
 *
 * @return void
 */",
 "/**
 * test the serializeForm method
 *
 * @return void
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllTestSuiteTest class
 *
 * This test group will run all test suite tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Initialize the Cache Engine
 *
 * Called automatically by the cache frontend
 * To reinitialize the settings call Cache::engine(\'EngineName\', [optional] settings = array());
 *
 * @param array $settings array of setting for the engine
 * @return boolean True if the engine has been successfully initialized, false if not
 * @see CacheEngine::__defaults
 */",
 "/**
 * Write data for key into cache
 *
 * @param string $key Identifier for the data
 * @param mixed $value Data to be cached
 * @param integer $duration How long to cache the data, in seconds
 * @return boolean True if the data was successfully cached, false on failure
 */",
 "/**
 * Read a key from the cache
 *
 * @param string $key Identifier for the data
 * @return mixed The cached data, or false if the data doesn\'t exist, has expired, or if there was an error fetching it
 */",
 "/**
 * Increments the value of an integer cached key
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to increment
 * @return New incremented value, false otherwise
 */",
 "/**
 * Decrements the value of an integer cached key
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to subtract
 * @return New decremented value, false otherwise
 */",
 "/**
 * Delete a key from the cache
 *
 * @param string $key Identifier for the data
 * @return boolean True if the value was successfully deleted, false if it didn\'t exist or couldn\'t be removed
 */",
 "/**
 * Delete all keys from the cache.  This will clear every cache config using APC.
 *
 * @param boolean $check If true, nothing will be cleared, as entries are removed
 *    from APC as they expired.  This flag is really only used by FileEngine.
 * @return boolean True Returns true.
 */",
 "/**
 * Returns the `group value` for each of the configured groups
 * If the group initial value was not found, then it initializes
 * the group accordingly.
 *
 * @return array
 **/",
 "/**
 * Increments the group value to simulate deletion of all keys under a group
 * old values will remain in storage until they expire.
 *
 * @return boolean success
 **/",
 "/**
 * APC storage engine for cache
 *
 * @package       Cake.Cache.Engine
 */",
 "/**
 * Application Shell
 *
 * Add your application-wide methods in the class below, your shells
 * will inherit them.
 *
 * @package       app.Console.Command
 */",
 "/**
 * test that assertTags knows how to handle correct quoting.
 *
 * @return void
 */",
 "/**
 * testNumericValuesInExpectationForAssertTags
 *
 * @return void
 */",
 "/**
 * testBadAssertTags
 *
 * @return void
 */",
 "/**
 * testBadAssertTags
 *
 * @return void
 */",
 "/**
 * This class helpes in indirectly testing the functionaliteies of CakeTestCase::assertTags
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
*Removesanynon-alphanumericcharacters.
*
*@paramstring$stringStringtosanitize
*@paramarray$allowedAnarrayofadditionalcharactersthatarenottoberemoved.
*@returnstringSanitizedstring
*/",
 "/**
*MakesastringSQL-safe.
*
*@paramstring$stringStringtosanitize
*@paramstring$connectionDatabaseconnectionbeingused
*@returnstringSQLsafestring
*/",
 "/**
*ReturnsgivenstringsafefordisplayasHTML.Rendersentities.
*
*strip_tags()doesnotvalidatingHTMLsyntaxorstructure,soitmightstripwholepassages
*withbrokenHTML.
*
*###Options:
*
*-remove(boolean)iftruestripsallHTMLtagsbeforeencoding
*-charset(string)thecharsetusedtoencodethestring
*-quotes(int)seehttp://php.net/manual/en/function.htmlentities.php
*-double(boolean)doubeencodehtmlentities
*
*@paramstring$stringStringfromwheretostriptags
*@paramarray$optionsArrayofoptionstouse.
*@returnstringSanitizedstring
*/",
 "/**
*Stripsextrawhitespacefromoutput
*
*@paramstring$strStringtosanitize
*@returnstringwhitespacesanitizedstring
*/",
 "/**
 * Strips image tags from output
 *
 * @param string $str String to sanitize
 * @return string Sting with images stripped.
 */",
 "/**
 * Strips scripts and stylesheets from output
 *
 * @param string $str String to sanitize
 * @return string String with <script>, <style>, <link>, <img> elements removed.
 */",
 "/**
 * Strips extra whitespace, images, scripts and stylesheets from output
 *
 * @param string $str String to sanitize
 * @return string sanitized string
 */",
 "/**
 * Strips the specified tags from output. First parameter is string from
 * where to remove tags. All subsequent parameters are tags.
 *
 * Ex.`$clean = Sanitize::stripTags($dirty, \'b\', \'p\', \'div\');`
 *
 * Will remove all `<b>`, `<p>`, and `<div>` tags from the $dirty string.
 *
 * @param string $str,... String to sanitize
 * @return string sanitized String
 */",
 "/**
*Sanitizesgivenarrayorvalueforsafeinput.Usetheoptionstospecify
*theconnectiontouse,andwhatfiltersshouldbeapplied(withaboolean
*value).Validfilters:
*
*-odd_spaces-removesanynonspacewhitespacecharacters
*-encode-Encodeanyhtmlentities.Encodemustbetrueforthe`remove_html`towork.
*-dollar-Escape`$`with`\$`
*-carriage-Remove`\r`
*-unicode-
*-escape-ShouldthestringbeSQLescaped.
*-backslash-
*-remove_html-StripHTMLwithstrip_tags.`encode`mustbetrueforthisoptiontowork.
*
*@paramstring|array$dataDatatosanitize
*@paramstring|array$optionsIfstring,DBconnectionbeingused,otherwisesetofoptions
*@returnmixedSanitizeddata
*/",
 "/**
*DataSanitization.
*
*Removalofalphanumericcharacters,SQL-safeslash-addedstrings,HTML-friendlystrings,
*andalloftheaboveonarrays.
*
*@packageCake.Utility
*/",
 "/**
 * sessionId method
 *
 * @return string
 */",
 "/**
 * SessionTestController class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * sessionId method
 *
 * @return string
 */",
 "/**
 * OrangeSessionTestController class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * test case startup
 *
 * @return void
 */",
 "/**
 * cleanup after test case.
 *
 * @return void
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * ensure that session ids don\'t change when request action is called.
 *
 * @return void
 */",
 "/**
 * testSessionValid method
 *
 * @return void
 */",
 "/**
 * testSessionError method
 *
 * @return void
 */",
 "/**
 * testSessionReadWrite method
 *
 * @return void
 */",
 "/**
 * testSessionDelete method
 *
 * @return void
 */",
 "/**
 * testSessionCheck method
 *
 * @return void
 */",
 "/**
 * testSessionFlash method
 *
 * @return void
 */",
 "/**
 * testSessionId method
 *
 * @return void
 */",
 "/**
 * testSessionDestroy method
 *
 * @return void
 */",
 "/**
 * SessionComponentTest class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testRead method
 *
 * @return void
 */",
 "/**
 * testWrite method
 *
 * @return void
 */",
 "/**
 * test setting display_errors with debug.
 *
 * @return void
 */",
 "/**
 * testDelete method
 *
 * @return void
 */",
 "/**
 * testLoad method
 *
 * @expectedException RuntimeException
 * @return void
 */",
 "/**
 * test load method for default config creation
 *
 * @return void
 */",
 "/**
 * test load with merging
 *
 * @return void
 */",
 "/**
 * test loading with overwrite
 *
 * @return void
 */",
 "/**
 * testLoad method
 *
 * @return void
 */",
 "/**
 * testStore method
 *
 * @return void
 */",
 "/**
 * test that store and restore only store/restore the provided data.
 *
 * @return void
 */",
 "/**
 * testVersion method
 *
 * @return void
 */",
 "/**
 * test adding new readers.
 *
 * @return void
 */",
 "/**
 * test reader() throwing exceptions on missing interface.
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * Test that clear wipes all values.
 *
 * @return void
 */",
 "/**
 * @expectedException ConfigureException
 */",
 "/**
 * test dump integrated with the PhpReader.
 *
 * @return void
 */",
 "/**
 * Test dumping only some of the data.
 *
 * @return
 */",
 "/**
 * ConfigureTest
 *
 * @package       Cake.Test.Case.Core
 */",
 "/**
 * Is CacheHelper enabled? should files + output be parsed.
 *
 * @return boolean
 */",
 "/**
 * Parses the view file and stores content for cache file building.
 *
 * @param string $viewFile
 * @return void
 */",
 "/**
 * Parses the layout file and stores content for cache file building.
 *
 * @param string $layoutFile
 * @return void
 */",
 "/**
 * Parse a file + output.  Matches nocache tags between the current output and the current file
 * stores a reference of the file, so the generated can be swapped back with the file contents when
 * writing the cache file.
 *
 * @param string $file The filename to process.
 * @param string $out The output for the file.
 * @return string Updated content.
 */",
 "/**
 * Main method used to cache a view
 *
 * @param string $file File to cache
 * @param string $out output to cache
 * @return string view ouput
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/cache.html
 */",
 "/**
 * Parse file searching for no cache tags
 *
 * @param string $file The filename that needs to be parsed.
 * @param string $cache The cached content
 * @return void
 */",
 "/**
 * Munges the output from a view with cache tags, and numbers the sections.
 * This helps solve issues with empty/duplicate content.
 *
 * @return string The content with cake:nocache tags replaced.
 */",
 "/**
 * Strip cake:nocache tags from a string. Since View::render()
 * only removes un-numbered nocache tags, remove all the numbered ones.
 * This is the complement to _replaceSection.
 *
 * @param string $content String to remove tags from.
 * @return string String with tags removed.
 */",
 "/**
 * Parse the output and replace cache tags
 *
 * @param string $cache Output to replace content in.
 * @return string with all replacements made to <!--nocache--><!--nocache-->
 */",
 "/**
 * Write a cached version of the file
 *
 * @param string $content view content to write to a cache file.
 * @param string $timestamp Duration to set for cache file.
 * @param boolean $useCallbacks
 * @return boolean success of caching view.
 */",
 "/**
 * CacheHelper helps create full page view caching.
 *
 * When using CacheHelper you don\'t call any of its methods, they are all automatically
 * called by View, and use the $cacheAction settings set in the controller.
 *
 * @package       Cake.View.Helper
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/cache.html
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllViewTest class
 *
 * This test group will run view class tests (view, theme)
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * testRenderWithoutView method
 *
 * @return void
 */",
 "/**
 * Test render with an array in _serialize
 *
 * @return void
 */",
 "/**
 * testRenderWithView method
 *
 * @return void
 */",
 "/**
 * XmlViewTest
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * Set the cache configuration to use.  config() can
 * both create new configurations, return the settings for already configured
 * configurations.
 *
 * To create a new configuration, or to modify an existing configuration permanently:
 *
 * `Cache::config(\'my_config\', array(\'engine\' => \'File\', \'path\' => TMP));`
 *
 * If you need to modify a configuration temporarily, use Cache::set().
 * To get the settings for a configuration:
 *
 * `Cache::config(\'default\');`
 *
 * There are 5 built-in caching engines:
 *
 * - `FileEngine` - Uses simple files to store content. Poor performance, but good for
 *    storing large objects, or things that are not IO sensitive.
 * - `ApcEngine` - Uses the APC object cache, one of the fastest caching engines.
 * - `MemcacheEngine` - Uses the PECL::Memcache extension and Memcached for storage.
 *   Fast reads/writes, and benefits from memcache being distributed.
 * - `XcacheEngine` - Uses the Xcache extension, an alternative to APC.
 * - `WincacheEngine` - Uses Windows Cache Extension for PHP. Supports wincache 1.1.0 and higher.
 *
 * The following keys are used in core cache engines:
 *
 * - `duration` Specify how long items in this cache configuration last.
 * - `groups` List of groups or \'tags\' associated to every key stored in this config.
 *    handy for deleting a complete group from cache.
 * - `prefix` Prefix appended to all entries. Good for when you need to share a keyspace
 *    with either another cache config or another application.
 * - `probability` Probability of hitting a cache gc cleanup.  Setting to 0 will disable
 *    cache::gc from ever being called automatically.
 * - `servers\' Used by memcache. Give the address of the memcached servers to use.
 * - `compress` Used by memcache.  Enables memcache\'s compressed format.
 * - `serialize` Used by FileCache.  Should cache objects be serialized first.
 * - `path` Used by FileCache.  Path to where cachefiles should be saved.
 * - `lock` Used by FileCache.  Should files be locked before writing to them?
 * - `user` Used by Xcache.  Username for XCache
 * - `password` Used by Xcache.  Password for XCache
 *
 * @see app/Config/core.php for configuration settings
 * @param string $name Name of the configuration
 * @param array $settings Optional associative array of settings passed to the engine
 * @return array(engine, settings) on success, false on failure
 * @throws CacheException
 */",
 "/**
 * Finds and builds the instance of the required engine class.
 *
 * @param string $name Name of the config array that needs an engine instance built
 * @return boolean
 * @throws CacheException
 */",
 "/**
 * Returns an array containing the currently configured Cache settings.
 *
 * @return array Array of configured Cache config names.
 */",
 "/**
 * Drops a cache engine.  Deletes the cache configuration information
 * If the deleted configuration is the last configuration using an certain engine,
 * the Engine instance is also unset.
 *
 * @param string $name A currently configured cache config you wish to remove.
 * @return boolean success of the removal, returns false when the config does not exist.
 */",
 "/**
 * Temporarily change the settings on a cache config.  The settings will persist for the next write
 * operation (write, decrement, increment, clear). Any reads that are done before the write, will
 * use the modified settings. If `$settings` is empty, the settings will be reset to the
 * original configuration.
 *
 * Can be called with 2 or 3 parameters. To set multiple values at once.
 *
 * `Cache::set(array(\'duration\' => \'+30 minutes\'), \'my_config\');`
 *
 * Or to set one value.
 *
 * `Cache::set(\'duration\', \'+30 minutes\', \'my_config\');`
 *
 * To reset a config back to the originally configured values.
 *
 * `Cache::set(null, \'my_config\');`
 *
 * @param string|array $settings Optional string for simple name-value pair or array
 * @param string $value Optional for a simple name-value pair
 * @param string $config The configuration name you are changing. Defaults to \'default\'
 * @return array Array of settings.
 */",
 "/**
 * Garbage collection
 *
 * Permanently remove all expired and deleted data
 *
 * @param string $config [optional] The config name you wish to have garbage collected. Defaults to \'default\'
 * @param integer $expires [optional] An expires timestamp. Defaults to NULL
 * @return void
 */",
 "/**
 * Write data for key into cache. Will automatically use the currently
 * active cache configuration.  To set the currently active configuration use
 * Cache::config()
 *
 * ### Usage:
 *
 * Writing to the active cache config:
 *
 * `Cache::write(\'cached_data\', $data);`
 *
 * Writing to a specific cache config:
 *
 * `Cache::write(\'cached_data\', $data, \'long_term\');`
 *
 * @param string $key Identifier for the data
 * @param mixed $value Data to be cached - anything except a resource
 * @param string $config Optional string configuration name to write to. Defaults to \'default\'
 * @return boolean True if the data was successfully cached, false on failure
 */",
 "/**
 * Read a key from the cache.  Will automatically use the currently
 * active cache configuration.  To set the currently active configuration use
 * Cache::config()
 *
 * ### Usage:
 *
 * Reading from the active cache configuration.
 *
 * `Cache::read(\'my_data\');`
 *
 * Reading from a specific cache configuration.
 *
 * `Cache::read(\'my_data\', \'long_term\');`
 *
 * @param string $key Identifier for the data
 * @param string $config optional name of the configuration to use. Defaults to \'default\'
 * @return mixed The cached data, or false if the data doesn\'t exist, has expired, or if there was an error fetching it
 */",
 "/**
 * Increment a number under the key and return incremented value.
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to add
 * @param string $config Optional string configuration name. Defaults to \'default\'
 * @return mixed new value, or false if the data doesn\'t exist, is not integer,
 *    or if there was an error fetching it.
 */",
 "/**
 * Decrement a number under the key and return decremented value.
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to subtract
 * @param string $config Optional string configuration name. Defaults to \'default\'
 * @return mixed new value, or false if the data doesn\'t exist, is not integer,
 *   or if there was an error fetching it
 */",
 "/**
 * Delete a key from the cache.
 *
 * ### Usage:
 *
 * Deleting from the active cache configuration.
 *
 * `Cache::delete(\'my_data\');`
 *
 * Deleting from a specific cache configuration.
 *
 * `Cache::delete(\'my_data\', \'long_term\');`
 *
 * @param string $key Identifier for the data
 * @param string $config name of the configuration to use. Defaults to \'default\'
 * @return boolean True if the value was successfully deleted, false if it didn\'t exist or couldn\'t be removed
 */",
 "/**
 * Delete all keys from the cache.
 *
 * @param boolean $check if true will check expiration, otherwise delete all
 * @param string $config name of the configuration to use. Defaults to \'default\'
 * @return boolean True if the cache was successfully cleared, false otherwise
 */",
 "/**
 * Delete all keys from the cache belonging to the same group.
 *
 * @param string $group name of the group to be cleared
 * @param string $config name of the configuration to use. Defaults to \'default\'
 * @return boolean True if the cache group was successfully cleared, false otherwise
 */",
 "/**
 * Check if Cache has initialized a working config for the given name.
 *
 * @param string $config name of the configuration to use. Defaults to \'default\'
 * @return boolean Whether or not the config name has been initialized.
 */",
 "/**
 * Return the settings for the named cache engine.
 *
 * @param string $name Name of the configuration to get settings for. Defaults to \'default\'
 * @return array list of settings for this engine
 * @see Cache::config()
 */",
 "/**
 * Cache provides a consistent interface to Caching in your application. It allows you
 * to use several different Cache engines, without coupling your application to a specific
 * implementation.  It also allows you to change out cache storage or configuration without effecting
 * the rest of your application.
 *
 * You can configure Cache engines in your application\'s `bootstrap.php` file.  A sample configuration would
 * be
 *
 * {{{
 *	Cache::config(\'shared\', array(
 *		\'engine\' => \'Apc\',
 *		\'prefix\' => \'my_app_\'
 *  ));
 * }}}
 *
 * This would configure an APC cache engine to the \'shared\' alias.  You could then read and write
 * to that cache alias by using it for the `$config` parameter in the various Cache methods.  In
 * general all Cache operations are supported by all cache engines.  However, Cache::increment() and
 * Cache::decrement() are not supported by File caching.
 *
 * @package       Cake.Cache
 */",
 "/**
 * Runs the test case and collects the results in a TestResult object.
 * If no TestResult object is passed a new one will be created.
 * This method is run for each test method in this class
 *
 * @param  PHPUnit_Framework_TestResult $result
 * @return PHPUnit_Framework_TestResult
 * @throws InvalidArgumentException
 */",
 "/**
 * Called when a test case method is about to start (to be overridden when needed.)
 *
 * @param string $method Test method about to get executed.
 * @return void
 */",
 "/**
 * Called when a test case method has been executed (to be overridden when needed.)
 *
 * @param string $method Test method about that was executed.
 * @return void
 */",
 "/**
 * Overrides SimpleTestCase::skipIf to provide a boolean return value
 *
 * @param boolean $shouldSkip
 * @param string $message
 * @return boolean
 */",
 "/**
 * Setup the test case, backup the static object values so they can be restored.
 * Specifically backs up the contents of Configure and paths in App if they have
 * not already been backed up.
 *
 * @return void
 */",
 "/**
 * teardown any static object changes and restore them.
 *
 * @return void
 */",
 "/**
 * See CakeTestSuiteDispatcher::date()
 *
 * @param string $format format to be used.
 * @return string
 */",
 "/**
 * Announces the start of a test.
 *
 * @param string $method Test method just started.
 * @return void
 */",
 "/**
 * Announces the end of a test.
 *
 * @param string $method Test method just finished.
 * @return void
 */",
 "/**
 * Chooses which fixtures to load for a given test
 *
 * @param string $fixture Each parameter is a model name that corresponds to a
 *                        fixture, i.e. \'Post\', \'Author\', etc.
 * @return void
 * @see CakeTestCase::$autoFixtures
 * @throws Exception when no fixture manager is available.
 */",
 "/**
 * Assert text equality, ignoring differences in newlines.
 * Helpful for doing cross platform tests of blocks of text.
 *
 * @param string $expected The expected value.
 * @param string $result The actual value.
 * @param message The message to use for failure.
 * @return boolean
 */",
 "/**
 * Assert text equality, ignoring differences in newlines.
 * Helpful for doing cross platform tests of blocks of text.
 *
 * @param string $expected The expected value.
 * @param string $result The actual value.
 * @param message The message to use for failure.
 * @return boolean
 */",
 "/**
 * Asserts that a string starts with a given prefix, ignoring differences in newlines.
 * Helpful for doing cross platform tests of blocks of text.
 *
 * @param string $prefix
 * @param string $string
 * @param string $message
 * @return boolean
 */",
 "/**
 * Asserts that a string starts not with a given prefix, ignoring differences in newlines.
 * Helpful for doing cross platform tests of blocks of text.
 *
 * @param string $prefix
 * @param string $string
 * @param string $message
 * @return boolean
 */",
 "/**
 * Asserts that a string ends with a given prefix, ignoring differences in newlines.
 * Helpful for doing cross platform tests of blocks of text.
 *
 * @param string $suffix
 * @param string $string
 * @param string $message
 * @return boolean
 */",
 "/**
 * Asserts that a string ends not with a given prefix, ignoring differences in newlines.
 * Helpful for doing cross platform tests of blocks of text.
 *
 * @param string $suffix
 * @param string $string
 * @param string $message
 * @return boolean
 */",
 "/**
 * Assert that a string contains another string, ignoring differences in newlines.
 * Helpful for doing cross platform tests of blocks of text.
 *
 * @param string $needle
 * @param string $haystack
 * @param string $message
 * @param boolean $ignoreCase
 * @return boolean
 */",
 "/**
 * Assert that a text doesn\'t contain another text, ignoring differences in newlines.
 * Helpful for doing cross platform tests of blocks of text.
 *
 * @param string $needle
 * @param string $haystack
 * @param string $message
 * @param boolean $ignoreCase
 * @return boolean
 */",
 "/**
 * Takes an array $expected and generates a regex from it to match the provided $string.
 * Samples for $expected:
 *
 * Checks for an input tag with a name attribute (contains any non-empty value) and an id
 * attribute that contains \'my-input\':
 * 	array(\'input\' => array(\'name\', \'id\' => \'my-input\'))
 *
 * Checks for two p elements with some text in them:
 * 	array(
 * 		array(\'p\' => true),
 * 		\'textA\',
 * 		\'/p\',
 * 		array(\'p\' => true),
 * 		\'textB\',
 * 		\'/p\'
 *	)
 *
 * You can also specify a pattern expression as part of the attribute values, or the tag
 * being defined, if you prepend the value with preg: and enclose it with slashes, like so:
 *	array(
 *  	array(\'input\' => array(\'name\', \'id\' => \'preg:/FieldName\d+/\')),
 *  	\'preg:/My\s+field/\'
 *	)
 *
 * Important: This function is very forgiving about whitespace and also accepts any
 * permutation of attribute order. It will also allow whitespace between specified tags.
 *
 * @param string $string An HTML/XHTML/XML string
 * @param array $expected An array, see above
 * @param string $message SimpleTest failure output string
 * @return boolean
 */",
 "/**
 * Generates all permutation of an array $items and returns them in a new array.
 *
 * @param array $items An array of items
 * @return array
 */",
 "/**
 * Compatibility wrapper function for assertEquals
 *
 *
 * @param mixed $result
 * @param mixed $expected
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper function for assertNotEquals
 *
 * @param mixed $result
 * @param mixed $expected
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper function for assertRegexp
 *
 * @param mixed $pattern a regular expression
 * @param string $string the text to be matched
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper function for assertEquals
 *
 * @param mixed $actual
 * @param mixed $expected
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper function for assertNotEquals
 *
 * @param mixed $actual
 * @param mixed $expected
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper function for assertNotRegExp
 *
 * @param mixed $pattern a regular expression
 * @param string $string the text to be matched
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper function for setExpectedException
 *
 * @param mixed $expected the name of the Exception or error
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper function for setExpectedException
 *
 * @param mixed $expected the name of the Exception
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper function for assertSame
 *
 * @param mixed $first
 * @param mixed $second
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility wrapper for assertIsA
 *
 * @param string $object
 * @param string $type
 * @param string $message
 * @return void
 */",
 "/**
 * Compatibility function to test if value is between an acceptable range
 *
 * @param mixed $result
 * @param mixed $expected
 * @param mixed $margin the rage of acceptation
 * @param string $message the text to display if the assertion is not correct
 * @return void
 */",
 "/**
 * Compatibility function for skipping.
 *
 * @param boolean $condition Condition to trigger skipping
 * @param string $message Message for skip
 * @return boolean
 */",
 "/**
 * CakeTestCase class
 *
 * @package       Cake.TestSuite
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Controller.Component
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Read method is used for reading configuration information from sources.
 * These sources can either be static resources like files, or dynamic ones like
 * a database, or other datasource.
 *
 * @param string $key
 * @return array An array of data to merge into the runtime configuration
 */",
 "/**
 * An interface for creating objects compatible with Configure::load()
 *
 * @package       Cake.Core
 */",
 "/**
 * testExists function
 * @retun void
 */",
 "/**
 * testFetchingNonUniqueFKJoinTableRecords()
 *
 * Tests if the results are properly returned in the case there are non-unique FK\'s
 * in the join table but another fields value is different. For example:
 * something_id | something_else_id | doomed = 1
 * something_id | something_else_id | doomed = 0
 * Should return both records and not just one.
 *
 * @return void
 */",
 "/**
 * testGroupBy method
 *
 * These tests will never pass with Postgres or Oracle as all fields in a select must be
 * part of an aggregate function or in the GROUP BY statement.
 *
 * @return void
 */",
 "/**
 * testOldQuery method
 *
 * @return void
 */",
 "/**
 * testPreparedQuery method
 *
 * @return void
 */",
 "/**
 * testParameterMismatch method
 *
 * @expectedException PDOException
 * @return void
 */",
 "/**
 * testVeryStrangeUseCase method
 *
 * @expectedException PDOException
 * @return void
 */",
 "/**
 * testRecursiveUnbind method
 *
 * @return void
 */",
 "/**
 * testSelfAssociationAfterFind method
 *
 * @return void
 */",
 "/**
 * testFindThreadedNoParent method
 *
 * @return void
 */",
 "/**
 * testFindThreaded method
 *
 * @return void
 */",
 "/**
 * testFindAllThreaded method
 *
 * @return void
 */",
 "/**
 * test find(\'neighbors\')
 *
 * @return void
 */",
 "/**
 * testFindCombinedRelations method
 *
 * @return void
 */",
 "/**
 * testSaveEmpty method
 *
 * @return void
 */",
 "/**
 * testFindAllWithConditionInChildQuery
 *
 * @todo external conditions like this are going to need to be revisited at some point
 * @return void
 */",
 "/**
 * testFindAllWithConditionsHavingMixedDataTypes method
 *
 * @return void
 */",
 "/**
 * testBindUnbind method
 *
 * @return void
 */",
 "/**
 * testBindMultipleTimes method
 *
 * @return void
 */",
 "/**
 * test that multiple reset = true calls to bindModel() result in the original associations.
 *
 * @return void
 */",
 "/**
 * testBindMultipleTimes method with different reset settings
 *
 * @return void
 */",
 "/**
 * test that bindModel behaves with Custom primary Key associations
 *
 * @return void
 */",
 "/**
 * test that calling unbindModel() with reset == true multiple times
 * leaves associations in the correct state.
 *
 * @return void
 */",
 "/**
 * testBindMultipleTimes method with different reset settings
 *
 * @return void
 */",
 "/**
 * testAssociationAfterFind method
 *
 * @return void
 */",
 "/**
 * testDeeperAssociationAfterFind method
 *
 * @return void
 */",
 "/**
 * Tests that callbacks can be properly disabled
 *
 * @return void
 */",
 "/**
 * testAssociationAfterFindCallbacksDisabled method
 *
 * @return void
 */",
 "/**
 * Tests that the database configuration assigned to the model can be changed using
 * (before|after)Find callbacks
 *
 * @return void
 */",
 "/**
 * testCallbackSourceChangeUnknownDatasource method
 *
 * @expectedException MissingDatasourceConfigException
 * @return void
 */",
 "/**
 * testMultipleBelongsToWithSameClass method
 *
 * @return void
 */",
 "/**
 * testHabtmRecursiveBelongsTo method
 *
 * @return void
 */",
 "/**
 * testNonNumericHabtmJoinKey method
 *
 * @return void
 */",
 "/**
 * testHabtmFinderQuery method
 *
 * @return void
 */",
 "/**
 * testHabtmLimitOptimization method
 *
 * @return void
 */",
 "/**
 * testHasManyLimitOptimization method
 *
 * @return void
 */",
 "/**
 * testFindAllRecursiveSelfJoin method
 *
 * @return void
 */",
 "/**
 * testFindAllRecursiveWithHabtm method
 *
 * @return void
 */",
 "/**
 * testReadFakeThread method
 *
 * @return void
 */",
 "/**
 * testFindFakeThread method
 *
 * @return void
 */",
 "/**
 * testFindAllFakeThread method
 *
 * @return void
 */",
 "/**
 * testConditionalNumerics method
 *
 * @return void
 */",
 "/**
 * test buildQuery()
 *
 * @return void
 */",
 "/**
 * test find(\'all\') method
 *
 * @return void
 */",
 "/**
 * test find(\'list\') method
 *
 * @return void
 */",
 "/**
 * testFindField method
 *
 * @return void
 */",
 "/**
 * testFindUnique method
 *
 * @return void
 */",
 "/**
 * test find(\'count\') method
 *
 * @return void
 */",
 "/**
 * Test that find(\'first\') does not use the id set to the object.
 *
 * @return void
 */",
 "/**
 * test find with COUNT(DISTINCT field)
 *
 * @return void
 */",
 "/**
 * Test find(count) with Db::expression
 *
 * @return void
 */",
 "/**
 * testFindMagic method
 *
 * @return void
 */",
 "/**
 * testRead method
 *
 * @return void
 */",
 "/**
 * testRecursiveRead method
 *
 * @return void
 */",
 "/**
 * testRecursiveFindAllWithLimit method
 *
 * @return void
 */",
 "/**
 * Testing availability of $this->findQueryType in Model callbacks
 *
 * @return void
 */",
 "/**
 * testVirtualFields()
 *
 * Test correct fetching of virtual fields
 * currently is not possible to do Relation.virtualField
 *
 * @return void
 */",
 "/**
 * testVirtualFieldsOrder()
 *
 * Test correct order on virtual fields
 *
 * @return void
 */",
 "/**
 * testVirtualFieldsMysql()
 *
 * Test correct fetching of virtual fields
 * currently is not possible to do Relation.virtualField
 *
 */",
 "/**
 * test that virtual fields work when they don\'t contain functions.
 *
 * @return void
 */",
 "/**
 * test that isVirtualField will accept both aliased and non aliased fieldnames
 *
 * @return void
 */",
 "/**
 * test that getting virtual fields works with and without model alias attached
 *
 * @return void
 */",
 "/**
 * test that checks for error when NOT condition passed in key and a 1 element array value
 *
 * @return void
 */",
 "/**
 * test custom find method
 *
 * @return void
 */",
 "/**
 * ModelReadTest
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * testAssertGoodTags
 *
 * @return void
 */",
 "/**
 * testNumericValuesInExpectationForAssertTags
 *
 * @return void
 */",
 "/**
 * testBadAssertTags
 *
 * @return void
 */",
 "/**
 * testLoadFixtures
 *
 * @return void
 */",
 "/**
 * testLoadFixturesOnDemand
 *
 * @return void
 */",
 "/**
 * testLoadFixturesOnDemand
 *
 * @return void
 */",
 "/**
 * testThrowException
 *
 * @return void
 */",
 "/**
 * testSkipIf
 *
 * @return void
 */",
 "/**
 * Test that CakeTestCase::setUp() backs up values.
 *
 * @return void
 */",
 "/**
 * test assertTextNotEquals()
 *
 * @return void
 */",
 "/**
 * test assertTextEquals()
 *
 * @return void
 */",
 "/**
 * test assertTextStartsWith()
 *
 * @return void
 */",
 "/**
 * test assertTextStartsNotWith()
 *
 * @return void
 */",
 "/**
 * test assertTextEndsWith()
 *
 * @return void
 */",
 "/**
 * test assertTextEndsNotWith()
 *
 * @return void
 */",
 "/**
 * test assertTextContains()
 *
 * @return void
 */",
 "/**
 * test assertTextNotContains()
 *
 * @return void
 */",
 "/**
 * CakeTestCaseTest
 *
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * Suite define the tests for this suite
 *
 * @return void
 */",
 "/**
 * AllBehaviorsTest class
 *
 * This test group will run all test in the Case/Model/Behavior directory
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Article class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * User class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testBuild method
 *
 * @return void
 */",
 "/**
 * data provider function for testBuildInvalidData
 *
 * @return array
 */",
 "/**
 * testBuildInvalidData
 *
 * @dataProvider invalidDataProvider
 * @expectedException XmlException
 * return void
 */",
 "/**
 * test build with a single empty tag
 *
 * return void
 */",
 "/**
 * testFromArray method
 *
 * @return void
 */",
 "/**
 * Test non-sequential keys in list types.
 *
 * @return void
 */",
 "/**
 * data provider for fromArray() failures
 *
 * @return array
 */",
 "/**
 * testFromArrayFail method
 *
 * @dataProvider invalidArrayDataProvider
 */",
 "/**
 * testToArray method
 *
 * @return void
 */",
 "/**
 * testRss
 *
 * @return void
 */",
 "/**
 * testXmlRpc
 *
 * @return void
 */",
 "/**
 * testSoap
 *
 * @return void
 */",
 "/**
 * testNamespace
 *
 * @return void
 */",
 "/**
 * test that CDATA blocks don\'t get screwed up by SimpleXml
 *
 * @return void
 */",
 "/**
 * data provider for toArray() failures
 *
 * @return array
 */",
 "/**
 * testToArrayFail method
 *
 * @dataProvider invalidToArrayDataProvider
 * @expectedException XmlException
 */",
 "/**
 * testWithModel method
 *
 * @return void
 */",
 "/**
 * Test ampersand in text elements.
 *
 * @return void
 */",
 "/**
 * XmlTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * ClassRegisterModel class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * RegisterArticle class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * RegisterArticleFeatured class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * RegisterArticleTag class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * RegistryPluginAppModel class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * TestRegistryPluginModel class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * RegisterCategory class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * RegisterPrefixedDs class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Abstract class for testing ClassRegistry.
 */",
 "/**
 * Interface for testing ClassRegistry
 */",
 "/**
 * testAddModel method
 *
 * @return void
 */",
 "/**
 * testClassRegistryFlush method
 *
 * @return void
 */",
 "/**
 * testAddMultipleModels method
 *
 * @return void
 */",
 "/**
 * testPluginAppModel method
 *
 * @return void
 */",
 "/**
 * Tests prefixed datasource names for test purposes
 *
 */",
 "/**
 * Tests that passing the string parameter to init() will return false if the model does not exists
 *
 */",
 "/**
 * Test that you cannot init() an abstract class. An exception will be raised.
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Test that you cannot init() an abstract class. A exception will be raised.
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * ClassRegistryTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Connects to the database using options in the given configuration array.
 *
 * @return boolean True if the database could be connected, else false
 * @throws MissingConnectionException
 */",
 "/**
 * Check that PDO SQL Server is installed/loaded
 *
 * @return boolean
 */",
 "/**
 * Returns an array of sources (tables) in the database.
 *
 * @param mixed $data
 * @return array Array of table names in the database
 */",
 "/**
 * Returns an array of the fields in given table name.
 *
 * @param Model|string $model Model object to describe, or a string table name.
 * @return array Fields in table. Keys are name and type
 * @throws CakeException
 */",
 "/**
 * Generates the fields list of an SQL query.
 *
 * @param Model $model
 * @param string $alias Alias table name
 * @param array $fields
 * @param boolean $quote
 * @return array
 */",
 "/**
 * Generates and executes an SQL INSERT statement for given model, fields, and values.
 * Removes Identity (primary key) column from update data before returning to parent, if
 * value is empty.
 *
 * @param Model $model
 * @param array $fields
 * @param array $values
 * @return array
 */",
 "/**
 * Generates and executes an SQL UPDATE statement for given model, fields, and values.
 * Removes Identity (primary key) column from update data before returning to parent.
 *
 * @param Model $model
 * @param array $fields
 * @param array $values
 * @param mixed $conditions
 * @return array
 */",
 "/**
 * Returns a limit statement in the correct format for the particular database.
 *
 * @param integer $limit Limit of results returned
 * @param integer $offset Offset from which to start results
 * @return string SQL limit/offset statement
 */",
 "/**
 * Converts database-layer column types to basic types
 *
 * @param mixed $real Either the string value of the fields type.
 *    or the Result object from Sqlserver::describe()
 * @return string Abstract column type (i.e. \"string\")
 */",
 "/**
 * Handle SQLServer specific length properties.
 * SQLServer handles text types as nvarchar/varchar with a length of -1.
 *
 * @param mixed $length Either the length as a string, or a Column descriptor object.
 * @return mixed null|integer with length of column.
 */",
 "/**
 * Builds a map of the columns contained in a result
 *
 * @param PDOStatement $results
 * @return void
 */",
 "/**
 * Builds final SQL statement
 *
 * @param string $type Query type
 * @param array $data Query data
 * @return string
 */",
 "/**
 * Returns a quoted and escaped string of $data for use in an SQL statement.
 *
 * @param string $data String to be prepared for use in an SQL statement
 * @param string $column The column into which this data will be inserted
 * @return string Quoted and escaped data
 */",
 "/**
 * Returns an array of all result rows for a given SQL query.
 * Returns false if no rows matched.
 *
 * @param Model $model
 * @param array $queryData
 * @param integer $recursive
 * @return array Array of resultset rows, or false if no rows matched
 */",
 "/**
 * Fetches the next row from the current result set.
 * Eats the magic ROW_COUNTER variable.
 *
 * @return mixed
 */",
 "/**
 * Inserts multiple values into a table
 *
 * @param string $table
 * @param string $fields
 * @param array $values
 * @return void
 */",
 "/**
 * Generate a database-native column schema string
 *
 * @param array $column An array structured like the 
 *   following: array(\'name\'=>\'value\', \'type\'=>\'value\'[, options]),
 *   where options can be \'default\', \'length\', or \'key\'.
 * @return string
 */",
 "/**
 * Format indexes for create table
 *
 * @param array $indexes
 * @param string $table
 * @return string
 */",
 "/**
 * Makes sure it will return the primary key
 *
 * @param Model|string $model Model instance of table name
 * @return string
 */",
 "/**
 * Returns number of affected rows in previous database operation. If no previous operation exists,
 * this returns false.
 *
 * @param mixed $source
 * @return integer Number of affected rows
 */",
 "/**
 * Executes given SQL statement.
 *
 * @param string $sql SQL statement
 * @param array $params list of params to be bound to query (supported only in select)
 * @param array $prepareOptions Options to be used in the prepare statement
 * @return mixed PDOStatement if query executes with no problem, true as the result of a successful, false on error
 * query returning no rows, such as a CREATE statement, false otherwise
 * @throws PDOException
 */",
 "/**
 * Generate a \"drop table\" statement for the given Schema object
 *
 * @param CakeSchema $schema An instance of a subclass of CakeSchema
 * @param string $table Optional.  If specified only the table name given will be generated.
 *   Otherwise, all tables defined in the schema are generated.
 * @return string
 */",
 "/**
 * Gets the schema name
 *
 * @return string The schema name
 */",
 "/**
 * Dbo driver for SQLServer
 *
 * A Dbo driver for SQLServer 2008 and higher.  Requires the `sqlsrv`
 * and `pdo_sqlsrv` extensions to be enabled.
 *
 * @package       Cake.Model.Datasource.Database
 */",
 "/**
 * Shell startup, prints info message about dry run.
 *
 * @return void
 */",
 "/**
 * Run all upgrade steps one at a time
 *
 * @return void
 */",
 "/**
 * Update tests.
 *
 * - Update tests class names to FooTest rather than FooTestCase.
 *
 * @return void
 */",
 "/**
 * Move files and folders to their new homes
 *
 * Moves folders containing files which cannot necessarily be auto-detected (libs and templates)
 * and then looks for all php files except vendors, and moves them to where Cake 2.0 expects
 * to find them.
 *
 * @return void
 */",
 "/**
 * Update helpers.
 *
 * - Converts helpers usage to new format.
 *
 * @return void
 */",
 "/**
 * Update i18n.
 *
 * - Removes extra true param.
 * - Add the echo to __*() calls that didn\'t need them before.
 *
 * @return void
 */",
 "/**
 * Upgrade the removed basics functions.
 *
 * - a(*) -> array(*)
 * - e(*) -> echo *
 * - ife(*, *, *) -> !empty(*) ? * : *
 * - a(*) -> array(*)
 * - r(*, *, *) -> str_replace(*, *, *)
 * - up(*) -> strtoupper(*)
 * - low(*, *, *) -> strtolower(*)
 * - getMicrotime() -> microtime(true)
 *
 * @return void
 */",
 "/**
 * Update the properties moved to CakeRequest.
 *
 * @return void
 */",
 "/**
 * Update Configure::read() calls with no params.
 *
 * @return void
 */",
 "/**
 * constants
 *
 * @return void
 */",
 "/**
 * Update components.
 *
 * - Make components that extend Object to extend Component.
 *
 * @return void
 */",
 "/**
 * Replace cakeError with built-in exceptions.
 * NOTE: this ignores calls where you\'ve passed your own secondary parameters to cakeError().
 * @return void
 */",
 "/**
 * Move application views files to where they now should be
 *
 * Find all view files in the folder and determine where cake expects the file to be
 *
 * @return void
 */",
 "/**
 * Move the AppController, and AppModel classes.
 *
 * @return void
 */",
 "/**
 * Move application php files to where they now should be
 *
 * Find all php files in the folder (honoring recursive) and determine where cake expects the file to be
 * If the file is not exactly where cake expects it - move it.
 *
 * @param string $path
 * @param array $options array(recursive, checkFolder)
 * @return void
 */",
 "/**
 * Updates files based on regular expressions.
 *
 * @param array $patterns Array of search and replacement patterns.
 * @return void
 */",
 "/**
 * Searches the paths and finds files based on extension.
 *
 * @param string $extensions
 * @return void
 */",
 "/**
 * Update a single file.
 *
 * @param string $file The file to update
 * @param array $patterns The replacement patterns to run.
 * @return void
 */",
 "/**
 * get the option parser
 *
 * @return ConsoleOptionParser
 */",
 "/**
 * A shell class to help developers upgrade applications to CakePHP 2.0
 *
 * @package       Cake.Console.Command
 */",
 "/**
 * RequestActionPost class
 *
 * @package       Cake.Test.Case.Core
 */",
 "/**
 * test_request_action method
 *
 * @access public
 * @return void
 */",
 "/**
 * another_ra_test method
 *
 * @param mixed $id
 * @param mixed $other
 * @access public
 * @return void
 */",
 "/**
 * normal_request_action method
 *
 * @return void
 */",
 "/**
 * returns $this->here
 *
 * @return void
 */",
 "/**
 * paginate_request_action method
 *
 * @return void
 */",
 "/**
 * post pass, testing post passing
 *
 * @return array
 */",
 "/**
 * test param passing and parsing.
 *
 * @return array
 */",
 "/**
 * RequestActionController class
 *
 * @package       Cake.Test.Case.Core
 */",
 "/**
 * emptyMethod method
 *
 * @return void
 */",
 "/**
 * oneParamMethod method
 *
 * @param mixed $param
 * @return void
 */",
 "/**
 * twoParamMethod method
 *
 * @param mixed $param
 * @param mixed $paramTwo
 * @return void
 */",
 "/**
 * threeParamMethod method
 *
 * @param mixed $param
 * @param mixed $paramTwo
 * @param mixed $paramThree
 * @return void
 */",
 "/**
 * fourParamMethod method
 *
 * @param mixed $param
 * @param mixed $paramTwo
 * @param mixed $paramThree
 * @param mixed $paramFour
 * @return void
 */",
 "/**
 * fiveParamMethod method
 *
 * @param mixed $param
 * @param mixed $paramTwo
 * @param mixed $paramThree
 * @param mixed $paramFour
 * @param mixed $paramFive
 * @return void
 */",
 "/**
 * crazyMethod method
 *
 * @param mixed $param
 * @param mixed $paramTwo
 * @param mixed $paramThree
 * @param mixed $paramFour
 * @param mixed $paramFive
 * @param mixed $paramSix
 * @param mixed $paramSeven
 * @return void
 */",
 "/**
 * methodWithOptionalParam method
 *
 * @param mixed $param
 * @return void
 */",
 "/**
 * undocumented function
 *
 * @return void
 */",
 "/**
 * TestObject class
 *
 * @package       Cake.Test.Case.Core
 */",
 "/**
 * ObjectTestModel class
 *
 * @package       Cake.Test.Case.Core
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testLog method
 *
 * @return void
 */",
 "/**
 * testSet method
 *
 * @return void
 */",
 "/**
 * testToString method
 *
 * @return void
 */",
 "/**
 * testMethodDispatching method
 *
 * @return void
 */",
 "/**
 * testRequestAction method
 *
 * @return void
 */",
 "/**
 * test requestAction() and plugins.
 *
 * @return void
 */",
 "/**
 * test requestAction() with arrays.
 *
 * @return void
 */",
 "/**
 * Test that requestAction() does not forward the 0 => return value.
 *
 * @return void
 */",
 "/**
 * Test that requestAction() is populating $this->params properly
 *
 * @return void
 */",
 "/**
 * test that requestAction does not fish data out of the POST
 * superglobal.
 *
 * @return void
 */",
 "/**
 * Test requestAction with post data.
 *
 * @return void
 */",
 "/**
 * Object Test class
 *
 * @package       Cake.Test.Case.Core
 */",
 "/**
 * Default Constructor
 *
 * ### Settings:
 *
 * - `engine` Class name to use to replace CakeNumber functionality
 *            The class needs to be placed in the `Utility` directory.
 *
 * @param View $View The View this helper is being attached to.
 * @param array $settings Configuration settings for the helper
 * @throws CakeException When the engine class could not be found.
 */",
 "/**
 * Call methods from CakeNumber utility class
 */",
 "/**
 * @see: CakeNumber::precision()
 *
 * @param float $number	A floating point number.
 * @param integer $precision The precision of the returned number.
 * @return float Formatted float.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::precision
 */",
 "/**
 * @see: CakeNumber::toReadableSize()
 *
 * @param integer $size Size in bytes
 * @return string Human readable size
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::toReadableSize
 */",
 "/**
 * @see: CakeNumber::toPercentage()
 *
 * @param float $number A floating point number
 * @param integer $precision The precision of the returned number
 * @return string Percentage string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::toPercentage
 */",
 "/**
 * @see: CakeNumber::format()
 *
 * @param float $number A floating point number
 * @param integer $options if int then places, if string then before, if (,.-) then use it
 *   or array with places and before keys
 * @return string formatted number
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::format
 */",
 "/**
 * @see: CakeNumber::currency()
 *
 * @param float $number
 * @param string $currency Shortcut to default options. Valid values are \'USD\', \'EUR\', \'GBP\', otherwise
 *   set at least \'before\' and \'after\' options.
 * @param array $options
 * @return string Number formatted as a currency.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::currency
 */",
 "/**
 * @see: CakeNumber::addFormat()
 *
 * @param string $formatName The format name to be used in the future.
 * @param array $options The array of options for this format.
 * @return void
 * @see NumberHelper::currency()
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html#NumberHelper::addFormat
 */",
 "/**
 * Number helper library.
 *
 * Methods to make numbers more readable.
 *
 * @package       Cake.View.Helper
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/number.html
 * @see CakeNumber
 */",
 "/**
 * Test App Comment Model
 *
 *
 *
 * PHP 5
 *
 * CakePHP : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc.
 * @link          http://cakephp.org CakePHP Project
 * @package       Cake.Test.test_app.Model
 * @since         CakePHP v 1.2.0.7726
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Test case AppController
 *
 * @package       Cake.Test.Case.Controller
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * MergeVar Component
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * Additional controller for testing
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * MergeVarPlugin App Controller
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * MergePostsController
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * test that component settings are not duplicated when merging component settings
 *
 * @return void
 */",
 "/**
 * test component merges with redeclared components
 *
 * @return void
 */",
 "/**
 * test merging of helpers array, ensure no duplication occurs
 *
 * @return void
 */",
 "/**
 * Test that helpers declared in appcontroller come before those in the subclass
 * orderwise
 *
 * @return void
 */",
 "/**
 * test merging of vars with plugin
 *
 * @return void
 */",
 "/**
 * Ensure that _mergeControllerVars is not being greedy and merging with
 * AppController when you make an instance of Controller
 *
 * @return void
 */",
 "/**
 * Test Case for Controller Merging of Vars.
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * testUuidGeneration method
 *
 * @return void
 */",
 "/**
 * testMultipleUuidGeneration method
 *
 * @return void
 */",
 "/**
 * testInsert method
 *
 * @return void
 */",
 "/**
 * test Clean Insert
 *
 * @return void
 */",
 "/**
 * Tests that non-insertable variables (i.e. arrays) are skipped when used as values in
 * String::insert().
 *
 * @return void
 */",
 "/**
 * testTokenize method
 *
 * @return void
 */",
 "/**
 * test wrap method.
 *
 * @return void
 */",
 "/**
 * test wrap() indenting
 *
 * @return void
 */",
 "/**
 * testTruncate method
 *
 * @return void
 */",
 "/**
 * testHighlight method
 *
 * @return void
 */",
 "/**
 * testHighlightHtml method
 *
 * @return void
 */",
 "/**
 * testHighlightMulti method
 *
 * @return void
 */",
 "/**
 * testStripLinks method
 *
 * @return void
 */",
 "/**
 * testHighlightCaseInsensitivity method
 *
 * @return void
 */",
 "/**
 * testExcerpt method
 *
 * @return void
 */",
 "/**
 * testExcerptCaseInsensitivity method
 *
 * @return void
 */",
 "/**
 * testListGeneration method
 *
 * @return void
 */",
 "/**
 * StringTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Returns the $field without modifications
 */",
 "/**
 * Returns true to fake a database connection
 */",
 "/**
 * DboMock class
 * A Dbo Source driver to mock a connection and a identity name() method
 */",
 "/**
 * testAssociationLazyLoading
 *
 * @group lazyloading
 * @return void
 */",
 "/**
 * testAssociationLazyLoadWithHABTM
 *
 * @group lazyloading
 * @return void
 */",
 "/**
 * testAssociationLazyLoadWithBindModel
 *
 * @group lazyloading
 * @return void
 */",
 "/**
 * Tests that creating a model with no existent database table associated will throw an exception
 *
 * @expectedException MissingTableException
 * @return void
 */",
 "/**
 * testPkInHAbtmLinkModelArticleB
 *
 * @return void
 */",
 "/**
 * Tests that $cacheSources can only be disabled in the db using model settings, not enabled
 *
 * @return void
 */",
 "/**
 * testPkInHabtmLinkModel method
 *
 * @return void
 */",
 "/**
 * testDynamicBehaviorAttachment method
 *
 * @return void
 */",
 "/**
 * testFindWithJoinsOption method
 *
 * @access public
 * @return void
 */",
 "/**
 * Tests cross database joins.  Requires $test and $test2 to both be set in DATABASE_CONFIG
 * NOTE: When testing on MySQL, you must set \'persistent\' => false on *both* database connections,
 * or one connection will step on the other.
 */",
 "/**
 * test HABM operations without clobbering existing records #275
 *
 * @return void
 */",
 "/**
 * testHABTMKeepExistingAlternateDataFormat
 *
 * @return void
 */",
 "/**
 * test HABM operations without clobbering existing records #275
 *
 * @return void
 */",
 "/**
 * testDisplayField method
 *
 * @return void
 */",
 "/**
 * testSchema method
 *
 * @return void
 */",
 "/**
 * data provider for time tests.
 *
 * @return array
 */",
 "/**
 * test deconstruct with time fields.
 *
 * @dataProvider timeProvider
 * @return void
 */",
 "/**
 * testDeconstructFields with datetime, timestamp, and date fields
 *
 * @return void
 */",
 "/**
 * testTablePrefixSwitching method
 *
 * @return void
 */",
 "/**
 * Tests validation parameter order in custom validation methods
 *
 * @return void
 */",
 "/**
 * testLoadModelSecondIteration method
 *
 * @return void
 */",
 "/**
 * ensure that exists() does not persist between method calls reset on create
 *
 * @return void
 */",
 "/**
 * testUseTableFalseExistsCheck method
 *
 * @return void
 */",
 "/**
 * testPluginAssociations method
 *
 * @return void
 */",
 "/**
 * Tests getAssociated method
 *
 * @return void
 */",
 "/**
 * testAutoConstructAssociations method
 *
 * @return void
 */",
 "/**
 * test creating associations with plugins. Ensure a double alias isn\'t created
 *
 * @return void
 */",
 "/**
 * test Model::__construct
 *
 * ensure that $actsAS and $findMethods are merged.
 *
 * @return void
 */",
 "/**
 * test Model::__construct
 *
 * ensure that $actsAS and $findMethods are merged.
 *
 * @return void
 */",
 "/**
 * testColumnTypeFetching method
 *
 * @return void
 */",
 "/**
 * testHabtmUniqueKey method
 *
 * @return void
 */",
 "/**
 * testIdentity method
 *
 * @return void
 */",
 "/**
 * testWithAssociation method
 *
 * @return void
 */",
 "/**
 * testFindSelfAssociations method
 *
 * @return void
 */",
 "/**
 * testDynamicAssociations method
 *
 * @return void
 */",
 "/**
 * testCreation method
 *
 * @return void
 */",
 "/**
 * testEscapeField to prove it escapes the field well even when it has part of the alias on it
 *
 * @return void
 */",
 "/**
 * testGetID
 *
 * @return void
 */",
 "/**
 * test that model->hasMethod checks self and behaviors.
 *
 * @return void
 */",
 "/**
 * testMultischemaFixture
 *
 * @return void
 */",
 "/**
 * testMultischemaFixtureWithThreeDatabases, three databases
 *
 * @return void
 */",
 "/**
 * Tests that calling schema() on a model that is not supposed to use a table
 * does not trigger any calls on any datasource
 *
 * @return void
 **/",
 "/**
 * ModelIntegrationTest
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Command-line code generation utility to automate programmer chores.
 *
 * PHP 5
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Console
 * @since         CakePHP(tm) v 2.0
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Test App Comment Model
 *
 * PHP 5
 *
 * CakePHP :  Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc.
 * @link          http://cakefoundation.org/projects/info/cakephp CakePHP Project
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Model
 * @since         CakePHP v 1.2.0.7726
 * @version       $Revision$
 * @modifiedby    $LastChangedBy$
 * @lastmodified  $Date$
 * @license       http://www.opensource.org/licenses/mit-license.php The MIT License
 */",
 "/**
 * Instantiate the fixture.
 *
 * @throws CakeException on invalid datasource usage.
 */",
 "/**
 * Initialize the fixture.
 *
 * @return void
 * @throws MissingModelException Whe importing from a model that does not exist.
 */",
 "/**
 * Run before all tests execute, should return SQL statement to create table for this fixture could be executed successfully.
 *
 * @param object	$db	An instance of the database object used to create the fixture table
 * @return boolean True on success, false on failure
 */",
 "/**
 * Run after all tests executed, should return SQL statement to drop table for this fixture.
 *
 * @param object	$db	An instance of the database object used to create the fixture table
 * @return boolean True on success, false on failure
 */",
 "/**
 * Run before each tests is executed, should return a set of SQL statements to insert records for the table
 * of this fixture could be executed successfully.
 *
 * @param object $db An instance of the database into which the records will be inserted
 * @return boolean on success or if there are no records to insert, or false on failure
 */",
 "/**
 * Truncates the current fixture. Can be overwritten by classes extending CakeFixture to trigger other events before / after
 * truncate.
 *
 * @param object $db A reference to a db instance
 * @return boolean
 */",
 "/**
 * CakeTestFixture is responsible for building and destroying tables to be used 
 * during testing.
 *
 * @package       Cake.TestSuite.Fixture
 */",
 "/**
 * Constructor
 *
 * @param string $message
 */",
 "/**
 * Body content
 *
 * @return string
 */",
 "/**
 * Get header in case insensitive
 *
 * @param string $name Header name
 * @param array $headers
 * @return mixed String if header exists or null
 */",
 "/**
 * If return is 200 (OK)
 *
 * @return boolean
 */",
 "/**
 * If return is a valid 3xx (Redirection)
 *
 * @return boolean
 */",
 "/**
 * Parses the given message and breaks it down in parts.
 *
 * @param string $message Message to parse
 * @return void
 * @throws SocketException
 */",
 "/**
 * Generic function to decode a $body with a given $encoding. Returns either an array with the keys
 * \'body\' and \'header\' or false on failure.
 *
 * @param string $body A string containing the body to decode.
 * @param string|boolean $encoding Can be false in case no encoding is being used, or a string representing the encoding.
 * @return mixed Array of response headers and body or false.
 */",
 "/**
 * Decodes a chunked message $body and returns either an array with the keys \'body\' and \'header\' or false as
 * a result.
 *
 * @param string $body A string containing the chunked body to decode.
 * @return mixed Array of response headers and body or false.
 * @throws SocketException
 */",
 "/**
 * Parses an array based header.
 *
 * @param array $header Header as an indexed array (field => value)
 * @return array Parsed header
 */",
 "/**
 * Parses cookies in response headers.
 *
 * @param array $header Header array containing one ore more \'Set-Cookie\' headers.
 * @return mixed Either false on no cookies, or an array of cookies received.
 * @todo Make this 100% RFC 2965 confirm
 */",
 "/**
 * Unescapes a given $token according to RFC 2616 (HTTP 1.1 specs)
 *
 * @param string $token Token to unescape
 * @param array $chars
 * @return string Unescaped token
 * @todo Test $chars parameter
 */",
 "/**
*GetsescapecharsaccordingtoRFC2616(HTTP1.1specs).
*
*@paramboolean$hextruetogetthemasHEXvalues,falseotherwise
*@paramarray$chars
*@returnarrayEscapechars
*@todoTest$charsparameter
*/",
 "/**
*ArrayAccess-OffsetExists
*
*@paramstring$offset
*@returnboolean
*/",
 "/**
*ArrayAccess-OffsetGet
*
*@paramstring$offset
*@returnmixed
*/",
 "/**
*ArrayAccess-OffsetSet
*
*@paramstring$offset
*@parammixed$value
*@returnvoid
*/",
 "/**
*ArrayAccess-OffsetUnset
*
*@paramstring$offset
*@returnvoid
*/",
 "/**
*Instanceasstring
*
*@returnstring
*/",
 "/**
*HTTPResponsefromHttpSocket.
*
*@packageCake.Network.Http
*/",
 "/**
 * Override initialize
 *
 * @return void
 */",
 "/**
 * Execution method always used for tasks
 *
 * @return void
 */",
 "/**
 * Bake All the controllers at once.  Will only bake controllers for models that exist.
 *
 * @return void
 */",
 "/**
 * Interactive
 *
 * @return void
 */",
 "/**
 * Confirm a to be baked controller with the user
 *
 * @param string $controllerName
 * @param string $useDynamicScaffold
 * @param array $helpers
 * @param array $components
 * @return void
 */",
 "/**
 * Interact with the user and ask about which methods (admin or regular they want to bake)
 *
 * @return array Array containing (bakeRegular, bakeAdmin) answers
 */",
 "/**
 * Bake scaffold actions
 *
 * @param string $controllerName Controller name
 * @param string $admin Admin route to use
 * @param boolean $wannaUseSession Set to true to use sessions, false otherwise
 * @return string Baked actions
 */",
 "/**
 * Assembles and writes a Controller file
 *
 * @param string $controllerName Controller name already pluralized and correctly cased.
 * @param string $actions Actions to add, or set the whole controller to use $scaffold (set $actions to \'scaffold\')
 * @param array $helpers Helpers to use in controller
 * @param array $components Components to use in controller
 * @return string Baked controller
 */",
 "/**
 * Assembles and writes a unit test file
 *
 * @param string $className Controller class name
 * @return string Baked test
 */",
 "/**
 * Interact with the user and get a list of additional helpers
 *
 * @return array Helpers that the user wants to use.
 */",
 "/**
 * Interact with the user and get a list of additional components
 *
 * @return array Components the user wants to use.
 */",
 "/**
 * Common code for property choice handling.
 *
 * @param string $prompt A yes/no question to precede the list
 * @param string $example A question for a comma separated list, with examples.
 * @return array Array of values for property.
 */",
 "/**
 * Outputs and gets the list of possible controllers from database
 *
 * @param string $useDbConfig Database configuration name
 * @return array Set of controllers
 */",
 "/**
 * Forces the user to specify the controller he wants to bake, and returns the selected controller name.
 *
 * @param string $useDbConfig Connection name to get a controller name for.
 * @return string Controller name
 */",
 "/**
 * get the option parser.
 *
 * @return void
 */",
 "/**
 * Task class for creating and updating controller files.
 *
 * @package       Cake.Console.Command.Task
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Testing task in a plugin
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Console.Command.Task
 * @since         CakePHP(tm) v 2.0
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Behavior to allow for dynamic and atomic manipulation of a Model\'s associations used for a find call. Most useful for limiting
 * the amount of associations and data returned.
 *
 * @package       Cake.Test.test_app.Model.Behavior
 */",
 "/**
 * __construct method
 *
 * @return void
 */",
 "/**
 * Sets instance config.  When $config is null, returns config array
 *
 * Config
 *
 * - `types` string or array, levels the engine is interested in
 * - `scopes` string or array, scopes the engine is interested in
 *
 * @param array $config engine configuration
 * @return array
 */",
 "/**
 * Base log engine class.
 *
 * @package       Cake.Log.Engine
 */",
 "/**
 * Displays a view
 *
 * @param mixed What page to display
 * @return void
 */",
 "/**
 * Static content controller
 *
 * Override this controller by placing a copy in controllers directory of an application
 *
 * @package       Cake.Controller
 * @link http://book.cakephp.org/2.0/en/controllers/pages-controller.html
 */",
 "/**
 * The role map defines how to resolve the user record from your application
 * to the roles you defined in the roles configuration. 
 */",
 "/**
 * define aliases to map your model information to
 * the roles defined in your role configuration.
 */",
 "/**
 * role configuration
 */",
 "/**
 * rule configuration
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testBuild method
 *
 * @return void
 */",
 "/**
 * tests that it is possible to set up paths using the cake 1.3 notation for them (models, behaviors, controllers...)
 *
 * @return void
 */",
 "/**
 * test package build() with App::REGISTER.
 *
 * @return void
 */",
 "/**
 * test path() with a plugin.
 *
 * @return void
 */",
 "/**
 * testBuildWithReset method
 *
 * @return void
 */",
 "/**
 * testCore method
 *
 * @return void
 */",
 "/**
 * testListObjects method
 *
 * @return void
 */",
 "/**
 * Make sure that .svn and friends are excluded from App::objects(\'plugin\')
 */",
 "/**
 * Tests listing objects within a plugin
 *
 * @return void
 */",
 "/**
 * test that pluginPath can find paths for plugins.
 *
 * @return void
 */",
 "/**
 * test that themePath can find paths for themes.
 *
 * @return void
 */",
 "/**
 * testClassLoading method
 *
 * @return void
 */",
 "/**
 * test import() with plugins
 *
 * @return void
 */",
 "/**
 * test that building helper paths actually works.
 *
 * @return void
 * @link http://cakephp.lighthouseapp.com/projects/42648/tickets/410
 */",
 "/**
 * testFileLoading method
 *
 * @return void
 */",
 "/**
 * testFileLoadingWithArray method
 *
 * @return void
 */",
 "/**
 * testFileLoadingReturnValue method
 *
 * @return void
 */",
 "/**
 * testLoadingWithSearch method
 *
 * @return void
 */",
 "/**
 * testLoadingWithSearchArray method
 *
 * @return void
 */",
 "/**
 * testMultipleLoading method
 *
 * @return void
 */",
 "/**
 * Tests that the automatic class loader will also find in \"libs\" folder for both
 * app and plugins if it does not find the class in other configured paths
 *
 */",
 "/**
 * Tests that  App::location() returns the defined path for a class
 *
 * @return void
 */",
 "/**
 * Test that paths() works.
 *
 * @return void
 */",
 "/**
 * Proves that it is possible to load plugin libraries in top
 * level Lib dir for plugins
 *
 * @return void
 */",
 "/**
 * AppTest class
 *
 * @package       Cake.Test.Case.Core
 */",
 "/**
 * Constructor.
 *
 */",
 "/**
 * Returns a reference to the Debugger singleton object instance.
 *
 * @param string $class
 * @return object
 */",
 "/**
 * Recursively formats and outputs the contents of the supplied variable.
 *
 *
 * @param mixed $var the variable to dump
 * @return void
 * @see Debugger::exportVar()
 * @link http://book.cakephp.org/2.0/en/development/debugging.html#Debugger::dump
 */",
 "/**
 * Creates an entry in the log file.  The log entry will contain a stack trace from where it was called.
 * as well as export the variable using exportVar. By default the log is written to the debug log.
 *
 * @param mixed $var Variable or content to log
 * @param integer $level type of log to use. Defaults to LOG_DEBUG
 * @return void
 * @link http://book.cakephp.org/2.0/en/development/debugging.html#Debugger::log
 */",
 "/**
 * Overrides PHP\'s default error handling.
 *
 * @param integer $code Code of error
 * @param string $description Error description
 * @param string $file File on which error occurred
 * @param integer $line Line that triggered the error
 * @param array $context Context
 * @return boolean true if error was handled
 * @deprecated This function is superseded by Debugger::outputError()
 */",
 "/**
 * Outputs a stack trace based on the supplied options.
 *
 * ### Options
 *
 * - `depth` - The number of stack frames to return. Defaults to 999
 * - `format` - The format you want the return.  Defaults to the currently selected format.  If
 *    format is \'array\' or \'points\' the return will be an array.
 * - `args` - Should arguments for functions be shown?  If true, the arguments for each method call
 *   will be displayed.
 * - `start` - The stack frame to start generating a trace from.  Defaults to 0
 *
 * @param array $options Format for outputting stack trace
 * @return mixed Formatted stack trace
 * @link http://book.cakephp.org/2.0/en/development/debugging.html#Debugger::trace
 */",
 "/**
 * Shortens file paths by replacing the application base path with \'APP\', and the CakePHP core
 * path with \'CORE\'.
 *
 * @param string $path Path to shorten
 * @return string Normalized path
 */",
 "/**
 * Grabs an excerpt from a file and highlights a given line of code.
 *
 * Usage:
 *
 * `Debugger::excerpt(\'/path/to/file\', 100, 4);`
 *
 * The above would return an array of 8 items. The 4th item would be the provided line,
 * and would be wrapped in `<span class=\"code-highlight\"></span>`.  All of the lines
 * are processed with highlight_string() as well, so they have basic PHP syntax highlighting
 * applied.
 *
 * @param string $file Absolute path to a PHP file
 * @param integer $line Line number to highlight
 * @param integer $context Number of lines of context to extract above and below $line
 * @return array Set of lines highlighted
 * @see http://php.net/highlight_string
 * @link http://book.cakephp.org/2.0/en/development/debugging.html#Debugger::excerpt
 */",
 "/**
 * Wraps the highlight_string funciton in case the server API does not
 * implement the function as it is the case of the HipHop interpreter
 *
 * @param string $str the string to convert
 * @return string
 */",
 "/**
 * Converts a variable to a string for debug output.
 *
 * *Note:* The following keys will have their contents
 * replaced with `*****`:
 *
 *  - password
 *  - login
 *  - host
 *  - database
 *  - port
 *  - prefix
 *  - schema
 *
 * This is done to protect database credentials, which could be accidentally
 * shown in an error message if CakePHP is deployed in development mode.
 *
 * @param string $var Variable to convert
 * @param integer $depth The depth to output to. Defaults to 3.
 * @return string Variable as a formatted string
 * @link http://book.cakephp.org/2.0/en/development/debugging.html#Debugger::exportVar
 */",
 "/**
 * Protected export function used to keep track of indentation and recursion.
 *
 * @param mixed $var The variable to dump.
 * @param integer $depth The remaining depth.
 * @param integer $indent The current indentation level.
 * @return string The dumped variable.
 */",
 "/**
 * Export an array type object.  Filters out keys used in datasource configuration.
 *
 * The following keys are replaced with ***\'s
 *
 * - password
 * - login
 * - host
 * - database
 * - port
 * - prefix
 * - schema
 *
 * @param array $var The array to export.
 * @param integer $depth The current depth, used for recursion tracking.
 * @param integer $indent The current indentation level.
 * @return string Exported array.
 */",
 "/**
 * Handles object to string conversion.
 *
 * @param string $var Object to convert
 * @param integer $depth The current depth, used for tracking recursion.
 * @param integer $indent The current indentation level.
 * @return string
 * @see Debugger::exportVar()
 */",
 "/**
 * Get/Set the output format for Debugger error rendering.
 *
 * @param string $format The format you want errors to be output as.
 *   Leave null to get the current format.
 * @return mixed Returns null when setting.  Returns the current format when getting.
 * @throws CakeException when choosing a format that doesn\'t exist.
 */",
 "/**
 * Add an output format or update a format in Debugger.
 *
 * `Debugger::addFormat(\'custom\', $data);`
 *
 * Where $data is an array of strings that use String::insert() variable
 * replacement.  The template vars should be in a `{:id}` style.
 * An error formatter can have the following keys:
 *
 * - \'error\' - Used for the container for the error message. Gets the following template
 *   variables: `id`, `error`, `code`, `description`, `path`, `line`, `links`, `info`
 * - \'info\' - A combination of `code`, `context` and `trace`. Will be set with
 *   the contents of the other template keys.
 * - \'trace\' - The container for a stack trace. Gets the following template
 *   variables: `trace`
 * - \'context\' - The container element for the context variables.
 *   Gets the following templates: `id`, `context`
 * - \'links\' - An array of HTML links that are used for creating links to other resources.
 *   Typically this is used to create javascript links to open other sections.
 *   Link keys, are: `code`, `context`, `help`.  See the js output format for an
 *   example.
 * - \'traceLine\' - Used for creating lines in the stacktrace. Gets the following
 *   template variables: `reference`, `path`, `line`
 *
 * Alternatively if you want to use a custom callback to do all the formatting, you can use
 * the callback key, and provide a callable:
 *
 * `Debugger::addFormat(\'custom\', array(\'callback\' => array($foo, \'outputError\'));`
 *
 * The callback can expect two parameters.  The first is an array of all
 * the error data. The second contains the formatted strings generated using
 * the other template strings.  Keys like `info`, `links`, `code`, `context` and `trace`
 * will be present depending on the other templates in the format type.
 *
 * @param string $format Format to use, including \'js\' for JavaScript-enhanced HTML, \'html\' for
 *    straight HTML output, or \'txt\' for unformatted text.
 * @param array $strings Template strings, or a callback to be used for the output format.
 * @return The resulting format string set.
 */",
 "/**
 * Switches output format, updates format strings.
 * Can be used to switch the active output format:
 *
 * @param string $format Format to use, including \'js\' for JavaScript-enhanced HTML, \'html\' for
 *    straight HTML output, or \'txt\' for unformatted text.
 * @param array $strings Template strings to be used for the output format.
 * @return string
 * @deprecated Use Debugger::outputAs() and  Debugger::addFormat(). Will be removed
 *   in 3.0
 */",
 "/**
 * Takes a processed array of data from an error and displays it in the chosen format.
 *
 * @param string $data
 * @return void
 */",
 "/**
 * Get the type of the given variable. Will return the classname
 * for objects.
 *
 * @param mixed $var The variable to get the type of
 * @return string The type of variable.
 */",
 "/**
 * Verifies that the application\'s salt and cipher seed value has been changed from the default value.
 *
 * @return void
 */",
 "/**
 * Provide custom logging and error handling.
 *
 * Debugger overrides PHP\'s default error handling to provide stack traces and enhanced logging
 *
 * @package       Cake.Utility
 * @link          http://book.cakephp.org/2.0/en/development/debugging.html#debugger-class
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test Suite Test App Cache Engine class.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Lib.Cache.Engine
 * @since         CakePHP(tm) v 1.3
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test that booleans and null make logical condition strings.
 *
 * @return void
 */",
 "/**
 * test that order() will accept objects made from DboSource::expression
 *
 * @return void
 */",
 "/**
 * testMergeAssociations method
 *
 * @return void
 */",
 "/**
 * testMagicMethodQuerying method
 *
 * @return void
 */",
 "/**
 *
 * @expectedException PDOException
 * @return void
 */",
 "/**
 * testValue method
 *
 * @return void
 */",
 "/**
 * testReconnect method
 *
 * @return void
 */",
 "/**
 * testName method
 *
 * @return void
 */",
 "/**
 * test that cacheMethod works as expected
 *
 * @return void
 */",
 "/**
 * Test that rare collisions do not happen with method caching
 *
 * @return void
 */",
 "/**
 * testLog method
 *
 * @outputBuffering enabled
 * @return void
 */",
 "/**
 * test getting the query log as an array.
 *
 * @return void
 */",
 "/**
 * test getting the query log as an array, setting bind params.
 *
 * @return void
 */",
 "/**
 * test that query() returns boolean values from operations like CREATE TABLE
 *
 * @return void
 */",
 "/**
 * test order to generate query order clause for virtual fields
 *
 * @return void
 */",
 "/**
 * test the permutations of fullTableName()
 *
 * @return void
 */",
 "/**
 * test that read() only calls queryAssociation on db objects when the method is defined.
 *
 * @return void
 */",
 "/**
 * test that queryAssociation() reuse already joined data for \'belongsTo\' and \'hasOne\' associations
 * instead of running unneeded queries for each record
 *
 * @return void
 */",
 "/**
 * test that fields() is using methodCache()
 *
 * @return void
 */",
 "/**
 * test that fields() method cache detects datasource changes
 *
 * @return void
 */",
 "/**
 * Test that group works without a model
 *
 * @return void
 */",
 "/**
 * Test getting the last error.
 */",
 "/**
 * Tests that transaction commands are logged
 *
 * @return void
 **/",
 "/**
 * Test nested transaction calls
 *
 * @return void
 */",
 "/**
 * Test nested transaction calls without support
 *
 * @return void
 */",
 "/**
 * Test nested transaction disabled
 *
 * @return void
 */",
 "/**
 * Nested transaction calls
 *
 * @param DboTestSource $db
 * @return void
 */",
 "/**
 * Test build statement with some fields missing
 *
 * @return void
 */",
 "/**
 * data provider for testBuildJoinStatement
 *
 * @return array
 */",
 "/**
 * Test buildJoinStatement()
 * ensure that schemaName is not added when table value is a subquery
 *
 * @dataProvider joinStatements
 * @return void
 */",
 "/**
 * DboSourceTest class
 *
 * @package       Cake.Test.Case.Model.Datasource
 */",
 "/**
 * CakeTestFixtureTestFixture class
 *
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * StringFieldsTestFixture class
 *
 * @package       Cake.Test.Case.TestSuite
 * @subpackage    cake.cake.tests.cases.libs
 */",
 "/**
 * CakeTestFixtureImportFixture class
 *
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * CakeTestFixtureDefaultImportFixture class
 *
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * FixtureImportTestModel class
 *
 * @package       Cake.Test.Case.TestSuite
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * testInit
 *
 * @return void
 */",
 "/**
 * test that init() correctly sets the fixture table when the connection 
 * or model have prefixes defined.
 *
 * @return void
 */",
 "/**
 * test that fixtures don\'t duplicate the test db prefix.
 *
 * @return void
 */",
 "/**
 * test init with a model that has a tablePrefix declared.
 *
 * @return void
 */",
 "/**
 * testImport
 *
 * @return void
 */",
 "/**
 * test that importing with records works.  Make sure to try with postgres as its
 * handling of aliases is a workaround at best.
 *
 * @return void
 */",
 "/**
 * test create method
 *
 * @return void
 */",
 "/**
 * test the insert method
 *
 * @return void
 */",
 "/**
 * Helper function to be used as callback and store the parameters of an insertMulti call
 *
 * @param string $table
 * @param string $fields
 * @param string $values
 * @return boolean true
 */",
 "/**
 * test the insert method
 *
 * @return void
 */",
 "/**
 * Test the drop method
 *
 * @return void
 */",
 "/**
 * Test the truncate method.
 *
 * @return void
 */",
 "/**
 * Test case for CakeTestFixture
 *
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * Create javascript selector for a CSS rule
 *
 * @param string $selector The selector that is targeted
 * @return MootoolsEngineHelper instance of $this. Allows chained methods.
 */",
 "/**
 * Add an event to the script cache. Operates on the currently selected elements.
 *
 * ### Options
 *
 * - \'wrap\' - Whether you want the callback wrapped in an anonymous function. (defaults true)
 * - \'stop\' - Whether you want the event to stopped. (defaults true)
 *
 * @param string $type Type of event to bind to the current dom id
 * @param string $callback The Javascript function you wish to trigger or the function literal
 * @param array $options Options for the event.
 * @return string completed event handler
 */",
 "/**
 * Create a domReady event. This is a special event in many libraries
 *
 * @param string $functionBody The code to run on domReady
 * @return string completed domReady method
 */",
 "/**
 * Create an iteration over the current selection result.
 *
 * @param string $callback The function body you wish to apply during the iteration.
 * @return string completed iteration
 */",
 "/**
 * Trigger an Effect.
 *
 * @param string $name The name of the effect to trigger.
 * @param array $options Array of options for the effect.
 * @return string completed string with effect.
 * @see JsBaseEngineHelper::effect()
 */",
 "/**
 * Create an new Request.
 *
 * Requires `Request`.  If you wish to use \'update\' key you must have ```Request.HTML```
 * if you wish to do Json requests you will need ```JSON``` and ```Request.JSON```.
 *
 * @param string|array $url
 * @param array $options
 * @return string The completed ajax call.
 */",
 "/**
 * Create a sortable element.
 *
 * Requires the `Sortables` plugin from MootoolsMore
 *
 * @param array $options Array of options for the sortable.
 * @return string Completed sortable script.
 * @see JsBaseEngineHelper::sortable() for options list.
 */",
 "/**
 * Create a Draggable element.
 *
 * Requires the `Drag` plugin from MootoolsMore
 *
 * @param array $options Array of options for the draggable.
 * @return string Completed draggable script.
 * @see JsHelper::drag() for options list.
 */",
 "/**
 * Create a Droppable element.
 *
 * Requires the `Drag` and `Drag.Move` plugins from MootoolsMore
 *
 * Droppables in Mootools function differently from other libraries.  Droppables
 * are implemented as an extension of Drag.  So in addition to making a get() selection for
 * the droppable element. You must also provide a selector rule to the draggable element. Furthermore,
 * Mootools droppables inherit all options from Drag.
 *
 * @param array $options Array of options for the droppable.
 * @return string Completed droppable script.
 * @see JsBaseEngineHelper::drop() for options list.
 */",
 "/**
 * Create a slider control
 *
 * Requires `Slider` from MootoolsMore
 *
 * @param array $options Array of options for the slider.
 * @return string Completed slider script.
 * @see JsBaseEngineHelper::slider() for options list.
 */",
 "/**
 * Serialize the form attached to $selector.
 *
 * @param array $options Array of options.
 * @return string Completed serializeForm() snippet
 * @see JsBaseEngineHelper::serializeForm()
 */",
 "/**
 * MooTools Engine Helper for JsHelper
 *
 * Provides MooTools specific Javascript for JsHelper.
 * Assumes that you have the following MooTools packages
 *
 * - Remote, Remote.HTML, Remote.JSON
 * - Fx, Fx.Tween, Fx.Morph
 * - Selectors, DomReady,
 * - Drag, Drag.Move
 *
 * @package       Cake.View.Helper
 */",
 "/**
 * Generates report html to display.
 *
 * @return string compiled html report.
 */",
 "/**
 * Generates an HTML diff for $file based on $coverageData.
 *
 * Handles both PHPUnit3.5 and 3.6 formats.
 *
 * 3.5 uses -1 for uncovered, and -2 for dead.
 * 3.6 uses array() for uncovered and null for dead.
 *
 * @param string $filename Name of the file having coverage generated
 * @param array $fileLines File data as an array. See file() for how to get one of these.
 * @param array $coverageData Array of coverage data to use to generate HTML diffs with
 * @return string HTML diff.
 */",
 "/**
 * Guess the classname the test was for based on the test case filename.
 *
 * @param ReflectionClass $testReflection.
 * @return string Possible test subject name.
 */",
 "/**
 * Renders the html for a single line in the html diff.
 *
 * @return void
 */",
 "/**
 * generate some javascript for the coverage report.
 *
 * @return void
 */",
 "/**
 * Generate an HTML snippet for coverage headers
 *
 * @return void
 */",
 "/**
 * Generate an HTML snippet for coverage footers
 *
 * @return void
 */",
 "/**
 * Generates code coverage reports in HTML from data obtained from PHPUnit
 *
 * @package       Cake.TestSuite.Coverage
 */",
 "/**
 * Override initialize of the Shell
 *
 * @return void
 */",
 "/**
 * Override main() to handle action
 *
 * @return void
 */",
 "/**
 * Get and configure the optionparser.
 *
 * @return ConsoleOptionParser
 */",
 "/**
 * Show help for this shell.
 *
 * @return void
 */",
 "/**
 * Parse a given class (located on given file) and get public methods and their
 * signatures.
 *
 * @param string $path File path
 * @param string $class Class name
 * @return array Methods and signatures indexed by method name
 */",
 "/**
 * API shell to show method signatures of CakePHP core classes.
 *
 * Implementation of a Cake Shell to show CakePHP core method signatures.
 *
 * @package       Cake.Console.Command
 */",
 "/**
 * Get a single value specified by $path out of $data.
 * Does not support the full dot notation feature set,
 * but is faster for simple read operations.
 *
 * @param array $data Array of data to operate on.
 * @param string|array $path The path being searched for. Either a dot
 *   separated string, or an array of path segments.
 * @return mixed The value fetched from the array, or null.
 */",
 "/**
 * Gets the values from an array matching the $path expression.
 * The path expression is a dot separated expression, that can contain a set
 * of patterns and expressions:
 *
 * - `{n}` Matches any numeric key, or integer.
 * - `{s}` Matches any string key.
 * - `Foo` Matches any key with the exact same value.
 *
 * There are a number of attribute operators:
 *
 *  - `=`, `!=` Equality.
 *  - `>`, `<`, `>=`, `<=` Value comparison.
 *  - `=/.../` Regular expression pattern match.
 *
 * Given a set of User array data, from a `$User->find(\'all\')` call:
 *
 * - `1.User.name` Get the name of the user at index 1.
 * - `{n}.User.name` Get the name of every user in the set of users.
 * - `{n}.User[id]` Get the name of every user with an id key.
 * - `{n}.User[id>=2]` Get the name of every user with an id key greater than or equal to 2.
 * - `{n}.User[username=/^paul/]` Get User elements with username matching `^paul`.
 *
 * @param array $data The data to extract from.
 * @param string $path The path to extract.
 * @return array An array of the extracted values.  Returns an empty array
 *   if there are no matches.
 */",
 "/**
 * Check a key against a token.
 *
 * @param string $key The key in the array being searched.
 * @param string $token The token being matched.
 * @return boolean
 */",
 "/**
 * Checks whether or not $data matches the attribute patterns
 *
 * @param array $data Array of data to match.
 * @param string $selector The patterns to match.
 * @return boolean Fitness of expression.
 */",
 "/**
 * Insert $values into an array with the given $path. You can use
 * `{n}` and `{s}` elements to insert $data multiple times.
 *
 * @param array $data The data to insert into.
 * @param string $path The path to insert at.
 * @param array $values The values to insert.
 * @return array The data with $values inserted.
 */",
 "/**
 * Perform a simple insert/remove operation.
 *
 * @param string $op The operation to do.
 * @param array $data The data to operate on.
 * @param array $path The path to work on.
 * @param mixed $values The values to insert when doing inserts.
 * @return array $data.
 */",
 "/**
 * Remove data matching $path from the $data array.
 * You can use `{n}` and `{s}` to remove multiple elements
 * from $data.
 *
 * @param array $data The data to operate on
 * @param string $path A path expression to use to remove.
 * @return array The modified array.
 */",
 "/**
 * Creates an associative array using `$keyPath` as the path to build its keys, and optionally
 * `$valuePath` as path to get the values. If `$valuePath` is not specified, all values will be initialized
 * to null (useful for Hash::merge). You can optionally group the values by what is obtained when
 * following the path specified in `$groupPath`.
 *
 * @param array $data Array from where to extract keys and values
 * @param string $keyPath A dot-separated string.
 * @param string $valuePath A dot-separated string.
 * @param string $groupPath A dot-separated string.
 * @return array Combined array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::combine
 */",
 "/**
 * Returns a formated series of values extracted from `$data`, using
 * `$format` as the format and `$paths` as the values to extract.
 *
 * Usage:
 *
 * {{{
 * $result = Hash::format($users, array(\'{n}.User.id\', \'{n}.User.name\'), \'%s : %s\');
 * }}}
 *
 * The `$format` string can use any format options that `vsprintf()` and `sprintf()` do.
 *
 * @param array $data Source array from which to extract the data
 * @param string $paths An array containing one or more Hash::extract()-style key paths
 * @param string $format Format string into which values will be inserted, see sprintf()
 * @return array An array of strings extracted from `$path` and formatted with `$format`
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::format
 * @see sprintf()
 * @see Hash::extract()
 */",
 "/**
 * Determines if one array contains the exact keys and values of another.
 *
 * @param array $data The data to search through.
 * @param array $needle The values to file in $data
 * @return boolean true if $data contains $needle, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::contains
 */",
 "/**
 * Test whether or not a given path exists in $data.
 * This method uses the same path syntax as Hash::extract()
 *
 * Checking for paths that could target more than one element will
 * make sure that at least one matching element exists.
 *
 * @param array $data The data to check.
 * @param string $path The path to check for.
 * @return boolean Existence of path.
 * @see Hash::extract()
 */",
 "/**
 * Recursively filters a data set.
 *
 * @param array $data Either an array to filter, or value when in callback
 * @param callable $callback A function to filter the data with.  Defaults to
 *   `self::_filter()` Which strips out all non-zero empty values.
 * @return array Filtered array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::filter
 */",
 "/**
 * Callback function for filtering.
 *
 * @param array $var Array to filter.
 * @return boolean
 */",
 "/**
 * Collapses a multi-dimensional array into a single dimension, using a delimited array path for
 * each array element\'s key, i.e. array(array(\'Foo\' => array(\'Bar\' => \'Far\'))) becomes
 * array(\'0.Foo.Bar\' => \'Far\').)
 *
 * @param array $data Array to flatten
 * @param string $separator String used to separate array key elements in a path, defaults to \'.\'
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::flatten
 */",
 "/**
 * Expand/unflattens an string to an array
 *
 * For example, unflattens an array that was collapsed with `Hash::flatten()`
 * into a multi-dimensional array. So, `array(\'0.Foo.Bar\' => \'Far\')` becomes
 * `array(array(\'Foo\' => array(\'Bar\' => \'Far\')))`.
 *
 * @param array $data Flattened array
 * @param string $separator The delimiter used
 * @return array
 */",
 "/**
 * This function can be thought of as a hybrid between PHP\'s `array_merge` and `array_merge_recursive`.
 *
 * The difference between this method and the built-in ones, is that if an array key contains another array, then
 * Hash::merge() will behave in a recursive fashion (unlike `array_merge`).  But it will not act recursively for
 * keys that contain scalar values (unlike `array_merge_recursive`).
 *
 * Note: This function will work with an unlimited amount of arguments and typecasts non-array parameters into arrays.
 *
 * @param array $data Array to be merged
 * @param mixed $merge Array to merge with. The argument and all trailing arguments will be array cast when merged
 * @return array Merged array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::merge
 */",
 "/**
 * Checks to see if all the values in the array are numeric
 *
 * @param array $array The array to check.
 * @return boolean true if values are numeric, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::numeric
 */",
 "/**
 * Counts the dimensions of an array.
 * Only considers the dimension of the first element in the array.
 *
 * If you have an un-even or hetrogenous array, consider using Hash::maxDimensions()
 * to get the dimensions of the array.
 *
 * @param array $array Array to count dimensions on
 * @return integer The number of dimensions in $data
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::dimensions
 */",
 "/**
 * Counts the dimensions of *all* array elements. Useful for finding the maximum
 * number of dimensions in a mixed array.
 *
 * @param array $data Array to count dimensions on
 * @return integer The maximum number of dimensions in $data
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::maxDimensions
 */",
 "/**
 * Map a callback across all elements in a set.
 * Can be provided a path to only modify slices of the set.
 *
 * @param array $data The data to map over, and extract data out of.
 * @param string $path The path to extract for mapping over.
 * @param callable $function The function to call on each extracted value.
 * @return array An array of the modified values.
 */",
 "/**
 * Reduce a set of extracted values using `$function`.
 *
 * @param array $data The data to reduce.
 * @param string $path The path to extract from $data.
 * @return mixed The reduced value.
 */",
 "/**
 * Apply a callback to a set of extracted values using `$function`.
 * The function will get the extracted values as the first argument.
 *
 * @param array $data The data to reduce.
 * @param string $path The path to extract from $data.
 * @return mixed The results of the applied method.
 */",
 "/**
 * Sorts an array by any value, determined by a Set-compatible path
 *
 * ### Sort directions
 *
 * - `asc` Sort ascending.
 * - `desc` Sort descending.
 *
 * ## Sort types
 *
 * - `numeric` Sort by numeric value.
 * - `regular` Sort by numeric value.
 * - `string` Sort by numeric value.
 * - `natural` Sort by natural order. Requires PHP 5.4 or greater.
 *
 * @param array $data An array of data to sort
 * @param string $path A Set-compatible path to the array value
 * @param string $dir See directions above.
 * @param string $type See direction types above. Defaults to \'regular\'.
 * @return array Sorted array of data
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::sort
 */",
 "/**
 * Helper method for sort()
 * Sqaushes an array to a single hash so it can be sorted.
 *
 * @param array $data The data to squash.
 * @param string $key The key for the data.
 * @return array
 */",
 "/**
 * Computes the difference between two complex arrays.
 * This method differs from the built-in array_diff() in that it will preserve keys
 * and work on multi-dimensional arrays.
 *
 * @param array $data First value
 * @param array $compare Second value
 * @return array Returns the key => value pairs that are not common in $data and $compare
 *    The expression for this function is ($data - $compare) + ($compare - ($data - $compare))
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::diff
 */",
 "/**
 * Merges the difference between $data and $push onto $data.
 *
 * @param array $data The data to append onto.
 * @param array $compare The data to compare and append onto.
 * @return array The merged array.
 */",
 "/**
 * Normalizes an array, and converts it to a standard format.
 *
 * @param array $data List to normalize
 * @param boolean $assoc If true, $data will be converted to an associative array.
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/hash.html#Hash::normalize
 */",
 "/**
 * Takes in a flat array and returns a nested array
 *
 * ### Options:
 *
 * - `children` The key name to use in the resultset for children.
 * - `idPath` The path to a key that identifies each entry. Should be
 *   compatible with Hash::extract(). Defaults to `{n}.$alias.id`
 * - `parentPath` The path to a key that identifies the parent of each entry.
 *   Should be compatible with Hash::extract(). Defaults to `{n}.$alias.parent_id`
 * - `root` The id of the desired top-most result.
 *
 * @param array $data The data to nest.
 * @param array $options Options are:
 * @return array of results, nested
 * @see Hash::extract()
 */",
 "/**
 * Library of array functions for manipulating and extracting data
 * from arrays or \'sets\' of data.
 *
 * `Hash` provides an improved interface, more consistent and
 * predictable set of features over `Set`.  While it lacks the spotty
 * support for pseudo Xpath, its more fully featured dot notation provides
 * similar features in a more consistent implementation.
 *
 * @package       Cake.Utility
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * test method for ajax redirection
 *
 * @return void
 */",
 "/**
 * test method for ajax redirection + parameter parsing
 *
 * @return void
 */",
 "/**
 * test method for testing layout rendering when isAjax()
 *
 * @return void
 */",
 "/**
 * RequestHandlerTestController class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * init method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Test that the constructor sets the settings.
 *
 * @return void
 */",
 "/**
 * testInitializeCallback method
 *
 * @return void
 */",
 "/**
 * test that a mapped Accept-type header will set $this->ext correctly.
 *
 * @return void
 */",
 "/**
 * Test that RequestHandler sets $this->ext when jQuery sends its wonky-ish headers.
 *
 * @return void
 */",
 "/**
 * Test that RequestHandler sets $this->ext when jQuery sends its wonky-ish headers
 * and the application is configured to handle multiple extensions
 *
 * @return void
 */",
 "/**
 * Test that RequestHandler does not set $this->ext when multiple accepts are sent.
 *
 * @return void
 */",
 "/**
 * Test that ext is not set with multiple accepted content types.
 *
 * @return void
 */",
 "/**
 * Test that ext is not set with confusing android accepts headers.
 *
 * @return void
 */",
 "/**
 * Test that a type mismatch doesn\'t incorrectly set the ext
 *
 * @return void
 */",
 "/**
 * testDisabling method
 *
 * @return void
 */",
 "/**
 * testAutoResponseType method
 *
 * @return void
 */",
 "/**
 * testAutoAjaxLayout method
 *
 * @return void
 */",
 "/**
 * testStartupCallback method
 *
 * @return void
 */",
 "/**
 * testStartupCallback with charset.
 *
 * @return void
 */",
 "/**
 * Test mapping a new type and having startup process it.
 *
 * @return void
 */",
 "/**
 * testNonAjaxRedirect method
 *
 * @return void
 */",
 "/**
 * testRenderAs method
 *
 * @return void
 */",
 "/**
 * test that attachment headers work with renderAs
 *
 * @return void
 */",
 "/**
 * test that respondAs works as expected.
 *
 * @return void
 */",
 "/**
 * test that attachment headers work with respondAs
 *
 * @return void
 */",
 "/**
 * test that calling renderAs() more than once continues to work.
 *
 * @link #6466
 * @return void
 */",
 "/**
 * testRequestClientTypes method
 *
 * @return void
 */",
 "/**
 * Tests the detection of various Flash versions
 *
 * @return void
 */",
 "/**
 * testRequestContentTypes method
 *
 * @return void
 */",
 "/**
 * testResponseContentType method
 *
 * @return void
 */",
 "/**
 * testMobileDeviceDetection method
 *
 * @return void
 */",
 "/**
 * testRequestProperties method
 *
 * @return void
 */",
 "/**
 * testRequestMethod method
 *
 * @return void
 */",
 "/**
 * test that map alias converts aliases to content types.
 *
 * @return void
 */",
 "/**
 * test accepts() on the component
 *
 * @return void
 */",
 "/**
 * test accepts and prefers methods.
 *
 * @return void
 */",
 "/**
 * testCustomContent method
 *
 * @return void
 */",
 "/**
 * testClientProperties method
 *
 * @return void
 */",
 "/**
 * test that ajax requests involving redirects trigger requestAction instead.
 *
 * @return void
 */",
 "/**
 * test that ajax requests involving redirects don\'t force no layout
 * this would cause the ajax layout to not be rendered.
 *
 * @return void
 */",
 "/**
 * test that the beforeRedirect callback properly converts
 * array urls into their correct string ones, and adds base => false so
 * the correct urls are generated.
 *
 * @link http://cakephp.lighthouseapp.com/projects/42648-cakephp-1x/tickets/276
 * @return void
 */",
 "/**
 * assure that beforeRedirect with a status code will correctly set the status header
 *
 * @return void
 */",
 "/**
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * RequestHandlerComponentTest class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllConsoleLibsTest class
 *
 * This test group will run all console lib classes.
 *
 * @package       Cake.Test.Case.Console
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * @expectedException PHPUnit_Framework_Error
 */",
 "/**
 * @expectedException CakeException
 */",
 "/**
 * test failure
 *
 * @return void
 */",
 "/**
 * test isAuthorized working.
 *
 * @return void
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Initialize the cache engine
 *
 * Called automatically by the cache frontend
 *
 * @param array $settings Associative array of parameters for the engine
 * @return boolean True if the engine has been successfully initialized, false if not
 */",
 "/**
 * Garbage collection
 *
 * Permanently remove all expired and deleted data
 * 
 * @param integer $expires [optional] An expires timestamp, invalidataing all data before.
 * @return void
 */",
 "/**
 * Write value for a key into cache
 *
 * @param string $key Identifier for the data
 * @param mixed $value Data to be cached
 * @param integer $duration How long to cache for.
 * @return boolean True if the data was successfully cached, false on failure
 */",
 "/**
 * Read a key from the cache
 *
 * @param string $key Identifier for the data
 * @return mixed The cached data, or false if the data doesn\'t exist, has expired, or if there was an error fetching it
 */",
 "/**
 * Increment a number under the key and return incremented value
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to add
 * @return New incremented value, false otherwise
 */",
 "/**
 * Decrement a number under the key and return decremented value
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to subtract
 * @return New incremented value, false otherwise
 */",
 "/**
 * Delete a key from the cache
 *
 * @param string $key Identifier for the data
 * @return boolean True if the value was successfully deleted, false if it didn\'t exist or couldn\'t be removed
 */",
 "/**
 * Delete all keys from the cache
 *
 * @param boolean $check if true will check expiration, otherwise delete all
 * @return boolean True if the cache was successfully cleared, false otherwise
 */",
 "/**
 * Clears all values belonging to a group. Is upt to the implementing engine
 * to decide whether actually deete the keys or just simulate it to acheive
 * the same result.
 *
 * @param string $groups name of the group to be cleared
 * @return boolean
 */",
 "/**
 * Does whatever initialization for each group is required
 * and returns the `group value` for each of them, this is
 * the token representing each group in the cache key
 *
 * @return array
 */",
 "/**
 * Cache Engine settings
 *
 * @return array settings
 */",
 "/**
 * Generates a safe key for use with cache engine storage engines.
 *
 * @param string $key the key passed over
 * @return mixed string $key or false
 */",
 "/**
 * Storage engine for CakePHP caching
 *
 * @package       Cake.Cache
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * Test that method names are detected properly including those with no arguments.
 *
 * @return void
 */",
 "/**
 * ApiShellTest class
 *
 * @package       Cake.Test.Case.Console.Command
 */",
 "/**
 * Short description for class.
 *
 * @package       cake
 * @subpackage    cake.tests.fixtures
 */",
 "/**
 * Constructor
 *
 * @param string $url Trimmed url string to use.  Should not contain the application base path.
 * @param boolean $parseEnvironment Set to false to not auto parse the environment. ie. GET, POST and FILES.
 */",
 "/**
 * process the post data and set what is there into the object.
 * processed data is available at `$this->data`
 *
 * Will merge POST vars prefixed with `data`, and ones without
 * into a single array. Variables prefixed with `data` will overwrite those without.
 *
 * If you have mixed POST values be careful not to make any top level keys numeric
 * containing arrays. Hash::merge() is used to merge data, and it has possibly
 * unexpected behavior in this situation.
 *
 * @return void
 */",
 "/**
 * Process the GET parameters and move things into the object.
 *
 * @return void
 */",
 "/**
 * Get the request uri.  Looks in PATH_INFO first, as this is the exact value we need prepared
 * by PHP.  Following that, REQUEST_URI, PHP_SELF, HTTP_X_REWRITE_URL and argv are checked in that order.
 * Each of these server variables have the base path, and query strings stripped off
 *
 * @return string URI The CakePHP request path that is being accessed.
 */",
 "/**
 * Returns a base URL and sets the proper webroot
 *
 * @return string Base URL
 */",
 "/**
 * Process $_FILES and move things into the object.
 *
 * @return void
 */",
 "/**
 * Recursively walks the FILES array restructuring the data
 * into something sane and useable.
 *
 * @param string $path The dot separated path to insert $data into.
 * @param array $data The data to traverse/insert.
 * @param string $field The terminal field name, which is the top level key in $_FILES.
 * @return void
 */",
 "/**
 * Get the IP the client is using, or says they are using.
 *
 * @param boolean $safe Use safe = false when you think the user might manipulate their HTTP_CLIENT_IP
 *   header.  Setting $safe = false will will also look at HTTP_X_FORWARDED_FOR
 * @return string The client IP.
 */",
 "/**
 * Returns the referer that referred this request.
 *
 * @param boolean $local Attempt to return a local address. Local addresses do not contain hostnames.
 * @return string The referring address for this request.
 */",
 "/**
 * Missing method handler, handles wrapping older style isAjax() type methods
 *
 * @param string $name The method called
 * @param array $params Array of parameters for the method call
 * @return mixed
 * @throws CakeException when an invalid method is called.
 */",
 "/**
 * Magic get method allows access to parsed routing parameters directly on the object.
 *
 * Allows access to `$this->params[\'controller\']` via `$this->controller`
 *
 * @param string $name The property being accessed.
 * @return mixed Either the value of the parameter or null.
 */",
 "/**
 * Magic isset method allows isset/empty checks
 * on routing parameters.
 *
 * @param string $name The property being accessed.
 * @return bool Existence
 */",
 "/**
 * Check whether or not a Request is a certain type.  Uses the built in detection rules
 * as well as additional rules defined with CakeRequest::addDetector().  Any detector can be called
 * as `is($type)` or `is$Type()`.
 *
 * @param string $type The type of request you want to check.
 * @return boolean Whether or not the request is the type you are checking.
 */",
 "/**
 * Add a new detector to the list of detectors that a request can use.
 * There are several different formats and types of detectors that can be set.
 *
 * ### Environment value comparison
 *
 * An environment value comparison, compares a value fetched from `env()` to a known value
 * the environment value is equality checked against the provided value.
 *
 * e.g `addDetector(\'post\', array(\'env\' => \'REQUEST_METHOD\', \'value\' => \'POST\'))`
 *
 * ### Pattern value comparison
 *
 * Pattern value comparison allows you to compare a value fetched from `env()` to a regular expression.
 *
 * e.g `addDetector(\'iphone\', array(\'env\' => \'HTTP_USER_AGENT\', \'pattern\' => \'/iPhone/i\'));`
 *
 * ### Option based comparison
 *
 * Option based comparisons use a list of options to create a regular expression.  Subsequent calls
 * to add an already defined options detector will merge the options.
 *
 * e.g `addDetector(\'mobile\', array(\'env\' => \'HTTP_USER_AGENT\', \'options\' => array(\'Fennec\')));`
 *
 * ### Callback detectors
 *
 * Callback detectors allow you to provide a \'callback\' type to handle the check.  The callback will
 * receive the request object as its only parameter.
 *
 * e.g `addDetector(\'custom\', array(\'callback\' => array(\'SomeClass\', \'somemethod\')));`
 *
 * ### Request parameter detectors
 *
 * Allows for custom detectors on the request parameters.
 *
 * e.g `addDetector(\'post\', array(\'param\' => \'requested\', \'value\' => 1)`
 *
 * @param string $name The name of the detector.
 * @param array $options  The options for the detector definition.  See above.
 * @return void
 */",
 "/**
 * Add parameters to the request\'s parsed parameter set. This will overwrite any existing parameters.
 * This modifies the parameters available through `$request->params`.
 *
 * @param array $params Array of parameters to merge in
 * @return The current object, you can chain this method.
 */",
 "/**
 * Add paths to the requests\' paths vars.  This will overwrite any existing paths.
 * Provides an easy way to modify, here, webroot and base.
 *
 * @param array $paths Array of paths to merge in
 * @return CakeRequest the current object, you can chain this method.
 */",
 "/**
 * Get the value of the current requests url.  Will include named parameters and querystring arguments.
 *
 * @param boolean $base Include the base path, set to false to trim the base path off.
 * @return string the current request url including query string args.
 */",
 "/**
 * Read an HTTP header from the Request information.
 *
 * @param string $name Name of the header you want.
 * @return mixed Either false on no header being set or the value of the header.
 */",
 "/**
 * Get the HTTP method used for this request.
 * There are a few ways to specify a method.
 *
 * - If your client supports it you can use native HTTP methods.
 * - You can set the HTTP-X-Method-Override header.
 * - You can submit an input with the name `_method`
 *
 * Any of these 3 approaches can be used to set the HTTP method used
 * by CakePHP internally, and will effect the result of this method.
 *
 * @return string The name of the HTTP method used.
 */",
 "/**
 * Get the host that the request was handled on.
 *
 * @return string
 */",
 "/**
 * Get the domain name and include $tldLength segments of the tld.
 *
 * @param integer $tldLength Number of segments your tld contains. For example: `example.com` contains 1 tld.
 *   While `example.co.uk` contains 2.
 * @return string Domain name without subdomains.
 */",
 "/**
 * Get the subdomains for a host.
 *
 * @param integer $tldLength Number of segments your tld contains. For example: `example.com` contains 1 tld.
 *   While `example.co.uk` contains 2.
 * @return array of subdomains.
 */",
 "/**
 * Find out which content types the client accepts or check if they accept a
 * particular type of content.
 *
 * #### Get all types:
 *
 * `$this->request->accepts();`
 *
 * #### Check for a single type:
 *
 * `$this->request->accepts(\'application/json\');`
 *
 * This method will order the returned content types by the preference values indicated
 * by the client.
 *
 * @param string $type The content type to check for.  Leave null to get all types a client accepts.
 * @return mixed Either an array of all the types the client accepts or a boolean if they accept the
 *   provided type.
 */",
 "/**
 * Parse the HTTP_ACCEPT header and return a sorted array with content types
 * as the keys, and pref values as the values.
 *
 * Generally you want to use CakeRequest::accept() to get a simple list
 * of the accepted content types.
 *
 * @return array An array of prefValue => array(content/types)
 */",
 "/**
 * Get the languages accepted by the client, or check if a specific language is accepted.
 *
 * Get the list of accepted languages:
 *
 * {{{ CakeRequest::acceptLanguage(); }}}
 *
 * Check if a specific language is accepted:
 *
 * {{{ CakeRequest::acceptLanguage(\'es-es\'); }}}
 *
 * @param string $language The language to test.
 * @return If a $language is provided, a boolean. Otherwise the array of accepted languages.
 */",
 "/**
 * Provides a read/write accessor for `$this->data`.  Allows you
 * to use a syntax similar to `CakeSession` for reading post data.
 *
 * ## Reading values.
 *
 * `$request->data(\'Post.title\');`
 *
 * When reading values you will get `null` for keys/values that do not exist.
 *
 * ## Writing values
 *
 * `$request->data(\'Post.title\', \'New post!\');`
 *
 * You can write to any value, even paths/keys that do not exist, and the arrays
 * will be created for you.
 *
 * @param string $name,... Dot separated name of the value to read/write
 * @return mixed Either the value being read, or this so you can chain consecutive writes.
 */",
 "/**
 * Read data from `php://input`. Useful when interacting with XML or JSON
 * request body content.
 *
 * Getting input with a decoding function:
 *
 * `$this->request->input(\'json_decode\');`
 *
 * Getting input using a decoding function, and additional params:
 *
 * `$this->request->input(\'Xml::build\', array(\'return\' => \'DOMDocument\'));`
 *
 * Any additional parameters are applied to the callback in the order they are given.
 *
 * @param string $callback A decoding callback that will convert the string data to another
 *     representation. Leave empty to access the raw input data. You can also
 *     supply additional parameters for the decoding callback using var args, see above.
 * @return The decoded/processed request data.
 */",
 "/**
 * Read data from php://input, mocked in tests.
 *
 * @return string contents of php://input
 */",
 "/**
 * Array access read implementation
 *
 * @param string $name Name of the key being accessed.
 * @return mixed
 */",
 "/**
 * Array access write implementation
 *
 * @param string $name Name of the key being written
 * @param mixed $value The value being written.
 * @return void
 */",
 "/**
 * Array access isset() implementation
 *
 * @param string $name thing to check.
 * @return boolean
 */",
 "/**
 * Array access unset() implementation
 *
 * @param string $name Name to unset.
 * @return void
 */",
 "/**
 * A class that helps wrap Request information and particulars about a single request.
 * Provides methods commonly used to introspect on the request headers and request body.
 *
 * Has both an Array and Object interface. You can access framework parameters using indexes:
 *
 * `$request[\'controller\']` or `$request->controller`.
 *
 * @package       Cake.Network
 */",
 "/**
 * Sets up the configuration for the model, and loads ACL models if they haven\'t been already
 *
 * @param Model $model
 * @param array $config
 * @return void
 */",
 "/**
 * Retrieves the Aro/Aco node for this model
 *
 * @param Model $model
 * @param string|array|Model $ref Array with \'model\' and \'foreign_key\', model object, or string value
 * @param string $type Only needed when Acl is set up as \'both\', specify \'Aro\' or \'Aco\' to get the correct node
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/acl.html#node
 */",
 "/**
 * Creates a new ARO/ACO node bound to this record
 *
 * @param Model $model
 * @param boolean $created True if this is a new record
 * @return void
 */",
 "/**
 * Destroys the ARO/ACO node bound to the deleted record
 *
 * @param Model $model
 * @return void
 */",
 "/**
 * ACL behavior
 *
 * Enables objects to easily tie into an ACL system
 *
 * @package       Cake.Model.Behavior
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/acl.html
 */",
 "/**
 * Short description for file.
 *
 * @package       Cake.Test.Fixture
 * @since         CakePHP(tm) v 1.2.0.6879 //Correct version number as needed**
 */",
 "/**
 * Class constructor
 */",
 "/**
 * Gets the settings for $language.
 * If $language is null it attempt to get settings from L10n::_autoLanguage(); if this fails
 * the method will get the settings from L10n::_setLanguage();
 *
 * @param string $language Language (if null will use DEFAULT_LANGUAGE if defined)
 * @return mixed
 */",
 "/**
 * Sets the class vars to correct values for $language.
 * If $language is null it will use the DEFAULT_LANGUAGE if defined
 *
 * @param string $language Language (if null will use DEFAULT_LANGUAGE if defined)
 * @return mixed
 */",
 "/**
 * Attempts to find the locale settings based on the HTTP_ACCEPT_LANGUAGE variable
 *
 * @return boolean Success
 */",
 "/**
 * Attempts to find locale for language, or language for locale
 *
 * @param string|array $mixed 2/3 char string (language/locale), array of those strings, or null
 * @return string|array|boolean string language/locale, array of those values, whole map as an array,
 *    or false when language/locale doesn\'t exist
 */",
 "/**
 * Attempts to find catalog record for requested language
 *
 * @param string|array $language string requested language, array of requested languages, or null for whole catalog
 * @return array|boolean array catalog record for requested language, array of catalog records, whole catalog,
 *    or false when language doesn\'t exist
 */",
 "/**
 * Localization
 *
 * @package       Cake.I18n
 */",
 "/**
 * testDisplay method
 *
 * @return void
 */",
 "/**
 * PagesControllerTest class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testCacheDirChange method
 *
 * @return void
 */",
 "/**
 * testReadAndWriteCache method
 *
 * @return void
 */",
 "/**
 * Test read/write on the same cache key. Ensures file handles are re-wound.
 * 
 * @return void
 */",
 "/**
 * testExpiry method
 *
 * @return void
 */",
 "/**
 * testDeleteCache method
 *
 * @return void
 */",
 "/**
 * testSerialize method
 *
 * @return void
 */",
 "/**
 * testClear method
 *
 * @return void
 */",
 "/**
 * test that clear() doesn\'t wipe files not in the current engine\'s prefix.
 *
 * @return void
 */",
 "/**
 * testKeyPath method
 *
 * @return void
 */",
 "/**
 * testRemoveWindowsSlashesFromCache method
 *
 * @return void
 */",
 "/**
 * testWriteQuotedString method
 *
 * @return void
 */",
 "/**
 * check that FileEngine generates an error when a configured Path does not exist.
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
*TestingthemasksettinginFileEngine
*
*@returnvoid
*/",
 "/**
*Teststhatconfiguringgroupsforstoredkeysreturnthecorrectvalueswhenread/written
*
*@returnvoid
*/",
 "/**
*Teststhatdeleteingfromagroups-enabledconfigispossible
*
*@returnvoid
*/",
 "/**
*Testclearingacachegroup
*
*@returnvoid
**/",
 "/**
*FileEngineTestclass
*
*@packageCake.Test.Case.Cache.Engine
*/",
 "/**
 * Paints the top of the web page setting the
 * title to the name of the starting test.
 *
 * @return void
 */",
 "/**
 * Set the content-type header so it is in the correct encoding.
 *
 * @return void
 */",
 "/**
 * Paints the document start content contained in header.php
 *
 * @return void
 */",
 "/**
 * Paints the menu on the left side of the test suite interface.
 * Contains all of the various plugin, core, and app buttons.
 *
 * @return void
 */",
 "/**
 * Retrieves and paints the list of tests cases in an HTML format.
 *
 * @return void
 */",
 "/**
 * Send the headers necessary to ensure the page is
 * reloaded on every request. Otherwise you could be
 * scratching your head over out of date test data.
 *
 * @return void
 */",
 "/**
 * Paints the end of the test with a summary of
 * the passes and failures.
 *
 * @param PHPUnit_Framework_TestResult $result Result object
 * @return void
 */",
 "/**
 * Paints a code coverage report.
 *
 * @return void
 */",
 "/**
 * Renders the links that for accessing things in the test suite.
 *
 * @return void
 */",
 "/**
 * Convert an array of parameters into a query string url
 *
 * @param array $url Url hash to be converted
 * @return string Converted url query string
 */",
 "/**
 * Paints the end of the document html.
 *
 * @return void
 */",
 "/**
 * Paints the test failure with a breadcrumbs
 * trail of the nesting test suites below the
 * top level test.
 *
 * @param PHPUnit_Framework_AssertionFailedError $message Failure object displayed in
 *   the context of the other tests.
 * @return void
 */",
 "/**
 * Paints the test pass with a breadcrumbs
 * trail of the nesting test suites below the
 * top level test.
 *
 * @param PHPUnit_Framework_Test test method that just passed
 * @param float $time time spent to run the test method
 * @return void
 */",
 "/**
 * Paints a PHP exception.
 *
 * @param Exception $exception Exception to display.
 * @return void
 */",
 "/**
 * Prints the message for skipping tests.
 *
 * @param string $message Text of skip condition.
 * @param PHPUnit_Framework_TestCase $test the test method skipped
 * @return void
 */",
 "/**
 * Paints formatted text such as dumped variables.
 *
 * @param string $message Text to show.
 * @return void
 */",
 "/**
 * Character set adjusted entity conversion.
 *
 * @param string $message Plain text or Unicode message.
 * @return string Browser readable message.
 */",
 "/**
 * Gets a formatted stack trace.
 *
 * @param Exception $e Exception to get a stack trace for.
 * @return string Generated stack trace.
 */",
 "/**
 * A test suite started.
 *
 * @param  PHPUnit_Framework_TestSuite $suite
 */",
 "/**
 * CakeHtmlReporter Reports Results of TestSuites and Test Cases
 * in an HTML format / context.
 *
 * @package       Cake.TestSuite.Reporter
 */",
 "/**
 * Initialize the Cache Engine
 *
 * Called automatically by the cache frontend
 * To reinitialize the settings call Cache::engine(\'EngineName\', [optional] settings = array());
 *
 * @param array $settings array of setting for the engine
 * @return boolean True if the engine has been successfully initialized, false if not
 * @see CacheEngine::__defaults
 */",
 "/**
 * Write data for key into cache
 *
 * @param string $key Identifier for the data
 * @param mixed $value Data to be cached
 * @param integer $duration How long to cache the data, in seconds
 * @return boolean True if the data was successfully cached, false on failure
 */",
 "/**
 * Read a key from the cache
 *
 * @param string $key Identifier for the data
 * @return mixed The cached data, or false if the data doesn\'t exist, has expired, or if
 *     there was an error fetching it
 */",
 "/**
 * Increments the value of an integer cached key
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to increment
 * @return New incremented value, false otherwise
 */",
 "/**
 * Decrements the value of an integer cached key
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to subtract
 * @return New decremented value, false otherwise
 */",
 "/**
 * Delete a key from the cache
 *
 * @param string $key Identifier for the data
 * @return boolean True if the value was successfully deleted, false if it didn\'t exist or couldn\'t be removed
 */",
 "/**
 * Delete all keys from the cache.  This will clear every
 * item in the cache matching the cache config prefix.
 *
 * @param boolean $check If true, nothing will be cleared, as entries will
 *   naturally expire in wincache..
 * @return boolean True Returns true.
 */",
 "/**
 * Returns the `group value` for each of the configured groups
 * If the group initial value was not found, then it initializes
 * the group accordingly.
 *
 * @return array
 **/",
 "/**
 * Increments the group value to simulate deletion of all keys under a group
 * old values will remain in storage until they expire.
 *
 * @return boolean success
 **/",
 "/**
 * Wincache storage engine for cache
 *
 * @package       Cake.Cache.Engine
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Constructor
 *
 */",
 "/**
 * Retrieves the Aro/Aco node for this model
 *
 * @param string|array|Model $ref Array with \'model\' and \'foreign_key\', model object, or string value
 * @return array Node found in database
 * @throws CakeException when binding to a model that doesn\'t exist.
 */",
 "/**
 * ACL Node
 *
 * @package       Cake.Model
 */",
 "/**
 * Initializes configure and runs the bootstrap process.
 * Bootstrapping includes the following steps:
 *
 * - Setup App array in Configure.
 * - Include app/Config/core.php.
 * - Configure core cache configurations.
 * - Load App cache files.
 * - Include app/Config/bootstrap.php.
 * - Setup error/exception handlers.
 *
 * @param boolean $boot
 * @return void
 */",
 "/**
 * Used to store a dynamic variable in Configure.
 *
 * Usage:
 * {{{
 * Configure::write(\'One.key1\', \'value of the Configure::One[key1]\');
 * Configure::write(array(\'One.key1\' => \'value of the Configure::One[key1]\'));
 * Configure::write(\'One\', array(
 *     \'key1\' => \'value of the Configure::One[key1]\',
 *     \'key2\' => \'value of the Configure::One[key2]\'
 * );
 *
 * Configure::write(array(
 *     \'One.key1\' => \'value of the Configure::One[key1]\',
 *     \'One.key2\' => \'value of the Configure::One[key2]\'
 * ));
 * }}}
 *
 * @link http://book.cakephp.org/2.0/en/development/configuration.html#Configure::write
 * @param array $config Name of var to write
 * @param mixed $value Value to set for var
 * @return boolean True if write was successful
 */",
 "/**
 * Used to read information stored in Configure.  Its not
 * possible to store `null` values in Configure.
 *
 * Usage:
 * {{{
 * Configure::read(\'Name\'); will return all values for Name
 * Configure::read(\'Name.key\'); will return only the value of Configure::Name[key]
 * }}}
 *
 * @linkhttp://book.cakephp.org/2.0/en/development/configuration.html#Configure::read
 * @param string $var Variable to obtain.  Use \'.\' to access array elements.
 * @return mixed value stored in configure, or null.
 */",
 "/**
 * Used to delete a variable from Configure.
 *
 * Usage:
 * {{{
 * Configure::delete(\'Name\'); will delete the entire Configure::Name
 * Configure::delete(\'Name.key\'); will delete only the Configure::Name[key]
 * }}}
 *
 * @link http://book.cakephp.org/2.0/en/development/configuration.html#Configure::delete
 * @param string $var the var to be deleted
 * @return void
 */",
 "/**
 * Add a new reader to Configure.  Readers allow you to read configuration
 * files in various formats/storage locations.  CakePHP comes with two built-in readers
 * PhpReader and IniReader.  You can also implement your own reader classes in your application.
 *
 * To add a new reader to Configure:
 *
 * `Configure::config(\'ini\', new IniReader());`
 *
 * @param string $name The name of the reader being configured.  This alias is used later to
 *   read values from a specific reader.
 * @param ConfigReaderInterface $reader The reader to append.
 * @return void
 */",
 "/**
 * Gets the names of the configured reader objects.
 *
 * @param string $name
 * @return array Array of the configured reader objects.
 */",
 "/**
 * Remove a configured reader.  This will unset the reader
 * and make any future attempts to use it cause an Exception.
 *
 * @param string $name Name of the reader to drop.
 * @return boolean Success
 */",
 "/**
 * Loads stored configuration information from a resource.  You can add
 * config file resource readers with `Configure::config()`.
 *
 * Loaded configuration information will be merged with the current
 * runtime configuration. You can load configuration files from plugins
 * by preceding the filename with the plugin name.
 *
 * `Configure::load(\'Users.user\', \'default\')`
 *
 * Would load the \'user\' config file using the default config reader.  You can load
 * app config files by giving the name of the resource you want loaded.
 *
 * `Configure::load(\'setup\', \'default\');`
 *
 * If using `default` config and no reader has been configured for it yet,
 * one will be automatically created using PhpReader
 *
 * @link http://book.cakephp.org/2.0/en/development/configuration.html#Configure::load
 * @param string $key name of configuration resource to load.
 * @param string $config Name of the configured reader to use to read the resource identified by $key.
 * @param boolean $merge if config files should be merged instead of simply overridden
 * @return mixed false if file not found, void if load successful.
 * @throws ConfigureException Will throw any exceptions the reader raises.
 */",
 "/**
 * Dump data currently in Configure into $filename.  The serialization format
 * is decided by the config reader attached as $config.  For example, if the
 * \'default\' adapter is a PhpReader, the generated file will be a PHP 
 * configuration file loadable by the PhpReader.
 *
 * ## Usage
 *
 * Given that the \'default\' reader is an instance of PhpReader.
 * Save all data in Configure to the file `my_config.php`:
 *
 * `Configure::dump(\'my_config.php\', \'default\');`
 *
 * Save only the error handling configuration:
 *
 * `Configure::dump(\'error.php\', \'default\', array(\'Error\', \'Exception\');`
 *
 * @param string $key The identifier to create in the config adapter.
 *   This could be a filename or a cache key depending on the adapter being used.
 * @param string $config The name of the configured adapter to dump data with.
 * @param array $keys The name of the top-level keys you want to dump. 
 *   This allows you save only some data stored in Configure.
 * @return boolean success
 * @throws ConfigureException if the adapter does not implement a `dump` method.
 */",
 "/**
 * Used to determine the current version of CakePHP.
 *
 * Usage `Configure::version();`
 *
 * @return string Current version of CakePHP
 */",
 "/**
 * Used to write runtime configuration into Cache.  Stored runtime configuration can be
 * restored using `Configure::restore()`.  These methods can be used to enable configuration managers
 * frontends, or other GUI type interfaces for configuration.
 *
 * @param string $name The storage name for the saved configuration.
 * @param string $cacheConfig The cache configuration to save into.  Defaults to \'default\'
 * @param array $data Either an array of data to store, or leave empty to store all values.
 * @return boolean Success
 */",
 "/**
 * Restores configuration data stored in the Cache into configure.  Restored
 * values will overwrite existing ones.
 *
 * @param string $name Name of the stored config file to load.
 * @param string $cacheConfig Name of the Cache configuration to read from.
 * @return boolean Success.
 */",
 "/**
 * Clear all values stored in Configure.
 *
 * @return boolean success.
 */",
 "/**
 * Set the error and exception handlers.
 * 
 * @param array $error The Error handling configuration.
 * @param array $exception The exception handling configuration.
 * @return void
 */",
 "/**
 * Configuration class. Used for managing runtime configuration information.
 *
 * Provides features for reading and writing to the runtime configuration, as well
 * as methods for loading additional configuration files or storing runtime configuration
 * for future use.
 *
 * @package       Cake.Core
 * @link          http://book.cakephp.org/2.0/en/development/configuration.html#configure-class
 */",
 "/**
 * Build an HTTP Socket using the specified configuration.
 *
 * You can use a url string to set the url and use default configurations for
 * all other options:
 *
 * `$http = new HttpSocket(\'http://cakephp.org/\');`
 *
 * Or use an array to configure multiple options:
 *
 * {{{
 * $http = new HttpSocket(array(
 *    \'host\' => \'cakephp.org\',
 *    \'timeout\' => 20
 * ));
 * }}}
 *
 * See HttpSocket::$config for options that can be used.
 *
 * @param string|array $config Configuration information, either a string url or an array of options.
 */",
 "/**
 * Set authentication settings.
 *
 * Accepts two forms of parameters.  If all you need is a username + password, as with
 * Basic authentication you can do the following:
 *
 * {{{
 * $http->configAuth(\'Basic\', \'mark\', \'secret\');
 * }}}
 *
 * If you are using an authentication strategy that requires more inputs, like Digest authentication
 * you can call `configAuth()` with an array of user information.
 *
 * {{{
 * $http->configAuth(\'Digest\', array(
 *		\'user\' => \'mark\',
 *		\'pass\' => \'secret\',
 *		\'realm\' => \'my-realm\',
 *		\'nonce\' => 1235
 * ));
 * }}}
 *
 * To remove any set authentication strategy, call `configAuth()` with no parameters:
 *
 * `$http->configAuth();`
 *
 * @param string $method Authentication method (ie. Basic, Digest). If empty, disable authentication
 * @param string|array $user Username for authentication. Can be an array with settings to authentication class
 * @param string $pass Password for authentication
 * @return void
 */",
 "/**
 * Set proxy settings
 *
 * @param string|array $host Proxy host. Can be an array with settings to authentication class
 * @param integer $port Port. Default 3128.
 * @param string $method Proxy method (ie, Basic, Digest). If empty, disable proxy authentication
 * @param string $user Username if your proxy need authentication
 * @param string $pass Password to proxy authentication
 * @return void
 */",
 "/**
 * Set the resource to receive the request content. This resource must support fwrite.
 *
 * @param resource|boolean $resource Resource or false to disable the resource use
 * @return void
 * @throws SocketException
 */",
 "/**
 * Issue the specified request. HttpSocket::get() and HttpSocket::post() wrap this
 * method and provide a more granular interface.
 *
 * @param string|array $request Either an URI string, or an array defining host/uri
 * @return mixed false on error, HttpResponse on success
 * @throws SocketException
 */",
 "/**
 * Issues a GET request to the specified URI, query, and request.
 *
 * Using a string uri and an array of query string parameters:
 *
 * `$response = $http->get(\'http://google.com/search\', array(\'q\' => \'cakephp\', \'client\' => \'safari\'));`
 *
 * Would do a GET request to `http://google.com/search?q=cakephp&client=safari`
 *
 * You could express the same thing using a uri array and query string parameters:
 *
 * {{{
 * $response = $http->get(
 *     array(\'host\' => \'google.com\', \'path\' => \'/search\'),
 *     array(\'q\' => \'cakephp\', \'client\' => \'safari\')
 * );
 * }}}
 *
 * @param string|array $uri URI to request. Either a string uri, or a uri array, see HttpSocket::_parseUri()
 * @param array $query Querystring parameters to append to URI
 * @param array $request An indexed array with indexes such as \'method\' or uri
 * @return mixed Result of request, either false on failure or the response to the request.
 */",
 "/**
 * Issues a POST request to the specified URI, query, and request.
 *
 * `post()` can be used to post simple data arrays to a url:
 *
 * {{{
 * $response = $http->post(\'http://example.com\', array(
 *     \'username\' => \'batman\',
 *     \'password\' => \'bruce_w4yne\'
 * ));
 * }}}
 *
 * @param string|array $uri URI to request. See HttpSocket::_parseUri()
 * @param array $data Array of POST data keys and values.
 * @param array $request An indexed array with indexes such as \'method\' or uri
 * @return mixed Result of request, either false on failure or the response to the request.
 */",
 "/**
 * Issues a PUT request to the specified URI, query, and request.
 *
 * @param string|array $uri URI to request, See HttpSocket::_parseUri()
 * @param array $data Array of PUT data keys and values.
 * @param array $request An indexed array with indexes such as \'method\' or uri
 * @return mixed Result of request
 */",
 "/**
 * Issues a DELETE request to the specified URI, query, and request.
 *
 * @param string|array $uri URI to request (see {@link _parseUri()})
 * @param array $data Query to append to URI
 * @param array $request An indexed array with indexes such as \'method\' or uri
 * @return mixed Result of request
 */",
 "/**
 * Normalizes urls into a $uriTemplate. If no template is provided
 * a default one will be used. Will generate the url using the
 * current config information.
 *
 * ### Usage:
 *
 * After configuring part of the request parameters, you can use url() to generate
 * urls.
 *
 * {{{
 * $http = new HttpSocket(\'http://www.cakephp.org\');
 * $url = $http->url(\'/search?q=bar\');
 * }}}
 *
 * Would return `http://www.cakephp.org/search?q=bar`
 *
 * url() can also be used with custom templates:
 *
 * `$url = $http->url(\'http://www.cakephp/search?q=socket\', \'/%path?%query\');`
 *
 * Would return `/search?q=socket`.
 *
 * @param string|array Either a string or array of url options to create a url with.
 * @param string $uriTemplate A template string to use for url formatting.
 * @return mixed Either false on failure or a string containing the composed url.
 */",
 "/**
 * Set authentication in request
 *
 * @return void
 * @throws SocketException
 */",
 "/**
 * Set the proxy configuration and authentication
 *
 * @return void
 * @throws SocketException
 */",
 "/**
 * Parses and sets the specified URI into current request configuration.
 *
 * @param string|array $uri URI, See HttpSocket::_parseUri()
 * @return boolean If uri has merged in config
 */",
 "/**
 * Takes a $uri array and turns it into a fully qualified URL string
 *
 * @param string|array $uri Either A $uri array, or a request string. Will use $this->config if left empty.
 * @param string $uriTemplate The Uri template/format to use.
 * @return mixed A fully qualified URL formatted according to $uriTemplate, or false on failure
 */",
 "/**
 * Parses the given URI and breaks it down into pieces as an indexed array with elements
 * such as \'scheme\', \'port\', \'query\'.
 *
 * @param string|array $uri URI to parse
 * @param boolean|array $base If true use default URI config, otherwise indexed array to set \'scheme\', \'host\', \'port\', etc.
 * @return array Parsed URI
 */",
 "/**
 * This function can be thought of as a reverse to PHP5\'s http_build_query(). It takes a given query string and turns it into an array and
 * supports nesting by using the php bracket syntax. So this means you can parse queries like:
 *
 * - ?key[subKey]=value
 * - ?key[]=value1&key[]=value2
 *
 * A leading \'?\' mark in $query is optional and does not effect the outcome of this function.
 * For the complete capabilities of this implementation take a look at HttpSocketTest::testparseQuery()
 *
 * @param string|array $query A query string to parse into an array or an array to return directly \"as is\"
 * @return array The $query parsed into a possibly multi-level array. If an empty $query is
 *     given, an empty array is returned.
 */",
 "/**
 * Builds a request line according to HTTP/1.1 specs. Activate quirks mode to work outside specs.
 *
 * @param array $request Needs to contain a \'uri\' key. Should also contain a \'method\' key, otherwise defaults to GET.
 * @param string $versionToken The version token to use, defaults to HTTP/1.1
 * @return string Request line
 * @throws SocketException
 */",
 "/**
 * Builds the header.
 *
 * @param array $header Header to build
 * @param string $mode
 * @return string Header built from array
 */",
 "/**
 * Builds cookie headers for a request.
 *
 * @param array $cookies Array of cookies to send with the request.
 * @return string Cookie header string to be sent with the request.
 * @todo Refactor token escape mechanism to be configurable
 */",
 "/**
 * Escapes a given $token according to RFC 2616 (HTTP 1.1 specs)
 *
 * @param string $token Token to escape
 * @param array $chars
 * @return string Escaped token
 * @todo Test $chars parameter
 */",
 "/**
*GetsescapecharsaccordingtoRFC2616(HTTP1.1specs).
*
*@paramboolean$hextruetogetthemasHEXvalues,falseotherwise
*@paramarray$chars
*@returnarrayEscapechars
*@todoTest$charsparameter
*/",
 "/**
*ResetsthestateofthisHttpSocketinstancetoit\'sinitialstate(beforeObject::__constructgotexecuted)ordoes
*thesamethingpartiallyfortherequestandtheresponsepropertyonly.
*
*@paramboolean$fullIfsettofalseonlyHttpSocket::responseandHttpSocket::requestarereseted
*@returnbooleanTrueonsuccess
*/",
 "/**
*Cakenetworksocketconnectionclass.
*
*CorebaseclassforHTTPnetworkcommunication.HttpSocketcanbeusedasan
*ObjectOrientedreplacementforcURLinmanyplaces.
*
*@packageCake.Network.Http
*/",
 "/**
 * TestAppSchema file
 *
 * Use for testing the loading of schema files from plugins.
 *
 * PHP 5
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Config.Schema
 * @since         CakePHP(tm) v 1.3
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Application Shell
 *
 * Add your application-wide methods in the class below, your shells
 * will inherit them.
 *
 * @package       app.Console.Command
 */",
 "/**
 * Assign $this->connection to the active task if a connection param is set.
 *
 * @return void
 */",
 "/**
 * Override main() to handle action
 *
 * @return mixed
 */",
 "/**
 * Quickly bake the MVC
 *
 * @return void
 */",
 "/**
 * get the option parser.
 *
 * @return void
 */",
 "/**
 * Command-line code generation utility to automate programmer chores.
 *
 * Bake is CakePHP\'s code generation script, which can help you kickstart
 * application development by writing fully functional skeleton controllers,
 * models, and views. Going further, Bake can also write Unit Tests for you.
 *
 * @package       Cake.Console.Command
 * @link          http://book.cakephp.org/2.0/en/console-and-shells/code-generation-with-bake.html
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Returns the list of events this filter listens to.
 * Dispatcher notifies 2 different events `Dispatcher.before` and `Dispatcher.after`.
 * By default this class will attach `preDispatch` and `postDispatch` method respectively.
 *
 * Override this method at will to only listen to the events you are interested in.
 *
 * @return array
 **/",
 "/**
 * Method called before the controller is instantiated and called to ser a request.
 * If used with default priority, it will be called after the Router has parsed the
 * url and set the routing params into the request object.
 *
 * If a CakeResponse object instance is returned, it will be served at the end of the
 * event cycle, not calling any controller as a result. This will also have the effect of
 * not calling the after event in the dispatcher.
 *
 * If false is returned, the event will be stopped and no more listeners will be notified.
 * Alternatively you can call `$event->stopPropagation()` to acheive the same result.
 *
 * @param CakeEvent $event container object having the `request`, `response` and `additionalParams`
 *	keys in the data property.
 * @return CakeResponse|boolean
 **/",
 "/**
 * Method called after the controller served a request and generated a response.
 * It is posible to alter the response object at this point as it is not sent to the
 * client yet.
 *
 * If false is returned, the event will be stopped and no more listeners will be notified.
 * Alternatively you can call `$event->stopPropagation()` to acheive the same result.
 *
 * @param CakeEvent $event container object having the `request` and  `response`
 *	keys in the data property.
 * @return mixed boolean to stop the event dispatching or null to continue
 **/",
 "/**
 * This abstract class represents a filter to be applied to a dispatcher cycle. It acts as as
 * event listener with the ability to alter the request or response as needed before it is handled
 * by a controller or after the response body has already been built.
 *
 * @package Cake.Routing
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * setup the mock acl.
 *
 * @return void
 */",
 "/**
 * test failure
 *
 * @return void
 */",
 "/**
 * test isAuthorized working.
 *
 * @return void
 */",
 "/**
 * testAuthorizeSettings
 *
 * @return void
 */",
 "/**
 * test action()
 *
 * @return void
 */",
 "/**
 * Make sure that action() doesn\'t create double slashes anywhere.
 *
 * @return void
 */",
 "/**
 * test action() and plugins
 *
 * @return void
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 * @param ComponentCollection $collection A ComponentCollection this component can use to lazy load its components
 * @param array $settings Array of configuration settings.
 */",
 "/**
 * Handles automatic pagination of model records.
 *
 * @param Model|string $object Model to paginate (e.g: model instance, or \'Model\', or \'Model.InnerModel\')
 * @param string|array $scope Additional find conditions to use while paginating
 * @param array $whitelist List of allowed fields for ordering.  This allows you to prevent ordering
 *   on non-indexed, or undesirable columns.
 * @return array Model query results
 * @throws MissingModelException
 */",
 "/**
 * Get the object pagination will occur on.
 *
 * @param string|Model $object The object you are looking for.
 * @return mixed The model object to paginate on.
 */",
 "/**
 * Merges the various options that Pagination uses.
 * Pulls settings together from the following places:
 *
 * - General pagination settings
 * - Model specific settings.
 * - Request parameters
 *
 * The result of this method is the aggregate of all the option sets combined together.  You can change
 * PaginatorComponent::$whitelist to modify which options/values can be set using request parameters.
 *
 * @param string $alias Model alias being paginated, if the general settings has a key with this value
 *   that key\'s settings will be used for pagination instead of the general ones.
 * @return array Array of merged options.
 */",
 "/**
 * Get the default settings for a $model.  If there are no settings for a specific model, the general settings
 * will be used.
 *
 * @param string $alias Model name to get default settings for.
 * @return array An array of pagination defaults for a model, or the general settings.
 */",
 "/**
 * Validate that the desired sorting can be performed on the $object.  Only fields or
 * virtualFields can be sorted on.  The direction param will also be sanitized.  Lastly
 * sort + direction keys will be converted into the model friendly order key.
 *
 * You can use the whitelist parameter to control which columns/fields are available for sorting.
 * This helps prevent users from ordering large result sets on un-indexed values.
 *
 * @param Model $object The model being paginated.
 * @param array $options The pagination options being used for this request.
 * @param array $whitelist The list of columns that can be used for sorting.  If empty all keys are allowed.
 * @return array An array of options with sort + direction removed and replaced with order if possible.
 */",
 "/**
 * Check the limit parameter and ensure its within the maxLimit bounds.
 *
 * @param array $options An array of options with a limit key to be checked.
 * @return array An array of options for pagination
 */",
 "/**
 * This component is used to handle automatic model data pagination.  The primary way to use this
 * component is to call the paginate() method. There is a convenience wrapper on Controller as well.
 *
 * ### Configuring pagination
 *
 * You configure pagination using the PaginatorComponent::$settings.  This allows you to configure
 * the default pagination behavior in general or for a specific model. General settings are used when there
 * are no specific model configuration, or the model you are paginating does not have specific settings.
 *
 * {{{
 *	$this->Paginator->settings = array(
 *		\'limit\' => 20,
 *		\'maxLimit\' => 100
 *	);
 * }}}
 *
 * The above settings will be used to paginate any model.  You can configure model specific settings by
 * keying the settings with the model name.
 *
 * {{{
 *	$this->Paginator->settings = array(
 *		\'Post\' => array(
 *			\'limit\' => 20,
 *			\'maxLimit\' => 100
 *		),
 *		\'Comment\' => array( ... )
 *	);
 * }}}
 *
 * This would allow you to have different pagination settings for `Comment` and `Post` models.
 *
 * @package       Cake.Controller.Component
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/pagination.html
 */",
 "/**
 * Application helper
 *
 * Add your application-wide methods in the class below, your helpers
 * will inherit them.
 *
 * @package       app.View.Helper
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Displays a view
 *
 * @param mixed What page to display
 * @return void
 */",
 "/**
 * Static content controller
 *
 * Override this controller by placing a copy in controllers directory of an application
 *
 * @package       app.Controller
 * @link http://book.cakephp.org/2.0/en/controllers/pages-controller.html
 */",
 "/**
 * BakeCommentFixture fixture for testing bake
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * initialize
 *
 * @return void
 */",
 "/**
 * Execution method always used for tasks
 *
 * @return void
 */",
 "/**
 * Interactive interface
 *
 * @param string $plugin
 * @return void
 */",
 "/**
 * Bake the plugin, create directories and files
 *
 * @param string $plugin Name of the plugin in CamelCased format
 * @return boolean
 */",
 "/**
 * Update the app\'s bootstrap.php file.
 *
 * @return void
 */",
 "/**
 * find and change $this->path to the user selection
 *
 * @param array $pathOptions
 * @return string plugin path
 */",
 "/**
 * get the option parser for the plugin task
 *
 * @return void
 */",
 "/**
 * The Plugin Task handles creating an empty plugin, ready to be used
 *
 * @package       Cake.Console.Command.Task
 */",
 "/**
 * Test for Schema database management
 *
 * @package       Cake.Test.Case.Console.Command
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test startup method
 *
 * @return void
 */",
 "/**
 * Test View - and that it dumps the schema file to stdout
 *
 * @return void
 */",
 "/**
 * test that view() can find plugin schema files.
 *
 * @return void
 */",
 "/**
 * test dump() with sql file generation
 *
 * @return void
 */",
 "/**
 * test that dump() can find and work with plugin schema files.
 *
 * @return void
 */",
 "/**
 * test generate with snapshot generation
 *
 * @return void
 */",
 "/**
 * test generate without a snapshot.
 *
 * @return void
 */",
 "/**
 * test generate with overwriting of the schema files.
 *
 * @return void
 */",
 "/**
 * test that generate() can read plugin dirs and generate schema files for the models
 * in a plugin.
 *
 * @return void
 */",
 "/**
 * Test schema run create with no table args.
 *
 * @return void
 */",
 "/**
 * Test schema run create with no table args.
 *
 * @return void
 */",
 "/**
 * test run update with a table arg.
 *
 * @return void
 */",
 "/**
 * test that the plugin param creates the correct path in the schema object.
 *
 * @return void
 */",
 "/**
 * test that using Plugin.name with write.
 *
 * @return void
 */",
 "/**
 * SchemaShellTest class
 *
 * @package       Cake.Test.Case.Console.Command
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * test reading files
 *
 * @return void
 */",
 "/**
 * Test an exception is thrown by reading files that don\'t exist.
 *
 * @expectedException ConfigureException
 * @return void
 */",
 "/**
 * test reading an empty file.
 *
 * @expectedException RuntimeException
 * @return void
 */",
 "/**
 * test reading keys with ../ doesn\'t work
 *
 * @expectedException ConfigureException
 * @return void
 */",
 "/**
 * test reading from plugins
 *
 * @return void
 */",
 "/**
 * Test dumping data to PHP format.
 *
 * @return void
 */",
 "/**
 * Test that dump() makes files read() can read.
 *
 * @return void
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testExecute method
 *
 * @return void
 */",
 "/**
 * test exclusions
 *
 * @return void
 */",
 "/**
 * test extract can read more than one path.
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to exclude plugin paths by enabling the param option for the ExtractTask
 *
 * @return void
 */",
 "/**
 * Test that is possible to extract messages form a single plugin
 *
 * @return void
 */",
 "/**
 * Tests that the task will inspect application models and extract the validation messages from them
 *
 * @return void
 */",
 "/**
 *  Tests that the task will inspect application models and extract the validation messages from them
 *	while using a custom validation domain for the messages set on the model itself
 *
 * @return void
 */",
 "/**
 *  Test that the extract shell can obtain validation messages from models inside a specific plugin
 *
 * @return void
 */",
 "/**
 *  Test that the extract shell overwrites existing files with the overwrite parameter
 *
 * @return void
 */",
 "/**
 *  Test that the extract shell scans the core libs
 *
 * @return void
 */",
 "/**
 * ExtractTaskTest class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Copies the validationErrors variable from the View object into this instance
 *
 * @param View $View The View this helper is being attached to.
 * @param array $settings Configuration settings for the helper.
 */",
 "/**
 * Guess the location for a model based on its name and tries to create a new instance
 * or get an already created instance of the model
 *
 * @param string $model
 * @return Model model instance
 */",
 "/**
 * Inspects the model properties to extract information from them.
 * Currently it can extract information from the the fields, the primary key and required fields
 *
 * The $key parameter accepts the following list of values:
 *
 *	- key: Returns the name of the primary key for the model
 *	- fields: Returns the model schema
 *  - validates: returns the list of fields that are required
 *	- errors: returns the list of validation errors
 *
 * If the $field parameter is passed if will return the information for that sole field.
 *
 *	`$this->_introspectModel(\'Post\', \'fields\', \'title\');` will return the schema information for title column
 *
 * @param string $model name of the model to extract information from
 * @param string $key name of the special information key to obtain (key, fields, validates, errors)
 * @param string $field name of the model field to get information from
 * @return mixed information extracted for the special key and field in a model
 */",
 "/**
 * Returns if a field is required to be filled based on validation properties from the validating object.
 *
 * @param CakeValidationSet $validationRules
 * @return boolean true if field is required to be filled, false otherwise
 */",
 "/**
 * Returns false if given form field described by the current entity has no errors.
 * Otherwise it returns the validation message
 *
 * @return mixed Either false when there or no errors, or an array of error
 *    strings. An error string could be \'\'.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::tagIsInvalid
 */",
 "/**
 * Returns an HTML FORM element.
 *
 * ### Options:
 *
 * - `type` Form method defaults to POST
 * - `action`  The controller action the form submits to, (optional).
 * - `url`  The url the form submits to. Can be a string or a url array.  If you use \'url\'
 *    you should leave \'action\' undefined.
 * - `default`  Allows for the creation of Ajax forms. Set this to false to prevent the default event handler.
 *   Will create an onsubmit attribute if it doesn\'t not exist. If it does, default action suppression
 *   will be appended.
 * - `onsubmit` Used in conjunction with \'default\' to create ajax forms.
 * - `inputDefaults` set the default $options for FormHelper::input(). Any options that would
 *   be set when using FormHelper::input() can be set here.  Options set with `inputDefaults`
 *   can be overridden when calling input()
 * - `encoding` Set the accept-charset encoding for the form.  Defaults to `Configure::read(\'App.encoding\')`
 *
 * @param string $model The model object which the form is being defined for.  Should
 *   include the plugin name for plugin forms.  e.g. `ContactManager.Contact`.
 * @param array $options An array of html attributes and options.
 * @return string An formatted opening FORM tag.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#options-for-create
 */",
 "/**
 * Return a CSRF input if the _Token is present.
 * Used to secure forms in conjunction with SecurityComponent
 *
 * @return string
 */",
 "/**
 * Closes an HTML form, cleans up values set by FormHelper::create(), and writes hidden
 * input fields where appropriate.
 *
 * If $options is set a form submit button will be created. Options can be either a string or an array.
 *
 * {{{
 * array usage:
 *
 * array(\'label\' => \'save\'); value=\"save\"
 * array(\'label\' => \'save\', \'name\' => \'Whatever\'); value=\"save\" name=\"Whatever\"
 * array(\'name\' => \'Whatever\'); value=\"Submit\" name=\"Whatever\"
 * array(\'label\' => \'save\', \'name\' => \'Whatever\', \'div\' => \'good\') <div class=\"good\"> value=\"save\" name=\"Whatever\"
 * array(\'label\' => \'save\', \'name\' => \'Whatever\', \'div\' => array(\'class\' => \'good\')); <div class=\"good\"> value=\"save\" name=\"Whatever\"
 * }}}
 *
 * @param string|array $options as a string will use $options as the value of button,
 * @return string a closing FORM tag optional submit button.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#closing-the-form
 */",
 "/**
 * Generates a hidden field with a security hash based on the fields used in the form.
 *
 * @param array $fields The list of fields to use when generating the hash
 * @return string A hidden input field with a security hash
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::secure
 */",
 "/**
 * Add to or get the list of fields that are currently unlocked.
 * Unlocked fields are not included in the field hash used by SecurityComponent
 * unlocking a field once its been added to the list of secured fields will remove
 * it from the list of fields.
 *
 * @param string $name The dot separated name for the field.
 * @return mixed Either null, or the list of fields.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::unlockField
 */",
 "/**
 * Determine which fields of a form should be used for hash.
 * Populates $this->fields
 *
 * @param boolean $lock Whether this field should be part of the validation
 *     or excluded as part of the unlockedFields.
 * @param string|array $field Reference to field to be secured.  Should be dot separated to indicate nesting.
 * @param mixed $value Field value, if value should not be tampered with.
 * @return void
 */",
 "/**
 * Returns true if there is an error for the given field, otherwise false
 *
 * @param string $field This should be \"Modelname.fieldname\"
 * @return boolean If there are errors this method returns true, else false.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::isFieldError
 */",
 "/**
 * Returns a formatted error message for given FORM field, NULL if no errors.
 *
 * ### Options:
 *
 * - `escape`  bool  Whether or not to html escape the contents of the error.
 * - `wrap`  mixed  Whether or not the error message should be wrapped in a div. If a
 *   string, will be used as the HTML tag to use.
 * - `class` string  The classname for the error message
 *
 * @param string $field A field name, like \"Modelname.fieldname\"
 * @param string|array $text Error message as string or array of messages.
 * If array contains `attributes` key it will be used as options for error container
 * @param array $options Rendering options for <div /> wrapper tag
 * @return string If there are errors this method returns an error message, otherwise null.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::error
 */",
 "/**
 * Returns a formatted LABEL element for HTML FORMs. Will automatically generate
 * a for attribute if one is not provided.
 *
 * ### Options
 *
 * - `for` - Set the for attribute, if its not defined the for attribute
 *   will be generated from the $fieldName parameter using
 *   FormHelper::domId().
 *
 * Examples:
 *
 * The text and for attribute are generated off of the fieldname
 *
 * {{{
 * echo $this->Form->label(\'Post.published\');
 * <label for=\"PostPublished\">Published</label>
 * }}}
 *
 * Custom text:
 *
 * {{{
 * echo $this->Form->label(\'Post.published\', \'Publish\');
 * <label for=\"PostPublished\">Publish</label>
 * }}}
 *
 * Custom class name:
 *
 * {{{
 * echo $this->Form->label(\'Post.published\', \'Publish\', \'required\');
 * <label for=\"PostPublished\" class=\"required\">Publish</label>
 * }}}
 *
 * Custom attributes:
 *
 * {{{
 * echo $this->Form->label(\'Post.published\', \'Publish\', array(
 *		\'for\' => \'post-publish\'
 * ));
 * <label for=\"post-publish\">Publish</label>
 * }}}
 *
 * @param string $fieldName This should be \"Modelname.fieldname\"
 * @param string $text Text that will appear in the label field.  If
 *   $text is left undefined the text will be inflected from the
 *   fieldName.
 * @param array|string $options An array of HTML attributes, or a string, to be used as a class name.
 * @return string The formatted LABEL element
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::label
 */",
 "/**
 * Generate a set of inputs for `$fields`.  If $fields is null the current model
 * will be used.
 *
 * In addition to controller fields output, `$fields` can be used to control legend
 * and fieldset rendering with the `fieldset` and `legend` keys.
 * `$form->inputs(array(\'legend\' => \'My legend\'));` Would generate an input set with
 * a custom legend.  You can customize individual inputs through `$fields` as well.
 *
 * {{{
 *	$form->inputs(array(
 *		\'name\' => array(\'label\' => \'custom label\')
 *	));
 * }}}
 *
 * In addition to fields control, inputs() allows you to use a few additional options.
 *
 * - `fieldset` Set to false to disable the fieldset. If a string is supplied it will be used as
 *    the classname for the fieldset element.
 * - `legend` Set to false to disable the legend for the generated input set. Or supply a string
 *	to customize the legend text.
 *
 * @param array $fields An array of fields to generate inputs for, or null.
 * @param array $blacklist a simple array of fields to not create inputs for.
 * @return string Completed form inputs.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::inputs
 */",
 "/**
 * Generates a form input element complete with label and wrapper div
 *
 * ### Options
 *
 * See each field type method for more information. Any options that are part of
 * $attributes or $options for the different **type** methods can be included in `$options` for input().i
 * Additionally, any unknown keys that are not in the list below, or part of the selected type\'s options
 * will be treated as a regular html attribute for the generated input.
 *
 * - `type` - Force the type of widget you want. e.g. `type => \'select\'`
 * - `label` - Either a string label, or an array of options for the label. See FormHelper::label()
 * - `div` - Either `false` to disable the div, or an array of options for the div.
 *	See HtmlHelper::div() for more options.
 * - `options` - for widgets that take options e.g. radio, select
 * - `error` - control the error message that is produced
 * - `empty` - String or boolean to enable empty select box options.
 * - `before` - Content to place before the label + input.
 * - `after` - Content to place after the label + input.
 * - `between` - Content to place between the label + input.
 * - `format` - format template for element order. Any element that is not in the array, will not be in the output.
 *	- Default input format order: array(\'before\', \'label\', \'between\', \'input\', \'after\', \'error\')
 *	- Default checkbox format order: array(\'before\', \'input\', \'between\', \'label\', \'after\', \'error\')
 *	- Hidden input will not be formatted
 *	- Radio buttons cannot have the order of input and label elements controlled with these settings.
 *
 * @param string $fieldName This should be \"Modelname.fieldname\"
 * @param array $options Each type of input takes different options.
 * @return string Completed form widget.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#creating-form-elements
 */",
 "/**
 * Extracts a single option from an options array.
 *
 * @param string $name The name of the option to pull out.
 * @param array $options The array of options you want to extract.
 * @param mixed $default The default option value
 * @return mixed the contents of the option or default
 */",
 "/**
 * Generate a label for an input() call.
 *
 * $options can contain a hash of id overrides.  These overrides will be
 * used instead of the generated values if present.
 *
 * @param string $fieldName
 * @param string $label
 * @param array $options Options for the label element.
 * @return string Generated label element
 * @deprecated \'NONE\' option is deprecated and will be removed in 3.0
 */",
 "/**
 * Creates a checkbox input widget.
 *
 * ### Options:
 *
 * - `value` - the value of the checkbox
 * - `checked` - boolean indicate that this checkbox is checked.
 * - `hiddenField` - boolean to indicate if you want the results of checkbox() to include
 *    a hidden input with a value of \'\'.
 * - `disabled` - create a disabled input.
 * - `default` - Set the default value for the checkbox.  This allows you to start checkboxes
 *    as checked, without having to check the POST data.  A matching POST data value, will overwrite
 *    the default value.
 *
 * @param string $fieldName Name of a field, like this \"Modelname.fieldname\"
 * @param array $options Array of HTML attributes.
 * @return string An HTML text input element.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#options-for-select-checkbox-and-radio-inputs
 */",
 "/**
 * Creates a set of radio widgets. Will create a legend and fieldset
 * by default.  Use $options to control this
 *
 * ### Attributes:
 *
 * - `separator` - define the string in between the radio buttons
 * - `between` - the string between legend and input set
 * - `legend` - control whether or not the widget set has a fieldset & legend
 * - `value` - indicate a value that is should be checked
 * - `label` - boolean to indicate whether or not labels for widgets show be displayed
 * - `hiddenField` - boolean to indicate if you want the results of radio() to include
 *    a hidden input with a value of \'\'. This is useful for creating radio sets that non-continuous
 * - `disabled` - Set to `true` or `disabled` to disable all the radio buttons.
 * - `empty` - Set to `true` to create a input with the value \'\' as the first option.  When `true`
 *   the radio label will be \'empty\'.  Set this option to a string to control the label value.
 *
 * @param string $fieldName Name of a field, like this \"Modelname.fieldname\"
 * @param array $options Radio button options array.
 * @param array $attributes Array of HTML attributes, and special attributes above.
 * @return string Completed radio widget set.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#options-for-select-checkbox-and-radio-inputs
 */",
 "/**
 * Missing method handler - implements various simple input types. Is used to create inputs
 * of various types.  e.g. `$this->Form->text();` will create `<input type=\"text\" />` while
 * `$this->Form->range();` will create `<input type=\"range\" />`
 *
 * ### Usage
 *
 * `$this->Form->search(\'User.query\', array(\'value\' => \'test\'));`
 *
 * Will make an input like:
 *
 * `<input type=\"search\" id=\"UserQuery\" name=\"data[User][query]\" value=\"test\" />`
 *
 * The first argument to an input type should always be the fieldname, in `Model.field` format.
 * The second argument should always be an array of attributes for the input.
 *
 * @param string $method Method name / input type to make.
 * @param array $params Parameters for the method call
 * @return string Formatted input method.
 * @throws CakeException When there are no params for the method call.
 */",
 "/**
 * Creates a textarea widget.
 *
 * ### Options:
 *
 * - `escape` - Whether or not the contents of the textarea should be escaped. Defaults to true.
 *
 * @param string $fieldName Name of a field, in the form \"Modelname.fieldname\"
 * @param array $options Array of HTML attributes, and special options above.
 * @return string A generated HTML text input element
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::textarea
 */",
 "/**
 * Creates a hidden input field.
 *
 * @param string $fieldName Name of a field, in the form of \"Modelname.fieldname\"
 * @param array $options Array of HTML attributes.
 * @return string A generated hidden input
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::hidden
 */",
 "/**
 * Creates file input widget.
 *
 * @param string $fieldName Name of a field, in the form \"Modelname.fieldname\"
 * @param array $options Array of HTML attributes.
 * @return string A generated file input.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::file
 */",
 "/**
 * Creates a `<button>` tag.  The type attribute defaults to `type=\"submit\"`
 * You can change it to a different value by using `$options[\'type\']`.
 *
 * ### Options:
 *
 * - `escape` - HTML entity encode the $title of the button. Defaults to false.
 *
 * @param string $title The button\'s caption. Not automatically HTML encoded
 * @param array $options Array of options and HTML attributes.
 * @return string A HTML button tag.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::button
 */",
 "/**
 * Create a `<button>` tag with a surrounding `<form>` that submits via POST.
 *
 * This method creates a `<form>` element. So do not use this method in an already opened form.
 * Instead use FormHelper::submit() or FormHelper::button() to create buttons inside opened forms.
 *
 * ### Options:
 *
 * - `data` - Array with key/value to pass in input hidden
 * - Other options is the same of button method.
 *
 * @param string $title The button\'s caption. Not automatically HTML encoded
 * @param string|array $url URL as string or array
 * @param array $options Array of options and HTML attributes.
 * @return string A HTML button tag.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::postButton
 */",
 "/**
 * Creates an HTML link, but access the url using method POST.
 * Requires javascript to be enabled in browser.
 *
 * This method creates a `<form>` element. So do not use this method inside an existing form.
 * Instead you should add a submit button using FormHelper::submit()
 *
 * ### Options:
 *
 * - `data` - Array with key/value to pass in input hidden
 * - `confirm` - Can be used instead of $confirmMessage.
 * - Other options is the same of HtmlHelper::link() method.
 * - The option `onclick` will be replaced.
 *
 * @param string $title The content to be wrapped by <a> tags.
 * @param string|array $url Cake-relative URL or array of URL parameters, or external URL (starts with http://)
 * @param array $options Array of HTML attributes.
 * @param string $confirmMessage JavaScript confirmation message.
 * @return string An `<a />` element.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::postLink
 */",
 "/**
 * Creates a submit button element.  This method will generate `<input />` elements that
 * can be used to submit, and reset forms by using $options.  image submits can be created by supplying an
 * image path for $caption.
 *
 * ### Options
 *
 * - `div` - Include a wrapping div?  Defaults to true.  Accepts sub options similar to
 *   FormHelper::input().
 * - `before` - Content to include before the input.
 * - `after` - Content to include after the input.
 * - `type` - Set to \'reset\' for reset inputs.  Defaults to \'submit\'
 * - Other attributes will be assigned to the input element.
 *
 * ### Options
 *
 * - `div` - Include a wrapping div?  Defaults to true.  Accepts sub options similar to
 *   FormHelper::input().
 * - Other attributes will be assigned to the input element.
 *
 * @param string $caption The label appearing on the button OR if string contains :// or the
 *  extension .jpg, .jpe, .jpeg, .gif, .png use an image if the extension
 *  exists, AND the first character is /, image is relative to webroot,
 *  OR if the first character is not /, image is relative to webroot/img.
 * @param array $options Array of options.  See above.
 * @return string A HTML submit button
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::submit
 */",
 "/**
 * Returns a formatted SELECT element.
 *
 * ### Attributes:
 *
 * - `showParents` - If included in the array and set to true, an additional option element
 *   will be added for the parent of each option group. You can set an option with the same name
 *   and it\'s key will be used for the value of the option.
 * - `multiple` - show a multiple select box.  If set to \'checkbox\' multiple checkboxes will be
 *   created instead.
 * - `empty` - If true, the empty select option is shown.  If a string,
 *   that string is displayed as the empty element.
 * - `escape` - If true contents of options will be HTML entity encoded. Defaults to true.
 * - `value` The selected value of the input.
 * - `class` - When using multiple = checkbox the classname to apply to the divs. Defaults to \'checkbox\'.
 *
 * ### Using options
 *
 * A simple array will create normal options:
 *
 * {{{
 * $options = array(1 => \'one\', 2 => \'two);
 * $this->Form->select(\'Model.field\', $options));
 * }}}
 *
 * While a nested options array will create optgroups with options inside them.
 * {{{
 * $options = array(
 *	1 => \'bill\',
 *	\'fred\' => array(
 *		2 => \'fred\',
 *		3 => \'fred jr.\'
 *	 )
 * );
 * $this->Form->select(\'Model.field\', $options);
 * }}}
 *
 * In the above `2 => \'fred\'` will not generate an option element.  You should enable the `showParents`
 * attribute to show the fred option.
 *
 * If you have multiple options that need to have the same value attribute, you can
 * use an array of arrays to express this:
 *
 * {{{
 * $options = array(
 *		array(\'name\' => \'United states\', \'value\' => \'USA\'),
 *		array(\'name\' => \'USA\', \'value\' => \'USA\'),
 * );
 * }}}
 *
 * @param string $fieldName Name attribute of the SELECT
 * @param array $options Array of the OPTION elements (as \'value\'=>\'Text\' pairs) to be used in the
 *	SELECT element
 * @param array $attributes The HTML attributes of the select element.
 * @return string Formatted SELECT element
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#options-for-select-checkbox-and-radio-inputs
 */",
 "/**
 * Returns a SELECT element for days.
 *
 * ### Attributes:
 *
 * - `empty` - If true, the empty select option is shown.  If a string,
 *   that string is displayed as the empty element.
 * - `value` The selected value of the input.
 *
 * @param string $fieldName Prefix name for the SELECT element
 * @param array $attributes HTML attributes for the select element
 * @return string A generated day select box.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::day
 */",
 "/**
 * Returns a SELECT element for years
 *
 * ### Attributes:
 *
 * - `empty` - If true, the empty select option is shown.  If a string,
 *   that string is displayed as the empty element.
 * - `orderYear` - Ordering of year values in select options.
 *   Possible values \'asc\', \'desc\'. Default \'desc\'
 * - `value` The selected value of the input.
 *
 * @param string $fieldName Prefix name for the SELECT element
 * @param integer $minYear First year in sequence
 * @param integer $maxYear Last year in sequence
 * @param array $attributes Attribute array for the select elements.
 * @return string Completed year select input
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::year
 */",
 "/**
 * Returns a SELECT element for months.
 *
 * ### Attributes:
 *
 * - `monthNames` - If false, 2 digit numbers will be used instead of text.
 *   If a array, the given array will be used.
 * - `empty` - If true, the empty select option is shown.  If a string,
 *   that string is displayed as the empty element.
 * - `value` The selected value of the input.
 *
 * @param string $fieldName Prefix name for the SELECT element
 * @param array $attributes Attributes for the select element
 * @return string A generated month select dropdown.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::month
 */",
 "/**
 * Returns a SELECT element for hours.
 *
 * ### Attributes:
 *
 * - `empty` - If true, the empty select option is shown.  If a string,
 *   that string is displayed as the empty element.
 * - `value` The selected value of the input.
 *
 * @param string $fieldName Prefix name for the SELECT element
 * @param boolean $format24Hours True for 24 hours format
 * @param array $attributes List of HTML attributes
 * @return string Completed hour select input
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::hour
 */",
 "/**
 * Returns a SELECT element for minutes.
 *
 * ### Attributes:
 *
 * - `empty` - If true, the empty select option is shown.  If a string,
 *   that string is displayed as the empty element.
 * - `value` The selected value of the input.
 *
 * @param string $fieldName Prefix name for the SELECT element
 * @param string $attributes Array of Attributes
 * @return string Completed minute select input.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::minute
 */",
 "/**
 * Selects values for dateTime selects.
 *
 * @param string $select Name of element field. ex. \'day\'
 * @param string $fieldName Name of fieldName being generated ex. Model.created
 * @param array $attributes Array of attributes, must contain \'empty\' key.
 * @return array Attributes array with currently selected value.
 */",
 "/**
 * Returns a SELECT element for AM or PM.
 *
 * ### Attributes:
 *
 * - `empty` - If true, the empty select option is shown.  If a string,
 *   that string is displayed as the empty element.
 * - `value` The selected value of the input.
 *
 * @param string $fieldName Prefix name for the SELECT element
 * @param string $attributes Array of Attributes
 * @return string Completed meridian select input
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::meridian
 */",
 "/**
 * Returns a set of SELECT elements for a full datetime setup: day, month and year, and then time.
 *
 * ### Attributes:
 *
 * - `monthNames` If false, 2 digit numbers will be used instead of text.
 *   If a array, the given array will be used.
 * - `minYear` The lowest year to use in the year select
 * - `maxYear` The maximum year to use in the year select
 * - `interval` The interval for the minutes select. Defaults to 1
 * - `separator` The contents of the string between select elements. Defaults to \'-\'
 * - `empty` - If true, the empty select option is shown.  If a string,
 *   that string is displayed as the empty element.
 * - `value` | `default` The default value to be used by the input.  A value in `$this->data`
 *   matching the field name will override this value.  If no default is provided `time()` will be used.
 *
 * @param string $fieldName Prefix name for the SELECT element
 * @param string $dateFormat DMY, MDY, YMD, or null to not generate date inputs.
 * @param string $timeFormat 12, 24, or null to not generate time inputs.
 * @param string $attributes array of Attributes
 * @return string Generated set of select boxes for the date and time formats chosen.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html#FormHelper::dateTime
 */",
 "/**
 * Gets the input field name for the current tag
 *
 * @param array $options
 * @param string $field
 * @param string $key
 * @return array
 */",
 "/**
 * Returns an array of formatted OPTION/OPTGROUP elements
 *
 * @param array $elements
 * @param array $parents
 * @param boolean $showParents
 * @param array $attributes
 * @return array
 */",
 "/**
 * Generates option lists for common <select /> menus
 *
 * @param string $name
 * @param array $options
 * @return array
 */",
 "/**
 * Sets field defaults and adds field to form security input hash
 *
 * ### Options
 *
 * - `secure` - boolean whether or not the field should be added to the security fields.
 *   Disabling the field using the `disabled` option, will also omit the field from being
 *   part of the hashed key.
 *
 * @param string $field Name of the field to initialize options for.
 * @param array $options Array of options to append options into.
 * @return array Array of options for the input.
 */",
 "/**
 * Set/Get inputDefaults for form elements
 *
 * @param array $defaults New default values
 * @param boolean Merge with current defaults
 * @return array inputDefaults
 */",
 "/**
 * Form helper library.
 *
 * Automatic generation of HTML FORMs from given data.
 *
 * @package       Cake.View.Helper
 * @property      HtmlHelper $Html
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/form.html
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Auxiliary method to test custom validators
 *
 * @return boolean
 **/",
 "/**
 * Auxiliary method to test custom validators
 *
 * @return boolean
 **/",
 "/**
 * Auxiliary method to test custom validators
 *
 * @return string
 **/",
 "/**
 * Test isValid method
 *
 * @return void
 */",
 "/**
 * tests that passing custom validation methods work
 *
 * @return void
 */",
 "/**
 * Test isRequired method
 *
 * @return void
 */",
 "/**
 * Test isEmptyAllowed method
 *
 * @return void
 */",
 "/**
 * CakeValidationRuleTest
 *
 * @package       Cake.Test.Case.Model.Validator
 */",
 "/**
 * Get allowed minutes of inactivity based on security level.
 *
 * @return integer Allowed inactivity in minutes
 */",
 "/**
 * Generate authorization hash.
 *
 * @return string Hash
 */",
 "/**
 * Validate authorization hash.
 *
 * @param string $authKey Authorization hash
 * @return boolean Success
 * @todo Complete implementation
 */",
 "/**
 * Create a hash from string using given method.
 * Fallback on next available method.
 *
 * @param string $string String to hash
 * @param string $type Method to use (sha1/sha256/md5)
 * @param boolean $salt If true, automatically appends the application\'s salt
 *     value to $string (Security.salt)
 * @return string Hash
 */",
 "/**
 * Sets the default hash method for the Security object.  This affects all objects using
 * Security::hash().
 *
 * @param string $hash Method to use (sha1/sha256/md5)
 * @return void
 * @see Security::hash()
 */",
 "/**
 * Encrypts/Decrypts a text using the given key.
 *
 * @param string $text Encrypted string to decrypt, normal string to encrypt
 * @param string $key Key to use
 * @return string Encrypted/Decrypted string
 */",
 "/**
 * Encrypts/Decrypts a text using the given key using rijndael method.
 *
 * @param string $text Encrypted string to decrypt, normal string to encrypt
 * @param string $key Key to use
 * @param string $operation Operation to perform, encrypt or decrypt
 * @return string Encrypted/Descrypted string
 */",
 "/**
 * Security Library contains utility methods related to security
 *
 * @package       Cake.Utility
 */",
 "/**
 * Constructor
 * @param array|string $config Array of configs, or string to load configs from email.php
 *
 */",
 "/**
 * From
 *
 * @param string|array $email
 * @param string $name
 * @return array|CakeEmail
 * @throws SocketException
 */",
 "/**
 * Sender
 *
 * @param string|array $email
 * @param string $name
 * @return array|CakeEmail
 * @throws SocketException
 */",
 "/**
 * Reply-To
 *
 * @param string|array $email
 * @param string $name
 * @return array|CakeEmail
 * @throws SocketException
 */",
 "/**
 * Read Receipt (Disposition-Notification-To header)
 *
 * @param string|array $email
 * @param string $name
 * @return array|CakeEmail
 * @throws SocketException
 */",
 "/**
 * Return Path
 *
 * @param string|array $email
 * @param string $name
 * @return array|CakeEmail
 * @throws SocketException
 */",
 "/**
 * To
 *
 * @param string|array $email Null to get, String with email, Array with email as key, name as value or email as value (without name)
 * @param string $name
 * @return array|CakeEmail
 */",
 "/**
 * Add To
 *
 * @param string|array $email String with email, Array with email as key, name as value or email as value (without name)
 * @param string $name
 * @return CakeEmail $this
 */",
 "/**
 * Cc
 *
 * @param string|array $email String with email, Array with email as key, name as value or email as value (without name)
 * @param string $name
 * @return array|CakeEmail
 */",
 "/**
 * Add Cc
 *
 * @param string|array $email String with email, Array with email as key, name as value or email as value (without name)
 * @param string $name
 * @return CakeEmail $this
 */",
 "/**
 * Bcc
 *
 * @param string|array $email String with email, Array with email as key, name as value or email as value (without name)
 * @param string $name
 * @return array|CakeEmail
 */",
 "/**
 * Add Bcc
 *
 * @param string|array $email String with email, Array with email as key, name as value or email as value (without name)
 * @param string $name
 * @return CakeEmail $this
 */",
 "/**
 * Charset setter/getter
 *
 * @param string $charset
 * @return string $this->charset
 */",
 "/**
 * HeaderCharset setter/getter
 *
 * @param string $charset
 * @return string $this->charset
 */",
 "/**
 * Set email
 *
 * @param string $varName
 * @param string|array $email
 * @param string $name
 * @return CakeEmail $this
 * @throws SocketException
 */",
 "/**
 * Set only 1 email
 *
 * @param string $varName
 * @param string|array $email
 * @param string $name
 * @param string $throwMessage
 * @return CakeEmail $this
 * @throws SocketException
 */",
 "/**
 * Add email
 *
 * @param string $varName
 * @param string|array $email
 * @param string $name
 * @return CakeEmail $this
 * @throws SocketException
 */",
 "/**
 * Get/Set Subject.
 *
 * @param string $subject
 * @return string|CakeEmail
 */",
 "/**
 * Sets headers for the message
 *
 * @param array $headers Associative array containing headers to be set.
 * @return CakeEmail $this
 * @throws SocketException
 */",
 "/**
 * Add header for the message
 *
 * @param array $headers
 * @return object $this
 * @throws SocketException
 */",
 "/**
 * Get list of headers
 *
 * ### Includes:
 *
 * - `from`
 * - `replyTo`
 * - `readReceipt`
 * - `returnPath`
 * - `to`
 * - `cc`
 * - `bcc`
 * - `subject`
 *
 * @param array $include
 * @return array
 */",
 "/**
 * Format addresses
 *
 * @param array $address
 * @return array
 */",
 "/**
 * Template and layout
 *
 * @param boolean|string $template Template name or null to not use
 * @param boolean|string $layout Layout name or null to not use
 * @return array|CakeEmail
 */",
 "/**
 * View class for render
 *
 * @param string $viewClass
 * @return string|CakeEmail
 */",
 "/**
 * Variables to be set on render
 *
 * @param array $viewVars
 * @return array|CakeEmail
 */",
 "/**
 * Theme to use when rendering
 *
 * @param string $theme
 * @return string|CakeEmail
 */",
 "/**
 * Helpers to be used in render
 *
 * @param array $helpers
 * @return array|CakeEmail
 */",
 "/**
 * Email format
 *
 * @param string $format
 * @return string|CakeEmail
 * @throws SocketException
 */",
 "/**
 * Transport name
 *
 * @param string $name
 * @return string|CakeEmail
 */",
 "/**
 * Return the transport class
 *
 * @return CakeEmail
 * @throws SocketException
 */",
 "/**
 * Message-ID
 *
 * @param boolean|string $message True to generate a new Message-ID, False to ignore (not send in email), String to set as Message-ID
 * @return boolean|string|CakeEmail
 * @throws SocketException
 */",
 "/**
 * Domain as top level (the part after @)
 *
 * @param string $domain Manually set the domain for CLI mailing
 * @return string|CakeEmail
 */",
 "/**
 * Add attachments to the email message
 *
 * Attachments can be defined in a few forms depending on how much control you need:
 *
 * Attach a single file:
 *
 * {{{
 * $email->attachments(\'path/to/file\');
 * }}}
 *
 * Attach a file with a different filename:
 *
 * {{{
 * $email->attachments(array(\'custom_name.txt\' => \'path/to/file.txt\'));
 * }}}
 *
 * Attach a file and specify additional properties:
 *
 * {{{
 * $email->attachments(array(\'custom_name.png\' => array(
 *		\'file\' => \'path/to/file\',
 *		\'mimetype\' => \'image/png\',
 *		\'contentId\' => \'abc123\'
 * ));
 * }}}
 *
 * The `contentId` key allows you to specify an inline attachment. In your email text, you
 * can use `<img src=\"cid:abc123\" />` to display the image inline.
 *
 * @param string|array $attachments String with the filename or array with filenames
 * @return array|CakeEmail Either the array of attachments when getting or $this when setting.
 * @throws SocketException
 */",
 "/**
 * Add attachments
 *
 * @param string|array $attachments String with the filename or array with filenames
 * @return CakeEmail $this
 * @throws SocketException
 */",
 "/**
 * Get generated message (used by transport classes)
 *
 * @param string $type Use MESSAGE_* constants or null to return the full message as array
 * @return string|array String if have type, array if type is null
 */",
 "/**
 * Configuration to use when send email
 *
 * @param string|array $config String with configuration name (from email.php), array with config or null to return current config
 * @return string|array|CakeEmail
 */",
 "/**
 * Send an email using the specified content, template and layout
 * 
 * @param string|array $content String with message or array with messages
 * @return array
 * @throws SocketException
 */",
 "/**
 * Static method to fast create an instance of CakeEmail
 *
 * @param string|array $to Address to send (see CakeEmail::to()). If null, will try to use \'to\' from transport config
 * @param string $subject String of subject or null to use \'subject\' from transport config
 * @param string|array $message String with message or array with variables to be used in render
 * @param string|array $transportConfig String to use config from EmailConfig or array with configs
 * @param boolean $send Send the email or just return the instance pre-configured
 * @return CakeEmail Instance of CakeEmail
 * @throws SocketException
 */",
 "/**
 * Apply the config to an instance
 *
 * @param CakeEmail $obj CakeEmail
 * @param array $config
 * @return void
 * @throws ConfigureException When configuration file cannot be found, or is missing
 *   the named config.
 */",
 "/**
 * Reset all EmailComponent internal variables to be able to send out a new email.
 *
 * @return CakeEmail $this
 */",
 "/**
 * Encode the specified string using the current charset
 *
 * @param string $text String to encode
 * @return string Encoded string
 */",
 "/**
 * Translates a string for one charset to another if the App.encoding value
 * differs and the mb_convert_encoding function exists
 *
 * @param string $text The text to be converted
 * @param string $charset the target encoding
 * @return string
 */",
 "/**
 * Wrap the message to follow the RFC 2822 - 2.1.1
 *
 * @param string $message Message to wrap
 * @return array Wrapped message
 */",
 "/**
 * Create unique boundary identifier
 *
 * @return void
 */",
 "/**
 * Attach non-embedded files by adding file contents inside boundaries.
 *
 * @param string $boundary Boundary to use. If null, will default to $this->_boundary 
 * @return array An array of lines to add to the message
 */",
 "/**
 * Read the file contents and return a base64 version of the file contents.
 *
 * @param string $file The file to read.
 * @return string File contents in base64 encoding
 */",
 "/**
 * Attach inline/embedded files to the message.
 *
 * @param string $boundary Boundary to use. If null, will default to $this->_boundary 
 * @return array An array of lines to add to the message
 */",
 "/**
 * Render the body of the email.
 *
 * @param string $content Content to render
 * @return array Email body ready to be sent
 */",
 "/**
 * Gets the text body types that are in this email message
 *
 * @return array Array of types.  Valid types are \'text\' and \'html\'
 */",
 "/**
 * Build and set all the view properties needed to render the templated emails.
 * If there is no template set, the $content will be returned in a hash
 * of the text content types for the email.
 *
 * @param string $content The content passed in from send() in most cases.
 * @return array The rendered content with html and text keys.
 */",
 "/**
 * Return the Content-Transfer Encoding value based on the set charset
 *
 * @return void
 */",
 "/**
 * Return charset value for Content-Type.
 *
 * Checks fallback/compatibility types which include workarounds
 * for legacy japanese character sets.
 *
 * @return string
 */",
 "/**
 * Cake e-mail class.
 *
 * This class is used for handling Internet Message Format based
 * based on the standard outlined in http://www.rfc-editor.org/rfc/rfc2822.txt
 *
 * @package       Cake.Network.Email
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 * @param string $name Name of the event
 * @param object $subject the object that this event applies to (usually the object that is generating the event)
 * @param mixed $data any value you wish to be transported with this event to it can be read by listeners
 *
 * ## Examples of usage:
 *
 * {{{
 *	$event = new CakeEvent(\'Order.afterBuy\', $this, array(\'buyer\' => $userData));
 *	$event = new CakeEvent(\'User.afterRegister\', $UserModel);
 * }}}
 *
 */",
 "/**
 * Dynamically returns the name and subject if accessed directly
 *
 * @param string $attribute
 * @return mixed
 */",
 "/**
 * Returns the name of this event. This is usually used as the event identifier
 *
 * @return string
 */",
 "/**
 * Returns the subject of this event
 *
 * @return string
 */",
 "/**
 * Stops the event from being used anymore
 *
 * @return void
 */",
 "/**
 * Check if the event is stopped
 *
 * @return boolean True if the event is stopped
 */",
 "/**
 * Represent the transport class of events across the system, it receives a name, and subject and an optional
 * payload. The name can be any string that uniquely identifies the event across the application, while the subject
 * represents the object that the event is applying to.
 *
 * @package Cake.Event
 */",
 "/**
 * Checks whether the response was cached and set the body accordingly.
 *
 * @param CakeEvent $event containing the request and response object
 * @return CakeResponse with cached content if found, null otherwise
 */",
 "/**
 * This filter will check wheter the response was previously cached in the file system
 * and served it back to the client if appropriate.
 *
 * @package Cake.Routing.Filter
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Pseudo constructor.
 *
 * @param string $base The base path for the Session
 * @return void
 */",
 "/**
 * Setup the Path variable
 *
 * @param string $base base path
 * @return void
 */",
 "/**
 * Set the host name
 *
 * @param string $host Hostname
 * @return void
 */",
 "/**
 * Starts the Session.
 *
 * @return boolean True if session was started
 */",
 "/**
 * Determine if Session has been started.
 *
 * @return boolean True if session has been started.
 */",
 "/**
 * Returns true if given variable is set in session.
 *
 * @param string $name Variable name to check for
 * @return boolean True if variable is there
 */",
 "/**
 * Returns the Session id
 *
 * @param string $id
 * @return string Session id
 */",
 "/**
 * Removes a variable from session.
 *
 * @param string $name Session variable to remove
 * @return boolean Success
 */",
 "/**
 * Used to write new data to _SESSION, since PHP doesn\'t like us setting the _SESSION var itself
 *
 * @param array $old Set of old variables => values
 * @param array $new New set of variable => value
 * @return void
 */",
 "/**
 * Return error description for given error number.
 *
 * @param integer $errorNumber Error to set
 * @return string Error as string
 */",
 "/**
 * Returns last occurred error as a string, if any.
 *
 * @return mixed Error description as a string, or false.
 */",
 "/**
 * Returns true if session is valid.
 *
 * @return boolean Success
 */",
 "/**
 * Tests that the user agent is valid and that the session hasn\'t \'timed out\'.
 * Since timeouts are implemented in CakeSession it checks the current self::$time
 * against the time the session is set to expire.  The User agent is only checked
 * if Session.checkAgent == true.
 *
 * @return boolean
 */",
 "/**
 * Get / Set the userAgent
 *
 * @param string $userAgent Set the userAgent
 * @return void
 */",
 "/**
 * Returns given session variable, or all of them, if no parameters given.
 *
 * @param string|array $name The name of the session variable (or a path as sent to Set.extract)
 * @return mixed The value of the session variable
 */",
 "/**
 * Returns all session variables.
 *
 * @return mixed Full $_SESSION array, or false on error.
 */",
 "/**
 * Writes value to given session variable name.
 *
 * @param string|array $name Name of variable
 * @param string $value Value to write
 * @return boolean True if the write was successful, false if the write failed
 */",
 "/**
 * Helper method to destroy invalid sessions.
 *
 * @return void
 */",
 "/**
 * Clears the session, the session id, and renew\'s the session.
 *
 * @return void
 */",
 "/**
 * Helper method to initialize a session, based on Cake core settings.
 *
 * Sessions can be configured with a few shortcut names as well as have any number of ini settings declared.
 *
 * @return void
 * @throws CakeSessionException Throws exceptions when ini_set() fails.
 */",
 "/**
 * Find the handler class and make sure it implements the correct interface.
 *
 * @param string $handler
 * @return void
 * @throws CakeSessionException
 */",
 "/**
 * Get one of the prebaked default session configurations.
 *
 * @param string $name
 * @return boolean|array
 */",
 "/**
 * Helper method to start a session
 *
 * @return boolean Success
 */",
 "/**
 * Helper method to create a new session.
 *
 * @return void
 */",
 "/**
 * Restarts this session.
 *
 * @return void
 */",
 "/**
 * Helper method to set an internal error message.
 *
 * @param integer $errorNumber Number of the error
 * @param string $errorMessage Description of the error
 * @return void
 */",
 "/**
 * Session class for Cake.
 *
 * Cake abstracts the handling of sessions. There are several convenient methods to access session information.
 * This class is the implementation of those methods. They are mostly used by the Session Component.
 *
 * @package       Cake.Model.Datasource
 */",
 "/**
 * Application model for Cake.
 *
 * Add your application-wide methods in the class below, your models
 * will inherit them.
 *
 * @package       app.Model
 */",
 "/**
 * Number Tree Test Fixture
 *
 * Generates a tree of data for use testing the tree behavior
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Execution method always used for tasks
 *
 * @return void
 */",
 "/**
 * Handles interactive baking
 *
 * @param string $type
 * @return string|boolean
 */",
 "/**
 * Completes final steps for generating data to create test case.
 *
 * @param string $type Type of object to bake test case for ie. Model, Controller
 * @param string $className the \'cake name\' for the class ie. Posts for the PostsController
 * @return string|boolean
 */",
 "/**
 * Interact with the user and get their chosen type. Can exit the script.
 *
 * @return string Users chosen type.
 */",
 "/**
 * Get the user chosen Class name for the chosen type
 *
 * @param string $objectType Type of object to list classes for i.e. Model, Controller.
 * @return string Class name the user chose.
 */",
 "/**
 * Checks whether the chosen type can find its own fixtures.
 * Currently only model, and controller are supported
 *
 * @param string $type The Type of object you are generating tests for eg. controller
 * @return boolean
 */",
 "/**
 * Check if a class with the given package is loaded or can be loaded.
 *
 * @param string $package The package of object you are generating tests for eg. controller
 * @param string $class the Classname of the class the test is being generated for.
 * @return boolean
 */",
 "/**
 * Construct an instance of the class to be tested.
 * So that fixtures can be detected
 *
 * @param string $type The Type of object you are generating tests for eg. controller
 * @param string $class the Classname of the class the test is being generated for.
 * @return object And instance of the class that is going to be tested.
 */",
 "/**
 * Gets the real class name from the cake short form. If the class name is already
 * suffixed with the type, the type will not be duplicated.
 *
 * @param string $type The Type of object you are generating tests for eg. controller
 * @param string $class the Classname of the class the test is being generated for.
 * @return string Real classname
 */",
 "/**
 * Map the types that TestTask uses to concrete types that App::uses can use.
 *
 * @param string $type The type of thing having a test generated.
 * @param string $plugin The plugin name.
 * @return string
 * @throws CakeException When invalid object types are requested.
 */",
 "/**
 * Get methods declared in the class given.
 * No parent methods will be returned
 *
 * @param string $className Name of class to look at.
 * @return array Array of method names.
 */",
 "/**
 * Generate the list of fixtures that will be required to run this test based on
 * loaded models.
 *
 * @param object $subject The object you want to generate fixtures for.
 * @return array Array of fixtures to be included in the test.
 */",
 "/**
 * Process a model recursively and pull out all the
 * model names converting them to fixture names.
 *
 * @param Model $subject A Model class to scan for associations and pull fixtures off of.
 * @return void
 */",
 "/**
 * Process all the models attached to a controller
 * and generate a fixture list.
 *
 * @param Controller $subject A controller to pull model names off of.
 * @return void
 */",
 "/**
 * Add classname to the fixture list.
 * Sets the app. or plugin.plugin_name. prefix.
 *
 * @param string $name Name of the Model class that a fixture might be required for.
 * @return void
 */",
 "/**
 * Interact with the user to get additional fixtures they want to use.
 *
 * @return array Array of fixtures the user wants to add.
 */",
 "/**
 * Is a mock class required for this type of test?
 * Controllers require a mock class.
 *
 * @param string $type The type of object tests are being generated for eg. controller.
 * @return boolean
 */",
 "/**
 * Generate a constructor code snippet for the type and classname
 *
 * @param string $type The Type of object you are generating tests for eg. controller
 * @param string $fullClassName The Classname of the class the test is being generated for.
 * @param string $plugin The plugin name.
 * @return array Constructor snippets for the thing you are building.
 */",
 "/**
 * Generate the uses() calls for a type & classname
 *
 * @param string $type The Type of object you are generating tests for eg. controller
 * @param string $realType The package name for the class.
 * @param string $className The Classname of the class the test is being generated for.
 * @return array An array containing used classes
 */",
 "/**
 * Make the filename for the test case. resolve the suffixes for controllers
 * and get the plugin path if needed.
 *
 * @param string $type The Type of object you are generating tests for eg. controller
 * @param string $className the Classname of the class the test is being generated for.
 * @return string filename the test should be created on.
 */",
 "/**
 * get the option parser.
 *
 * @return void
 */",
 "/**
 * Task class for creating and updating test files.
 *
 * @package       Cake.Console.Command.Task
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Used to read information stored path
 *
 * Usage:
 *
 * `App::path(\'Model\'); will return all paths for models`
 *
 * `App::path(\'Model/Datasource\', \'MyPlugin\'); will return the path for datasources under the \'MyPlugin\' plugin`
 *
 * @param string $type type of path
 * @param string $plugin name of plugin
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::path
 */",
 "/**
 * Get all the currently loaded paths from App. Useful for inspecting
 * or storing all paths App knows about.  For a paths to a specific package
 * use App::path()
 *
 * @return array An array of packages and their associated paths.
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::paths
 */",
 "/**
 * Sets up each package location on the file system. You can configure multiple search paths
 * for each package, those will be used to look for files one folder at a time in the specified order
 * All paths should be terminated with a Directory separator
 *
 * Usage:
 *
 * `App::build(array(Model\' => array(\'/a/full/path/to/models/\'))); will setup a new search path for the Model package`
 *
 * `App::build(array(\'Model\' => array(\'/path/to/models/\')), App::RESET); will setup the path as the only valid path for searching models`
 *
 * `App::build(array(\'View/Helper\' => array(\'/path/to/helpers/\', \'/another/path/\'))); will setup multiple search paths for helpers`
 *
 * `App::build(array(\'Service\' => array(\'%s\' . \'Service\' . DS)), App::REGISTER); will register new package \'Service\'`
 *
 * If reset is set to true, all loaded plugins will be forgotten and they will be needed to be loaded again.
 *
 * @param array $paths associative array with package names as keys and a list of directories for new search paths
 * @param boolean|string $mode App::RESET will set paths, App::APPEND with append paths, App::PREPEND will prepend paths (default)
 * 	App::REGISTER will register new packages and their paths, %s in path will be replaced by APP path
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::build
 */",
 "/**
 * Gets the path that a plugin is on. Searches through the defined plugin paths.
 *
 * Usage:
 *
 * `App::pluginPath(\'MyPlugin\'); will return the full path to \'MyPlugin\' plugin\'`
 *
 * @param string $plugin CamelCased/lower_cased plugin name to find the path of.
 * @return string full path to the plugin.
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::pluginPath
 */",
 "/**
 * Finds the path that a theme is on.  Searches through the defined theme paths.
 *
 * Usage:
 *
 * `App::themePath(\'MyTheme\'); will return the full path to the \'MyTheme\' theme`
 *
 * @param string $theme theme name to find the path of.
 * @return string full path to the theme.
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::themePath
 */",
 "/**
 * Returns the full path to a package inside the CakePHP core
 *
 * Usage:
 *
 * `App::core(\'Cache/Engine\'); will return the full path to the cache engines package`
 *
 * @param string $type
 * @return array full path to package
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::core
 */",
 "/**
 * Returns an array of objects of the given type.
 *
 * Example usage:
 *
 * `App::objects(\'plugin\');` returns `array(\'DebugKit\', \'Blog\', \'User\');`
 *
 * `App::objects(\'Controller\');` returns `array(\'PagesController\', \'BlogController\');`
 *
 * You can also search only within a plugin\'s objects by using the plugin dot
 * syntax.
 *
 * `App::objects(\'MyPlugin.Model\');` returns `array(\'MyPluginPost\', \'MyPluginComment\');`
 *
 * When scanning directories, files and directories beginning with `.` will be excluded as these
 * are commonly used by version control systems.
 *
 * @param string $type Type of object, i.e. \'Model\', \'Controller\', \'View/Helper\', \'file\', \'class\' or \'plugin\'
 * @param string|array $path Optional Scan only the path given. If null, paths for the chosen type will be used.
 * @param boolean $cache Set to false to rescan objects of the chosen type. Defaults to true.
 * @return mixed Either false on incorrect / miss.  Or an array of found objects.
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::objects
 */",
 "/**
 * Declares a package for a class. This package location will be used
 * by the automatic class loader if the class is tried to be used
 *
 * Usage:
 *
 * `App::uses(\'MyCustomController\', \'Controller\');` will setup the class to be found under Controller package
 *
 * `App::uses(\'MyHelper\', \'MyPlugin.View/Helper\');` will setup the helper class to be found in plugin\'s helper package
 *
 * @param string $className the name of the class to configure package for
 * @param string $location the package name
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::uses
 */",
 "/**
*Methodtohandletheautomaticclassloading.Itwilllookforeachclass\'package
*definedusingApp::uses()andwiththisinformationitwillresolvethepackagenametoafullpath
*toloadtheclassfrom.Filenameforeachclassshouldfollowtheclassname.Forinstance,
*ifaclassisname`MyCustomClass`thefilenameshouldbe`MyCustomClass.php`
*
*@paramstring$classNamethenameoftheclasstoload
*@returnboolean
*/",
 "/**
*Returnsthepackagenamewhereaclasswasdefinedtobelocatedat
*
*@paramstring$classNamenameoftheclasstoobtainthepackagenamefrom
*@returnstringpackagenameornullifnotdeclared
*@linkhttp://book.cakephp.org/2.0/en/core-utility-libraries/app.html#App::location
*/",
 "/**
*Findsclassesbasedon$nameorspecificfile(s)tosearch.CallingApp::import()will
*notconstructanyclassescontainedinthefiles.Itwillonlyfindandrequire()thefile.
*
*@linkhttp://book.cakephp.org/2.0/en/core-utility-libraries/app.html#including-files-with-app-import
*@paramstring|array$typeThetypeofClassifpassedasastring,orallparamscanbepassedas
*ansinglearrayto$type,
*@paramstring$nameNameoftheClassorauniquenameforthefile
*@paramboolean|array$parentbooleantrueifClassParentshouldbesearched,acceptskey=>value
*array(\'parent\'=>$parent,\'file\'=>$file,\'search\'=>$search,\'ext\'=>\'$ext\');
*$extallowssettingtheextensionofthefilename
*basedonInflector::underscore($name).\".$ext\";
 * @param array $search paths to search for files, array(\'path 1\', \'path 2\', \'path 3\');
 * @param string $file full name of the file to search for including extension
 * @param boolean $return Return the loaded file, the file must have a return
 *                         statement in it to work: return $variable;
 * @return boolean true if Class is already in memory or if file is found and loaded, false if not
 */",
 "/**
 * Helper function to include classes
 * This is a compatibility wrapper around using App::uses() and automatic class loading
 *
 * @param string $name unique name of the file for identifying it inside the application
 * @param string $plugin camel cased plugin name if any
 * @param string $type name of the packed where the class is located
 * @param string $originalType type name as supplied initially by the user
 * @param boolean $parent whether to load the class parent or not
 * @return boolean true indicating the successful load and existence of the class
 */",
 "/**
 * Helper function to include single files
 *
 * @param string $name unique name of the file for identifying it inside the application
 * @param string $plugin camel cased plugin name if any
 * @param array $search list of paths to search the file into
 * @param string $file filename if known, the $name param will be used otherwise
 * @param boolean $return whether this function should return the contents of the file after being parsed by php or just a success notice
 * @return mixed if $return contents of the file after php parses it, boolean indicating success otherwise
 */",
 "/**
 * Helper function to load files from vendors folders
 *
 * @param string $name unique name of the file for identifying it inside the application
 * @param string $plugin camel cased plugin name if any
 * @param string $file file name if known
 * @param string $ext file extension if known
 * @return boolean true if the file was loaded successfully, false otherwise
 */",
 "/**
 * Initializes the cache for App, registers a shutdown function.
 *
 * @return void
 */",
 "/**
 * Maps the $name to the $file.
 *
 * @param string $file full path to file
 * @param string $name unique name for this map
 * @param string $plugin camelized if object is from a plugin, the name of the plugin
 * @return void
 */",
 "/**
 * Returns a file\'s complete path.
 *
 * @param string $name unique name
 * @param string $plugin camelized if object is from a plugin, the name of the plugin
 * @return mixed file path if found, false otherwise
 */",
 "/**
 * Sets then returns the templates for each customizable package path
 *
 * @return array templates for each customizable package path
 */",
 "/**
 * Object destructor.
 *
 * Writes cache file if changes have been made to the $_map. Also, check if a fatal
 * error happened and call the handler.
 *
 * @return void
 */",
 "/**
 * Check if a fatal error happened and trigger the configured handler if configured
 *
 * @return void
 */",
 "/**
 * App is responsible for path management, class location and class loading.
 *
 * ### Adding paths
 *
 * You can add paths to the search indexes App uses to find classes using `App::build()`.  Adding
 * additional controller paths for example would alter where CakePHP looks for controllers.
 * This allows you to split your application up across the filesystem.
 *
 * ### Packages
 *
 * CakePHP is organized around the idea of packages, each class belongs to a package or folder where other
 * classes reside. You can configure each package location in your application using `App::build(\'APackage/SubPackage\', $paths)`
 * to inform the framework where should each class be loaded. Almost every class in the CakePHP framework can be swapped
 * by your own compatible implementation. If you wish to use you own class instead of the classes the framework provides,
 * just add the class to your libs folder mocking the directory location of where CakePHP expects to find it.
 *
 * For instance if you\'d like to use your own HttpSocket class, put it under
 *
 *		app/Network/Http/HttpSocket.php
 *
 * ### Inspecting loaded paths
 *
 * You can inspect the currently loaded paths using `App::path(\'Controller\')` for example to see loaded
 * controller paths.
 *
 * It is also possible to inspect paths for plugin classes, for instance, to see a plugin\'s helpers you would call
 * `App::path(\'View/Helper\', \'MyPlugin\')`
 *
 * ### Locating plugins and themes
 *
 * Plugins and Themes can be located with App as well.  Using App::pluginPath(\'DebugKit\') for example, will
 * give you the full path to the DebugKit plugin.  App::themePath(\'purple\'), would give the full path to the
 * `purple` theme.
 *
 * ### Inspecting known objects
 *
 * You can find out which objects App knows about using App::objects(\'Controller\') for example to find
 * which application controllers App knows about.
 *
 * @link          http://book.cakephp.org/2.0/en/core-utility-libraries/app.html
 * @package       Cake.Core
 */",
 "/**
 * execute method
 *
 * @param mixed $sql
 * @return void
 */",
 "/**
 * getLastQuery method
 *
 * @return void
 */",
 "/**
 * DboSqliteTestDb class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * Sets up a Dbo class instance for testing
 *
 */",
 "/**
 * Sets up a Dbo class instance for testing
 *
 */",
 "/**
 * Tests that SELECT queries from DboSqlite::listSources() are not cached
 *
 */",
 "/**
 * test Index introspection.
 *
 * @return void
 */",
 "/**
 * Tests that cached table descriptions are saved under the sanitized key name
 *
 */",
 "/**
 * test building columns with SQLite
 *
 * @return void
 */",
 "/**
 * test describe() and normal results.
 *
 * @return void
 */",
 "/**
 * test that describe does not corrupt UUID primary keys
 *
 * @return void
 */",
 "/**
 * Test virtualFields with functions.
 *
 * @return void
 */",
 "/**
 * Test that records can be inserted with uuid primary keys, and
 * that the primary key is not blank
 *
 * @return void
 */",
 "/**
 * Test nested transaction
 *
 * @return void
 */",
 "/**
 * DboSqliteTest class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * Test App Comment Model
 *
 *
 *
 * PHP 5
 *
 * CakePHP : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc.
 * @link          http://cakephp.org CakePHP Project
 * @package       Cake.Test.test_app.Model
 * @since         CakePHP v 1.2.0.7726
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * setup the mock acl.
 *
 * @return void
 */",
 "/**
 * test authorize() without a mapped action, ensure an error is generated.
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * test check() passing
 *
 * @return void
 */",
 "/**
 * test check() failing
 *
 * @return void
 */",
 "/**
 * test getting actionMap
 *
 * @return void
 */",
 "/**
 * test adding into mapActions
 *
 * @return void
 */",
 "/**
 * test prefix routes getting auto mapped.
 *
 * @return void
 */",
 "/**
 * Constructor
 *
 * @param array $config Array of configuration information for the Datasource.
 * @param boolean $autoConnect Whether or not the datasource should automatically connect.
 * @throws MissingConnectionException when a connection cannot be made.
 */",
 "/**
 * Reconnects to database server with optional new settings
 *
 * @param array $config An array defining the new configuration settings
 * @return boolean True on success, false on failure
 */",
 "/**
 * Disconnects from database.
 *
 * @return boolean True if the database could be disconnected, else false
 */",
 "/**
 * Get the underlying connection object.
 *
 * @return PDO
 */",
 "/**
 * Gets the version string of the database server
 *
 * @return string The database version
 */",
 "/**
 * Returns a quoted and escaped string of $data for use in an SQL statement.
 *
 * @param string $data String to be prepared for use in an SQL statement
 * @param string $column The column into which this data will be inserted
 * @return string Quoted and escaped data
 */",
 "/**
 * Returns an object to represent a database identifier in a query. Expression objects
 * are not sanitized or escaped.
 *
 * @param string $identifier A SQL expression to be used as an identifier
 * @return stdClass An object representing a database identifier to be used in a query
 */",
 "/**
 * Returns an object to represent a database expression in a query.  Expression objects
 * are not sanitized or escaped.
 *
 * @param string $expression An arbitrary SQL expression to be inserted into a query.
 * @return stdClass An object representing a database expression to be used in a query
 */",
 "/**
 * Executes given SQL statement.
 *
 * @param string $sql SQL statement
 * @param array $params Additional options for the query.
 * @return boolean
 */",
 "/**
 * Queries the database with given SQL statement, and obtains some metadata about the result
 * (rows affected, timing, any errors, number of rows in resultset). The query is also logged.
 * If Configure::read(\'debug\') is set, the log is shown all the time, else it is only shown on errors.
 *
 * ### Options
 *
 * - log - Whether or not the query should be logged to the memory log.
 *
 * @param string $sql SQL statement
 * @param array $options
 * @param array $params values to be bound to the query
 * @return mixed Resource or object representing the result set, or false on failure
 */",
 "/**
 * Executes given SQL statement.
 *
 * @param string $sql SQL statement
 * @param array $params list of params to be bound to query
 * @param array $prepareOptions Options to be used in the prepare statement
 * @return mixed PDOStatement if query executes with no problem, true as the result of a successful, false on error
 * query returning no rows, such as a CREATE statement, false otherwise
 * @throws PDOException
 */",
 "/**
 * Returns a formatted error message from previous database operation.
 *
 * @param PDOStatement $query the query to extract the error from if any
 * @return string Error message with error number
 */",
 "/**
 * Returns number of affected rows in previous database operation. If no previous operation exists,
 * this returns false.
 *
 * @param mixed $source
 * @return integer Number of affected rows
 */",
 "/**
 * Returns number of rows in previous resultset. If no previous resultset exists,
 * this returns false.
 *
 * @param mixed $source Not used
 * @return integer Number of rows in resultset
 */",
 "/**
 * DataSource Query abstraction
 *
 * @return resource Result resource identifier.
 */",
 "/**
 * Returns a row from current resultset as an array
 *
 * @param string $sql Some SQL to be executed.
 * @return array The fetched row as an array
 */",
 "/**
 * Returns an array of all result rows for a given SQL query.
 * Returns false if no rows matched.
 *
 *
 * ### Options
 *
 * - `cache` - Returns the cached version of the query, if exists and stores the result in cache.
 *   This is a non-persistent cache, and only lasts for a single request. This option
 *   defaults to true. If you are directly calling this method, you can disable caching
 *   by setting $options to `false`
 *
 * @param string $sql SQL statement
 * @param array $params parameters to be bound as values for the SQL statement
 * @param array $options additional options for the query.
 * @return array Array of resultset rows, or false if no rows matched
 */",
 "/**
 * Fetches the next row from the current result set
 *
 * @return boolean
 */",
 "/**
 * Modifies $result array to place virtual fields in model entry where they belongs to
 *
 * @param array $result Reference to the fetched row
 * @return void
 */",
 "/**
 * Returns a single field of the first of query results for a given SQL query, or false if empty.
 *
 * @param string $name Name of the field
 * @param string $sql SQL query
 * @return mixed Value of field read.
 */",
 "/**
 * Empties the method caches.
 * These caches are used by DboSource::name() and DboSource::conditions()
 *
 * @return void
 */",
 "/**
 * Cache a value into the methodCaches.  Will respect the value of DboSource::$cacheMethods.
 * Will retrieve a value from the cache if $value is null.
 *
 * If caching is disabled and a write is attempted, the $value will be returned.
 * A read will either return the value or null.
 *
 * @param string $method Name of the method being cached.
 * @param string $key The key name for the cache operation.
 * @param mixed $value The value to cache into memory.
 * @return mixed Either null on failure, or the value if its set.
 */",
 "/**
 * Returns a quoted name of $data for use in an SQL statement.
 * Strips fields out of SQL functions before quoting.
 *
 * Results of this method are stored in a memory cache.  This improves performance, but
 * because the method uses a hashing algorithm it can have collisions.
 * Setting DboSource::$cacheMethods to false will disable the memory cache.
 *
 * @param mixed $data Either a string with a column to quote. An array of columns to quote or an
 *   object from DboSource::expression() or DboSource::identifier()
 * @return string SQL field
 */",
 "/**
 * Checks if the source is connected to the database.
 *
 * @return boolean True if the database is connected, else false
 */",
 "/**
 * Checks if the result is valid
 *
 * @return boolean True if the result is valid else false
 */",
 "/**
 * Get the query log as an array.
 *
 * @param boolean $sorted Get the queries sorted by time taken, defaults to false.
 * @param boolean $clear If True the existing log will cleared.
 * @return array Array of queries run as an array
 */",
 "/**
 * Outputs the contents of the queries log. If in a non-CLI environment the sql_log element
 * will be rendered and output.  If in a CLI environment, a plain text log is generated.
 *
 * @param boolean $sorted Get the queries sorted by time taken, defaults to false.
 * @return void
 */",
 "/**
 * Log given SQL query.
 *
 * @param string $sql SQL statement
 * @param array $params Values binded to the query (prepared statements)
 * @return void
 */",
 "/**
 * Gets full table name including prefix
 *
 * @param Model|string $model Either a Model object or a string table name.
 * @param boolean $quote Whether you want the table name quoted.
 * @param boolean $schema Whether you want the schema name included.
 * @return string Full quoted table name
 */",
 "/**
 * The \"C\" in CRUD
 *
 * Creates new records in the database.
 *
 * @param Model $model Model object that the record is for.
 * @param array $fields An array of field names to insert. If null, $model->data will be
 *   used to generate field names.
 * @param array $values An array of values with keys matching the fields. If null, $model->data will
 *   be used to generate values.
 * @return boolean Success
 */",
 "/**
 * The \"R\" in CRUD
 *
 * Reads record(s) from the database.
 *
 * @param Model $model A Model object that the query is for.
 * @param array $queryData An array of queryData information containing keys similar to Model::find()
 * @param integer $recursive Number of levels of association
 * @return mixed boolean false on error/failure.  An array of results on success.
 */",
 "/**
 * Passes association results thru afterFind filters of corresponding model
 *
 * @param array $results Reference of resultset to be filtered
 * @param Model $model Instance of model to operate against
 * @param array $filtered List of classes already filtered, to be skipped
 * @return array Array of results that have been filtered through $model->afterFind
 */",
 "/**
 * Queries associations.  Used to fetch results on recursive models.
 *
 * @param Model $model Primary Model object
 * @param Model $linkModel Linked model that
 * @param string $type Association type, one of the model association types ie. hasMany
 * @param string $association
 * @param array $assocData
 * @param array $queryData
 * @param boolean $external Whether or not the association query is on an external datasource.
 * @param array $resultSet Existing results
 * @param integer $recursive Number of levels of association
 * @param array $stack
 * @return mixed
 * @throws CakeException when results cannot be created.
 */",
 "/**
 * A more efficient way to fetch associations.	Woohoo!
 *
 * @param Model $model Primary model object
 * @param string $query Association query
 * @param array $ids Array of IDs of associated records
 * @return array Association results
 */",
 "/**
 * mergeHasMany - Merge the results of hasMany relations.
 *
 *
 * @param array $resultSet Data to merge into
 * @param array $merge Data to merge
 * @param string $association Name of Model being Merged
 * @param Model $model Model being merged onto
 * @param Model $linkModel Model being merged
 * @return void
 */",
 "/**
 * Merge association of merge into data
 *
 * @param array $data
 * @param array $merge
 * @param string $association
 * @param string $type
 * @param boolean $selfJoin
 * @return void
 */",
 "/**
 * Generates an array representing a query or part of a query from a single model or two associated models
 *
 * @param Model $model
 * @param Model $linkModel
 * @param string $type
 * @param string $association
 * @param array $assocData
 * @param array $queryData
 * @param boolean $external
 * @param array $resultSet
 * @return mixed
 */",
 "/**
 * Returns a conditions array for the constraint between two models
 *
 * @param string $type Association type
 * @param Model $model Model object
 * @param string $linkModel
 * @param string $alias
 * @param array $assoc
 * @param string $alias2
 * @return array Conditions array defining the constraint between $model and $association
 */",
 "/**
 * Builds and generates a JOIN statement from an array.	 Handles final clean-up before conversion.
 *
 * @param array $join An array defining a JOIN statement in a query
 * @return string An SQL JOIN statement to be used in a query
 * @see DboSource::renderJoinStatement()
 * @see DboSource::buildStatement()
 */",
 "/**
 * Builds and generates an SQL statement from an array.	 Handles final clean-up before conversion.
 *
 * @param array $query An array defining an SQL query
 * @param Model $model The model object which initiated the query
 * @return string An executable SQL statement
 * @see DboSource::renderStatement()
 */",
 "/**
 * Renders a final SQL JOIN statement
 *
 * @param array $data
 * @return string
 */",
 "/**
 * Renders a final SQL statement by putting together the component parts in the correct order
 *
 * @param string $type type of query being run.  e.g select, create, update, delete, schema, alter.
 * @param array $data Array of data to insert into the query.
 * @return string Rendered SQL expression to be run.
 */",
 "/**
 * Merges a mixed set of string/array conditions
 *
 * @param mixed $query
 * @param mixed $assoc
 * @return array
 */",
 "/**
 * Generates and executes an SQL UPDATE statement for given model, fields, and values.
 * For databases that do not support aliases in UPDATE queries.
 *
 * @param Model $model
 * @param array $fields
 * @param array $values
 * @param mixed $conditions
 * @return boolean Success
 */",
 "/**
 * Quotes and prepares fields and values for an SQL UPDATE statement
 *
 * @param Model $model
 * @param array $fields
 * @param boolean $quoteValues If values should be quoted, or treated as SQL snippets
 * @param boolean $alias Include the model alias in the field name
 * @return array Fields and values, quoted and prepared
 */",
 "/**
 * Generates and executes an SQL DELETE statement.
 * For databases that do not support aliases in UPDATE queries.
 *
 * @param Model $model
 * @param mixed $conditions
 * @return boolean Success
 */",
 "/**
 * Gets a list of record IDs for the given conditions.	Used for multi-record updates and deletes
 * in databases that do not support aliases in UPDATE/DELETE queries.
 *
 * @param Model $model
 * @param mixed $conditions
 * @return array List of record IDs
 */",
 "/**
 * Returns an array of SQL JOIN fragments from a model\'s associations
 *
 * @param Model $model
 * @return array
 */",
 "/**
 * Returns an SQL calculation, i.e. COUNT() or MAX()
 *
 * @param Model $model
 * @param string $func Lowercase name of SQL function, i.e. \'count\' or \'max\'
 * @param array $params Function parameters (any values must be quoted manually)
 * @return string An SQL calculation function
 */",
 "/**
 * Deletes all the records in a table and resets the count of the auto-incrementing
 * primary key, where applicable.
 *
 * @param Model|string $table A string or model class representing the table to be truncated
 * @return boolean	SQL TRUNCATE TABLE statement, false if not applicable.
 */",
 "/**
 * Check if the server support nested transactions
 *
 * @return boolean
 */",
 "/**
 * Begin a transaction
 *
 * @return boolean True on success, false on fail
 * (i.e. if the database/model does not support transactions,
 * or a transaction has not started).
 */",
 "/**
 * Begin a nested transaction
 *
 * @return boolean
 */",
 "/**
 * Commit a transaction
 *
 * @return boolean True on success, false on fail
 * (i.e. if the database/model does not support transactions,
 * or a transaction has not started).
 */",
 "/**
 * Commit a nested transaction
 *
 * @return boolean
 */",
 "/**
 * Rollback a transaction
 *
 * @return boolean True on success, false on fail
 * (i.e. if the database/model does not support transactions,
 * or a transaction has not started).
 */",
 "/**
 * Rollback a nested transaction
 *
 * @return boolean
 */",
 "/**
 * Returns the ID generated from the previous INSERT operation.
 *
 * @param mixed $source
 * @return mixed
 */",
 "/**
 * Creates a default set of conditions from the model if $conditions is null/empty.
 * If conditions are supplied then they will be returned.  If a model doesn\'t exist and no conditions
 * were provided either null or false will be returned based on what was input.
 *
 * @param Model $model
 * @param string|array|boolean $conditions Array of conditions, conditions string, null or false. If an array of conditions,
 *   or string conditions those conditions will be returned.  With other values the model\'s existence will be checked.
 *   If the model doesn\'t exist a null or false will be returned depending on the input value.
 * @param boolean $useAlias Use model aliases rather than table names when generating conditions
 * @return mixed Either null, false, $conditions or an array of default conditions to use.
 * @see DboSource::update()
 * @see DboSource::conditions()
 */",
 "/**
 * Returns a key formatted like a string Model.fieldname(i.e. Post.title, or Country.name)
 *
 * @param Model $model
 * @param string $key
 * @param string $assoc
 * @return string
 */",
 "/**
 * Private helper method to remove query metadata in given data array.
 *
 * @param array $data
 * @return array
 */",
 "/**
 * Converts model virtual fields into sql expressions to be fetched later
 *
 * @param Model $model
 * @param string $alias Alias table name
 * @param array $fields virtual fields to be used on query
 * @return array
 */",
 "/**
 * Generates the fields list of an SQL query.
 *
 * @param Model $model
 * @param string $alias Alias table name
 * @param mixed $fields
 * @param boolean $quote If false, returns fields array unquoted
 * @return array
 */",
 "/**
 * Creates a WHERE clause by parsing given conditions data.  If an array or string
 * conditions are provided those conditions will be parsed and quoted.  If a boolean
 * is given it will be integer cast as condition.  Null will return 1 = 1.
 *
 * Results of this method are stored in a memory cache.  This improves performance, but
 * because the method uses a hashing algorithm it can have collisions.
 * Setting DboSource::$cacheMethods to false will disable the memory cache.
 *
 * @param mixed $conditions Array or string of conditions, or any value.
 * @param boolean $quoteValues If true, values should be quoted
 * @param boolean $where If true, \"WHERE \" will be prepended to the return value
 * @param Model $model A reference to the Model instance making the query
 * @return string SQL fragment
 */",
 "/**
 * Creates a WHERE clause by parsing given conditions array.  Used by DboSource::conditions().
 *
 * @param array $conditions Array or string of conditions
 * @param boolean $quoteValues If true, values should be quoted
 * @param Model $model A reference to the Model instance making the query
 * @return string SQL fragment
 */",
 "/**
 * Extracts a Model.field identifier and an SQL condition operator from a string, formats
 * and inserts values, and composes them into an SQL snippet.
 *
 * @param Model $model Model object initiating the query
 * @param string $key An SQL key snippet containing a field and optional SQL operator
 * @param mixed $value The value(s) to be inserted in the string
 * @return string
 */",
 "/**
 * Quotes Model.fields
 *
 * @param string $conditions
 * @return string or false if no match
 */",
 "/**
 * Auxiliary function to quote matches `Model.fields` from a preg_replace_callback call
 *
 * @param string $match matched string
 * @return string quoted string
 */",
 "/**
 * Returns a limit statement in the correct format for the particular database.
 *
 * @param integer $limit Limit of results returned
 * @param integer $offset Offset from which to start results
 * @return string SQL limit/offset statement
 */",
 "/**
 * Returns an ORDER BY clause as a string.
 *
 * @param array|string $keys Field reference, as a key (i.e. Post.title)
 * @param string $direction Direction (ASC or DESC)
 * @param Model $model model reference (used to look for virtual field)
 * @return string ORDER BY clause
 */",
 "/**
 * Create a GROUP BY SQL clause
 *
 * @param string $group Group By Condition
 * @param Model $model
 * @return string string condition or null
 */",
 "/**
 * Disconnects database, kills the connection and says the connection is closed.
 *
 * @return void
 */",
 "/**
 * Checks if the specified table contains any record matching specified SQL
 *
 * @param Model $Model Model to search
 * @param string $sql SQL WHERE clause (condition only, not the \"WHERE\" part)
 * @return boolean True if the table has a matching record, else false
 */",
 "/**
 * Gets the length of a database-native column description, or null if no length
 *
 * @param string $real Real database-layer column type (i.e. \"varchar(255)\")
 * @return mixed An integer or string representing the length of the column, or null for unknown length.
 */",
 "/**
 * Translates between PHP boolean values and Database (faked) boolean values
 *
 * @param mixed $data Value to be translated
 * @param boolean $quote
 * @return string|boolean Converted boolean value
 */",
 "/**
 * Inserts multiple values into a table
 *
 * @param string $table The table being inserted into.
 * @param array $fields The array of field/column names being inserted.
 * @param array $values The array of values to insert.  The values should
 *   be an array of rows.  Each row should have values keyed by the column name.
 *   Each row must have the values in the same order as $fields.
 * @return boolean
 */",
 "/**
 * Returns an array of the indexes in given datasource name.
 *
 * @param string $model Name of model to inspect
 * @return array Fields in table. Keys are column and unique
 */",
 "/**
 * Generate a database-native schema for the given Schema object
 *
 * @param Model $schema An instance of a subclass of CakeSchema
 * @param string $tableName Optional.  If specified only the table name given will be generated.
 *   Otherwise, all tables defined in the schema are generated.
 * @return string
 */",
 "/**
 * Generate a alter syntax from	CakeSchema::compare()
 *
 * @param mixed $compare
 * @param string $table
 * @return boolean
 */",
 "/**
 * Generate a \"drop table\" statement for the given Schema object
 *
 * @param CakeSchema $schema An instance of a subclass of CakeSchema
 * @param string $table Optional.  If specified only the table name given will be generated.
 *   Otherwise, all tables defined in the schema are generated.
 * @return string
 */",
 "/**
 * Generate a database-native column schema string
 *
 * @param array $column An array structured like the following: array(\'name\' => \'value\', \'type\' => \'value\'[, options]),
 *   where options can be \'default\', \'length\', or \'key\'.
 * @return string
 */",
 "/**
 * Build the field parameters, in a position
 *
 * @param string $columnString The partially built column string
 * @param array $columnData The array of column data.
 * @param string $position The position type to use. \'beforeDefault\' or \'afterDefault\' are common
 * @return string a built column with the field parameters added.
 */",
 "/**
 * Format indexes for create table
 *
 * @param array $indexes
 * @param string $table
 * @return array
 */",
 "/**
 * Read additional table parameters
 *
 * @param string $name
 * @return array
 */",
 "/**
 * Format parameters for create table
 *
 * @param array $parameters
 * @param string $table
 * @return array
 */",
 "/**
 * Guesses the data type of an array
 *
 * @param string $value
 * @return void
 */",
 "/**
 * Writes a new key for the in memory sql query cache
 *
 * @param string $sql SQL query
 * @param mixed $data result of $sql query
 * @param array $params query params bound as values
 * @return void
 */",
 "/**
 * Returns the result for a sql query if it is already cached
 *
 * @param string $sql SQL query
 * @param array $params query params bound as values
 * @return mixed results for query if it is cached, false otherwise
 */",
 "/**
 * Used for storing in cache the results of the in-memory methodCache
 *
 */",
 "/**
 * DboSource
 *
 * Creates DBO-descendant objects from a given db connection configuration
 *
 * @package       Cake.Model.Datasource
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Save the directory names in TMP
 *
 * @return void
 */",
 "/**
 * setUp clearstatcache() to flush file descriptors.
 *
 * @return void
 */",
 "/**
 * Restore the TMP directory to its original state.
 *
 * @return void
 */",
 "/**
 * testBasic method
 *
 * @return void
 */",
 "/**
 * testInPath method
 *
 * @return void
 */",
 "/**
 * test creation of single and multiple paths.
 *
 * @return void
 */",
 "/**
 * test that creation of folders with trailing ds works
 *
 * @return void
 */",
 "/**
*testrecursivedirectorycreatefailure.
*
*@returnvoid
*/",
 "/**
*testOperationsmethod
*
*@returnvoid
*/",
 "/**
*testChmodmethod
*
*@returnvoid
*/",
 "/**
*testRealPathForWebrootmethod
*
*@returnvoid
*/",
 "/**
*testZeroAsDirectorymethod
*
*@returnvoid
*/",
 "/**
*testAddingpathelementstoapath
*
*@returnvoid
*/",
 "/**
*testFolderReadmethod
*
*@returnvoid
*/",
 "/**
*testFolderReadWithHiddenFilesmethod
*
*@returnvoid
*/",
 "/**
*testFolderTreemethod
*
*@returnvoid
*/",
 "/**
*testFolderTreeWithHiddenFilesmethod
*
*@returnvoid
*/",
 "/**
*testWindowsPathmethod
*
*@returnvoid
*/",
 "/**
*testIsAbsolutemethod
*
*@returnvoid
*/",
 "/**
*testIsSlashTermmethod
*
*@returnvoid
*/",
 "/**
*testStaticmethod
*
*@returnvoid
*/",
 "/**
*testNormalizePathmethod
*
*@returnvoid
*/",
 "/**
*correctSlashFormethod
*
*@returnvoid
*/",
 "/**
*testInCakePathmethod
*
*@returnvoid
*/",
 "/**
*testFindmethod
*
*@returnvoid
*/",
 "/**
*testFindRecursivemethod
*
*@returnvoid
*/",
 "/**
*testConstructWithNonExistentPathmethod
*
*@returnvoid
*/",
 "/**
*testDirSizemethod
*
*@returnvoid
*/",
 "/**
*testDeletemethod
*
*@returnvoid
*/",
 "/**
*testCopymethod
*
*Verifythatdirectoriesandfilesarecopiedrecursively
*evenifthedestinationdirectoryalreadyexists.
*Subdirectoriesexistinginbothdestinationandsourcedirectory
*areskippedandnotmergedoroverwritten.
*
*@returnvoid
*/",
 "/**
*testMovemethod
*
*Verifythatdirectoriesandfilesaremovedrecursively
*evenifthedestinationdirectoryalreadyexists.
*Subdirectoriesexistinginbothdestinationandsourcedirectory
*areskippedandnotmergedoroverwritten.
*
*@returnvoid
*/",
 "/**
*FolderTestclass
*
*@packageCake.Test.Case.Utility
*/",
 "/**
 * Return a singleton instance of the ClassRegistry.
 *
 * @return ClassRegistry instance
 */",
 "/**
 * Loads a class, registers the object in the registry and returns instance of the object. ClassRegistry::init()
 * is used as a factory for models, and handle correct injecting of settings, that assist in testing.
 *
 * Examples
 * Simple Use: Get a Post model instance ```ClassRegistry::init(\'Post\');```
 *
 * Expanded: ```array(\'class\' => \'ClassName\', \'alias\' => \'AliasNameStoredInTheRegistry\', \'type\' => \'Model\');```
 *
 * Model Classes can accept optional ```array(\'id\' => $id, \'table\' => $table, \'ds\' => $ds, \'alias\' => $alias);```
 *
 * When $class is a numeric keyed array, multiple class instances will be stored in the registry,
 *  no instance of the object will be returned
 * {{{
 * array(
 *		array(\'class\' => \'ClassName\', \'alias\' => \'AliasNameStoredInTheRegistry\'),
 *		array(\'class\' => \'ClassName\', \'alias\' => \'AliasNameStoredInTheRegistry\'),
 *		array(\'class\' => \'ClassName\', \'alias\' => \'AliasNameStoredInTheRegistry\')
 * );
 * }}}
 * @param string|array $class as a string or a single key => value array instance will be created,
 *  stored in the registry and returned.
 * @param boolean $strict if set to true it will return false if the class was not found instead
 *	of trying to create an AppModel
 * @return object instance of ClassName.
 * @throws CakeException when you try to construct an interface or abstract class.
 */",
 "/**
 * Add $object to the registry, associating it with the name $key.
 *
 * @param string $key		Key for the object in registry
 * @param object $object	Object to store
 * @return boolean True if the object was written, false if $key already exists
 */",
 "/**
 * Remove object which corresponds to given key.
 *
 * @param string $key	Key of object to remove from registry
 * @return void
 */",
 "/**
 * Returns true if given key is present in the ClassRegistry.
 *
 * @param string $key Key to look for
 * @return boolean true if key exists in registry, false otherwise
 */",
 "/**
 * Get all keys from the registry.
 *
 * @return array Set of keys stored in registry
 */",
 "/**
 * Return object which corresponds to given key.
 *
 * @param string $key Key of object to look for
 * @return mixed Object stored in registry or boolean false if the object does not exist.
 */",
 "/**
 * Sets the default constructor parameter for an object type
 *
 * @param string $type Type of object.  If this parameter is omitted, defaults to \"Model\"
 * @param array $param The parameter that will be passed to object constructors when objects
 *                      of $type are created
 * @return mixed Void if $param is being set.  Otherwise, if only $type is passed, returns
 *               the previously-set value of $param, or null if not set.
 */",
 "/**
 * Checks to see if $alias is a duplicate $class Object
 *
 * @param string $alias
 * @param string $class
 * @return boolean
 */",
 "/**
 * Add a key name pair to the registry to map name to class in the registry.
 *
 * @param string $key Key to include in map
 * @param string $name Key that is being mapped
 * @return void
 */",
 "/**
 * Get all keys from the map in the registry.
 *
 * @return array Keys of registry\'s map
 */",
 "/**
 * Return the name of a class in the registry.
 *
 * @param string $key Key to find in map
 * @return string Mapped value
 */",
 "/**
 * Flushes all objects from the ClassRegistry.
 *
 * @return void
 */",
 "/**
 * Class Collections.
 *
 * A repository for class objects, each registered with a key.
 * If you try to add an object with the same key twice, nothing will come of it.
 * If you need a second instance of an object, give it another key.
 *
 * @package       Cake.Utility
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * Test the construction of a CakeRoute
 *
 * @return void
 **/",
 "/**
 * test Route compiling.
 *
 * @return void
 **/",
 "/**
 * test that route parameters that overlap don\'t cause errors.
 *
 * @return void
 */",
 "/**
 * test compiling routes with keys that have patterns
 *
 * @return void
 **/",
 "/**
 * test more complex route compiling & parsing with mid route greedy stars
 * and optional routing parameters
 *
 * @return void
 */",
 "/**
 * test that routes match their pattern.
 *
 * @return void
 **/",
 "/**
 * test that non-greedy routes fail with extra passed args
 *
 * @return void
 */",
 "/**
 * test that non-greedy routes fail with extra passed args
 *
 * @return void
 */",
 "/**
 * test that falsey values do not interrupt a match.
 *
 * @return void
 */",
 "/**
 * test match() with greedy routes, named parameters and passed args.
 *
 * @return void
 */",
 "/**
 * Ensure that named parameters are urldecoded
 *
 * @return void
 */",
 "/**
 * Ensure that keys at named parameters are urldecoded
 *
 * @return void
 */",
 "/**
 * test that named params with null/false are excluded
 *
 * @return void
 */",
 "/**
 * test that match with patterns works.
 *
 * @return void
 */",
 "/**
 * test persistParams ability to persist parameters from $params and remove params.
 *
 * @return void
 */",
 "/**
 * test the parse method of CakeRoute.
 *
 * @return void
 */",
 "/**
 * Test that :key elements are urldecoded
 *
 * @return void
 */",
 "/**
 * test numerically indexed defaults, get appended to pass
 *
 * @return void
 */",
 "/**
 * test that http header conditions can cause route failures.
 *
 * @return void
 */",
 "/**
 * test that patterns work for :action
 *
 * @return void
 */",
 "/**
 * test the parseArgs method
 *
 * @return void
 */",
 "/**
 * test that only named parameter rules are followed.
 *
 * @return void
 */",
 "/**
 * test that greedyNamed ignores rules.
 *
 * @return void
 */",
 "/**
 * Having greedNamed enabled should not capture routing.prefixes.
 *
 * @return void
 */",
 "/**
 * test that parsing array format named parameters works
 *
 * @return void
 */",
 "/**
 * Test that match can handle array named parameters
 *
 * @return void
 */",
 "/**
 * test restructuring args with pass key
 *
 * @return void
 */",
 "/**
 * Test the /** special type on parsing.
 *
 * @return void
 */",
 "/**
 * Test the /** special type on parsing - UTF8.
 *
 * @return void
 */",
 "/**
 * Test case for CakeRoute
 *
 * @package       Cake.Test.Case.Routing.Route
 **/",
 "/**
 * Constructor for PHP Config file reading.
 *
 * @param string $path The path to read config files from.  Defaults to APP . \'Config\' . DS
 */",
 "/**
 * Read a config file and return its contents.
 *
 * Files with `.` in the name will be treated as values in plugins.  Instead of reading from
 * the initialized path, plugin keys will be located using App::pluginPath().
 *
 * @param string $key The identifier to read from.  If the key has a . it will be treated
 *  as a plugin prefix.
 * @return array Parsed configuration values.
 * @throws ConfigureException when files don\'t exist or they don\'t contain `$config`.
 *  Or when files contain \'..\' as this could lead to abusive reads.
 */",
 "/**
 * Converts the provided $data into a string of PHP code that can
 * be used saved into a file and loaded later.
 *
 * @param string $filename The filename to create on $this->_path.
 * @param array $data Data to dump.
 * @return int Bytes saved.
 */",
 "/**
 * PHP Reader allows Configure to load configuration values from
 * files containing simple PHP arrays.
 *
 * Files compatible with PhpReader should define a `$config` variable, that
 * contains all of the configuration data contained in the file.
 *
 * @package       Cake.Configure
 */",
 "/**
 * Override startup of the Shell
 *
 * @return void
 */",
 "/**
 * Override main() for help message hook
 *
 * @return void
 */",
 "/**
 * Creates an ARO/ACO node
 *
 * @return void
 */",
 "/**
 * Delete an ARO/ACO node.
 *
 * @return void
 */",
 "/**
 * Set parent for an ARO/ACO node.
 *
 * @return void
 */",
 "/**
 * Get path to specified ARO/ACO node.
 *
 * @return void
 */",
 "/**
 * Outputs a single node, Either using the alias or Model.key
 *
 * @param string $class Class name that is being used.
 * @param array $node Array of node information.
 * @param integer $indent indent level.
 * @return void
 */",
 "/**
 * Check permission for a given ARO to a given ACO.
 *
 * @return void
 */",
 "/**
 * Grant permission for a given ARO to a given ACO.
 *
 * @return void
 */",
 "/**
 * Deny access for an ARO to an ACO.
 *
 * @return void
 */",
 "/**
 * Set an ARO to inherit permission to an ACO.
 *
 * @return void
 */",
 "/**
 * Show a specific ARO/ACO node.
 *
 * @return void
 */",
 "/**
 * Initialize ACL database.
 *
 * @return mixed
 */",
 "/**
 * Get the option parser.
 *
 * @return void
 */",
 "/**
 * Checks that given node exists
 *
 * @return boolean Success
 */",
 "/**
 * Parse an identifier into Model.foreignKey or an alias.
 * Takes an identifier determines its type and returns the result as used by other methods.
 *
 * @param string $identifier Identifier to parse
 * @return mixed a string for aliases, and an array for model.foreignKey
 */",
 "/**
 * Get the node for a given identifier. $identifier can either be a string alias
 * or an array of properties to use in AcoNode::node()
 *
 * @param string $class Class type you want (Aro/Aco)
 * @param string|array $identifier A mixed identifier for finding the node.
 * @return integer Integer of NodeId. Will trigger an error if nothing is found.
 */",
 "/**
 * get params for standard Acl methods
 *
 * @return array aro, aco, action
 */",
 "/**
 * Build data parameters based on node type
 *
 * @param string $type Node type  (ARO/ACO)
 * @return array Variables
 */",
 "/**
 * Shell for ACL management.  This console is known to have issues with zend.ze1_compatibility_mode
 * being enabled.  Be sure to turn it off when using this shell.
 *
 * @package       Cake.Console.Command
 */",
 "/**
 * Returns the globally available instance of a CakeEventManager
 * this is used for dispatching events attached from outside the scope
 * other managers were created. Usually for creating hook systems or inter-class
 * communication
 *
 * If called with a first params, it will be set as the globally available instance
 *
 * @param CakeEventManager $manager 
 * @return CakeEventManager the global event manager
 */",
 "/**
 * Adds a new listener to an event. Listeners 
 *
 * @param callback|CakeEventListener $callable PHP valid callback type or instance of CakeEventListener to be called
 * when the event named with $eventKey is triggered. If a CakeEventListener instances is passed, then the `implementedEvents`
 * method will be called on the object to register the declared events individually as methods to be managed by this class.
 * It is possible to define multiple event handlers per event name.
 *
 * @param string $eventKey The event unique identifier name to with the callback will be associated. If $callable
 * is an instance of CakeEventListener this argument will be ignored
 *
 * @param array $options used to set the `priority` and `passParams` flags to the listener.
 * Priorities are handled like queues, and multiple attachments into the same priority queue will be treated in
 * the order of insertion. `passParams` means that the event data property will be converted to function arguments
 * when the listener is called. If $called is an instance of CakeEventListener, this parameter will be ignored
 *
 * @return void
 * @throws InvalidArgumentException When event key is missing or callable is not an
 *   instance of CakeEventListener.
 */",
 "/**
 * Auxiliary function to attach all implemented callbacks of a CakeEventListener class instance
 * as individual methods on this manager
 *
 * @param CakeEventListener $subscriber
 * @return void
 */",
 "/**
 * Auxiliary function to extract and return a PHP callback type out of the callable definition
 * from the return value of the `implementedEvents` method on a CakeEventListener
 *
 * @param array $function the array taken from a handler definition for a event
 * @param CakeEventListener $object The handler object
 * @return callback
 */",
 "/**
 * Removes a listener from the active listeners.
 *
 * @param callback|CakeEventListener $callable any valid PHP callback type or an instance of CakeEventListener
 * @return void
 */",
 "/**
 * Auxiliary function to help detach all listeners provided by an object implementing CakeEventListener
 *
 * @param CakeEventListener $subscriber the subscriber to be detached
 * @param string $eventKey optional event key name to unsubscribe the listener from
 * @return void
 */",
 "/**
 * Dispatches a new event to all configured listeners
 *
 * @param string|CakeEvent $event the event key name or instance of CakeEvent
 * @return void
 */",
 "/**
 * Returns a list of all listeners for a eventKey in the order they should be called
 *
 * @param string $eventKey
 * @return array
 */",
 "/**
 * The event manager is responsible for keeping track of event listeners and pass the correct
 * data to them, and fire them in the correct order, when associated events are triggered. You
 * can create multiple instances of this objects to manage local events or keep a single instance
 * and pass it around to manage all events in your app.
 *
 * @package Cake.Event
 */",
 "/**
 * Authentication
 *
 * @param HttpSocket $http
 * @param array $authInfo
 * @return void
 * @see http://www.ietf.org/rfc/rfc2617.txt
 */",
 "/**
 * Proxy Authentication
 *
 * @param HttpSocket $http
 * @param array $proxyInfo
 * @return void
 * @see http://www.ietf.org/rfc/rfc2617.txt
 */",
 "/**
 * Generate basic [proxy] authentication header
 *
 * @param string $user
 * @param string $pass
 * @return string
 */",
 "/**
 * Basic authentication
 *
 * @package       Cake.Network.Http
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * _initEnvironment method
 *
 * @return void
 */",
 "/**
 * clear method
 *
 * @return void
 */",
 "/**
 * _stop method
 *
 * @return void
 */",
 "/**
 * getShell
 *
 * @param string $shell
 * @return mixed
 */",
 "/**
 * _getShell
 *
 * @param string $plugin
 * @return mixed
 */",
 "/**
 * TestShellDispatcher class
 *
 * @package       Cake.Test.Case.Console
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
*testParseParamsmethod
*
*@returnvoid
*/",
 "/**
*Verifyloadingof(plugin-)shells
*
*@returnvoid
*/",
 "/**
*VerifycorrectdispatchofShellsubclasseswithamainmethod
*
*@returnvoid
*/",
 "/**
*VerifycorrectdispatchofShellsubclasseswithoutamainmethod
*
*@returnvoid
*/",
 "/**
*Verifycorrectdispatchofcustomclasseswithamainmethod
*
*@returnvoid
*/",
 "/**
*Verifycorrectdispatchofcustomclasseswithoutamainmethod
*
*@returnvoid
*/",
 "/**
*Verifyshiftingofarguments
*
*@returnvoid
*/",
 "/**
*ShellDispatcherTest
*
*@packageCake.Test.Case.Console
*/",
 "/**
 * Test Suite TestPlugin AppModel
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Model
 * @since         CakePHP(tm) v 1.2.0.5432
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * execute method
 *
 * @param mixed $sql
 * @return void
 */",
 "/**
 * getLastQuery method
 *
 * @return void
 */",
 "/**
 * DboPostgresTestDb class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * find method
 *
 * @param mixed $conditions
 * @param mixed $fields
 * @param mixed $order
 * @param mixed $recursive
 * @return void
 */",
 "/**
 * findAll method
 *
 * @param mixed $conditions
 * @param mixed $fields
 * @param mixed $order
 * @param mixed $recursive
 * @return void
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * PostgresTestModel class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * PostgresClientTestModel class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * Sets up a Dbo class instance for testing
 *
 */",
 "/**
 * Sets up a Dbo class instance for testing
 *
 */",
 "/**
 * Test field quoting method
 *
 */",
 "/**
 * testColumnParsing method
 *
 * @return void
 */",
 "/**
 * testValueQuoting method
 *
 * @return void
 */",
 "/**
 * test that localized floats don\'t cause trouble.
 *
 * @return void
 */",
 "/**
 * test that date and time columns do not generate errors with null and nullish values.
 *
 * @return void
 */",
 "/**
 * Tests that different Postgres boolean \'flavors\' are properly returned as native PHP booleans
 *
 * @return void
 */",
 "/**
 * test that default -> false in schemas works correctly.
 *
 * @return void
 */",
 "/**
 * testLastInsertIdMultipleInsert method
 *
 * @return void
 */",
 "/**
 * Tests that column types without default lengths in $columns do not have length values
 * applied when generating schemas.
 *
 * @return void
 */",
 "/**
 * Tests that binary data is escaped/unescaped properly on reads and writes
 *
 * @return void
 */",
 "/**
 * Tests the syntax of generated schema indexes
 *
 * @return void
 */",
 "/**
 * testCakeSchema method
 *
 * Test that schema generated postgresql queries are valid. ref #5696
 * Check that the create statement for a schema generated table is the same as the original sql
 *
 * @return void
 */",
 "/**
 * Test index generation from table info.
 *
 * @return void
 */",
 "/**
 * Test the alterSchema capabilities of postgres
 *
 * @return void
 */",
 "/**
 * Test the alter index capabilities of postgres
 *
 * @return void
 */",
 "/**
 * Test it is possible to use virtual field with postgresql
 *
 * @return void
 */",
 "/**
 * Test that virtual fields work with SQL constants
 *
 * @return void
 */",
 "/**
 * Tests additional order options for postgres
 *
 * @return void
 */",
 "/**
 * Test it is possible to do a SELECT COUNT(DISTINCT Model.field)
 * query in postgres and it gets correctly quoted
 *
 * @return void
 */",
 "/**
 * test that saveAll works even with conditions that lack a model name.
 *
 * @return void
 */",
 "/**
 * test alterSchema on two tables.
 *
 * @return void
 */",
 "/**
 * test encoding setting.
 *
 * @return void
 */",
 "/**
 * Test truncate with a mock.
 *
 * @return void
 */",
 "/**
 * Test nested transaction
 *
 * @return void
 */",
 "/**
 * PostgresTest class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package       app.Controller
 * @link http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Controller.Component
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * test that model.foreign_key output works when looking at acl rows
 *
 * @return void
 */",
 "/**
 * test view with an argument
 *
 * @return void
 */",
 "/**
 * test the method that splits model.foreign key. and that it returns an array.
 *
 * @return void
 */",
 "/**
 * test creating aro/aco nodes
 *
 * @return void
 */",
 "/**
 * test the delete method with different node types.
 *
 * @return void
 */",
 "/**
 * test setParent method.
 *
 * @return void
 */",
 "/**
 * test grant
 *
 * @return void
 */",
 "/**
 * test deny
 *
 * @return void
 */",
 "/**
 * test checking allowed and denied perms
 *
 * @return void
 */",
 "/**
 * test inherit and that it 0\'s the permission fields.
 *
 * @return void
 */",
 "/**
 * test getting the path for an aro/aco
 *
 * @return void
 */",
 "/**
 * test that initdb makes the correct call.
 *
 * @return void
 */",
 "/**
 * AclShellTest class
 *
 * @package       Cake.Test.Case.Console.Command
 */",
 "/**
 * AclNodeTwoTestBase class
 *
 * @package       Cake.Test.Case.Controller.Component.Acl
 */",
 "/**
 * AroTwoTest class
 *
 * @package       Cake.Test.Case.Controller.Component.Acl
 */",
 "/**
 * AcoTwoTest class
 *
 * @package       Cake.Test.Case.Controller.Component.Acl
 */",
 "/**
 * PermissionTwoTest class
 *
 * @package       Cake.Test.Case.Controller.Component.Acl
 */",
 "/**
 * construct method
 *
 * @return void
 */",
 "/**
 * DbAclTwoTest class
 *
 * @package       Cake.Test.Case.Controller.Component.Acl
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testAclCreate method
 *
 * @return void
 */",
 "/**
 * testAclCreateWithParent method
 *
 * @return void
 */",
 "/**
 * testDbAclAllow method
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * testAllowInvalidNode method
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * testDbAclCheck method
 *
 * @return void
 */",
 "/**
 * testCheckInvalidNode method
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * testCheckInvalidPermission method
 *
 * @expectedException PHPUnit_Framework_Error_Notice
 * @return void
 */",
 "/**
 * testCheckMissingPermission method
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * testDbAclCascadingDeny function
 *
 * Setup the acl permissions such that Bobs inherits from admin.
 * deny Admin delete access to a specific resource, check the permissions are inherited.
 *
 * @return void
 */",
 "/**
 * testDbAclDeny method
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * testAclNodeLookup method
 *
 * @return void
 */",
 "/**
 * testDbInherit method
 *
 * @return void
 */",
 "/**
 * testDbGrant method
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * testDbRevoke method
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * debug function - to help editing/creating test cases for the ACL component
 *
 * To check the overall ACL status at any time call $this->__debug();
 * Generates a list of the current aro and aco structures and a grid dump of the permissions that are defined
 * Only designed to work with the db based ACL
 *
 * @param bool $treesToo
 * @return void
 */",
 "/**
 * pad function
 * Used by debug to format strings used in the data dump
 *
 * @param string $string
 * @param integer $len
 * @return void
 */",
 "/**
 * Test case for AclComponent using the DbAcl implementation.
 *
 * @package       Cake.Test.Case.Controller.Component.Acl
 */",
 "/**
 * Constructor
 *
 * @param ComponentCollection $collection A ComponentCollection for this component
 * @param array $settings Array of settings.
 */",
 "/**
 * Start CookieComponent for use in the controller
 *
 * @param Controller $controller
 * @return void
 */",
 "/**
 * Write a value to the $_COOKIE[$key];
 *
 * Optional [Name.], required key, optional $value, optional $encrypt, optional $expires
 * $this->Cookie->write(\'[Name.]key, $value);
 *
 * By default all values are encrypted.
 * You must pass $encrypt false to store values in clear test
 *
 * You must use this method before any output is sent to the browser.
 * Failure to do so will result in header already sent errors.
 *
 * @param string|array $key Key for the value
 * @param mixed $value Value
 * @param boolean $encrypt Set to true to encrypt value, false otherwise
 * @param integer|string $expires Can be either Unix timestamp, or date string
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/cookie.html#CookieComponent::write
 */",
 "/**
 * Read the value of the $_COOKIE[$key];
 *
 * Optional [Name.], required key
 * $this->Cookie->read(Name.key);
 *
 * @param string $key Key of the value to be obtained. If none specified, obtain map key => values
 * @return string or null, value for specified key
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/cookie.html#CookieComponent::read
 */",
 "/**
 * Delete a cookie value
 *
 * Optional [Name.], required key
 * $this->Cookie->read(\'Name.key);
 *
 * You must use this method before any output is sent to the browser.
 * Failure to do so will result in header already sent errors.
 *
 * @param string $key Key of the value to be deleted
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/cookie.html#CookieComponent::delete
 */",
 "/**
 * Destroy current cookie
 *
 * You must use this method before any output is sent to the browser.
 * Failure to do so will result in header already sent errors.
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/cookie.html#CookieComponent::destroy
 */",
 "/**
 * Will allow overriding default encryption method. Use this method
 * in ex: AppController::beforeFilter() before you have read or
 * written any cookies.
 *
 * @param string $type Encryption method
 * @return void
 */",
 "/**
 * Set the expire time for a session variable.
 *
 * Creates a new expire time for a session variable.
 * $expire can be either integer Unix timestamp or a date string.
 *
 * Used by write()
 * CookieComponent::write(string, string, boolean, 8400);
 * CookieComponent::write(string, string, boolean, \'5 Days\');
 *
 * @param integer|string $expires Can be either Unix timestamp, or date string
 * @return integer Unix timestamp
 */",
 "/**
 * Set cookie
 *
 * @param string $name Name for cookie
 * @param string $value Value for cookie
 * @return void
 */",
 "/**
 * Sets a cookie expire time to remove cookie value
 *
 * @param string $name Name of cookie
 * @return void
 */",
 "/**
 * Encrypts $value using public $type method in Security class
 *
 * @param string $value Value to encrypt
 * @return string encrypted string
 * @return string Encoded values
 */",
 "/**
 * Decrypts $value using public $type method in Security class
 *
 * @param array $values Values to decrypt
 * @return string decrypted string
 */",
 "/**
 * Implode method to keep keys are multidimensional arrays
 *
 * @param array $array Map of key and values
 * @return string A json encoded string.
 */",
 "/**
 * Explode method to return array from string set in CookieComponent::_implode()
 * Maintains reading backwards compatibility with 1.x CookieComponent::_implode().
 *
 * @param string $string A string containing JSON encoded data, or a bare string.
 * @return array Map of key and values
 */",
 "/**
 * Cookie Component.
 *
 * Cookie handling for the controller.
 *
 * @package       Cake.Controller.Component
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/cookie.html
 *
 */",
 "/**
 * test setting the console description
 *
 * @return void
 */",
 "/**
 * test setting the console epilog
 *
 * @return void
 */",
 "/**
 * test adding an option returns self.
 *
 * @return void
 */",
 "/**
 * test adding an option and using the long value for parsing.
 *
 * @return void
 */",
 "/**
 * test addOption with an object.
 *
 * @return void
 */",
 "/**
 * test adding an option and using the long value for parsing.
 *
 * @return void
 */",
 "/**
 * test adding an option and using the default.
 *
 * @return void
 */",
 "/**
 * test adding an option and using the short value for parsing.
 *
 * @return void
 */",
 "/**
 * Test that adding an option using a two letter short value causes an exception.
 * As they will not parse correctly.
 *
 * @expectedException ConsoleException
 * @return void
 */",
 "/**
 * test adding and using boolean options.
 *
 * @return void
 */",
 "/**
 * test adding an multiple shorts.
 *
 * @return void
 */",
 "/**
 * test multiple options at once.
 *
 * @return void
 */",
 "/**
 * Test adding multiple options.
 *
 * @return void
 */",
 "/**
 * test that boolean options work
 *
 * @return void
 */",
 "/**
 * test parsing options that do not exist.
 *
 * @expectedException ConsoleException
 */",
 "/**
 * test parsing short options that do not exist.
 *
 * @expectedException ConsoleException
 */",
 "/**
 * test that options with choices enforce them.
 *
 * @expectedException ConsoleException
 * @return void
 */",
 "/**
 * Ensure that option values can start with -
 *
 * @return void
 */",
 "/**
 * test positional argument parsing.
 *
 * @return void
 */",
 "/**
 * test addOption with an object.
 *
 * @return void
 */",
 "/**
 * test overwriting positional arguments.
 *
 * @return void
 */",
 "/**
 * test parsing arguments.
 *
 * @expectedException ConsoleException
 * @return void
 */",
 "/**
 * test parsing arguments with 0 value.
 *
 * @return void
 */",
 "/**
 * test that when there are not enough arguments an exception is raised
 *
 * @expectedException ConsoleException
 * @return void
 */",
 "/**
 * test that arguments with choices enforce them.
 *
 * @expectedException ConsoleException
 * @return void
 */",
 "/**
 * Test adding multiple arguments.
 *
 * @return void
 */",
 "/**
 * test setting a subcommand up.
 *
 * @return void
 */",
 "/**
 * test addSubcommand with an object.
 *
 * @return void
 */",
 "/**
 * test adding multiple subcommands
 *
 * @return void
 */",
 "/**
 * test that no exception is triggered when help is being generated
 *
 * @return void
 */",
 "/**
 * test that help() with a command param shows the help for a subcommand
 *
 * @return void
 */",
 "/**
 * test building a parser from an array.
 *
 * @return void
 */",
 "/**
 * test that create() returns instances
 *
 * @return void
 */",
 "/**
 * test that command() inflects the command name.
 *
 * @return void
 */",
 "/**
 * test that parse() takes a subcommand argument, and that the subcommand parser
 * is used.
 *
 * @return void
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testSettings method
 *
 * @return void
 */",
 "/**
 * testConnect method
 *
 * @return void
 */",
 "/**
 * testReadAndWriteCache method
 *
 * @return void
 */",
 "/**
 * testExpiry method
 *
 * @return void
 */",
 "/**
 * testDeleteCache method
 *
 * @return void
 */",
 "/**
 * testDecrement method
 *
 * @return void
 */",
 "/**
 * testIncrement method
 *
 * @return void
 */",
 "/**
 * test clearing redis.
 *
 * @return void
 */",
 "/**
 * test that a 0 duration can successfully write.
 *
 * @return void
 */",
 "/**
 * Tests that configuring groups for stored keys return the correct values when read/written
 * Shows that altering the group value is equivalent to deleting all keys under the same
 * group
 *
 * @return void
 */",
 "/**
 * Tests that deleteing from a groups-enabled config is possible
 *
 * @return void
 */",
 "/**
 * Test clearing a cache group
 *
 * @return void
 **/",
 "/**
 * RedisEngineTest class
 *
 * @package       Cake.Test.Case.Cache.Engine
 */",
 "/**
 * Initializes AuthComponent for use in the controller
 *
 * @param Controller $controller A reference to the instantiating controller object
 * @return void
 */",
 "/**
 * Main execution method.  Handles redirecting of invalid users, and processing
 * of login form data.
 *
 * @param Controller $controller A reference to the instantiating controller object
 * @return boolean
 */",
 "/**
 * Attempts to introspect the correct values for object properties.
 *
 * @return boolean
 */",
 "/**
 * Uses the configured Authorization adapters to check whether or not a user is authorized.
 * Each adapter will be checked in sequence, if any of them return true, then the user will
 * be authorized for the request.
 *
 * @param array $user The user to check the authorization of. If empty the user in the session will be used.
 * @param CakeRequest $request The request to authenticate for.  If empty, the current request will be used.
 * @return boolean True if $user is authorized, otherwise false
 */",
 "/**
 * Loads the authorization objects configured.
 *
 * @return mixed Either null when authorize is empty, or the loaded authorization objects.
 * @throws CakeException
 */",
 "/**
 * Takes a list of actions in the current controller for which authentication is not required, or
 * no parameters to allow all actions.
 *
 * You can use allow with either an array, or var args.
 *
 * `$this->Auth->allow(array(\'edit\', \'add\'));` or
 * `$this->Auth->allow(\'edit\', \'add\');` or
 * `$this->Auth->allow();` to allow all actions
 *
 * @param string|array $action,... Controller action name or array of actions
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html#making-actions-public
 */",
 "/**
 * Removes items from the list of allowed/no authentication required actions.
 *
 * You can use deny with either an array, or var args.
 *
 * `$this->Auth->deny(array(\'edit\', \'add\'));` or
 * `$this->Auth->deny(\'edit\', \'add\');` or
 * `$this->Auth->deny();` to remove all items from the allowed list
 *
 * @param string|array $action,... Controller action name or array of actions
 * @return void
 * @see AuthComponent::allow()
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html#making-actions-require-authorization
 */",
 "/**
 * Maps action names to CRUD operations. Used for controller-based authentication.  Make sure
 * to configure the authorize property before calling this method. As it delegates $map to all the
 * attached authorize objects.
 *
 * @param array $map Actions to map
 * @return void
 * @see BaseAuthorize::mapActions()
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html#mapping-actions-when-using-crudauthorize
 */",
 "/**
 * Log a user in. If a $user is provided that data will be stored as the logged in user.  If `$user` is empty or not
 * specified, the request will be used to identify a user. If the identification was successful,
 * the user record is written to the session key specified in AuthComponent::$sessionKey. Logging in
 * will also change the session id in order to help mitigate session replays.
 *
 * @param array $user Either an array of user data, or null to identify a user using the current request.
 * @return boolean True on login success, false on failure
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html#identifying-users-and-logging-them-in
 */",
 "/**
 * Logs a user out, and returns the login action to redirect to.
 * Triggers the logout() method of all the authenticate objects, so they can perform
 * custom logout logic.  AuthComponent will remove the session data, so
 * there is no need to do that in an authentication object.  Logging out
 * will also renew the session id.  This helps mitigate issues with session replays.
 *
 * @return string AuthComponent::$logoutRedirect
 * @see AuthComponent::$logoutRedirect
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html#logging-users-out
 */",
 "/**
 * Get the current user.
 *
 * Will prefer the static user cache over sessions.  The static user
 * cache is primarily used for stateless authentication.  For stateful authentication,
 * cookies + sessions will be used.
 *
 * @param string $key field to retrieve.  Leave null to get entire User record
 * @return mixed User record. or null if no user is logged in.
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html#accessing-the-logged-in-user
 */",
 "/**
 * Similar to AuthComponent::user() except if the session user cannot be found, connected authentication
 * objects will have their getUser() methods called.  This lets stateless authentication methods function correctly.
 *
 * @return boolean true if a user can be found, false if one cannot.
 */",
 "/**
 * If no parameter is passed, gets the authentication redirect URL.  Pass a url in to
 * set the destination a user should be redirected to upon logging in.  Will fallback to
 * AuthComponent::$loginRedirect if there is no stored redirect value.
 *
 * @param string|array $url Optional URL to write as the login redirect URL.
 * @return string Redirect URL
 */",
 "/**
 * Use the configured authentication adapters, and attempt to identify the user
 * by credentials contained in $request.
 *
 * @param CakeRequest $request The request that contains authentication data.
 * @param CakeResponse $response The response
 * @return array User record data, or false, if the user could not be identified.
 */",
 "/**
 * loads the configured authentication objects.
 *
 * @return mixed either null on empty authenticate value, or an array of loaded objects.
 * @throws CakeException
 */",
 "/**
 * Hash a password with the application\'s salt value (as defined with Configure::write(\'Security.salt\');
 *
 * This method is intended as a convenience wrapper for Security::hash().  If you want to use
 * a hashing/encryption system not supported by that method, do not use this method.
 *
 * @param string $password Password to hash
 * @return string Hashed password
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html#hashing-passwords
 */",
 "/**
 * Component shutdown.  If user is logged in, wipe out redirect.
 *
 * @param Controller $controller Instantiating controller
 * @return void
 */",
 "/**
 * Check whether or not the current user has data in the session, and is considered logged in.
 *
 * @return boolean true if the user is logged in, false otherwise
 */",
 "/**
 * Set a flash message.  Uses the Session component, and values from AuthComponent::$flash.
 *
 * @param string $message The message to set.
 * @return void
 */",
 "/**
 * Authentication control component class
 *
 * Binds access control with user authentication and session management.
 *
 * @package       Cake.Controller.Component
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/authentication.html
 */",
 "/**
 * Constructor
 *
 * @param string $message If no message is given \'Bad Request\' will be the message
 * @param string $code Status code, defaults to 400
 */",
 "/**
 * Represents an HTTP 400 error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Constructor
 *
 * @param string $message If no message is given \'Unauthorized\' will be the message
 * @param string $code Status code, defaults to 401
 */",
 "/**
 * Represents an HTTP 401 error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Constructor
 *
 * @param string $message If no message is given \'Forbidden\' will be the message
 * @param string $code Status code, defaults to 403
 */",
 "/**
 * Represents an HTTP 403 error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Constructor
 *
 * @param string $message If no message is given \'Not Found\' will be the message
 * @param string $code Status code, defaults to 404
 */",
 "/**
 * Represents an HTTP 404 error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Constructor
 *
 * @param string $message If no message is given \'Method Not Allowed\' will be the message
 * @param string $code Status code, defaults to 405
 */",
 "/**
 * Represents an HTTP 405 error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Constructor
 *
 * @param string $message If no message is given \'Internal Server Error\' will be the message
 * @param string $code Status code, defaults to 500
 */",
 "/**
 * Represents an HTTP 500 error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Constructor.
 *
 * Allows you to create exceptions that are treated as framework errors and disabled
 * when debug = 0.
 *
 * @param string|array $message Either the string of the error message, or an array of attributes
 *   that are made available in the view, and sprintf()\'d into CakeException::$_messageTemplate
 * @param string $code The code of the error, is also the HTTP status code for the error.
 */",
 "/**
 * Get the passed in attributes
 *
 * @return array
 */",
 "/**
 * CakeException is used a base class for CakePHP\'s internal exceptions.
 * In general framework errors are interpreted as 500 code errors.
 *
 * @package       Cake.Error
 */",
 "/**
 * Missing Controller exception - used when a controller
 * cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Missing Action exception - used when a controller action
 * cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Private Action exception - used when a controller action
 * starts with a  `_`.
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a component cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a behavior cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a view file cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a layout file cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a helper cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Runtime Exceptions for ConnectionManager
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when no connections can be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a Task cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a shell method cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a shell cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class to be thrown when a datasource configuration is not found
 *
 * @package       Cake.Error
 */",
 "/**
 * Used when a datasource cannot be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class to be thrown when a database table is not found in the datasource
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception raised when a Model could not be found.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception raised when a test loader could not be found
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception raised when a plugin could not be found
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception raised when a Dispatcher filter could not be found
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for AclComponent and Interface implementations.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for Cache.  This exception will be thrown from Cache when it
 * encounters an error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for Router.  This exception will be thrown from Router when it
 * encounters an error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for CakeLog.  This exception will be thrown from CakeLog when it
 * encounters an error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for CakeSession.  This exception will be thrown from CakeSession when it
 * encounters an error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for Configure.  This exception will be thrown from Configure when it
 * encounters an error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for Socket. This exception will be thrown from CakeSocket, CakeEmail, HttpSocket
 * SmtpTransport, MailTransport and HttpResponse when it encounters an error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for Xml.  This exception will be thrown from Xml when it
 * encounters an error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Exception class for Console libraries.  This exception will be thrown from Console library
 * classes when they encounter an error.
 *
 * @package       Cake.Error
 */",
 "/**
 * Constructor
 *
 * @param string $message
 * @param integer $code
 * @param string $file
 * @param integer $line
 */",
 "/**
 * Represents a fatal error
 *
 * @package       Cake.Error
 */",
 "/**
 * Not Implemented Exception - used when an API method is not implemented
 *
 * @package       Cake.Error
 */",
 "/**
 * beforeFilter method
 *
 * @return void
 */",
 "/**
 * CookieComponentTestController class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * start
 *
 * @return void
 */",
 "/**
 * end
 *
 * @return void
 */",
 "/**
 * sets up some default cookie data.
 *
 * @return void
 */",
 "/**
 * test that initialize sets settings from components array
 *
 * @return void
 */",
 "/**
 * testCookieName
 *
 * @return void
 */",
 "/**
 * testReadEncryptedCookieData
 *
 * @return void
 */",
 "/**
 * testReadPlainCookieData
 *
 * @return void
 */",
 "/**
 * test read() after switching the cookie name.
 *
 * @return void
 */",
 "/**
 * test a simple write()
 *
 * @return void
 */",
 "/**
 * test write with httpOnly cookies
 *
 * @return void
 */",
 "/**
 * test delete with httpOnly
 *
 * @return void
 */",
 "/**
 * testWritePlainCookieArray
 *
 * @return void
 */",
 "/**
 * test writing values that are not scalars
 *
 * @return void
 */",
 "/**
 * testReadingCookieValue
 *
 * @return void
 */",
 "/**
 * testDeleteCookieValue
 *
 * @return void
 */",
 "/**
 * testReadingCookieArray
 *
 * @return void
 */",
 "/**
 * testReadingCookieDataOnStartup
 *
 * @return void
 */",
 "/**
 * testReadingCookieDataWithoutStartup
 *
 * @return void
 */",
 "/**
 * Test Reading legacy cookie values.
 *
 * @return void
 */",
 "/**
 * Test reading empty values.
 */",
 "/**
 * test that no error is issued for non array data.
 *
 * @return void
 */",
 "/**
 * test that deleting a top level keys kills the child elements too.
 *
 * @return void
 */",
 "/**
 * Test deleting recursively with keys that don\'t exist.
 *
 * @return void
 */",
 "/**
 * Helper method for generating old style encoded cookie values.
 *
 * @return string.
 */",
 "/**
 * Implode method to keep keys are multidimensional arrays
 *
 * @param array $array Map of key and values
 * @return string String in the form key1|value1,key2|value2
 */",
 "/**
 * encrypt method
 *
 * @param array|string $value
 * @return string
 */",
 "/**
 * CookieComponentTest class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * Helper function to wrap repetitive simple method templating.
 *
 * @param string $method The method name being generated.
 * @param string $template The method template
 * @param array $options Array of options for method
 * @param array $extraSafeKeys Extra safe keys
 * @return string Composed method string
 */",
 "/**
 * Create javascript selector for a CSS rule
 *
 * @param string $selector The selector that is targeted
 * @return JqueryEngineHelper instance of $this. Allows chained methods.
 */",
 "/**
 * Add an event to the script cache. Operates on the currently selected elements.
 *
 * ### Options
 *
 * - \'wrap\' - Whether you want the callback wrapped in an anonymous function. (defaults true)
 * - \'stop\' - Whether you want the event to stopped. (defaults true)
 *
 * @param string $type Type of event to bind to the current dom id
 * @param string $callback The Javascript function you wish to trigger or the function literal
 * @param array $options Options for the event.
 * @return string completed event handler
 */",
 "/**
 * Create a domReady event. For jQuery. This method does not
 * bind a \'traditional event\' as `$(document).bind(\'ready\', fn)`
 * Works in an entirely different fashion than  `$(document).ready()`
 * The first will not run the function when eval()\'d as part of a response
 * The second will.  Because of the way that ajax pagination is done
 * `$().ready()` is used.
 *
 * @param string $functionBody The code to run on domReady
 * @return string completed domReady method
 */",
 "/**
 * Create an iteration over the current selection result.
 *
 * @param string $callback The function body you wish to apply during the iteration.
 * @return string completed iteration
 */",
 "/**
 * Trigger an Effect.
 *
 * @param string $name The name of the effect to trigger.
 * @param array $options Array of options for the effect.
 * @return string completed string with effect.
 * @see JsBaseEngineHelper::effect()
 */",
 "/**
 * Create an $.ajax() call.
 *
 * If the \'update\' key is set, success callback will be overridden.
 *
 * @param string|array $url
 * @param array $options See JsHelper::request() for options.
 * @return string The completed ajax call.
 * @see JsBaseEngineHelper::request() for options list.
 */",
 "/**
 * Create a sortable element.
 *
 * Requires both Ui.Core and Ui.Sortables to be loaded.
 *
 * @param array $options Array of options for the sortable.
 * @return string Completed sortable script.
 * @see JsBaseEngineHelper::sortable() for options list.
 */",
 "/**
 * Create a Draggable element
 *
 * Requires both Ui.Core and Ui.Draggable to be loaded.
 *
 * @param array $options Array of options for the draggable element.
 * @return string Completed Draggable script.
 * @see JsBaseEngineHelper::drag() for options list.
 */",
 "/**
 * Create a Droppable element
 *
 * Requires both Ui.Core and Ui.Droppable to be loaded.
 *
 * @param array $options Array of options for the droppable element.
 * @return string Completed Droppable script.
 * @see JsBaseEngineHelper::drop() for options list.
 */",
 "/**
 * Create a Slider element
 *
 * Requires both Ui.Core and Ui.Slider to be loaded.
 *
 * @param array $options Array of options for the droppable element.
 * @return string Completed Slider script.
 * @see JsBaseEngineHelper::slider() for options list.
 */",
 "/**
 * Serialize a form attached to $selector. If the current selection is not an input or
 * form, errors will be created in the Javascript.
 *
 * @param array $options Options for the serialization
 * @return string completed form serialization script.
 * @see JsBaseEngineHelper::serializeForm() for option list.
 */",
 "/**
 * jQuery Engine Helper for JsHelper
 *
 * Provides jQuery specific Javascript for JsHelper.
 *
 * Implements the JsHelper interface for jQuery.  All $options arrays
 * support all options found in the JsHelper, as well as those in the jQuery
 * documentation.
 *
 * @package       Cake.View.Helper
 */",
 "/**
 * Test get()
 *
 * return void
 */",
 "/**
 * Test dimensions.
 *
 * @return void
 */",
 "/**
 * Test maxDimensions
 *
 * @return void
 */",
 "/**
 * Tests Hash::flatten
 *
 * @return void
 */",
 "/**
 * Test diff();
 *
 * @return void
 */",
 "/**
 * Test merge()
 *
 * @return void
 */",
 "/**
 * test normalizing arrays
 *
 * @return void
 */",
 "/**
 * testContains method
 *
 * @return void
 */",
 "/**
 * testFilter method
 *
 * @return void
 */",
 "/**
 * testNumericArrayCheck method
 *
 * @return void
 */",
 "/**
 * Test simple paths.
 *
 * @return void
 */",
 "/**
 * Test the {n} selector
 *
 * @return void
 */",
 "/**
 * Test the {n} selector with inconsistent arrays
 *
 * @return void
 */",
 "/**
 * Test the {n} selector with non-zero based arrays
 *
 * @return void
 */",
 "/**
 * Test the {s} selector.
 *
 * @return void
 */",
 "/**
 * Test the attribute presense selector.
 *
 * @return void
 */",
 "/**
 * Test = and != operators.
 *
 * @return void
 */",
 "/**
 * Test comparison operators.
 *
 * @return void
 */",
 "/**
 * Test multiple attributes with conditions.
 *
 * @return void
 */",
 "/**
 * Test attribute pattern matching.
 *
 * @return void
 */",
 "/**
 * Test that extract() + matching can hit null things.
 */",
 "/**
 * Test that uneven keys are handled correctly.
 *
 * @return void
 */",
 "/**
 * testSort method
 *
 * @return void
 */",
 "/**
 * Test sort() with numeric option.
 *
 * @return void
 */",
 "/**
 * Test natural sorting.
 *
 * @return void
 */",
 "/**
 * test sorting with out of order keys.
 *
 * @return void
 */",
 "/**
 * test sorting with string keys.
 *
 * @return void
 */",
 "/**
 * Test insert()
 *
 * @return void
 */",
 "/**
 * Test inserting with multiple values.
 *
 * @return void
 */",
 "/**
 * Test that insert() can insert data over a string value.
 *
 * @return void
 */",
 "/**
 * Test remove() method.
 *
 * @return void
 */",
 "/**
 * Test removing multiple values.
 *
 * @return void
 */",
 "/**
 * testCheck method
 *
 * @return void
 */",
 "/**
 * testCombine method
 *
 * @return void
 */",
 "/**
 * test combine() with a group path.
 *
 * @return void
 */",
 "/**
 * Test combine with formatting rules.
 *
 * @return void
 */",
 "/**
 * testFormat method
 *
 * @return void
 */",
 "/**
 * testFormattingNullValues method
 *
 * @return void
 */",
 "/**
 * Test map()
 *
 * @return void
 */",
 "/**
 * Test reduce()
 *
 * @return void
 */",
 "/**
 * testing method for map callbacks.
 *
 * @param mixed $value
 * @return mixed.
 */",
 "/**
 * testing method for reduce callbacks.
 *
 * @param mixed $one
 * @param mixed $two
 * @return mixed.
 */",
 "/**
 * test Hash nest with a normal model result set. For kicks rely on Hash nest detecting the key names
 * automatically
 *
 * @return void
 */",
 "/**
 * test Hash nest with a normal model result set, and a nominated root id
 *
 * @return void
 */",
 "/**
 * test Hash nest with a 1d array - this method should be able to handle any type of array input
 *
 * @return void
 */",
 "/**
 * test Hash nest with no specified parent data.
 *
 * The result should be the same as the input.
 * For an easier comparison, unset all the empty children arrays from the result
 *
 * @return void
 */",
 "/**
 * testMergeDiff method
 *
 * @return void
 */",
 "/**
 * Tests Hash::expand
 *
 * @return void
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * Check if primary and secondary test databases are configured.
 *
 * @return void
 */",
 "/**
 * testModelDatasources method
 *
 * @return void
 */",
 "/**
 * testHabtmFind method
 *
 * @return void
 */",
 "/**
 * testHabtmSave method
 *
 * @return void
 */",
 "/**
 * testHabtmWithThreeDatabases method
 *
 * @return void
 */",
 "/**
 * initialization callback
 *
 * @return void
 */",
 "/**
 * Execution method always used for tasks
 *
 * @return void
 */",
 "/**
 * Interactive interface
 *
 * @return void
 */",
 "/**
 * Output verification message and bake if it looks good
 *
 * @param array $config
 * @return boolean True if user says it looks good, false otherwise
 */",
 "/**
 * Assembles and writes database.php
 *
 * @param array $configs Configuration settings to use
 * @return boolean Success
 */",
 "/**
 * Get a user specified Connection name
 *
 * @return void
 */",
 "/**
 * get the option parser
 *
 * @return ConsoleOptionParser
 */",
 "/**
 * Task class for creating and updating the database configuration file.
 *
 * @package       Cake.Console.Command.Task
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testConstruct method
 *
 * @return void
 */",
 "/**
 * testSocketConnection method
 *
 * @return void
 */",
 "/**
 * data provider function for testInvalidConnection
 *
 * @return array
 */",
 "/**
 * testInvalidConnection method
 *
 * @dataProvider invalidConnections
 * @expectedException SocketException
 * return void
 */",
 "/**
 * testSocketHost method
 *
 * @return void
 */",
 "/**
 * testSocketWriting method
 *
 * @return void
 */",
 "/**
 * testSocketReading method
 *
 * @return void
 */",
 "/**
 * testTimeOutConnection method
 *
 * @return void
 */",
 "/**
 * testLastError method
 *
 * @return void
 */",
 "/**
 * testReset method
 *
 * @return void
 */",
 "/**
 * SocketTest class
 *
 * @package       Cake.Test.Case.Network
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * AppController class
 *
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * ControllerTestCaseTest controller
 */",
 "/**
 * reset environment.
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * Test that ControllerTestCase::generate() creates mock objects correctly
 */",
 "/**
 * Tests ControllerTestCase::generate() using classes from plugins
 */",
 "/**
 * Tests testAction
 */",
 "/**
 * Make sure testAction() can hit plugin controllers.
 *
 * @return void
 */",
 "/**
 * Tests using loaded routes during tests
 *
 * @return void
 */",
 "/**
 * Tests not using loaded routes during tests
 *
 * @expectedException MissingActionException
 */",
 "/**
 * Tests backwards compatibility with setting the return type
 */",
 "/**
 * Tests sending POST data to testAction
 */",
 "/**
 * Tests sending GET data to testAction
 */",
 "/**
 * Test that REST actions with XML/JSON input work.
 *
 * @return void
 */",
 "/**
 * Tests autoMock ability
 */",
 "/**
 * Test using testAction and not mocking
 */",
 "/**
 * Test that controllers don\'t get reused.
 *
 * @return void
 */",
 "/**
 * Test that multiple calls to redirect in the same test method don\'t cause issues.
 *
 * @return void
 */",
 "/**
 * Tests that Components storing response or request objects internally during construct
 * will always have a fresh reference to those object available
 *
 * @return void
 * @see http://cakephp.lighthouseapp.com/projects/42648-cakephp/tickets/2705-requesthandler-weird-behavior
 */",
 "/**
 * Test that testAction() doesn\'t destroy data in GET & POST
 *
 * @return void
 */",
 "/**
 * ControllerTestCaseTest
 *
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllErrorTest class
 *
 * This test group will run error handling related tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Returns an RSS document wrapped in `<rss />` tags
 *
 * @param array $attrib `<rss />` tag attributes
 * @param string $content
 * @return string An RSS document
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/rss.html#RssHelper::document
 */",
 "/**
 * Returns an RSS `<channel />` element
 *
 * @param array $attrib `<channel />` tag attributes
 * @param array $elements Named array elements which are converted to tags
 * @param string $content Content (`<item />`\'s belonging to this channel
 * @return string An RSS `<channel />`
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/rss.html#RssHelper::channel
 */",
 "/**
 * Transforms an array of data using an optional callback, and maps it to a set
 * of `<item />` tags
 *
 * @param array $items The list of items to be mapped
 * @param string|array $callback A string function name, or array containing an object
 *     and a string method name
 * @return string A set of RSS `<item />` elements
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/rss.html#RssHelper::items
 */",
 "/**
 * Converts an array into an `<item />` element and its contents
 *
 * @param array $att The attributes of the `<item />` element
 * @param array $elements The list of elements contained in this `<item />`
 * @return string An RSS `<item />` element
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/rss.html#RssHelper::item
 */",
 "/**
 * Converts a time in any format to an RSS time
 *
 * @param integer|string|DateTime $time
 * @return string An RSS-formatted timestamp
 * @see TimeHelper::toRSS
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/rss.html#RssHelper::time
 */",
 "/**
 * Generates an XML element
 *
 * @param string $name The name of the XML element
 * @param array $attrib The attributes of the XML element
 * @param string|array $content XML element content
 * @param boolean $endTag Whether the end tag of the element should be printed
 * @return string XML
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/rss.html#RssHelper::elem
 */",
 "/**
 * RSS Helper class for easy output RSS structures.
 *
 * @package       Cake.View.Helper
 * @property      TimeHelper $Time
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/rss.html
 */",
 "/**
 * Component startup. All security checking happens here.
 *
 * @param Controller $controller Instantiating controller
 * @return void
 */",
 "/**
 * Sets the actions that require a POST request, or empty for all actions
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/security-component.html#SecurityComponent::requirePost
 */",
 "/**
 * Sets the actions that require a GET request, or empty for all actions
 *
 * @return void
 */",
 "/**
 * Sets the actions that require a PUT request, or empty for all actions
 *
 * @return void
 */",
 "/**
 * Sets the actions that require a DELETE request, or empty for all actions
 *
 * @return void
 */",
 "/**
 * Sets the actions that require a request that is SSL-secured, or empty for all actions
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/security-component.html#SecurityComponent::requireSecure
 */",
 "/**
 * Sets the actions that require an authenticated request, or empty for all actions
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/security-component.html#SecurityComponent::requireAuth
 */",
 "/**
 * Black-hole an invalid request with a 400 error or custom callback. If SecurityComponent::$blackHoleCallback
 * is specified, it will use this callback by executing the method indicated in $error
 *
 * @param Controller $controller Instantiating controller
 * @param string $error Error method
 * @return mixed If specified, controller blackHoleCallback\'s response, or no return otherwise
 * @see SecurityComponent::$blackHoleCallback
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/security-component.html#handling-blackhole-callbacks
 * @throws BadRequestException
 */",
 "/**
 * Sets the actions that require a $method HTTP request, or empty for all actions
 *
 * @param string $method The HTTP method to assign controller actions to
 * @param array $actions Controller actions to set the required HTTP method to.
 * @return void
 */",
 "/**
 * Check if HTTP methods are required
 *
 * @param Controller $controller Instantiating controller
 * @return boolean true if $method is required
 */",
 "/**
 * Check if access requires secure connection
 *
 * @param Controller $controller Instantiating controller
 * @return boolean true if secure connection required
 */",
 "/**
 * Check if authentication is required
 *
 * @param Controller $controller Instantiating controller
 * @return boolean true if authentication required
 */",
 "/**
 * Validate submitted form
 *
 * @param Controller $controller Instantiating controller
 * @return boolean true if submitted form is valid
 */",
 "/**
 * Manually add CSRF token information into the provided request object.
 *
 * @param CakeRequest $request The request object to add into.
 * @return boolean
 */",
 "/**
 * Validate that the controller has a CSRF token in the POST data
 * and that the token is legit/not expired.  If the token is valid
 * it will be removed from the list of valid tokens.
 *
 * @param Controller $controller A controller to check
 * @return boolean Valid csrf token.
 */",
 "/**
 * Expire CSRF nonces and remove them from the valid tokens.
 * Uses a simple timeout to expire the tokens.
 *
 * @param array $tokens An array of nonce => expires.
 * @return array An array of nonce => expires.
 */",
 "/**
 * Calls a controller callback method
 *
 * @param Controller $controller Controller to run callback on
 * @param string $method Method to execute
 * @param array $params Parameters to send to method
 * @return mixed Controller callback method\'s response
 */",
 "/**
 * The Security Component creates an easy way to integrate tighter security in 
 * your application. It provides methods for various tasks like:
 *
 * - Restricting which HTTP methods your application accepts.
 * - CSRF protection.
 * - Form tampering protection
 * - Requiring that SSL be used.
 * - Limiting cross controller communication.
 *
 * @package       Cake.Controller.Component
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/security-component.html
 */",
 "/**
 * Override startup of the Shell
 *
 * @return void
 */",
 "/**
 * Prints the help message
 *
 * @return void
 */",
 "/**
 * Override main() to handle action
 *
 * @param string $command
 * @return void
 */",
 "/**
 * Tells if the specified model is included in the list of available models
 *
 * @param string $modelToCheck
 * @return boolean true if is an available model, false otherwise
 */",
 "/**
 * Reloads the routes configuration from app/Config/routes.php, and compiles
 * all routes found
 *
 * @return boolean True if config reload was a success, otherwise false
 */",
 "/**
 * Provides a very basic \'interactive\' console for CakePHP apps.
 *
 * @package       Cake.Console.Command
 */",
 "/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package       app.Controller
 * @link http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */",
 "/**
 * Constructor. Binds the model\'s database table to the object.
 *
 * If `$id` is an array it can be used to pass several options into the model.
 *
 * - id - The id to start the model on.
 * - table - The table to use for this model.
 * - ds - The connection name this model is connected to.
 * - name - The name of the model eg. Post.
 * - alias - The alias of the model, this is used for registering the instance in the `ClassRegistry`.
 *   eg. `ParentThread`
 *
 * ### Overriding Model\'s __construct method.
 *
 * When overriding Model::__construct() be careful to include and pass in all 3 of the
 * arguments to `parent::__construct($id, $table, $ds);`
 *
 * ### Dynamically creating models
 *
 * You can dynamically create model instances using the $id array syntax.
 *
 * {{{
 * $Post = new Model(array(\'table\' => \'posts\', \'name\' => \'Post\', \'ds\' => \'connection2\'));
 * }}}
 *
 * Would create a model attached to the posts table on connection2.  Dynamic model creation is useful
 * when you want a model object that contains no associations or attached behaviors.
 *
 * @param integer|string|array $id Set this ID for this model on startup, can also be an array of options, see above.
 * @param string $table Name of database table to use.
 * @param string $ds DataSource connection name.
 */",
 "/**
 * Returns a list of all events that will fire in the model during it\'s lifecycle.
 * You can override this function to add you own listener callbacks
 *
 * @return array
 */",
 "/**
 * Returns the CakeEventManager manager instance that is handling any callbacks.
 * You can use this instance to register any new listeners or callbacks to the
 * model events, or create your own events and trigger them at will.
 *
 * @return CakeEventManager
 */",
 "/**
 * Handles custom method calls, like findBy<field> for DB models,
 * and custom RPC calls for remote data sources.
 *
 * @param string $method Name of method to call.
 * @param array $params Parameters for the method.
 * @return mixed Whatever is returned by called method
 */",
 "/**
 * Handles the lazy loading of model associations by looking in the association arrays for the requested variable
 *
 * @param string $name variable tested for existence in class
 * @return boolean true if the variable exists (if is a not loaded model association it will be created), false otherwise
 */",
 "/**
 * Returns the value of the requested variable if it can be set by __isset()
 *
 * @param string $name variable requested for it\'s value or reference
 * @return mixed value of requested variable if it is set
 */",
 "/**
 * Bind model associations on the fly.
 *
 * If `$reset` is false, association will not be reset
 * to the originals defined in the model
 *
 * Example: Add a new hasOne binding to the Profile model not
 * defined in the model source code:
 *
 * `$this->User->bindModel( array(\'hasOne\' => array(\'Profile\')) );`
 *
 * Bindings that are not made permanent will be reset by the next Model::find() call on this
 * model.
 *
 * @param array $params Set of bindings (indexed by binding type)
 * @param boolean $reset Set to false to make the binding permanent
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/models/associations-linking-models-together.html#creating-and-destroying-associations-on-the-fly
 */",
 "/**
 * Turn off associations on the fly.
 *
 * If $reset is false, association will not be reset
 * to the originals defined in the model
 *
 * Example: Turn off the associated Model Support request,
 * to temporarily lighten the User model:
 *
 * `$this->User->unbindModel( array(\'hasMany\' => array(\'Supportrequest\')) );`
 *
 * unbound models that are not made permanent will reset with the next call to Model::find()
 *
 * @param array $params Set of bindings to unbind (indexed by binding type)
 * @param boolean $reset  Set to false to make the unbinding permanent
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/models/associations-linking-models-together.html#creating-and-destroying-associations-on-the-fly
 */",
 "/**
 * Create a set of associations.
 *
 * @return void
 */",
 "/**
 * Protected helper method to create associated models of a given class.
 *
 * @param string $assoc Association name
 * @param string $className Class name
 * @param string $plugin name of the plugin where $className is located
 * 	examples: public $hasMany = array(\'Assoc\' => array(\'className\' => \'ModelName\'));
 * 					usage: $this->Assoc->modelMethods();
 *
 * 				public $hasMany = array(\'ModelName\');
 * 					usage: $this->ModelName->modelMethods();
 * @return void
 */",
 "/**
 * Build an array-based association from string.
 *
 * @param string $type \'belongsTo\', \'hasOne\', \'hasMany\', \'hasAndBelongsToMany\'
 * @param string $assocKey
 * @return void
 */",
 "/**
 * Sets a custom table for your controller class. Used by your controller to select a database table.
 *
 * @param string $tableName Name of the custom table
 * @throws MissingTableException when database table $tableName is not found on data source
 * @return void
 */",
 "/**
 * This function does two things:
 *
 * 1. it scans the array $one for the primary key,
 * and if that\'s found, it sets the current id to the value of $one[id].
 * For all other keys than \'id\' the keys and values of $one are copied to the \'data\' property of this object.
 * 2. Returns an array with all of $one\'s keys and values.
 * (Alternative indata: two strings, which are mangled to
 * a one-item, two-dimensional array using $one for a key and $two as its value.)
 *
 * @param string|array|SimpleXmlElement|DomNode $one Array or string of data
 * @param string $two Value string for the alternative indata method
 * @return array Data with all of $one\'s keys and values
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html
 */",
 "/**
 * Move values to alias
 *
 * @param array $data
 * @return array
 */",
 "/**
 * Normalize Xml::toArray() to use in Model::save()
 *
 * @param array $xml XML as array
 * @return array
 */",
 "/**
 * Deconstructs a complex data type (array or object) into a single field value.
 *
 * @param string $field The name of the field to be deconstructed
 * @param array|object $data An array or object to be deconstructed into a field
 * @return mixed The resulting data that should be assigned to a field
 */",
 "/**
 * Returns an array of table metadata (column names and types) from the database.
 * $field => keys(type, null, default, key, length, extra)
 *
 * @param boolean|string $field Set to true to reload schema, or a string to return a specific field
 * @return array Array of table metadata
 */",
 "/**
 * Returns an associative array of field names and column types.
 *
 * @return array Field types indexed by field name
 */",
 "/**
 * Returns the column type of a column in the model.
 *
 * @param string $column The name of the model column
 * @return string Column type
 */",
 "/**
 * Returns true if the supplied field exists in the model\'s database table.
 *
 * @param string|array $name Name of field to look for, or an array of names
 * @param boolean $checkVirtual checks if the field is declared as virtual
 * @return mixed If $name is a string, returns a boolean indicating whether the field exists.
 *               If $name is an array of field names, returns the first field that exists,
 *               or false if none exist.
 */",
 "/**
 * Check that a method is callable on a model.  This will check both the model\'s own methods, its
 * inherited methods and methods that could be callable through behaviors.
 *
 * @param string $method The method to be called.
 * @return boolean True on method being callable.
 */",
 "/**
 * Returns true if the supplied field is a model Virtual Field
 *
 * @param string $field Name of field to look for
 * @return boolean indicating whether the field exists as a model virtual field.
 */",
 "/**
 * Returns the expression for a model virtual field
 *
 * @param string $field Name of field to look for
 * @return mixed If $field is string expression bound to virtual field $field
 *    If $field is null, returns an array of all model virtual fields
 *    or false if none $field exist.
 */",
 "/**
 * Initializes the model for writing a new record, loading the default values
 * for those fields that are not defined in $data, and clearing previous validation errors.
 * Especially helpful for saving data in loops.
 *
 * @param boolean|array $data Optional data array to assign to the model after it is created.  If null or false,
 *   schema data defaults are not merged.
 * @param boolean $filterKey If true, overwrites any primary key input with an empty value
 * @return array The current Model::data; after merging $data and/or defaults from database
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html#model-create-array-data-array
 */",
 "/**
 * Returns a list of fields from the database, and sets the current model
 * data (Model::$data) with the record found.
 *
 * @param string|array $fields String of single field name, or an array of field names.
 * @param integer|string $id The ID of the record to read
 * @return array Array of database fields, or false if not found
 * @link http://book.cakephp.org/2.0/en/models/retrieving-your-data.html#model-read
 */",
 "/**
 * Returns the contents of a single field given the supplied conditions, in the
 * supplied order.
 *
 * @param string $name Name of field to get
 * @param array $conditions SQL conditions (defaults to NULL)
 * @param string $order SQL ORDER BY fragment
 * @return string field contents, or false if not found
 * @link http://book.cakephp.org/2.0/en/models/retrieving-your-data.html#model-field
 */",
 "/**
 * Saves the value of a single field to the database, based on the current
 * model ID.
 *
 * @param string $name Name of the table field
 * @param mixed $value Value of the field
 * @param array $validate See $options param in Model::save(). Does not respect \'fieldList\' key if passed
 * @return boolean See Model::save()
 * @see Model::save()
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html#model-savefield-string-fieldname-string-fieldvalue-validate-false
 */",
 "/**
 * Saves model data (based on white-list, if supplied) to the database. By
 * default, validation occurs before save.
 *
 * @param array $data Data to save.
 * @param boolean|array $validate Either a boolean, or an array.
 *   If a boolean, indicates whether or not to validate before saving.
 *   If an array, allows control of validate, callbacks, and fieldList
 * @param array $fieldList List of fields to allow to be written
 * @return mixed On success Model::$data if its not empty or true, false on failure
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html
 */",
 "/**
 * Saves model hasAndBelongsToMany data to the database.
 *
 * @param array $joined Data to save
 * @param integer|string $id ID of record in this model
 * @param DataSource $db
 * @return void
 */",
 "/**
 * Updates the counter cache of belongsTo associations after a save or delete operation
 *
 * @param array $keys Optional foreign key data, defaults to the information $this->data
 * @param boolean $created True if a new record was created, otherwise only associations with
 *   \'counterScope\' defined get updated
 * @return void
 */",
 "/**
 * Helper method for Model::updateCounterCache().  Checks the fields to be updated for
 *
 * @param array $data The fields of the record that will be updated
 * @return array Returns updated foreign key values, along with an \'old\' key containing the old
 *     values, or empty if no foreign keys are updated.
 */",
 "/**
 * Backwards compatible passthrough method for:
 * saveMany(), validateMany(), saveAssociated() and validateAssociated()
 *
 * Saves multiple individual records for a single model; Also works with a single record, as well as
 * all its associated records.
 *
 * #### Options
 *
 * - validate: Set to false to disable validation, true to validate each record before saving,
 *   \'first\' to validate *all* records before any are saved (default),
 *   or \'only\' to only validate the records, but not save them.
 * - atomic: If true (default), will attempt to save all records in a single transaction.
 *   Should be set to false if database/table does not support transactions.
 * - fieldList: Equivalent to the $fieldList parameter in Model::save().
 *   It should be an associate array with model name as key and array of fields as value. Eg.
 *   {{{
 *   array(
 *       \'SomeModel\' => array(\'field\'),
 *       \'AssociatedModel\' => array(\'field\', \'otherfield\')
 *   )
 *   }}}
 * - deep: see saveMany/saveAssociated
 *
 * @param array $data Record data to save. This can be either a numerically-indexed array (for saving multiple
 *     records of the same type), or an array indexed by association name.
 * @param array $options Options to use when saving record data, See $options above.
 * @return mixed If atomic: True on success, or false on failure.
 *    Otherwise: array similar to the $data array passed, but values are set to true/false
 *    depending on whether each record saved successfully.
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html#model-saveassociated-array-data-null-array-options-array
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html#model-saveall-array-data-null-array-options-array
 */",
 "/**
 * Saves multiple individual records for a single model
 *
 * #### Options
 *
 * - validate: Set to false to disable validation, true to validate each record before saving,
 *   \'first\' to validate *all* records before any are saved (default),
 * - atomic: If true (default), will attempt to save all records in a single transaction.
 *   Should be set to false if database/table does not support transactions.
 * - fieldList: Equivalent to the $fieldList parameter in Model::save()
 * - deep: If set to true, all associated data will be saved as well.
 *
 * @param array $data Record data to save. This should be a numerically-indexed array
 * @param array $options Options to use when saving record data, See $options above.
 * @return mixed If atomic: True on success, or false on failure.
 *    Otherwise: array similar to the $data array passed, but values are set to true/false
 *    depending on whether each record saved successfully.
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html#model-savemany-array-data-null-array-options-array
 */",
 "/**
 * Validates multiple individual records for a single model
 *
 * #### Options
 *
 * - atomic: If true (default), returns boolean. If false returns array.
 * - fieldList: Equivalent to the $fieldList parameter in Model::save()
 * - deep: If set to true, all associated data will be validated as well.
 *
 * Warning: This method could potentially change the passed argument `$data`,
 * If you do not want this to happen, make a copy of `$data` before passing it
 * to this method
 *
 * @param array $data Record data to validate. This should be a numerically-indexed array
 * @param array $options Options to use when validating record data (see above), See also $options of validates().
 * @return boolean True on success, or false on failure.
 * @return mixed If atomic: True on success, or false on failure.
 *    Otherwise: array similar to the $data array passed, but values are set to true/false
 *    depending on whether each record validated successfully.
 */",
 "/**
 * Saves a single record, as well as all its directly associated records.
 *
 * #### Options
 *
 * - `validate` Set to `false` to disable validation, `true` to validate each record before saving,
 *   \'first\' to validate *all* records before any are saved(default),
 * - `atomic` If true (default), will attempt to save all records in a single transaction.
 *   Should be set to false if database/table does not support transactions.
 * - fieldList: Equivalent to the $fieldList parameter in Model::save().
 *   It should be an associate array with model name as key and array of fields as value. Eg.
 *   {{{
 *   array(
 *       \'SomeModel\' => array(\'field\'),
 *       \'AssociatedModel\' => array(\'field\', \'otherfield\')
 *   )
 *   }}}
 * - deep: If set to true, not only directly associated data is saved, but deeper nested associated data as well.
 *
 * @param array $data Record data to save. This should be an array indexed by association name.
 * @param array $options Options to use when saving record data, See $options above.
 * @return mixed If atomic: True on success, or false on failure.
 *    Otherwise: array similar to the $data array passed, but values are set to true/false
 *    depending on whether each record saved successfully.
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html#model-saveassociated-array-data-null-array-options-array
 */",
 "/**
 * Validates a single record, as well as all its directly associated records.
 *
 * #### Options
 *
 * - atomic: If true (default), returns boolean. If false returns array.
 * - fieldList: Equivalent to the $fieldList parameter in Model::save()
 * - deep: If set to true, not only directly associated data , but deeper nested associated data is validated as well.
 *
 * Warning: This method could potentially change the passed argument `$data`,
 * If you do not want this to happen, make a copy of `$data` before passing it
 * to this method
 *
 * @param array $data Record data to validate. This should be an array indexed by association name.
 * @param array $options Options to use when validating record data (see above), See also $options of validates().
 * @return array|boolean If atomic: True on success, or false on failure.
 *    Otherwise: array similar to the $data array passed, but values are set to true/false
 *    depending on whether each record validated successfully.
 */",
 "/**
 * Updates multiple model records based on a set of conditions.
 *
 * @param array $fields Set of fields and values, indexed by fields.
 *    Fields are treated as SQL snippets, to insert literal values manually escape your data.
 * @param mixed $conditions Conditions to match, true for all records
 * @return boolean True on success, false on failure
 * @link http://book.cakephp.org/2.0/en/models/saving-your-data.html#model-updateall-array-fields-array-conditions
 */",
 "/**
 * Removes record for given ID. If no ID is given, the current ID is used. Returns true on success.
 *
 * @param integer|string $id ID of record to delete
 * @param boolean $cascade Set to true to delete records that depend on this record
 * @return boolean True on success
 * @link http://book.cakephp.org/2.0/en/models/deleting-data.html
 */",
 "/**
 * Cascades model deletes through associated hasMany and hasOne child records.
 *
 * @param string $id ID of record that was deleted
 * @param boolean $cascade Set to true to delete records that depend on this record
 * @return void
 */",
 "/**
 * Cascades model deletes through HABTM join keys.
 *
 * @param string $id ID of record that was deleted
 * @return void
 */",
 "/**
 * Deletes multiple model records based on a set of conditions.
 *
 * @param mixed $conditions Conditions to match
 * @param boolean $cascade Set to true to delete records that depend on this record
 * @param boolean $callbacks Run callbacks
 * @return boolean True on success, false on failure
 * @link http://book.cakephp.org/2.0/en/models/deleting-data.html#deleteall
 */",
 "/**
 * Collects foreign keys from associations.
 *
 * @param string $type
 * @return array
 */",
 "/**
 * Returns true if a record with particular ID exists.
 *
 * If $id is not passed it calls Model::getID() to obtain the current record ID,
 * and then performs a Model::find(\'count\') on the currently configured datasource
 * to ascertain the existence of the record in persistent storage.
 *
 * @param integer|string $id ID of record to check for existence
 * @return boolean True if such a record exists
 */",
 "/**
 * Returns true if a record that meets given conditions exists.
 *
 * @param array $conditions SQL conditions array
 * @return boolean True if such a record exists
 */",
 "/**
 * Queries the datasource and returns a result set array.
 *
 * Also used to perform notation finds, where the first argument is type of find operation to perform
 * (all / first / count / neighbors / list / threaded),
 * second parameter options for finding ( indexed array, including: \'conditions\', \'limit\',
 * \'recursive\', \'page\', \'fields\', \'offset\', \'order\')
 *
 * Eg:
 * {{{
 * 	find(\'all\', array(
 * 		\'conditions\' => array(\'name\' => \'Thomas Anderson\'),
 * 		\'fields\' => array(\'name\', \'email\'),
 * 		\'order\' => \'field3 DESC\',
 * 		\'recursive\' => 2,
 * 		\'group\' => \'type\'
 * ));
 * }}}
 *
 * In addition to the standard query keys above, you can provide Datasource, and behavior specific
 * keys.  For example, when using a SQL based datasource you can use the joins key to specify additional
 * joins that should be part of the query.
 *
 * {{{
 * find(\'all\', array(
 * 		\'conditions\' => array(\'name\' => \'Thomas Anderson\'),
 * 		\'joins\' => array(
 *			array(
 * 				\'alias\' => \'Thought\',
 * 				\'table\' => \'thoughts\',
 * 				\'type\' => \'LEFT\',
 * 				\'conditions\' => \'`Thought`.`person_id` = `Person`.`id`\'
 *			)
 * 		)
 * ));
 * }}}
 *
 * Behaviors and find types can also define custom finder keys which are passed into find().
 *
 * Specifying \'fields\' for notation \'list\':
 *
 *  - If no fields are specified, then \'id\' is used for key and \'model->displayField\' is used for value.
 *  - If a single field is specified, \'id\' is used for key and specified field is used for value.
 *  - If three fields are specified, they are used (in order) for key, value and group.
 *  - Otherwise, first and second fields are used for key and value.
 *
 *  Note: find(list) + database views have issues with MySQL 5.0. Try upgrading to MySQL 5.1 if you
 *  have issues with database views.
 * @param string $type Type of find operation (all / first / count / neighbors / list / threaded)
 * @param array $query Option fields (conditions / fields / joins / limit / offset / order / page / group / callbacks)
 * @return array Array of records
 * @link http://book.cakephp.org/2.0/en/models/deleting-data.html#deleteall
 */",
 "/**
 * Builds the query array that is used by the data source to generate the query to fetch the data.
 *
 * @param string $type Type of find operation (all / first / count / neighbors / list / threaded)
 * @param array $query Option fields (conditions / fields / joins / limit / offset / order / page / group / callbacks)
 * @return array Query array or null if it could not be build for some reasons
 * @see Model::find()
 */",
 "/**
 * Handles the before/after filter logic for find(\'first\') operations.  Only called by Model::find().
 *
 * @param string $state Either \"before\" or \"after\"
 * @param array $query
 * @param array $results
 * @return array
 * @see Model::find()
 */",
 "/**
 * Handles the before/after filter logic for find(\'count\') operations.  Only called by Model::find().
 *
 * @param string $state Either \"before\" or \"after\"
 * @param array $query
 * @param array $results
 * @return integer The number of records found, or false
 * @see Model::find()
 */",
 "/**
 * Handles the before/after filter logic for find(\'list\') operations.  Only called by Model::find().
 *
 * @param string $state Either \"before\" or \"after\"
 * @param array $query
 * @param array $results
 * @return array Key/value pairs of primary keys/display field values of all records found
 * @see Model::find()
 */",
 "/**
 * Detects the previous field\'s value, then uses logic to find the \'wrapping\'
 * rows and return them.
 *
 * @param string $state Either \"before\" or \"after\"
 * @param array $query
 * @param array $results
 * @return array
 */",
 "/**
 * In the event of ambiguous results returned (multiple top level results, with different parent_ids)
 * top level results with different parent_ids to the first result will be dropped
 *
 * @param string $state
 * @param mixed $query
 * @param array $results
 * @return array Threaded results
 */",
 "/**
 * Passes query results through model and behavior afterFilter() methods.
 *
 * @param array $results Results to filter
 * @param boolean $primary If this is the primary model results (results from model where the find operation was performed)
 * @return array Set of filtered results
 */",
 "/**
 * This resets the association arrays for the model back
 * to those originally defined in the model. Normally called at the end
 * of each call to Model::find()
 *
 * @return boolean Success
 */",
 "/**
 * Returns false if any fields passed match any (by default, all if $or = false) of their matching values.
 *
 * @param array $fields Field/value pairs to search (if no values specified, they are pulled from $this->data)
 * @param boolean $or If false, all fields specified must match in order for a false return value
 * @return boolean False if any records matching any fields are found
 */",
 "/**
 * Returns a resultset for a given SQL statement. Custom SQL queries should be performed with this method.
 *
 * @param string $sql,... SQL statement
 * @return mixed Resultset array or boolean indicating success / failure depending on the query executed
 * @link http://book.cakephp.org/2.0/en/models/retrieving-your-data.html#model-query
 */",
 "/**
 * Returns true if all fields pass validation. Will validate hasAndBelongsToMany associations
 * that use the \'with\' key as well. Since _saveMulti is incapable of exiting a save operation.
 *
 * Will validate the currently set data.  Use Model::set() or Model::create() to set the active data.
 *
 * @param array $options An optional array of custom options to be made available in the beforeValidate callback
 * @return boolean True if there are no errors
 */",
 "/**
 * Returns an array of fields that have failed validation. On the current model.
 *
 * @param string $options An optional array of custom options to be made available in the beforeValidate callback
 * @return array Array of invalid fields
 * @see Model::validates()
 */",
 "/**
 * Marks a field as invalid, optionally setting the name of validation
 * rule (in case of multiple validation for field) that was broken.
 *
 * @param string $field The name of the field to invalidate
 * @param mixed $value Name of validation rule that was not failed, or validation message to
 *    be returned. If no validation key is provided, defaults to true.
 * @return void
 */",
 "/**
 * Returns true if given field name is a foreign key in this model.
 *
 * @param string $field Returns true if the input string ends in \"_id\"
 * @return boolean True if the field is a foreign key listed in the belongsTo array.
 */",
 "/**
 * Escapes the field name and prepends the model name. Escaping is done according to the
 * current database driver\'s rules.
 *
 * @param string $field Field to escape (e.g: id)
 * @param string $alias Alias for the model (e.g: Post)
 * @return string The name of the escaped field for this Model (i.e. id becomes `Post`.`id`).
 */",
 "/**
 * Returns the current record\'s ID
 *
 * @param integer $list Index on which the composed ID is located
 * @return mixed The ID of the current record, false if no ID
 */",
 "/**
 * Returns the ID of the last record this model inserted.
 *
 * @return mixed Last inserted ID
 */",
 "/**
 * Returns the ID of the last record this model inserted.
 *
 * @return mixed Last inserted ID
 */",
 "/**
 * Sets the ID of the last record this model inserted
 *
 * @param integer|string $id Last inserted ID
 * @return void
 */",
 "/**
 * Returns the number of rows returned from the last query.
 *
 * @return integer Number of rows
 */",
 "/**
 * Returns the number of rows affected by the last query.
 *
 * @return integer Number of rows
 */",
 "/**
 * Sets the DataSource to which this model is bound.
 *
 * @param string $dataSource The name of the DataSource, as defined in app/Config/database.php
 * @return void
 * @throws MissingConnectionException
 */",
 "/**
 * Gets the DataSource to which this model is bound.
 *
 * @return DataSource A DataSource object
 */",
 "/**
 * Get associations
 *
 * @return array
 */",
 "/**
 * Gets all the models with which this model is associated.
 *
 * @param string $type Only result associations of this type
 * @return array Associations
 */",
 "/**
 * Gets the name and fields to be used by a join model.  This allows specifying join fields
 * in the association definition.
 *
 * @param string|array $assoc The model to be joined
 * @param array $keys Any join keys which must be merged with the keys queried
 * @return array
 */",
 "/**
 * Called before each find operation. Return false if you want to halt the find
 * call, otherwise return the (modified) query data.
 *
 * @param array $queryData Data used to execute this query, i.e. conditions, order, etc.
 * @return mixed true if the operation should continue, false if it should abort; or, modified
 *               $queryData to continue with new $queryData
 * @link http://book.cakephp.org/2.0/en/models/callback-methods.html#beforefind
 */",
 "/**
 * Called after each find operation. Can be used to modify any results returned by find().
 * Return value should be the (modified) results.
 *
 * @param mixed $results The results of the find operation
 * @param boolean $primary Whether this model is being queried directly (vs. being queried as an association)
 * @return mixed Result of the find operation
 * @link http://book.cakephp.org/2.0/en/models/callback-methods.html#afterfind
 */",
 "/**
 * Called before each save operation, after validation. Return a non-true result
 * to halt the save.
 *
 * @param array $options
 * @return boolean True if the operation should continue, false if it should abort
 * @link http://book.cakephp.org/2.0/en/models/callback-methods.html#beforesave
 */",
 "/**
 * Called after each successful save operation.
 *
 * @param boolean $created True if this save created a new record
 * @return void
 * @link http://book.cakephp.org/2.0/en/models/callback-methods.html#aftersave
 */",
 "/**
 * Called before every deletion operation.
 *
 * @param boolean $cascade If true records that depend on this record will also be deleted
 * @return boolean True if the operation should continue, false if it should abort
 * @link http://book.cakephp.org/2.0/en/models/callback-methods.html#beforedelete
 */",
 "/**
 * Called after every deletion operation.
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/models/callback-methods.html#afterdelete
 */",
 "/**
 * Called during validation operations, before validation. Please note that custom
 * validation rules can be defined in $validate.
 *
 * @param array $options Options passed from model::save(), see $options of model::save().
 * @return boolean True if validate operation should continue, false to abort
 * @link http://book.cakephp.org/2.0/en/models/callback-methods.html#beforevalidate
 */",
 "/**
 * Called after data has been checked for errors
 *
 * @return void
 */",
 "/**
 * Called when a DataSource-level error occurs.
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/models/callback-methods.html#onerror
 */",
 "/**
 * Clears cache for this model.
 *
 * @param string $type If null this deletes cached views if Cache.check is true
 *     Will be used to allow deleting query cache also
 * @return boolean true on delete
 */",
 "/**
 * Retunrs an instance of a model validator for this class
 *
 * @return ModelValidator
 */",
 "/**
 * Object-relational mapper.
 *
 * DBO-backed object data model.
 * Automatically selects a database table name based on a pluralized lowercase object class name
 * (i.e. class \'User\' => table \'users\'; class \'Man\' => table \'men\')
 * The table is required to have at least \'id auto_increment\' primary key.
 *
 * @package       Cake.Model
 * @link          http://book.cakephp.org/2.0/en/models.html
 */",
 "/**
 * test case startup
 *
 * @return void
 */",
 "/**
 * cleanup after test case.
 *
 * @return void
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test that constructor sets the right things up.
 *
 * @return void
 */",
 "/**
 * test opening the session
 *
 * @return void
 */",
 "/**
 * test write()
 *
 * @return void
 */",
 "/**
 * testReadAndWriteWithDatabaseStorage method
 *
 * @return void
 */",
 "/**
 * test read()
 *
 * @return void
 */",
 "/**
 * test blowing up the session.
 *
 * @return void
 */",
 "/**
 * test the garbage collector
 *
 * @return void
 */",
 "/**
 * Database session test.
 *
 * @package       Cake.Test.Case.Model.Datasource.Session
 */",
 "/**
 * testInitialize method
 *
 * @return void
 */",
 "/**
 * testDetectInvalidLeft method
 *
 * @return void
 */",
 "/**
 * testDetectInvalidRight method
 *
 * @return void
 */",
 "/**
 * testDetectInvalidParent method
 *
 * @return void
 */",
 "/**
 * testDetectNoneExistentParent method
 *
 * @return void
 */",
 "/**
 * testRecoverUsingParentMode method
 *
 * @return void
 */",
 "/**
 * testRecoverFromMissingParent method
 *
 * @return void
 */",
 "/**
 * testDetectInvalidParents method
 *
 * @return void
 */",
 "/**
 * testDetectInvalidLftsRghts method
 *
 * @return void
 */",
 "/**
 * Reproduces a situation where a single node has lft= rght, and all other lft and rght fields follow sequentially
 *
 * @return void
 */",
 "/**
 * testAddOrphan method
 *
 * @return void
 */",
 "/**
 * testAddMiddle method
 *
 * @return void
 */",
 "/**
 * testAddInvalid method
 *
 * @return void
 */",
 "/**
 * testAddNotIndexedByModel method
 *
 * @return void
 */",
 "/**
 * testMovePromote method
 *
 * @return void
 */",
 "/**
 * testMoveWithWhitelist method
 *
 * @return void
 */",
 "/**
 * testInsertWithWhitelist method
 *
 * @return void
 */",
 "/**
 * testMoveBefore method
 *
 * @return void
 */",
 "/**
 * testMoveAfter method
 *
 * @return void
 */",
 "/**
 * testMoveDemoteInvalid method
 *
 * @return void
 */",
 "/**
 * testMoveInvalid method
 *
 * @return void
 */",
 "/**
 * testMoveSelfInvalid method
 *
 * @return void
 */",
 "/**
 * testMoveUpSuccess method
 *
 * @return void
 */",
 "/**
 * testMoveUpFail method
 *
 * @return void
 */",
 "/**
 * testMoveUp2 method
 *
 * @return void
 */",
 "/**
 * testMoveUpFirst method
 *
 * @return void
 */",
 "/**
 * testMoveDownSuccess method
 *
 * @return void
 */",
 "/**
 * testMoveDownFail method
 *
 * @return void
 */",
 "/**
 * testMoveDownLast method
 *
 * @return void
 */",
 "/**
 * testMoveDown2 method
 *
 * @return void
 */",
 "/**
 * testSaveNoMove method
 *
 * @return void
 */",
 "/**
 * testMoveToRootAndMoveUp method
 *
 * @return void
 */",
 "/**
 * testDelete method
 *
 * @return void
 */",
 "/**
 * testRemove method
 *
 * @return void
 */",
 "/**
 * testRemoveLastTopParent method
 *
 * @return void
 */",
 "/**
 * testRemoveNoChildren method
 *
 * @return void
 */",
 "/**
 * testRemoveAndDelete method
 *
 * @return void
 */",
 "/**
 * testRemoveAndDeleteNoChildren method
 *
 * @return void
 */",
 "/**
 * testChildren method
 *
 * @return void
 */",
 "/**
 * testCountChildren method
 *
 * @return void
 */",
 "/**
 * testGetParentNode method
 *
 * @return void
 */",
 "/**
 * testGetPath method
 *
 * @return void
 */",
 "/**
 * testNoAmbiguousColumn method
 *
 * @return void
 */",
 "/**
 * testReorderTree method
 *
 * @return void
 */",
 "/**
 * test reordering large-ish trees with cacheQueries = true.
 * This caused infinite loops when moving down elements as stale data is returned
 * from the memory cache
 *
 * @return void
 */",
 "/**
 * testGenerateTreeListWithSelfJoin method
 *
 * @return void
 */",
 "/**
 * testArraySyntax method
 *
 * @return void
 */",
 "/**
 * testFindThreaded method
 *
 * @return void
 */",
 "/**
 * TreeBehaviorNumberTest class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * Checks that given project path does not already exist, and
 * finds the app directory in it. Then it calls bake() with that information.
 *
 * @return mixed
 */",
 "/**
 * Checks PHP\'s include_path for CakePHP.
 *
 * @return boolean Indicates whether or not CakePHP exists on include_path
 */",
 "/**
 * Looks for a skeleton template of a Cake application,
 * and if not found asks the user for a path. When there is a path
 * this method will make a deep copy of the skeleton to the project directory.
 *
 * @param string $path Project path
 * @param string $skel Path to copy from
 * @param string $skip array of directories to skip when copying
 * @return mixed
 */",
 "/**
 * Generates the correct path to the CakePHP libs that are generating the project
 * and points app/console/cake.php to the right place
 *
 * @param string $path Project path.
 * @return boolean success
 */",
 "/**
 * Generates and writes \'Security.salt\'
 *
 * @param string $path Project path
 * @return boolean Success
 */",
 "/**
 * Generates and writes \'Security.cipherSeed\'
 *
 * @param string $path Project path
 * @return boolean Success
 */",
 "/**
 * Generates and writes CAKE_CORE_INCLUDE_PATH
 *
 * @param string $path Project path
 * @param boolean $hardCode Wether or not define calls should be hardcoded.
 * @return boolean Success
 */",
 "/**
 * Replaces the __CAKE_PATH__ placeholder in the template files.
 *
 * @param string $filename The filename to operate on.
 * @param boolean $hardCode Whether or not the define should be uncommented.
 * @return boolean Success
 */",
 "/**
 * Enables Configure::read(\'Routing.prefixes\') in /app/Config/core.php
 *
 * @param string $name Name to use as admin routing
 * @return boolean Success
 */",
 "/**
 * Checks for Configure::read(\'Routing.prefixes\') and forces user to input it if not enabled
 *
 * @return string Admin route to use
 */",
 "/**
 * get the option parser.
 *
 * @return ConsoleOptionParser
 */",
 "/**
 * Task class for creating new project apps and plugins
 *
 * @package       Cake.Console.Command.Task
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param array $header Header as an indexed array (field => value)
 * @return array Parsed header
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param string $body A string containing the body to decode
 * @param boolean|string $encoding Can be false in case no encoding is being used, or a string representing the encoding
 * @return mixed Array or false
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param string $body A string containing the chunked body to decode
 * @return mixed Array or false
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param string $token Token to unescape
 * @return string Unescaped token
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param boolean $hex true to get them as HEX values, false otherwise
 * @return array Escape chars
 */",
 "/**
 * TestHttpResponse class
 *
 * @package       Cake.Test.Case.Network.Http
 */",
 "/**
 * This function sets up a HttpResponse
 *
 * @return void
 */",
 "/**
 * testBody
 *
 * @return void
 */",
 "/**
 * testToString
 *
 * @return void
 */",
 "/**
 * testGetHeader
 *
 * @return void
 */",
 "/**
 * testIsOk
 *
 * @return void
 */",
 "/**
 * testIsRedirect
 *
 * @return void
 */",
 "/**
 * Test that HttpSocket::parseHeader can take apart a given (and valid) $header string and turn it into an array.
 *
 * @return void
 */",
 "/**
 * testParseResponse method
 *
 * @return void
 */",
 "/**
 * data provider function for testInvalidParseResponseData
 *
 * @return array
 */",
 "/**
 * testInvalidParseResponseData
 *
 * @dataProvider invalidParseResponseDataProvider
 * @expectedException SocketException
 * return void
 */",
 "/**
 * testDecodeBody method
 *
 * @return void
 */",
 "/**
 * testDecodeFooCoded
 *
 * @return void
 */",
 "/**
 * testDecodeChunkedBody method
 *
 * @return void
 */",
 "/**
 * testDecodeChunkedBodyError method
 *
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * testParseCookies method
 *
 * @return void
 */",
 "/**
 * Test that escaped token strings are properly unescaped by HttpSocket::unescapeToken
 *
 * @return void
 */",
 "/**
 * testArrayAccess
 *
 * @return void
 */",
 "/**
 * HttpResponseTest class
 *
 * @package       Cake.Test.Case.Network.Http
 */",
 "/**
 * Send mail
 *
 * @param CakeEmail $email CakeEmail
 * @return array
 * @throws SocketException
 */",
 "/**
 * Set the configuration
 *
 * @param array $config
 * @return void
 */",
 "/**
 * Connect to SMTP Server
 *
 * @return void
 * @throws SocketException
 */",
 "/**
 * Send authentication
 *
 * @return void
 * @throws SocketException
 */",
 "/**
 * Send emails
 *
 * @return void
 * @throws SocketException
 */",
 "/**
 * Send Data
 *
 * @return void
 * @throws SocketException
 */",
 "/**
 * Disconnect
 *
 * @return void
 * @throws SocketException
 */",
 "/**
 * Helper method to generate socket
 *
 * @return void
 * @throws SocketException
 */",
 "/**
 * Protected method for sending data to SMTP connection
 *
 * @param string $data data to be sent to SMTP server
 * @param string|boolean $checkCode code to check for in server response, false to skip
 * @return void
 * @throws SocketException
 */",
 "/**
 * Send mail using SMTP protocol
 *
 * @package       Cake.Network.Email
 */",
 "/**
 * main method
 *
 * @return void
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Console.Command
 * @since         CakePHP(tm) v 1.2.0.7871
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Action for Access Control Object
 *
 * @package       Cake.Model
 */",
 "/**
 * TheHtmlTestController class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * expose a method as public
 *
 * @param string $options
 * @param string $exclude
 * @param string $insertBefore
 * @param string $insertAfter
 * @return void
 */",
 "/**
 * Get a protected attribute value
 *
 * @param string $attribute
 * @return mixed
 */",
 "/**
 * Html5TestHelper class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testDocType method
 *
 * @return void
 */",
 "/**
 * testLink method
 *
 * @return void
 */",
 "/**
 * testImageTag method
 *
 * @return void
 */",
 "/**
 * test image() with Asset.timestamp
 *
 * @return void
 */",
 "/**
 * Tests creation of an image tag using a theme and asset timestamping
 *
 * @return void
 */",
 "/**
 * test theme assets in main webroot path
 *
 * @return void
 */",
 "/**
 * testStyle method
 *
 * @return void
 */",
 "/**
 * testCssLink method
 *
 * @return void
 */",
 "/**
 * testPluginCssLink method
 *
 * @return void
 */",
 "/**
 * test use of css() and timestamping
 *
 * @return void
 */",
 "/**
 * test use of css() and timestamping with plugin syntax
 *
 * @return void
 */",
 "/**
 * test timestamp enforcement for script tags.
 *
 * @return void
 */",
 "/**
 * test timestamp enforcement for script tags with plugin syntax.
 *
 * @return void
 */",
 "/**
 * test that scripts added with uses() are only ever included once.
 * test script tag generation
 *
 * @return void
 */",
 "/**
 * test that plugin scripts added with uses() are only ever included once.
 * test script tag generation with plugin syntax
 *
 * @return void
 */",
 "/**
 * test that script() works with blocks.
 *
 * @return void
 */",
 "/**
 * Test that Asset.filter.js works.
 *
 * @return void
 */",
 "/**
 * test a script file in the webroot/theme dir.
 *
 * @return void
 */",
 "/**
 * test Script block generation
 *
 * @return void
 */",
 "/**
 * test script tag output buffering when using scriptStart() and scriptEnd();
 *
 * @return void
 */",
 "/**
 * testCharsetTag method
 *
 * @return void
 */",
 "/**
 * testGetCrumb and addCrumb method
 *
 * @return void
 */",
 "/**
 * Test the array form of $startText
 */",
 "/**
 * testNestedList method
 *
 * @return void
 */",
 "/**
 * testMeta method
 *
 * @return void
 */",
 "/**
 * Test the inline and block options for meta()
 */",
 "/**
 * testTableHeaders method
 *
 * @return void
 */",
 "/**
 * testTableCells method
 *
 * @return void
 */",
 "/**
 * testTag method
 *
 * @return void
 */",
 "/**
 * testUseTag method
 *
 * @return void
 */",
 "/**
 * testDiv method
 *
 * @return void
 */",
 "/**
 * testPara method
 *
 * @return void
 */",
 "/**
 * testMedia method
 *
 * @return void
 */",
 "/**
 * testCrumbList method
 *
 *
 * @return void
 */",
 "/**
 * Test getCrumbList startText
 */",
 "/**
 * testLoadConfig method
 *
 * @return void
 */",
 "/**
 * testLoadConfigWrongFile method
 *
 * @return void
 * @expectedException ConfigureException
 */",
 "/**
 * testLoadConfigWrongReader method
 *
 * @return void
 * @expectedException ConfigureException
 */",
 "/**
 * test parsing attributes.
 *
 * @return void
 */",
 "/**
 * HtmlHelperTest class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllConsoleTest class
 *
 * This test group will run all console classes.
 *
 * @package       Cake.Test.Case.Console
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllNetworkTest class
 *
 * This test group will run socket class tests
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllCoreTest class
 *
 * This test group will run all core class tests
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for file.
 *
 * @package       Cake.Test.Fixture
 * @since         CakePHP(tm) v 1.2.0.6879//Correct version number as needed**
 */",
 "/**
 * Access Control Object
 *
 * @package       Cake.Model
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Controller
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * test case startup
 *
 * @return void
 */",
 "/**
 * cleanup after test case.
 *
 * @return void
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test open
 *
 * @return void
 */",
 "/**
 * test write()
 *
 * @return void
 */",
 "/**
 * test reading.
 *
 * @return void
 */",
 "/**
 * test destroy
 *
 * @return void
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test writing to ConsoleOutput
 */",
 "/**
 * Test logging to both ConsoleLog and FileLog
 */",
 "/**
 * ConsoleLogTest class
 *
 * @package       Cake.Test.Case.Log.Engine
 */",
 "/**
 * Constructor
 *
 * @param GenericObjectCollection $collection
 * @param array $settings
 */",
 "/**
 * A generic object class
 */",
 "/**
 * A generic callback
 */",
 "/**
 * First Extension of Generic Object
 */",
 "/**
 * Second Extension of Generic Object
 */",
 "/**
 * Third Extension of Generic Object
 */",
 "/**
 * Loads a generic object
 *
 * @param string $object Object name
 * @param array $settings Settings array
 * @return array List of loaded objects
 */",
 "/**
 * A collection of Generic objects
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test triggering callbacks on loaded helpers
 *
 * @return void
 */",
 "/**
 * test unload()
 *
 * @return void
 */",
 "/**
 * Tests set()
 *
 * @return void
 */",
 "/**
 * creates mock classes for testing
 *
 * @return void
 */",
 "/**
 * test triggering callbacks.
 *
 * @return void
 */",
 "/**
 * test trigger and disabled objects
 *
 * @return void
 */",
 "/**
 * test that the collectReturn option works.
 *
 * @return void
 */",
 "/**
 * test that trigger with break & breakOn works.
 *
 * @return void
 */",
 "/**
 * test that trigger with modParams works.
 *
 * @return void
 */",
 "/**
 * test that setting modParams to an index that doesn\'t exist doesn\'t cause errors.
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * test that returning null doesn\'t modify parameters.
 *
 * @return void
 */",
 "/**
 * test order of callbacks triggering based on priority.
 *
 * @return void
 */",
 "/**
 * test normalizeObjectArray
 *
 * @return void
 */",
 "/**
 * tests that passing an instance of CakeEvent to trigger will prepend the subject to the list of arguments
 *
 * @return void
 */",
 "/**
 * tests that passing an instance of CakeEvent to trigger with omitSubject property
 * will NOT prepend the subject to the list of arguments
 *
 * @return void
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test applying settings in the constructor
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test that challenge headers are sent when no credentials are found.
 *
 * @return void
 */",
 "/**
 * test authenticate success
 *
 * @return void
 */",
 "/**
 * test scope failure.
 *
 * @return void
 */",
 "/**
 * testParseDigestAuthData method
 *
 * @return void
 */",
 "/**
 * test parsing digest information with email addresses
 *
 * @return void
 */",
 "/**
 * test password hashing
 *
 * @return void
 */",
 "/**
 * Test case for DigestAuthentication
 *
 * @package       Cake.Test.Case.Controller.Component.Auth
 */",
 "/**
 * testValidate method
 *
 * @return void
 */",
 "/**
 * testGetRule method
 *
 * @return void
 */",
 "/**
 * testGetRules method
 *
 * @return void
 */",
 "/**
 * testSetRule method
 *
 * @return void
 */",
 "/**
 * testSetRules method
 *
 * @return void
 */",
 "/**
 * Tests getting a rule from the set using array access
 *
 * @return void
 */",
 "/**
 * Tests checking a rule from the set using array access
 *
 * @return void
 */",
 "/**
 * Tests setting a rule in the set using array access
 *
 * @return void
 */",
 "/**
 * Tests unseting a rule from the set using array access
 *
 * @return void
 */",
 "/**
 * Tests it is possible to iterate a validation set object
 *
 * @return void
 */",
 "/**
 * Tests countable interface
 *
 * @return void
 */",
 "/**
 * Test removeRule method
 *
 * @return void
 */",
 "/**
 * CakeValidationSetTest
 *
 * @package       Cake.Test.Case.Model.Validator
 */",
 "/**
 * Create javascript selector for a CSS rule
 *
 * @param string $selector The selector that is targeted
 * @return PrototypeEngineHelper instance of $this. Allows chained methods.
 */",
 "/**
 * Add an event to the script cache. Operates on the currently selected elements.
 *
 * ### Options
 *
 * - `wrap` - Whether you want the callback wrapped in an anonymous function. (defaults true)
 * - `stop` - Whether you want the event to stopped. (defaults true)
 *
 * @param string $type Type of event to bind to the current 946 id
 * @param string $callback The Javascript function you wish to trigger or the function literal
 * @param array $options Options for the event.
 * @return string completed event handler
 */",
 "/**
 * Create a domReady event. This is a special event in many libraries
 *
 * @param string $functionBody The code to run on domReady
 * @return string completed domReady method
 */",
 "/**
 * Create an iteration over the current selection result.
 *
 * @param string $callback The function body you wish to apply during the iteration.
 * @return string completed iteration
 */",
 "/**
 * Trigger an Effect.
 *
 * ### Note: Effects require Scriptaculous to be loaded.
 *
 * @param string $name The name of the effect to trigger.
 * @param array $options Array of options for the effect.
 * @return string completed string with effect.
 * @see JsBaseEngineHelper::effect()
 */",
 "/**
 * Create an Ajax or Ajax.Updater call.
 *
 * @param string|array $url
 * @param array $options
 * @return string The completed ajax call.
 */",
 "/**
 * Create a sortable element.
 *
 * #### Note: Requires scriptaculous to be loaded.
 *
 * The scriptaculous implementation of sortables does not support the \'start\'
 * and \'distance\' options.
 *
 * @param array $options Array of options for the sortable.
 * @return string Completed sortable script.
 * @see JsBaseEngineHelper::sortable() for options list.
 */",
 "/**
 * Create a Draggable element.
 *
 * #### Note: Requires scriptaculous to be loaded.
 *
 * @param array $options Array of options for the draggable.
 * @return string Completed draggable script.
 * @see JsBaseEngineHelper::draggable() for options list.
 */",
 "/**
 * Create a Droppable element.
 *
 * #### Note: Requires scriptaculous to be loaded.
 *
 * @param array $options Array of options for the droppable.
 * @return string Completed droppable script.
 * @see JsBaseEngineHelper::droppable() for options list.
 */",
 "/**
 * Creates a slider control widget.
 *
 * ### Note: Requires scriptaculous to be loaded.
 *
 * @param array $options Array of options for the slider.
 * @return string Completed slider script.
 * @see JsBaseEngineHelper::slider() for options list.
 */",
 "/**
 * Serialize the form attached to $selector.
 *
 * @param array $options Array of options.
 * @return string Completed serializeForm() snippet
 * @see JsBaseEngineHelper::serializeForm()
 */",
 "/**
 * Prototype Engine Helper for JsHelper
 *
 * Provides Prototype specific Javascript for JsHelper. Requires at least
 * Prototype 1.6
 *
 * @package       Cake.View.Helper
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Magic set method for backward compatibility.
 *
 * Used by TimeHelper to modify static variables in CakeTime
 */",
 "/**
 * Magic set method for backward compatibility.
 *
 * Used by TimeHelper to get static variables in CakeTime
 */",
 "/**
 * Converts a string representing the format for the function strftime and returns a
 * windows safe and i18n aware format.
 *
 * @param string $format Format with specifiers for strftime function.
 *    Accepts the special specifier %S which mimics the modifier S for date()
 * @param string $time UNIX timestamp
 * @return string windows safe and date() function compatible format for strftime
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Auxiliary function to translate a matched specifier element from a regular expression into
 * a windows safe and i18n aware specifier
 *
 * @param array $specifier match from regular expression
 * @return string converted element
 */",
 "/**
 * Converts given time (in server\'s time zone) to user\'s local time, given his/her timezone.
 *
 * @param string $serverTime UNIX timestamp
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return integer UNIX timestamp
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a timezone object from a string or the user\'s timezone object
 *
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * 	If null it tries to get timezone from \'Config.timezone\' config var
 * @return DateTimeZone Timezone object
 */",
 "/**
 * Returns server\'s offset from GMT in seconds.
 *
 * @return integer Offset
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a UNIX timestamp, given either a UNIX timestamp or a valid strtotime() date string.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return string Parsed timestamp
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a nicely formatted date string for given Datetime string.
 *
 * See http://php.net/manual/en/function.strftime.php for information on formatting
 * using locale strings.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @param string $format The format to use. If null, `TimeHelper::$niceFormat` is used
 * @return string Formatted date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a formatted descriptive date string for given datetime string.
 *
 * If the given date is today, the returned string could be \"Today, 16:54\".
 * If the given date is tomorrow, the returned string could be \"Tomorrow, 16:54\".
 * If the given date was yesterday, the returned string could be \"Yesterday, 16:54\".
 * If the given date is within next or last week, the returned string could be \"On Thursday, 16:54\".
 * If $dateString\'s year is the current year, the returned string does not
 * include mention of the year.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return string Described, relative date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a partial SQL string to search for all records between two dates.
 *
 * @param integer|string|DateTime $begin UNIX timestamp, strtotime() valid string or DateTime object
 * @param integer|string|DateTime $end UNIX timestamp, strtotime() valid string or DateTime object
 * @param string $fieldName Name of database field to compare with
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return string Partial SQL string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a partial SQL string to search for all records between two times
 * occurring on the same day.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string $fieldName Name of database field to compare with
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return string Partial SQL string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns true if given datetime string is today.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return boolean True if datetime string is today
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * Returns true if given datetime string is within this week.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return boolean True if datetime string is within current week
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * Returns true if given datetime string is within this month
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return boolean True if datetime string is within current month
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * Returns true if given datetime string is within current year.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return boolean True if datetime string is within current year
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * Returns true if given datetime string was yesterday.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return boolean True if datetime string was yesterday
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 *
 */",
 "/**
 * Returns true if given datetime string is tomorrow.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return boolean True if datetime string was yesterday
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * Returns the quarter
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param boolean $range if true returns a range in Y-m-d format
 * @return mixed 1, 2, 3, or 4 quarter of year or array if $range true
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a UNIX timestamp from a textual datetime description. Wrapper for PHP function strtotime().
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return integer Unix timestamp
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a formatted date in server\'s timezone.
 *
 * If a DateTime object is given or the dateString has a timezone
 * segment, the timezone parameter will be ignored.
 *
 * If no timezone parameter is given and no DateTime object, the passed $dateString will be
 * considered to be in the UTC timezone.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @param string $format date format string
 * @return mixed Formatted date
 */",
 "/**
 * Returns a date formatted for Atom RSS feeds.
 *
 * @param string $dateString Datetime string or Unix timestamp
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return string Formatted date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Formats date for RSS feeds
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return string Formatted date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns either a relative date or a formatted date depending
 * on the difference between the current time and given datetime.
 * $datetime should be in a *strtotime* - parsable format, like MySQL\'s datetime datatype.
 *
 * ### Options:
 *
 * - `format` => a fall back format if the relative time is longer than the duration specified by end
 * - `accuracy` => Specifies how accurate the date should be described (array)
 *    - year =>   The format if years > 0   (default \"day\")
 *    - month =>  The format if months > 0  (default \"day\")
 *    - week =>   The format if weeks > 0   (default \"day\")
 *    - day =>    The format if weeks > 0   (default \"hour\")
 *    - hour =>   The format if hours > 0   (default \"minute\")
 *    - minute => The format if minutes > 0 (default \"minute\")
 *    - second => The format if seconds > 0 (default \"second\")
 * - `end` => The end of relative time telling
 * - `userOffset` => Users offset from GMT (in hours) *Deprecated* use timezone intead.
 * - `timezone` => The user timezone the timestamp should be formatted in.
 *
 * Relative dates look something like this:
 *
 * - 3 weeks, 4 days ago
 * - 15 seconds ago
 *
 * Default date formatting is d/m/yy e.g: on 18/2/09
 *
 * The returned string includes \'ago\' or \'on\' and assumes you\'ll properly add a word
 * like \'Posted \' before the function output.
 *
 * NOTE: If the difference is one week or more, the lowest level of accuracy is day
 *
 * @param integer|string|DateTime $dateTime Datetime UNIX timestamp, strtotime() valid string or DateTime object
 * @param array $options Default format if timestamp is used in $dateString
 * @return string Relative time string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns true if specified datetime was within the interval specified, else false.
 *
 * @param string|integer $timeInterval the numeric value with space then time type.
 *    Example of valid types: 6 hours, 2 days, 1 minute.
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * Returns true if specified datetime is within the interval specified, else false.
 *
 * @param string|integer $timeInterval the numeric value with space then time type.
 *    Example of valid types: 6 hours, 2 days, 1 minute.
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * Returns gmt as a UNIX timestamp.
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @return integer UNIX timestamp
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a formatted date string, given either a UNIX timestamp or a valid strtotime() date string.
 * This function also accepts a time string and a format string as first and second parameters.
 * In that case this function behaves as a wrapper for TimeHelper::i18nFormat()
 *
 * ## Examples:
 *	{{{
 *		CakeTime::format(\'2012-02-15\', \'%m-%d-%Y\'); // returns 02-15-2012
 *		CakeTime::format(\'2012-02-15 23:01:01\', \'%c\'); // returns preferred date and time based on configured locale
 *		CakeTime::format(\'0000-00-00\', \'%d-%m-%Y\', \'N/A\'); // return N/A becuase an invalid date was passed
 *		CakeTime::format(\'2012-02-15 23:01:01\', \'%c\', \'N/A\', \'America/New_York\'); // converts passed date to timezone
 *	}}}
 *
 * @param integer|string|DateTime $date UNIX timestamp, strtotime() valid string or DateTime object (or a date format string)
 * @param integer|string|DateTime $format date format string (or UNIX timestamp, strtotime() valid string or DateTime object)
 * @param boolean|string $default if an invalid date is passed it will output supplied default value. Pass false if you want raw conversion value
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return string Formatted date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Returns a formatted date string, given either a UNIX timestamp or a valid strtotime() date string.
 * It take in account the default date format for the current language if a LC_TIME file is used.
 *
 * @param integer|string|DateTime $date UNIX timestamp, strtotime() valid string or DateTime object
 * @param string $format strftime format string.
 * @param boolean|string $default if an invalid date is passed it will output supplied default value. Pass false if you want raw conversion value
 * @param string|DateTimeZone $timezone Timezone string or DateTimeZone object
 * @return string Formatted and translated date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Get list of timezone identifiers
 *
 * @param integer|string $filter A regex to filter identifer
 * 	Or one of DateTimeZone class constants (PHP 5.3 and above)
 * @param string $country A two-letter ISO 3166-1 compatible country code.
 * 	This option is only used when $filter is set to DateTimeZone::PER_COUNTRY (available only in PHP 5.3 and above)
 * @param boolean $group If true (default value) groups the identifiers list by primary region
 * @return array List of timezone identifiers
 * @since 2.2
 */",
 "/**
 * Multibyte wrapper for strftime.
 *
 * Handles utf8_encoding the result of strftime when necessary.
 *
 * @param string $format Format string.
 * @param integer $date Timestamp to format.
 * @return string formatted string with correct encoding.
 */",
 "/**
 * Time Helper class for easy use of time data.
 *
 * Manipulation of time data.
 *
 * @package       Cake.Utility
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testReadAndWriteCache method
 *
 * @return void
 */",
 "/**
 * testExpiry method
 *
 * @return void
 */",
 "/**
 * testDeleteCache method
 *
 * @return void
 */",
 "/**
 * testDecrement method
 *
 * @return void
 */",
 "/**
 * testIncrement method
 *
 * @return void
 */",
 "/**
 * test the clearing of cache keys
 *
 * @return void
 */",
 "/**
 * Tests that configuring groups for stored keys return the correct values when read/written
 * Shows that altering the group value is equivalent to deleting all keys under the same
 * group
 *
 * @return void
 */",
 "/**
 * Tests that deleteing from a groups-enabled config is possible
 *
 * @return void
 */",
 "/**
 * Test clearing a cache group
 *
 * @return void
 **/",
 "/**
 * WincacheEngineTest class
 *
 * @package       Cake.Test.Case.Cache.Engine
 */",
 "/**
 * Constructs a new File Logger.
 *
 * Config
 *
 * - `types` string or array, levels the engine is interested in
 * - `scopes` string or array, scopes the engine is interested in
 * - `file` log file name
 * - `path` the path to save logs on.
 *
 * @param array $options Options for the FileLog, see above.
 */",
 "/**
 * Implements writing to log files.
 *
 * @param string $type The type of log you are making.
 * @param string $message The message you want to log.
 * @return boolean success of write.
 */",
 "/**
 * File Storage stream for Logging.  Writes logs to different files
 * based on the type of log it is.
 *
 * @package       Cake.Log.Engine
 */",
 "/**
 * Initialize SimpleXMLElement or DOMDocument from a given XML string, file path, URL or array.
 *
 * ### Usage:
 *
 * Building XML from a string:
 *
 * `$xml = Xml::build(\'<example>text</example>\');`
 *
 * Building XML from string (output DOMDocument):
 *
 * `$xml = Xml::build(\'<example>text</example>\', array(\'return\' => \'domdocument\'));`
 *
 * Building XML from a file path:
 *
 * `$xml = Xml::build(\'/path/to/an/xml/file.xml\');`
 *
 * Building from a remote URL:
 *
 * `$xml = Xml::build(\'http://example.com/example.xml\');`
 *
 * Building from an array:
 *
 * {{{
 * 	$value = array(
 * 		\'tags\' => array(
 * 			\'tag\' => array(
 * 				array(
 * 					\'id\' => \'1\',
 * 					\'name\' => \'defect\'
 * 				),
 * 				array(
 * 					\'id\' => \'2\',
 * 					\'name\' => \'enhancement\'
 *				)
 * 			)
 * 		)
 * 	);
 * $xml = Xml::build($value);
 * }}}
 *
 * When building XML from an array ensure that there is only one top level element.
 *
 * ### Options
 *
 * - `return` Can be \'simplexml\' to return object of SimpleXMLElement or \'domdocument\' to return DOMDocument.
 * - If using array as input, you can pass `options` from Xml::fromArray.
 *
 * @param string|array $input XML string, a path to a file, an URL or an array
 * @param array $options The options to use
 * @return SimpleXMLElement|DOMDocument SimpleXMLElement or DOMDocument
 * @throws XmlException
 */",
 "/**
 * Transform an array into a SimpleXMLElement
 *
 * ### Options
 *
 * - `format` If create childs (\'tags\') or attributes (\'attribute\').
 * - `version` Version of XML document. Default is 1.0.
 * - `encoding` Encoding of XML document. If null remove from XML header. Default is the some of application.
 * - `return` If return object of SimpleXMLElement (\'simplexml\') or DOMDocument (\'domdocument\'). Default is SimpleXMLElement.
 *
 * Using the following data:
 *
 * {{{
 * $value = array(
 *    \'root\' => array(
 *        \'tag\' => array(
 *            \'id\' => 1,
 *            \'value\' => \'defect\',
 *            \'@\' => \'description\'
 *         )
 *     )
 * );
 * }}}
 *
 * Calling `Xml::fromArray($value, \'tags\');`  Will generate:
 *
 * `<root><tag><id>1</id><value>defect</value>description</tag></root>`
 *
 * And calling `Xml::fromArray($value, \'attribute\');` Will generate:
 *
 * `<root><tag id=\"1\" value=\"defect\">description</tag></root>`
 *
 * @param array $input Array with data
 * @param array $options The options to use
 * @return SimpleXMLElement|DOMDocument SimpleXMLElement or DOMDocument
 * @throws XmlException
 */",
 "/**
 * Recursive method to create childs from array
 *
 * @param DOMDocument $dom Handler to DOMDocument
 * @param DOMElement $node Handler to DOMElement (child)
 * @param array $data Array of data to append to the $node.
 * @param string $format Either \'attribute\' or \'tags\'.  This determines where nested keys go.
 * @return void
 * @throws XmlException
 */",
 "/**
 * Helper to _fromArray(). It will create childs of arrays
 *
 * @param array $data Array with informations to create childs
 * @return void
 */",
 "/**
 * Returns this XML structure as a array.
 *
 * @param SimpleXMLElement|DOMDocument|DOMNode $obj SimpleXMLElement, DOMDocument or DOMNode instance
 * @return array Array representation of the XML structure.
 * @throws XmlException
 */",
 "/**
 * Recursive method to toArray
 *
 * @param SimpleXMLElement $xml SimpleXMLElement object
 * @param array $parentData Parent array with data
 * @param string $ns Namespace of current child
 * @param array $namespaces List of namespaces in XML
 * @return void
 */",
 "/**
 * XML handling for Cake.
 *
 * The methods in these classes enable the datasources that use XML to work.
 *
 * @package       Cake.Utility
 */",
 "/**
 * Send mail
 *
 * @params CakeEmail $email
 * @return array
 */",
 "/**
 * Set the config
 *
 * @param array $config
 * @return array Returns configs
 */",
 "/**
 * Help to convert headers in string
 *
 * @param array $headers Headers in format key => value
 * @param string $eol
 * @return string
 */",
 "/**
 * Abstract transport for sending email
 *
 * @package       Cake.Network.Email
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Helper to change the socket
 *
 * @param object $socket
 * @return void
 */",
 "/**
 * Helper to change the CakeEmail
 *
 * @param object $cakeEmail
 * @return void
 */",
 "/**
 * Disabled the socket change
 *
 * @return void
 */",
 "/**
 * Magic function to call protected methods
 *
 * @param string $method
 * @param string $args
 * @return mixed
 */",
 "/**
 * Help to test SmtpTransport
 *
 */",
 "/**
 * Setup
 *
 * @return void
 */",
 "/**
 * testConnectEhlo method
 *
 * @return void
 */",
 "/**
 * testConnectHelo method
 *
 * @return void
 */",
 "/**
 * testConnectFail method
 *
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * testAuth method
 *
 * @return void
 */",
 "/**
 * testAuthNoAuth method
 *
 * @return void
 */",
 "/**
 * testRcpt method
 *
 * @return void
 */",
 "/**
 * testSendData method
 *
 * @return void
 */",
 "/**
 * testQuit method
 *
 * @return void
 */",
 "/**
 * Test case
 *
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * ThemePosts2Controller class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * renderElement method
 *
 * @param string $name
 * @param array $params
 * @return void
 */",
 "/**
 * getViewFileName method
 *
 * @param string $name
 * @return void
 */",
 "/**
 * getLayoutFileName method
 *
 * @param string $name
 * @return void
 */",
 "/**
 * TestTheme2View class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testPluginGetTemplate method
 *
 * @return void
 */",
 "/**
 * testGetTemplate method
 *
 * @return void
 */",
 "/**
 * testMissingView method
 *
 * @expectedException MissingViewException
 * @return void
 */",
 "/**
 * testMissingLayout method
 *
 * @expectedException MissingLayoutException
 * @return void
 */",
 "/**
 * test memory leaks that existed in _paths at one point.
 *
 * @return void
 */",
 "/**
 * ThemeViewTest class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * Initiate Tree behavior
 *
 * @param Model $Model instance of model
 * @param array $config array of configuration settings.
 * @return void
 */",
 "/**
 * After save method. Called after all saves
 *
 * Overridden to transparently manage setting the lft and rght fields if and only if the parent field is included in the
 * parameters to be saved.
 *
 * @param Model $Model Model instance.
 * @param boolean $created indicates whether the node just saved was created or updated
 * @return boolean true on success, false on failure
 */",
 "/**
 * Runs before a find() operation
 *
 * @param Model $Model	Model using the behavior
 * @param array $query Query parameters as set by cake
 * @return array
 */",
 "/**
 * Stores the record about to be deleted.
 *
 * This is used to delete child nodes in the afterDelete.
 *
 * @param Model $Model Model instance
 * @param boolean $cascade
 * @return boolean
 */",
 "/**
 * After delete method.
 *
 * Will delete the current node and all children using the deleteAll method and sync the table
 *
 * @param Model $Model Model instance
 * @return boolean true to continue, false to abort the delete
 */",
 "/**
 * Before save method. Called before all saves
 *
 * Overridden to transparently manage setting the lft and rght fields if and only if the parent field is included in the
 * parameters to be saved. For newly created nodes with NO parent the left and right field values are set directly by
 * this method bypassing the setParent logic.
 *
 * @since         1.2
 * @param Model $Model Model instance
 * @return boolean true to continue, false to abort the save
 */",
 "/**
 * Get the number of child nodes
 *
 * If the direct parameter is set to true, only the direct children are counted (based upon the parent_id field)
 * If false is passed for the id parameter, all top level nodes are counted, or all nodes are counted.
 *
 * @param Model $Model Model instance
 * @param integer|string|boolean $id The ID of the record to read or false to read all top level nodes
 * @param boolean $direct whether to count direct, or all, children
 * @return integer number of child nodes
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::childCount
 */",
 "/**
 * Get the child nodes of the current model
 *
 * If the direct parameter is set to true, only the direct children are returned (based upon the parent_id field)
 * If false is passed for the id parameter, top level, or all (depending on direct parameter appropriate) are counted.
 *
 * @param Model $Model Model instance
 * @param integer|string $id The ID of the record to read
 * @param boolean $direct whether to return only the direct, or all, children
 * @param string|array $fields Either a single string of a field name, or an array of field names
 * @param string $order SQL ORDER BY conditions (e.g. \"price DESC\" or \"name ASC\") defaults to the tree order
 * @param integer $limit SQL LIMIT clause, for calculating items per page.
 * @param integer $page Page number, for accessing paged data
 * @param integer $recursive The number of levels deep to fetch associated records
 * @return array Array of child nodes
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::children
 */",
 "/**
 * A convenience method for returning a hierarchical array used for HTML select boxes
 *
 * @param Model $Model Model instance
 * @param string|array $conditions SQL conditions as a string or as an array(\'field\' =>\'value\',...)
 * @param string $keyPath A string path to the key, i.e. \"{n}.Post.id\"
 * @param string $valuePath A string path to the value, i.e. \"{n}.Post.title\"
 * @param string $spacer The character or characters which will be repeated
 * @param integer $recursive The number of levels deep to fetch associated records
 * @return array An associative array of records, where the id is the key, and the display field is the value
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::generateTreeList
 */",
 "/**
 * Get the parent node
 *
 * reads the parent id and returns this node
 *
 * @param Model $Model Model instance
 * @param integer|string $id The ID of the record to read
 * @param string|array $fields
 * @param integer $recursive The number of levels deep to fetch associated records
 * @return array|boolean Array of data for the parent node
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::getParentNode
 */",
 "/**
 * Get the path to the given node
 *
 * @param Model $Model Model instance
 * @param integer|string $id The ID of the record to read
 * @param string|array $fields Either a single string of a field name, or an array of field names
 * @param integer $recursive The number of levels deep to fetch associated records
 * @return array Array of nodes from top most parent to current node
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::getPath
 */",
 "/**
 * Reorder the node without changing the parent.
 *
 * If the node is the last child, or is a top level node with no subsequent node this method will return false
 *
 * @param Model $Model Model instance
 * @param integer|string $id The ID of the record to move
 * @param integer|boolean $number how many places to move the node or true to move to last position
 * @return boolean true on success, false on failure
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::moveDown
 */",
 "/**
 * Reorder the node without changing the parent.
 *
 * If the node is the first child, or is a top level node with no previous node this method will return false
 *
 * @param Model $Model Model instance
 * @param integer|string $id The ID of the record to move
 * @param integer|boolean $number how many places to move the node, or true to move to first position
 * @return boolean true on success, false on failure
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::moveUp
 */",
 "/**
 * Recover a corrupted tree
 *
 * The mode parameter is used to specify the source of info that is valid/correct. The opposite source of data
 * will be populated based upon that source of info. E.g. if the MPTT fields are corrupt or empty, with the $mode
 * \'parent\' the values of the parent_id field will be used to populate the left and right fields. The missingParentAction
 * parameter only applies to \"parent\" mode and determines what to do if the parent field contains an id that is not present.
 *
 * @todo Could be written to be faster, *maybe*. Ideally using a subquery and putting all the logic burden on the DB.
 * @param Model $Model Model instance
 * @param string $mode parent or tree
 * @param string|integer $missingParentAction \'return\' to do nothing and return, \'delete\' to
 * delete, or the id of the parent to set as the parent_id
 * @return boolean true on success, false on failure
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::recover
 */",
 "/**
 * Reorder method.
 *
 * Reorders the nodes (and child nodes) of the tree according to the field and direction specified in the parameters.
 * This method does not change the parent of any node.
 *
 * Requires a valid tree, by default it verifies the tree before beginning.
 *
 * Options:
 *
 * - \'id\' id of record to use as top node for reordering
 * - \'field\' Which field to use in reordering defaults to displayField
 * - \'order\' Direction to order either DESC or ASC (defaults to ASC)
 * - \'verify\' Whether or not to verify the tree before reorder. defaults to true.
 *
 * @param Model $Model Model instance
 * @param array $options array of options to use in reordering.
 * @return boolean true on success, false on failure
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::reorder
 */",
 "/**
 * Remove the current node from the tree, and reparent all children up one level.
 *
 * If the parameter delete is false, the node will become a new top level node. Otherwise the node will be deleted
 * after the children are reparented.
 *
 * @param Model $Model Model instance
 * @param integer|string $id The ID of the record to remove
 * @param boolean $delete whether to delete the node after reparenting children (if any)
 * @return boolean true on success, false on failure
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::removeFromTree
 */",
 "/**
 * Check if the current tree is valid.
 *
 * Returns true if the tree is valid otherwise an array of (type, incorrect left/right index, message)
 *
 * @param Model $Model Model instance
 * @return mixed true if the tree is valid or empty, otherwise an array of (error type [index, node],
 *  [incorrect left/right index,node id], message)
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html#TreeBehavior::verify
 */",
 "/**
 * Sets the parent of the given node
 *
 * The force parameter is used to override the \"don\'t change the parent to the current parent\" logic in the event
 * of recovering a corrupted table, or creating new nodes. Otherwise it should always be false. In reality this
 * method could be private, since calling save with parent_id set also calls setParent
 *
 * @param Model $Model Model instance
 * @param integer|string $parentId
 * @param boolean $created
 * @return boolean true on success, false on failure
 */",
 "/**
 * get the maximum index value in the table.
 *
 * @param Model $Model
 * @param string $scope
 * @param string $right
 * @param integer $recursive
 * @param boolean $created
 * @return integer
 */",
 "/**
 * get the minimum index value in the table.
 *
 * @param Model $Model
 * @param string $scope
 * @param string $left
 * @param integer $recursive
 * @return integer
 */",
 "/**
 * Table sync method.
 *
 * Handles table sync operations, Taking account of the behavior scope.
 *
 * @param Model $Model
 * @param integer $shift
 * @param string $dir
 * @param array $conditions
 * @param boolean $created
 * @param string $field
 * @return void
 */",
 "/**
 * Tree Behavior.
 *
 * Enables a model object to act as a node-based tree. Using Modified Preorder Tree Traversal
 *
 * @see http://en.wikipedia.org/wiki/Tree_traversal
 * @package       Cake.Model.Behavior
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/tree.html
 */",
 "/**
 * Adds all the files in a directory to the test suite. Does not recurse through directories.
 *
 * @param string $directory The directory to add tests from.
 * @return void
 */",
 "/**
 * Recursively adds all the files in a directory to the test suite.
 *
 * @param string $directory The directory subtree to add tests from.
 * @return void
 */",
 "/**
 * A class to contain test cases and run them with shared fixtures
 *
 * @package       Cake.TestSuite
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 * @param Model $Model A reference to the Model the Validator is attached to
 */",
 "/**
 * Returns true if all fields pass validation. Will validate hasAndBelongsToMany associations
 * that use the \'with\' key as well. Since `Model::_saveMulti` is incapable of exiting a save operation.
 *
 * Will validate the currently set data.  Use `Model::set()` or `Model::create()` to set the active data.
 *
 * @param array $options An optional array of custom options to be made available in the beforeValidate callback
 * @return boolean True if there are no errors
 */",
 "/**
 * Validates a single record, as well as all its directly associated records.
 *
 * #### Options
 *
 * - atomic: If true (default), returns boolean. If false returns array.
 * - fieldList: Equivalent to the $fieldList parameter in Model::save()
 * - deep: If set to true, not only directly associated data , but deeper nested associated data is validated as well.
 *
 * Warning: This method could potentially change the passed argument `$data`,
 * If you do not want this to happen, make a copy of `$data` before passing it
 * to this method
 *
 * @param array $data Record data to validate. This should be an array indexed by association name.
 * @param array $options Options to use when validating record data (see above), See also $options of validates().
 * @return array|boolean If atomic: True on success, or false on failure.
 *    Otherwise: array similar to the $data array passed, but values are set to true/false
 *    depending on whether each record validated successfully.
 */",
 "/**
 * Validates multiple individual records for a single model
 *
 * #### Options
 *
 * - atomic: If true (default), returns boolean. If false returns array.
 * - fieldList: Equivalent to the $fieldList parameter in Model::save()
 * - deep: If set to true, all associated data will be validated as well.
 *
 * Warning: This method could potentially change the passed argument `$data`,
 * If you do not want this to happen, make a copy of `$data` before passing it
 * to this method
 *
 * @param array $data Record data to validate. This should be a numerically-indexed array
 * @param array $options Options to use when validating record data (see above), See also $options of validates().
 * @return boolean True on success, or false on failure.
 * @return mixed If atomic: True on success, or false on failure.
 *    Otherwise: array similar to the $data array passed, but values are set to true/false
 *    depending on whether each record validated successfully.
 */",
 "/**
 * Returns an array of fields that have failed validation. On the current model. This method will
 * actually run validation rules over data, not just return the messages.
 *
 * @param string $options An optional array of custom options to be made available in the beforeValidate callback
 * @return array Array of invalid fields
 * @see ModelValidator::validates()
 */",
 "/**
 * Marks a field as invalid, optionally setting a message explaining
 * why the rule failed
 *
 * @param string $field The name of the field to invalidate
 * @param string $message Validation message explaining why the rule failed, defaults to true.
 * @return void
 */",
 "/**
 * Gets all possible custom methods from the Model and attached Behaviors
 * to be used as validators
 *
 * @return array List of callables to be used as validation methods
 */",
 "/**
 * Returns a CakeValidationSet object containing all validation rules for a field, if no
 * params are passed then it returns an array with all CakeValidationSet objects for each field
 *
 * @param string $name [optional] The fieldname to fetch. Defaults to null.
 * @return CakeValidationSet|array
 */",
 "/**
 * Sets the CakeValidationSet objects from the `Model::$validate` property
 * If `Model::$validate` is not set or empty, this method returns false. True otherwise.
 *
 * @return boolean true if `Model::$validate` was processed, false otherwise
 */",
 "/**
 * Sets the I18n domain for validation messages. This method is chainable.
 *
 * @param string $validationDomain [optional] The validation domain to be used.
 * @return ModelValidator
 */",
 "/**
 * Gets the model related to this validator
 *
 * @return Model
 */",
 "/**
 * Processes the Model\'s whitelist or passed fieldList and returns the list of fields
 * to be validated
 *
 * @param array $fieldList list of fields to be used for validation
 * @return array List of validation rules to be applied
 */",
 "/**
 * Runs validation for hasAndBelongsToMany associations that have \'with\' keys
 * set and data in the data set.
 *
 * @param array $options Array of options to use on Validation of with models
 * @return boolean Failure of validation on with models.
 * @see Model::validates()
 */",
 "/**
 * Propagates beforeValidate event
 *
 * @param array $options
 * @return boolean
 */",
 "/**
 * Returns wheter a rule set is defined for a field or not
 *
 * @param string $field name of the field to check
 * @return boolean
 **/",
 "/**
 * Returns the rule set for a field
 *
 * @param string $field name of the field to check
 * @return CakeValidationSet
 **/",
 "/**
 * Sets the rule set for a field
 *
 * @param string $field name of the field to set
 * @param array|CakeValidationSet $rules set of rules to apply to field
 * @return void
 **/",
 "/**
 * Unsets the rulset for a field
 *
 * @param string $field name of the field to unset
 * @return void
 **/",
 "/**
 * Returns an iterator for each of the fields to be validated
 *
 * @return ArrayIterator
 **/",
 "/**
 * Returns the number of fields having validation rules
 *
 * @return int
 **/",
 "/**
 * Adds a new rule to a field\'s rule set. If second argumet is an array or instance of
 * CakeValidationSet then rules list for the field will be replaced with second argument and
 * third argument will be ignored.
 *
 * ## Example:
 *
 * {{{
 *		$validator
 *			->add(\'title\', \'required\', array(\'rule\' => \'notEmpty\', \'required\' => true))
 *			->add(\'user_id\', \'valid\', array(\'rule\' => \'numeric\', \'message\' => \'Invalid User\'))
 *
 *		$validator->add(\'password\', array(
 *			\'size\' => array(\'rule\' => array(\'between\', 8, 20)),
 *			\'hasSpecialCharacter\' => array(\'rule\' => \'validateSpecialchar\', \'message\' => \'not valid\')
 *		));
 * }}}
 *
 * @param string $field The name of the field from wich the rule will be removed
 * @param string|array|CakeValidationSet $name name of the rule to be added or list of rules for the field
 * @param array|CakeValidationRule $rule or list of rules to be added to the field\'s rule set
 * @return ModelValidator this instance
 **/",
 "/**
 * Removes a rule from the set by its name
 *
 * ## Example:
 *
 * {{{
 *		$validator
 *			->remove(\'title\', \'required\')
 *			->remove(\'user_id\')
 * }}}
 *
 * @param string $field The name of the field from wich the rule will be removed
 * @param string $rule the name of the rule to be removed
 * @return ModelValidator this instance
 **/",
 "/**
 * ModelValidator object encapsulates all methods related to data validations for a model
 * It also provides an API to dynamically change validation rules for each model field.
 *
 * Implements ArrayAccess to easily modify rules as usually done with `Model::$validate`
 * definition array
 *
 * @package       Cake.Model
 * @link          http://book.cakephp.org/2.0/en/data-validation.html
 */",
 "/**
 * Build and construct a new ini file parser. The parser can be used to read
 * ini files that are on the filesystem.
 *
 * @param string $path Path to load ini config files from.
 * @param string $section Only get one section, leave null to parse and fetch
 *     all sections in the ini file.
 */",
 "/**
 * Read an ini file and return the results as an array.
 *
 * @param string $file Name of the file to read. The chosen file
 *    must be on the reader\'s path.
 * @return array
 * @throws ConfigureException
 */",
 "/**
 * parses nested values out of keys.
 *
 * @param array $values Values to be exploded.
 * @return array Array of values exploded
 */",
 "/**
 * Dumps the state of Configure data into an ini formatted string.
 *
 * @param string $filename The filename on $this->_path to save into.
 * @param array $data The data to convert to ini file.
 * @return int Bytes saved.
 */",
 "/**
 * Converts a value into the ini equivalent
 *
 * @param mixed $value to export.
 * @return string String value for ini file.
 */",
 "/**
 * Ini file configuration engine.
 *
 * Since IniReader uses parse_ini_file underneath, you should be aware that this
 * class shares the same behavior, especially with regards to boolean and null values.
 *
 * In addition to the native `parse_ini_file` features, IniReader also allows you
 * to create nested array structures through usage of `.` delimited names.  This allows
 * you to create nested arrays structures in an ini config file. For example:
 *
 * `db.password = secret` would turn into `array(\'db\' => array(\'password\' => \'secret\'))`
 *
 * You can nest properties as deeply as needed using `.`\'s. In addition to using `.` you
 * can use standard ini section notation to create nested structures:
 *
 * {{{
 * [section]
 * key = value
 * }}}
 *
 * Once loaded into Configure, the above would be accessed using:
 *
 * `Configure::read(\'section.key\');
 *
 * You can combine `.` separated values with sections to create more deeply
 * nested structures.
 *
 * IniReader also manipulates how the special ini values of
 * \'yes\', \'no\', \'on\', \'off\', \'null\' are handled. These values will be
 * converted to their boolean equivalents.
 *
 * @package       Cake.Configure
 * @see http://php.net/parse_ini_file
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor.
 *
 * @param array $config Socket configuration, which will be merged with the base configuration
 * @see CakeSocket::$_baseConfig
 */",
 "/**
 * Connect the socket to the given host and port.
 *
 * @return boolean Success
 * @throws SocketException
 */",
 "/**
 * Get the host name of the current connection.
 *
 * @return string Host name
 */",
 "/**
 * Get the IP address of the current connection.
 *
 * @return string IP address
 */",
 "/**
 * Get all IP addresses associated with the current connection.
 *
 * @return array IP addresses
 */",
 "/**
 * Get the last error as a string.
 *
 * @return string Last error
 */",
 "/**
 * Set the last error.
 *
 * @param integer $errNum Error code
 * @param string $errStr Error string
 * @return void
 */",
 "/**
 * Write data to the socket.
 *
 * @param string $data The data to write to the socket
 * @return boolean Success
 */",
 "/**
 * Read data from the socket. Returns false if no data is available or no connection could be
 * established.
 *
 * @param integer $length Optional buffer length to read; defaults to 1024
 * @return mixed Socket data
 */",
 "/**
 * Disconnect the socket from the current connection.
 *
 * @return boolean Success
 */",
 "/**
 * Destructor, used to disconnect from current connection.
 *
 */",
 "/**
 * Resets the state of this Socket instance to it\'s initial state (before Object::__construct got executed)
 *
 * @param array $state Array with key and values to reset
 * @return boolean True on success
 */",
 "/**
 * Cake network socket connection class.
 *
 * Core base class for network communication.
 *
 * @package       Cake.Network
 */",
 "/**
 * Set as the default exception handler by the CakePHP bootstrap process.
 *
 * This will either use custom exception renderer class if configured,
 * or use the default ExceptionRenderer.
 *
 * @param Exception $exception
 * @return void
 * @see http://php.net/manual/en/function.set-exception-handler.php
 */",
 "/**
 * Set as the default error handler by CakePHP. Use Configure::write(\'Error.handler\', $callback), to use your own
 * error handling methods.  This function will use Debugger to display errors when debug > 0.  And
 * will log errors to CakeLog, when debug == 0.
 *
 * You can use Configure::write(\'Error.level\', $value); to set what type of errors will be handled here.
 * Stack traces for errors can be enabled with Configure::write(\'Error.trace\', true);
 *
 * @param integer $code Code of error
 * @param string $description Error description
 * @param string $file File on which error occurred
 * @param integer $line Line that triggered the error
 * @param array $context Context
 * @return boolean true if error was handled
 */",
 "/**
 * Generate an error page when some fatal error happens.
 *
 * @param integer $code Code of error
 * @param string $description Error description
 * @param string $file File on which error occurred
 * @param integer $line Line that triggered the error
 * @return boolean
 */",
 "/**
 * Map an error code into an Error word, and log location.
 *
 * @param integer $code Error code to map
 * @return array Array of error word, and log location.
 */",
 "/**
 *
 * Error Handler provides basic error and exception handling for your application. It captures and
 * handles all unhandled exceptions and errors. Displays helpful framework errors when debug > 1.
 *
 * ### Uncaught exceptions
 *
 * When debug < 1 a CakeException will render 404 or  500 errors.  If an uncaught exception is thrown
 * and it is a type that ErrorHandler does not know about it will be treated as a 500 error.
 *
 * ### Implementing application specific exception handling
 *
 * You can implement application specific exception handling in one of a few ways.  Each approach
 * gives you different amounts of control over the exception handling process.
 *
 * - Set Configure::write(\'Exception.handler\', \'YourClass::yourMethod\');
 * - Create AppController::appError();
 * - Set Configure::write(\'Exception.renderer\', \'YourClass\');
 *
 * #### Create your own Exception handler with `Exception.handler`
 *
 * This gives you full control over the exception handling process.  The class you choose should be
 * loaded in your app/Config/bootstrap.php, so its available to handle any exceptions.  You can
 * define the handler as any callback type. Using Exception.handler overrides all other exception
 * handling settings and logic.
 *
 * #### Using `AppController::appError();`
 *
 * This controller method is called instead of the default exception rendering.  It receives the
 * thrown exception as its only argument.  You should implement your error handling in that method.
 * Using AppController::appError(), will supersede any configuration for Exception.renderer.
 *
 * #### Using a custom renderer with `Exception.renderer`
 *
 * If you don\'t want to take control of the exception handling, but want to change how exceptions are
 * rendered you can use `Exception.renderer` to choose a class to render exception pages.  By default
 * `ExceptionRenderer` is used.  Your custom exception renderer class should be placed in app/Lib/Error.
 *
 * Your custom renderer should expect an exception in its constructor, and implement a render method.
 * Failing to do so will cause additional errors.
 *
 * #### Logging exceptions
 *
 * Using the built-in exception handling, you can log all the exceptions
 * that are dealt with by ErrorHandler by setting `Exception.log` to true in your core.php.
 * Enabling this will log every exception to CakeLog and the configured loggers.
 *
 * ### PHP errors
 *
 * Error handler also provides the built in features for handling php errors (trigger_error).
 * While in debug mode, errors will be output to the screen using debugger.  While in production mode,
 * errors will be logged to CakeLog.  You can control which errors are logged by setting
 * `Error.level` in your core.php.
 *
 * #### Logging errors
 *
 * When ErrorHandler is used for handling errors, you can enable error logging by setting `Error.log` to true.
 * This will log all errors to the configured log handlers.
 *
 * #### Controlling what errors are logged/displayed
 *
 * You can control which errors are logged / displayed by ErrorHandler by setting `Error.level`.  Setting this
 * to one or a combination of a few of the E_* constants will only enable the specified errors.
 *
 * e.g. `Configure::write(\'Error.level\', E_ALL & ~E_NOTICE);`
 *
 * Would enable handling for all non Notice errors.
 *
 * @package       Cake.Error
 * @see ExceptionRenderer for more information on how to customize exception rendering.
 */",
 "/**
 * Initializes all the Components for a controller.
 * Attaches a reference of each component to the Controller.
 *
 * @param Controller $Controller Controller to initialize components for.
 * @return void
 */",
 "/**
 * Get the controller associated with the collection.
 *
 * @return Controller.
 */",
 "/**
 * Loads/constructs a component.  Will return the instance in the registry if it already exists.
 * You can use `$settings[\'enabled\'] = false` to disable callbacks on a component when loading it.
 * Callbacks default to on.  Disabled component methods work as normal, only callbacks are disabled.
 *
 * You can alias your component as an existing component by setting the \'className\' key, i.e.,
 * {{{
 * public $components = array(
 *   \'Email\' => array(
 *     \'className\' => \'AliasedEmail\'
 *   );
 * );
 * }}}
 * All calls to the `Email` component would use `AliasedEmail` instead.
 *
 * @param string $component Component name to load
 * @param array $settings Settings for the component.
 * @return Component A component object, Either the existing loaded component or a new one.
 * @throws MissingComponentException when the component could not be found
 */",
 "/**
 * Returns the implemented events that will get routed to the trigger function
 * in order to dispatch them separately on each component
 *
 * @return array
 */",
 "/**
 * Components collection is used as a registry for loaded components and handles loading
 * and constructing component class objects.
 *
 * @package       Cake.Controller
 */",
 "/**
 * Make a new Input Argument
 *
 * @param string|array $name The long name of the option, or an array with all the properties.
 * @param string $help The help text for this option
 * @param boolean $required Whether this argument is required. Missing required args will trigger exceptions
 * @param array $choices Valid choices for this option.
 */",
 "/**
 * Get the value of the name attribute.
 *
 * @return string Value of this->_name.
 */",
 "/**
 * Generate the help for this argument.
 *
 * @param integer $width The width to make the name of the option.
 * @return string
 */",
 "/**
 * Get the usage value for this argument
 *
 * @return string
 */",
 "/**
 * Check if this argument is a required argument
 *
 * @return boolean
 */",
 "/**
 * Check that $value is a valid choice for this argument.
 *
 * @param string $value
 * @return boolean
 * @throws ConsoleException
 */",
 "/**
 * Append this arguments XML representation to the passed in SimpleXml object.
 *
 * @param SimpleXmlElement $parent The parent element.
 * @return SimpleXmlElement The parent with this argument appended.
 */",
 "/**
 * An object to represent a single argument used in the command line.
 * ConsoleOptionParser creates these when you use addArgument()
 *
 * @see ConsoleOptionParser::addArgument()
 * @package       Cake.Console
 */",
 "/**
 * Returns the test controller
 *
 * @return Controller
 */",
 "/**
 * Loads routes and resets if the test case dictates it should
 *
 * @return void
 */",
 "/**
 * ControllerTestDispatcher class
 *
 * @package       Cake.TestSuite
 */",
 "/**
 * Intercepts and stores the contents of the view before the layout is rendered
 *
 * @param string $viewFile The view file
 */",
 "/**
 * InterceptContentHelper class
 *
 * @package       Cake.TestSuite
 */",
 "/**
 * Used to enable calling ControllerTestCase::testAction() without the testing
 * framework thinking that it\'s a test case
 *
 * @param string $name The name of the function
 * @param array $arguments Array of arguments
 * @return Function
 */",
 "/**
 * Lets you do functional tests of a controller action.
 *
 * ### Options:
 *
 * - `data` Will be used as the request data.  If the `method` is GET,
 *   data will be used a GET params.  If the `method` is POST, it will be used
 *   as POST data. By setting `$options[\'data\']` to a string, you can simulate XML or JSON
 *   payloads to your controllers allowing you to test REST webservices.
 * - `method` POST or GET. Defaults to POST.
 * - `return` Specify the return type you want.  Choose from:
 *     - `vars` Get the set view variables.
 *     - `view` Get the rendered view, without a layout.
 *     - `contents` Get the rendered view including the layout.
 *     - `result` Get the return value of the controller action.  Useful
 *       for testing requestAction methods.
 *
 * @param string $url The url to test
 * @param array $options See options
 */",
 "/**
 * Generates a mocked controller and mocks any classes passed to `$mocks`. By
 * default, `_stop()` is stubbed as is sending the response headers, so to not
 * interfere with testing.
 *
 * ### Mocks:
 *
 * - `methods` Methods to mock on the controller. `_stop()` is mocked by default
 * - `models` Models to mock. Models are added to the ClassRegistry so they any
 *   time they are instantiated the mock will be created. Pass as key value pairs
 *   with the value being specific methods on the model to mock. If `true` or
 *   no value is passed, the entire model will be mocked.
 * - `components` Components to mock. Components are only mocked on this controller
 *   and not within each other (i.e., components on components)
 *
 * @param string $controller Controller name
 * @param array $mocks List of classes and methods to mock
 * @return Controller Mocked controller
 * @throws MissingControllerException When controllers could not be created.
 * @throws MissingComponentException When components could not be created.
 */",
 "/**
 * ControllerTestCase class
 *
 * @package       Cake.TestSuite
 */",
 "/**
 * TimeHelperTestObject class
 */",
 "/**
 * CakeTimeMock class
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test CakeTime class methods are called correctly
 */",
 "/**
 * test engine override
 */",
 "/**
 * Test element wrapping in timeAgoInWords
 *
 * @return void
 */",
 "/**
 * TimeHelperTest class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * get the option parser for the test suite.
 *
 * @return void
 */",
 "/**
 * Parse the CLI options into an array CakeTestDispatcher can use.
 *
 * @return array Array of params for CakeTestDispatcher
 */",
 "/**
 * Main entry point to this shell
 *
 * @return void
 */",
 "/**
 * Provides a CakePHP wrapper around PHPUnit.
 * Adds in CakePHP\'s fixtures and gives access to plugin, app and core test cases
 *
 * @package       Cake.Console.Command
 */",
 "/**
 * setUp test case
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testMapCoreFileToCategory
 * 
 * @return void
 */",
 "/**
 * testMapCoreFileToCase
 *
 * basics.php is a slightly special case - it\'s the only file in the core with a test that isn\'t Capitalized
 * 
 * @return void
 */",
 "/**
 * testMapAppFileToCategory
 * 
 * @return void
 */",
 "/**
 * testMapAppFileToCase
 *
 * @return void
 */",
 "/**
 * testMapPluginFileToCategory
 * 
 * @return void
 */",
 "/**
 * testMapPluginFileToCase
 *
 * @return void
 */",
 "/**
 * testMapCoreTestToCategory
 * 
 * @return void
 */",
 "/**
 * testMapCoreTestToCase
 *
 * basics.php is a slightly special case - it\'s the only file in the core with a test that isn\'t Capitalized
 * 
 * @return void
 */",
 "/**
 * testMapAppTestToCategory
 * 
 * @return void
 */",
 "/**
 * testMapAppTestToCase
 *
 * @return void
 */",
 "/**
 * testMapPluginTestToCategory
 * 
 * @return void
 */",
 "/**
 * testMapPluginTestToCase
 *
 * @return void
 */",
 "/**
 * testMapNotTestToNothing
 *
 * @return void
 */",
 "/**
 * test available list of test cases for an empty category
 *
 * @return void
 */",
 "/**
 * test available list of test cases for core category
 *
 * @return void
 */",
 "/**
 * Tests that correct option for test runner are passed
 *
 * @return void
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 * @param Shell $Shell
 */",
 "/**
 * Loads/constructs a task.  Will return the instance in the collection
 * if it already exists.
 *
 * @param string $task Task name to load
 * @param array $settings Settings for the task.
 * @return Task A task object, Either the existing loaded task or a new one.
 * @throws MissingTaskException when the task could not be found
 */",
 "/**
 * Collection object for Tasks.  Provides features
 * for lazily loading tasks, and firing callbacks on loaded tasks.
 *
 * @package       Cake.Console
 */",
 "/**
 * testRenderWithoutView method
 *
 * @return void
 */",
 "/**
 * Test render with an array in _serialize
 *
 * @return void
 */",
 "/**
 * testRenderWithView method
 *
 * @return void
 */",
 "/**
 * JsonViewTest
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllLogTest class
 *
 * This test group will run log tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllCacheTest class
 *
 * This test group will run cache engine tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * UnconventionalTreeFixture class
 *
 * Like Number tree, but doesn\'t use the default values for lft and rght or parent_id
 *
 * @uses          CakeTestFixture
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test triggering callbacks on loaded tasks
 *
 * @return void
 */",
 "/**
 * test load and enable = false
 *
 * @return void
 */",
 "/**
 * test missingtask exception
 *
 * @expectedException MissingTaskException
 * @return void
 */",
 "/**
 * test loading a plugin helper.
 *
 * @return void
 */",
 "/**
 * test unload()
 *
 * @return void
 */",
 "/**
 * Loads a plugin and optionally loads bootstrapping, routing files or loads a initialization function
 *
 * Examples:
 *
 * 	`CakePlugin::load(\'DebugKit\')` will load the DebugKit plugin and will not load any bootstrap nor route files
 *	`CakePlugin::load(\'DebugKit\', array(\'bootstrap\' => true, \'routes\' => true))` will load the bootstrap.php and routes.php files
 * 	`CakePlugin::load(\'DebugKit\', array(\'bootstrap\' => false, \'routes\' => true))` will load routes.php file but not bootstrap.php
 * 	`CakePlugin::load(\'DebugKit\', array(\'bootstrap\' => array(\'config1\', \'config2\')))` will load config1.php and config2.php files
 *	`CakePlugin::load(\'DebugKit\', array(\'bootstrap\' => \'aCallableMethod\'))` will run the aCallableMethod function to initialize it
 *
 * Bootstrap initialization functions can be expressed as a PHP callback type, including closures. Callbacks will receive two
 * parameters (plugin name, plugin configuration)
 *
 * It is also possible to load multiple plugins at once. Examples:
 *
 * `CakePlugin::load(array(\'DebugKit\', \'ApiGenerator\'))` will load the DebugKit and ApiGenerator plugins
 * `CakePlugin::load(array(\'DebugKit\', \'ApiGenerator\'), array(\'bootstrap\' => true))` will load bootstrap file for both plugins
 *
 * {{{
 * 	CakePlugin::load(array(
 * 		\'DebugKit\' => array(\'routes\' => true),
 * 		\'ApiGenerator\'
 * 		), array(\'bootstrap\' => true))
 * }}}
 *
 * Will only load the bootstrap for ApiGenerator and only the routes for DebugKit
 *
 * @param string|array $plugin name of the plugin to be loaded in CamelCase format or array or plugins to load
 * @param array $config configuration options for the plugin
 * @throws MissingPluginException if the folder for the plugin to be loaded is not found
 * @return void
 */",
 "/**
 * Will load all the plugins located in the configured plugins folders
 * If passed an options array, it will be used as a common default for all plugins to be loaded
 * It is possible to set specific defaults for each plugins in the options array. Examples:
 *
 * {{{
 * 	CakePlugin::loadAll(array(
 *		array(\'bootstrap\' => true),
 * 		\'DebugKit\' => array(\'routes\' => true),
 * 	))
 * }}}
 *
 * The above example will load the bootstrap file for all plugins, but for DebugKit it will only load the routes file
 * and will not look for any bootstrap script.
 *
 * @param array $options
 * @return void
 */",
 "/**
 * Returns the filesystem path for a plugin
 *
 * @param string $plugin name of the plugin in CamelCase format
 * @return string path to the plugin folder
 * @throws MissingPluginException if the folder for plugin was not found or plugin has not been loaded
 */",
 "/**
 * Loads the bootstrapping files for a plugin, or calls the initialization setup in the configuration
 *
 * @param string $plugin name of the plugin
 * @return mixed
 * @see CakePlugin::load() for examples of bootstrap configuration
 */",
 "/**
 * Loads the routes file for a plugin, or all plugins configured to load their respective routes file
 *
 * @param string $plugin name of the plugin, if null will operate on all plugins having enabled the
 * loading of routes files
 * @return boolean
 */",
 "/**
 * Returns true if the plugin $plugin is already loaded
 * If plugin is null, it will return a list of all loaded plugins
 *
 * @param string $plugin
 * @return mixed boolean true if $plugin is already loaded.
 * If $plugin is null, returns a list of plugins that have been loaded
 */",
 "/**
 * Forgets a loaded plugin or all of them if first parameter is null
 *
 * @param string $plugin name of the plugin to forget
 * @return void
 */",
 "/**
 * CakePlugin is responsible for loading and unloading plugins. It also can 
 * retrieve plugin paths and load their bootstrap and routes files.
 *
 * @package       Cake.Core
 * @link http://book.cakephp.org/2.0/en/plugins.html
 */",
 "/**
 * setup method
 *
 * @param Model $model
 * @param array $config
 * @return void
 */",
 "/**
 * beforeFind method
 *
 * @param Model $model
 * @param array $query
 * @return void
 */",
 "/**
 * afterFind method
 *
 * @param Model $model
 * @param array $results
 * @param boolean $primary
 * @return void
 */",
 "/**
 * beforeSave method
 *
 * @param Model $model
 * @return void
 */",
 "/**
 * afterSave method
 *
 * @param Model $model
 * @param boolean $created
 * @return void
 */",
 "/**
 * beforeValidate method
 *
 * @param Model $model
 * @return void
 */",
 "/**
 * beforeDelete method
 *
 * @param Model $model
 * @param bool $cascade
 * @return void
 */",
 "/**
 * afterDelete method
 *
 * @param Model $model
 * @return void
 */",
 "/**
 * onError method
 *
 * @param Model $model
 * @return void
 */",
 "/**
 * beforeTest method
 *
 * @param Model $model
 * @return void
 */",
 "/**
 * testMethod method
 *
 * @param Model $model
 * @param bool $param
 * @return void
 */",
 "/**
 * testData method
 *
 * @param Model $model
 * @return void
 */",
 "/**
 * validateField method
 *
 * @param Model $model
 * @param string|array $field
 * @return void
 */",
 "/**
 * speakEnglish method
 *
 * @param Model $model
 * @param string $method
 * @param string $query
 * @return void
 */",
 "/**
 * TestBehavior class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Test2Behavior class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Test3Behavior class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Test4Behavior class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Test5Behavior class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Test6Behavior class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Test7Behavior class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Extended TestBehavior
 */",
 "/**
 * Test load() with enabled => false
 *
 */",
 "/**
 * Tests loading aliased behaviors
 */",
 "/**
 * testBehaviorBinding method
 *
 * @return void
 */",
 "/**
 * test that attach()/detach() works with plugin.banana
 *
 * @return void
 */",
 "/**
 * test that attaching a non existent Behavior triggers a cake error.
 *
 * @expectedException MissingBehaviorException
 * @return void
 */",
 "/**
 * testBehaviorToggling method
 *
 * @return void
 */",
 "/**
 * testBehaviorFindCallbacks method
 *
 * @return void
 */",
 "/**
 * testBehaviorHasManyFindCallbacks method
 *
 * @return void
 */",
 "/**
 * testBehaviorHasOneFindCallbacks method
 *
 * @return void
 */",
 "/**
 * testBehaviorBelongsToFindCallbacks method
 *
 * @return void
 */",
 "/**
 * testBehaviorSaveCallbacks method
 *
 * @return void
 */",
 "/**
 * testBehaviorDeleteCallbacks method
 *
 * @return void
 */",
 "/**
 * testBehaviorOnErrorCallback method
 *
 * @return void
 */",
 "/**
 * testBehaviorValidateCallback method
 *
 * @return void
 */",
 "/**
 * testBehaviorValidateMethods method
 *
 * @return void
 */",
 "/**
 * testBehaviorMethodDispatching method
 *
 * @return void
 */",
 "/**
 * testBehaviorMethodDispatchingWithData method
 *
 * @return void
 */",
 "/**
 * undocumented function
 *
 * @return void
 */",
 "/**
 * Test attach and detaching
 *
 * @return void
 */",
 "/**
 * test that hasMethod works with basic functions.
 *
 * @return void
 */",
 "/**
 * test that hasMethod works with mapped methods.
 *
 * @return void
 */",
 "/**
 * test hasMethod returning a \'callback\'
 *
 * @return void
 */",
 "/**
 * BehaviorCollection class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testReadAndWriteCache method
 *
 * @return void
 */",
 "/**
 * Writing cache entries with duration = 0 (forever) should work.
 *
 * @return void
 */",
 "/**
 * testExpiry method
 *
 * @return void
 */",
 "/**
 * testDeleteCache method
 *
 * @return void
 */",
 "/**
 * testDecrement method
 *
 * @return void
 */",
 "/**
 * testIncrement method
 *
 * @return void
 */",
 "/**
 * test the clearing of cache keys
 *
 * @return void
 */",
 "/**
 * Tests that configuring groups for stored keys return the correct values when read/written
 * Shows that altering the group value is equivalent to deleting all keys under the same
 * group
 *
 * @return void
 */",
 "/**
 * Tests that deleteing from a groups-enabled config is possible
 *
 * @return void
 */",
 "/**
 * Test clearing a cache group
 *
 * @return void
 **/",
 "/**
 * ApcEngineTest class
 *
 * @package       Cake.Test.Case.Cache.Engine
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testEnumConnectionObjects method
 *
 * @return void
 */",
 "/**
 * testGetDataSource method
 *
 * @return void
 */",
 "/**
 * testGetDataSourceException() method
 *
 * @return void
 * @expectedException MissingDatasourceConfigException
 */",
 "/**
 * testGetPluginDataSource method
 *
 * @return void
 */",
 "/**
 * testGetPluginDataSourceAndPluginDriver method
 *
 * @return void
 */",
 "/**
 * testGetLocalDataSourceAndPluginDriver method
 *
 * @return void
 */",
 "/**
 * testGetPluginDataSourceAndLocalDriver method
 *
 * @return void
 */",
 "/**
 * testSourceList method
 *
 * @return void
 */",
 "/**
 * testGetSourceName method
 *
 * @return void
 */",
 "/**
 * testLoadDataSource method
 *
 * @return void
 */",
 "/**
 * testLoadDataSourceException() method
 *
 * @return void
 * @expectedException MissingDatasourceException
 */",
 "/**
 * testCreateDataSource method
 *
 * @return void
 */",
 "/**
 * testConnectionData method
 *
 * @return void
 */",
 "/**
 * Tests that a connection configuration can be deleted in runtime
 *
 * @return void
 */",
 "/**
 * ConnectionManagerTest
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Convenience method for testing.
 *
 * @return string
 */",
 "/**
 * EmailTestComponent class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * Send mail
 *
 * @params object $email CakeEmail
 * @return boolean
 */",
 "/**
 * DebugCompTransport class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * EmailTestController class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * testSendFormats method
 *
 * @return void
 */",
 "/**
 * testTemplates method
 *
 * @return void
 */",
 "/**
 * test that elements used in email templates get helpers.
 *
 * @return void
 */",
 "/**
 * testSendDebug method
 *
 * @return void
 */",
 "/**
 * test send with delivery = debug and not using sessions.
 *
 * @return void
 */",
 "/**
 * testMessageRetrievalWithoutTemplate method
 *
 * @return void
 */",
 "/**
 * testMessageRetrievalWithTemplate method
 *
 * @return void
 */",
 "/**
 * testMessageRetrievalWithHelper method
 *
 * @return void
 */",
 "/**
 * testContentArray method
 *
 * @return void
 */",
 "/**
 * test setting a custom date.
 *
 * @return void
 */",
 "/**
 * testContentStripping method
 *
 * @return void
 */",
 "/**
 * test that the _encode() will set mb_internal_encoding.
 *
 * @return void
 */",
 "/**
 * testMultibyte method
 *
 * @return void
 */",
 "/**
 * undocumented function
 *
 * @return void
 */",
 "/**
 * testSendAsIsNotIgnoredIfAttachmentsPresent method
 *
 * @return void
 */",
 "/**
 * testNoDoubleNewlinesInHeaders function
 *
 * @return void
 */",
 "/**
 * testReset method
 *
 * @return void
 */",
 "/**
 * testStartup method
 *
 * @return void
 */",
 "/**
 * testMessageId method
 *
 * @return void
 */",
 "/**
 * Make sure from/to are not double encoded when UTF-8 is present
 */",
 "/**
 * EmailTest class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * Constructor.
 *
 * @param CakeRequest $request Request object for this controller. Can be null for testing,
 *  but expect that features that use the request parameters will not work.
 * @param CakeResponse $response Response object for this controller.
 */",
 "/**
 * Provides backwards compatibility to avoid problems with empty and isset to alias properties.
 * Lazy loads models using the loadModel() method if declared in $uses
 *
 * @param string $name
 * @return void
 */",
 "/**
 * Provides backwards compatibility access to the request object properties.
 * Also provides the params alias.
 *
 * @param string $name
 * @return void
 */",
 "/**
 * Provides backwards compatibility access for setting values to the request object.
 *
 * @param string $name
 * @param mixed $value
 * @return void
 */",
 "/**
 * Sets the request objects and configures a number of controller properties
 * based on the contents of the request.  The properties that get set are
 *
 * - $this->request - To the $request parameter
 * - $this->plugin - To the $request->params[\'plugin\']
 * - $this->view - To the $request->params[\'action\']
 * - $this->autoLayout - To the false if $request->params[\'bare\']; is set.
 * - $this->autoRender - To false if $request->params[\'return\'] == 1
 * - $this->passedArgs - The the combined results of params[\'named\'] and params[\'pass]
 *
 * @param CakeRequest $request
 * @return void
 */",
 "/**
 * Dispatches the controller action.  Checks that the action
 * exists and isn\'t private.
 *
 * @param CakeRequest $request
 * @return mixed The resulting response.
 * @throws PrivateActionException When actions are not public or prefixed by _
 * @throws MissingActionException When actions are not defined and scaffolding is
 *    not enabled.
 */",
 "/**
 * Check if the request\'s action is marked as private, with an underscore,
 * or if the request is attempting to directly accessing a prefixed action.
 *
 * @param ReflectionMethod $method The method to be invoked.
 * @param CakeRequest $request The request to check.
 * @return boolean
 */",
 "/**
 * Returns a scaffold object to use for dynamically scaffolded controllers.
 *
 * @param CakeRequest $request
 * @return Scaffold
 */",
 "/**
 * Merge components, helpers, and uses vars from
 * Controller::$_mergeParent and PluginAppController.
 *
 * @return void
 */",
 "/**
 * Helper method for merging the $uses property together.
 *
 * Merges the elements not already in $this->uses into
 * $this->uses.
 *
 * @param array $merge The data to merge in.
 * @return void
 */",
 "/**
 * Returns a list of all events that will fire in the controller during it\'s lifecycle.
 * You can override this function to add you own listener callbacks
 *
 * @return array
 */",
 "/**
 * Loads Model classes based on the uses property
 * see Controller::loadModel(); for more info.
 * Loads Components and prepares them for initialization.
 *
 * @return mixed true if models found and instance created.
 * @see Controller::loadModel()
 * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::constructClasses
 * @throws MissingModelException
 */",
 "/**
 * Returns the CakeEventManager manager instance that is handling any callbacks.
 * You can use this instance to register any new listeners or callbacks to the
 * controller events, or create your own events and trigger them at will.
 *
 * @return CakeEventManager
 */",
 "/**
 * Perform the startup process for this controller.
 * Fire the Components and Controller callbacks in the correct order.
 *
 * - Initializes components, which fires their `initialize` callback
 * - Calls the controller `beforeFilter`.
 * - triggers Component `startup` methods.
 *
 * @return void
 */",
 "/**
 * Perform the various shutdown processes for this controller.
 * Fire the Components and Controller callbacks in the correct order.
 *
 * - triggers the component `shutdown` callback.
 * - calls the Controller\'s `afterFilter` method.
 *
 * @return void
 */",
 "/**
 * Queries & sets valid HTTP response codes & messages.
 *
 * @param integer|array $code If $code is an integer, then the corresponding code/message is
 *        returned if it exists, null if it does not exist. If $code is an array,
 *        then the \'code\' and \'message\' keys of each nested array are added to the default
 *        HTTP codes. Example:
 *
 *        httpCodes(404); // returns array(404 => \'Not Found\')
 *
 *        httpCodes(array(
 *            701 => \'Unicorn Moved\',
 *            800 => \'Unexpected Minotaur\'
 *        )); // sets these new values, and returns true
 *
 * @return array Associative array of the HTTP codes as keys, and the message
 *    strings as values, or null of the given $code does not exist.
 * @deprecated Use CakeResponse::httpCodes();
 */",
 "/**
 * Loads and instantiates models required by this controller.
 * If the model is non existent, it will throw a missing database table error, as Cake generates
 * dynamic models for the time being.
 *
 * @param string $modelClass Name of model class to load
 * @param integer|string $id Initial ID the instanced model class should have
 * @return mixed true when single model found and instance created, error returned if model not found.
 * @throws MissingModelException if the model class cannot be found.
 */",
 "/**
 * Redirects to given $url, after turning off $this->autoRender.
 * Script execution is halted after the redirect.
 *
 * @param string|array $url A string or array-based URL pointing to another location within the app,
 *     or an absolute URL
 * @param integer $status Optional HTTP status code (eg: 404)
 * @param boolean $exit If true, exit() will be called after the redirect
 * @return mixed void if $exit = false. Terminates script if $exit = true
 * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::redirect
 */",
 "/**
 * Parse beforeRedirect Response
 *
 * @param mixed $response Response from beforeRedirect callback
 * @param string|array $url The same value of beforeRedirect
 * @param integer $status The same value of beforeRedirect
 * @param boolean $exit The same value of beforeRedirect
 * @return array Array with keys url, status and exit
 */",
 "/**
 * Convenience and object wrapper method for CakeResponse::header().
 *
 * @param string $status The header message that is being set.
 * @return void
 * @deprecated Use CakeResponse::header()
 */",
 "/**
 * Saves a variable for use inside a view template.
 *
 * @param string|array $one A string or an array of data.
 * @param string|array $two Value in case $one is a string (which then works as the key).
 *   Unused if $one is an associative array, otherwise serves as the values to $one\'s keys.
 * @return void
 * @link http://book.cakephp.org/2.0/en/controllers.html#interacting-with-views
 */",
 "/**
 * Internally redirects one action to another. Does not perform another HTTP request unlike Controller::redirect()
 *
 * Examples:
 *
 * {{{
 * setAction(\'another_action\');
 * setAction(\'action_with_parameters\', $parameter1);
 * }}}
 *
 * @param string $action The new action to be \'redirected\' to
 * @param mixed  Any other parameters passed to this method will be passed as
 *    parameters to the new action.
 * @return mixed Returns the return value of the called action
 */",
 "/**
 * Returns number of errors in a submitted FORM.
 *
 * @return integer Number of errors
 */",
 "/**
 * Validates models passed by parameters. Example:
 *
 * `$errors = $this->validateErrors($this->Article, $this->User);`
 *
 * @param mixed A list of models as a variable argument
 * @return array Validation errors, or false if none
 */",
 "/**
 * Instantiates the correct view class, hands it its data, and uses it to render the view output.
 *
 * @param string $view View to use for rendering
 * @param string $layout Layout to use
 * @return CakeResponse A response object containing the rendered view.
 * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::render
 */",
 "/**
 * Returns the referring URL for this request.
 *
 * @param string $default Default URL to use if HTTP_REFERER cannot be read from headers
 * @param boolean $local If true, restrict referring URLs to local server
 * @return string Referring URL
 * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::referer
 */",
 "/**
 * Forces the user\'s browser not to cache the results of the current request.
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::disableCache
 * @deprecated Use CakeResponse::disableCache()
 */",
 "/**
 * Shows a message to the user for $pause seconds, then redirects to $url.
 * Uses flash.ctp as the default layout for the message.
 * Does not work if the current debug level is higher than 0.
 *
 * @param string $message Message to display to the user
 * @param string|array $url Relative string or array-based URL to redirect to after the time expires
 * @param integer $pause Time to show the message
 * @param string $layout Layout you want to use, defaults to \'flash\'
 * @return void Renders flash layout
 * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::flash
 */",
 "/**
 * Converts POST\'ed form data to a model conditions array, suitable for use in a Model::find() call.
 *
 * @param array $data POST\'ed data organized by model and field
 * @param string|array $op A string containing an SQL comparison operator, or an array matching operators
 *        to fields
 * @param string $bool SQL boolean operator: AND, OR, XOR, etc.
 * @param boolean $exclusive If true, and $op is an array, fields not included in $op will not be
 *        included in the returned conditions
 * @return array An array of model conditions
 * @deprecated
 */",
 "/**
 * Handles automatic pagination of model records.
 *
 * @param Model|string $object Model to paginate (e.g: model instance, or \'Model\', or \'Model.InnerModel\')
 * @param string|array $scope Conditions to use while paginating
 * @param array $whitelist List of allowed options for paging
 * @return array Model query results
 * @link http://book.cakephp.org/2.0/en/controllers.html#Controller::paginate
 * @deprecated Use PaginatorComponent instead
 */",
 "/**
 * Called before the controller action.  You can use this method to configure and customize components
 * or perform logic that needs to happen before each controller action.
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/controllers.html#request-life-cycle-callbacks
 */",
 "/**
 * Called after the controller action is run, but before the view is rendered. You can use this method
 * to perform logic or set view variables that are required on every request.
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/controllers.html#request-life-cycle-callbacks
 */",
 "/**
 * The beforeRedirect method is invoked when the controller\'s redirect method is called but before any
 * further action. If this method returns false the controller will not continue on to redirect the request.
 * The $url, $status and $exit variables have same meaning as for the controller\'s method. You can also
 * return a string which will be interpreted as the url to redirect to or return associative array with
 * key \'url\' and optionally \'status\' and \'exit\'.
 *
 * @param string|array $url A string or array-based URL pointing to another location within the app,
 *     or an absolute URL
 * @param integer $status Optional HTTP status code (eg: 404)
 * @param boolean $exit If true, exit() will be called after the redirect
 * @return mixed
 *   false to stop redirection event,
 *   string controllers a new redirection url or
 *   array with the keys url, status and exit to be used by the redirect method.
 * @link http://book.cakephp.org/2.0/en/controllers.html#request-life-cycle-callbacks
 */",
 "/**
 * Called after the controller action is run and rendered.
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/controllers.html#request-life-cycle-callbacks
 */",
 "/**
 * This method should be overridden in child classes.
 *
 * @param string $method name of method called example index, edit, etc.
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/controllers.html#callbacks
 */",
 "/**
 * Alias to beforeScaffold()
 *
 * @param string $method
 * @return boolean
 * @see Controller::beforeScaffold()
 * @deprecated
 */",
 "/**
 * This method should be overridden in child classes.
 *
 * @param string $method name of method called either edit or update.
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/controllers.html#callbacks
 */",
 "/**
 * Alias to afterScaffoldSave()
 *
 * @param string $method
 * @return boolean
 * @see Controller::afterScaffoldSave()
 * @deprecated
 */",
 "/**
 * This method should be overridden in child classes.
 *
 * @param string $method name of method called either edit or update.
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/controllers.html#callbacks
 */",
 "/**
 * Alias to afterScaffoldSaveError()
 *
 * @param string $method
 * @return boolean
 * @see Controller::afterScaffoldSaveError()
 * @deprecated
 */",
 "/**
 * This method should be overridden in child classes.
 * If not it will render a scaffold error.
 * Method MUST return true in child classes
 *
 * @param string $method name of method called example index, edit, etc.
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/controllers.html#callbacks
 */",
 "/**
 * Alias to scaffoldError()
 *
 * @param string $method
 * @return boolean
 * @see Controller::scaffoldError()
 * @deprecated
 */",
 "/**
 * Application controller class for organization of business logic.
 * Provides basic functionality, such as rendering views inside layouts,
 * automatic model availability, redirection, callbacks, and more.
 *
 * Controllers should provide a number of \'action\' methods.  These are public methods on the controller
 * that are not prefixed with a \'_\' and not part of Controller.  Each action serves as an endpoint for
 * performing a specific action on a resource or collection of resources.  For example adding or editing a new
 * object, or listing a set of objects.
 *
 * You can access request parameters, using `$this->request`.  The request object contains all the POST, GET and FILES
 * that were part of the request.
 *
 * After performing the required actions, controllers are responsible for creating a response.  This usually
 * takes the form of a generated View, or possibly a redirection to another controller action.  In either case
 * `$this->response` allows you to manipulate all aspects of the response.
 *
 * Controllers are created by Dispatcher based on request parameters and routing. By default controllers and actions
 * use conventional names.  For example `/posts/index` maps to `PostsController::index()`.  You can re-map urls
 * using Router::connect().
 *
 * @package       Cake.Controller
 * @property      AclComponent $Acl
 * @property      AuthComponent $Auth
 * @property      CookieComponent $Cookie
 * @property      EmailComponent $Email
 * @property      PaginatorComponent $Paginator
 * @property      RequestHandlerComponent $RequestHandler
 * @property      SecurityComponent $Security
 * @property      SessionComponent $Session
 * @link          http://book.cakephp.org/2.0/en/controllers.html
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllLocalizationTest class
 *
 * This test group will run i18n/l10n tests
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * test correct resolution of defined aliases
 */",
 "/**
 * test check method
 *
 * @return void
 */",
 "/**
 * lhs of defined rules are case insensitive
 */",
 "/**
 * allow should work in-memory
 */",
 "/**
 * deny should work in-memory
 */",
 "/**
 * test that a deny rule wins over an equally specific allow rule
 */",
 "/**
 * test that an invalid configuration throws exception
 */",
 "/**
 * test resolving of ACOs
 */",
 "/**
 * test that declaring cyclic dependencies should give an error when building the tree
 */",
 "/**
 * test that with policy allow, only denies count
 */",
 "/**
 * Test case for the PhpAcl implementation
 *
 * @package       Cake.Test.Case.Controller.Component.Acl
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllTasksTest class
 *
 * This test group will run all the task tests.
 *
 * @package       Cake.Test.Case.Console
 */",
 "/**
 * Test App Comment Model
 *
 * PHP 5
 *
 * CakePHP :  Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc.
 * @link          http://cakefoundation.org/projects/info/cakephp CakePHP Project
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Model
 * @since         CakePHP v 1.2.0.7726
 * @version       $Revision$
 * @modifiedby    $LastChangedBy$
 * @lastmodified  $Date$
 * @license       http://www.opensource.org/licenses/mit-license.php The MIT License
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Override _getViewFileName Appends special scaffolding views in.
 *
 * @param string $name name of the view file to get.
 * @return string action
 * @throws MissingViewException
 */",
 "/**
 * ScaffoldView provides specific view file loading features for scaffolded views.
 *
 * @package       Cake.View
 */",
 "/**
 * Generate a random UUID
 *
 * @see http://www.ietf.org/rfc/rfc4122.txt
 * @return RFC 4122 UUID
 */",
 "/**
 * Tokenizes a string using $separator, ignoring any instance of $separator that appears between
 * $leftBound and $rightBound
 *
 * @param string $data The data to tokenize
 * @param string $separator The token to split the data on.
 * @param string $leftBound The left boundary to ignore separators in.
 * @param string $rightBound The right boundary to ignore separators in.
 * @return array Array of tokens in $data.
 */",
 "/**
*Replacesvariableplaceholdersinsidea$strwithanygiven$data.Eachkeyinthe$dataarray
*correspondstoavariableplaceholdernamein$str.
*Example:`String::insert(\':nameis:ageyearsold.\',array(\'name\'=>\'Bob\',\'65\'));`
*Returns:Bobis65yearsold.
*
*Available$optionsare:
*
*-before:Thecharacterorstringinfrontofthenameofthevariableplaceholder(Defaultsto`:`)
*-after:Thecharacterorstringafterthenameofthevariableplaceholder(Defaultstonull)
*-escape:Thecharacterorstringusedtoescapethebeforecharacter/string(Defaultsto`\`)
*-format:Aregextouseformatchingvariableplaceholders.Defaultis:`/(?<!\\)\:%s/`
*(Overwritesbefore,after,breaksescape/clean)
*-clean:AbooleanorarraywithinstructionsforString::cleanInsert
*
*@paramstring$strAstringcontainingvariableplaceholders
*@paramstring$dataAkey=>valarraywhereeachkeystandsforaplaceholdervariablename
*tobereplacedwithval
*@paramstring$optionsAnarrayofoptions,seedescriptionabove
*@returnstring
*/",
 "/**
 * Cleans up a String::insert() formatted string with given $options depending on the \'clean\' key in
 * $options. The default method used is text but html is also available. The goal of this function
 * is to replace all whitespace and unneeded markup around placeholders that did not get replaced
 * by String::insert().
 *
 * @param string $str
 * @param string $options
 * @return string
 * @see String::insert()
 */",
 "/**
 * Wraps text to a specific width, can optionally wrap at word breaks.
 *
 * ### Options
 *
 * - `width` The width to wrap to.  Defaults to 72
 * - `wordWrap` Only wrap on words breaks (spaces) Defaults to true.
 * - `indent` String to indent with. Defaults to null.
 * - `indentAt` 0 based index to start indenting at. Defaults to 0.
 *
 * @param string $text Text the text to format.
 * @param array|integer $options Array of options to use, or an integer to wrap the text to.
 * @return string Formatted text.
 */",
 "/**
 * Highlights a given phrase in a text. You can specify any expression in highlighter that
 * may include the \1 expression to include the $phrase found.
 *
 * ### Options:
 *
 * - `format` The piece of html with that the phrase will be highlighted
 * - `html` If true, will ignore any HTML tags, ensuring that only the correct text is highlighted
 * - `regex` a custom regex rule that is ued to match words, default is \'|$tag|iu\'
 *
 * @param string $text Text to search the phrase in
 * @param string $phrase The phrase that will be searched
 * @param array $options An array of html attributes and options.
 * @return string The highlighted text
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::highlight
 */",
 "/**
 * Strips given text of all links (<a href=....)
 *
 * @param string $text Text
 * @return string The text without links
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::stripLinks
 */",
 "/**
 * Truncates text.
 *
 * Cuts a string to the length of $length and replaces the last characters
 * with the ending if the text is longer than length.
 *
 * ### Options:
 *
 * - `ending` Will be used as Ending and appended to the trimmed string
 * - `exact` If false, $text will not be cut mid-word
 * - `html` If true, HTML tags would be handled correctly
 *
 * @param string $text String to truncate.
 * @param integer $length Length of returned string, including ellipsis.
 * @param array $options An array of html attributes and options.
 * @return string Trimmed string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::truncate
 */",
 "/**
 * Extracts an excerpt from the text surrounding the phrase with a number of characters on each side
 * determined by radius.
 *
 * @param string $text String to search the phrase in
 * @param string $phrase Phrase that will be searched for
 * @param integer $radius The amount of characters that will be returned on each side of the founded phrase
 * @param string $ending Ending that will be appended
 * @return string Modified string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::excerpt
 */",
 "/**
 * Creates a comma separated list where the last two items are joined with \'and\', forming natural English
 *
 * @param array $list The list to be joined
 * @param string $and The word used to join the last and second last items together with. Defaults to \'and\'
 * @param string $separator The separator used to join all the other items together. Defaults to \', \'
 * @return string The glued together string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::toList
 */",
 "/**
 * String handling methods.
 *
 *
 * @package       Cake.Utility
 */",
 "/**
 * Constructor, completes configuration for basic authentication.
 *
 * @param ComponentCollection $collection The Component collection used on this request.
 * @param array $settings An array of settings.
 */",
 "/**
 * Authenticate a user using basic HTTP auth.  Will use the configured User model and attempt a
 * login using basic HTTP auth.
 *
 * @param CakeRequest $request The request to authenticate with.
 * @param CakeResponse $response The response to add headers to.
 * @return mixed Either false on failure, or an array of user data on success.
 */",
 "/**
 * Get a user based on information in the request.  Used by cookie-less auth for stateless clients.
 *
 * @param CakeRequest $request Request object.
 * @return mixed Either false or an array of user information
 */",
 "/**
 * Generate the login headers
 *
 * @return string Headers for logging in.
 */",
 "/**
 * Basic Authentication adapter for AuthComponent.
 *
 * Provides Basic HTTP authentication support for AuthComponent.  Basic Auth will authenticate users
 * against the configured userModel and verify the username and passwords match.  Clients using Basic Authentication
 * must support cookies.  Since AuthComponent identifies users based on Session contents, clients using Basic
 * Auth must support cookies.
 *
 * ### Using Basic auth
 *
 * In your controller\'s components array, add auth + the required settings.
 * {{{
 *	public $components = array(
 *		\'Auth\' => array(
 *			\'authenticate\' => array(\'Basic\')
 *		)
 *	);
 * }}}
 *
 * In your login function just call `$this->Auth->login()` without any checks for POST data.  This
 * will send the authentication headers, and trigger the login dialog in the browser/client.
 *
 * @package       Cake.Controller.Component.Auth
 * @since 2.0
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test that set sets variables
 *
 * @return void
 */",
 "/**
 * test finding themes installed in
 *
 * @return void
 */",
 "/**
 * test getting the correct theme name.  Ensure that with only one theme, or a theme param
 * that the user is not bugged.  If there are more, find and return the correct theme name
 *
 * @return void
 */",
 "/**
 * test generate
 *
 * @return void
 */",
 "/**
 * test generate with a missing template in the chosen theme.
 * ensure fallback to default works.
 *
 * @return void
 */",
 "/**
 * TemplateTaskTest class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Default Constructor
 *
 * @param View $View The View this helper is being attached to.
 * @param array $settings Configuration settings for the helper.
 */",
 "/**
 * Provide non fatal errors on missing method calls.
 *
 * @param string $method Method to invoke
 * @param array $params Array of params for the method.
 * @return void
 */",
 "/**
 * Lazy loads helpers. Provides access to deprecated request properties as well.
 *
 * @param string $name Name of the property being accessed.
 * @return mixed Helper or property found at $name
 */",
 "/**
 * Provides backwards compatibility access for setting values to the request object.
 *
 * @param string $name Name of the property being accessed.
 * @param mixed $value
 * @return mixed Return the $value
 */",
 "/**
 * Finds URL for specified action.
 *
 * Returns a URL pointing at the provided parameters.
 *
 * @param string|array $url Either a relative string url like `/products/view/23` or
 *    an array of url parameters.  Using an array for urls will allow you to leverage
 *    the reverse routing features of CakePHP.
 * @param boolean $full If true, the full base URL will be prepended to the result
 * @return string  Full translated URL with base path.
 * @link http://book.cakephp.org/2.0/en/views/helpers.html
 */",
 "/**
*Checksifafileexistswhenthemeisused,ifnofileisfounddefaultlocationisreturned
*
*@paramstring$fileThefiletocreateawebrootpathto.
*@returnstringWebaccessiblepathtofile.
*/",
 "/**
*Generateurlforgivenassetfile.Dependingonoptionspassedprovidesfullurlwithdomainname.
*AlsocallsHelper::assetTimestamp()toaddtimestamptolocalfiles
*
*@paramstring|arrayPathstringorurlarray
*@paramarray$optionsOptionsarray.Possiblekeys:
*`fullBase`Returnfullurlwithdomainname
*`pathPrefix`Pathprefixforrelativeurls
*`ext`Assetextensiontoappend
*`plugin`Falsevaluewillpreventparsingpathasaplugin
*@returnstringGeneratedurl
*/",
 "/**
*Addsatimestamptoafilebasedresourcebasedonthevalueof`Asset.timestamp`in
*Configure.IfAsset.timestampistrueanddebug>0,orAsset.timestamp==\'force\'
*atimestampwillbeadded.
*
*@paramstring$pathThefilepathtotimestamp,thepathmustbeinsideWWW_ROOT
*@returnstringPathwithatimestampadded,ornot.
*/",
 "/**
*Usedtoremoveharmfultagsfromcontent.RemovesanumberofwellknownXSSattacks
*fromcontent.However,isnotguaranteedtoremoveallpossibilities.Escaping
*contentisthebestwaytopreventallpossibleattacks.
*
*@paramstring|array$outputEitheranarrayofstringstocleanorasinglestringtoclean.
*@returnstring|arraycleanedcontentforoutput
*/",
 "/**
*Returnsaspace-delimitedstringwithitemsofthe$optionsarray.Ifa
*keyof$optionsarrayhappenstobeoneof:
*
*-\'compact\'
*-\'checked\'
*-\'declare\'
*-\'readonly\'
*-\'disabled\'
*-\'selected\'
*-\'defer\'
*-\'ismap\'
*-\'nohref\'
*-\'noshade\'
*-\'nowrap\'
*-\'multiple\'
*-\'noresize\'
*
*Anditsvalueisoneof:
*
*-\'1\'(string)
*-1(integer)
*-true(boolean)
*-\'true\'(string)
*
*Thenthevaluewillberesettobeidenticalwithkey\'sname.
*Ifthevalueisnotoneofthese3,theparameterisnotoutput.
*
*\'escape\'isaspecialoptioninthatitcontrolstheconversionof
*attributestotheirhtml-entityencodedequivalents.Settofalsetodisablehtml-encoding.
*
*Ifvalueforanyoptionkeyissetto`null`or`false`,thatoptionwillbeexcludedfromoutput.
*
*@paramarray$optionsArrayofoptions.
*@paramarray$excludeArrayofoptionstobeexcluded,theoptionsherewillnotbepartofthereturn.
*@paramstring$insertBeforeStringtobeinsertedbeforeoptions.
*@paramstring$insertAfterStringtobeinsertedafteroptions.
*@returnstringComposedattributes.
*@deprecatedThismethodwillbemovedtoHtmlHelperin3.0
*/",
 "/**
*Formatsanindividualattribute,andreturnsthestringvalueofthecomposedattribute.
*Workswithminimizedattributesthathavethesamevalueastheirnamesuchas\'disabled\'and\'checked\'
*
*@paramstring$keyThenameoftheattributetocreate
*@paramstring$valueThevalueoftheattributetocreate.
*@paramboolean$escapeDefineifthevaluemustbeescaped
*@returnstringThecomposedattribute.
*@deprecatedThismethodwillbemovedtoHtmlHelperin3.0
*/",
 "/**
*Setsthishelper\'smodelandfieldpropertiestothedot-separatedvalue-pairin$entity.
*
*@paramstring$entityAfieldname,like\"ModelName.fieldName\" or \"ModelName.ID.fieldName\"
 * @param boolean $setScope Sets the view scope to the model specified in $tagValue
 * @return void
 */",
 "/**
 * Returns the entity reference of the current context as an array of identity parts
 *
 * @return array An array containing the identity elements of an entity
 */",
 "/**
 * Gets the currently-used model of the rendering context.
 *
 * @return string
 */",
 "/**
 * Gets the currently-used model field of the rendering context.
 * Strips off field suffixes such as year, month, day, hour, min, meridian
 * when the current entity is longer than 2 elements.
 *
 * @return string
 */",
 "/**
 * Generates a DOM ID for the selected element, if one is not set.
 * Uses the current View::entity() settings to generate a CamelCased id attribute.
 *
 * @param array|string $options Either an array of html attributes to add $id into, or a string
 *   with a view entity path to get a domId for.
 * @param string $id The name of the \'id\' attribute.
 * @return mixed If $options was an array, an array will be returned with $id set.  If a string
 *   was supplied, a string will be returned.
 * @todo Refactor this method to not have as many input/output options.
 */",
 "/**
 * Gets the input field name for the current tag. Creates input name attributes
 * using CakePHP\'s data[Model][field] formatting.
 *
 * @param array|string $options If an array, should be an array of attributes that $key needs to be added to.
 *   If a string or null, will be used as the View entity.
 * @param string $field
 * @param string $key The name of the attribute to be set, defaults to \'name\'
 * @return mixed If an array was given for $options, an array with $key set will be returned.
 *   If a string was supplied a string will be returned.
 * @todo Refactor this method to not have as many input/output options.
 */",
 "/**
 * Gets the data for the current tag
 *
 * @param array|string $options If an array, should be an array of attributes that $key needs to be added to.
 *   If a string or null, will be used as the View entity.
 * @param string $field
 * @param string $key The name of the attribute to be set, defaults to \'value\'
 * @return mixed If an array was given for $options, an array with $key set will be returned.
 *   If a string was supplied a string will be returned.
 * @todo Refactor this method to not have as many input/output options.
 */",
 "/**
 * Sets the defaults for an input tag.  Will set the
 * name, value, and id attributes for an array of html attributes. Will also
 * add a \'form-error\' class if the field contains validation errors.
 *
 * @param string $field The field name to initialize.
 * @param array $options Array of options to use while initializing an input field.
 * @return array Array options for the form input.
 */",
 "/**
 * Adds the given class to the element options
 *
 * @param array $options Array options/attributes to add a class to
 * @param string $class The classname being added.
 * @param string $key the key to use for class.
 * @return array Array of options with $key set.
 */",
 "/**
 * Returns a string generated by a helper method
 *
 * This method can be overridden in subclasses to do generalized output post-processing
 *
 * @param string $str String to be output.
 * @return string
 * @deprecated This method will be removed in future versions.
 */",
 "/**
 * Before render callback. beforeRender is called before the view file is rendered.
 *
 * Overridden in subclasses.
 *
 * @param string $viewFile The view file that is going to be rendered
 * @return void
 */",
 "/**
 * After render callback.  afterRender is called after the view file is rendered
 * but before the layout has been rendered.
 *
 * Overridden in subclasses.
 *
 * @param string $viewFile The view file that was rendered.
 * @return void
 */",
 "/**
 * Before layout callback.  beforeLayout is called before the layout is rendered.
 *
 * Overridden in subclasses.
 *
 * @param string $layoutFile The layout about to be rendered.
 * @return void
 */",
 "/**
 * After layout callback.  afterLayout is called after the layout has rendered.
 *
 * Overridden in subclasses.
 *
 * @param string $layoutFile The layout file that was rendered.
 * @return void
 */",
 "/**
 * Before render file callback.
 * Called before any view fragment is rendered.
 *
 * Overridden in subclasses.
 *
 * @param string $viewFile The file about to be rendered.
 * @return void
 */",
 "/**
 * After render file callback.
 * Called after any view fragment is rendered.
 *
 * Overridden in subclasses.
 *
 * @param string $viewFile The file just be rendered.
 * @param string $content The content that was rendered.
 * @return void
 */",
 "/**
 * Transforms a recordset from a hasAndBelongsToMany association to a list of selected
 * options for a multiple select element
 *
 * @param string|array $data
 * @param string $key
 * @return array
 */",
 "/**
 * Resets the vars used by Helper::clean() to null
 *
 * @return void
 */",
 "/**
 * Removes harmful content from output
 *
 * @return void
 */",
 "/**
 * Abstract base class for all other Helpers in CakePHP.
 * Provides common methods and features.
 *
 * @package       Cake.View
 */",
 "/**
 * Override initialize
 *
 * @return void
 */",
 "/**
 * Execution method always used for tasks
 *
 * @return mixed
 */",
 "/**
 * Get a list of actions that can / should have views baked for them.
 *
 * @return array Array of action names that should be baked
 */",
 "/**
 * Bake All views for All controllers.
 *
 * @return void
 */",
 "/**
 * Handles interactive baking
 *
 * @return void
 */",
 "/**
 * Loads Controller and sets variables for the template
 * Available template variables
 *	\'modelClass\', \'primaryKey\', \'displayField\', \'singularVar\', \'pluralVar\',
 *	\'singularHumanName\', \'pluralHumanName\', \'fields\', \'foreignKeys\',
 *	\'belongsTo\', \'hasOne\', \'hasMany\', \'hasAndBelongsToMany\'
 *
 * @return array Returns an variables to be made available to a view template
 */",
 "/**
 * Bake a view file for each of the supplied actions
 *
 * @param array $actions Array of actions to make files for.
 * @param array $vars
 * @return void
 */",
 "/**
 * handle creation of baking a custom action view file
 *
 * @return void
 */",
 "/**
 * Assembles and writes bakes the view file.
 *
 * @param string $action Action to bake
 * @param string $content Content to write
 * @return boolean Success
 */",
 "/**
 * Builds content from template and variables
 *
 * @param string $action name to generate content to
 * @param array $vars passed for use in templates
 * @return string content from template
 */",
 "/**
 * Gets the template name based on the action name
 *
 * @param string $action name
 * @return string template name
 */",
 "/**
 * get the option parser for this task
 *
 * @return ConsoleOptionParser
 */",
 "/**
 * Returns associations for controllers models.
 *
 * @param Model $model
 * @return array $associations
 */",
 "/**
 * Task class for creating and updating view files.
 *
 * @package       Cake.Console.Command.Task
 */",
 "/**
 * Constructor
 *
 * @param Controller $controller
 */",
 "/**
 * Render a JSON view.
 *
 * Uses the special \'_serialize\' parameter to convert a set of
 * view variables into a JSON response.  Makes generating simple 
 * JSON responses very easy.  You can omit the \'_serialize\' parameter, 
 * and use a normal view + layout as well.
 *
 * @param string $view The view being rendered.
 * @param string $layout The layout being rendered.
 * @return string The rendered view.
 */",
 "/**
 * A view class that is used for JSON responses.
 *
 * By setting the \'_serialize\' key in your controller, you can specify a view variable
 * that should be serialized to JSON and used as the response for the request.
 * This allows you to omit views + layouts, if your just need to emit a single view
 * variable as the JSON response.
 *
 * In your controller, you could do the following:
 *
 * `$this->set(array(\'posts\' => $posts, \'_serialize\' => \'posts\'));`
 *
 * When the view is rendered, the `$posts` view variable will be serialized 
 * into JSON.
 *
 * You can also define `\'_serialize\'` as an array.  This will create a top level object containing
 * all the named view variables:
 *
 * {{{
 * $this->set(compact(\'posts\', \'users\', \'stuff\'));
 * $this->set(\'_serialize\', array(\'posts\', \'users\'));
 * }}}
 * 
 * The above would generate a JSON object that looks like:
 *
 * `{\"posts\": [...], \"users\": [...]}`
 *
 * If you don\'t use the `_serialize` key, you will need a view.  You can use extended
 * views to provide layout like functionality.
 *
 * @package       Cake.View
 * @since         CakePHP(tm) v 2.1.0
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * Tree Behavior test
 *
 * A test group to run all the component parts
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Controller.Component
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * testAddTestDirectory
 * 
 * @return void
 */",
 "/**
 * testAddTestDirectoryRecursive
 * 
 * @return void
 */",
 "/**
 * testAddTestDirectoryRecursiveWithHidden
 * 
 * @return void
 */",
 "/**
 * testAddTestDirectoryRecursiveWithNonPhp
 * 
 * @return void
 */",
 "/**
 * CakeTestSuiteTest
 *
 * @package       Cake.Test.Case.TestSuite
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       cake
 * @subpackage    cake.tests.fixtures
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 * @subpackage    cake.tests.fixtures
 */",
 "/**
 * check url params
 *
 */",
 "/**
 * post var testing
 *
 */",
 "/**
 * Fixturized action for testAction()
 *
 */",
 "/**
 * TestsAppsPostsController file
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Controller
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Constructor
 *
 * @param Controller $controller A controller object to pull View::_passedVars from.
 */",
 "/**
 * Returns the CakeEventManager manager instance that is handling any callbacks.
 * You can use this instance to register any new listeners or callbacks to the
 * controller events, or create your own events and trigger them at will.
 *
 * @return CakeEventManager
 */",
 "/**
 * Renders a piece of PHP with provided parameters and returns HTML, XML, or any other string.
 *
 * This realizes the concept of Elements, (or \"partial layouts\") and the $params array is used to send
 * data to be used in the element. Elements can be cached improving performance by using the `cache` option.
 *
 * @param string $name Name of template file in the/app/View/Elements/ folder,
 *   or `MyPlugin.template` to use the template element from MyPlugin.  If the element
 *   is not found in the plugin, the normal view path cascade will be searched.
 * @param array $data Array of data to be made available to the rendered view (i.e. the Element)
 * @param array $options Array of options. Possible keys are:
 * - `cache` - Can either be `true`, to enable caching using the config in View::$elementCache. Or an array
 *   If an array, the following keys can be used:
 *   - `config` - Used to store the cached element in a custom cache configuration.
 *   - `key` - Used to define the key used in the Cache::write().  It will be prefixed with `element_`
 * - `plugin` - Load an element from a specific plugin.  This option is deprecated, see below.
 * - `callbacks` - Set to true to fire beforeRender and afterRender helper callbacks for this element.
 *   Defaults to false.
 * @return string Rendered Element
 * @deprecated The `$options[\'plugin\']` is deprecated and will be removed in CakePHP 3.0.  Use
 *   `Plugin.element_name` instead.
 */",
 "/**
 * Renders view for given view file and layout.
 *
 * Render triggers helper callbacks, which are fired before and after the view are rendered,
 * as well as before and after the layout.  The helper callbacks are called:
 *
 * - `beforeRender`
 * - `afterRender`
 * - `beforeLayout`
 * - `afterLayout`
 *
 * If View::$autoRender is false and no `$layout` is provided, the view will be returned bare.
 *
 * View and layout names can point to plugin views/layouts.  Using the `Plugin.view` syntax
 * a plugin view/layout can be used instead of the app ones.  If the chosen plugin is not found
 * the view will be located along the regular view path cascade.
 *
 * @param string $view Name of view file to use
 * @param string $layout Layout to use.
 * @return string Rendered Element
 * @throws CakeException if there is an error in the view.
 */",
 "/**
 * Renders a layout. Returns output from _render(). Returns false on error.
 * Several variables are created for use in layout.
 *
 * - `title_for_layout` - A backwards compatible place holder, you should set this value if you want more control.
 * - `content_for_layout` - contains rendered view file
 * - `scripts_for_layout` - Contains content added with addScript() as well as any content in
 *   the \'meta\', \'css\', and \'script\' blocks.  They are appended in that order.
 *
 * Deprecated features:
 *
 * - `$scripts_for_layout` is deprecated and will be removed in CakePHP 3.0.
 *   Use the block features instead.  `meta`, `css` and `script` will be populated
 *   by the matching methods on HtmlHelper.
 * - `$title_for_layout` is deprecated and will be removed in CakePHP 3.0
 * - `$content_for_layout` is deprecated and will be removed in CakePHP 3.0.
 *   Use the `content` block instead.
 *
 * @param string $content Content to render in a view, wrapped by the surrounding layout.
 * @param string $layout Layout name
 * @return mixed Rendered output, or false on error
 * @throws CakeException if there is an error in the view.
 */",
 "/**
 * Render cached view. Works in concert with CacheHelper and Dispatcher to
 * render cached view files.
 *
 * @param string $filename the cache file to include
 * @param string $timeStart the page render start time
 * @return boolean Success of rendering the cached file.
 */",
 "/**
 * Returns a list of variables available in the current View context
 *
 * @return array Array of the set view variable names.
 */",
 "/**
 * Returns the contents of the given View variable(s)
 *
 * @param string $var The view var you want the contents of.
 * @return mixed The content of the named var if its set, otherwise null.
 * @deprecated Will be removed in 3.0  Use View::get() instead.
 */",
 "/**
 * Returns the contents of the given View variable or a block.
 * Blocks are checked before view variables.
 *
 * @param string $var The view var you want the contents of.
 * @return mixed The content of the named var if its set, otherwise null.
 */",
 "/**
 * Get the names of all the existing blocks.
 *
 * @return array An array containing the blocks.
 * @see ViewBlock::keys()
 */",
 "/**
 * Start capturing output for a \'block\'
 *
 * @param string $name The name of the block to capture for.
 * @return void
 * @see ViewBlock::start()
 */",
 "/**
 * Append to an existing or new block.  Appending to a new
 * block will create the block.
 *
 * @param string $name Name of the block
 * @param string $value The content for the block.
 * @return void
 * @throws CakeException when you use non-string values.
 * @see ViewBlock::append()
 */",
 "/**
 * Set the content for a block.  This will overwrite any
 * existing content.
 *
 * @param string $name Name of the block
 * @param string $value The content for the block.
 * @return void
 * @throws CakeException when you use non-string values.
 * @see ViewBlock::assign()
 */",
 "/**
 * Fetch the content for a block. If a block is
 * empty or undefined \'\' will be returned.
 *
 * @param string $name Name of the block
 * @return The block content or \'\' if the block does not exist.
 * @see ViewBlock::fetch()
 */",
 "/**
 * End a capturing block. The compliment to View::start()
 *
 * @return void
 * @see ViewBlock::start()
 */",
 "/**
 * Provides view or element extension/inheritance.  Views can extends a
 * parent view and populate blocks in the parent template.
 *
 * @param string $name The view or element to \'extend\' the current one with.
 * @return void
 * @throws LogicException when you extend a view with itself or make extend loops.
 * @throws LogicException when you extend an element which doesn\'t exist
 */",
 "/**
 * Adds a script block or other element to be inserted in $scripts_for_layout in
 * the `<head />` of a document layout
 *
 * @param string $name Either the key name for the script, or the script content. Name can be used to
 *   update/replace a script element.
 * @param string $content The content of the script being added, optional.
 * @return void
 * @deprecated Will be removed in 3.0.  Supersceeded by blocks functionality.
 * @see View::start()
 */",
 "/**
 * Generates a unique, non-random DOM ID for an object, based on the object type and the target URL.
 *
 * @param string $object Type of object, i.e. \'form\' or \'link\'
 * @param string $url The object\'s target URL
 * @return string
 */",
 "/**
 * Allows a template or element to set a variable that will be available in
 * a layout or other element. Analogous to Controller::set().
 *
 * @param string|array $one A string or an array of data.
 * @param string|array $two Value in case $one is a string (which then works as the key).
 *    Unused if $one is an associative array, otherwise serves as the values to $one\'s keys.
 * @return void
 */",
 "/**
 * Magic accessor for helpers. Provides access to attributes that were deprecated.
 *
 * @param string $name Name of the attribute to get.
 * @return mixed
 */",
 "/**
 * Magic accessor for deprecated attributes.
 *
 * @param string $name Name of the attribute to set.
 * @param string $value Value of the attribute to set.
 * @return mixed
 */",
 "/**
 * Magic isset check for deprecated attributes.
 *
 * @param string $name Name of the attribute to check.
 * @return boolean
 */",
 "/**
 * Interact with the HelperCollection to load all the helpers.
 *
 * @return void
 */",
 "/**
 * Renders and returns output for given view filename with its
 * array of data. Handles parent/extended views.
 *
 * @param string $viewFile Filename of the view
 * @param array $data Data to include in rendered view. If empty the current View::$viewVars will be used.
 * @return string Rendered output
 * @throws CakeException when a block is left open.
 */",
 "/**
 * Sandbox method to evaluate a template / view script in.
 *
 * @param string $viewFn Filename of the view
 * @param array $___dataForView Data to include in rendered view.
 *    If empty the current View::$viewVars will be used.
 * @return string Rendered output
 */",
 "/**
 * Loads a helper.  Delegates to the `HelperCollection::load()` to load the helper
 *
 * @param string $helperName Name of the helper to load.
 * @param array $settings Settings for the helper
 * @return Helper a constructed helper object.
 * @see HelperCollection::load()
 */",
 "/**
 * Returns filename of given action\'s template file (.ctp) as a string.
 * CamelCased action names will be under_scored! This means that you can have
 * LongActionNames that refer to long_action_names.ctp views.
 *
 * @param string $name Controller action to find template filename for
 * @return string Template filename
 * @throws MissingViewException when a view file could not be found.
 */",
 "/**
 * Splits a dot syntax plugin name into its plugin and filename.
 * If $name does not have a dot, then index 0 will be null.
 * It checks if the plugin is loaded, else filename will stay unchanged for filenames containing dot
 *
 * @param string $name The name you want to plugin split.
 * @param boolean $fallback If true uses the plugin set in the current CakeRequest when parsed plugin is not loaded
 * @return array Array with 2 indexes.  0 => plugin name, 1 => filename
 */",
 "/**
 * Returns layout filename for this template as a string.
 *
 * @param string $name The name of the layout to find.
 * @return string Filename for layout file (.ctp).
 * @throws MissingLayoutException when a layout cannot be located
 */",
 "/**
 * Get the extensions that view files can use.
 *
 * @return array Array of extensions view files use.
 */",
 "/**
 * Finds an element filename, returns false on failure.
 *
 * @param string $name The name of the element to find.
 * @return mixed Either a string to the element filename or false when one can\'t be found.
 */",
 "/**
 * Return all possible paths to find view files in order
 *
 * @param string $plugin Optional plugin name to scan for view files.
 * @param boolean $cached Set to true to force a refresh of view paths.
 * @return array paths
 */",
 "/**
 * View, the V in the MVC triad. View interacts with Helpers and view variables passed
 * in from the controller to render the results of the controller action.  Often this is HTML,
 * but can also take the form of JSON, XML, PDF\'s or streaming files.
 *
 * CakePHP uses a two-step-view pattern.  This means that the view content is rendered first,
 * and then inserted into the selected layout.  This also means you can pass data from the view to the
 * layout using `$this->set()`
 *
 * Since 2.1, the base View class also includes support for themes by default.  Theme views are regular
 * view files that can provide unique HTML and static assets.  If theme views are not found for the
 * current view the default app view files will be used.  You can set `$this->theme = \'mytheme\'`
 * in your Controller to use the Themes.
 *
 * Example of theme path with `$this->theme = \'SuperHot\';` Would be `app/View/Themed/SuperHot/Posts`
 *
 * @package       Cake.View
 * @property      CacheHelper $Cache
 * @property      FormHelper $Form
 * @property      HtmlHelper $Html
 * @property      JsHelper $Js
 * @property      NumberHelper $Number
 * @property      PaginatorHelper $Paginator
 * @property      RssHelper $Rss
 * @property      SessionHelper $Session
 * @property      TextHelper $Text
 * @property      TimeHelper $Time
 * @property      ViewBlock $Blocks
 */",
 "/**
 * ParamTestComponent
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * ComponentTestController class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * startup method
 *
 * @param Controller $controller
 * @return void
 */",
 "/**
 * AppleComponent class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * initialize method
 *
 * @param Controller $controller
 * @return void
 */",
 "/**
 * startup method
 *
 * @param Controller $controller
 * @return string
 */",
 "/**
 * OrangeComponent class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * startup method
 *
 * @param Controller $controller
 * @return string
 */",
 "/**
 * BananaComponent class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * MutuallyReferencingOneComponent class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * MutuallyReferencingTwoComponent class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * SomethingWithEmailComponent class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * test accessing inner components.
 *
 * @return void
 */",
 "/**
 * test component loading
 *
 * @return void
 */",
 "/**
 * test that component components are not enabled in the collection.
 *
 * @return void
 */",
 "/**
 * test a component being used more than once.
 *
 * @return void
 */",
 "/**
 * Test mutually referencing components.
 *
 * @return void
 */",
 "/**
 * ComponentTest class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * Connects to the database using config[\'database\'] as a filename.
 *
 * @return boolean
 * @throws MissingConnectionException
 */",
 "/**
 * Check whether the SQLite extension is installed/loaded
 *
 * @return boolean
 */",
 "/**
 * Returns an array of tables in the database. If there are no tables, an error is raised and the application exits.
 *
 * @param mixed $data
 * @return array Array of table names in the database
 */",
 "/**
 * Returns an array of the fields in given table name.
 *
 * @param Model|string $model Either the model or table name you want described.
 * @return array Fields in table. Keys are name and type
 */",
 "/**
 * Generates and executes an SQL UPDATE statement for given model, fields, and values.
 *
 * @param Model $model
 * @param array $fields
 * @param array $values
 * @param mixed $conditions
 * @return array
 */",
 "/**
 * Deletes all the records in a table and resets the count of the auto-incrementing
 * primary key, where applicable.
 *
 * @param string|Model $table A string or model class representing the table to be truncated
 * @return boolean	SQL TRUNCATE TABLE statement, false if not applicable.
 */",
 "/**
 * Converts database-layer column types to basic types
 *
 * @param string $real Real database-layer column type (i.e. \"varchar(255)\")
 * @return string Abstract column type (i.e. \"string\")
 */",
 "/**
 * Generate ResultSet
 *
 * @param mixed $results
 * @return void
 */",
 "/**
 * Fetches the next row from the current result set
 *
 * @return mixed array with results fetched and mapped to column names or false if there is no results left to fetch
 */",
 "/**
 * Returns a limit statement in the correct format for the particular database.
 *
 * @param integer $limit Limit of results returned
 * @param integer $offset Offset from which to start results
 * @return string SQL limit/offset statement
 */",
 "/**
 * Generate a database-native column schema string
 *
 * @param array $column An array structured like the following: array(\'name\'=>\'value\', \'type\'=>\'value\'[, options]),
 *    where options can be \'default\', \'length\', or \'key\'.
 * @return string
 */",
 "/**
 * Sets the database encoding
 *
 * @param string $enc Database encoding
 * @return boolean
 */",
 "/**
 * Gets the database encoding
 *
 * @return string The database encoding
 */",
 "/**
 * Removes redundant primary key indexes, as they are handled in the column def of the key.
 *
 * @param array $indexes
 * @param string $table
 * @return string
 */",
 "/**
 * Overrides DboSource::index to handle SQLite index introspection
 * Returns an array of the indexes in given table name.
 *
 * @param string $model Name of model to inspect
 * @return array Fields in table. Keys are column and unique
 */",
 "/**
 * Overrides DboSource::renderStatement to handle schema generation with SQLite-style indexes
 *
 * @param string $type
 * @param array $data
 * @return string
 */",
 "/**
 * PDO deals in objects, not resources, so overload accordingly.
 *
 * @return boolean
 */",
 "/**
 * Generate a \"drop table\" statement for the given Schema object
 *
 * @param CakeSchema $schema An instance of a subclass of CakeSchema
 * @param string $table Optional.  If specified only the table name given will be generated.
 *   Otherwise, all tables defined in the schema are generated.
 * @return string
 */",
 "/**
 * Gets the schema name
 *
 * @return string The schema name
 */",
 "/**
 * Check if the server support nested transactions
 *
 * @return boolean
 */",
 "/**
 * DBO implementation for the SQLite3 DBMS.
 *
 * A DboSource adapter for SQLite 3 using PDO
 *
 * @package       Cake.Model.Datasource.Database
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Behavior to allow for dynamic and atomic manipulation of a Model\'s associations used for a find call. Most useful for limiting
 * the amount of associations and data returned.
 *
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Model.Behavior
 */",
 "/**
 * Constructor, used to tell this model to use the
 * database configured for ACL
 */",
 "/**
 * Checks if the given $aro has access to action $action in $aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success (true if ARO has access to action in ACO, false otherwise)
 */",
 "/**
 * Allow $aro to have access to action $actions in $aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $actions Action (defaults to *)
 * @param integer $value Value to indicate access type (1 to give access, -1 to deny, 0 to inherit)
 * @return boolean Success
 */",
 "/**
 * Get an array of access-control links between the given Aro and Aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @return array Indexed array with: \'aro\', \'aco\' and \'link\'
 */",
 "/**
 * Get the crud type keys
 *
 * @param array $keys Permission schema
 * @return array permission keys
 */",
 "/**
 * Permissions linking AROs with ACOs
 *
 * @package       Cake.Model
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Test the getConfig method.
 *
 * @return void
 */",
 "/**
 * test that initialize sets the path up.
 *
 * @return void
 */",
 "/**
 * test execute and by extension _interactive
 *
 * @return void
 */",
 "/**
 * DbConfigTest class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * test that the console max width is respected when generating help.
 *
 * @return void
 */",
 "/**
 * test help() with options and arguments that have choices.
 *
 * @return void
 */",
 "/**
 * test description and epilog in the help
 *
 * @return void
 */",
 "/**
 * test that help() outputs subcommands.
 *
 * @return void
 */",
 "/**
 * test getting help with defined options.
 *
 * @return void
 */",
 "/**
 * test getting help with defined options.
 *
 * @return void
 */",
 "/**
 * Test that a long set of options doesn\'t make useless output.
 *
 * @return void
 */",
 "/**
 * Test that a long set of arguments doesn\'t make useless output.
 *
 * @return void
 */",
 "/**
 * test help() with options and arguments that have choices.
 *
 * @return void
 */",
 "/**
 * test description and epilog in the help
 *
 * @return void
 */",
 "/**
 * test that help() outputs subcommands.
 *
 * @return void
 */",
 "/**
 * test getting help with defined options.
 *
 * @return void
 */",
 "/**
 * test getting help with defined options.
 *
 * @return void
 */",
 "/**
 * Test xml help as object
 *
 * @return void
 */",
 "/**
 * setup before class.
 *
 * @return void
 */",
 "/**
 * teardown after class
 *
 * @return void
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test setting ini properties with Session configuration.
 *
 * @return void
 */",
 "/**
 * testSessionPath
 *
 * @return void
 */",
 "/**
 * testCakeSessionPathEmpty
 *
 * @return void
 */",
 "/**
 * testCakeSessionPathContainsParams
 *
 * @return void
 */",
 "/**
 * testSetHost
 *
 * @return void
 */",
 "/**
 * testSetHostWithPort
 *
 * @return void
 */",
 "/**
 * test valid with bogus user agent.
 *
 * @return void
 */",
 "/**
 * test valid with bogus user agent.
 *
 * @return void
 */",
 "/**
 * testCheck method
 *
 * @return void
 */",
 "/**
 * testSimpleRead method
 *
 * @return void
 */",
 "/**
 * testReadyEmpty
 *
 * @return void
 */",
 "/**
 * test writing a hash of values/
 *
 * @return void
 */",
 "/**
 * testWriteEmptyKey
 *
 * @return void
 */",
 "/**
 * Test overwriting a string value as if it were an array.
 *
 * @return void
 */",
 "/**
 * testId method
 *
 * @return void
 */",
 "/**
 * testStarted method
 *
 * @return void
 */",
 "/**
 * testError method
 *
 * @return void
 */",
 "/**
 * testDel method
 *
 * @return void
 */",
 "/**
 * testDestroy method
 *
 * @return void
 */",
 "/**
 * testCheckingSavedEmpty method
 *
 * @return void
 */",
 "/**
 * testCheckKeyWithSpaces method
 *
 * @return void
 */",
 "/**
 * testCheckEmpty
 *
 * @return void
 */",
 "/**
 * test key exploitation
 *
 * @return void
 */",
 "/**
 * testReadingSavedEmpty method
 *
 * @return void
 */",
 "/**
 * testCheckUserAgentFalse method
 *
 * @return void
 */",
 "/**
 * testCheckUserAgentTrue method
 *
 * @return void
 */",
 "/**
 * testReadAndWriteWithCakeStorage method
 *
 * @return void
 */",
 "/**
 * test using a handler from app/Model/Datasource/Session.
 *
 * @return void
 */",
 "/**
 * test using a handler from a plugin.
 *
 * @return void
 */",
 "/**
 * testReadAndWriteWithCacheStorage method
 *
 * @return void
 */",
 "/**
 * test that changing the config name of the cache config works.
 *
 * @return void
 */",
 "/**
 * testReadAndWriteWithDatabaseStorage method
 *
 * @return void
 */",
 "/**
 * testSessionTimeout method
 *
 * @return void
 */",
 "/**
 * Test that cookieTimeout matches timeout when unspecified.
 *
 * @return void
 */",
 "/**
 * CakeSessionTest class
 *
 * @package       Cake.Test.Case.Model.Datasource
 */",
 "/**
 * Pick the caching engine to use.  If APC is enabled use it.
 * If running via cli - apc is disabled by default. ensure it\'s available and enabled in this case
 *
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Checks if a requested asset exists and sends it to the browser
 *
 * @param CakeEvent $event containing the request and response object
 * @return CakeResponse if the client is requesting a recognized asset, null otherwise
 */",
 "/**
 * Checks if the client is requeting a filtered asset and runs the corresponding
 * filter if any is configured
 *
 * @param CakeEvent $event containing the request and response object
 * @return CakeResponse if the client is requesting a recognized asset, null otherwise
 */",
 "/**
 * Sends an asset file to the client
 *
 * @param CakeResponse $response The response object to use.
 * @param string $assetFile Path to the asset file in the file system
 * @param string $ext The extension of the file to determine its mime type
 * @return void
 */",
 "/**
 * Filters a request and tests whether it is a file in the webroot folder or not and
 * serves the file to the client if appropriate.
 *
 * @package Cake.Routing.Filter
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Number Tree Test Fixture
 *
 * Generates a tree of data for use testing the tree behavior
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Method executed before each test
 *
 */",
 "/**
 * Method executed after each test
 *
 */",
 "/**
 * testContainments method
 *
 * @return void
 */",
 "/**
 * testInvalidContainments method
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * testInvalidContainments method with suppressing error notices
 *
 * @return void
 */",
 "/**
 * testBeforeFind method
 *
 * @return void
 */",
 "/**
 * testBeforeFindWithNonExistingBinding method
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * testContain method
 *
 * @return void
 */",
 "/**
 * testFindEmbeddedNoBindings method
 *
 * @return void
 */",
 "/**
 * testFindFirstLevel method
 *
 * @return void
 */",
 "/**
 * testFindEmbeddedFirstLevel method
 *
 * @return void
 */",
 "/**
 * testFindSecondLevel method
 *
 * @return void
 */",
 "/**
 * testFindEmbeddedSecondLevel method
 *
 * @return void
 */",
 "/**
 * testFindThirdLevel method
 *
 * @return void
 */",
 "/**
 * testFindEmbeddedThirdLevel method
 *
 * @return void
 */",
 "/**
 * testSettingsThirdLevel method
 *
 * @return void
 */",
 "/**
 * testFindThirdLevelNonReset method
 *
 * @return void
 */",
 "/**
 * testFindEmbeddedThirdLevelNonReset method
 *
 * @return void
 */",
 "/**
 * testEmbeddedFindFields method
 *
 * @return void
 */",
 "/**
 * test that hasOne and belongsTo fields act the same in a contain array.
 *
 * @return void
 */",
 "/**
 * testFindConditionalBinding method
 *
 * @return void
 */",
 "/**
 * testOtherFinds method
 *
 * @return void
 */",
 "/**
 * testOriginalAssociations method
 *
 * @return void
 */",
 "/**
 * testResetAddedAssociation method
 *
 */",
 "/**
 * testResetAssociation method
 *
 */",
 "/**
 * testResetDeeperHasOneAssociations method
 *
 */",
 "/**
 * testResetMultipleHabtmAssociations method
 *
 */",
 "/**
 * test that bindModel and unbindModel work with find() calls in between.
 */",
 "/**
 * test that autoFields doesn\'t splice in fields from other databases.
 *
 * @return void
 */",
 "/**
 * test that autoFields doesn\'t splice in columns that aren\'t part of the join.
 *
 * @return void
 */",
 "/**
 * test that find(all) doesn\'t return incorrect values when mixed with containable.
 *
 * @return void
 */",
 "/**
 * testLazyLoad method
 *
 * @return void
 */",
 "/**
 * _containments method
 *
 * @param Model $Model
 * @param array $contain
 * @return void
 */",
 "/**
 * _assertBindings method
 *
 * @param Model $Model
 * @param array $expected
 * @return void
 */",
 "/**
 * ContainableTest class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * Constructor. Parses the accepted content types accepted by the client using HTTP_ACCEPT
 *
 * @param ComponentCollection $collection ComponentCollection object.
 * @param array $settings Array of settings.
 */",
 "/**
 * Checks to see if a file extension has been parsed by the Router, or if the
 * HTTP_ACCEPT_TYPE has matches only one content type with the supported extensions.
 * If there is only one matching type between the supported content types & extensions,
 * and the requested mime-types, RequestHandler::$ext is set to that value.
 *
 * @param Controller $controller A reference to the controller
 * @param array $settings Array of settings to _set().
 * @return void
 * @see Router::parseExtensions()
 */",
 "/**
 * Set the extension based on the accept headers.
 * Compares the accepted types and configured extensions.
 * If there is one common type, that is assigned as the ext/content type
 * for the response.
 *
 * If html is one of the preferred types, no content type will be set, this
 * is to avoid issues with browsers that prefer html and several other content types.
 *
 * @return void
 */",
 "/**
 * The startup method of the RequestHandler enables several automatic behaviors
 * related to the detection of certain properties of the HTTP request, including:
 *
 * - Disabling layout rendering for Ajax requests (based on the HTTP_X_REQUESTED_WITH header)
 * - If Router::parseExtensions() is enabled, the layout and template type are
 *   switched based on the parsed extension or Accept-Type header.  For example, if `controller/action.xml`
 *   is requested, the view path becomes `app/View/Controller/xml/action.ctp`. Also if
 *   `controller/action` is requested with `Accept-Type: application/xml` in the headers
 *   the view path will become `app/View/Controller/xml/action.ctp`.  Layout and template
 *   types will only switch to mime-types recognized by CakeResponse.  If you need to declare
 *   additional mime-types, you can do so using CakeResponse::type() in your controllers beforeFilter()
 *   method.
 * - If a helper with the same name as the extension exists, it is added to the controller.
 * - If the extension is of a type that RequestHandler understands, it will set that
 *   Content-type in the response header.
 * - If the XML data is POSTed, the data is parsed into an XML object, which is assigned
 *   to the $data property of the controller, which can then be saved to a model object.
 *
 * @param Controller $controller A reference to the controller
 * @return void
 */",
 "/**
 * Helper method to parse xml input data, due to lack of anonymous functions
 * this lives here.
 *
 * @param string $xml
 * @return array Xml array data
 */",
 "/**
 * Handles (fakes) redirects for Ajax requests using requestAction()
 *
 * @param Controller $controller A reference to the controller
 * @param string|array $url A string or array containing the redirect location
 * @param integer|array $status HTTP Status for redirect
 * @param boolean $exit
 * @return void
 */",
 "/**
 * Checks if the response can be considered different according to the request
 * headers, and the caching response headers. If it was not modified, then the
 * render process is skipped. And the client will get a blank response with a
 * \"304 Not Modified\" header.
 *
 * @params Controller $controller
 * @return boolean false if the render process should be aborted
 **/",
 "/**
 * Returns true if the current HTTP request is Ajax, false otherwise
 *
 * @return boolean True if call is Ajax
 * @deprecated use `$this->request->is(\'ajax\')` instead.
 */",
 "/**
 * Returns true if the current HTTP request is coming from a Flash-based client
 *
 * @return boolean True if call is from Flash
 * @deprecated use `$this->request->is(\'flash\')` instead.
 */",
 "/**
 * Returns true if the current request is over HTTPS, false otherwise.
 *
 * @return boolean True if call is over HTTPS
 * @deprecated use `$this->request->is(\'ssl\')` instead.
 */",
 "/**
 * Returns true if the current call accepts an XML response, false otherwise
 *
 * @return boolean True if client accepts an XML response
 */",
 "/**
 * Returns true if the current call accepts an RSS response, false otherwise
 *
 * @return boolean True if client accepts an RSS response
 */",
 "/**
 * Returns true if the current call accepts an Atom response, false otherwise
 *
 * @return boolean True if client accepts an RSS response
 */",
 "/**
 * Returns true if user agent string matches a mobile web browser, or if the
 * client accepts WAP content.
 *
 * @return boolean True if user agent is a mobile web browser
 */",
 "/**
 * Returns true if the client accepts WAP content
 *
 * @return boolean
 */",
 "/**
 * Returns true if the current call a POST request
 *
 * @return boolean True if call is a POST
 * @deprecated Use $this->request->is(\'post\'); from your controller.
 */",
 "/**
 * Returns true if the current call a PUT request
 *
 * @return boolean True if call is a PUT
 * @deprecated Use $this->request->is(\'put\'); from your controller.
 */",
 "/**
 * Returns true if the current call a GET request
 *
 * @return boolean True if call is a GET
 * @deprecated Use $this->request->is(\'get\'); from your controller.
 */",
 "/**
 * Returns true if the current call a DELETE request
 *
 * @return boolean True if call is a DELETE
 * @deprecated Use $this->request->is(\'delete\'); from your controller.
 */",
 "/**
 * Gets Prototype version if call is Ajax, otherwise empty string.
 * The Prototype library sets a special \"Prototype version\" HTTP header.
 *
 * @return string Prototype version of component making Ajax call
 */",
 "/**
 * Adds/sets the Content-type(s) for the given name.  This method allows
 * content-types to be mapped to friendly aliases (or extensions), which allows
 * RequestHandler to automatically respond to requests of that type in the
 * startup method.
 *
 * @param string $name The name of the Content-type, i.e. \"html\", \"xml\", \"css\"
 * @param string|array $type The Content-type or array of Content-types assigned to the name,
 *    i.e. \"text/html\", or \"application/xml\"
 * @return void
 * @deprecated use `$this->response->type()` instead.
 */",
 "/**
 * Gets the server name from which this request was referred
 *
 * @return string Server address
 * @deprecated use $this->request->referer() from your controller instead
 */",
 "/**
 * Gets remote client IP
 *
 * @param boolean $safe
 * @return string Client IP address
 * @deprecated use $this->request->clientIp() from your,  controller instead.
 */",
 "/**
 * Determines which content types the client accepts.  Acceptance is based on
 * the file extension parsed by the Router (if present), and by the HTTP_ACCEPT
 * header. Unlike CakeRequest::accepts() this method deals entirely with mapped content types.
 *
 * Usage:
 *
 * `$this->RequestHandler->accepts(array(\'xml\', \'html\', \'json\'));`
 *
 * Returns true if the client accepts any of the supplied types.
 *
 * `$this->RequestHandler->accepts(\'xml\');`
 *
 * Returns true if the client accepts xml.
 *
 * @param string|array $type Can be null (or no parameter), a string type name, or an
 *   array of types
 * @return mixed If null or no parameter is passed, returns an array of content
 *   types the client accepts.  If a string is passed, returns true
 *   if the client accepts it.  If an array is passed, returns true
 *   if the client accepts one or more elements in the array.
 * @see RequestHandlerComponent::setContent()
 */",
 "/**
 * Determines the content type of the data the client has sent (i.e. in a POST request)
 *
 * @param string|array $type Can be null (or no parameter), a string type name, or an array of types
 * @return mixed If a single type is supplied a boolean will be returned.  If no type is provided
 *   The mapped value of CONTENT_TYPE will be returned. If an array is supplied the first type
 *   in the request content type will be returned.
 */",
 "/**
 * Determines which content-types the client prefers.  If no parameters are given,
 * the single content-type that the client most likely prefers is returned.  If $type is
 * an array, the first item in the array that the client accepts is returned.
 * Preference is determined primarily by the file extension parsed by the Router
 * if provided, and secondarily by the list of content-types provided in
 * HTTP_ACCEPT.
 *
 * @param string|array $type An optional array of \'friendly\' content-type names, i.e.
 *   \'html\', \'xml\', \'js\', etc.
 * @return mixed If $type is null or not provided, the first content-type in the
 *    list, based on preference, is returned.  If a single type is provided
 *    a boolean will be returned if that type is preferred.
 *    If an array of types are provided then the first preferred type is returned.
 *    If no type is provided the first preferred type is returned.
 * @see RequestHandlerComponent::setContent()
 */",
 "/**
 * Sets the layout and template paths for the content type defined by $type.
 *
 * ### Usage:
 *
 * Render the response as an \'ajax\' response.
 *
 * `$this->RequestHandler->renderAs($this, \'ajax\');`
 *
 * Render the response as an xml file and force the result as a file download.
 *
 * `$this->RequestHandler->renderAs($this, \'xml\', array(\'attachment\' => \'myfile.xml\');`
 *
 * @param Controller $controller A reference to a controller object
 * @param string $type Type of response to send (e.g: \'ajax\')
 * @param array $options Array of options to use
 * @return void
 * @see RequestHandlerComponent::setContent()
 * @see RequestHandlerComponent::respondAs()
 */",
 "/**
 * Sets the response header based on type map index name.  This wraps several methods
 * available on CakeResponse. It also allows you to use Content-Type aliases.
 *
 * @param string|array $type Friendly type name, i.e. \'html\' or \'xml\', or a full content-type,
 *    like \'application/x-shockwave\'.
 * @param array $options If $type is a friendly type name that is associated with
 *    more than one type of content, $index is used to select which content-type to use.
 * @return boolean Returns false if the friendly type name given in $type does
 *    not exist in the type map, or if the Content-type header has
 *    already been set by this method.
 * @see RequestHandlerComponent::setContent()
 */",
 "/**
 * Returns the current response type (Content-type header), or null if not alias exists
 *
 * @return mixed A string content type alias, or raw content type if no alias map exists,
 *	otherwise null
 */",
 "/**
 * Maps a content-type back to an alias
 *
 * @param string|array $cType Either a string content type to map, or an array of types.
 * @return string|array Aliases for the types provided.
 * @deprecated Use $this->response->mapType() in your controller instead.
 */",
 "/**
 * Maps a content type alias back to its mime-type(s)
 *
 * @param string|array $alias String alias to convert back into a content type. Or an array of aliases to map.
 * @return string Null on an undefined alias.  String value of the mapped alias type.  If an
 *   alias maps to more than one content type, the first one will be returned.
 */",
 "/**
 * Add a new mapped input type.  Mapped input types are automatically
 * converted by RequestHandlerComponent during the startup() callback.
 *
 * @param string $type The type alias being converted, ie. json
 * @param array $handler The handler array for the type.  The first index should
 *    be the handling callback, all other arguments should be additional parameters
 *    for the handler.
 * @return void
 * @throws CakeException
 */",
 "/**
 * Request object for handling alternative HTTP requests
 *
 * Alternative HTTP requests can come from wireless units like mobile phones, palmtop computers,
 * and the like. These units have no use for Ajax requests, and this Component can tell how Cake
 * should respond to the different needs of a handheld computer and a desktop machine.
 *
 * @package       Cake.Controller.Component
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/request-handling.html
 *
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * testLogFileWriting method
 *
 * @return void
 */",
 "/**
 * test using the path setting to write logs in other places.
 *
 * @return void
 */",
 "/**
 * CakeLogTest class
 *
 * @package       Cake.Test.Case.Log.Engine
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllComponentsTest class
 *
 * This test group will run component class tests
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Suite define the tests for this suite
 *
 * @return void
 */",
 "/**
 * AllTests class
 *
 * This test group will run all tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * testAuthentication method
 *
 * @return void
 */",
 "/**
 * testProxyAuthentication method
 *
 * @return void
 */",
 "/**
 * BasicMethodTest class
 *
 * @package       Cake.Test.Case.Network.Http
 */",
 "/**
 * Constructor
 *
 * ### Settings:
 *
 * - `engine` Class name to use to replace CakeTime functionality
 *            The class needs to be placed in the `Utility` directory.
 *
 * @param View $View the view object the helper is attached to.
 * @param array $settings Settings array Settings array
 * @throws CakeException When the engine class could not be found.
 */",
 "/**
 * Magic accessor for deprecated attributes.
 *
 * @param string $name Name of the attribute to set.
 * @param string $value Value of the attribute to set.
 * @return mixed
 */",
 "/**
 * Magic isset check for deprecated attributes.
 *
 * @param string $name Name of the attribute to check.
 * @return boolean
 */",
 "/**
 * Magic accessor for attributes that were deprecated.
 *
 * @param string $name Name of the attribute to get.
 * @return mixed
 */",
 "/**
 * Call methods from CakeTime utility class
 */",
 "/**
 * @see CakeTime::convertSpecifiers()
 *
 * @param string $format Format with specifiers for strftime function.
 *    Accepts the special specifier %S which mimics the modifier S for date()
 * @param string $time UNIX timestamp
 * @return string windows safe and date() function compatible format for strftime
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::convert()
 *
 * @param string $serverTime UNIX timestamp
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return integer UNIX timestamp
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::serverOffset()
 *
 * @return integer Offset
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::fromString()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return string Parsed timestamp
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::nice()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @param string $format The format to use. If null, `TimeHelper::$niceFormat` is used
 * @return string Formatted date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::niceShort()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime objectp
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return string Described, relative date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::daysAsSql()
 *
 * @param integer|string|DateTime $begin UNIX timestamp, strtotime() valid string or DateTime object
 * @param integer|string|DateTime $end UNIX timestamp, strtotime() valid string or DateTime object
 * @param string $fieldName Name of database field to compare with
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return string Partial SQL string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::dayAsSql()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string $fieldName Name of database field to compare with
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return string Partial SQL string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::isToday()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return boolean True if datetime string is today
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * @see CakeTime::isThisWeek()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return boolean True if datetime string is within current week
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * @see CakeTime::isThisMonth()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return boolean True if datetime string is within current month
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * @see CakeTime::isThisYear()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return boolean True if datetime string is within current year
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * @see CakeTime::wasYesterday()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return boolean True if datetime string was yesterday
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 *
 */",
 "/**
 * @see CakeTime::isTomorrow()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return boolean True if datetime string was yesterday
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * @see CakeTime::toQuarter()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param boolean $range if true returns a range in Y-m-d format
 * @return mixed 1, 2, 3, or 4 quarter of year or array if $range true
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::toUnix()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return integer Unix timestamp
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::toAtom()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return string Formatted date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::toRSS()
 *
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return string Formatted date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::timeAgoInWords()
 *
 * ## Addition options
 *
 * - `element` - The element to wrap the formatted time in.
 *   Has a few additional options:
 *   - `tag` - The tag to use, defaults to \'span\'.
 *   - `class` - The classname to use, defaults to `time-ago-in-words`.
 *   - `title` - Defaults to the $dateTime input.
 *
 * @param integer|string|DateTime $dateTime UNIX timestamp, strtotime() valid string or DateTime object
 * @param array $options Default format if timestamp is used in $dateString
 * @return string Relative time string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::wasWithinLast()
 *
 * @param string|integer $timeInterval the numeric value with space then time type.
 *    Example of valid types: 6 hours, 2 days, 1 minute.
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * @see CakeTime::isWithinLast()
 *
 * @param string|integer $timeInterval the numeric value with space then time type.
 *    Example of valid types: 6 hours, 2 days, 1 minute.
 * @param integer|string|DateTime $dateString UNIX timestamp, strtotime() valid string or DateTime object
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#testing-time
 */",
 "/**
 * @see CakeTime::gmt()
 *
 * @param integer|string|DateTime $string UNIX timestamp, strtotime() valid string or DateTime object
 * @return integer UNIX timestamp
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::format()
 *
 * @param integer|string|DateTime $format date format string (or a UNIX timestamp, strtotime() valid string or DateTime object)
 * @param integer|string|DateTime $date UNIX timestamp, strtotime() valid string or DateTime object (or a date format string)
 * @param boolean $invalid flag to ignore results of fromString == false
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return string Formatted date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * @see CakeTime::i18nFormat()
 *
 * @param integer|string|DateTime $date UNIX timestamp, strtotime() valid string or DateTime object
 * @param string $format strftime format string.
 * @param boolean $invalid flag to ignore results of fromString == false
 * @param string|DateTimeZone $timezone User\'s timezone string or DateTimeZone object
 * @return string Formatted and translated date string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html#formatting
 */",
 "/**
 * Time Helper class for easy use of time data.
 *
 * Manipulation of time data.
 *
 * @package       Cake.View.Helper
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/time.html
 * @see CakeTime
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testSettings method
 *
 * @return void
 */",
 "/**
 * testReadAndWriteCache method
 *
 * @return void
 */",
 "/**
 * testExpiry method
 *
 * @return void
 */",
 "/**
 * testDeleteCache method
 *
 * @return void
 */",
 "/**
 * testClearCache method
 *
 * @return void
 */",
 "/**
 * testDecrement method
 *
 * @return void
 */",
 "/**
 * testIncrement method
 *
 * @return void
 */",
 "/**
 * Tests that configuring groups for stored keys return the correct values when read/written
 * Shows that altering the group value is equivalent to deleting all keys under the same
 * group
 *
 * @return void
 */",
 "/**
 * Tests that deleteing from a groups-enabled config is possible
 *
 * @return void
 */",
 "/**
 * Test clearing a cache group
 *
 * @return void
 **/",
 "/**
 * XcacheEngineTest class
 *
 * @package       Cake.Test.Case.Cache.Engine
 */",
 "/**
 * Constructor
 *
 * @param View $view
 */",
 "/**
 * Tries to lazy load a helper based on its name, if it cannot be found
 * in the application folder, then it tries looking under the current plugin
 * if any
 *
 * @param string $helper The helper name to be loaded
 * @return boolean wheter the helper could be loaded or not
 * @throws MissingHelperException When a helper could not be found.
 *    App helpers are searched, and then plugin helpers.
 */",
 "/**
 * Provide public read access to the loaded objects
 *
 * @param string $name Name of property to read
 * @return mixed
 */",
 "/**
 * Loads/constructs a helper.  Will return the instance in the registry if it already exists.
 * By setting `$enable` to false you can disable callbacks for a helper.  Alternatively you
 * can set `$settings[\'enabled\'] = false` to disable callbacks.  This alias is provided so that when
 * declaring $helpers arrays you can disable callbacks on helpers.
 *
 * You can alias your helper as an existing helper by setting the \'className\' key, i.e.,
 * {{{
 * public $helpers = array(
 *   \'Html\' => array(
 *     \'className\' => \'AliasedHtml\'
 *   );
 * );
 * }}}
 * All calls to the `Html` helper would use `AliasedHtml` instead.
 *
 * @param string $helper Helper name to load
 * @param array $settings Settings for the helper.
 * @return Helper A helper object, Either the existing loaded helper or a new one.
 * @throws MissingHelperException when the helper could not be found
 */",
 "/**
 * Returns a list of all events that will fire in the View during it\'s lifecycle.
 *
 * @return array
 */",
 "/**
 * Trigger a callback method on every object in the collection.
 * Used to trigger methods on objects in the collection.  Will fire the methods in the
 * order they were attached.
 *
 * ### Options
 *
 * - `breakOn` Set to the value or values you want the callback propagation to stop on.
 *    Can either be a scalar value, or an array of values to break on. Defaults to `false`.
 *
 * - `break` Set to true to enabled breaking. When a trigger is broken, the last returned value
 *    will be returned.  If used in combination with `collectReturn` the collected results will be returned.
 *    Defaults to `false`.
 *
 * - `collectReturn` Set to true to collect the return of each object into an array.
 *    This array of return values will be returned from the trigger() call. Defaults to `false`.
 *
 * - `modParams` Allows each object the callback gets called on to modify the parameters to the next object.
 *    Setting modParams to an integer value will allow you to modify the parameter with that index.
 *    Any non-null value will modify the parameter index indicated.
 *    Defaults to false.
 *
 *
 * @param string $callback|CakeEvent Method to fire on all the objects. Its assumed all the objects implement
 *   the method you are calling. If an instance of CakeEvent is provided, then then Event name will parsed to
 *   get the callback name. This is done by getting the last word after any dot in the event name
 *   (eg. `Model.afterSave` event will trigger the `afterSave` callback)
 * @param array $params Array of parameters for the triggered callback.
 * @param array $options Array of options.
 * @return mixed Either the last result or all results if collectReturn is on.
 * @throws CakeException when modParams is used with an index that does not exist.
 */",
 "/**
 * Helpers collection is used as a registry for loaded helpers and handles loading
 * and constructing helper class objects.
 *
 * @package       Cake.View
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test Suite CustomLibClass Library
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Lib.Custom.Package
 * @since         CakePHP(tm) v 1.2.0.5432
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Extended CookieComponent
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test triggering callbacks on loaded helpers
 *
 * @return void
 */",
 "/**
 * Tests loading as an alias
 *
 * @return void
 */",
 "/**
 * test load and enable = false
 *
 * @return void
 */",
 "/**
 * test missingcomponent exception
 *
 * @expectedException MissingComponentException
 * @return void
 */",
 "/**
 * test loading a plugin component.
 *
 * @return void
 */",
 "/**
 * test unload()
 *
 * @return void
 */",
 "/**
 * test getting the controller out of the collection
 *
 * @return void
 */",
 "/**
 * Sets the text/plain header if the test is not a CLI test.
 *
 * @return void
 */",
 "/**
 * Paints a pass
 *
 * @return void
 */",
 "/**
 * Paints a failing test.
 *
 * @param $message PHPUnit_Framework_AssertionFailedError $message Failure object displayed in
 *   the context of the other tests.
 * @return void
 */",
 "/**
 * Paints the end of the test with a summary of
 * the passes and failures.
 *
 * @param PHPUnit_Framework_TestResult $result Result object
 * @return void
 */",
 "/**
 * Paints the title only.
 *
 * @param string $test_name Name class of test.
 * @return void
 */",
 "/**
 * Paints a PHP exception.
 *
 * @param Exception $exception Exception to describe.
 * @return void
 */",
 "/**
 * Prints the message for skipping tests.
 *
 * @param string $message Text of skip condition.
 * @return void
 */",
 "/**
 * Paints formatted text such as dumped variables.
 *
 * @param string $message Text to show.
 * @return void
 */",
 "/**
 * Generate a test case list in plain text.
 * Creates as series of url\'s for tests that can be run.
 * One case per line.
 *
 * @return void
 */",
 "/**
 * Generates a Text summary of the coverage data.
 *
 * @param array $coverage Array of coverage data.
 * @return string
 */",
 "/**
 * CakeTextReporter contains reporting features used for plain text based output
 *
 * @package       Cake.TestSuite.Reporter
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test that constructor throws an exception when Acl.classname is a
 * non-existent class
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * test that adapter() allows control of the internal implementation AclComponent uses.
 *
 * @return void
 */",
 "/**
 * test that adapter() whines when the class is not an AclBase
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Test Case for AclComponent
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * Test View Task Comment Model
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Test View Task Article Model
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Testing public controller action
 *
 * @return void
 */",
 "/**
 * Testing public controller action
 *
 * @return void
 */",
 "/**
 * Test View Task Comments Controller
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Test public controller action
 *
 * @return void
 */",
 "/**
 * Test public controller action
 *
 * @return void
 */",
 "/**
 * Test admin prefixed controller action
 *
 * @return void
 */",
 "/**
 * Test admin prefixed controller action
 *
 * @return void
 */",
 "/**
 * Test admin prefixed controller action
 *
 * @return void
 */",
 "/**
 * Test admin prefixed controller action
 *
 * @return void
 */",
 "/**
 * Test admin prefixed controller action
 *
 * @return void
 */",
 "/**
 * Test View Task Articles Controller
 *
 * @package       Cake.Test.Case.Console.Command.Task
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * setUp method
 *
 * Ensure that the default theme is used
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Test getContent and parsing of Templates.
 *
 * @return void
 */",
 "/**
 * test getContent() using an admin_prefixed action.
 *
 * @return void
 */",
 "/**
 * test Bake method
 *
 * @return void
 */",
 "/**
 * test baking an edit file
 *
 * @return void
 */",
 "/**
 * test baking an index
 *
 * @return void
 */",
 "/**
 * test that baking a view with no template doesn\'t make a file.
 *
 * @return void
 */",
 "/**
 * test bake() with a -plugin param
 *
 * @return void
 */",
 "/**
 * test bake actions baking multiple actions.
 *
 * @return void
 */",
 "/**
 * test baking a customAction (non crud)
 *
 * @return void
 */",
 "/**
 * Test all()
 *
 * @return void
 */",
 "/**
 * Test all() with action parameter
 *
 * @return void
 */",
 "/**
 * test `cake bake view $controller view`
 *
 * @return void
 */",
 "/**
 * test `cake bake view $controller`
 * Ensure that views are only baked for actions that exist in the controller.
 *
 * @return void
 */",
 "/**
 * static dataprovider for test cases
 *
 * @return void
 */",
 "/**
 * test that both plural and singular forms can be used for baking views.
 *
 * @dataProvider nameVariations
 * @return void
 */",
 "/**
 * test `cake bake view $controller --admin`
 * Which only bakes admin methods, not non-admin methods.
 *
 * @return void
 */",
 "/**
 * test execute into interactive.
 *
 * @return void
 */",
 "/**
 * test `cake bake view posts index list`
 *
 * @return void
 */",
 "/**
 * test execute into interactive() with admin methods.
 *
 * @return void
 */",
 "/**
 * test getting templates, make sure noTemplateActions works and prefixed template is used before generic one.
 *
 * @return void
 */",
 "/**
 * ViewTaskTest class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Set the default route class to use or return the current one
 *
 * @param string $routeClass to set as default
 * @return mixed void|string
 * @throws RouterException
 */",
 "/**
 * Validates that the passed route class exists and is a subclass of CakeRoute
 *
 * @param $routeClass
 * @return string
 * @throws RouterException
 */",
 "/**
 * Sets the Routing prefixes.
 *
 * @return void
 */",
 "/**
 * Gets the named route elements for use in app/Config/routes.php
 *
 * @return array Named route elements
 * @see Router::$_namedExpressions
 */",
 "/**
 * Resource map getter & setter.
 *
 * @param array $resourceMap Resource map
 * @return mixed
 * @see Router::$_resourceMap
 */",
 "/**
 * Connects a new Route in the router.
 *
 * Routes are a way of connecting request urls to objects in your application.  At their core routes
 * are a set or regular expressions that are used to match requests to destinations.
 *
 * Examples:
 *
 * `Router::connect(\'/:controller/:action/*\');`
 *
 * The first parameter will be used as a controller name while the second is used as the action name.
 * the \'/*\' syntax makes this route greedy in that it will match requests like `/posts/index` as well as requests
 * like `/posts/edit/1/foo/bar`.
 *
 * `Router::connect(\'/home-page\', array(\'controller\' => \'pages\', \'action\' => \'display\', \'home\'));`
 *
 * The above shows the use of route parameter defaults. And providing routing parameters for a static route.
 *
 * {{{
 * Router::connect(
 *   \'/:lang/:controller/:action/:id\',
 *   array(),
 *   array(\'id\' => \'[0-9]+\', \'lang\' => \'[a-z]{3}\')
 * );
 * }}}
 *
 * Shows connecting a route with custom route parameters as well as providing patterns for those parameters.
 * Patterns for routing parameters do not need capturing groups, as one will be added for each route params.
 *
 * $options offers four \'special\' keys. `pass`, `named`, `persist` and `routeClass`
 * have special meaning in the $options array.
 *
 * `pass` is used to define which of the routed parameters should be shifted into the pass array.  Adding a
 * parameter to pass will remove it from the regular route array. Ex. `\'pass\' => array(\'slug\')`
 *
 * `persist` is used to define which route parameters should be automatically included when generating
 * new urls. You can override persistent parameters by redefining them in a url or remove them by
 * setting the parameter to `false`.  Ex. `\'persist\' => array(\'lang\')`
 *
 * `routeClass` is used to extend and change how individual routes parse requests and handle reverse routing,
 * via a custom routing class. Ex. `\'routeClass\' => \'SlugRoute\'`
 *
 * `named` is used to configure named parameters at the route level. This key uses the same options
 * as Router::connectNamed()
 *
 * @param string $route A string describing the template of the route
 * @param array $defaults An array describing the default route parameters. These parameters will be used by default
 *   and can supply routing parameters that are not dynamic. See above.
 * @param array $options An array matching the named elements in the route to regular expressions which that
 *   element should match.  Also contains additional parameters such as which routed parameters should be
 *   shifted into the passed arguments, supplying patterns for routing parameters and supplying the name of a
 *   custom routing class.
 * @see routes
 * @return array Array of routes
 * @throws RouterException
 */",
 "/**
 * Connects a new redirection Route in the router.
 *
 * Redirection routes are different from normal routes as they perform an actual
 * header redirection if a match is found. The redirection can occur within your
 * application or redirect to an outside location.
 *
 * Examples:
 *
 * `Router::redirect(\'/home/*\', array(\'controller\' => \'posts\', \'action\' => \'view\', array(\'persist\' => true)));`
 *
 * Redirects /home/* to /posts/view and passes the parameters to /posts/view.  Using an array as the
 * redirect destination allows you to use other routes to define where a url string should be redirected to.
 *
 * `Router::redirect(\'/posts/*\', \'http://google.com\', array(\'status\' => 302));`
 *
 * Redirects /posts/* to http://google.com with a HTTP status of 302
 *
 * ### Options:
 *
 * - `status` Sets the HTTP status (default 301)
 * - `persist` Passes the params to the redirected route, if it can.  This is useful with greedy routes,
 *   routes that end in `*` are greedy.  As you can remap urls and not loose any passed/named args.
 *
 * @param string $route A string describing the template of the route
 * @param array $url A url to redirect to. Can be a string or a Cake array-based url
 * @param array $options An array matching the named elements in the route to regular expressions which that
 *   element should match.  Also contains additional parameters such as which routed parameters should be
 *   shifted into the passed arguments. As well as supplying patterns for routing parameters.
 * @see routes
 * @return array Array of routes
 */",
 "/**
 * Specifies what named parameters CakePHP should be parsing out of incoming urls. By default
 * CakePHP will parse every named parameter out of incoming URLs.  However, if you want to take more
 * control over how named parameters are parsed you can use one of the following setups:
 *
 * Do not parse any named parameters:
 *
 * {{{ Router::connectNamed(false); }}}
 *
 * Parse only default parameters used for CakePHP\'s pagination:
 *
 * {{{ Router::connectNamed(false, array(\'default\' => true)); }}}
 *
 * Parse only the page parameter if its value is a number:
 *
 * {{{ Router::connectNamed(array(\'page\' => \'[\d]+\'), array(\'default\' => false, \'greedy\' => false)); }}}
 *
 * Parse only the page parameter no matter what.
 *
 * {{{ Router::connectNamed(array(\'page\'), array(\'default\' => false, \'greedy\' => false)); }}}
 *
 * Parse only the page parameter if the current action is \'index\'.
 *
 * {{{
 * Router::connectNamed(
 *    array(\'page\' => array(\'action\' => \'index\')),
 *    array(\'default\' => false, \'greedy\' => false)
 * );
 * }}}
 *
 * Parse only the page parameter if the current action is \'index\' and the controller is \'pages\'.
 *
 * {{{
 * Router::connectNamed(
 *    array(\'page\' => array(\'action\' => \'index\', \'controller\' => \'pages\')),
 *    array(\'default\' => false, \'greedy\' => false)
 * );
 * }}}
 *
 * ### Options
 *
 * - `greedy` Setting this to true will make Router parse all named params.  Setting it to false will
 *    parse only the connected named params.
 * - `default` Set this to true to merge in the default set of named parameters.
 * - `reset` Set to true to clear existing rules and start fresh.
 * - `separator` Change the string used to separate the key & value in a named parameter.  Defaults to `:`
 *
 * @param array $named A list of named parameters. Key value pairs are accepted where values are
 *    either regex strings to match, or arrays as seen above.
 * @param array $options Allows to control all settings: separator, greedy, reset, default
 * @return array
 */",
 "/**
 * Gets the current named parameter configuration values.
 *
 * @return array
 * @see Router::$_namedConfig
 */",
 "/**
 * Creates REST resource routes for the given controller(s).  When creating resource routes
 * for a plugin, by default the prefix will be changed to the lower_underscore version of the plugin
 * name.  By providing a prefix you can override this behavior.
 *
 * ### Options:
 *
 * - \'id\' - The regular expression fragment to use when matching IDs.  By default, matches
 *    integer values and UUIDs.
 * - \'prefix\' - URL prefix to use for the generated routes.  Defaults to \'/\'.
 *
 * @param string|array $controller A controller name or array of controller names (i.e. \"Posts\" or \"ListItems\")
 * @param array $options Options to use when generating REST routes
 * @return array Array of mapped resources
 */",
 "/**
 * Returns the list of prefixes used in connected routes
 *
 * @return array A list of prefixes used in connected routes
 */",
 "/**
 * Parses given URL string.  Returns \'routing\' parameters for that url.
 *
 * @param string $url URL to be parsed
 * @return array Parsed elements from URL
 */",
 "/**
 * Parses a file extension out of a URL, if Router::parseExtensions() is enabled.
 *
 * @param string $url
 * @return array Returns an array containing the altered URL and the parsed extension.
 */",
 "/**
 * Takes parameter and path information back from the Dispatcher, sets these
 * parameters as the current request parameters that are merged with url arrays
 * created later in the request.
 *
 * Nested requests will create a stack of requests.  You can remove requests using
 * Router::popRequest().  This is done automatically when using Object::requestAction().
 *
 * Will accept either a CakeRequest object or an array of arrays. Support for
 * accepting arrays may be removed in the future.
 *
 * @param CakeRequest|array $request Parameters and path information or a CakeRequest object.
 * @return void
 */",
 "/**
 * Pops a request off of the request stack.  Used when doing requestAction
 *
 * @return CakeRequest The request removed from the stack.
 * @see Router::setRequestInfo()
 * @see Object::requestAction()
 */",
 "/**
 * Get the either the current request object, or the first one.
 *
 * @param boolean $current Whether you want the request from the top of the stack or the first one.
 * @return CakeRequest or null.
 */",
 "/**
 * Gets parameter information
 *
 * @param boolean $current Get current request parameter, useful when using requestAction
 * @return array Parameter information
 */",
 "/**
 * Gets URL parameter by name
 *
 * @param string $name Parameter name
 * @param boolean $current Current parameter, useful when using requestAction
 * @return string Parameter value
 */",
 "/**
 * Gets path information
 *
 * @param boolean $current Current parameter, useful when using requestAction
 * @return array
 */",
 "/**
 * Reloads default Router settings.  Resets all class variables and
 * removes all connected routes.
 *
 * @return void
 */",
 "/**
 * Promote a route (by default, the last one added) to the beginning of the list
 *
 * @param integer $which A zero-based array index representing the route to move. For example,
 *    if 3 routes have been added, the last route would be 2.
 * @return boolean Returns false if no route exists at the position specified by $which.
 */",
 "/**
 * Finds URL for specified action.
 *
 * Returns an URL pointing to a combination of controller and action. Param
 * $url can be:
 *
 * - Empty - the method will find address to actual controller/action.
 * - \'/\' - the method will find base URL of application.
 * - A combination of controller/action - the method will find url for it.
 *
 * There are a few \'special\' parameters that can change the final URL string that is generated
 *
 * - `base` - Set to false to remove the base path from the generated url. If your application
 *   is not in the root directory, this can be used to generate urls that are \'cake relative\'.
 *   cake relative urls are required when using requestAction.
 * - `?` - Takes an array of query string parameters
 * - `#` - Allows you to set url hash fragments.
 * - `full_base` - If true the `FULL_BASE_URL` constant will be prepended to generated urls.
 *
 * @param string|array $url Cake-relative URL, like \"/products/edit/92\" or \"/presidents/elect/4\"
 *   or an array specifying any of the following: \'controller\', \'action\',
 *   and/or \'plugin\', in addition to named arguments (keyed array elements),
 *   and standard URL arguments (indexed array elements)
 * @param bool|array $full If (bool) true, the full base URL will be prepended to the result.
 *   If an array accepts the following keys
 *    - escape - used when making urls embedded in html escapes query string \'&\'
 *    - full - if true the full base URL will be prepended.
 * @return string Full translated URL with base path.
 */",
 "/**
 * A special fallback method that handles url arrays that cannot match
 * any defined routes.
 *
 * @param array $url A url that didn\'t match any routes
 * @return string A generated url for the array
 * @see Router::url()
 */",
 "/**
 * Generates a well-formed querystring from $q
 *
 * @param string|array $q Query string Either a string of already compiled query string arguments or
 *    an array of arguments to convert into a query string.
 * @param array $extra Extra querystring parameters.
 * @param boolean $escape Whether or not to use escaped &
 * @return array
 */",
 "/**
 * Reverses a parsed parameter array into a string. Works similarly to Router::url(), but
 * Since parsed URL\'s contain additional \'pass\' and \'named\' as well as \'url.url\' keys.
 * Those keys need to be specially handled in order to reverse a params array into a string url.
 *
 * This will strip out \'autoRender\', \'bare\', \'requested\', and \'return\' param names as those
 * are used for CakePHP internals and should not normally be part of an output url.
 *
 * @param CakeRequest|array $params The params array or CakeRequest object that needs to be reversed.
 * @param boolean $full Set to true to include the full url including the protocol when reversing
 *     the url.
 * @return string The string that is the reversed result of the array
 */",
 "/**
 * Normalizes a URL for purposes of comparison.  Will strip the base path off
 * and replace any double /\'s.  It will not unify the casing and underscoring
 * of the input value.
 *
 * @param array|string $url URL to normalize Either an array or a string url.
 * @return string Normalized URL
 */",
 "/**
 * Returns the route matching the current request URL.
 *
 * @return CakeRoute Matching route object.
 */",
 "/**
 * Returns the route matching the current request (useful for requestAction traces)
 *
 * @return CakeRoute Matching route object.
 */",
 "/**
 * Removes the plugin name from the base URL.
 *
 * @param string $base Base URL
 * @param string $plugin Plugin name
 * @return string base url with plugin name removed if present
 */",
 "/**
 * Instructs the router to parse out file extensions from the URL. For example,
 * http://example.com/posts.rss would yield an file extension of \"rss\".
 * The file extension itself is made available in the controller as
 * `$this->params[\'ext\']`, and is used by the RequestHandler component to
 * automatically switch to alternate layouts and templates, and load helpers
 * corresponding to the given content, i.e. RssHelper. Switching layouts and helpers
 * requires that the chosen extension has a defined mime type in `CakeResponse`
 *
 * A list of valid extension can be passed to this method, i.e. Router::parseExtensions(\'rss\', \'xml\');
 * If no parameters are given, anything after the first . (dot) after the last / in the URL will be
 * parsed, excluding querystring parameters (i.e. ?q=...).
 *
 * @return void
 * @see RequestHandler::startup()
 */",
 "/**
 * Get the list of extensions that can be parsed by Router.
 * To initially set extensions use `Router::parseExtensions()`
 * To add more see `setExtensions()`
 *
 * @return array Array of extensions Router is configured to parse.
 */",
 "/**
 * Set/add valid extensions.
 * To have the extensions parsed you still need to call `Router::parseExtensions()`
 *
 * @param array $extensions List of extensions to be added as valid extension
 * @param boolean $merge Default true will merge extensions. Set to false to override current extensions
 * @return array
 */",
 "/**
 * Parses the request URL into controller, action, and parameters.  Uses the connected routes
 * to match the incoming url string to parameters that will allow the request to be dispatched.  Also
 * handles converting parameter lists into url strings, using the connected routes.  Routing allows you to decouple
 * the way the world interacts with your application (urls) and the implementation (controllers and actions).
 *
 * ### Connecting routes
 *
 * Connecting routes is done using Router::connect().  When parsing incoming requests or reverse matching
 * parameters, routes are enumerated in the order they were connected.  You can modify the order of connected
 * routes using Router::promote().  For more information on routes and how to connect them see Router::connect().
 *
 * ### Named parameters
 *
 * Named parameters allow you to embed key:value pairs into path segments.  This allows you create hash
 * structures using urls.  You can define how named parameters work in your application using Router::connectNamed()
 *
 * @package       Cake.Routing
 */",
 "/**
 * Constructor for a Route
 *
 * @param string $template Template string with parameter placeholders
 * @param array $defaults Array of defaults for the route.
 * @param array $options Array of additional options for the Route
 */",
 "/**
 * Check if a Route has been compiled into a regular expression.
 *
 * @return boolean
 */",
 "/**
 * Compiles the route\'s regular expression.  Modifies defaults property so all necessary keys are set
 * and populates $this->names with the named routing elements.
 *
 * @return array Returns a string regular expression of the compiled route.
 */",
 "/**
*Buildsarouteregularexpression.Usesthetemplate,defaultsandoptions
*propertiestocompilearegularexpressionthatcanbeusedtoparserequeststrings.
*
*@returnvoid
*/",
 "/**
*CheckstoseeifthegivenURLcanbeparsedbythisroute.
*Iftheroutecanbeparsedanarrayofparameterswillbereturned;ifnot
*falsewillbereturned.Stringurlsareparsediftheymatcharoutesregularexpression.
*
*@paramstring$urlTheurltoattempttoparse.
*@returnmixedBooleanfalseonfailure,otherwiseanarrayorparameters
*/",
 "/**
*ParsepassedandNamedparametersintoalistofpassedargs,andahashofnamedparameters.
*Thelocalandglobalconfigurationfornamedparameterswillbeused.
*
*@paramstring$argsAstringwiththepassed&namedparams.eg./1/page:2
*@paramstring$contextThecurrentroutecontext,whichshouldcontaincontroller/actionkeys.
*@returnarrayArrayof($pass,$named)
*/",
 "/**
*Returntrueifagivennamed$param\'s$valmatchesagiven$ruledependingon$context.Currentlyimplemented
*ruletypesarecontroller,actionandmatchthatcanbecombinedwitheachother.
*
*@paramstring$valThevalueofthenamedparameter
*@paramarray$ruleTherule(s)toapply,canalsobeamatchstring
*@paramstring$contextAnarraywithadditionalcontextinformation(controller/action)
*@returnboolean
*/",
 "/**
*Applypersistentparameterstoaurlarray.Persistentparametersareaspecial
*keyusedduringroutecreationtoforcerouteparameterstopersistwhenomittedfrom
*aurlarray.
*
*@paramarray$urlThearraytoapplypersistentparametersto.
*@paramarray$paramsAnarrayofpersistentvaluestoreplacepersistentones.
*@returnarrayAnarraywithpersistentparametersapplied.
*/",
 "/**
*Attempttomatchaurlarray.Iftheurlmatchestherouteparametersandsettings,then
*returnageneratedstringurl.Iftheurldoesn\'tmatchtherouteparameters,falsewillbereturned.
*Thismethodhandlesthereverseroutingorconversionofurlarraysintostringurls.
*
*@paramarray$urlAnarrayofparameterstocheckmatchingwith.
*@returnmixedEitherastringurlfortheparametersiftheymatchorfalse.
*/",
 "/**
*Convertsamatchingroutearrayintoaurlstring.Composesthestringurlusingthetemplate
*usedtocreatetheroute.
*
*@paramarray$paramsTheparamstoconverttoastringurl.
*@returnstringComposedroutestring.
*/",
 "/**
*AsingleRouteusedbytheRoutertoconnectrequeststo
*parametermaps.
*
*Notnormallycreatedasastandalone.UseRouter::connect()tocreate
*Routesforyourapplication.
*
*@packageCake.Routing.Route
*/",
 "/**
 * Test Suite TestPlugin AppController
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Controller
 * @since         CakePHP(tm) v 1.2.0.5432
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Authorize a user using the AclComponent.
 *
 * @param array $user The user to authorize
 * @param CakeRequest $request The request needing authorization.
 * @return boolean
 */",
 "/**
 * An authorization adapter for AuthComponent.  Provides the ability to authorize using the AclComponent,
 * If AclComponent is not already loaded it will be loaded using the Controller\'s ComponentCollection.
 *
 * @package       Cake.Controller.Component.Auth
 * @since 2.0
 * @see AuthComponent::$authenticate
 * @see AclComponent::check()
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testRead method
 *
 * @return void
 */",
 "/**
 * testCheck method
 *
 * @return void
 */",
 "/**
 * testFlash method
 *
 * @return void
 */",
 "/**
 * test flash() with the attributes.
 *
 * @return void
 */",
 "/**
 * test setting the element from the attrs.
 *
 * @return void
 */",
 "/**
 * test using elements in plugins.
 *
 * @return void
 */",
 "/**
 * SessionHelperTest class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * Tests the afterSave callback in the model
 *
 * @return void
 */",
 "/**
 * TreeBehaviorAfterTest class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * creates a test project that is used for testing project task.
 *
 * @return void
 */",
 "/**
 * test bake() method and directory creation.
 *
 * @return void
 */",
 "/**
 * test bake with an absolute path.
 *
 * @return void
 */",
 "/**
 * test bake with CakePHP on the include path.  The constants should remain commented out.
 *
 * @return void
 */",
 "/**
 * test bake() method with -empty flag,  directory creation and empty files.
 *
 * @return void
 */",
 "/**
 * test generation of Security.salt
 *
 * @return void
 */",
 "/**
 * test generation of Security.cipherSeed
 *
 * @return void
 */",
 "/**
 * Test that index.php is generated correctly.
 *
 * @return void
 */",
 "/**
 * test getPrefix method, and that it returns Routing.prefix or writes to config file.
 *
 * @return void
 */",
 "/**
 * test cakeAdmin() writing core.php
 *
 * @return void
 */",
 "/**
 * test getting the prefix with more than one prefix setup
 *
 * @return void
 */",
 "/**
 * Test execute method with one param to destination folder.
 *
 * @return void
 */",
 "/**
 * test console path
 *
 * @return void
 */",
 "/**
 * ProjectTask Test class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test writing with no new line
 *
 * @return void
 */",
 "/**
 * test writing with no new line
 *
 * @return void
 */",
 "/**
 * test write() with multiple new lines
 *
 * @return void
 */",
 "/**
 * test writing an array of messages.
 *
 * @return void
 */",
 "/**
 * test getting a style.
 *
 * @return void
 */",
 "/**
 * test adding a style.
 *
 * @return void
 */",
 "/**
 * test formatting text with styles.
 *
 * @return void
 */",
 "/**
 * test that formatting doesn\'t eat tags it doesn\'t know about.
 *
 * @return void
 */",
 "/**
 * test formatting with custom styles.
 *
 * @return void
 */",
 "/**
 * test formatting text with missing styles.
 *
 * @return void
 */",
 "/**
 * test formatting text with multiple styles.
 *
 * @return void
 */",
 "/**
 * test that multiple tags of the same name work in one string.
 *
 * @return void
 */",
 "/**
 * test raw output not getting tags replaced.
 *
 * @return void
 */",
 "/**
 * test plain output.
 *
 * @return void
 */",
 "/**
 * test plain output only strips tags used for formatting.
 *
 * @return void
 */",
 "/**
 * Override initialize
 *
 * @param ConsoleOutput $stdout A ConsoleOutput object for stdout.
 * @param ConsoleOutput $stderr A ConsoleOutput object for stderr.
 * @param ConsoleInput $stdin A ConsoleInput object for stdin.
 */",
 "/**
 * get the option parser.
 *
 * @return void
 */",
 "/**
 * Execution method always used for tasks
 * Handles dispatching to interactive, named, or all processes.
 *
 * @return void
 */",
 "/**
 * Bake All the Fixtures at once.  Will only bake fixtures for models that exist.
 *
 * @return void
 */",
 "/**
 * Interactive baking function
 *
 * @return void
 */",
 "/**
 * Interacts with the User to setup an array of import options. For a fixture.
 *
 * @param string $modelName Name of model you are dealing with.
 * @return array Array of import options.
 */",
 "/**
 * Assembles and writes a Fixture file
 *
 * @param string $model Name of model to bake.
 * @param string $useTable Name of table to use.
 * @param array $importOptions Options for public $import
 * @return string Baked fixture content
 */",
 "/**
 * Generate the fixture file, and write to disk
 *
 * @param string $model name of the model being generated
 * @param string $otherVars Contents of the fixture file.
 * @return string Content saved into fixture file.
 */",
 "/**
 * Get the path to the fixtures.
 *
 * @return string Path for the fixtures
 */",
 "/**
 * Generates a string representation of a schema.
 *
 * @param array $tableInfo Table schema array
 * @return string fields definitions
 */",
 "/**
 * Generate String representation of Records
 *
 * @param array $tableInfo Table schema array
 * @param integer $recordCount
 * @return array Array of records to use in the fixture.
 */",
 "/**
 * Convert a $records array into a a string.
 *
 * @param array $records Array of records to be converted to string
 * @return string A string value of the $records array.
 */",
 "/**
 * Interact with the user to get a custom SQL condition and use that to extract data
 * to build a fixture.
 *
 * @param string $modelName name of the model to take records from.
 * @param string $useTable Name of table to use.
 * @return array Array of records.
 */",
 "/**
 * Task class for creating and updating fixtures files.
 *
 * @package       Cake.Console.Command.Task
 */",
 "/**
 * Constructor, use I18n::getInstance() to get the i18n translation object.
 *
 * @return void
 */",
 "/**
 * Return a static instance of the I18n class
 *
 * @return I18n
 */",
 "/**
 * Used by the translation functions in basics.php
 * Returns a translated string based on current language and translation files stored in locale folder
 *
 * @param string $singular String to translate
 * @param string $plural Plural string (if any)
 * @param string $domain Domain The domain of the translation.  Domains are often used by plugin translations
 * @param string $category Category The integer value of the category to use.
 * @param integer $count Count Count is used with $plural to choose the correct plural form.
 * @param string $language Language to translate string to.
 * 	If null it checks for language in session followed by Config.language configuration variable.
 * @return string translated string.
 */",
 "/**
 * Clears the domains internal data array.  Useful for testing i18n.
 *
 * @return void
 */",
 "/**
 * Get the loaded domains cache.
 *
 * @return array
 */",
 "/**
 * Attempts to find the plural form of a string.
 *
 * @param string $header Type
 * @param integer $n Number
 * @return integer plural match
 */",
 "/**
 * Binds the given domain to a file in the specified directory.
 *
 * @param string $domain Domain to bind
 * @return string Domain binded
 */",
 "/**
 * Loads the binary .mo file and returns array of translations
 *
 * @param string $filename Binary .mo file to load
 * @return mixed Array of translations on success or false on failure
 */",
 "/**
 * Loads the text .po file and returns array of translations
 *
 * @param string $filename Text .po file to load
 * @return mixed Array of translations on success or false on failure
 */",
 "/**
 * Parses a locale definition file following the POSIX standard
 *
 * @param string $filename Locale definition filename
 * @return mixed Array of definitions on success or false on failure
 */",
 "/**
 * Auxiliary function to parse a symbol from a locale definition file
 *
 * @param string $string Symbol to be parsed
 * @return string parsed symbol
 */",
 "/**
 * Returns a Time format definition from corresponding domain
 *
 * @param string $format Format to be translated
 * @param string $domain Domain where format is stored
 * @return mixed translated format string if only value or array of translated strings for corresponding format.
 */",
 "/**
 * I18n handles translation of Text and time format strings.
 *
 * @package       Cake.I18n
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test selector method
 *
 * @return void
 */",
 "/**
 * test event binding
 *
 * @return void
 */",
 "/**
 * test dom ready event creation
 *
 * @return void
 */",
 "/**
 * test Each method
 *
 * @return void
 */",
 "/**
 * test Effect generation
 *
 * @return void
 */",
 "/**
 * Test Request Generation
 *
 * @return void
 */",
 "/**
 * test sortable list generation
 *
 * @return void
 */",
 "/**
 * test drag() method.  Scriptaculous lacks the ability to take an Array of Elements
 * in new Drag() when selection is a multiple type.  Iterate over the array.
 *
 * @return void
 */",
 "/**
 * test drop() method
 *
 * @return void
 */",
 "/**
 * ensure that slider() method behaves properly
 *
 * @return void
 */",
 "/**
 * test the serializeForm implementation.
 *
 * @return void
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor.
 *
 * @param string $base The base directory for the application. Writes `App.base` to Configure.
 */",
 "/**
 * Returns the CakeEventManager instance or creates one if none was
 * creted. Attaches the default listeners and filters
 *
 * @return CakeEventmanger
 */",
 "/**
 * Returns the list of events this object listents to.
 *
 * @return array
 */",
 "/**
 * Attaches all event listeners for this dispatcher instance. Loads the
 * dispatcher filters from the configured locations.
 *
 * @param CakeEventManager $manager
 * @return void
 * @throws MissingDispatcherFilterException
 */",
 "/**
 * Dispatches and invokes given Request, handing over control to the involved controller. If the controller is set
 * to autoRender, via Controller::$autoRender, then Dispatcher will render the view.
 *
 * Actions in CakePHP can be any public method on a controller, that is not declared in Controller.  If you
 * want controller methods to be public and in-accessible by URL, then prefix them with a `_`.
 * For example `public function _loadPosts() { }` would not be accessible via URL.  Private and protected methods
 * are also not accessible via URL.
 *
 * If no controller of given name can be found, invoke() will throw an exception.
 * If the controller is found, and the action is not found an exception will be thrown.
 *
 * @param CakeRequest $request Request object to dispatch.
 * @param CakeResponse $response Response object to put the results of the dispatch into.
 * @param array $additionalParams Settings array (\"bare\", \"return\") which is melded with the GET and POST params
 * @return string|void if `$request[\'return\']` is set then it returns response body, null otherwise
 * @throws MissingControllerException When the controller is missing.
 */",
 "/**
 * Initializes the components and models a controller will be using.
 * Triggers the controller action, and invokes the rendering if Controller::$autoRender is true and echo\'s the output.
 * Otherwise the return value of the controller action are returned.
 *
 * @param Controller $controller Controller to invoke
 * @param CakeRequest $request The request object to invoke the controller for.
 * @param CakeResponse $response The response object to receive the output
 * @return CakeResponse te resulting response object
 */",
 "/**
 * Applies Routing and additionalParameters to the request to be dispatched.
 * If Routes have not been loaded they will be loaded, and app/Config/routes.php will be run.
 *
 * @param CakeEvent $event containing the request, response and additional params
 * @return void
 */",
 "/**
 * Get controller to use, either plugin controller or application controller
 *
 * @param CakeRequest $request Request object
 * @param CakeResponse $response Response for the controller.
 * @return mixed name of controller if not loaded, or object if loaded
 */",
 "/**
 * Load controller and return controller classname
 *
 * @param CakeRequest $request
 * @return string|bool Name of controller class name
 */",
 "/**
 * Loads route configuration
 *
 * @return void
 */",
 "/**
 * Dispatcher converts Requests into controller actions.  It uses the dispatched Request
 * to locate and load the correct controller.  If found, the requested action is called on
 * the controller.
 *
 * @package       Cake.Routing
 */",
 "/**
 * Loads/constructs a Log engine.
 *
 * @param string $name instance identifier
 * @param array $options Setting for the Log Engine
 * @return BaseLog BaseLog engine instance
 * @throws CakeLogException when logger class does not implement a write method
 */",
 "/**
 * Attempts to import a logger class from the various paths it could be on.
 * Checks that the logger class implements a write method as well.
 *
 * @param string $loggerName the plugin.className of the logger class you want to build.
 * @return mixed boolean false on any failures, string of classname to use if search was successful.
 * @throws CakeLogException
 */",
 "/**
 * Registry of loaded log engines
 *
 * @package       Cake.Log
 */",
 "/**
 * Constructor
 *
 * @param ComponentCollection $collection The Component collection used on this request.
 * @param array $settings Array of settings to use.
 */",
 "/**
 * Find a user record using the standard options.
 *
 * @param string $username The username/identifier.
 * @param string $password The unhashed password.
 * @return Mixed Either false on failure, or an array of user data.
 */",
 "/**
 * Hash the plain text password so that it matches the hashed/encrypted password
 * in the datasource.
 *
 * @param string $password The plain text password.
 * @return string The hashed form of the password.
 */",
 "/**
 * Authenticate a user based on the request information.
 *
 * @param CakeRequest $request Request to get authentication information from.
 * @param CakeResponse $response A response object that can have headers added.
 * @return mixed Either false on failure, or an array of user data on success.
 */",
 "/**
 * Allows you to hook into AuthComponent::logout(),
 * and implement specialized logout behavior.
 *
 * All attached authentication objects will have this method
 * called when a user logs out.
 *
 * @param array $user The user about to be logged out.
 * @return void
 */",
 "/**
 * Get a user based on information in the request.  Primarily used by stateless authentication
 * systems like basic and digest auth.
 *
 * @param CakeRequest $request Request object.
 * @return mixed Either false or an array of user information
 */",
 "/**
 * Base Authentication class with common methods and properties.
 *
 * @package       Cake.Controller.Component.Auth
 */",
 "/**
 * NumberHelperTestObject class
 */",
 "/**
 * CakeNumberMock class
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test CakeNumber class methods are called correctly
 */",
 "/**
 * test engine override
 */",
 "/**
 * NumberHelperTest class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * Loads a new object onto the collection. Can throw a variety of exceptions
 *
 * Implementations of this class support a `$options[\'enabled\']` flag which enables/disables
 * a loaded object.
 *
 * @param string $name Name of object to load.
 * @param array $options Array of configuration options for the object to be constructed.
 * @return object the constructed object
 */",
 "/**
 * Trigger a callback method on every object in the collection.
 * Used to trigger methods on objects in the collection.  Will fire the methods in the
 * order they were attached.
 *
 * ### Options
 *
 * - `breakOn` Set to the value or values you want the callback propagation to stop on.
 *    Can either be a scalar value, or an array of values to break on. Defaults to `false`.
 *
 * - `break` Set to true to enabled breaking. When a trigger is broken, the last returned value
 *    will be returned.  If used in combination with `collectReturn` the collected results will be returned.
 *    Defaults to `false`.
 *
 * - `collectReturn` Set to true to collect the return of each object into an array.
 *    This array of return values will be returned from the trigger() call. Defaults to `false`.
 *
 * - `modParams` Allows each object the callback gets called on to modify the parameters to the next object.
 *    Setting modParams to an integer value will allow you to modify the parameter with that index.
 *    Any non-null value will modify the parameter index indicated.
 *    Defaults to false.
 *
 *
 * @param string $callback|CakeEvent Method to fire on all the objects. Its assumed all the objects implement
 *   the method you are calling. If an instance of CakeEvent is provided, then then Event name will parsed to
 *   get the callback name. This is done by getting the last word after any dot in the event name
 *   (eg. `Model.afterSave` event will trigger the `afterSave` callback)
 * @param array $params Array of parameters for the triggered callback.
 * @param array $options Array of options.
 * @return mixed Either the last result or all results if collectReturn is on.
 * @throws CakeException when modParams is used with an index that does not exist.
 */",
 "/**
 * Provide public read access to the loaded objects
 *
 * @param string $name Name of property to read
 * @return mixed
 */",
 "/**
 * Provide isset access to _loaded
 *
 * @param string $name Name of object being checked.
 * @return boolean
 */",
 "/**
 * Enables callbacks on an object or array of objects
 *
 * @param string|array $name CamelCased name of the object(s) to enable (string or array)
 * @param boolean Prioritize enabled list after enabling object(s)
 * @return void
 */",
 "/**
 * Prioritize list of enabled object
 *
 * @return array Prioritized list of object
 */",
 "/**
 * Set priority for an object or array of objects
 *
 * @param string|array $name CamelCased name of the object(s) to enable (string or array)
 * 	If string the second param $priority is used else it should be an associative array
 * 	with keys as object names and values as priorities to set.
 * @param integer|null Integer priority to set or null for default
 * @return void
 */",
 "/**
 * Disables callbacks on a object or array of objects.  Public object methods are still
 * callable as normal.
 *
 * @param string|array $name CamelCased name of the objects(s) to disable (string or array)
 * @return void
 */",
 "/**
 * Gets the list of currently-enabled objects, or, the current status of a single objects
 *
 * @param string $name Optional.  The name of the object to check the status of.  If omitted,
 *   returns an array of currently-enabled object
 * @return mixed If $name is specified, returns the boolean status of the corresponding object.
 *   Otherwise, returns an array of all enabled objects.
 */",
 "/**
 * Gets the list of attached objects, or, whether the given object is attached
 *
 * @param string $name Optional.  The name of the behavior to check the status of.  If omitted,
 *   returns an array of currently-attached behaviors
 * @return mixed If $name is specified, returns the boolean status of the corresponding behavior.
 *    Otherwise, returns an array of all attached behaviors.
 */",
 "/**
 * Name of the object to remove from the collection
 *
 * @param string $name Name of the object to delete.
 * @return void
 */",
 "/**
 * Adds or overwrites an instantiated object to the collection
 *
 * @param string $name Name of the object
 * @param Object $object The object to use
 * @return array Loaded objects
 */",
 "/**
 * Normalizes an object array, creates an array that makes lazy loading
 * easier
 *
 * @param array $objects Array of child objects to normalize.
 * @return array Array of normalized objects.
 */",
 "/**
 * Deals with Collections of objects.  Keeping registries of those objects,
 * loading and constructing new objects and triggering callbacks. Each subclass needs
 * to implement its own load() functionality.
 *
 * All core subclasses of ObjectCollection by convention loaded objects are stored
 * in `$this->_loaded`. Enabled objects are stored in `$this->_enabled`.  In addition
 * the all support an `enabled` option that controls the enabled/disabled state of the object
 * when loaded.
 *
 * @package       Cake.Utility
 * @since CakePHP(tm) v 2.0
 */",
 "/**
 * Displays a view
 *
 * @param string What page to display
 */",
 "/**
 * Static content controller
 *
 * Override this controller by placing a copy in controllers directory of an application
 *
 * @package       app.Controller
 * @link http://book.cakephp.org/2.0/en/controllers/pages-controller.html
 */",
 "/**
 * Used to read a session values set in a controller for a key or return values for all keys.
 *
 * In your view: `$this->Session->read(\'Controller.sessKey\');`
 * Calling the method without a param will return all session vars
 *
 * @param string $name the name of the session key you want to read
 * @return mixed values from the session vars
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/session.html#SessionHelper::read
 */",
 "/**
 * Used to check is a session key has been set
 *
 * In your view: `$this->Session->check(\'Controller.sessKey\');`
 *
 * @param string $name
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/session.html#SessionHelper::check
 */",
 "/**
 * Returns last error encountered in a session
 *
 * In your view: `$this->Session->error();`
 *
 * @return string last error
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/session.html#displaying-notifcations-or-flash-messages
 */",
 "/**
 * Used to render the message set in Controller::Session::setFlash()
 *
 * In your view: $this->Session->flash(\'somekey\');
 * Will default to flash if no param is passed
 *
 * You can pass additional information into the flash message generation.  This allows you
 * to consolidate all the parameters for a given type of flash message into the view.
 *
 * {{{
 * echo $this->Session->flash(\'flash\', array(\'params\' => array(\'class\' => \'new-flash\')));
 * }}}
 *
 * The above would generate a flash message with a custom class name. Using $attrs[\'params\'] you
 * can pass additional data into the element rendering that will be made available as local variables
 * when the element is rendered:
 *
 * {{{
 * echo $this->Session->flash(\'flash\', array(\'params\' => array(\'name\' => $user[\'User\'][\'name\'])));
 * }}}
 *
 * This would pass the current user\'s name into the flash message, so you could create personalized
 * messages without the controller needing access to that data.
 *
 * Lastly you can choose the element that is rendered when creating the flash message. Using
 * custom elements allows you to fully customize how flash messages are generated.
 *
 * {{{
 * echo $this->Session->flash(\'flash\', array(\'element\' => \'my_custom_element\'));
 * }}}
 *
 * If you want to use an element from a plugin for rendering your flash message you can do that using the 
 * plugin param:
 *
 * {{{
 * echo $this->Session->flash(\'flash\', array(
 *		\'element\' => \'my_custom_element\',
 *		\'params\' => array(\'plugin\' => \'my_plugin\')
 * ));
 * }}}
 *
 * @param string $key The [Message.]key you are rendering in the view.
 * @param array $attrs Additional attributes to use for the creation of this flash message.
 *    Supports the \'params\', and \'element\' keys that are used in the helper.
 * @return string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/session.html#SessionHelper::flash
 */",
 "/**
 * Used to check is a session is valid in a view
 *
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/session.html#SessionHelper::valid
 */",
 "/**
 * Session Helper.
 *
 * Session reading from the view.
 *
 * @package       Cake.View.Helper
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/session.html
 */",
 "/**
 * Authenticates the identity contained in a request.  Will use the `settings.userModel`, and `settings.fields`
 * to find POST data that is used to find a matching record in the `settings.userModel`.  Will return false if
 * there is no post data, either username or password is missing, of if the scope conditions have not been met.
 *
 * @param CakeRequest $request The request that contains login information.
 * @param CakeResponse $response Unused response object.
 * @return mixed.  False on login failure.  An array of User data on success.
 */",
 "/**
 * An authentication adapter for AuthComponent.  Provides the ability to authenticate using POST
 * data.  Can be used by configuring AuthComponent to use it via the AuthComponent::$authenticate setting.
 *
 * {{{
 *	$this->Auth->authenticate = array(
 *		\'Form\' => array(
 *			\'scope\' => array(\'User.active\' => 1)
 *		)
 *	)
 * }}}
 *
 * When configuring FormAuthenticate you can pass in settings to which fields, model and additional conditions
 * are used. See FormAuthenticate::$settings for more information.
 *
 * @package       Cake.Controller.Component.Auth
 * @since 2.0
 * @see AuthComponent::$authenticate
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test Suite TestPlugin config file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Config
 * @since         CakePHP(tm) v 1.3
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Test Plugin Post Model
 *
 *
 *
 * PHP 5
 *
 * CakePHP : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc.
 * @link          http://cakephp.org CakePHP Project
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Model
 * @since         CakePHP v 1.2.0.4487
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * setup callback
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test that the autoparse = false constructor works.
 *
 * @return void
 */",
 "/**
 * test construction
 *
 * @return void
 */",
 "/**
 * Test that querystring args provided in the url string are parsed.
 *
 * @return void
 */",
 "/**
 * Test that named arguments + querystrings are handled correctly.
 *
 * @return void
 */",
 "/**
 * test addParams() method
 *
 * @return void
 */",
 "/**
 * test splicing in paths.
 *
 * @return void
 */",
 "/**
 * test parsing POST data into the object.
 *
 * @return void
 */",
 "/**
 * test parsing PUT data into the object.
 *
 * @return void
 */",
 "/**
 * test parsing of FILES array
 *
 * @return void
 */",
 "/**
 * test method overrides coming in from POST data.
 *
 * @return void
 */",
 "/**
 * test the clientIp method.
 *
 * @return void
 */",
 "/**
 * test the referer function.
 *
 * @return void
 */",
 "/**
 * test the simple uses of is()
 *
 * @return void
 */",
 "/**
 * test the method() method.
 *
 * @return void
 */",
 "/**
 * test host retrieval.
 *
 * @return void
 */",
 "/**
 * test domain retrieval.
 *
 * @return void
 */",
 "/**
 * test getting subdomains for a host.
 *
 * @return void
 */",
 "/**
 * test ajax, flash and friends
 *
 * @return void
 */",
 "/**
 * test __call expcetions
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * test is(ssl)
 *
 * @return void
 */",
 "/**
 * test getting request params with object properties.
 *
 * @return void
 */",
 "/**
 * Test isset()/empty() with overloaded properties.
 *
 * @return void
 */",
 "/**
 * test the array access implementation
 *
 * @return void
 */",
 "/**
 * test adding detectors and having them work.
 *
 * @return void
 */",
 "/**
 * helper function for testing callbacks.
 *
 * @return void
 */",
 "/**
 * test getting headers
 *
 * @return void
 */",
 "/**
 * test accepts() with and without parameters
 *
 * @return void
 */",
 "/**
 * Test that accept header types are trimmed for comparisons.
 *
 * @return void
 */",
 "/**
 * Content types from accepts() should respect the client\'s q preference values.
 *
 * @return void
 */",
 "/**
 * Test the raw parsing of accept headers into the q value formatting.
 *
 * @return void
 */",
 "/**
 * Test parsing accept with a confusing accept value.
 *
 * @return void
 */",
 "/**
 * testBaseUrlAndWebrootWithModRewrite method
 *
 * @return void
 */",
 "/**
 * testBaseUrlwithModRewriteAlias method
 *
 * @return void
 */",
 "/**
 * test base, webroot, and url parsing when there is no url rewriting
 *
 * @return void
 */",
 "/**
 * testBaseUrlAndWebrootWithBaseUrl method
 *
 * @return void
 */",
 "/**
 * test baseUrl with no rewrite and using the top level index.php.
 *
 * @return void
 */",
 "/**
 * Check that a sub-directory containing app|webroot doesn\'t get mishandled when re-writing is off.
 *
 * @return void
 */",
 "/**
 * test baseUrl with no rewrite, and using the app/webroot/index.php file as is normal with virtual hosts.
 *
 * @return void
 */",
 "/**
 * Test that a request with a . in the main GET parameter is filtered out.
 * PHP changes GET parameter keys containing dots to _.
 *
 * @return void
 */",
 "/**
 * Test that a request with urlencoded bits in the main GET parameter are filtered out.
 *
 * @return void
 */",
 "/**
 * generator for environment configurations
 *
 * @return void
 */",
 "/**
 * testEnvironmentDetection method
 *
 * @dataProvider environmentGenerator
 * @return void
 */",
 "/**
 * test the data() method reading
 *
 * @return void
 */",
 "/**
 * test writing with data()
 *
 * @return void
 */",
 "/**
 * test writing falsey values.
 *
 * @return void
 */",
 "/**
 * test accept language
 *
 * @return void
 */",
 "/**
 * test the here() method
 *
 * @return void
 */",
 "/**
 * Test the input() method.
 *
 * @return void
 */",
 "/**
 * Test input() decoding.
 *
 * @return void
 */",
 "/**
 * Test input() decoding with additional arguments.
 *
 * @return void
 */",
 "/**
 * Test is(\'requested\') and isRequested()
 *
 * @return void
 */",
 "/**
 * loadEnvironment method
 *
 * @param array $env
 * @return void
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Pick the caching engine to use.  If APC is enabled use it.
 * If running via cli - apc is disabled by default. ensure it\'s available and enabled in this case
 *
 * Note: \'default\' and other application caches should be configured in app/Config/bootstrap.php.
 *       Please check the comments in boostrap.php for more info on the cache engines available 
 *       and their setttings.
 */",
 "/**
 * Makes sure that a given $email address is valid and unique
 *
 * @param string $email
 * @return boolean
 */",
 "/**
 * CustomValidator class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * postal function, for testing postal pass through.
 *
 * @param string $check
 * @return void
 */",
 "/**
 * ssn function for testing ssn pass through
 *
 * @return void
 */",
 "/**
 * TestNlValidation class
 *
 * Used to test pass through of Validation
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * phone function, for testing phone pass through.
 *
 * @param string $check
 * @return void
 */",
 "/**
 * TestDeValidation class
 *
 * Used to test pass through of Validation
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testNotEmpty method
 *
 * @return void
 */",
 "/**
 * testNotEmptyISO88591Encoding method
 *
 * @return void
 */",
 "/**
 * testAlphaNumeric method
 *
 * @return void
 */",
 "/**
 * testAlphaNumericPassedAsArray method
 *
 * @return void
 */",
 "/**
 * testBetween method
 *
 * @return void
 */",
 "/**
 * testBlank method
 *
 * @return void
 */",
 "/**
 * testBlankAsArray method
 *
 * @return void
 */",
 "/**
 * testcc method
 *
 * @return void
 */",
 "/**
 * testLuhn method
 *
 * @return void
 */",
 "/**
 * testCustomRegexForCc method
 *
 * @return void
 */",
 "/**
 * testCustomRegexForCcWithLuhnCheck method
 *
 * @return void
 */",
 "/**
 * testFastCc method
 *
 * @return void
 */",
 "/**
 * testAllCc method
 *
 * @return void
 */",
 "/**
 * testAllCcDeep method
 *
 * @return void
 */",
 "/**
 * testComparison method
 *
 * @return void
 */",
 "/**
 * testComparisonAsArray method
 *
 * @return void
 */",
 "/**
 * testCustom method
 *
 * @return void
 */",
 "/**
 * testCustomAsArray method
 *
 * @return void
 */",
 "/**
 * testDateDdmmyyyy method
 *
 * @return void
 */",
 "/**
 * testDateDdmmyyyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateDdmmyy method
 *
 * @return void
 */",
 "/**
 * testDateDdmmyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateDmyy method
 *
 * @return void
 */",
 "/**
 * testDateDmyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateDmyyyy method
 *
 * @return void
 */",
 "/**
 * testDateDmyyyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateMmddyyyy method
 *
 * @return void
 */",
 "/**
 * testDateMmddyyyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateMmddyy method
 *
 * @return void
 */",
 "/**
 * testDateMmddyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateMdyy method
 *
 * @return void
 */",
 "/**
 * testDateMdyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateMdyyyy method
 *
 * @return void
 */",
 "/**
 * testDateMdyyyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateYyyymmdd method
 *
 * @return void
 */",
 "/**
 * testDateYyyymmddLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateYymmdd method
 *
 * @return void
 */",
 "/**
 * testDateYymmddLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateDdMMMMyyyy method
 *
 * @return void
 */",
 "/**
 * testDateDdMMMMyyyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateMmmmDdyyyy method
 *
 * @return void
 */",
 "/**
 * testDateMmmmDdyyyyLeapYear method
 *
 * @return void
 */",
 "/**
 * testDateMy method
 *
 * @return void
 */",
 "/**
 * testDateMyNumeric method
 *
 * @return void
 */",
 "/**
 * Test validating dates with multiple formats
 *
 * @return void
 */",
 "/**
 * testTime method
 *
 * @return void
 */",
 "/**
 * testBoolean method
 *
 * @return void
 */",
 "/**
 * testDateCustomRegx method
 *
 * @return void
 */",
 "/**
 * testDecimal method
 *
 * @return void
 */",
 "/**
 * testDecimalWithPlaces method
 *
 * @return void
 */",
 "/**
 * testDecimalCustomRegex method
 *
 * @return void
 */",
 "/**
 * testEmail method
 *
 * @return void
 */",
 "/**
 * testEmailDeep method
 *
 * @return void
 */",
 "/**
 * testEmailCustomRegex method
 *
 * @return void
 */",
 "/**
 * testEqualTo method
 *
 * @return void
 */",
 "/**
 * testIpV4 method
 *
 * @return void
 */",
 "/**
 * testIp v6
 *
 * @return void
 */",
 "/**
 * testMaxLength method
 *
 * @return void
 */",
 "/**
 * testMinLength method
 *
 * @return void
 */",
 "/**
 * testUrl method
 *
 * @return void
 */",
 "/**
 * testInList method
 *
 * @return void
 */",
 "/**
 * testRange method
 *
 * @return void
 */",
 "/**
 * testExtension method
 *
 * @return void
 */",
 "/**
 * testMoney method
 *
 * @return void
 */",
 "/**
 * Test Multiple Select Validation
 *
 * @return void
 */",
 "/**
 * testNumeric method
 *
 * @return void
 */",
 "/**
 * testNaturalNumber method
 *
 * @return void
 */",
 "/**
 * testPhone method
 *
 * @return void
 */",
 "/**
 * testPostal method
 *
 * @return void
 */",
 "/**
 * test that phone and postal pass to other classes.
 *
 * @return void
 */",
 "/**
 * test pass through failure on postal
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * test the pass through calling of an alternate locale with postal()
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 **/",
 "/**
 * test pass through method
 *
 * @return void
 */",
 "/**
 * testSsn method
 *
 * @return void
 */",
 "/**
 * testUserDefined method
 *
 * @return void
 */",
 "/**
 * testDatetime method
 *
 * @return void
 */",
 "/**
 * testMimeType method
 *
 * @return void
 */",
 "/**
 * testMimeTypeFalse method
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * testMimeType method
 *
 * @return void
 */",
 "/**
 * Test Case for Validation Class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test Plugin Auth User Model
 *
 * PHP 5
 *
 * CakePHP : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc.
 * @link          http://cakephp.org CakePHP Project
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Model
 * @since         CakePHP v 1.2.0.4487
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Override startup
 *
 * @return void
 */",
 "/**
 * Read and output contents of schema object
 * path to read as second arg
 *
 * @return void
 */",
 "/**
 * Read database and Write schema object
 * accepts a connection as first arg or path to save as second arg
 *
 * @return void
 */",
 "/**
 * Dump Schema object to sql file
 * Use the `write` param to enable and control SQL file output location.
 * Simply using -write will write the sql file to the same dir as the schema file.
 * If -write contains a full path name the file will be saved there. If -write only
 * contains no DS, that will be used as the file name, in the same dir as the schema file.
 *
 * @return string
 */",
 "/**
 * Run database create commands.  Alias for run create.
 *
 * @return void
 */",
 "/**
 * Run database create commands.  Alias for run create.
 *
 * @return void
 */",
 "/**
 * Prepares the Schema objects for database operations.
 *
 * @return void
 */",
 "/**
 * Create database from Schema object
 * Should be called via the run method
 *
 * @param CakeSchema $Schema
 * @param string $table
 * @return void
 */",
 "/**
 * Update database with Schema object
 * Should be called via the run method
 *
 * @param CakeSchema $Schema
 * @param string $table
 * @return void
 */",
 "/**
 * Runs sql from _create() or _update()
 *
 * @param array $contents
 * @param string $event
 * @param CakeSchema $Schema
 * @return void
 */",
 "/**
 * get the option parser
 *
 * @return void
 */",
 "/**
 * Schema is a command-line database management utility for automating programmer chores.
 *
 * Schema is CakePHP\'s database management utility. This helps you maintain versions of
 * of your database.
 *
 * @package       Cake.Console.Command
 * @link          http://book.cakephp.org/2.0/en/console-and-shells/schema-management-and-migrations.html
 */",
 "/**
 * Method called on open of a database session.
 *
 * @return boolean Success
 */",
 "/**
 * Method called on close of a database session.
 *
 * @return boolean Success
 */",
 "/**
 * Method used to read from a database session.
 *
 * @param string $id The key of the value to read
 * @return mixed The value of the key or false if it does not exist
 */",
 "/**
 * Helper function called on write for database sessions.
 *
 * @param integer $id ID that uniquely identifies session in database
 * @param mixed $data The value of the data to be saved.
 * @return boolean True for successful write, false otherwise.
 */",
 "/**
 * Method called on the destruction of a database session.
 *
 * @param integer $id ID that uniquely identifies session in cache
 * @return boolean True for successful delete, false otherwise.
 */",
 "/**
 * Helper function called on gc for cache sessions.
 *
 * @param integer $expires Timestamp (defaults to current time)
 * @return boolean Success
 */",
 "/**
 * CacheSession provides method for saving sessions into a Cache engine. Used with CakeSession
 *
 * @package       Cake.Model.Datasource.Session
 * @see CakeSession for configuration information.
 */",
 "/**
 * Does nothing yet. The first output will
 * be sent on the first test start.
 *
 * ### Params
 *
 * - show_passes - Should passes be shown
 * - plugin - Plugin test being run?
 * - core - Core test being run.
 * - case - The case being run
 * - codeCoverage - Whether the case/group being run is being code covered.
 *
 * @param string $charset The character set to output with. Defaults to UTF-8
 * @param array $params Array of request parameters the reporter should use. See above.
 */",
 "/**
 * Retrieves a list of test cases from the active Manager class,
 * displaying it in the correct format for the reporter subclass
 *
 * @return mixed
 */",
 "/**
 * Paints the start of the response from the test suite.
 * Used to paint things like head elements in an html page.
 *
 * @return void
 */",
 "/**
 * Paints the end of the response from the test suite.
 * Used to paint things like </body> in an html page.
 *
 * @return void
 */",
 "/**
 * Paint a list of test sets, core, app, and plugin test sets
 * available.
 *
 * @return void
 */",
 "/**
 * Get the baseUrl if one is available.
 *
 * @return string The base url for the request.
 */",
 "/**
 * An error occurred.
 *
 * @param  PHPUnit_Framework_Test $test
 * @param  Exception              $e
 * @param  float                  $time
 */",
 "/**
 * A failure occurred.
 *
 * @param  PHPUnit_Framework_Test $test
 * @param  PHPUnit_Framework_AssertionFailedError $e
 * @param  float $time
 */",
 "/**
 * Incomplete test.
 *
 * @param  PHPUnit_Framework_Test $test
 * @param  Exception $e
 * @param  float $time
 */",
 "/**
 * Skipped test.
 *
 * @param  PHPUnit_Framework_Test $test
 * @param  Exception $e
 * @param  float $time
 */",
 "/**
 * A test suite started.
 *
 * @param  PHPUnit_Framework_TestSuite $suite
 */",
 "/**
 * A test suite ended.
 *
 * @param  PHPUnit_Framework_TestSuite $suite
 */",
 "/**
 * A test started.
 *
 * @param  PHPUnit_Framework_Test $test
 */",
 "/**
 * A test ended.
 *
 * @param  PHPUnit_Framework_Test $test
 * @param  float $time
 */",
 "/**
 * CakeBaseReporter contains common reporting features used in the CakePHP Test suite
 *
 * @package       Cake.TestSuite.Reporter
 */",
 "/**
*constructor
*
*@returnvoid
*/",
 "/**
*RunstheactionsrequiredbytheURLparameters.
*
*@returnvoid
*/",
 "/**
*Staticmethodtoinitializethetestrunner,keepsglobalspaceclean
*
*@returnvoid
*/",
 "/**
*ChecksthatPHPUnitisinstalled.Willexitifitdoesn\'t
*
*@returnvoid
*/",
 "/**
*Checksfortheexistenceofthetestframeworkfiles
*
*@returnbooleantrueiffound,falseotherwise
*/",
 "/**
*Checksforthexdebugextensionrequiredtodocodecoverage.Displaysanerror
*ifxdebugisn\'tinstalled.
*
*@returnvoid
*/",
 "/**
*Generatesapagecontainingthealistoftestcasesthatcouldberun.
*
*@returnvoid
*/",
 "/**
*Setstheparams,callingthiswillbypasstheautoparameterparsing.
*
*@paramarray$paramsArrayofparametersforthedispatcher
*@returnvoid
*/",
 "/**
*Parseurlparamsintoa\'request\'
*
*@returnvoid
*/",
 "/**
*Runsatestcasefile.
*
*@returnvoid
*/",
 "/**
*Setsastatictimestamp
*
*@paramboolean$resettosetnewstatictimestamp.
*@returnintegertimestamp
*/",
 "/**
*Returnsformatteddatestringusingstatictime
*Thismethodisbeingusedasformatterforcreated,modifiedandupdatedfieldsinModel::save()
*
*@paramstring$formatformattobeused.
*@returnstringformatteddate
*/",
 "/**
*CakeTestSuiteDispatcherhandleswebrequeststothetestsuiteandrunsthecorrectaction.
*
*@packageCake.TestSuite
*/",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Restored the original system timezone
 *
 * @param string $timezoneIdentifier Timezone string
 * @return void
 */",
 "/**
 * testToQuarter method
 *
 * @return void
 */",
 "/**
 * provider for timeAgoInWords() tests
 *
 * @return array
 */",
 "/**
 * testTimeAgoInWords method
 *
 * @dataProvider timeAgoProvider
 * @return void
 */",
 "/**
 * provider for timeAgo with an end date.
 *
 * @return void
 */",
 "/**
 * test the end option for timeAgoInWords
 *
 * @dataProvider timeAgoEndProvider
 * @return void
 */",
 "/**
 * Test the accuracy option for timeAgoInWords()
 *
 * @return void
 */",
 "/**
 * Test the format option of timeAgoInWords()
 *
 * @return void
 */",
 "/**
 * test timeAgoInWords() with negative values.
 *
 * @return void
 */",
 "/**
 * testNice method
 *
 * @return void
 */",
 "/**
 * testNiceShort method
 *
 * @return void
 */",
 "/**
 * testDaysAsSql method
 *
 * @return void
 */",
 "/**
 * testDayAsSql method
 *
 * @return void
 */",
 "/**
 * testToUnix method
 *
 * @return void
 */",
 "/**
 * testToServer method
 *
 * @return void
 */",
 "/**
 * testToAtom method
 *
 * @return void
 */",
 "/**
 * testToRss method
 *
 * @return void
 */",
 "/**
 * testFormat method
 *
 * @return void
 */",
 "/**
 * testOfGmt method
 *
 * @return void
 */",
 "/**
 * testIsToday method
 *
 * @return void
 */",
 "/**
 * testIsThisWeek method
 *
 * @return void
 */",
 "/**
 * testIsThisMonth method
 *
 * @return void
 */",
 "/**
 * testIsThisYear method
 *
 * @return void
 */",
 "/**
 * testWasYesterday method
 *
 * @return void
 */",
 "/**
 * testIsTomorrow method
 *
 * @return void
 */",
 "/**
 * testWasWithinLast method
 *
 * @return void
 */",
 "/**
 * testWasWithinLast method
 *
 * @return void
 */",
 "/**
 * testUserOffset method
 *
 * @return void
 */",
 "/**
 * test fromString()
 *
 * @return void
 */",
 "/**
 * test fromString() with a DateTime object as the dateString
 *
 * @return void
 */",
 "/**
 * test converting time specifiers using a time definition localfe file
 *
 * @return void
 */",
 "/**
*testconvert%eonwindows.
*
*@returnvoid
*/",
 "/**
*testformattingdatestakinginaccountpreferredi18nlocalefile
*
*@returnvoid
*/",
 "/**
*testnewformat()syntaxwhichinvertsfirstandsecondparameters
*
*@returnvoid
*/",
 "/**
*testListTimezones
*
*@returnvoid
*/",
 "/**
*CakeTimeTestclass
*
*@packageCake.Test.Case.View.Helper
*/",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * cache_parsing method
 *
 * @return void
 */",
 "/**
 * CacheTestController class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * Checks if TMP/views is writable, and skips the case if it is not.
 *
 * @return void
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test cache parsing with no cake:nocache tags in view file.
 *
 * @return void
 */",
 "/**
 * test cache parsing with non-latin characters in current route
 *
 * @return void
 */",
 "/**
 * Test cache parsing with cake:nocache tags in view file.
 *
 * @return void
 */",
 "/**
 * test that multiple <!--nocache--> tags function with multiple nocache tags in the layout.
 *
 * @return void
 */",
 "/**
 * testComplexNoCache method
 *
 * @return void
 */",
 "/**
 * test cache of view vars
 *
 * @return void
 */",
 "/**
 * Test that callback code is generated correctly.
 *
 * @return void
 */",
 "/**
 * test cacheAction set to a boolean
 *
 * @return void
 */",
 "/**
 * Test that cacheAction works with camelcased controller names.
 *
 * @return void
 */",
 "/**
 * test with named and pass args.
 *
 * @return void
 */",
 "/**
 * Test that query string parameters are included in the cache filename.
 *
 * @return void
 */",
 "/**
 * test that custom routes are respected when generating cache files.
 *
 * @return void
 */",
 "/**
 * test ControllerName contains AppName
 *
 * This test verifies view cache is created correctly when the app name is contained in part of the controller name.
 * (webapp Name) base name is \'cache\' controller is \'cacheTest\' action is \'cache_name\'
 * apps url would look something like http://localhost/cache/cacheTest/cache_name
 *
 * @return void
 **/",
 "/**
 * test that afterRender checks the conditions correctly.
 *
 * @return void
 */",
 "/**
 * test that afterRender checks the conditions correctly.
 *
 * @return void
 */",
 "/**
 * testCacheEmptySections method
 *
 * This test must be uncommented/fixed in next release (1.2+)
 *
 * @return void
 */",
 "/**
 * CacheHelperTest class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * ModelBaseTest
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Get the stderr object for the console error handling.
 *
 * @return ConsoleOutput
 */",
 "/**
 * Handle a exception in the console environment. Prints a message to stderr.
 *
 * @param Exception $exception The exception to handle
 * @return void
 */",
 "/**
 * Handle errors in the console environment. Writes errors to stderr,
 * and logs messages if Configure::read(\'debug\') is 0.
 *
 * @param integer $code Error code
 * @param string $description Description of the error.
 * @param string $file The file the error occurred in.
 * @param integer $line The line the error occurred on.
 * @param array $context The backtrace of the error.
 * @return void
 */",
 "/**
 * Wrapper for exit(), used for testing.
 *
 * @param $code int The exit code.
 */",
 "/**
 * Error Handler for Cake console. Does simple printing of the
 * exception that occurred and the stack trace of the error.
 *
 * @package       Cake.Console
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllEventTest class
 *
 * This test group will run Event tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Send mail
 *
 * @param CakeEmail $email CakeEmail
 * @return array
 */",
 "/**
 * Debug Transport class, useful for emulate the email sending process and inspect the resulted
 * email message before actually send it during development
 *
 * @package       Cake.Network.Email
 */",
 "/**
 * Callback
 *
 * $config for TranslateBehavior should be
 * array(\'fields\' => array(\'field_one\',
 * \'field_two\' => \'FieldAssoc\', \'field_three\'))
 *
 * With above example only one permanent hasMany will be joined (for field_two
 * as FieldAssoc)
 *
 * $config could be empty - and translations configured dynamically by
 * bindTranslation() method
 *
 * @param Model $model Model the behavior is being attached to.
 * @param array $config Array of configuration information.
 * @return mixed
 */",
 "/**
 * Cleanup Callback unbinds bound translations and deletes setting information.
 *
 * @param Model $model Model being detached.
 * @return void
 */",
 "/**
 * beforeFind Callback
 *
 * @param Model $model Model find is being run on.
 * @param array $query Array of Query parameters.
 * @return array Modified query
 */",
 "/**
 * Check a query\'s conditions for translated fields.
 * Return an array of translated fields found in the conditions.
 *
 * @param Model $model The model being read.
 * @param array $query The query array.
 * @return array The list of translated fields that are in the conditions.
 */",
 "/**
 * Appends a join for translated fields and possibly a field.
 *
 * @param Model $model The model being worked on.
 * @param object $joinTable The jointable object.
 * @param array $query The query array to append a join to.
 * @param string $field The field name being joined.
 * @param string $aliasField The aliased field name being joined.
 * @param string|array $locale The locale(s) having joins added.
 * @param boolean $addField Whether or not to add a field.
 * @return array The modfied query
 */",
 "/**
 * afterFind Callback
 *
 * @param Model $model Model find was run on
 * @param array $results Array of model results.
 * @param boolean $primary Did the find originate on $model.
 * @return array Modified results
 */",
 "/**
 * beforeValidate Callback
 *
 * @param Model $model Model invalidFields was called on.
 * @return boolean
 */",
 "/**
 * beforeSave callback.
 *
 * Copies data into the runtime property when `$options[\'validate\']` is
 * disabled.  Or the runtime data hasn\'t been set yet.
 *
 * @param Model $model Model save was called on.
 * @return boolean true.
 */",
 "/**
 * Sets the runtime data.
 *
 * Used from beforeValidate() and beforeSave() for compatibility issues,
 * and to allow translations to be persisted even when validation
 * is disabled.
 *
 * @param Model $model
 * @return void
 */",
 "/**
 * afterSave Callback
 *
 * @param Model $model Model the callback is called on
 * @param boolean $created Whether or not the save created a record.
 * @return void
 */",
 "/**
 * afterDelete Callback
 *
 * @param Model $model Model the callback was run on.
 * @return void
 */",
 "/**
 * Get selected locale for model
 *
 * @param Model $model Model the locale needs to be set/get on.
 * @return mixed string or false
 */",
 "/**
 * Get instance of model for translations.
 *
 * If the model has a translateModel property set, this will be used as the class
 * name to find/use.  If no translateModel property is found \'I18nModel\' will be used.
 *
 * @param Model $model Model to get a translatemodel for.
 * @return Model
 */",
 "/**
 * Bind translation for fields, optionally with hasMany association for
 * fake field.
 *
 * *Note* You should avoid binding translations that overlap existing model properties.
 * This can cause un-expected and un-desirable behavior.
 *
 * @param Model $model instance of model
 * @param string|array $fields string with field or array(field1, field2=>AssocName, field3)
 * @param boolean $reset Leave true to have the fields only modified for the next operation.
 *   if false the field will be added for all future queries.
 * @return boolean
 * @throws CakeException when attempting to bind a translating called name.  This is not allowed
 *   as it shadows Model::$name.
 */",
 "/**
 * Update runtime setting for a given field.
 *
 * @param string $field The field to update.
 */",
 "/**
 * Unbind translation for fields, optionally unbinds hasMany association for
 * fake field
 *
 * @param Model $model instance of model
 * @param string|array $fields string with field, or array(field1, field2=>AssocName, field3), or null for
 *    unbind all original translations
 * @return boolean
 */",
 "/**
 * Translate behavior
 *
 * @package       Cake.Model.Behavior
 * @link http://book.cakephp.org/2.0/en/core-libraries/behaviors/translate.html
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Loads configuration files. Receives a set of configuration files
 * to load.
 * Example:
 *
 * `config(\'config1\', \'config2\');`
 *
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#config
 */",
 "/**
 * Prints out debug information about given variable.
 *
 * Only runs if debug level is greater than zero.
 *
 * @param boolean $var Variable to show debug information for.
 * @param boolean $showHtml If set to true, the method prints the debug data in a browser-friendly way.
 * @param boolean $showFrom If set to true, the method prints from where the function was called.
 * @link http://book.cakephp.org/2.0/en/development/debugging.html#basic-debugging
 * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#debug
 */",
 "/**
 * Sorts given $array by key $sortby.
 *
 * @param array $array Array to sort
 * @param string $sortby Sort by this key
 * @param string $order  Sort order asc/desc (ascending or descending).
 * @param integer $type Type of sorting to perform
 * @return mixed Sorted array
 * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#sortByKey
 */",
 "/**
 * Convenience method for htmlspecialchars.
 *
 * @param string|array|object $text Text to wrap through htmlspecialchars.  Also works with arrays, and objects.
 *    Arrays will be mapped and have all their elements escaped.  Objects will be string cast if they
 *    implement a `__toString` method.  Otherwise the class name will be used.
 * @param boolean $double Encode existing html entities
 * @param string $charset Character set to use when escaping.  Defaults to config value in \'App.encoding\' or \'UTF-8\'
 * @return string Wrapped text
 * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#h
 */",
 "/**
 * Splits a dot syntax plugin name into its plugin and classname.
 * If $name does not have a dot, then index 0 will be null.
 *
 * Commonly used like `list($plugin, $name) = pluginSplit($name);`
 *
 * @param string $name The name you want to plugin split.
 * @param boolean $dotAppend Set to true if you want the plugin to have a \'.\' appended to it.
 * @param string $plugin Optional default plugin to use if no plugin is found. Defaults to null.
 * @return array Array with 2 indexes.  0 => plugin name, 1 => classname
 * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#pluginSplit
 */",
 "/**
 * Print_r convenience function, which prints out <PRE> tags around
 * the output of given array. Similar to debug().
 *
 * @see	debug()
 * @param array $var Variable to print out
 * @link http://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#pr
 */",
 "/**
 * Merge a group of arrays
 *
 * @param array First array
 * @param array Second array
 * @param array Third array
 * @param array Etc...
 * @return array All array parameters merged into one
 * @link http://book.cakephp.org/2.0/en/development/debugging.html#am
 */",
 "/**
*Getsanenvironmentvariablefromavailablesources,andprovidesemulation
*forunsupportedorinconsistentenvironmentvariables(i.e.DOCUMENT_ROOTon
*IIS,orSCRIPT_NAMEinCGImode).Alsoexposessomeadditionalcustom
*environmentinformation.
*
*@paramstring$keyEnvironmentvariablename.
*@returnstringEnvironmentvariablesetting.
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#env
*/",
 "/**
*Reads/writestemporarydatatocachefilesorsession.
*
*@paramstring$path	Filepathwithin/tmptosavethefile.
*@parammixed$data	Thedatatosavetothetemporaryfile.
*@parammixed$expiresAvalidstrtotimestringwhenthedataexpires.
*@paramstring$targetThetargetofthecacheddata;either\'cache\'or\'public\'.
*@returnmixedThecontentsofthetemporaryfile.
*@deprecatedPleaseuseCache::write()instead
*/",
 "/**
*Usedtodeletefilesinthecachedirectories,orclearcontentsofcachedirectories
*
*@paramstring|array$paramsAsStringnametobesearchedfordeletion,ifnameisadirectoryallfilesin
*directorywillbedeleted.Ifarray,namestobesearchedfordeletion.IfclearCache()withoutparams,
*allfilesinapp/tmp/cache/viewswillbedeleted
*@paramstring$typeDirectoryintmp/cachedefaultstoviewdirectory
*@paramstring$extThefileextensionyouaredeleting
*@returntrueiffilesfoundanddeletedfalseotherwise
*/",
 "/**
*Recursivelystripsslashesfromallvaluesinanarray
*
*@paramarray$valuesArrayofvaluestostripslashes
*@returnmixedWhatisreturnedfromcallingstripslashes
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#stripslashes_deep
*/",
 "/**
*Returnsatranslatedstringifoneisfound;Otherwise,thesubmittedmessage.
*
*@paramstring$singularTexttotranslate
*@parammixed$argsArraywithargumentsormultipleargumentsinfunction
*@returnmixedtranslatedstring
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__
*/",
 "/**
*Returnscorrectpluralformofmessageidentifiedby$singularand$pluralforcount$count.
*Somelanguageshavemorethanoneformforpluralmessagesdependentonthecount.
*
*@paramstring$singularSingulartexttotranslate
*@paramstring$pluralPluraltext
*@paraminteger$countCount
*@parammixed$argsArraywithargumentsormultipleargumentsinfunction
*@returnmixedpluralformoftranslatedstring
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__n
*/",
 "/**
*Allowsyoutooverridethecurrentdomainforasinglemessagelookup.
*
*@paramstring$domainDomain
*@paramstring$msgStringtotranslate
*@parammixed$argsArraywithargumentsormultipleargumentsinfunction
*@returntranslatedstring
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__d
*/",
 "/**
*Allowsyoutooverridethecurrentdomainforasinglepluralmessagelookup.
*Returnscorrectpluralformofmessageidentifiedby$singularand$pluralforcount$count
*fromdomain$domain.
*
*@paramstring$domainDomain
*@paramstring$singularSingularstringtotranslate
*@paramstring$pluralPlural
*@paraminteger$countCount
*@parammixed$argsArraywithargumentsormultipleargumentsinfunction
*@returnpluralformoftranslatedstring
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__dn
*/",
 "/**
*Allowsyoutooverridethecurrentdomainforasinglemessagelookup.
*Italsoallowsyoutospecifyacategory.
*
*Thecategoryargumentallowsaspecificcategoryofthelocalesettingstobeusedforfetchingamessage.
*Validcategoriesare:LC_CTYPE,LC_NUMERIC,LC_TIME,LC_COLLATE,LC_MONETARY,LC_MESSAGESandLC_ALL.
*
*Notethatthecategorymustbespecifiedwithanumericvalue,insteadoftheconstantname.Thevaluesare:
*
*-LC_ALL0
*-LC_COLLATE1
*-LC_CTYPE2
*-LC_MONETARY3
*-LC_NUMERIC4
*-LC_TIME5
*-LC_MESSAGES6
*
*@paramstring$domainDomain
*@paramstring$msgMessagetotranslate
*@paraminteger$categoryCategory
*@parammixed$argsArraywithargumentsormultipleargumentsinfunction
*@returntranslatedstring
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__dc
*/",
 "/**
*Allowsyoutooverridethecurrentdomainforasinglepluralmessagelookup.
*Italsoallowsyoutospecifyacategory.
*Returnscorrectpluralformofmessageidentifiedby$singularand$pluralforcount$count
*fromdomain$domain.
*
*Thecategoryargumentallowsaspecificcategoryofthelocalesettingstobeusedforfetchingamessage.
*Validcategoriesare:LC_CTYPE,LC_NUMERIC,LC_TIME,LC_COLLATE,LC_MONETARY,LC_MESSAGESandLC_ALL.
*
*Notethatthecategorymustbespecifiedwithanumericvalue,insteadoftheconstantname.Thevaluesare:
*
*-LC_ALL0
*-LC_COLLATE1
*-LC_CTYPE2
*-LC_MONETARY3
*-LC_NUMERIC4
*-LC_TIME5
*-LC_MESSAGES6
*
*@paramstring$domainDomain
*@paramstring$singularSingularstringtotranslate
*@paramstring$pluralPlural
*@paraminteger$countCount
*@paraminteger$categoryCategory
*@parammixed$argsArraywithargumentsormultipleargumentsinfunction
*@returnpluralformoftranslatedstring
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__dcn
*/",
 "/**
*Thecategoryargumentallowsaspecificcategoryofthelocalesettingstobeusedforfetchingamessage.
*Validcategoriesare:LC_CTYPE,LC_NUMERIC,LC_TIME,LC_COLLATE,LC_MONETARY,LC_MESSAGESandLC_ALL.
*
*Notethatthecategorymustbespecifiedwithanumericvalue,insteadoftheconstantname.Thevaluesare:
*
*-LC_ALL0
*-LC_COLLATE1
*-LC_CTYPE2
*-LC_MONETARY3
*-LC_NUMERIC4
*-LC_TIME5
*-LC_MESSAGES6
*
*@paramstring$msgStringtotranslate
*@paraminteger$categoryCategory
*@parammixed$argsArraywithargumentsormultipleargumentsinfunction
*@returntranslatedstring
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#__c
*/",
 "/**
*ShortcuttoLog::write.
*
*@paramstring$messageMessagetowritetolog
*@returnvoid
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#LogError
*/",
 "/**
*Searchesincludepathforfiles.
*
*@paramstring$fileFiletolookfor
*@returnFullpathtofileifexists,otherwisefalse
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#fileExistsInPath
*/",
 "/**
*Convertforwardslashestounderscoresandremovesfirstandlastunderscoresinastring
*
*@paramstringStringtoconvert
*@returnstringwithunderscoreremovefromstartandendofstring
*@linkhttp://book.cakephp.org/2.0/en/core-libraries/global-constants-and-functions.html#convertSlash
*/",
 "/**
 * stop method
 *
 * @return void
 */",
 "/**
 * TestAuthComponent class
 *
 * @package       Cake.Test.Case.Controller.Component
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * AuthUser class
 *
 * @package       Cake.Test.Case.Controller.Component
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * construct method
 *
 * @return void
 */",
 "/**
 * login method
 *
 * @return void
 */",
 "/**
 * admin_login method
 *
 * @return void
 */",
 "/**
 * admin_add method
 *
 * @return void
 */",
 "/**
 * logout method
 *
 * @return void
 */",
 "/**
 * add method
 *
 * @return void
 */",
 "/**
 * add method
 *
 * @return void
 */",
 "/**
 * redirect method
 *
 * @param string|array $url
 * @param mixed $status
 * @param mixed $exit
 * @return void
 */",
 "/**
 * isAuthorized method
 *
 * @return void
 */",
 "/**
 * AuthTestController class
 *
 * @package       Cake.Test.Case.Controller.Component
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * beforeFilter method
 *
 * @return void
 */",
 "/**
 * add method
 *
 * @return void
 */",
 "/**
 * redirect method
 *
 * @param string|array $url
 * @param mixed $status
 * @param mixed $exit
 * @return void
 */",
 "/**
 * AjaxAuthController class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testNoAuth method
 *
 * @return void
 */",
 "/**
 * testIsErrorOrTests
 *
 * @return void
 */",
 "/**
 * testLogin method
 *
 * @return void
 */",
 "/**
 * test that being redirected to the login page, with no post data does
 * not set the session value.  Saving the session value in this circumstance
 * can cause the user to be redirected to an already public page.
 *
 * @return void
 */",
 "/**
 * testAuthorizeFalse method
 *
 * @return void
 */",
 "/**
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * test that isAuthorized calls methods correctly
 *
 * @return void
 */",
 "/**
 * test that isAuthorized will use the session user if none is given.
 *
 * @return void
 */",
 "/**
 * test that loadAuthorize resets the loaded objects each time.
 *
 * @return void
 */",
 "/**
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * test the * key with authenticate
 *
 * @return void
 */",
 "/**
 * test that loadAuthorize resets the loaded objects each time.
 *
 * @return void
 */",
 "/**
 * test the * key with authenticate
 *
 * @return void
 */",
 "/**
 * Tests that deny always takes precedence over allow
 *
 * @return void
 */",
 "/**
 * test that deny() converts camel case inputs to lowercase.
 *
 * @return void
 */",
 "/**
 * test that allow() and allowedActions work with camelCase method names.
 *
 * @return void
 */",
 "/**
 * testLoginRedirect method
 *
 * @return void
 */",
 "/**
 * Default to loginRedirect, if set, on authError.
 *
 * @return void
 */",
 "/**
 * Test that no redirects or authorization tests occur on the loginAction
 *
 * @return void
 */",
 "/**
 * Ensure that no redirect is performed when a 404 is reached
 * And the user doesn\'t have a session.
 *
 * @return void
 */",
 "/**
 * testAdminRoute method
 *
 * @return void
 */",
 "/**
 * testAjaxLogin method
 *
 * @return void
 */",
 "/**
 * testLoginActionRedirect method
 *
 * @return void
 */",
 "/**
 * Stateless auth methods like Basic should populate data that can be
 * accessed by $this->user().
 *
 * @return void
 */",
 "/**
 * Tests that shutdown destroys the redirect session var
 *
 * @return void
 */",
 "/**
 * test $settings in Controller::$components
 *
 * @return void
 */",
 "/**
 * test that logout deletes the session variables. and returns the correct url
 *
 * @return void
 */",
 "/**
 * Logout should trigger a logout method on authentication objects.
 *
 * @return void
 */",
 "/**
 * test mapActions loading and delegating to authorize objects.
 *
 * @return void
 */",
 "/**
 * test logging in with a request.
 *
 * @return void
 */",
 "/**
 * test login() with user data
 *
 * @return void
 */",
 "/**
 * test flash settings.
 *
 * @return void
 */",
 "/**
 * test the various states of Auth::redirect()
 *
 * @return void
 */",
 "/**
 * test redirect using Auth.redirect from the session.
 *
 * @return void
 */",
 "/**
 * test that redirect does not return loginAction if that is what\'s stored in Auth.redirect.
 * instead loginRedirect should be used.
 *
 * @return void
 */",
 "/**
 * test password hashing
 *
 * @return void
 */",
 "/**
 * testUser method
 *
 * @return void
 */",
 "/**
 * AuthComponentTest class
 *
 * @package       Cake.Test.Case.Controller.Component
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * Override initialize
 *
 * @return void
 */",
 "/**
 * Execution method always used for tasks
 *
 * @return void
 */",
 "/**
 * Bake all models at once.
 *
 * @return void
 */",
 "/**
 * Get a model object for a class name.
 *
 * @param string $className Name of class you want model to be.
 * @param string $table Table name
 * @return Model Model instance
 */",
 "/**
 * Generate a key value list of options and a prompt.
 *
 * @param array $options Array of options to use for the selections. indexes must start at 0
 * @param string $prompt Prompt to use for options list.
 * @param integer $default The default option for the given prompt.
 * @return integer result of user choice.
 */",
 "/**
 * Handles interactive baking
 *
 * @return boolean
 */",
 "/**
 * Print out all the associations of a particular type
 *
 * @param string $modelName Name of the model relations belong to.
 * @param string $type Name of association you want to see. i.e. \'belongsTo\'
 * @param string $associations Collection of associations.
 * @return void
 */",
 "/**
 * Finds a primary Key in a list of fields.
 *
 * @param array $fields Array of fields that might have a primary key.
 * @return string Name of field that is a primary key.
 */",
 "/**
 * interact with the user to find the displayField value for a model.
 *
 * @param array $fields Array of fields to look for and choose as a displayField
 * @return mixed Name of field to use for displayField or false if the user declines to choose
 */",
 "/**
 * Handles Generation and user interaction for creating validation.
 *
 * @param Model $model Model to have validations generated for.
 * @return array $validate Array of user selected validations.
 */",
 "/**
 * Populate the _validations array
 *
 * @return void
 */",
 "/**
 * Does individual field validation handling.
 *
 * @param string $fieldName Name of field to be validated.
 * @param array $metaData metadata for field
 * @param string $primaryKey
 * @return array Array of validation for the field.
 */",
 "/**
 * Handles associations
 *
 * @param Model $model
 * @return array $associations
 */",
 "/**
 * Find belongsTo relations and add them to the associations list.
 *
 * @param Model $model Model instance of model being generated.
 * @param array $associations Array of in progress associations
 * @return array $associations with belongsTo added in.
 */",
 "/**
 * Find the hasOne and HasMany relations and add them to associations list
 *
 * @param Model $model Model instance being generated
 * @param array $associations Array of in progress associations
 * @return array $associations with hasOne and hasMany added in.
 */",
 "/**
 * Find the hasAndBelongsToMany relations and add them to associations list
 *
 * @param Model $model Model instance being generated
 * @param array $associations Array of in-progress associations
 * @return array $associations with hasAndBelongsToMany added in.
 */",
 "/**
 * Interact with the user and confirm associations.
 *
 * @param array $model Temporary Model instance.
 * @param array $associations Array of associations to be confirmed.
 * @return array Array of confirmed associations
 */",
 "/**
 * Interact with the user and generate additional non-conventional associations
 *
 * @param Model $model Temporary model instance
 * @param array $associations Array of associations.
 * @return array Array of associations.
 */",
 "/**
 * Finds all possible keys to use on custom associations.
 *
 * @return array array of tables and possible keys
 */",
 "/**
 * Assembles and writes a Model file.
 *
 * @param string|object $name Model name or object
 * @param array|boolean $data if array and $name is not an object assume bake data, otherwise boolean.
 * @return string
 */",
 "/**
 * Assembles and writes a unit test file
 *
 * @param string $className Model class name
 * @return string
 */",
 "/**
 * outputs the a list of possible models or controllers from database
 *
 * @param string $useDbConfig Database configuration name
 * @return array
 */",
 "/**
 * Interact with the user to determine the table name of a particular model
 *
 * @param string $modelName Name of the model you want a table for.
 * @param string $useDbConfig Name of the database config you want to get tables from.
 * @return string Table name
 */",
 "/**
 * Get an Array of all the tables in the supplied connection
 * will halt the script if no tables are found.
 *
 * @param string $useDbConfig Connection name to scan.
 * @return array Array of tables in the database.
 */",
 "/**
 * Forces the user to specify the model he wants to bake, and returns the selected model name.
 *
 * @param string $useDbConfig Database config name
 * @return string the model name
 */",
 "/**
 * get the option parser.
 *
 * @return void
 */",
 "/**
 * Interact with FixtureTask to automatically bake fixtures when baking models.
 *
 * @param string $className Name of class to bake fixture for
 * @param string $useTable Optional table name for fixture to use.
 * @return void
 * @see FixtureTask::bake
 */",
 "/**
 * Task class for creating and updating model files.
 *
 * @package	   Cake.Console.Command.Task
 */",
 "/**
 * UnderscoreFieldFixture class
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Disable caching and enable debug for baking.
 * This forces the most current database schema to be used.
 *
 * @return void
 */",
 "/**
 * Gets the path for output.  Checks the plugin property
 * and returns the correct path.
 *
 * @return string Path to output.
 */",
 "/**
 * Base execute method parses some parameters and sets some properties on the bake tasks.
 * call when overriding execute()
 *
 * @return void
 */",
 "/**
 * Base class for Bake Tasks.
 *
 * @package       Cake.Console.Command.Task
 */",
 "/**
 * Cache inflected values, and return if already available
 *
 * @param string $type Inflection type
 * @param string $key Original value
 * @param string $value Inflected value
 * @return string Inflected value, from cache
 */",
 "/**
 * Clears Inflectors inflected value caches. And resets the inflection
 * rules to the initial values.
 *
 * @return void
 */",
 "/**
 * Adds custom inflection $rules, of either \'plural\', \'singular\' or \'transliteration\' $type.
 *
 * ### Usage:
 *
 * {{{
 * Inflector::rules(\'plural\', array(\'/^(inflect)or$/i\' => \'\1ables\'));
 * Inflector::rules(\'plural\', array(
 *     \'rules\' => array(\'/^(inflect)ors$/i\' => \'\1ables\'),
 *     \'uninflected\' => array(\'dontinflectme\'),
 *     \'irregular\' => array(\'red\' => \'redlings\')
 * ));
 * Inflector::rules(\'transliteration\', array(\'/??/\' => \'aa\'));
 * }}}
 *
 * @param string $type The type of inflection, either \'plural\', \'singular\' or \'transliteration\'
 * @param array $rules Array of rules to be added.
 * @param boolean $reset If true, will unset default inflections for all
 *        new rules that are being defined in $rules.
 * @return void
 */",
 "/**
 * Return $word in plural form.
 *
 * @param string $word Word in singular
 * @return string Word in plural
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::pluralize
 */",
 "/**
 * Return $word in singular form.
 *
 * @param string $word Word in plural
 * @return string Word in singular
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::singularize
 */",
 "/**
 * Returns the given lower_case_and_underscored_word as a CamelCased word.
 *
 * @param string $lowerCaseAndUnderscoredWord Word to camelize
 * @return string Camelized word. LikeThis.
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::camelize
 */",
 "/**
 * Returns the given camelCasedWord as an underscored_word.
 *
 * @param string $camelCasedWord Camel-cased word to be \"underscorized\"
 * @return string Underscore-syntaxed version of the $camelCasedWord
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::underscore
 */",
 "/**
 * Returns the given underscored_word_group as a Human Readable Word Group.
 * (Underscores are replaced by spaces and capitalized following words.)
 *
 * @param string $lowerCaseAndUnderscoredWord String to be made more readable
 * @return string Human-readable string
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::humanize
 */",
 "/**
 * Returns corresponding table name for given model $className. (\"people\" for the model class \"Person\").
 *
 * @param string $className Name of class to get database table name for
 * @return string Name of the database table for given class
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::tableize
 */",
 "/**
 * Returns Cake model class name (\"Person\" for the database table \"people\".) for given database table.
 *
 * @param string $tableName Name of database table to get class name for
 * @return string Class name
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::classify
 */",
 "/**
 * Returns camelBacked version of an underscored string.
 *
 * @param string $string
 * @return string in variable form
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::variable
 */",
 "/**
 * Returns a string with all spaces converted to underscores (by default), accented
 * characters converted to non-accented characters, and non word characters removed.
 *
 * @param string $string the string you want to slug
 * @param string $replacement will replace keys in map
 * @return string
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html#Inflector::slug
 */",
 "/**
 * Pluralize and singularize English words.
 *
 * Inflector pluralizes and singularizes English nouns.
 * Used by Cake\'s naming conventions throughout the framework.
 *
 * @package       Cake.Utility
 * @link          http://book.cakephp.org/2.0/en/core-utility-libraries/inflector.html
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllRoutingTest class
 *
 * This test group will routing related tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * parentNode method
 *
 * @return void
 */",
 "/**
 * Test Person class - self joined model
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * parentNode
 *
 */",
 "/**
 * AclUser class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * parentNode
 *
 */",
 "/**
 * AclPost class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * Set up the test
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Test Setup of AclBehavior
 *
 * @return void
 */",
 "/**
 * Test Setup of AclBehavior as both requester and controlled
 *
 * @return void
 */",
 "/**
 * test After Save
 *
 * @return void
 */",
 "/**
 * test that an afterSave on an update does not cause parent_id to become null.
 *
 * @return void
 */",
 "/**
 * Test After Delete
 *
 * @return void
 */",
 "/**
 * Test Node()
 *
 * @return void
 */",
 "/**
 * AclBehaviorTest class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * Sets up additional actionMap values that match the configured `Routing.prefixes`.
 *
 * @param ComponentCollection $collection The component collection from the controller.
 * @param string $settings An array of settings.  This class does not use any settings.
 */",
 "/**
 * sets the crud mappings for prefix routes.
 *
 * @return void
 */",
 "/**
 * Authorize a user using the mapped actions and the AclComponent.
 *
 * @param array $user The user to authorize
 * @param CakeRequest $request The request needing authorization.
 * @return boolean
 */",
 "/**
 * An authorization adapter for AuthComponent.  Provides the ability to authorize using CRUD mappings.
 * CRUD mappings allow you to translate controller actions into *C*reate *R*ead *U*pdate *D*elete actions.
 * This is then checked in the AclComponent as specific permissions.
 *
 * For example, taking `/posts/index` as the current request.  The default mapping for `index`, is a `read` permission
 * check. The Acl check would then be for the `posts` controller with the `read` permission.  This allows you
 * to create permission systems that focus more on what is being done to resources, rather than the specific actions
 * being visited.
 *
 * @package       Cake.Controller.Component.Auth
 * @since 2.0
 * @see AuthComponent::$authenticate
 * @see AclComponent::check()
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * HelperTestPost class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * HelperTestComment class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * HelperTestTag class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * HelperTestPostsTag class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * expose a method as public
 *
 * @param string $options
 * @param string $exclude
 * @param string $insertBefore
 * @param string $insertAfter
 * @return void
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Provider for setEntity test.
 *
 * @return array
 */",
 "/**
 * Test setting an entity and retrieving the entity, model and field.
 *
 * @dataProvider entityProvider
 * @return void
 */",
 "/**
 * test setEntity with setting a scope.
 *
 * @return
 */",
 "/**
 * Test that setEntity() and model()/field() work with associated models.
 *
 * @return void
 */",
 "/**
 * Test creating saveMany() compatible entities
 *
 * @return void
 */",
 "/**
 * Test that setEntity doesn\'t make CamelCase fields that are not associations an
 * associated model.
 *
 * @return void
 */",
 "/**
 * Test that multiple fields work when they are camelcase and in fieldset
 *
 * @return void
 */",
 "/**
 * Test that habtm associations can have property fields created.
 *
 * @return void
 */",
 "/**
 * test that \'view\' doesn\'t break things.
 *
 * @return void
 */",
 "/**
 * test getting values from Helper
 *
 * @return void
 */",
 "/**
 * Test default values with value()
 *
 * @return void
 */",
 "/**
 * Test habtm data fetching and ensure no pollution happens.
 *
 * @return void
 */",
 "/**
 * Ensure HTML escaping of url params.  So link addresses are valid and not exploited
 *
 * @return void
 */",
 "/**
 * test assetTimestamp application
 *
 * @return void
 */",
 "/**
 * test assetUrl application
 *
 * @return void
 */",
 "/**
 * Test assetUrl with plugins.
 *
 * @return void
 */",
 "/**
 * test assetUrl and Asset.timestamp = force
 *
 * @return void
 */",
 "/**
 * test assetTimestamp with plugins and themes
 *
 * @return void
 */",
 "/**
 * testFieldsWithSameName method
 *
 * @return void
 */",
 "/**
 * testFieldSameAsModel method
 *
 * @return void
 */",
 "/**
 * testFieldSuffixForDate method
 *
 * @return void
 */",
 "/**
 * testMulitDimensionValue method
 *
 * @return void
 */",
 "/**
 * testClean method
 *
 * @return void
 */",
 "/**
 * testMultiDimensionalField method
 *
 * @return void
 */",
 "/**
 * test lazy loading helpers is seamless
 *
 * @return void
 */",
 "/**
 * test that a helpers Helper is not \'attached\' to the collection
 *
 * @return void
 */",
 "/**
 * test that the lazy loader doesn\'t duplicate objects on each access.
 *
 * @return void
 */",
 "/**
 * HelperTest class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test that main finds core shells.
 *
 * @return void
 */",
 "/**
 * test xml output.
 *
 * @return void
 */",
 "/**
 * A model used by TranslateBehavior to access the translation tables.
 *
 * @package Cake.Model
 */",
 "/**
 * setup the test case
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testBasic method
 *
 * @return void
 */",
 "/**
*testPermissionmethod
*/",
 "/**
*testReadmethod
*
*@returnvoid
*/",
 "/**
*testOffsetmethod
*
*@returnvoid
*/",
 "/**
*testOpenmethod
*
*@returnvoid
*/",
 "/**
*testClosemethod
*
*@returnvoid
*/",
 "/**
*testCreatemethod
*
*@returnvoid
*/",
 "/**
*testOpeningNonExistentFileCreatesItmethod
*
*@returnvoid
*/",
 "/**
*testPreparemethod
*
*@returnvoid
*/",
 "/**
*testReadablemethod
*
*@returnvoid
*/",
 "/**
*testWritablemethod
*
*@returnvoid
*/",
 "/**
*testExecutablemethod
*
*@returnvoid
*/",
 "/**
*testLastAccessmethod
*
*@returnvoid
*/",
 "/**
*testLastChangemethod
*
*@returnvoid
*/",
 "/**
*testWritemethod
*
*@returnvoid
*/",
 "/**
*testAppendmethod
*
*@returnvoid
*/",
 "/**
*testDeletemethod
*
*@returnvoid
*/",
 "/**
*Windowshasissuesunlinkingfilesifthereare
*activefilehandlesopen.
*
*@returnvoid
*/",
 "/**
*testCopymethod
*
*@returnvoid
*/",
 "/**
*Testmime()
*
*@returnvoid
*/",
 "/**
 * getTmpFile method
 *
 * @param bool $paintSkip
 * @return void
 */",
 "/**
 * FileTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * _findPublished custom find
 *
 * @return array
 */",
 "/**
 * AppModel class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Test class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TestAlias class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * validateNumber method
 *
 * @param mixed $value
 * @param mixed $options
 * @return void
 */",
 "/**
 * validateTitle method
 *
 * @param mixed $value
 * @return void
 */",
 "/**
 * TestValidate class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * beforeFind() callback used to run ContainableBehaviorTest::testLazyLoad()
 *
 * @return bool
 * @throws Exception
 */",
 "/**
 * User class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * beforeSave method
 *
 * @return void
 */",
 "/**
 * titleDuplicate method
 *
 * @param string $title
 * @return void
 */",
 "/**
 * Article class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Model stub for beforeDelete testing
 *
 * @see #250
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * NumericArticle class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Article10 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ArticleFeatured class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Featured class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Tag class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ArticlesTag class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ArticleFeaturedsTag class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Comment class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * afterFind callback
 *
 * @return void
 */",
 "/**
 * Modified Comment Class has afterFind Callback
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * afterFind callback
 *
 * @return void
 */",
 "/**
 * Modified Comment Class has afterFind Callback
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * MergeVarPluginAppModel class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * MergeVarPluginPost class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * MergeVarPluginComment class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Attachment class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * afterFind callback
 *
 * @return void
 */",
 "/**
 * ModifiedAttachment class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Category class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * CategoryThread class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Apple class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Sample class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * AnotherArticle class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Advertisement class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Home class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Post class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * afterFind method
 *
 * @param array $results
 * @return void
 */",
 "/**
 * Author class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * afterFind method
 *
 * @param array $results
 * @return void
 */",
 "/**
 * ModifiedAuthor class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Project class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Thread class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Message class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Bid class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * BiddingMessage class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Bidding class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * afterFind method
 *
 * @param mixed $results
 * @return array
 */",
 "/**
 * NodeAfterFind class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * NodeAfterFindSample class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * NodeNoAfterFind class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Node class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Dependency class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ModelA class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ModelB class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ModelC class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ModelD class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Something class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SomethingElse class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * JoinThing class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Portfolio class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Item class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ItemsPortfolio class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Syfile class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Image class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * DeviceType class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * DeviceTypeCategory class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * FeatureSet class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ExteriorTypeCategory class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Document class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Device class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * DocumentDirectory class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * PrimaryModel class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SecondaryModel class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * JoinA class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * JoinB class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * JoinC class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ThePaper class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Monkey class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * AssociationTest1 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * AssociationTest2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Callback class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * beforeSave callback
 *
 * @return void
 */",
 "/**
 * beforeValidate callback
 *
 * @return void
 */",
 "/**
 * beforeDelete callback
 *
 * @return void
 */",
 "/**
 * CallbackPostTestModel class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Uuid class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * DataTest class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TheVoid class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * customValidationMethod method
 *
 * @param mixed $data
 * @return void
 */",
 "/**
 * Custom validator with parameters + default values
 *
 * @return array
 */",
 "/**
 * Custom validator with message
 *
 * @return array
 */",
 "/**
 * Test validation with many parameters
 *
 * @return void
 */",
 "/**
 * ValidationTest1 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * customValidationMethod method
 *
 * @param mixed $data
 * @return void
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * ValidationTest2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Person class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * UnderscoreField class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Product class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Story class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Cd class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Book class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * OverallFavorite class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * MyUser class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * MyCategory class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * MyProduct class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * MyCategoriesMyUser class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * MyCategoriesMyProduct class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * initialize method
 *
 * @param integer $levelLimit
 * @param integer $childLimit
 * @param mixed $currentLevel
 * @param mixed $parent_id
 * @param string $prefix
 * @param bool $hierarchal
 * @return void
 */",
 "/**
 * NumberTree class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * NumberTreeTwo class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * FlagTree class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * UnconventionalTree class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * UuidTree class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Campaign class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Ad class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * AfterTree class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Nonconformant Content class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Nonconformant Account class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Nonconformant ContentAccount class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * FilmFile class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Basket test model
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TestPluginArticle class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TestPluginComment class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Uuidportfolio class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Uuiditem class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * UuiditemsPortfolio class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * UuiditemsPortfolioNumericid class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TranslateTestModel class.
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TranslateTestModel class.
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TranslatedItem class.
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TranslatedItem class.
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TranslatedItemWithTable class.
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TranslateArticleModel class.
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TranslatedArticle class.
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * find method
 *
 * @param mixed $conditions
 * @param mixed $fields
 * @param mixed $order
 * @param mixed $recursive
 * @return void
 */",
 "/**
 * findAll method
 *
 * @param mixed $conditions
 * @param mixed $fields
 * @param mixed $order
 * @param mixed $recursive
 * @return void
 */",
 "/**
 * TestModel class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TestModel2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * TestModel4 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * TestModel4 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * TestModel4TestModel7 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * TestModel5 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * TestModel6 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * TestModel7 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * TestModel8 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * TestModel9 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * Level class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * Group class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * User2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * Category2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * Article2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * CategoryFeatured2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * Featured2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * Comment2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * ArticleFeatured2 class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * find method
 *
 * @param mixed $conditions
 * @param mixed $fields
 * @param mixed $order
 * @param mixed $recursive
 * @return void
 */",
 "/**
 * findAll method
 *
 * @param mixed $conditions
 * @param mixed $fields
 * @param mixed $order
 * @param mixed $recursive
 * @return void
 */",
 "/**
 * schema method
 *
 * @return void
 */",
 "/**
 * MysqlTestModel class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Test model for datasource prefixes
 *
 */",
 "/**
 * ScaffoldMock class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * ScaffoldUser class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * ScaffoldComment class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * ScaffoldTag class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * Player class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Guild class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * GuildsPlayer class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Armor class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * ArmorsPlayer class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * _findUnPublished custom find
 *
 * @return array
 */",
 "/**
 * Alters title data
 *
 * @return void
 **/",
 "/**
 * CustomArticle class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Constructor
 *
 * ### Settings
 *
 * - `configFile` A file containing an array of tags you wish to redefine.
 *
 * ### Customizing tag sets
 *
 * Using the `configFile` option you can redefine the tag HtmlHelper will use.
 * The file named should be compatible with HtmlHelper::loadConfig().
 *
 * @param View $View The View this helper is being attached to.
 * @param array $settings Configuration settings for the helper.
 */",
 "/**
 * Adds a link to the breadcrumbs array.
 *
 * @param string $name Text for link
 * @param string $link URL for link (if empty it won\'t be a link)
 * @param string|array $options Link attributes e.g. array(\'id\' => \'selected\')
 * @return void
 * @see HtmlHelper::link() for details on $options that can be used.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#creating-breadcrumb-trails-with-htmlhelper
 */",
 "/**
 * Returns a doctype string.
 *
 * Possible doctypes:
 *
 *  - html4-strict:  HTML4 Strict.
 *  - html4-trans:  HTML4 Transitional.
 *  - html4-frame:  HTML4 Frameset.
 *  - html5: HTML5. Default value.
 *  - xhtml-strict: XHTML1 Strict.
 *  - xhtml-trans: XHTML1 Transitional.
 *  - xhtml-frame: XHTML1 Frameset.
 *  - xhtml11: XHTML1.1.
 *
 * @param string $type Doctype to use.
 * @return string Doctype string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::docType
 */",
 "/**
 * Creates a link to an external resource and handles basic meta tags
 *
 * Create a meta tag that is output inline:
 *
 * `$this->Html->meta(\'icon\', \'favicon.ico\');
 *
 * Append the meta tag to `$scripts_for_layout`:
 *
 * `$this->Html->meta(\'description\', \'A great page\', array(\'inline\' => false));`
 *
 * Append the meta tag to custom view block:
 *
 * `$this->Html->meta(\'description\', \'A great page\', array(\'block\' => \'metaTags\'));`
 *
 * ### Options
 *
 * - `inline` Whether or not the link element should be output inline. Set to false to
 *   have the meta tag included in `$scripts_for_layout`, and appended to the \'meta\' view block.
 * - `block` Choose a custom block to append the meta tag to.  Using this option
 *   will override the inline option.
 *
 * @param string $type The title of the external resource
 * @param string|array $url The address of the external resource or string for content attribute
 * @param array $options Other attributes for the generated tag. If the type attribute is html,
 *    rss, atom, or icon, the mime-type is returned.
 * @return string A completed `<link />` element.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::meta
 */",
 "/**
 * Returns a charset META-tag.
 *
 * @param string $charset The character set to be used in the meta tag. If empty,
 *  The App.encoding value will be used. Example: \"utf-8\".
 * @return string A meta tag containing the specified character set.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::charset
 */",
 "/**
 * Creates an HTML link.
 *
 * If $url starts with \"http://\" this is treated as an external link. Else,
 * it is treated as a path to controller/action and parsed with the
 * HtmlHelper::url() method.
 *
 * If the $url is empty, $title is used instead.
 *
 * ### Options
 *
 * - `escape` Set to false to disable escaping of title and attributes.
 * - `confirm` JavaScript confirmation message.
 *
 * @param string $title The content to be wrapped by <a> tags.
 * @param string|array $url Cake-relative URL or array of URL parameters, or external URL (starts with http://)
 * @param array $options Array of HTML attributes.
 * @param string $confirmMessage JavaScript confirmation message.
 * @return string An `<a />` element.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::link
 */",
 "/**
 * Creates a link element for CSS stylesheets.
 *
 * ### Usage
 *
 * Include one CSS file:
 *
 * `echo $this->Html->css(\'styles.css\');`
 *
 * Include multiple CSS files:
 *
 * `echo $this->Html->css(array(\'one.css\', \'two.css\'));`
 *
 * Add the stylesheet to the `$scripts_for_layout` layout var:
 *
 * `$this->Html->css(\'styles.css\', null, array(\'inline\' => false));`
 *
 * Add the stylesheet to a custom block:
 *
 * `$this->Html->css(\'styles.css\', null, array(\'block\' => \'layoutCss\'));`
 *
 * ### Options
 *
 * - `inline` If set to false, the generated tag will be appended to the \'css\' block,
 *   and included in the `$scripts_for_layout` layout variable. Defaults to true.
 * - `block` Set the name of the block link/style tag will be appended to.  This overrides the `inline`
 *   option.
 * - `plugin` False value will prevent parsing path as a plugin
 *
 * @param string|array $path The name of a CSS style sheet or an array containing names of
 *   CSS stylesheets. If `$path` is prefixed with \'/\', the path will be relative to the webroot
 *   of your application. Otherwise, the path will be relative to your CSS path, usually webroot/css.
 * @param string $rel Rel attribute. Defaults to \"stylesheet\". If equal to \'import\' the stylesheet will be imported.
 * @param array $options Array of HTML attributes.
 * @return string CSS <link /> or <style /> tag, depending on the type of link.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::css
 */",
 "/**
 * Returns one or many `<script>` tags depending on the number of scripts given.
 *
 * If the filename is prefixed with \"/\", the path will be relative to the base path of your
 * application.  Otherwise, the path will be relative to your JavaScript path, usually webroot/js.
 *
 *
 * ### Usage
 *
 * Include one script file:
 *
 * `echo $this->Html->script(\'styles.js\');`
 *
 * Include multiple script files:
 *
 * `echo $this->Html->script(array(\'one.js\', \'two.js\'));`
 *
 * Add the script file to the `$scripts_for_layout` layout var:
 *
 * `$this->Html->script(\'styles.js\', array(\'inline\' => false));`
 *
 * Add the script file to a custom block:
 *
 * `$this->Html->script(\'styles.js\', null, array(\'block\' => \'bodyScript\'));`
 *
 * ### Options
 *
 * - `inline` Whether script should be output inline or into `$scripts_for_layout`. When set to false,
 *   the script tag will be appended to the \'script\' view block as well as `$scripts_for_layout`.
 * - `block` The name of the block you want the script appended to.  Leave undefined to output inline.
 *   Using this option will override the inline option.
 * - `once` Whether or not the script should be checked for uniqueness. If true scripts will only be
 *   included once, use false to allow the same script to be included more than once per request.
 * - `plugin` False value will prevent parsing path as a plugin
 *
 * @param string|array $url String or array of javascript files to include
 * @param array|boolean $options Array of options, and html attributes see above. If boolean sets $options[\'inline\'] = value
 * @return mixed String of `<script />` tags or null if $inline is false or if $once is true and the file has been
 *   included before.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::script
 */",
 "/**
 * Wrap $script in a script tag.
 *
 * ### Options
 *
 * - `safe` (boolean) Whether or not the $script should be wrapped in <![CDATA[ ]]>
 * - `inline` (boolean) Whether or not the $script should be added to
 *   `$scripts_for_layout` / `script` block, or output inline. (Deprecated, use `block` instead)
 * - `block` Which block you want this script block appended to.
 *   Defaults to `script`.
 *
 * @param string $script The script to wrap
 * @param array $options The options to use. Options not listed above will be
 *    treated as HTML attributes.
 * @return mixed string or null depending on the value of `$options[\'block\']`
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::scriptBlock
 */",
 "/**
 * Begin a script block that captures output until HtmlHelper::scriptEnd()
 * is called. This capturing block will capture all output between the methods
 * and create a scriptBlock from it.
 *
 * ### Options
 *
 * - `safe` Whether the code block should contain a CDATA
 * - `inline` Should the generated script tag be output inline or in `$scripts_for_layout`
 *
 * @param array $options Options for the code block.
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::scriptStart
 */",
 "/**
 * End a Buffered section of Javascript capturing.
 * Generates a script tag inline or in `$scripts_for_layout` depending on the settings
 * used when the scriptBlock was started
 *
 * @return mixed depending on the settings of scriptStart() either a script tag or null
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::scriptEnd
 */",
 "/**
 * Builds CSS style data from an array of CSS properties
 *
 * ### Usage:
 *
 * {{{
 * echo $html->style(array(\'margin\' => \'10px\', \'padding\' => \'10px\'), true);
 *
 * // creates
 * \'margin:10px;padding:10px;\'
 * }}}
 *
 * @param array $data Style data array, keys will be used as property names, values as property values.
 * @param boolean $oneline Whether or not the style block should be displayed on one line.
 * @return string CSS styling data
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::style
 */",
 "/**
 * Returns the breadcrumb trail as a sequence of &raquo;-separated links.
 *
 * If `$startText` is an array, the accepted keys are:
 *
 * - `text` Define the text/content for the link.
 * - `url` Define the target of the created link.
 *
 * All other keys will be passed to HtmlHelper::link() as the `$options` parameter.
 *
 * @param string $separator Text to separate crumbs.
 * @param string|array|boolean $startText This will be the first crumb, if false it defaults to first crumb in array. Can
 *   also be an array, see above for details.
 * @return string Composed bread crumbs
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#creating-breadcrumb-trails-with-htmlhelper
 */",
 "/**
 * Returns breadcrumbs as a (x)html list
 *
 * This method uses HtmlHelper::tag() to generate list and its elements. Works
 * similar to HtmlHelper::getCrumbs(), so it uses options which every
 * crumb was added with.
 *
 * @param array $options Array of html attributes to apply to the generated list elements.
 * @param string|array|boolean $startText This will be the first crumb, if false it defaults to first crumb in array. Can
 *   also be an array, see `HtmlHelper::getCrumbs` for details.
 * @return string breadcrumbs html list
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#creating-breadcrumb-trails-with-htmlhelper
 */",
 "/**
 * Prepends startText to crumbs array if set
 *
 * @param $startText
 * @return array Crumb list including startText (if provided)
 */",
 "/**
 * Creates a formatted IMG element.
 *
 * This method will set an empty alt attribute if one is not supplied.
 *
 * ### Usage:
 *
 * Create a regular image:
 *
 * `echo $html->image(\'cake_icon.png\', array(\'alt\' => \'CakePHP\'));`
 *
 * Create an image link:
 *
 * `echo $html->image(\'cake_icon.png\', array(\'alt\' => \'CakePHP\', \'url\' => \'http://cakephp.org\'));`
 *
 * ### Options:
 *
 * - `url` If provided an image link will be generated and the link will point at
 *   `$options[\'url\']`.
 * - `fullBase` If true the src attribute will get a full address for the image file.
 * - `plugin` False value will prevent parsing path as a plugin
 *
 * @param string $path Path to the image file, relative to the app/webroot/img/ directory.
 * @param array $options Array of HTML attributes.  See above for special options.
 * @return string completed img tag
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::image
 */",
 "/**
 * Returns a row of formatted and named TABLE headers.
 *
 * @param array $names Array of tablenames. Each tablename also can be a key that points to an array with a set
 *     of attributes to its specific tag
 * @param array $trOptions HTML options for TR elements.
 * @param array $thOptions HTML options for TH elements.
 * @return string Completed table headers
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::tableHeaders
 */",
 "/**
 * Returns a formatted string of table rows (TR\'s with TD\'s in them).
 *
 * @param array $data Array of table data
 * @param array $oddTrOptions HTML options for odd TR elements if true useCount is used
 * @param array $evenTrOptions HTML options for even TR elements
 * @param boolean $useCount adds class \"column-$i\"
 * @param boolean $continueOddEven If false, will use a non-static $count variable,
 *    so that the odd/even count is reset to zero just for that call.
 * @return string Formatted HTML
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::tableCells
 */",
 "/**
 * Returns a formatted block tag, i.e DIV, SPAN, P.
 *
 * ### Options
 *
 * - `escape` Whether or not the contents should be html_entity escaped.
 *
 * @param string $name Tag name.
 * @param string $text String content that will appear inside the div element.
 *   If null, only a start tag will be printed
 * @param array $options Additional HTML attributes of the DIV tag, see above.
 * @return string The formatted tag element
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::tag
 */",
 "/**
 * Returns a formatted existent block of $tags
 *
 * @param string $tag Tag name
 * @return string Formatted block
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::useTag
 */",
 "/**
 * Returns a formatted DIV tag for HTML FORMs.
 *
 * ### Options
 *
 * - `escape` Whether or not the contents should be html_entity escaped.
 *
 * @param string $class CSS class name of the div element.
 * @param string $text String content that will appear inside the div element.
 *   If null, only a start tag will be printed
 * @param array $options Additional HTML attributes of the DIV tag
 * @return string The formatted DIV element
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::div
 */",
 "/**
 * Returns a formatted P tag.
 *
 * ### Options
 *
 * - `escape` Whether or not the contents should be html_entity escaped.
 *
 * @param string $class CSS class name of the p element.
 * @param string $text String content that will appear inside the p element.
 * @param array $options Additional HTML attributes of the P tag
 * @return string The formatted P element
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::para
 */",
 "/**
 * Returns an audio/video element
 *
 * ### Usage
 *
 * Using an audio file:
 *
 * `echo $this->Html->media(\'audio.mp3\', array(\'fullBase\' => true));`
 *
 * Outputs:
 *
 * `<video src=\"http://www.somehost.com/files/audio.mp3\">Fallback text</video>`
 *
 * Using a video file:
 *
 * `echo $this->Html->media(\'video.mp4\', array(\'text\' => \'Fallback text\'));`
 *
 * Outputs:
 *
 * `<video src=\"/files/video.mp4\">Fallback text</video>`
 *
 * Using multiple video files:
 *
 * {{{
 * echo $this->Html->media(
 * 		array(\'video.mp4\', array(\'src\' => \'video.ogv\', \'type\' => \"video/ogg; codecs=\'theora, vorbis\'\")),
 * 		array(\'tag\' => \'video\', \'autoplay\')
 * );
 * }}}
 *
 * Outputs:
 *
 * {{{
 * <video autoplay=\"autoplay\">
 * 		<source src=\"/files/video.mp4\" type=\"video/mp4\"/>
 * 		<source src=\"/files/video.ogv\" type=\"video/ogv; codecs=\'theora, vorbis\'\"/>
 * </video>
 * }}}
 *
 * ### Options
 *
 * - `tag` Type of media element to generate, either \"audio\" or \"video\".
 * 	If tag is not provided it\'s guessed based on file\'s mime type.
 * - `text` Text to include inside the audio/video tag
 * - `pathPrefix` Path prefix to use for relative urls, defaults to \'files/\'
 * - `fullBase` If provided the src attribute will get a full address including domain name
 *
 * @param string|array $path Path to the video file, relative to the webroot/{$options[\'pathPrefix\']} directory.
 *  Or an array where each item itself can be a path string or an associate array containing keys `src` and `type`
 * @param array $options Array of HTML attributes, and special options above.
 * @return string Generated media element
 */",
 "/**
 * Build a nested list (UL/OL) out of an associative array.
 *
 * @param array $list Set of elements to list
 * @param array $options Additional HTML attributes of the list (ol/ul) tag or if ul/ol use that as tag
 * @param array $itemOptions Additional HTML attributes of the list item (LI) tag
 * @param string $tag Type of list tag to use (ol/ul)
 * @return string The nested list
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#HtmlHelper::nestedList
 */",
 "/**
 * Internal function to build a nested list (UL/OL) out of an associative array.
 *
 * @param array $items Set of elements to list
 * @param array $options Additional HTML attributes of the list (ol/ul) tag
 * @param array $itemOptions Additional HTML attributes of the list item (LI) tag
 * @param string $tag Type of list tag to use (ol/ul)
 * @return string The nested list element
 * @see HtmlHelper::nestedList()
 */",
 "/**
 * Load Html tag configuration.
 *
 * Loads a file from APP/Config that contains tag data.  By default the file is expected
 * to be compatible with PhpReader:
 *
 * `$this->Html->loadConfig(\'tags.php\');`
 *
 * tags.php could look like:
 *
 * {{{
 * $tags = array(
 *		\'meta\' => \'<meta %s>\'
 * );
 * }}}
 *
 * If you wish to store tag definitions in another format you can give an array
 * containing the file name, and reader class name:
 *
 * `$this->Html->loadConfig(array(\'tags.ini\', \'ini\'));`
 *
 * Its expected that the `tags` index will exist from any configuration file that is read.
 * You can also specify the path to read the configuration file from, if APP/Config is not
 * where the file is.
 *
 * `$this->Html->loadConfig(\'tags.php\', APP . \'Lib\' . DS);`
 *
 * Configuration files can define the following sections:
 *
 * - `tags` The tags to replace.
 * - `minimizedAttributes` The attributes that are represented like `disabled=\"disabled\"`
 * - `docTypes` Additional doctypes to use.
 * - `attributeFormat` Format for long attributes e.g. `\'%s=\"%s\"\'`
 * - `minimizedAttributeFormat` Format for minimized attributes e.g. `\'%s=\"%s\"\'`
 *
 * @param string|array $configFile String with the config file (load using PhpReader) or an array with file and reader name
 * @param string $path Path with config file
 * @return mixed False to error or loaded configs
 * @throws ConfigureException
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html#changing-the-tags-output-by-htmlhelper
 */",
 "/**
 * Html Helper class for easy use of HTML widgets.
 *
 * HtmlHelper encloses all methods needed while working with HTML pages.
 *
 * @package       Cake.View.Helper
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/html.html
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Wrap to protected method
 *
 */",
 "/**
 * Wrap to protected method
 *
 */",
 "/**
 * Get the boundary attribute
 *
 * @return string
 */",
 "/**
 * Encode to protected method
 *
 */",
 "/**
 * Help to test CakeEmail
 *
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testFrom method
 *
 * @return void
 */",
 "/**
 * testSender method
 *
 * @return void
 */",
 "/**
 * testTo method
 *
 * @return void
 */",
 "/**
 * Data provider function for testBuildInvalidData
 *
 * @return array
 */",
 "/**
 * testBuildInvalidData
 *
 * @dataProvider invalidEmails
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * testBuildInvalidData
 *
 * @dataProvider invalidEmails
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * testFormatAddress method
 *
 * @return void
 */",
 "/**
 * testFormatAddressJapanese
 *
 * @return void
 */",
 "/**
 * testAddresses method
 *
 * @return void
 */",
 "/**
 * testMessageId method
 *
 * @return void
 */",
 "/**
 * testMessageIdInvalid method
 *
 * @return void
 * @expectedException SocketException
 */",
 "/**
 * testDomain method
 *
 * @return void
 */",
 "/**
 * testMessageIdWithDomain method
 *
 * @return void
 */",
 "/**
 * testSubject method
 *
 * @return void
 */",
 "/**
 * testSubjectJapanese
 *
 * @return void
 */",
 "/**
 * testHeaders method
 *
 * @return void
 */",
 "/**
 * Data provider function for testInvalidHeaders
 *
 * @return array
 */",
 "/**
 * testInvalidHeaders
 *
 * @dataProvider invalidHeaders
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * testInvalidAddHeaders
 *
 * @dataProvider invalidHeaders
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * testTemplate method
 *
 * @return void
 */",
 "/**
 * testTheme method
 *
 * @return void
 */",
 "/**
 * testViewVars method
 *
 * @return void
 */",
 "/**
 * testAttachments method
 *
 * @return void
 */",
 "/**
 * testTransport method
 *
 * @return void
 */",
 "/**
 * testExtendTransport method
 *
 * @return void
 */",
 "/**
 * testConfig method
 *
 * @return void
 */",
 "/**
 * testConfigString method
 *
 * @return void
 */",
 "/**
 * testSendWithContent method
 *
 * @return void
 */",
 "/**
 * testSendWithoutFrom method
 *
 * @return void
 */",
 "/**
 * testSendWithoutTo method
 *
 * @return void
 */",
 "/**
 * Test send() with no template.
 *
 * @return void
 */",
 "/**
 * Test send() with no template as both
 *
 * @return void
 */",
 "/**
 * Test setting inline attachments and messages.
 *
 * @return void
 */",
 "/**
 * testSendWithLog method
 *
 * @return void
 */",
 "/**
 * testSendRender method
 *
 * @return void
 */",
 "/**
 * testSendRender method for ISO-2022-JP
 *
 * @return void
 */",
 "/**
 * testSendRenderThemed method
 *
 * @return void
 */",
 "/**
 * testSendRenderWithVars method
 *
 * @return void
 */",
 "/**
 * testSendRenderWithVars method for ISO-2022-JP
 *
 * @return void
 */",
 "/**
 * testSendRenderWithHelpers method
 *
 * @return void
 */",
 "/**
 * testSendRenderWithImage method
 *
 * @return void
 */",
 "/**
 * testSendRenderPlugin method
 *
 * @return void
 */",
 "/**
 * testSendMultipleMIME method
 *
 * @return void
 */",
 "/**
 * testSendAttachment method
 *
 * @return void
 */",
 "/**
 * testDeliver method
 *
 * @return void
 */",
 "/**
 * testMessage method
 *
 * @return void
 */",
 "/**
 * testReset method
 *
 * @return void
 */",
 "/**
 * testReset with charset
 *
 * @return void
 */",
 "/**
 * testWrap method
 *
 * @return void
 */",
 "/**
 * testConstructWithConfigArray method
 *
 * @return void
 */",
 "/**
 * testConstructWithConfigString method
 *
 * @return void
 */",
 "/**
 * testViewRender method
 *
 * @return void
 */",
 "/**
 * testEmailFormat method
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to add charset configuration to a CakeEmail object
 *
 * @return void
 */",
 "/**
 * Tests that the header is encoded using the configured headerCharset
 *
 * @return void
 */",
 "/**
 * Tests that the body is encoded using the configured charset
 *
 * @return void
 */",
 "/**
 * Tests that the body is encoded using the configured charset (Japanese standard encoding)
 *
 * @return void
 */",
 "/**
 * Tests that the body is encoded using the configured charset (Japanese irregular encoding, but sometime use this)
 *
 * @return void
 */",
 "/**
 * Test CakeEmail::_encode function
 *
 * @return void
 */",
 "/**
 * Tests charset setter/getter
 *
 * @return void
 */",
 "/**
 * Tests headerCharset setter/getter
 *
 * @return void
 */",
 "/**
 * Tests for compatible check.
 *          charset property and       charset() method.
 *    headerCharset property and headerCharset() method.
 */",
 "/**
 * CakeEmailTest class
 *
 * @package       Cake.Test.Case.Network.Email
 */",
 "/**
 * This function can be thought of as a hybrid between PHP\'s array_merge and array_merge_recursive. The difference
 * to the two is that if an array key contains another array then the function behaves recursive (unlike array_merge)
 * but does not do if for keys containing strings (unlike array_merge_recursive).
 *
 * Since this method emulates `array_merge`, it will re-order numeric keys.  When combined with out of
 * order numeric keys containing arrays, results can be lossy.
 *
 * Note: This function will work with an unlimited amount of arguments and typecasts non-array
 * parameters into arrays.
 *
 * @param array $data Array to be merged
 * @param array $merge Array to merge with
 * @return array Merged array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::merge
 */",
 "/**
 * Filters empty elements out of a route array, excluding \'0\'.
 *
 * @param array $var Either an array to filter, or value when in callback
 * @return mixed Either filtered array, or true/false when in callback
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::filter
 */",
 "/**
 * Pushes the differences in $array2 onto the end of $array
 *
 * @param array $array Original array
 * @param array $array2 Differences to push
 * @return array Combined array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::pushDiff
 */",
 "/**
 * Maps the contents of the Set object to an object hierarchy.
 * Maintains numeric keys as arrays of objects
 *
 * @param string $class A class name of the type of object to map to
 * @param string $tmp A temporary class name used as $class if $class is an array
 * @return object Hierarchical object
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::map
 */",
 "/**
 * Maps the given value as an object. If $value is an object,
 * it returns $value. Otherwise it maps $value as an object of
 * type $class, and if primary assign _name_ $key on first array.
 * If $value is not empty, it will be used to set properties of
 * returned object (recursively). If $key is numeric will maintain array
 * structure
 *
 * @param array $array Array to map
 * @param string $class Class name
 * @param boolean $primary whether to assign first array key as the _name_
 * @return mixed Mapped object
 */",
 "/**
 * Checks to see if all the values in the array are numeric
 *
 * @param array $array The array to check.  If null, the value of the current Set object
 * @return boolean true if values are numeric, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::numeric
 */",
 "/**
 * Return a value from an array list if the key exists.
 *
 * If a comma separated $list is passed arrays are numeric with the key of the first being 0
 * $list = \'no, yes\' would translate to  $list = array(0 => \'no\', 1 => \'yes\');
 *
 * If an array is used, keys can be strings example: array(\'no\' => 0, \'yes\' => 1);
 *
 * $list defaults to 0 = no 1 = yes if param is not passed
 *
 * @param array $select Key in $list to return
 * @param array|string $list can be an array or a comma-separated list.
 * @return string the value of the array key or null if no match
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::enum
 */",
 "/**
 * Returns a series of values extracted from an array, formatted in a format string.
 *
 * @param array $data Source array from which to extract the data
 * @param string $format Format string into which values will be inserted, see sprintf()
 * @param array $keys An array containing one or more Set::extract()-style key paths
 * @return array An array of strings extracted from $keys and formatted with $format
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::format
 */",
 "/**
 * Implements partial support for XPath 2.0. If $path does not contain a \'/\' the call
 * is delegated to Set::classicExtract(). Also the $path and $data arguments are
 * reversible.
 *
 * #### Currently implemented selectors:
 *
 * - /User/id (similar to the classic {n}.User.id)
 * - /User[2]/name (selects the name of the second User)
 * - /User[id>2] (selects all Users with an id > 2)
 * - /User[id>2][<5] (selects all Users with an id > 2 but < 5)
 * - /Post/Comment[author_name=john]/../name (Selects the name of all Posts that have at least one Comment written by john)
 * - /Posts[name] (Selects all Posts that have a \'name\' key)
 * - /Comment/.[1] (Selects the contents of the first comment)
 * - /Comment/.[:last] (Selects the last comment)
 * - /Comment/.[:first] (Selects the first comment)
 * - /Comment[text=/cakephp/i] (Selects the all comments that have a text matching the regex /cakephp/i)
 * - /Comment/@* (Selects the all key names of all comments)
 *
 * #### Other limitations:
 *
 * - Only absolute paths starting with a single \'/\' are supported right now
 *
 * **Warning**: Even so it has plenty of unit tests the XPath support has not gone through a lot of
 * real-world testing. Please report Bugs as you find them. Suggestions for additional features to
 * implement are also very welcome!
 *
 * @param string $path An absolute XPath 2.0 path
 * @param array $data An array of data to extract from
 * @param array $options Currently only supports \'flatten\' which can be disabled for higher XPath-ness
 * @return array An array of matched items
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::extract
 */",
 "/**
 * This function can be used to see if a single item or a given xpath match certain conditions.
 *
 * @param string|array $conditions An array of condition strings or an XPath expression
 * @param array $data  An array of data to execute the match on
 * @param integer $i Optional: The \'nth\'-number of the item being matched.
 * @param integer $length
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::matches
 */",
 "/**
 * Gets a value from an array or object that is contained in a given path using an array path syntax, i.e.:
 * \"{n}.Person.{[a-z]+}\" - Where \"{n}\" represents a numeric key, \"Person\" represents a string literal,
 * and \"{[a-z]+}\" (i.e. any string literal enclosed in brackets besides {n} and {s}) is interpreted as
 * a regular expression.
 *
 * @param array $data Array from where to extract
 * @param string|array $path As an array, or as a dot-separated string.
 * @return array Extracted data
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::classicExtract
 */",
 "/**
 * Inserts $data into an array as defined by $path.
 *
 * @param array $list Where to insert into
 * @param string $path A dot-separated string.
 * @param array $data Data to insert
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::insert
 */",
 "/**
 * Removes an element from a Set or array as defined by $path.
 *
 * @param array $list From where to remove
 * @param string $path A dot-separated string.
 * @return array Array with $path removed from its value
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::remove
 */",
 "/**
 * Checks if a particular path is set in an array
 *
 * @param string|array $data Data to check on
 * @param string|array $path A dot-separated string.
 * @return boolean true if path is found, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::check
 */",
 "/**
 * Computes the difference between a Set and an array, two Sets, or two arrays
 *
 * @param mixed $val1 First value
 * @param mixed $val2 Second value
 * @return array Returns the key => value pairs that are not common in $val1 and $val2
 * The expression for this function is($val1 - $val2) + ($val2 - ($val1 - $val2))
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::diff
 */",
 "/**
 * Determines if one Set or array contains the exact keys and values of another.
 *
 * @param array $val1 First value
 * @param array $val2 Second value
 * @return boolean true if $val1 contains $val2, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::contains
 */",
 "/**
 * Counts the dimensions of an array. If $all is set to false (which is the default) it will
 * only consider the dimension of the first element in the array.
 *
 * @param array $array Array to count dimensions on
 * @param boolean $all Set to true to count the dimension considering all elements in array
 * @param integer $count Start the dimension count at this number
 * @return integer The number of dimensions in $array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::countDim
 */",
 "/**
 * Normalizes a string or array list.
 *
 * @param mixed $list List to normalize
 * @param boolean $assoc If true, $list will be converted to an associative array
 * @param string $sep If $list is a string, it will be split into an array with $sep
 * @param boolean $trim If true, separated strings will be trimmed
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::normalize
 */",
 "/**
 * Creates an associative array using a $path1 as the path to build its keys, and optionally
 * $path2 as path to get the values. If $path2 is not specified, all values will be initialized
 * to null (useful for Set::merge). You can optionally group the values by what is obtained when
 * following the path specified in $groupPath.
 *
 * @param array|object $data Array or object from where to extract keys and values
 * @param string|array $path1 As an array, or as a dot-separated string.
 * @param string|array $path2 As an array, or as a dot-separated string.
 * @param string $groupPath As an array, or as a dot-separated string.
 * @return array Combined array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::combine
 */",
 "/**
 * Converts an object into an array.
 * @param object $object Object to reverse
 * @return array Array representation of given object
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::reverse
 */",
 "/**
 * Collapses a multi-dimensional array into a single dimension, using a delimited array path for
 * each array element\'s key, i.e. array(array(\'Foo\' => array(\'Bar\' => \'Far\'))) becomes
 * array(\'0.Foo.Bar\' => \'Far\').
 *
 * @param array $data Array to flatten
 * @param string $separator String used to separate array key elements in a path, defaults to \'.\'
 * @return array
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::flatten
 */",
 "/**
 * Expand/unflattens an string to an array
 *
 * For example, unflattens an array that was collapsed with `Set::flatten()`
 * into a multi-dimensional array. So, `array(\'0.Foo.Bar\' => \'Far\')` becomes
 * `array(array(\'Foo\' => array(\'Bar\' => \'Far\')))`.
 *
 * @param array $data Flattened array
 * @param string $separator The delimiter used
 * @return array
 */",
 "/**
 * Flattens an array for sorting
 *
 * @param array $results
 * @param string $key
 * @return array
 */",
 "/**
 * Sorts an array by any value, determined by a Set-compatible path
 *
 * @param array $data An array of data to sort
 * @param string $path A Set-compatible path to the array value
 * @param string $dir Direction of sorting - either ascending (ASC), or descending (DESC)
 * @return array Sorted array of data
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::sort
 */",
 "/**
 * Allows the application of a callback method to elements of an
 * array extracted by a Set::extract() compatible path.
 *
 * @param mixed $path Set-compatible path to the array value
 * @param array $data An array of data to extract from & then process with the $callback.
 * @param mixed $callback Callback method to be applied to extracted data.
 * See http://ca2.php.net/manual/en/language.pseudo-types.php#language.types.callback for examples
 * of callback formats.
 * @param array $options Options are:
 *                       - type : can be pass, map, or reduce. Map will handoff the given callback
 *                                to array_map, reduce will handoff to array_reduce, and pass will
 *                                use call_user_func_array().
 * @return mixed Result of the callback when applied to extracted data
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/set.html#Set::apply
 */",
 "/**
 * Takes in a flat array and returns a nested array
 *
 * @param mixed $data
 * @param array $options Options are:
 *      children   - the key name to use in the resultset for children
 *      idPath     - the path to a key that identifies each entry
 *      parentPath - the path to a key that identifies the parent of each entry
 *      root       - the id of the desired top-most result
 * @return array of results, nested
 * @link
 */",
 "/**
 * Return the value at the specified position
 *
 * @param array $input an array
 * @param string|array $path string or array of array keys
 * @return the value at the specified position or null if it doesn\'t exist
 */",
 "/**
 * Class used for manipulation of arrays.
 *
 * @package       Cake.Utility
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * nocache_tags_with_element method
 *
 * @return void
 */",
 "/**
 * ViewPostsController class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * ThemePostsController class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * renderElement method
 *
 * @param string $name
 * @param array $params
 * @return void
 */",
 "/**
 * getViewFileName method
 *
 * @param string $name
 * @return void
 */",
 "/**
 * getLayoutFileName method
 *
 * @param string $name
 * @return void
 */",
 "/**
 * TestThemeView class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * getViewFileName method
 *
 * @param string $name
 * @return void
 */",
 "/**
 * getLayoutFileName method
 *
 * @param string $name
 * @return void
 */",
 "/**
 * paths method
 *
 * @param string $plugin
 * @param boolean $cached
 * @return void
 */",
 "/**
 * Test only function to return instance scripts.
 *
 * @return array Scripts
 */",
 "/**
 * TestView class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * beforeLayout method
 *
 * @return void
 */",
 "/**
 * afterLayout method
 *
 * @return void
 */",
 "/**
 * TestAfterHelper class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testGetTemplate method
 *
 * @return void
 */",
 "/**
 * testPluginGetTemplate method
 *
 * @return void
 */",
 "/**
 * testPluginGetTemplate method
 *
 * @return void
 */",
 "/**
 * test that plugin/$plugin_name is only appended to the paths it should be.
 *
 * @return void
 */",
 "/**
 * test that CamelCase plugins still find their view files.
 *
 * @return void
 */",
 "/**
 * testGetTemplate method
 *
 * @return void
 */",
 "/**
 * Test getting layout filenames
 *
 * @return void
 */",
 "/**
 * Test getting layout filenames for plugins.
 *
 * @return void
 */",
 "/**
 * testMissingView method
 *
 * @expectedException MissingViewException
 * @return void
 */",
 "/**
 * testMissingLayout method
 *
 * @expectedException MissingLayoutException
 * @return void
 */",
 "/**
 * testViewVars method
 *
 * @return void
 */",
 "/**
 * testUUIDGeneration method
 *
 * @return void
 */",
 "/**
 * testAddInlineScripts method
 *
 * @return void
 */",
 "/**
 * testElement method
 *
 * @return void
 */",
 "/**
 * test that elements can have callbacks
 *
 */",
 "/**
 * test that additional element viewVars don\'t get overwritten with helpers.
 *
 * @return void
 */",
 "/**
 * testElementCacheHelperNoCache method
 *
 * @return void
 */",
 "/**
 * testElementCache method
 *
 * @return void
 */",
 "/**
 * test __get allowing access to helpers.
 *
 * @return void
 */",
 "/**
 * test that ctp is used as a fallback file extension for elements
 *
 * @return void
 */",
 "/**
 * testLoadHelpers method
 *
 * @return void
 */",
 "/**
 * test lazy loading helpers
 *
 * @return void
 */",
 "/**
 * test the correct triggering of helper callbacks
 *
 * @return void
 */",
 "/**
 * testBeforeLayout method
 *
 * @return void
 */",
 "/**
 * testAfterLayout method
 *
 * @return void
 */",
 "/**
 * testRenderLoadHelper method
 *
 * @return void
 */",
 "/**
 * testRender method
 *
 * @return void
 */",
 "/**
 * test that View::$view works
 *
 * @return void
 */",
 "/**
 * Test render()ing a file in a subdir from a custom viewPath
 * in a plugin.
 *
 * @return void
 */",
 "/**
 * test that view vars can replace the local helper variables
 * and not overwrite the $this->Helper references
 *
 * @return void
 */",
 "/**
 * testGetViewFileName method
 *
 * @return void
 */",
 "/**
 * testRenderCache method
 *
 * @return void
 */",
 "/**
 * Test that render() will remove the cake:nocache tags when only the cachehelper is present.
 *
 * @return void
 */",
 "/**
 * Test that render() will remove the cake:nocache tags when only the Cache.check is true.
 *
 * @return void
 */",
 "/**
 * testSet method
 *
 * @return void
 */",
 "/**
 * testBadExt method
 *
 * @expectedException MissingViewException
 * @return void
 */",
 "/**
 * testAltExt method
 *
 * @return void
 */",
 "/**
 * testAltBadExt method
 *
 * @expectedException MissingViewException
 * @return void
 */",
 "/**
 * Test creating a block with capturing output.
 *
 * @return void
 */",
 "/**
 * Test appending to a block with capturing output.
 *
 * @return void
 */",
 "/**
 * Test setting a block\'s content.
 *
 * @return void
 */",
 "/**
 * Test appending to a block with append.
 *
 * @return void
 */",
 "/**
 * You should be able to append to undefined blocks.
 *
 * @return void
 */",
 "/**
 * setting an array should cause an exception.
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Appending an array should cause an exception.
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Test getting block names
 *
 * @return void
 */",
 "/**
 * Test that blocks can be nested.
 *
 * @return void
 */",
 "/**
 * Test that an exception gets thrown when you leave a block open at the end
 * of a view.
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Test nested extended views.
 *
 * @return void
 */",
 "/**
 * Make sure that extending the current view with itself causes an exception
 *
 * @expectedException LogicException
 * @return void
 */",
 "/**
 * Make sure that extending in a loop causes an exception
 *
 * @expectedException LogicException
 * @return void
 */",
 "/**
 * Test extend() in an element and a view.
 *
 * @return void
 */",
 "/**
 * Extending an element which doesn\'t exist should throw a missing view exception
 *
 * @expectedException LogicException
 * @return void
 */",
 "/**
 * Test that setting arbitrary properties still works.
 *
 * @return void
 */",
 "/**
 * Test that setting arbitrary properties still works.
 *
 * @return void
 */",
 "/**
 * test memory leaks that existed in _paths at one point.
 *
 * @return void
 */",
 "/**
 * ViewTest class
 *
 * @package       Cake.Test.Case.View
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test ListAll
 *
 * @return void
 */",
 "/**
 * Test that getName interacts with the user and returns the controller name.
 *
 * @return void
 */",
 "/**
 * test getting invalid indexes.
 *
 * @return void
 */",
 "/**
 * test helper interactions
 *
 * @return void
 */",
 "/**
 * test getting helper values
 *
 * @return void
 */",
 "/**
 * test doHelpers with extra commas
 *
 * @return void
 */",
 "/**
 * test component interactions
 *
 * @return void
 */",
 "/**
 * test components with spaces
 *
 * @return void
 */",
 "/**
 * test components with commas
 *
 * @return void
 */",
 "/**
 * test Confirming controller user interaction
 *
 * @return void
 */",
 "/**
 * test the bake method
 *
 * @return void
 */",
 "/**
 * test bake() with a -plugin param
 *
 * @return void
 */",
 "/**
 * test that bakeActions is creating the correct controller Code. (Using sessions)
 *
 * @return void
 */",
 "/**
 * Test baking with Controller::flash() or no sessions.
 *
 * @return void
 */",
 "/**
 * test baking a test
 *
 * @return void
 */",
 "/**
 * test Interactive mode.
 *
 * @return void
 */",
 "/**
 * test Interactive mode.
 *
 * @return void
 */",
 "/**
 * test that execute runs all when the first arg == all
 *
 * @return void
 */",
 "/**
 * test that `cake bake controller foos` works.
 *
 * @return void
 */",
 "/**
 * data provider for testExecuteWithControllerNameVariations
 *
 * @return void
 */",
 "/**
 * test that both plural and singular forms work for controller baking.
 *
 * @dataProvider nameVariations
 * @return void
 */",
 "/**
 * test that `cake bake controller foo scaffold` works.
 *
 * @return void
 */",
 "/**
 * test that `cake bake controller foos both` works.
 *
 * @return void
 */",
 "/**
 * test that `cake bake controller foos admin` works.
 *
 * @return void
 */",
 "/**
 * ControllerTaskTest class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Construct method
 *
 * @param array $params list of options to be used for this run
 * @throws MissingTestLoaderException When a loader class could not be found.
 */",
 "/**
 * Ugly hack to get around PHPUnit having a hard coded classname for the Runner. :(
 *
 * @param array   $argv
 * @param boolean $exit
 */",
 "/**
 * Create a runner for the command.
 *
 * @param $loader The loader to be used for the test run.
 * @return CakeTestRunner
 */",
 "/**
 * Handler for customizing the FixtureManager class/
 *
 * @param string $class Name of the class that will be the fixture manager
 * @return void
 */",
 "/**
 * Handles output flag used to change printing on webrunner.
 *
 * @return void
 */",
 "/**
 * Class to customize loading of test suites from CLI
 *
 * @package       Cake.TestSuite
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Setup this behavior with the specified configuration settings.
 *
 * @param Model $model Model using this behavior
 * @param array $config Configuration settings for $model
 * @return void
 */",
 "/**
 * Clean up any initialization this behavior has done on a model.  Called when a behavior is dynamically
 * detached from a model using Model::detach().
 *
 * @param Model $model Model using this behavior
 * @return void
 * @see BehaviorCollection::detach()
 */",
 "/**
 * beforeFind can be used to cancel find operations, or modify the query that will be executed.
 * By returning null/false you can abort a find.  By returning an array you can modify/replace the query
 * that is going to be run.
 *
 * @param Model $model Model using this behavior
 * @param array $query Data used to execute this query, i.e. conditions, order, etc.
 * @return boolean|array False or null will abort the operation. You can return an array to replace the
 *   $query that will be eventually run.
 */",
 "/**
 * After find callback. Can be used to modify any results returned by find.
 *
 * @param Model $model Model using this behavior
 * @param mixed $results The results of the find operation
 * @param boolean $primary Whether this model is being queried directly (vs. being queried as an association)
 * @return mixed An array value will replace the value of $results - any other value will be ignored.
 */",
 "/**
 * beforeValidate is called before a model is validated, you can use this callback to
 * add behavior validation rules into a models validate array.  Returning false
 * will allow you to make the validation fail.
 *
 * @param Model $model Model using this behavior
 * @return mixed False or null will abort the operation. Any other result will continue.
 */",
 "/**
 * beforeSave is called before a model is saved.  Returning false from a beforeSave callback
 * will abort the save operation.
 *
 * @param Model $model Model using this behavior
 * @return mixed False if the operation should abort. Any other result will continue.
 */",
 "/**
 * afterSave is called after a model is saved.
 *
 * @param Model $model Model using this behavior
 * @param boolean $created True if this save created a new record
 * @return boolean
 */",
 "/**
 * Before delete is called before any delete occurs on the attached model, but after the model\'s
 * beforeDelete is called.  Returning false from a beforeDelete will abort the delete.
 *
 * @param Model $model Model using this behavior
 * @param boolean $cascade If true records that depend on this record will also be deleted
 * @return mixed False if the operation should abort. Any other result will continue.
 */",
 "/**
 * After delete is called after any delete occurs on the attached model.
 *
 * @param Model $model Model using this behavior
 * @return void
 */",
 "/**
 * DataSource error callback
 *
 * @param Model $model Model using this behavior
 * @param string $error Error generated in DataSource
 * @return void
 */",
 "/**
 * If $model\'s whitelist property is non-empty, $field will be added to it.
 * Note: this method should *only* be used in beforeValidate or beforeSave to ensure
 * that it only modifies the whitelist for the current save operation.  Also make sure
 * you explicitly set the value of the field which you are allowing.
 *
 * @param Model $model Model using this behavior
 * @param string $field Field to be added to $model\'s whitelist
 * @return void
 */",
 "/**
 * Model behavior base class.
 *
 * Defines the Behavior interface, and contains common model interaction functionality.  Behaviors
 * allow you to simulate mixins, and create reusable blocks of application logic, that can be reused across
 * several models.  Behaviors also provide a way to hook into model callbacks and augment their behavior.
 *
 * ### Mixin methods
 *
 * Behaviors can provide mixin like features by declaring public methods.  These methods should expect
 * the model instance to be shifted onto the parameter list.
 *
 * {{{
 * function doSomething(Model $model, $arg1, $arg2) {
 *		//do something
 * }
 * }}}
 *
 * Would be called like `$this->Model->doSomething($arg1, $arg2);`.
 *
 * ### Mapped methods
 *
 * Behaviors can also define mapped methods.  Mapped methods use pattern matching for method invocation. This
 * allows you to create methods similar to Model::findAllByXXX methods on your behaviors.  Mapped methods need to
 * be declared in your behaviors `$mapMethods` array.  The method signature for a mapped method is slightly different
 * than a normal behavior mixin method.
 *
 * {{{
 * public $mapMethods = array(\'/do(\w+)/\' => \'doSomething\');
 *
 * function doSomething(Model $model, $method, $arg1, $arg2) {
 *		//do something
 * }
 * }}}
 *
 * The above will map every doXXX() method call to the behavior.  As you can see, the model is
 * still the first parameter, but the called method name will be the 2nd parameter.  This allows
 * you to munge the method name for additional information, much like Model::findAllByXX.
 *
 * @package       Cake.Model
 * @see Model::$actsAs
 * @see BehaviorCollection::load()
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Construct an OptionParser so you can define its behavior
 *
 * @param string $command The command name this parser is for.  The command name is used for generating help.
 * @param boolean $defaultOptions Whether you want the verbose and quiet options set. Setting
 *  this to false will prevent the addition of `--verbose` & `--quiet` options.
 */",
 "/**
 * Static factory method for creating new OptionParsers so you can chain methods off of them.
 *
 * @param string $command The command name this parser is for.  The command name is used for generating help.
 * @param boolean $defaultOptions Whether you want the verbose and quiet options set.
 * @return ConsoleOptionParser
 */",
 "/**
 * Build a parser from an array. Uses an array like
 *
 * {{{
 * $spec = array(
 *		\'description\' => \'text\',
 *		\'epilog\' => \'text\',
 *		\'arguments\' => array(
 *			// list of arguments compatible with addArguments.
 *		),
 *		\'options\' => array(
 *			// list of options compatible with addOptions
 *		),
 *		\'subcommands\' => array(
 *			// list of subcommands to add.
 *		)
 * );
 * }}}
 *
 * @param array $spec The spec to build the OptionParser with.
 * @return ConsoleOptionParser
 */",
 "/**
 * Get or set the command name for shell/task.
 *
 * @param string $text The text to set, or null if you want to read
 * @return mixed If reading, the value of the command. If setting $this will be returned
 */",
 "/**
 * Get or set the description text for shell/task.
 *
 * @param string|array $text The text to set, or null if you want to read. If an array the
 *   text will be imploded with \"\n\"
 * @return mixed If reading, the value of the description. If setting $this will be returned
 */",
 "/**
 * Get or set an epilog to the parser.  The epilog is added to the end of
 * the options and arguments listing when help is generated.
 *
 * @param string|array $text Text when setting or null when reading. If an array the text will be imploded with \"\n\"
 * @return mixed If reading, the value of the epilog. If setting $this will be returned.
 */",
 "/**
 * Add an option to the option parser. Options allow you to define optional or required
 * parameters for your console application. Options are defined by the parameters they use.
 *
 * ### Options
 *
 * - `short` - The single letter variant for this option, leave undefined for none.
 * - `help` - Help text for this option.  Used when generating help for the option.
 * - `default` - The default value for this option. Defaults are added into the parsed params when the
 *    attached option is not provided or has no value.  Using default and boolean together will not work.
 *    are added into the parsed parameters when the option is undefined. Defaults to null.
 * - `boolean` - The option uses no value, its just a boolean switch. Defaults to false.
 *    If an option is defined as boolean, it will always be added to the parsed params.  If no present
 *    it will be false, if present it will be true.
 * - `choices` A list of valid choices for this option.  If left empty all values are valid..
 *   An exception will be raised when parse() encounters an invalid value.
 *
 * @param ConsoleInputOption|string $name The long name you want to the value to be parsed out as when options are parsed.
 *   Will also accept an instance of ConsoleInputOption
 * @param array $options An array of parameters that define the behavior of the option
 * @return ConsoleOptionParser $this.
 */",
 "/**
 * Add a positional argument to the option parser.
 *
 * ### Params
 *
 * - `help` The help text to display for this argument.
 * - `required` Whether this parameter is required.
 * - `index` The index for the arg, if left undefined the argument will be put
 *   onto the end of the arguments. If you define the same index twice the first
 *   option will be overwritten.
 * - `choices` A list of valid choices for this argument.  If left empty all values are valid..
 *   An exception will be raised when parse() encounters an invalid value.
 *
 * @param ConsoleInputArgument|string $name The name of the argument.  Will also accept an instance of ConsoleInputArgument
 * @param array $params Parameters for the argument, see above.
 * @return ConsoleOptionParser $this.
 */",
 "/**
 * Add multiple arguments at once. Take an array of argument definitions.
 * The keys are used as the argument names, and the values as params for the argument.
 *
 * @param array $args Array of arguments to add.
 * @see ConsoleOptionParser::addArgument()
 * @return ConsoleOptionParser $this
 */",
 "/**
 * Add multiple options at once. Takes an array of option definitions.
 * The keys are used as option names, and the values as params for the option.
 *
 * @param array $options Array of options to add.
 * @see ConsoleOptionParser::addOption()
 * @return ConsoleOptionParser $this
 */",
 "/**
 * Append a subcommand to the subcommand list.
 * Subcommands are usually methods on your Shell, but can also be used to document Tasks.
 *
 * ### Options
 *
 * - `help` - Help text for the subcommand.
 * - `parser` - A ConsoleOptionParser for the subcommand.  This allows you to create method
 *    specific option parsers.  When help is generated for a subcommand, if a parser is present
 *    it will be used.
 *
 * @param ConsoleInputSubcommand|string $name Name of the subcommand. Will also accept an instance of ConsoleInputSubcommand
 * @param array $options Array of params, see above.
 * @return ConsoleOptionParser $this.
 */",
 "/**
 * Add multiple subcommands at once.
 *
 * @param array $commands Array of subcommands.
 * @return ConsoleOptionParser $this
 */",
 "/**
 * Gets the arguments defined in the parser.
 *
 * @return array Array of argument descriptions
 */",
 "/**
 * Get the defined options in the parser.
 *
 * @return array
 */",
 "/**
 * Get the array of defined subcommands
 *
 * @return array
 */",
 "/**
 * Parse the argv array into a set of params and args.  If $command is not null
 * and $command is equal to a subcommand that has a parser, that parser will be used
 * to parse the $argv
 *
 * @param array $argv Array of args (argv) to parse.
 * @param string $command The subcommand to use.  If this parameter is a subcommand, that has a parser,
 *    That parser will be used to parse $argv instead.
 * @return Array array($params, $args)
 * @throws ConsoleException When an invalid parameter is encountered.
 */",
 "/**
 * Gets formatted help for this parser object.
 * Generates help text based on the description, options, arguments, subcommands and epilog
 * in the parser.
 *
 * @param string $subcommand If present and a valid subcommand that has a linked parser.
 *    That subcommands help will be shown instead.
 * @param string $format Define the output format, can be text or xml
 * @param integer $width The width to format user content to. Defaults to 72
 * @return string Generated help.
 */",
 "/**
 * Parse the value for a long option out of $this->_tokens.  Will handle
 * options with an `=` in them.
 *
 * @param string $option The option to parse.
 * @param array $params The params to append the parsed value into
 * @return array Params with $option added in.
 */",
 "/**
 * Parse the value for a short option out of $this->_tokens
 * If the $option is a combination of multiple shortcuts like -otf
 * they will be shifted onto the token stack and parsed individually.
 *
 * @param string $option The option to parse.
 * @param array $params The params to append the parsed value into
 * @return array Params with $option added in.
 * @throws ConsoleException When unknown short options are encountered.
 */",
 "/**
 * Parse an option by its name index.
 *
 * @param string $name The name to parse.
 * @param array $params The params to append the parsed value into
 * @return array Params with $option added in.
 * @throws ConsoleException
 */",
 "/**
 * Check to see if $name has an option (short/long) defined for it.
 *
 * @param string $name The name of the option.
 * @return boolean
 */",
 "/**
 * Parse an argument, and ensure that the argument doesn\'t exceed the number of arguments
 * and that the argument is a valid choice.
 *
 * @param string $argument The argument to append
 * @param array $args The array of parsed args to append to.
 * @return array Args
 * @throws ConsoleException
 */",
 "/**
 * Find the next token in the argv set.
 *
 * @return string next token or \'\'
 */",
 "/**
 * Handles parsing the ARGV in the command line and provides support
 * for GetOpt compatible option definition.  Provides a builder pattern implementation
 * for creating shell option parsers.
 *
 * ### Options
 *
 * Named arguments come in two forms, long and short. Long arguments are preceded
 * by two - and give a more verbose option name. i.e. `--version`. Short arguments are
 * preceded by one - and are only one character long.  They usually match with a long option,
 * and provide a more terse alternative.
 *
 * ### Using Options
 *
 * Options can be defined with both long and short forms.  By using `$parser->addOption()`
 * you can define new options.  The name of the option is used as its long form, and you
 * can supply an additional short form, with the `short` option. Short options should
 * only be one letter long.  Using more than one letter for a short option will raise an exception.
 *
 * Calling options can be done using syntax similar to most *nix command line tools. Long options
 * cane either include an `=` or leave it out.
 *
 * `cake myshell command --connection default --name=something`
 *
 * Short options can be defined signally or in groups.
 *
 * `cake myshell command -cn`
 *
 * Short options can be combined into groups as seen above.  Each letter in a group
 * will be treated as a separate option.  The previous example is equivalent to:
 *
 * `cake myshell command -c -n`
 *
 * Short options can also accept values:
 *
 * `cake myshell command -c default`
 *
 * ### Positional arguments
 *
 * If no positional arguments are defined, all of them will be parsed.  If you define positional
 * arguments any arguments greater than those defined will cause exceptions.  Additionally you can
 * declare arguments as optional, by setting the required param to false.
 *
 * `$parser->addArgument(\'model\', array(\'required\' => false));`
 *
 * ### Providing Help text
 *
 * By providing help text for your positional arguments and named arguments, the ConsoleOptionParser
 * can generate a help display for you.  You can view the help for shells by using the `--help` or `-h` switch.
 *
 * @package       Cake.Console
 */",
 "/**
 * Connects to the database using options in the given configuration array.
 *
 * @return boolean True if the database could be connected, else false
 * @throws MissingConnectionException
 */",
 "/**
 * Check whether the MySQL extension is installed/loaded
 *
 * @return boolean
 */",
 "/**
 * Returns an array of sources (tables) in the database.
 *
 * @param mixed $data
 * @return array Array of table names in the database
 */",
 "/**
 * Builds a map of the columns contained in a result
 *
 * @param PDOStatement $results
 * @return void
 */",
 "/**
 * Fetches the next row from the current result set
 *
 * @return mixed array with results fetched and mapped to column names or false if there is no results left to fetch
 */",
 "/**
 * Gets the database encoding
 *
 * @return string The database encoding
 */",
 "/**
 * Query charset by collation
 *
 * @param string $name Collation name
 * @return string Character set name
 */",
 "/**
 * Returns an array of the fields in given table name.
 *
 * @param Model|string $model Name of database table to inspect or model instance
 * @return array Fields in table. Keys are name and type
 * @throws CakeException
 */",
 "/**
 * Generates and executes an SQL UPDATE statement for given model, fields, and values.
 *
 * @param Model $model
 * @param array $fields
 * @param array $values
 * @param mixed $conditions
 * @return array
 */",
 "/**
 * Generates and executes an SQL DELETE statement for given id/conditions on given model.
 *
 * @param Model $model
 * @param mixed $conditions
 * @return boolean Success
 */",
 "/**
 * Sets the database encoding
 *
 * @param string $enc Database encoding
 * @return boolean
 */",
 "/**
 * Returns an array of the indexes in given datasource name.
 *
 * @param string $model Name of model to inspect
 * @return array Fields in table. Keys are column and unique
 */",
 "/**
 * Generate a MySQL Alter Table syntax for the given Schema comparison
 *
 * @param array $compare Result of a CakeSchema::compare()
 * @param string $table
 * @return array Array of alter statements to make.
 */",
 "/**
 * Generate a MySQL \"drop table\" statement for the given Schema object
 *
 * @param CakeSchema $schema An instance of a subclass of CakeSchema
 * @param string $table Optional.  If specified only the table name given will be generated.
 *                      Otherwise, all tables defined in the schema are generated.
 * @return string
 */",
 "/**
 * Generate MySQL table parameter alteration statements for a table.
 *
 * @param string $table Table to alter parameters for.
 * @param array $parameters Parameters to add & drop.
 * @return array Array of table property alteration statements.
 * @todo Implement this method.
 */",
 "/**
 * Generate MySQL index alteration statements for a table.
 *
 * @param string $table Table to alter indexes for
 * @param array $indexes Indexes to add and drop
 * @return array Index alteration statements
 */",
 "/**
 * Returns an detailed array of sources (tables) in the database.
 *
 * @param string $name Table name to get parameters
 * @return array Array of table names in the database
 */",
 "/**
 * Converts database-layer column types to basic types
 *
 * @param string $real Real database-layer column type (i.e. \"varchar(255)\")
 * @return string Abstract column type (i.e. \"string\")
 */",
 "/**
 * Gets the schema name
 *
 * @return string The schema name
 */",
 "/**
 * Check if the server support nested transactions
 *
 * @return boolean
 */",
 "/**
 * MySQL DBO driver object
 *
 * Provides connection and SQL generation for MySQL RDMS
 *
 * @package       Cake.Model.Datasource.Database
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * test that the shared fixture is correctly set
 *
 * @return void
 */",
 "/**
 * test that it is possible to load fixtures on demand
 *
 * @return void
 */",
 "/**
 * test that a test is marked as skipped using skipIf and its first parameter evaluates to true
 *
 * @return void
 */",
 "/**
 * test that a test is not marked as skipped using skipIf and its first parameter evaluates to false
 *
 * @return void
 */",
 "/**
 * test that a fixtures are unoaded even if the test throws exceptions
 *
 * @return void
 * @throws Exception
 */",
 "/**
 * This class helps in testing the life-cycle of fixtures inside a CakeTestCase
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 * @param array $options optional load object properties
 */",
 "/**
 * Builds schema object properties
 *
 * @param array $data loaded object properties
 * @return void
 */",
 "/**
 * Before callback to be implemented in subclasses
 *
 * @param array $event schema object properties
 * @return boolean Should process continue
 */",
 "/**
 * After callback to be implemented in subclasses
 *
 * @param array $event schema object properties
 * @return void
 */",
 "/**
 * Reads database and creates schema tables
 *
 * @param array $options schema object properties
 * @return array Set of name and tables
 */",
 "/**
 * Reads database and creates schema tables
 *
 * Options
 *
 * - \'connection\' - the db connection to use
 * - \'name\' - name of the schema
 * - \'models\' - a list of models to use, or false to ignore models
 *
 * @param array $options schema object properties
 * @return array Array indexed by name and tables
 */",
 "/**
 * Writes schema file from object or options
 *
 * @param array|object $object schema object or options array
 * @param array $options schema object properties to override object
 * @return mixed false or string written to file
 */",
 "/**
 * Generate the code for a table. Takes a table name and $fields array
 * Returns a completed variable declaration to be used in schema classes
 *
 * @param string $table Table name you want returned.
 * @param array $fields Array of field information to generate the table with.
 * @return string Variable declaration for a schema class
 */",
 "/**
 * Compares two sets of schemas
 *
 * @param array|object $old Schema object or array
 * @param array|object $new Schema object or array
 * @return array Tables (that are added, dropped, or changed)
 */",
 "/**
 * Extended array_diff_assoc noticing change from/to NULL values
 *
 * It behaves almost the same way as array_diff_assoc except for NULL values: if
 * one of the values is not NULL - change is detected. It is useful in situation
 * where one value is strval(\'\') ant other is strval(null) - in string comparing
 * methods this results as EQUAL, while it is not.
 *
 * @param array $array1 Base array
 * @param array $array2 Corresponding array checked for equality
 * @return array Difference as array with array(keys => values) from input array
 *     where match was not found.
 */",
 "/**
 * Formats Schema columns from Model Object
 *
 * @param array $values options keys(type, null, default, key, length, extra)
 * @return array Formatted values
 */",
 "/**
 * Formats Schema columns from Model Object
 *
 * @param array $Obj model object
 * @return array Formatted columns
 */",
 "/**
 * Compare two schema files table Parameters
 *
 * @param array $new New indexes
 * @param array $old Old indexes
 * @return mixed False on failure, or an array of parameters to add & drop.
 */",
 "/**
 * Compare two schema indexes
 *
 * @param array $new New indexes
 * @param array $old Old indexes
 * @return mixed false on failure or array of indexes to add and drop
 */",
 "/**
 * Trim the table prefix from the full table name, and return the prefix-less table
 *
 * @param string $prefix Table prefix
 * @param string $table Full table name
 * @return string Prefix-less table name
 */",
 "/**
 * Base Class for Schema management
 *
 * @package       Cake.Model
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * main method
 *
 * @return void
 */",
 "/**
 * SampleShell file
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Console.Command
 * @since         CakePHP(tm) v 1.2.0.7871
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Initialize the Cache Engine
 *
 * Called automatically by the cache frontend
 * To reinitialize the settings call Cache::engine(\'EngineName\', [optional] settings = array());
 *
 * @param array $settings array of setting for the engine
 * @return boolean True if the engine has been successfully initialized, false if not
 */",
 "/**
 * Write data for key into cache
 *
 * @param string $key Identifier for the data
 * @param mixed $value Data to be cached
 * @param integer $duration How long to cache the data, in seconds
 * @return boolean True if the data was successfully cached, false on failure
 */",
 "/**
 * Read a key from the cache
 *
 * @param string $key Identifier for the data
 * @return mixed The cached data, or false if the data doesn\'t exist, has expired, or if there was an error fetching it
 */",
 "/**
 * Increments the value of an integer cached key
 * If the cache key is not an integer it will be treated as 0
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to increment
 * @return New incremented value, false otherwise
 */",
 "/**
 * Decrements the value of an integer cached key.
 * If the cache key is not an integer it will be treated as 0
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to subtract
 * @return New decremented value, false otherwise
 */",
 "/**
 * Delete a key from the cache
 *
 * @param string $key Identifier for the data
 * @return boolean True if the value was successfully deleted, false if it didn\'t exist or couldn\'t be removed
 */",
 "/**
 * Delete all keys from the cache
 *
 * @param boolean $check
 * @return boolean True if the cache was successfully cleared, false otherwise
 */",
 "/**
 * Returns the `group value` for each of the configured groups
 * If the group initial value was not found, then it initializes
 * the group accordingly.
 *
 * @return array
 **/",
 "/**
 * Increments the group value to simulate deletion of all keys under a group
 * old values will remain in storage until they expire.
 *
 * @return boolean success
 **/",
 "/**
 * Populates and reverses $_SERVER authentication values
 * Makes necessary changes (and reverting them back) in $_SERVER
 *
 * This has to be done because xcache_clear_cache() needs to pass Basic Http Auth
 * (see xcache.admin configuration settings)
 *
 * @param boolean $reverse Revert changes
 * @return void
 */",
 "/**
 * Xcache storage engine for cache
 *
 * @link          http://trac.lighttpd.net/xcache/ Xcache
 * @package       Cake.Cache.Engine
 */",
 "/**
 * Get/set the controller this authorize object will be working with.  Also checks that isAuthorized is implemented.
 *
 * @param Controller $controller null to get, a controller to set.
 * @return mixed
 * @throws CakeException
 */",
 "/**
 * Checks user authorization using a controller callback.
 *
 * @param array $user Active user data
 * @param CakeRequest $request
 * @return boolean
 */",
 "/**
 * An authorization adapter for AuthComponent.  Provides the ability to authorize using a controller callback.
 * Your controller\'s isAuthorized() method should return a boolean to indicate whether or not the user is authorized.
 *
 * {{{
 *	public function isAuthorized($user) {
 *		if (!empty($this->request->params[\'admin\'])) {
 *			return $user[\'role\'] == \'admin\';
 *		}
 *		return !empty($user);
 *	}
 * }}}
 *
 * the above is simple implementation that would only authorize users of the \'admin\' role to access
 * admin routing.
 *
 * @package       Cake.Controller.Component.Auth
 * @since 2.0
 * @see AuthComponent::$authenticate
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllConfigureTest class
 *
 * This test group will run configure tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Constructor.
 *
 * @param array $config Array of configuration information for the datasource.
 */",
 "/**
 * Caches/returns cached results for child instances
 *
 * @param mixed $data
 * @return array Array of sources available in this datasource.
 */",
 "/**
 * Returns a Model description (metadata) or null if none found.
 *
 * @param Model|string $model
 * @return array Array of Metadata for the $model
 */",
 "/**
 * Begin a transaction
 *
 * @return boolean Returns true if a transaction is not in progress
 */",
 "/**
 * Commit a transaction
 *
 * @return boolean Returns true if a transaction is in progress
 */",
 "/**
 * Rollback a transaction
 *
 * @return boolean Returns true if a transaction is in progress
 */",
 "/**
 * Converts column types to basic types
 *
 * @param string $real Real  column type (i.e. \"varchar(255)\")
 * @return string Abstract column type (i.e. \"string\")
 */",
 "/**
 * Used to create new records. The \"C\" CRUD.
 *
 * To-be-overridden in subclasses.
 *
 * @param Model $model The Model to be created.
 * @param array $fields An Array of fields to be saved.
 * @param array $values An Array of values to save.
 * @return boolean success
 */",
 "/**
 * Used to read records from the Datasource. The \"R\" in CRUD
 *
 * To-be-overridden in subclasses.
 *
 * @param Model $model The model being read.
 * @param array $queryData An array of query data used to find the data you want
 * @return mixed
 */",
 "/**
 * Update a record(s) in the datasource.
 *
 * To-be-overridden in subclasses.
 *
 * @param Model $model Instance of the model class being updated
 * @param array $fields Array of fields to be updated
 * @param array $values Array of values to be update $fields to.
 * @return boolean Success
 */",
 "/**
 * Delete a record(s) in the datasource.
 *
 * To-be-overridden in subclasses.
 *
 * @param Model $model The model class having record(s) deleted
 * @param mixed $conditions The conditions to use for deleting.
 * @return void
 */",
 "/**
 * Returns the ID generated from the previous INSERT operation.
 *
 * @param mixed $source
 * @return mixed Last ID key generated in previous INSERT
 */",
 "/**
 * Returns the number of rows returned by last operation.
 *
 * @param mixed $source
 * @return integer Number of rows returned by last operation
 */",
 "/**
 * Returns the number of rows affected by last query.
 *
 * @param mixed $source
 * @return integer Number of rows affected by last query.
 */",
 "/**
 * Check whether the conditions for the Datasource being available
 * are satisfied.  Often used from connect() to check for support
 * before establishing a connection.
 *
 * @return boolean Whether or not the Datasources conditions for use are met.
 */",
 "/**
 * Sets the configuration for the DataSource.
 * Merges the $config information with the _baseConfig and the existing $config property.
 *
 * @param array $config The configuration array
 * @return void
 */",
 "/**
 * Cache the DataSource description
 *
 * @param string $object The name of the object (model) to cache
 * @param mixed $data The description of the model, usually a string or array
 * @return mixed
 */",
 "/**
 * Replaces `{$__cakeID__$}` and `{$__cakeForeignKey__$}` placeholders in query data.
 *
 * @param string $query Query string needing replacements done.
 * @param array $data Array of data with values that will be inserted in placeholders.
 * @param string $association Name of association model being replaced
 * @param array $assocData
 * @param Model $model Instance of the model to replace $__cakeID__$
 * @param Model $linkModel Instance of model to replace $__cakeForeignKey__$
 * @param array $stack
 * @return string String of query data with placeholders replaced.
 * @todo Remove and refactor $assocData, ensure uses of the method have the param removed too.
 */",
 "/**
 * To-be-overridden in subclasses.
 *
 * @param Model $model Model instance
 * @param string $key Key name to make
 * @return string Key name for model.
 */",
 "/**
 * Returns the schema name. Override this in subclasses.
 *
 * @return string schema name
 * @access public
 */",
 "/**
 * Closes a connection. Override in subclasses
 * 
 * @return boolean
 * @access public
 */",
 "/**
 * Closes the current datasource.
 *
 */",
 "/**
 * DataSource base class
 *
 * @package       Cake.Model.Datasource
 */",
 "/**
 * Test Suite Test Plugin Cache Engine class.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Lib.Cache.Engine
 * @since         CakePHP(tm) v 1.3
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * initialize ObjectCollection
 *
 * @return void
 */",
 "/**
 * Configure and add a new logging stream to CakeLog
 * You can use add loggers from app/Log/Engine use app.loggername, or any
 * plugin/Log/Engine using plugin.loggername.
 *
 * ### Usage:
 *
 * {{{
 * CakeLog::config(\'second_file\', array(
 *     \'engine\' => \'FileLog\',
 *     \'path\' => \'/var/logs/my_app/\'
 * ));
 * }}}
 *
 * Will configure a FileLog instance to use the specified path.
 * All options that are not `engine` are passed onto the logging adapter,
 * and handled there.  Any class can be configured as a logging
 * adapter as long as it implements the methods in CakeLogInterface.
 *
 * ### Logging levels
 *
 * When configuring loggers, you can set which levels a logger will handle.
 * This allows you to disable debug messages in production for example:
 *
 * {{{
 * CakeLog::config(\'default\', array(
 *     \'engine\' => \'File\',
 *     \'path\' => LOGS,
 *     \'levels\' => array(\'error\', \'critical\', \'alert\', \'emergency\')
 * ));
 * }}}
 *
 * The above logger would only log error messages or higher. Any
 * other log messages would be discarded.
 *
 * ### Logging scopes
 *
 * When configuring loggers you can define the active scopes the logger
 * is for.  If defined only the listed scopes will be handled by the
 * logger.  If you don\'t define any scopes an adapter will catch
 * all scopes that match the handled levels.
 *
 * {{{
 * CakeLog::config(\'payments\', array(
 *     \'engine\' => \'File\',
 *     \'scopes\' => array(\'payment\', \'order\')
 * ));
 * }}}
 *
 * The above logger will only capture log entries made in the
 * `payment` and `order` scopes. All other scopes including the
 * undefined scope will be ignored.
 *
 * @param string $key The keyname for this logger, used to remove the
 *    logger later.
 * @param array $config Array of configuration information for the logger
 * @return boolean success of configuration.
 * @throws CakeLogException
 */",
 "/**
 * Returns the keynames of the currently active streams
 *
 * @return array Array of configured log streams.
 */",
 "/**
 * Gets/sets log levels
 *
 * Call this method without arguments, eg: `CakeLog::levels()` to obtain current
 * level configuration.
 *
 * To append additional level \'user0\' and \'user1\' to to default log levels:
 *
 * {{{
 * CakeLog::levels(array(\'user0, \'user1\'));
 * // or
 * CakeLog::levels(array(\'user0, \'user1\'), true);
 * }}}
 *
 * will result in:
 *
 * {{{
 * array(
 *     0 => \'emergency\',
 *     1 => \'alert\',
 *     ...
 *     8 => \'user0\',
 *     9 => \'user1\',
 * );
 * }}}
 *
 * To set/replace existing configuration, pass an array with the second argument
 * set to false.
 *
 * {{{
 * CakeLog::levels(array(\'user0, \'user1\'), false);
 * }}}
 *
 * will result in:
 *
 * {{{
 * array(
 *      0 => \'user0\',
 *      1 => \'user1\',
 * );
 * }}}
 *
 * @param array $levels array
 * @param bool $append true to append, false to replace
 * @return array active log levels
 */",
 "/**
 * Reset log levels to the original value
 *
 * @return array default log levels
 */",
 "/**
 * Removes a stream from the active streams.  Once a stream has been removed
 * it will no longer have messages sent to it.
 *
 * @param string $streamName Key name of a configured stream to remove.
 * @return void
 */",
 "/**
 * Checks wether $streamName is enabled
 *
 * @param string $streamName to check
 * @return bool
 * @throws CakeLogException
 */",
 "/**
 * Enable stream.  Streams that were previously disabled
 * can be re-enabled with this method.
 *
 * @param string $streamName to enable
 * @return void
 * @throws CakeLogException
 */",
 "/**
 * Disable stream.  Disabling a stream will
 * prevent that log stream from receiving any messages until
 * its re-enabled.
 *
 * @param string $streamName to disable
 * @return void
 * @throws CakeLogException
 */",
 "/**
 * Gets the logging engine from the active streams.
 *
 * @see BaseLog
 * @param string $streamName Key name of a configured stream to get.
 * @return $mixed instance of BaseLog or false if not found
 */",
 "/**
 * Configures the automatic/default stream a FileLog.
 *
 * @return void
 */",
 "/**
 * Writes the given message and type to all of the configured log adapters.
 * Configured adapters are passed both the $type and $message variables. $type
 * is one of the following strings/values.
 *
 * ### Types:
 *
 * -  LOG_EMERG => \'emergency\',
 * -  LOG_ALERT => \'alert\',
 * -  LOG_CRIT => \'critical\',
 * - `LOG_ERR` => \'error\',
 * - `LOG_WARNING` => \'warning\',
 * - `LOG_NOTICE` => \'notice\',
 * - `LOG_INFO` => \'info\',
 * - `LOG_DEBUG` => \'debug\',
 *
 * ### Usage:
 *
 * Write a message to the \'warning\' log:
 *
 * `CakeLog::write(\'warning\', \'Stuff is broken here\');`
 *
 * @param integer|string $type Type of message being written. When value is an integer
 *    or a string matching the recognized levels, then it will
 *    be treated log levels. Otherwise it\'s treated as scope.
 * @param string $message Message content to log
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Convenience method to log emergency messages
 *
 * @param string $message log message
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Convenience method to log alert messages
 *
 * @param string $message log message
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Convenience method to log critical messages
 *
 * @param string $message log message
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Convenience method to log error messages
 *
 * @param string $message log message
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Convenience method to log warning messages
 *
 * @param string $message log message
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Convenience method to log notice messages
 *
 * @param string $message log message
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Convenience method to log debug messages
 *
 * @param string $message log message
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Convenience method to log info messages
 *
 * @param string $message log message
 * @param string|array $scope The scope(s) a log messge is being created in.
 *    See CakeLog::config() for more information on logging scopes.
 * @return boolean Success
 */",
 "/**
 * Logs messages to configured Log adapters.  One or more adapters
 * can be configured using CakeLogs\'s methods.  If you don\'t
 * configure any adapters, and write to the logs a default
 * FileLog will be autoconfigured for you.
 *
 * ### Configuring Log adapters
 *
 * You can configure log adapters in your applications `bootstrap.php` file.
 * A sample configuration would look like:
 *
 * {{{
 * CakeLog::config(\'my_log\', array(\'engine\' => \'FileLog\'));
 * }}}
 *
 * See the documentation on CakeLog::config() for more detail.
 *
 * ### Writing to the log
 *
 * You write to the logs using CakeLog::write().  See its documentation for more
 * information.
 *
 * ### Logging Levels
 *
 * By default CakeLog supports all the log levels defined in
 * RFC 5424. When logging messages you can either use the named methods,
 * or the correct constants with `write()`:
 *
 * {{{
 * CakeLog::error(\'Something horrible happened\');
 * CakeLog::write(LOG_ERR, \'Something horrible happened\');
 * }}}
 *
 * If you require custom logging levels, you can use CakeLog::levels() to
 * append additoinal logging levels.
 *
 * ### Logging scopes
 *
 * When logging messages and configuring log adapters, you can specify
 * \'scopes\' that the logger will handle.  You can think of scopes as subsystems
 * in your application that may require different logging setups.  For
 * example in an e-commerce application you may want to handle logged errors
 * in the cart and ordering subsystems differently than the rest of the
 * application.  By using scopes you can control logging for each part
 * of your application and still keep standard log levels.
 *
 * See CakeLog::config() and CakeLog::write() for more information
 * on scopes
 *
 * @package       Cake.Log
 */",
 "/**
 * Method called on open of a session.
 *
 * @return boolean Success
 */",
 "/**
 * Method called on close of a session.
 *
 * @return boolean Success
 */",
 "/**
 * Method used to read from a session.
 *
 * @param string $id The key of the value to read
 * @return mixed The value of the key or false if it does not exist
 */",
 "/**
 * Helper function called on write for sessions.
 *
 * @param integer $id ID that uniquely identifies session in database
 * @param mixed $data The value of the data to be saved.
 * @return boolean True for successful write, false otherwise.
 */",
 "/**
 * Method called on the destruction of a session.
 *
 * @param integer $id ID that uniquely identifies session in database
 * @return boolean True for successful delete, false otherwise.
 */",
 "/**
 * Run the Garbage collection on the session storage.  This method should vacuum all
 * expired or dead sessions.
 *
 * @param integer $expires Timestamp (defaults to current time)
 * @return boolean Success
 */",
 "/**
 * Interface for Session handlers.  Custom session handler classes should implement
 * this interface as it allows CakeSession know how to map methods to session_set_save_handler()
 *
 * @package       Cake.Model.Datasource.Session
 */",
 "/**
 * Constructor - determines engine helper
 *
 * @param View $View the view object the helper is attached to.
 * @param array $settings Settings array contains name of engine helper.
 */",
 "/**
 * call__ Allows for dispatching of methods to the Engine Helper.
 * methods in the Engines bufferedMethods list will be automatically buffered.
 * You can control buffering with the buffer param as well. By setting the last parameter to
 * any engine method to a boolean you can force or disable buffering.
 *
 * e.g. `$js->get(\'#foo\')->effect(\'fadeIn\', array(\'speed\' => \'slow\'), true);`
 *
 * Will force buffering for the effect method. If the method takes an options array you may also add
 * a \'buffer\' param to the options array and control buffering there as well.
 *
 * e.g. `$js->get(\'#foo\')->event(\'click\', $functionContents, array(\'buffer\' => true));`
 *
 * The buffer parameter will not be passed onto the EngineHelper.
 *
 * @param string $method Method to be called
 * @param array $params Parameters for the method being called.
 * @return mixed Depends on the return of the dispatched method, or it could be an instance of the EngineHelper
 */",
 "/**
 * Overwrite inherited Helper::value()
 * See JsBaseEngineHelper::value() for more information on this method.
 *
 * @param mixed $val A PHP variable to be converted to JSON
 * @param boolean $quoteString If false, leaves string values unquoted
 * @return string a JavaScript-safe/JSON representation of $val
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/js.html#JsHelper::value
 **/",
 "/**
 * Writes all Javascript generated so far to a code block or
 * caches them to a file and returns a linked script.  If no scripts have been
 * buffered this method will return null.  If the request is an XHR(ajax) request
 * onDomReady will be set to false. As the dom is already \'ready\'.
 *
 * ### Options
 *
 * - `inline` - Set to true to have scripts output as a script block inline
 *   if `cache` is also true, a script link tag will be generated. (default true)
 * - `cache` - Set to true to have scripts cached to a file and linked in (default false)
 * - `clear` - Set to false to prevent script cache from being cleared (default true)
 * - `onDomReady` - wrap cached scripts in domready event (default true)
 * - `safe` - if an inline block is generated should it be wrapped in <![CDATA[ ... ]]> (default true)
 *
 * @param array $options options for the code block
 * @return mixed Completed javascript tag if there are scripts, if there are no buffered
 *   scripts null will be returned.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/js.html#JsHelper::writeBuffer
 */",
 "/**
 * Write a script to the buffered scripts.
 *
 * @param string $script Script string to add to the buffer.
 * @param boolean $top If true the script will be added to the top of the
 *   buffered scripts array.  If false the bottom.
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/js.html#JsHelper::buffer
 */",
 "/**
 * Get all the buffered scripts
 *
 * @param boolean $clear Whether or not to clear the script caches (default true)
 * @return array Array of scripts added to the request.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/js.html#JsHelper::getBuffer
 */",
 "/**
 * Generates the object string for variables passed to javascript.
 *
 * @return string Generated JSON object of all set vars
 */",
 "/**
 * Generate an \'Ajax\' link.  Uses the selected JS engine to create a link
 * element that is enhanced with Javascript.  Options can include
 * both those for HtmlHelper::link() and JsBaseEngine::request(), JsBaseEngine::event();
 *
 * ### Options
 *
 * - `confirm` - Generate a confirm() dialog before sending the event.
 * - `id` - use a custom id.
 * - `htmlAttributes` - additional non-standard htmlAttributes.  Standard attributes are class, id,
 *    rel, title, escape, onblur and onfocus.
 * - `buffer` - Disable the buffering and return a script tag in addition to the link.
 *
 * @param string $title Title for the link.
 * @param string|array $url Mixed either a string URL or an cake url array.
 * @param array $options Options for both the HTML element and Js::request()
 * @return string Completed link. If buffering is disabled a script tag will be returned as well.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/js.html#JsHelper::link
 */",
 "/**
 * Pass variables into Javascript.  Allows you to set variables that will be
 * output when the buffer is fetched with `JsHelper::getBuffer()` or `JsHelper::writeBuffer()`
 * The Javascript variable used to output set variables can be controlled with `JsHelper::$setVariable`
 *
 * @param string|array $one Either an array of variables to set, or the name of the variable to set.
 * @param string|array $two If $one is a string, $two is the value for that key.
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/js.html#JsHelper::set
 */",
 "/**
 * Uses the selected JS engine to create a submit input
 * element that is enhanced with Javascript.  Options can include
 * both those for FormHelper::submit() and JsBaseEngine::request(), JsBaseEngine::event();
 *
 * Forms submitting with this method, cannot send files. Files do not transfer over XmlHttpRequest
 * and require an iframe or flash.
 *
 * ### Options
 *
 * - `url` The url you wish the XHR request to submit to.
 * - `confirm` A string to use for a confirm() message prior to submitting the request.
 * - `method` The method you wish the form to send by, defaults to POST
 * - `buffer` Whether or not you wish the script code to be buffered, defaults to true.
 * - Also see options for JsHelper::request() and JsHelper::event()
 *
 * @param string $caption The display text of the submit button.
 * @param array $options Array of options to use. See the options for the above mentioned methods.
 * @return string Completed submit button.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/js.html#JsHelper::submit
 */",
 "/**
 * Parse a set of Options and extract the Html options.
 * Extracted Html Options are removed from the $options param.
 *
 * @param array $options Options to filter.
 * @param array $additional Array of additional keys to extract and include in the return options array.
 * @return array Array of js options and Htmloptions
 */",
 "/**
 * Javascript Generator helper class for easy use of JavaScript.
 *
 * JsHelper provides an abstract interface for authoring JavaScript with a
 * given client-side library.
 *
 * @package       Cake.View.Helper
 * @property      HtmlHelper $Html
 * @property      FormHelper $Form
 */",
 "/**
 * Constructor
 *
 * @param ComponentCollection $collection A ComponentCollection this component can use to lazy load its components
 * @param array $settings Array of configuration settings.
 */",
 "/**
 * Magic method for lazy loading $components.
 *
 * @param string $name Name of component to get.
 * @return mixed A Component object or null.
 */",
 "/**
 * Called before the Controller::beforeFilter().
 *
 * @param Controller $controller Controller with components to initialize
 * @return void
 * @link http://book.cakephp.org/2.0/en/controllers/components.html#Component::initialize
 */",
 "/**
 * Called after the Controller::beforeFilter() and before the controller action
 *
 * @param Controller $controller Controller with components to startup
 * @return void
 * @link http://book.cakephp.org/2.0/en/controllers/components.html#Component::startup
 */",
 "/**
 * Called before the Controller::beforeRender(), and before 
 * the view class is loaded, and before Controller::render()
 *
 * @param Controller $controller Controller with components to beforeRender
 * @return void
 * @link http://book.cakephp.org/2.0/en/controllers/components.html#Component::beforeRender
 */",
 "/**
 * Called after Controller::render() and before the output is printed to the browser.
 *
 * @param Controller $controller Controller with components to shutdown
 * @return void
 * @link @link http://book.cakephp.org/2.0/en/controllers/components.html#Component::shutdown
 */",
 "/**
 * Called before Controller::redirect().  Allows you to replace the url that will
 * be redirected to with a new url. The return of this method can either be an array or a string.
 *
 * If the return is an array and contains a \'url\' key.  You may also supply the following:
 *
 * - `status` The status code for the redirect
 * - `exit` Whether or not the redirect should exit.
 *
 * If your response is a string or an array that does not contain a \'url\' key it will
 * be used as the new url to redirect to.
 *
 * @param Controller $controller Controller with components to beforeRedirect
 * @param string|array $url Either the string or url array that is being redirected to.
 * @param integer $status The status code of the redirect
 * @param boolean $exit Will the script exit.
 * @return array|null Either an array or null.
 * @link @link http://book.cakephp.org/2.0/en/controllers/components.html#Component::beforeRedirect
 */",
 "/**
 * Base class for an individual Component.  Components provide reusable bits of
 * controller logic that can be composed into a controller.  Components also
 * provide request life-cycle callbacks for injecting logic at specific points.
 *
 * ## Life cycle callbacks
 *
 * Components can provide several callbacks that are fired at various stages of the request
 * cycle.  The available callbacks are:
 *
 * - `initialize()` - Fired before the controller\'s beforeFilter method.
 * - `startup()` - Fired after the controller\'s beforeFilter method.
 * - `beforeRender()` - Fired before the view + layout are rendered.
 * - `shutdown()` - Fired after the action is complete and the view has been rendered
 *    but before Controller::afterFilter().
 * - `beforeRedirect()` - Fired before a redirect() is done.
 *
 * @package       Cake.Controller
 * @link          http://book.cakephp.org/2.0/en/controllers/components.html
 * @see Controller::$components
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Vendor.sample
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Constructor. Will return an instance of the correct ACL class as defined in `Configure::read(\'Acl.classname\')`
 *
 * @param ComponentCollection $collection
 * @param array $settings
 * @throws CakeException when Acl.classname could not be loaded.
 */",
 "/**
 * Sets or gets the Adapter object currently in the AclComponent.
 *
 * `$this->Acl->adapter();` will get the current adapter class while
 * `$this->Acl->adapter($obj);` will set the adapter class
 *
 * Will call the initialize method on the adapter if setting a new one.
 *
 * @param AclInterface|string $adapter Instance of AclInterface or a string name of the class to use. (optional)
 * @return AclInterface|void either null, or the adapter implementation.
 * @throws CakeException when the given class is not an instance of AclInterface
 */",
 "/**
 * Pass-thru function for ACL check instance.  Check methods
 * are used to check whether or not an ARO can access an ACO
 *
 * @param array|string|Model $aro ARO The requesting object identifier. See `AclNode::node()` for possible formats
 * @param array|string|Model $aco ACO The controlled object identifier. See `AclNode::node()` for possible formats
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Pass-thru function for ACL allow instance. Allow methods
 * are used to grant an ARO access to an ACO.
 *
 * @param array|string|Model $aro ARO The requesting object identifier. See `AclNode::node()` for possible formats
 * @param array|string|Model $aco ACO The controlled object identifier. See `AclNode::node()` for possible formats
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Pass-thru function for ACL deny instance. Deny methods
 * are used to remove permission from an ARO to access an ACO.
 *
 * @param array|string|Model $aro ARO The requesting object identifier. See `AclNode::node()` for possible formats
 * @param array|string|Model $aco ACO The controlled object identifier. See `AclNode::node()` for possible formats
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Pass-thru function for ACL inherit instance. Inherit methods
 * modify the permission for an ARO to be that of its parent object.
 *
 * @param array|string|Model $aro ARO The requesting object identifier. See `AclNode::node()` for possible formats
 * @param array|string|Model $aco ACO The controlled object identifier. See `AclNode::node()` for possible formats
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Pass-thru function for ACL grant instance. An alias for AclComponent::allow()
 *
 * @param array|string|Model $aro ARO The requesting object identifier. See `AclNode::node()` for possible formats
 * @param array|string|Model $aco ACO The controlled object identifier. See `AclNode::node()` for possible formats
 * @param string $action Action (defaults to *)
 * @return boolean Success
 * @deprecated
 */",
 "/**
 * Pass-thru function for ACL grant instance. An alias for AclComponent::deny()
 *
 * @param array|string|Model $aro ARO The requesting object identifier. See `AclNode::node()` for possible formats
 * @param array|string|Model $aco ACO The controlled object identifier. See `AclNode::node()` for possible formats
 * @param string $action Action (defaults to *)
 * @return boolean Success
 * @deprecated
 */",
 "/**
 * Access Control List factory class.
 *
 * Uses a strategy pattern to allow custom ACL implementations to be used with the same component interface.
 * You can define by changing `Configure::write(\'Acl.classname\', \'DbAcl\');` in your core.php. Concrete ACL
 * implementations should extend `AclBase` and implement the methods it defines.
 *
 * @package       Cake.Controller.Component
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/access-control-lists.html
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Checks that a string contains something other than whitespace
 *
 * Returns true if string contains something other than whitespace
 *
 * $check can be passed as an array:
 * array(\'check\' => \'valueToCheck\');
 *
 * @param string|array $check Value to check
 * @return boolean Success
 */",
 "/**
 * Checks that a string contains only integer or letters
 *
 * Returns true if string contains only integer or letters
 *
 * $check can be passed as an array:
 * array(\'check\' => \'valueToCheck\');
 *
 * @param string|array $check Value to check
 * @return boolean Success
 */",
 "/**
 * Checks that a string length is within s specified range.
 * Spaces are included in the character count.
 * Returns true is string matches value min, max, or between min and max,
 *
 * @param string $check Value to check for length
 * @param integer $min Minimum value in range (inclusive)
 * @param integer $max Maximum value in range (inclusive)
 * @return boolean Success
 */",
 "/**
 * Returns true if field is left blank -OR- only whitespace characters are present in it\'s value
 * Whitespace characters include Space, Tab, Carriage Return, Newline
 *
 * $check can be passed as an array:
 * array(\'check\' => \'valueToCheck\');
 *
 * @param string|array $check Value to check
 * @return boolean Success
 */",
 "/**
 * Validation of credit card numbers.
 * Returns true if $check is in the proper credit card format.
 *
 * @param string|array $check credit card number to validate
 * @param string|array $type \'all\' may be passed as a sting, defaults to fast which checks format of most major credit cards
 *    if an array is used only the values of the array are checked.
 *    Example: array(\'amex\', \'bankcard\', \'maestro\')
 * @param boolean $deep set to true this will check the Luhn algorithm of the credit card.
 * @param string $regex A custom regex can also be passed, this will be used instead of the defined regex values
 * @return boolean Success
 * @see Validation::luhn()
 */",
 "/**
 * Used to compare 2 numeric values.
 *
 * @param string|array $check1 if string is passed for a string must also be passed for $check2
 *    used as an array it must be passed as array(\'check1\' => value, \'operator\' => \'value\', \'check2\' -> value)
 * @param string $operator Can be either a word or operand
 *    is greater >, is less <, greater or equal >=
 *    less or equal <=, is less <, equal to ==, not equal !=
 * @param integer $check2 only needed if $check1 is a string
 * @return boolean Success
 */",
 "/**
 * Used when a custom regular expression is needed.
 *
 * @param string|array $check When used as a string, $regex must also be a valid regular expression.
 *								As and array: array(\'check\' => value, \'regex\' => \'valid regular expression\')
 * @param string $regex If $check is passed as a string, $regex must also be set to valid regular expression
 * @return boolean Success
 */",
 "/**
 * Date validation, determines if the string passed is a valid date.
 * keys that expect full month, day and year will validate leap years
 *
 * @param string $check a valid date string
 * @param string|array $format Use a string or an array of the keys below. Arrays should be passed as array(\'dmy\', \'mdy\', etc)
 * 	      Keys: dmy 27-12-2006 or 27-12-06 separators can be a space, period, dash, forward slash
 * 	            mdy 12-27-2006 or 12-27-06 separators can be a space, period, dash, forward slash
 * 	            ymd 2006-12-27 or 06-12-27 separators can be a space, period, dash, forward slash
 * 	            dMy 27 December 2006 or 27 Dec 2006
 * 	            Mdy December 27, 2006 or Dec 27, 2006 comma is optional
 * 	            My December 2006 or Dec 2006
 * 	            my 12/2006 separators can be a space, period, dash, forward slash
 * @param string $regex If a custom regular expression is used this is the only validation that will occur.
 * @return boolean Success
 */",
 "/**
 * Validates a datetime value
 * All values matching the \"date\" core validation rule, and the \"time\" one will be valid
 *
 * @param array $check Value to check
 * @param string|array $dateFormat Format of the date part
 * Use a string or an array of the keys below. Arrays should be passed as array(\'dmy\', \'mdy\', etc)
 * ## Keys:
 *
 *	- dmy 27-12-2006 or 27-12-06 separators can be a space, period, dash, forward slash
 *	- mdy 12-27-2006 or 12-27-06 separators can be a space, period, dash, forward slash
 *	- ymd 2006-12-27 or 06-12-27 separators can be a space, period, dash, forward slash
 *  - dMy 27 December 2006 or 27 Dec 2006
 *	- Mdy December 27, 2006 or Dec 27, 2006 comma is optional
 *	- My December 2006 or Dec 2006
 * 	- my 12/2006 separators can be a space, period, dash, forward slash
 * @param string $regex Regex for the date part. If a custom regular expression is used this is the only validation that will occur.
 * @return boolean True if the value is valid, false otherwise
 * @see Validation::date
 * @see Validation::time
 */",
 "/**
 * Time validation, determines if the string passed is a valid time.
 * Validates time as 24hr (HH:MM) or am/pm ([H]H:MM[a|p]m)
 * Does not allow/validate seconds.
 *
 * @param string $check a valid time string
 * @return boolean Success
 */",
 "/**
 * Boolean validation, determines if value passed is a boolean integer or true/false.
 *
 * @param string $check a valid boolean
 * @return boolean Success
 */",
 "/**
 * Checks that a value is a valid decimal. If $places is null, the $check is allowed to be a scientific float
 * If no decimal point is found a false will be returned. Both the sign and exponent are optional.
 *
 * @param integer $check The value the test for decimal
 * @param integer $places if set $check value must have exactly $places after the decimal point
 * @param string $regex If a custom regular expression is used this is the only validation that will occur.
 * @return boolean Success
 */",
 "/**
 * Validates for an email address.
 *
 * Only uses getmxrr() checking for deep validation if PHP 5.3.0+ is used, or
 * any PHP version on a non-windows distribution
 *
 * @param string $check Value to check
 * @param boolean $deep Perform a deeper validation (if true), by also checking availability of host
 * @param string $regex Regex to use (if none it will use built in regex)
 * @return boolean Success
 */",
 "/**
 * Check that value is exactly $comparedTo.
 *
 * @param mixed $check Value to check
 * @param mixed $comparedTo Value to compare
 * @return boolean Success
 */",
 "/**
 * Check that value has a valid file extension.
 *
 * @param string|array $check Value to check
 * @param array $extensions file extensions to allow. By default extensions are \'gif\', \'jpeg\', \'png\', \'jpg\'
 * @return boolean Success
 */",
 "/**
 * Validation of an IP address.
 *
 * @param string $check The string to test.
 * @param string $type The IP Protocol version to validate against
 * @return boolean Success
 */",
 "/**
 * Checks whether the length of a string is greater or equal to a minimal length.
 *
 * @param string $check The string to test
 * @param integer $min The minimal string length
 * @return boolean Success
 */",
 "/**
 * Checks whether the length of a string is smaller or equal to a maximal length..
 *
 * @param string $check The string to test
 * @param integer $max The maximal string length
 * @return boolean Success
 */",
 "/**
 * Checks that a value is a monetary amount.
 *
 * @param string $check Value to check
 * @param string $symbolPosition Where symbol is located (left/right)
 * @return boolean Success
 */",
 "/**
 * Validate a multiple select.
 *
 * Valid Options
 *
 * - in => provide a list of choices that selections must be made from
 * - max => maximum number of non-zero choices that can be made
 * - min => minimum number of non-zero choices that can be made
 *
 * @param array $check Value to check
 * @param array $options Options for the check.
 * @param boolean $strict Defaults to true, set to false to disable strict type check
 * @return boolean Success
 */",
 "/**
 * Checks if a value is numeric.
 *
 * @param string $check Value to check
 * @return boolean Success
 */",
 "/**
 * Checks if a value is a natural number.
 *
 * @param string $check Value to check
 * @param boolean $allowZero Set true to allow zero, defaults to false
 * @return boolean Success
 * @see http://en.wikipedia.org/wiki/Natural_number
 */",
 "/**
 * Check that a value is a valid phone number.
 *
 * @param string|array $check Value to check (string or array)
 * @param string $regex Regular expression to use
 * @param string $country Country code (defaults to \'all\')
 * @return boolean Success
 */",
 "/**
 * Checks that a given value is a valid postal code.
 *
 * @param string|array $check Value to check
 * @param string $regex Regular expression to use
 * @param string $country Country to use for formatting
 * @return boolean Success
 */",
 "/**
 * Validate that a number is in specified range.
 * if $lower and $upper are not set, will return true if
 * $check is a legal finite on this platform
 *
 * @param string $check Value to check
 * @param integer $lower Lower limit
 * @param integer $upper Upper limit
 * @return boolean Success
 */",
 "/**
 * Checks that a value is a valid Social Security Number.
 *
 * @param string|array $check Value to check
 * @param string $regex Regular expression to use
 * @param string $country Country
 * @return boolean Success
 */",
 "/**
 * Checks that a value is a valid URL according to http://www.w3.org/Addressing/URL/url-spec.txt
 *
 * The regex checks for the following component parts:
 *
 * - a valid, optional, scheme
 * - a valid ip address OR
 *   a valid domain name as defined by section 2.3.1 of http://www.ietf.org/rfc/rfc1035.txt
 *   with an optional port number
 * - an optional valid path
 * - an optional query string (get parameters)
 * - an optional fragment (anchor tag)
 *
 * @param string $check Value to check
 * @param boolean $strict Require URL to be prefixed by a valid scheme (one of http(s)/ftp(s)/file/news/gopher)
 * @return boolean Success
 */",
 "/**
 * Checks if a value is in a given list.
 *
 * @param string $check Value to check
 * @param array $list List to check against
 * @param boolean $strict Defaults to true, set to false to disable strict type check
 * @return boolean Success
 */",
 "/**
 * Runs an user-defined validation.
 *
 * @param string|array $check value that will be validated in user-defined methods.
 * @param object $object class that holds validation method
 * @param string $method class method name for validation to run
 * @param array $args arguments to send to method
 * @return mixed user-defined class class method returns
 */",
 "/**
 * Checks that a value is a valid uuid - http://tools.ietf.org/html/rfc4122
 *
 * @param string $check Value to check
 * @return boolean Success
 */",
 "/**
 * Attempts to pass unhandled Validation locales to a class starting with $classPrefix
 * and ending with Validation.  For example $classPrefix = \'nl\', the class would be
 * `NlValidation`.
 *
 * @param string $method The method to call on the other class.
 * @param mixed $check The value to check or an array of parameters for the method to be called.
 * @param string $classPrefix The prefix for the class to do the validation.
 * @return mixed Return of Passed method, false on failure
 */",
 "/**
 * Runs a regular expression match.
 *
 * @param string $check Value to check against the $regex expression
 * @param string $regex Regular expression
 * @return boolean Success of match
 */",
 "/**
 * Get the values to use when value sent to validation method is
 * an array.
 *
 * @param array $params Parameters sent to validation method
 * @return void
 */",
 "/**
 * Luhn algorithm
 *
 * @param string|array $check
 * @param boolean $deep
 * @return boolean Success
 * @see http://en.wikipedia.org/wiki/Luhn_algorithm
 */",
 "/**
 * Checks the mime type of a file
 *
 * @param string|array $check
 * @param array $mimeTypes to check for
 * @return boolean Success
 * @throws CakeException when mime type can not be determined.
 */",
 "/**
 * Checking for upload errors
 *
 * @param string|array $check
 * @retrun boolean
 * @see http://www.php.net/manual/en/features.file-upload.errors.php
 */",
 "/**
 * Lazily populate the IP address patterns used for validations
 *
 * @return void
 */",
 "/**
 * Reset internal variables for another validation run.
 *
 * @return void
 */",
 "/**
 * Offers different validation methods.
 *
 * @package       Cake.Utility
 * @since         CakePHP v 1.2.0.3830
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllDatabaseTest class
 *
 * This test group will run database tests not in model or behavior group.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 * @param array $coverage Array of coverage data from PHPUnit_Test_Result
 * @param CakeBaseReporter $reporter A reporter to use for the coverage report.
 * @return void
 */",
 "/**
 * Pulls params out of the reporter.
 *
 * @param CakeBaseReporter $reporter Reporter to suck params out of.
 * @return void
 */",
 "/**
 * Set the coverage data array
 *
 * @param array $coverage Coverage data to use.
 * @return void
 */",
 "/**
 * Gets the base path that the files we are interested in live in.
 *
 * @return void
 */",
 "/**
 * Filters the coverage data by path.  Files not in the provided path will be removed.
 *
 * @param string $path Path to filter files by.
 * @return array Array of coverage data for files that match the given path.
 */",
 "/**
 * Calculates how many lines are covered and what the total number of executable lines is.
 *
 * Handles both PHPUnit3.5 and 3.6 formats.
 *
 * 3.5 uses -1 for uncovered, and -2 for dead.
 * 3.6 uses array() for uncovered and null for dead.
 *
 * @param array $fileLines
 * @param array $coverageData
 * @return array. Array of covered, total lines.
 */",
 "/**
 * Generates report to display.
 *
 * @return string compiled html report.
 */",
 "/**
 * Generates an coverage \'diff\' for $file based on $coverageData.
 *
 * @param string $filename Name of the file having coverage generated
 * @param array $fileLines File data as an array. See file() for how to get one of these.
 * @param array $coverageData Array of coverage data to use to generate HTML diffs with
 * @return string prepared report for a single file.
 */",
 "/**
 * Abstract class for common CoverageReport methods.
 * Provides several template methods for custom output.
 *
 * @package       Cake.TestSuite.Coverage
 */",
 "/**
 * Constructor for the helper. Sets up the helper that is used for creating \'AJAX\' links.
 *
 * Use `public $helpers = array(\'Paginator\' => array(\'ajax\' => \'CustomHelper\'));` to set a custom Helper
 * or choose a non JsHelper Helper.  If you want to use a specific library with JsHelper declare JsHelper and its
 * adapter before including PaginatorHelper in your helpers array.
 *
 * The chosen custom helper must implement a `link()` method.
 *
 * @param View $View the view object the helper is attached to.
 * @param array $settings Array of settings.
 * @throws CakeException When the AjaxProvider helper does not implement a link method.
 */",
 "/**
 * Before render callback. Overridden to merge passed args with url options.
 *
 * @param string $viewFile
 * @return void
 */",
 "/**
 * Gets the current paging parameters from the resultset for the given model
 *
 * @param string $model Optional model name.  Uses the default if none is specified.
 * @return array The array of paging parameters for the paginated resultset.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::params
 */",
 "/**
 * Sets default options for all pagination links
 *
 * @param array|string $options Default options for pagination links. If a string is supplied - it
 *   is used as the DOM id element to update. See PaginatorHelper::$options for list of keys.
 * @return void
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::options
 */",
 "/**
 * Gets the current page of the recordset for the given model
 *
 * @param string $model Optional model name.  Uses the default if none is specified.
 * @return string The current page number of the recordset.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::current
 */",
 "/**
 * Gets the current key by which the recordset is sorted
 *
 * @param string $model Optional model name.  Uses the default if none is specified.
 * @param array $options Options for pagination links. See #options for list of keys.
 * @return string The name of the key by which the recordset is being sorted, or
 *  null if the results are not currently sorted.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::sortKey
 */",
 "/**
 * Gets the current direction the recordset is sorted
 *
 * @param string $model Optional model name.  Uses the default if none is specified.
 * @param array $options Options for pagination links. See #options for list of keys.
 * @return string The direction by which the recordset is being sorted, or
 *  null if the results are not currently sorted.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::sortDir
 */",
 "/**
 * Generates a \"previous\" link for a set of paged records
 *
 * ### Options:
 *
 * - `tag` The tag wrapping tag you want to use, defaults to \'span\'
 * - `escape` Whether you want the contents html entity encoded, defaults to true
 * - `model` The model to use, defaults to PaginatorHelper::defaultModel()
 *
 * @param string $title Title for the link. Defaults to \'<< Previous\'.
 * @param array $options Options for pagination link. See #options for list of keys.
 * @param string $disabledTitle Title when the link is disabled.
 * @param array $disabledOptions Options for the disabled pagination link. See #options for list of keys.
 * @return string A \"previous\" link or $disabledTitle text if the link is disabled.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::prev
 */",
 "/**
 * Generates a \"next\" link for a set of paged records
 *
 * ### Options:
 *
 * - `tag` The tag wrapping tag you want to use, defaults to \'span\'
 * - `escape` Whether you want the contents html entity encoded, defaults to true
 * - `model` The model to use, defaults to PaginatorHelper::defaultModel()
 *
 * @param string $title Title for the link. Defaults to \'Next >>\'.
 * @param array $options Options for pagination link. See above for list of keys.
 * @param string $disabledTitle Title when the link is disabled.
 * @param array $disabledOptions Options for the disabled pagination link. See above for list of keys.
 * @return string A \"next\" link or or $disabledTitle text if the link is disabled.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::next
 */",
 "/**
 * Generates a sorting link. Sets named parameters for the sort and direction.  Handles
 * direction switching automatically.
 *
 * ### Options:
 *
 * - `escape` Whether you want the contents html entity encoded, defaults to true
 * - `model` The model to use, defaults to PaginatorHelper::defaultModel()
 * - `direction` The default direction to use when this link isn\'t active.
 *
 * @param string $key The name of the key that the recordset should be sorted.
 * @param string $title Title for the link. If $title is null $key will be used
 *		for the title and will be generated by inflection.
 * @param array $options Options for sorting link. See above for list of keys.
 * @return string A link sorting default by \'asc\'. If the resultset is sorted \'asc\' by the specified
 *  key the returned link will sort by \'desc\'.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::sort
 */",
 "/**
 * Generates a plain or Ajax link with pagination parameters
 *
 * ### Options
 *
 * - `update` The Id of the DOM element you wish to update.  Creates Ajax enabled links
 *    with the AjaxHelper.
 * - `escape` Whether you want the contents html entity encoded, defaults to true
 * - `model` The model to use, defaults to PaginatorHelper::defaultModel()
 *
 * @param string $title Title for the link.
 * @param string|array $url Url for the action. See Router::url()
 * @param array $options Options for the link. See #options for list of keys.
 * @return string A link with pagination parameters.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::link
 */",
 "/**
 * Merges passed URL options with current pagination state to generate a pagination URL.
 *
 * @param array $options Pagination/URL options array
 * @param boolean $asArray Return the url as an array, or a URI string
 * @param string $model Which model to paginate on
 * @return mixed By default, returns a full pagination URL string for use in non-standard contexts (i.e. JavaScript)
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::url
 */",
 "/**
 * Converts the keys being used into the format set by options.paramType
 *
 * @param array $url Array of url params to convert
 * @param string $type
 * @return array converted url params.
 */",
 "/**
 * Protected method for generating prev/next links
 *
 * @param string $which
 * @param string $title
 * @param array $options
 * @param string $disabledTitle
 * @param array $disabledOptions
 * @return string
 */",
 "/**
 * Returns true if the given result set is not at the first page
 *
 * @param string $model Optional model name. Uses the default if none is specified.
 * @return boolean True if the result set is not at the first page.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::hasPrev
 */",
 "/**
 * Returns true if the given result set is not at the last page
 *
 * @param string $model Optional model name.  Uses the default if none is specified.
 * @return boolean True if the result set is not at the last page.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::hasNext
 */",
 "/**
 * Returns true if the given result set has the page number given by $page
 *
 * @param string $model Optional model name.  Uses the default if none is specified.
 * @param integer $page The page number - if not set defaults to 1.
 * @return boolean True if the given result set has the specified page number.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::hasPage
 */",
 "/**
 * Does $model have $page in its range?
 *
 * @param string $model Model name to get parameters for.
 * @param integer $page Page number you are checking.
 * @return boolean Whether model has $page
 */",
 "/**
 * Gets the default model of the paged sets
 *
 * @return string Model name or null if the pagination isn\'t initialized.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::defaultModel
 */",
 "/**
 * Returns a counter string for the paged result set
 *
 * ### Options
 *
 * - `model` The model to use, defaults to PaginatorHelper::defaultModel();
 * - `format` The format string you want to use, defaults to \'pages\' Which generates output like \'1 of 5\'
 *    set to \'range\' to generate output like \'1 - 3 of 13\'.  Can also be set to a custom string, containing
 *    the following placeholders `{:page}`, `{:pages}`, `{:current}`, `{:count}`, `{:model}`, `{:start}`, `{:end}` and any
 *    custom content you would like.
 * - `separator` The separator string to use, default to \' of \'
 *
 * The `%page%` style placeholders also work, but are deprecated and will be removed in a future version.
 * @param array $options Options for the counter string. See #options for list of keys.
 * @return string Counter string.
 * @deprecated The %page% style placeholders are deprecated.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::counter
 */",
 "/**
 * Returns a set of numbers for the paged result set
 * uses a modulus to decide how many numbers to show on each side of the current page (default: 8).
 *
 * `$this->Paginator->numbers(array(\'first\' => 2, \'last\' => 2));`
 *
 * Using the first and last options you can create links to the beginning and end of the page set.
 *
 * ### Options
 *
 * - `before` Content to be inserted before the numbers
 * - `after` Content to be inserted after the numbers
 * - `model` Model to create numbers for, defaults to PaginatorHelper::defaultModel()
 * - `modulus` how many numbers to include on either side of the current page, defaults to 8.
 * - `separator` Separator content defaults to \' | \'
 * - `tag` The tag to wrap links in, defaults to \'span\'
 * - `first` Whether you want first links generated, set to an integer to define the number of \'first\'
 *    links to generate.
 * - `last` Whether you want last links generated, set to an integer to define the number of \'last\'
 *    links to generate.
 * - `ellipsis` Ellipsis content, defaults to \'...\'
 * - `class` Class for wrapper tag
 * - `currentClass` Class for wrapper tag on current active page, defaults to \'current\'
 *
 * @param array $options Options for the numbers, (before, after, model, modulus, separator)
 * @return string numbers string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::numbers
 */",
 "/**
 * Returns a first or set of numbers for the first pages.
 *
 * `echo $this->Paginator->first(\'< first\');`
 *
 * Creates a single link for the first page.  Will output nothing if you are on the first page.
 *
 * `echo $this->Paginator->first(3);`
 *
 * Will create links for the first 3 pages, once you get to the third or greater page. Prior to that
 * nothing will be output.
 *
 * ### Options:
 *
 * - `tag` The tag wrapping tag you want to use, defaults to \'span\'
 * - `after` Content to insert after the link/tag
 * - `model` The model to use defaults to PaginatorHelper::defaultModel()
 * - `separator` Content between the generated links, defaults to \' | \'
 * - `ellipsis` Content for ellipsis, defaults to \'...\'
 *
 * @param string|integer $first if string use as label for the link. If numeric, the number of page links
 *   you want at the beginning of the range.
 * @param array $options An array of options.
 * @return string numbers string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::first
 */",
 "/**
 * Returns a last or set of numbers for the last pages.
 *
 * `echo $this->Paginator->last(\'last >\');`
 *
 * Creates a single link for the last page.  Will output nothing if you are on the last page.
 *
 * `echo $this->Paginator->last(3);`
 *
 * Will create links for the last 3 pages.  Once you enter the page range, no output will be created.
 *
 * ### Options:
 *
 * - `tag` The tag wrapping tag you want to use, defaults to \'span\'
 * - `before` Content to insert before the link/tag
 * - `model` The model to use defaults to PaginatorHelper::defaultModel()
 * - `separator` Content between the generated links, defaults to \' | \'
 * - `ellipsis` Content for ellipsis, defaults to \'...\'
 *
 * @param string|integer $last if string use as label for the link, if numeric print page numbers
 * @param array $options Array of options
 * @return string numbers string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html#PaginatorHelper::last
 */",
 "/**
 * Pagination Helper class for easy generation of pagination links.
 *
 * PaginationHelper encloses all methods needed when working with pagination.
 *
 * @package       Cake.View.Helper
 * @property      HtmlHelper $Html
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/paginator.html
 */",
 "/**
 * testStringScope method
 *
 * @return void
 */",
 "/**
 * testArrayScope method
 *
 * @return void
 */",
 "/**
 * testMoveUpWithScope method
 *
 * @return void
 */",
 "/**
 * testMoveDownWithScope method
 *
 * @return void
 */",
 "/**
 * Tests the interaction (non-interference) between TreeBehavior and other behaviors with respect
 * to callback hooks
 *
 * @return void
 */",
 "/**
 * testGenerateTreeListWithSelfJoin method
 *
 * @return void
 */",
 "/**
 * TreeBehaviorScopedTest class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * CampaignFixture class
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Send mail
 *
 * @param CakeEmail $email CakeEmail
 * @return array
 * @throws SocketException When mail cannot be sent.
 */",
 "/**
 * Send mail using mail() function
 *
 * @package       Cake.Network.Email
 */",
 "/**
 * Constructor
 *
 * @param string $handle The location of the stream to use as input.
 */",
 "/**
 * Read a value from the stream
 *
 * @return mixed The value of the stream
 */",
 "/**
 * Object wrapper for interacting with stdin
 *
 * @package       Cake.Console
 */",
 "/**
 * Connects to the database using options in the given configuration array.
 *
 * @return boolean True if successfully connected.
 * @throws MissingConnectionException
 */",
 "/**
 * Check if PostgreSQL is enabled/loaded
 *
 * @return boolean
 */",
 "/**
 * Returns an array of tables in the database. If there are no tables, an error is raised and the application exits.
 *
 * @param mixed $data
 * @return array Array of table names in the database
 */",
 "/**
 * Returns an array of the fields in given table name.
 *
 * @param Model|string $model Name of database table to inspect
 * @return array Fields in table. Keys are name and type
 */",
 "/**
 * Returns the ID generated from the previous INSERT operation.
 *
 * @param string $source Name of the database table
 * @param string $field Name of the ID database field. Defaults to \"id\"
 * @return integer
 */",
 "/**
 * Gets the associated sequence for the given table/field
 *
 * @param string|Model $table Either a full table name (with prefix) as a string, or a model object
 * @param string $field Name of the ID database field. Defaults to \"id\"
 * @return string The associated sequence name from the sequence map, defaults to \"{$table}_{$field}_seq\"
 */",
 "/**
 * Deletes all the records in a table and drops all associated auto-increment sequences
 *
 * @param string|Model $table A string or model class representing the table to be truncated
 * @param boolean $reset true for resetting the sequence, false to leave it as is.
 *    and if 1, sequences are not modified
 * @return boolean	SQL TRUNCATE TABLE statement, false if not applicable.
 */",
 "/**
 * Prepares field names to be quoted by parent
 *
 * @param string $data
 * @return string SQL field
 */",
 "/**
 * Generates the fields list of an SQL query.
 *
 * @param Model $model
 * @param string $alias Alias table name
 * @param mixed $fields
 * @param boolean $quote
 * @return array
 */",
 "/**
 * Auxiliary function to quote matched `(Model.fields)` from a preg_replace_callback call
 * Quotes the fields in a function call.
 *
 * @param string $match matched string
 * @return string quoted string
 */",
 "/**
 * Returns an array of the indexes in given datasource name.
 *
 * @param string $model Name of model to inspect
 * @return array Fields in table. Keys are column and unique
 */",
 "/**
 * Alter the Schema of a table.
 *
 * @param array $compare Results of CakeSchema::compare()
 * @param string $table name of the table
 * @return array
 */",
 "/**
 * Generate PostgreSQL index alteration statements for a table.
 *
 * @param string $table Table to alter indexes for
 * @param array $indexes Indexes to add and drop
 * @return array Index alteration statements
 */",
 "/**
 * Returns a limit statement in the correct format for the particular database.
 *
 * @param integer $limit Limit of results returned
 * @param integer $offset Offset from which to start results
 * @return string SQL limit/offset statement
 */",
 "/**
 * Converts database-layer column types to basic types
 *
 * @param string $real Real database-layer column type (i.e. \"varchar(255)\")
 * @return string Abstract column type (i.e. \"string\")
 */",
 "/**
 * Gets the length of a database-native column description, or null if no length
 *
 * @param string $real Real database-layer column type (i.e. \"varchar(255)\")
 * @return integer An integer representing the length of the column
 */",
 "/**
 * resultSet method
 *
 * @param array $results
 * @return void
 */",
 "/**
 * Fetches the next row from the current result set
 *
 * @return array
 */",
 "/**
 * Translates between PHP boolean values and PostgreSQL boolean values
 *
 * @param mixed $data Value to be translated
 * @param boolean $quote true to quote a boolean to be used in a query, false to return the boolean value
 * @return boolean Converted boolean value
 */",
 "/**
 * Sets the database encoding
 *
 * @param mixed $enc Database encoding
 * @return boolean True on success, false on failure
 */",
 "/**
 * Gets the database encoding
 *
 * @return string The database encoding
 */",
 "/**
 * Generate a Postgres-native column schema string
 *
 * @param array $column An array structured like the following:
 *                      array(\'name\'=>\'value\', \'type\'=>\'value\'[, options]),
 *                      where options can be \'default\', \'length\', or \'key\'.
 * @return string
 */",
 "/**
 * Format indexes for create table
 *
 * @param array $indexes
 * @param string $table
 * @return string
 */",
 "/**
 * Overrides DboSource::renderStatement to handle schema generation with Postgres-style indexes
 *
 * @param string $type
 * @param array $data
 * @return string
 */",
 "/**
 * Gets the schema name
 *
 * @return string The schema name
 */",
 "/**
 * Check if the server support nested transactions
 *
 * @return boolean
 */",
 "/**
 * PostgreSQL layer for DBO.
 *
 * @package       Cake.Model.Datasource.Database
 */",
 "/**
 * Test Suite TestUtilityClass Library
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Lib.Utility
 * @since         CakePHP(tm) v 1.3
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * ScaffoldMockController class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * function beforeScaffold
 *
 * @param string method
 */",
 "/**
 * ScaffoldMockControllerWithFields class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * Overload _scaffold
 *
 * @param unknown_type $params
 */",
 "/**
 * Get Params from the Controller.
 *
 * @return unknown
 */",
 "/**
 * TestScaffoldMock class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Test the correct Generation of Scaffold Params.
 * This ensures that the correct action and view will be generated
 *
 * @return void
 */",
 "/**
 * test that the proper names and variable values are set by Scaffold
 *
 * @return void
 */",
 "/**
 * test that Scaffold overrides the view property even if its set to \'Theme\'
 *
 * @return void
 */",
 "/**
 * test that scaffold outputs flash messages when sessions are unset.
 *
 * @return void
 */",
 "/**
 * test that habtm relationship keys get added to scaffoldFields.
 *
 * @return void
 */",
 "/**
 * test that the proper names and variable values are set by Scaffold
 *
 * @return void
 */",
 "/**
 * Scaffold Test class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 *  Constructs this Shell instance.
 *
 * @param ConsoleOutput $stdout A ConsoleOutput object for stdout.
 * @param ConsoleOutput $stderr A ConsoleOutput object for stderr.
 * @param ConsoleInput $stdin A ConsoleInput object for stdin.
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell
 */",
 "/**
 * Initializes the Shell
 * acts as constructor for subclasses
 * allows configuration of tasks prior to shell execution
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::initialize
 */",
 "/**
 * Starts up the Shell and displays the welcome message.
 * Allows for checking and configuring prior to command or main execution
 *
 * Override this method if you want to remove the welcome information,
 * or otherwise modify the pre-command flow.
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::startup
 */",
 "/**
 * Displays a header for the shell
 *
 * @return void
 */",
 "/**
 * If $uses = true
 * Loads AppModel file and constructs AppModel class
 * makes $this->AppModel available to subclasses
 * If public $uses is an array of models will load those models
 *
 * @return boolean
 */",
 "/**
 * Loads tasks defined in public $tasks
 *
 * @return boolean
 */",
 "/**
 * Check to see if this shell has a task with the provided name.
 *
 * @param string $task The task name to check.
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::hasTask
 */",
 "/**
 * Check to see if this shell has a callable method by the given name.
 *
 * @param string $name The method name to check.
 * @return boolean
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::hasMethod
 */",
 "/**
 * Dispatch a command to another Shell. Similar to Object::requestAction()
 * but intended for running shells from other shells.
 *
 * ### Usage:
 *
 * With a string command:
 *
 *	`return $this->dispatchShell(\'schema create DbAcl\');`
 *
 * Avoid using this form if you have string arguments, with spaces in them.
 * The dispatched will be invoked incorrectly. Only use this form for simple
 * command dispatching.
 *
 * With an array command:
 *
 * `return $this->dispatchShell(\'schema\', \'create\', \'i18n\', \'--dry\');`
 *
 * @return mixed The return of the other shell.
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::dispatchShell
 */",
 "/**
 * Runs the Shell with the provided argv.
 *
 * Delegates calls to Tasks and resolves methods inside the class. Commands are looked
 * up with the following order:
 *
 * - Method on the shell.
 * - Matching task name.
 * - `main()` method.
 *
 * If a shell implements a `main()` method, all missing method calls will be sent to
 * `main()` with the original method name in the argv.
 *
 * @param string $command The command name to run on this shell. If this argument is empty,
 *   and the shell has a `main()` method, that will be called instead.
 * @param array $argv Array of arguments to run the shell with. This array should be missing the shell name.
 * @return void
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::runCommand
 */",
 "/**
 * Display the help in the correct format
 *
 * @param string $command
 * @return void
 */",
 "/**
 * Gets the option parser instance and configures it.
 * By overriding this method you can configure the ConsoleOptionParser before returning it.
 *
 * @return ConsoleOptionParser
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::getOptionParser
 */",
 "/**
 * Overload get for lazy building of tasks
 *
 * @param string $name
 * @return Shell Object of Task
 */",
 "/**
 * Prompts the user for input, and returns it.
 *
 * @param string $prompt Prompt text.
 * @param string|array $options Array or string of options.
 * @param string $default Default input value.
 * @return mixed Either the default value, or the user-provided input.
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::in
 */",
 "/**
 * Prompts the user for input, and returns it.
 *
 * @param string $prompt Prompt text.
 * @param string|array $options Array or string of options.
 * @param string $default Default input value.
 * @return Either the default value, or the user-provided input.
 */",
 "/**
 * Wrap a block of text.
 * Allows you to set the width, and indenting on a block of text.
 *
 * ### Options
 *
 * - `width` The width to wrap to.  Defaults to 72
 * - `wordWrap` Only wrap on words breaks (spaces) Defaults to true.
 * - `indent` Indent the text with the string provided. Defaults to null.
 *
 * @param string $text Text the text to format.
 * @param string|integer|array $options Array of options to use, or an integer to wrap the text to.
 * @return string Wrapped / indented text
 * @see String::wrap()
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::wrapText
 */",
 "/**
 * Outputs a single or multiple messages to stdout. If no parameters
 * are passed outputs just a newline.
 *
 * ### Output levels
 *
 * There are 3 built-in output level.  Shell::QUIET, Shell::NORMAL, Shell::VERBOSE.
 * The verbose and quiet output levels, map to the `verbose` and `quiet` output switches
 * present in  most shells.  Using Shell::QUIET for a message means it will always display.
 * While using Shell::VERBOSE means it will only display when verbose output is toggled.
 *
 * @param string|array $message A string or a an array of strings to output
 * @param integer $newlines Number of newlines to append
 * @param integer $level The message\'s output level, see above.
 * @return integer|boolean Returns the number of bytes returned from writing to stdout.
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::out
 */",
 "/**
 * Outputs a single or multiple error messages to stderr. If no parameters
 * are passed outputs just a newline.
 *
 * @param string|array $message A string or a an array of strings to output
 * @param integer $newlines Number of newlines to append
 * @return void
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::err
 */",
 "/**
 * Returns a single or multiple linefeeds sequences.
 *
 * @param integer $multiplier Number of times the linefeed sequence should be repeated
 * @return string
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::nl
 */",
 "/**
 * Outputs a series of minus characters to the standard output, acts as a visual separator.
 *
 * @param integer $newlines Number of newlines to pre- and append
 * @param integer $width Width of the line, defaults to 63
 * @return void
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::hr
 */",
 "/**
 * Displays a formatted error message
 * and exits the application with status code 1
 *
 * @param string $title Title of the error
 * @param string $message An optional error message
 * @return void
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::error
 */",
 "/**
 * Clear the console
 *
 * @return void
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::clear
 */",
 "/**
 * Creates a file at given path
 *
 * @param string $path Where to put the file.
 * @param string $contents Content to put in the file.
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::createFile
 */",
 "/**
 * Action to create a Unit Test
 *
 * @return boolean Success
 */",
 "/**
 * Makes absolute file path easier to read
 *
 * @param string $file Absolute file path
 * @return string short path
 * @link http://book.cakephp.org/2.0/en/console-and-shells.html#Shell::shortPath
 */",
 "/**
 * Creates the proper controller path for the specified controller class name
 *
 * @param string $name Controller class name
 * @return string Path to controller
 */",
 "/**
 * Creates the proper controller plural name for the specified controller class name
 *
 * @param string $name Controller class name
 * @return string Controller plural name
 */",
 "/**
 * Creates the proper model camelized name (singularized) for the specified name
 *
 * @param string $name Name
 * @return string Camelized and singularized model name
 */",
 "/**
 * Creates the proper underscored model key for associations
 *
 * @param string $name Model class name
 * @return string Singular model key
 */",
 "/**
 * Creates the proper model name from a foreign key
 *
 * @param string $key Foreign key
 * @return string Model name
 */",
 "/**
 * creates the singular name for use in views.
 *
 * @param string $name
 * @return string $name
 */",
 "/**
 * Creates the plural name for views
 *
 * @param string $name Name to use
 * @return string Plural name for views
 */",
 "/**
 * Creates the singular human name used in views
 *
 * @param string $name Controller name
 * @return string Singular human name
 */",
 "/**
 * Creates the plural human name used in views
 *
 * @param string $name Controller name
 * @return string Plural human name
 */",
 "/**
 * Find the correct path for a plugin. Scans $pluginPaths for the plugin you want.
 *
 * @param string $pluginName Name of the plugin you want ie. DebugKit
 * @return string $path path to the correct plugin.
 */",
 "/**
 * Base class for command-line utilities for automating programmer chores.
 *
 * @package       Cake.Console
 */",
 "/**
 * Theme view class
 *
 * Stub class for 2.1 Compatibility
 *
 * @package       Cake.View
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * test getting the path filters.
 *
 * @return void
 */",
 "/**
 * test filtering coverage data.
 *
 * @return void
 */",
 "/**
 * test generating HTML reports from file arrays.
 *
 * @return void
 */",
 "/**
 * Test that coverage works with phpunit 3.6 as the data formats from coverage are totally different.
 *
 * @return void
 */",
 "/**
 * test that covering methods show up as title attributes for lines.
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * Test App Comment Model
 *
 *
 *
 * PHP 5
 *
 * CakePHP : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc.
 * @link          http://cakephp.org CakePHP Project
 * @package       Cake.Test.test_app.Model
 * @since         CakePHP v 1.2.0.7726
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Lets us pass in some options needed for cake\'s webrunner.
 *
 * @return void
 */",
 "/**
 * Actually run a suite of tests.  Cake initializes fixtures here using the chosen fixture manager
 *
 * @param PHPUnit_Framework_Test $suite
 * @param array $arguments
 * @return void
 */",
 "/**
 * Create the test result and splice on our code coverage reports.
 *
 * @return PHPUnit_Framework_TestResult
 */",
 "/**
 * Get the fixture manager class specified or use the default one.
 *
 * @return instance of a fixture manager.
 * @throws RuntimeException When fixture manager class cannot be loaded.
 */",
 "/**
 * A custom test runner for Cake\'s use of PHPUnit.
 *
 * @package       Cake.TestSuite
 */",
 "/**
 * authentication method
 *
 * @param HttpSocket $http
 * @param array $authInfo
 * @return void
 */",
 "/**
 * proxyAuthentication method
 *
 * @param HttpSocket $http
 * @param array $proxyInfo
 * @return void
 */",
 "/**
 * TestAuthentication class
 *
 * @package       Cake.Test.Case.Network.Http
 * @package       Cake.Test.Case.Network.Http
 */",
 "/**
 * Constructor
 *
 */",
 "/**
 * CustomResponse
 *
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param string|array $uri URI (see {@link _parseUri()})
 * @return array Current configuration settings
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param string|array $uri URI to parse
 * @param boolean|array $base If true use default URI config, otherwise indexed array to set \'scheme\', \'host\', \'port\', etc.
 * @return array Parsed URI
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param array $uri A $uri array, or uses $this->config if left empty
 * @param string $uriTemplate The Uri template/format to use
 * @return string A fully qualified URL formatted according to $uriTemplate
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param array $header Header to build
 * @return string Header built from array
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param string|array $query A query string to parse into an array or an array to return directly \"as is\"
 * @return array The $query parsed into a possibly multi-level array. If an empty $query is given, an empty array is returned.
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param array $request Needs to contain a \'uri\' key. Should also contain a \'method\' key, otherwise defaults to GET.
 * @param string $versionToken The version token to use, defaults to HTTP/1.1
 * @return string Request line
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param boolean $hex true to get them as HEX values, false otherwise
 * @return array Escape chars
 */",
 "/**
 * Convenience method for testing protected method
 *
 * @param string $token Token to escape
 * @return string Escaped token
 */",
 "/**
 * TestHttpSocket
 *
 */",
 "/**
 * This function sets up a TestHttpSocket instance we are going to use for testing
 *
 * @return void
 */",
 "/**
 * We use this function to clean up after the test case was executed
 *
 * @return void
 */",
 "/**
 * Test that HttpSocket::__construct does what one would expect it to do
 *
 * @return void
 */",
 "/**
 * Test that HttpSocket::configUri works properly with different types of arguments
 *
 * @return void
 */",
 "/**
 * Tests that HttpSocket::request (the heart of the HttpSocket) is working properly.
 *
 * @return void
 */",
 "/**
 * Test the scheme + port keys
 *
 * @return void
 */",
 "/**
 * Test urls like http://cakephp.org/index.php?somestring without key/value pair for query
 *
 * @return void
 */",
 "/**
 * The \"*\" asterisk character is only allowed for the following methods: OPTIONS.
 *
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * testRequest2 method
 *
 * @return void
 */",
 "/**
 * testRequest3 method
 *
 * @return void
 */",
 "/**
 * testRequestWithConstructor method
 *
 * @return void
 */",
 "/**
 * testRequestWithResource
 *
 * @return void
 */",
 "/**
 * testRequestWithCrossCookie
 *
 * @return void
 */",
 "/**
 * testRequestCustomResponse
 *
 * @return void
 */",
 "/**
 * testRequestWithRedirect method
 *
 * @return void
 */",
 "/**
 * testProxy method
 *
 * @return void
 */",
 "/**
 * testUrl method
 *
 * @return void
 */",
 "/**
 * testGet method
 *
 * @return void
 */",
 "/**
 * Test authentication
 *
 * @return void
 */",
 "/**
 * test that two consecutive get() calls reset the authentication credentials.
 *
 * @return void
 */",
 "/**
 * testPostPutDelete method
 *
 * @return void
 */",
 "/**
 * testPut
 *
 * @return void
 */",
 "/**
 * testDelete
 *
 * @return void
 */",
 "/**
 * testBuildRequestLine method
 *
 * @return void
 */",
 "/**
 * testBadBuildRequestLine method
 *
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * testBadBuildRequestLine2 method
 *
 * @expectedException SocketException
 * @return void
 */",
 "/**
 * Asserts that HttpSocket::parseUri is working properly
 *
 * @return void
 */",
 "/**
 * Tests that HttpSocket::buildUri can turn all kinds of uri arrays (and strings) into fully or partially qualified URI\'s
 *
 * @return void
 */",
 "/**
 * Asserts that HttpSocket::parseQuery is working properly
 *
 * @return void
 */",
 "/**
 * Tests that HttpSocket::buildHeader can turn a given $header array into a proper header string according to
 * HTTP 1.1 specs.
 *
 * @return void
 */",
 "/**
 * testBuildCookies method
 *
 * @return void
 * @todo Test more scenarios
 */",
 "/**
 * Tests that HttpSocket::_tokenEscapeChars() returns the right characters.
 *
 * @return void
 */",
 "/**
 * Test that HttpSocket::escapeToken is escaping all characters as described in RFC 2616 (HTTP 1.1 specs)
 *
 * @return void
 */",
 "/**
 * This tests asserts HttpSocket::reset() resets a HttpSocket instance to it\'s initial state (before Object::__construct
 * got executed)
 *
 * @return void
 */",
 "/**
 * This tests asserts HttpSocket::reset(false) resets certain HttpSocket properties to their initial state (before
 * Object::__construct got executed).
 *
 * @return void
 */",
 "/**
 * HttpSocketTest class
 *
 * @package       Cake.Test.Case.Network.Http
 */",
 "/**
 * say_hello method
 *
 * @return void
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPluginTwo.Console.Command
 * @since         CakePHP(tm) v 1.2.0.7871
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * testNumericKeyExtraction method
 *
 * @return void
 */",
 "/**
 * testEnum method
 *
 * @return void
 */",
 "/**
 * testFilter method
 *
 * @see Hash test cases, as Set::filter() is just a proxy.
 * @return void
 */",
 "/**
 * testNumericArrayCheck method
 *
 * @see Hash test cases, as Set::numeric() is just a proxy.
 * @return void
 */",
 "/**
 * testKeyCheck method
 *
 * @return void
 */",
 "/**
 * testMerge method
 *
 * @return void
 */",
 "/**
 * testSort method
 *
 * @return void
 */",
 "/**
 * test sorting with string keys.
 *
 * @return void
 */",
 "/**
 * test sorting with out of order keys.
 *
 * @return void
 */",
 "/**
 * testExtract method
 *
 * @return void
 */",
 "/**
 * test parent selectors with extract
 *
 * @return void
 */",
 "/**
 * test that extract() still works when arrays don\'t contain a 0 index.
 *
 * @return void
 */",
 "/**
 * testExtractWithArrays method
 *
 * @return void
 */",
 "/**
 * test extract() with elements that have non-array children.
 *
 * @return void
 */",
 "/**
 * Test that extract() + matching can hit null things.
 */",
 "/**
 * testMatches method
 *
 * @return void
 */",
 "/**
 * testSetExtractReturnsEmptyArray method
 *
 * @return void
 */",
 "/**
 * testClassicExtract method
 *
 * @return void
 */",
 "/**
 * test classicExtract with keys that exceed 32bit max int.
 *
 * @return void
 */",
 "/**
 * testInsert method
 *
 * @see Hash tests, as Set::insert() is just a proxy.
 * @return void
 */",
 "/**
 * testRemove method
 *
 * @return void
 */",
 "/**
 * testCheck method
 *
 * @return void
 */",
 "/**
 * testWritingWithFunkyKeys method
 *
 * @return void
 */",
 "/**
 * testDiff method
 *
 * @return void
 */",
 "/**
 * testContains method
 *
 * @return void
 */",
 "/**
 * testCombine method
 *
 * @return void
 */",
 "/**
 * testMapReverse method
 *
 * @return void
 */",
 "/**
 * testFormatting method
 *
 * @return void
 */",
 "/**
 * testFormattingNullValues method
 *
 * @return void
 */",
 "/**
 * testCountDim method
 *
 * @return void
 */",
 "/**
 * testMapNesting method
 *
 * @return void
 */",
 "/**
 * testNestedMappedData method
 *
 * @return void
 */",
 "/**
 * testPushDiff method
 *
 * @return void
 */",
 "/**
 * testSetApply method
 * @return void
 *
 */",
 "/**
 * Helper method to test Set::apply()
 *
 * @return void
 */",
 "/**
 * testXmlSetReverse method
 *
 * @return void
 */",
 "/**
 * testStrictKeyCheck method
 *
 * @return void
 */",
 "/**
 * Tests Set::flatten
 *
 * @return void
 */",
 "/**
 * Tests Set::expand
 *
 * @return void
 */",
 "/**
 * test normalization
 *
 * @return void
 */",
 "/**
 * test normalizing arrays
 *
 * @return void
 */",
 "/**
 * test Set nest with a normal model result set. For kicks rely on Set nest detecting the key names
 * automatically
 *
 * @return void
 */",
 "/**
 * test Set nest with a normal model result set, and a nominated root id
 *
 * @return void
 */",
 "/**
 * test Set nest with a 1d array - this method should be able to handle any type of array input
 *
 * @return void
 */",
 "/**
 * test Set nest with no specified parent data.
 *
 * The result should be the same as the input.
 * For an easier comparison, unset all the empty children arrays from the result
 *
 * @return void
 */",
 "/**
 * SetTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Short description for class.
 *
 * @package       cake
 * @subpackage    cake.tests.fixtures
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Test Suite TestPlugin config file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Config
 * @since         CakePHP(tm) v 1.3
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test that asset filters work for theme and plugin assets
 *
 * @return void
 */",
 "/**
 * Tests that $response->checkNotModified() is called and bypasses
 * file dispatching
 *
 * @return void
 */",
 "/**
 * Behavior to allow for dynamic and atomic manipulation of a Model\'s associations used for a find call. Most useful for limiting
 * the amount of associations and data returned.
 *
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Model.Behavior
 */",
 "/**
 * Sets the plugins folder for this test
 *
 * @return void
 */",
 "/**
 * Reverts the changes done to the environment while testing
 *
 * @return void
 */",
 "/**
 * Tests loading a single plugin
 *
 * @return void
 */",
 "/**
 * Tests unloading plugins
 *
 * @return void
 */",
 "/**
 * Tests loading a plugin and its bootstrap file
 *
 * @return void
 */",
 "/**
 * Tests loading a plugin with bootstrap file and routes file
 *
 * @return void
 */",
 "/**
 * Tests loading multiple plugins at once
 *
 * @return void
 */",
 "/**
 * Tests loading multiple plugins and their bootstrap files
 *
 * @return void
 */",
 "/**
 * Tests loading multiple plugins with default loading params and some overrides
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to load multiple bootstrap files at once
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to load plugin bootstrap by calling a callback function
 *
 * @return void
 */",
 "/**
 * Tests that loading a missing routes file throws a warning
 *
 * @return void
 * @expectedException PHPUNIT_FRAMEWORK_ERROR_WARNING
 */",
 "/**
 * Tests that CakePlugin::load() throws an exception on unknown plugin
 *
 * @return void
 * @expectedException MissingPluginException
 */",
 "/**
 * Tests that CakePlugin::path() returns the correct path for the loaded plugins
 *
 * @return void
 */",
 "/**
 * Tests that CakePlugin::path() throws an exception on unknown plugin
 *
 * @return void
 * @expectedException MissingPluginException
 */",
 "/**
 * Tests that CakePlugin::loadAll() will load all plugins in the configured folder
 *
 * @return void
 */",
 "/**
 * Tests that CakePlugin::loadAll() will load all plugins in the configured folder with bootstrap loading
 *
 * @return void
 */",
 "/**
 * Tests that CakePlugin::loadAll() will load all plugins in the configured folder wit defaults
 * and overrides for a plugin
 *
 * @return void
 */",
 "/**
 * Auxiliary function to test plugin bootstrap callbacks
 *
 * @return void
 */",
 "/**
 * CakePluginTest class
 *
 */",
 "/**
 * Command-line code generation utility to automate programmer chores.
 *
 * PHP 5
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc.
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Console
 * @since         CakePHP(tm) v 2.0
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Controller.Component
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Make a new Subcommand
 *
 * @param string|array $name The long name of the subcommand, or an array with all the properties.
 * @param string $help The help text for this option
 * @param ConsoleOptionParser|array $parser A parser for this subcommand. Either a ConsoleOptionParser, or an array that can be
 *   used with ConsoleOptionParser::buildFromArray()
 */",
 "/**
 * Get the value of the name attribute.
 *
 * @return string Value of this->_name.
 */",
 "/**
 * Generate the help for this this subcommand.
 *
 * @param integer $width The width to make the name of the subcommand.
 * @return string
 */",
 "/**
 * Get the usage value for this option
 *
 * @return mixed Either false or a ConsoleOptionParser
 */",
 "/**
 * Append this subcommand to the Parent element
 *
 * @param SimpleXmlElement $parent The parent element.
 * @return SimpleXmlElement The parent with this subcommand appended.
 */",
 "/**
 * An object to represent a single subcommand used in the command line.
 * Created when you call ConsoleOptionParser::addSubcommand()
 *
 * @see ConsoleOptionParser::addSubcommand()
 * @package       Cake.Console
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * PaginatorTestController class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * beforeFind method
 *
 * @param mixed $query
 * @return void
 */",
 "/**
 * find method
 *
 * @param mixed $type
 * @param array $options
 * @return void
 */",
 "/**
 * PaginatorControllerPost class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * paginate method
 *
 * @return void
 */",
 "/**
 * paginateCount
 *
 * @return void
 */",
 "/**
 * ControllerPaginateModel class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * PaginatorControllerComment class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * PaginatorAuthor class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * _findPublished custom find
 *
 * @return array
 */",
 "/**
 * _findTotals custom find
 *
 * @return array
 */",
 "/**
 * _findTotalsOperation custom find
 *
 * @return array
 */",
 "/**
 * PaginatorCustomPost class
 *
 * @package       Cake.Test.Case.Controller.Component
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * testPaginate method
 *
 * @return void
 */",
 "/**
 * Test that non-numeric values are rejected for page, and limit
 *
 * @return void
 */",
 "/**
 * testPaginateExtraParams method
 *
 * @return void
 */",
 "/**
 * Test that special paginate types are called and that the type param doesn\'t leak out into defaults or options.
 *
 * @return void
 */",
 "/**
 * testDefaultPaginateParams method
 *
 * @return void
 */",
 "/**
 * test paginate() and virtualField interactions
 *
 * @return void
 */",
 "/**
 * test paginate() and virtualField on joined model
 *
 * @return void
 */",
 "/**
 * Tests for missing models
 *
 * @expectedException MissingModelException
 */",
 "/**
 * test that option merging prefers specific models
 *
 * @return void
 */",
 "/**
 * test mergeOptions with named params.
 *
 * @return void
 */",
 "/**
 * test merging options from the querystring.
 *
 * @return void
 */",
 "/**
 * test that the default whitelist doesn\'t let people screw with things they should not be allowed to.
 *
 * @return void
 */",
 "/**
 * test that modifying the whitelist works.
 *
 * @return void
 */",
 "/**
 * test that invalid directions are ignored.
 *
 * @return void
 */",
 "/**
 * Test that a really large page number gets clamped to the max page size.
 */",
 "/**
 * test that fields not in whitelist won\'t be part of order conditions.
 *
 * @return void
 */",
 "/**
 * test that virtual fields work.
 *
 * @return void
 */",
 "/**
 * test that multiple sort works.
 *
 * @return void
 */",
 "/**
 * Test that no sort doesn\'t trigger an error.
 *
 * @return void
 */",
 "/**
 * test that maxLimit is respected
 *
 * @return void
 */",
 "/**
 * testPaginateMaxLimit
 *
 * @return void
 */",
 "/**
 * test paginate() and virtualField overlapping with real fields.
 *
 * @return void
 */",
 "/**
 * test paginate() and custom find, to make sure the correct count is returned.
 *
 * @return void
 */",
 "/**
 * test paginate() and custom find with fields array, to make sure the correct count is returned.
 *
 * @return void
 */",
 "/**
 * test paginate() and custom find with fields array, to make sure the correct count is returned.
 *
 * @return void
 */",
 "/**
 * test paginate() and custom find with returning other query on count operation,
 * to make sure the correct count is returned.
 *
 * @return void
 */",
 "/**
 * Returns a list of events this object is implementing, when the class is registered
 * in an event manager, each individual method will be associated to the respective event.
 *
 * ## Example:
 *
 * {{{
 *	public function implementedEvents() {
 *		return array(
 *			\'Order.complete\' => \'sendEmail\',
 *			\'Article.afterBuy\' => \'decrementInventory\',
 *			\'User.onRegister\' => array(\'callable\' => \'logRegistration\', \'priority\' => 20, \'passParams\' => true)
 *		);
 *	}
 * }}}
 *
 * @return array associative array or event key names pointing to the function
 * that should be called in the object when the respective event is fired
 */",
 "/**
 * Objects implementing this interface should declare the `implementedEvents` function
 * to hint the event manager what methods should be called when an event is triggered.
 *
 * @package Cake.Event
 */",
 "/**
 * Find position of first occurrence of a case-insensitive string.
 *
 * @param string $haystack The string from which to get the position of the first occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param integer $offset The position in $haystack to start searching.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return integer|boolean The numeric position of the first occurrence of $needle in the $haystack string, or false
 *    if $needle is not found.
 */",
 "/**
 * Finds first occurrence of a string within another, case insensitive.
 *
 * @param string $haystack The string from which to get the first occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param boolean $part Determines which portion of $haystack this function returns.
 *    If set to true, it returns all of $haystack from the beginning to the first occurrence of $needle.
 *    If set to false, it returns all of $haystack from the first occurrence of $needle to the end,
 *    Default value is false.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return string|boolean The portion of $haystack, or false if $needle is not found.
 */",
 "/**
 * Get string length.
 *
 * @param string $string The string being checked for length.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return integer The number of characters in string $string having character encoding encoding.
 *    A multi-byte character is counted as 1.
 */",
 "/**
 * Find position of first occurrence of a string.
 *
 * @param string $haystack The string being checked.
 * @param string $needle The position counted from the beginning of haystack.
 * @param integer $offset The search offset. If it is not specified, 0 is used.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return integer|boolean The numeric position of the first occurrence of $needle in the $haystack string.
 *    If $needle is not found, it returns false.
 */",
 "/**
 * Finds the last occurrence of a character in a string within another.
 *
 * @param string $haystack The string from which to get the last occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param boolean $part Determines which portion of $haystack this function returns.
 *    If set to true, it returns all of $haystack from the beginning to the last occurrence of $needle.
 *    If set to false, it returns all of $haystack from the last occurrence of $needle to the end,
 *    Default value is false.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return string|boolean The portion of $haystack. or false if $needle is not found.
 */",
 "/**
 * Finds the last occurrence of a character in a string within another, case insensitive.
 *
 * @param string $haystack The string from which to get the last occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param boolean $part Determines which portion of $haystack this function returns.
 *    If set to true, it returns all of $haystack from the beginning to the last occurrence of $needle.
 *    If set to false, it returns all of $haystack from the last occurrence of $needle to the end,
 *    Default value is false.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return string|boolean The portion of $haystack. or false if $needle is not found.
 */",
 "/**
 * Finds position of last occurrence of a string within another, case insensitive
 *
 * @param string $haystack The string from which to get the position of the last occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param integer $offset The position in $haystack to start searching.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return integer|boolean The numeric position of the last occurrence of $needle in the $haystack string,
 *    or false if $needle is not found.
 */",
 "/**
 * Find position of last occurrence of a string in a string.
 *
 * @param string $haystack The string being checked, for the last occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param integer $offset May be specified to begin searching an arbitrary number of characters into the string.
 *    Negative values will stop searching at an arbitrary point prior to the end of the string.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return integer|boolean The numeric position of the last occurrence of $needle in the $haystack string.
 *    If $needle is not found, it returns false.
 */",
 "/**
 * Finds first occurrence of a string within another
 *
 * @param string $haystack The string from which to get the first occurrence of $needle.
 * @param string $needle The string to find in $haystack
 * @param boolean $part Determines which portion of $haystack this function returns.
 *    If set to true, it returns all of $haystack from the beginning to the first occurrence of $needle.
 *    If set to false, it returns all of $haystack from the first occurrence of $needle to the end,
 *    Default value is FALSE.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return string|boolean The portion of $haystack, or true if $needle is not found.
 */",
 "/**
 * Make a string lowercase
 *
 * @param string $string The string being lowercased.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return string with all alphabetic characters converted to lowercase.
 */",
 "/**
 * Make a string uppercase
 *
 * @param string $string The string being uppercased.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return string with all alphabetic characters converted to uppercase.
 */",
 "/**
 * Count the number of substring occurrences
 *
 * @param string $haystack The string being checked.
 * @param string $needle The string being found.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return integer The number of times the $needle substring occurs in the $haystack string.
 */",
 "/**
 * Get part of string
 *
 * @param string $string The string being checked.
 * @param integer $start The first position used in $string.
 * @param integer $length The maximum length of the returned string.
 * @param string $encoding Character encoding name to use. If it is omitted, internal character encoding is used.
 * @return string The portion of $string specified by the $string and $length parameters.
 */",
 "/**
 * Encode string for MIME header
 *
 * @param string $str The string being encoded
 * @param string $charset specifies the name of the character set in which str is represented in.
 *    The default value is determined by the current NLS setting (mbstring.language).
 * @param string $transfer_encoding specifies the scheme of MIME encoding.
 *    It should be either \"B\" (Base64) or \"Q\" (Quoted-Printable). Falls back to \"B\" if not given.
 * @param string $linefeed specifies the EOL (end-of-line) marker with which
 *    mb_encode_mimeheader() performs line-folding
 *    (a ?? RFC term, the act of breaking a line longer than a certain length into multiple lines.
 *    The length is currently hard-coded to 74 characters). Falls back to \"\r\n\" (CRLF) if not given.
 * @param integer $indent [definition unknown and appears to have no affect]
 * @return string A converted version of the string represented in ASCII.
 */",
 "/**
 * Converts a multibyte character string
 * to the decimal value of the character
 *
 * @param string $string
 * @return array
 */",
 "/**
 * Converts the decimal value of a multibyte character string
 * to a string
 *
 * @param array $array
 * @return string
 */",
 "/**
 * Find position of first occurrence of a case-insensitive string.
 *
 * @param string $haystack The string from which to get the position of the first occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param integer $offset The position in $haystack to start searching.
 * @return integer|boolean The numeric position of the first occurrence of $needle in the $haystack string,
 *    or false if $needle is not found.
 */",
 "/**
 * Finds first occurrence of a string within another, case insensitive.
 *
 * @param string $haystack The string from which to get the first occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param boolean $part Determines which portion of $haystack this function returns.
 *    If set to true, it returns all of $haystack from the beginning to the first occurrence of $needle.
 *    If set to false, it returns all of $haystack from the first occurrence of $needle to the end,
 *    Default value is false.
 * @return integer|boolean The portion of $haystack, or false if $needle is not found.
 */",
 "/**
 * Get string length.
 *
 * @param string $string The string being checked for length.
 * @return integer The number of characters in string $string
 */",
 "/**
 * Find position of first occurrence of a string.
 *
 * @param string $haystack The string being checked.
 * @param string $needle The position counted from the beginning of haystack.
 * @param integer $offset The search offset. If it is not specified, 0 is used.
 * @return integer|boolean The numeric position of the first occurrence of $needle in the $haystack string.
 *    If $needle is not found, it returns false.
 */",
 "/**
 * Finds the last occurrence of a character in a string within another.
 *
 * @param string $haystack The string from which to get the last occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param boolean $part Determines which portion of $haystack this function returns.
 *    If set to true, it returns all of $haystack from the beginning to the last occurrence of $needle.
 *    If set to false, it returns all of $haystack from the last occurrence of $needle to the end,
 *    Default value is false.
 * @return string|boolean The portion of $haystack. or false if $needle is not found.
 */",
 "/**
 * Finds the last occurrence of a character in a string within another, case insensitive.
 *
 * @param string $haystack The string from which to get the last occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param boolean $part Determines which portion of $haystack this function returns.
 *    If set to true, it returns all of $haystack from the beginning to the last occurrence of $needle.
 *    If set to false, it returns all of $haystack from the last occurrence of $needle to the end,
 *    Default value is false.
 * @return string|boolean The portion of $haystack. or false if $needle is not found.
 */",
 "/**
 * Finds position of last occurrence of a string within another, case insensitive
 *
 * @param string $haystack The string from which to get the position of the last occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param integer $offset The position in $haystack to start searching.
 * @return integer|boolean The numeric position of the last occurrence of $needle in the $haystack string,
 *    or false if $needle is not found.
 */",
 "/**
 * Find position of last occurrence of a string in a string.
 *
 * @param string $haystack The string being checked, for the last occurrence of $needle.
 * @param string $needle The string to find in $haystack.
 * @param integer $offset May be specified to begin searching an arbitrary number of characters into the string.
 *    Negative values will stop searching at an arbitrary point prior to the end of the string.
 * @return integer|boolean The numeric position of the last occurrence of $needle in the $haystack string.
 *    If $needle is not found, it returns false.
 */",
 "/**
 * Finds first occurrence of a string within another
 *
 * @param string $haystack The string from which to get the first occurrence of $needle.
 * @param string $needle The string to find in $haystack
 * @param boolean $part Determines which portion of $haystack this function returns.
 *    If set to true, it returns all of $haystack from the beginning to the first occurrence of $needle.
 *    If set to false, it returns all of $haystack from the first occurrence of $needle to the end,
 *    Default value is FALSE.
 * @return string|boolean The portion of $haystack, or true if $needle is not found.
 */",
 "/**
 * Make a string lowercase
 *
 * @param string $string The string being lowercased.
 * @return string with all alphabetic characters converted to lowercase.
 */",
 "/**
 * Make a string uppercase
 *
 * @param string $string The string being uppercased.
 * @return string with all alphabetic characters converted to uppercase.
 */",
 "/**
 * Count the number of substring occurrences
 *
 * @param string $haystack The string being checked.
 * @param string $needle The string being found.
 * @return integer The number of times the $needle substring occurs in the $haystack string.
 */",
 "/**
 * Get part of string
 *
 * @param string $string The string being checked.
 * @param integer $start The first position used in $string.
 * @param integer $length The maximum length of the returned string.
 * @return string The portion of $string specified by the $string and $length parameters.
 */",
 "/**
 * Prepare a string for mail transport, using the provided encoding
 *
 * @param string $string value to encode
 * @param string $charset charset to use for encoding. defaults to UTF-8
 * @param string $newline
 * @return string
 * @TODO: add support for \'Q\'(\'Quoted Printable\') encoding
 */",
 "/**
 * Return the Code points range for Unicode characters
 *
 * @param integer $decimal
 * @return string
 */",
 "/**
 * Find the related code folding values for $char
 *
 * @param integer $char decimal value of character
 * @param string $type
 * @return array
 */",
 "/**
 * Check the $string for multibyte characters
 * @param string $string value to test
 * @return boolean
 */",
 "/**
 * Multibyte handling methods.
 *
 * @package       Cake.I18n
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testTranslationCaching method
 *
 * @return void
 */",
 "/**
 * testDefaultStrings method
 *
 * @return void
 */",
 "/**
 * testPoRulesZero method
 *
 * @return void
 */",
 "/**
 * testMoRulesZero method
 *
 * @return void
 */",
 "/**
 * Assertions for rules zero.
 *
 * @return
 */",
 "/**
 * testPoRulesOne method
 *
 * @return void
 */",
 "/**
 * testMoRulesOne method
 *
 * @return void
 */",
 "/**
 * Assertions for plural rule one
 *
 * @return void
 */",
 "/**
 * testMoRulesTwo method
 *
 * @return void
 */",
 "/**
 * testPoRulesTwo method
 *
 * @return void
 */",
 "/**
 * Assertions for rules Two
 *
 * @return void
 */",
 "/**
 * testPoRulesThree method
 *
 * @return void
 */",
 "/**
 * testMoRulesThree method
 *
 * @return void
 */",
 "/**
 * Assert rules for plural three.
 *
 * @return void
 */",
 "/**
 * testPoRulesFour method
 *
 * @return void
 */",
 "/**
 * testMoRulesFour method
 *
 * @return void
 */",
 "/**
 * Run the assertions for Rule 4 plurals.
 *
 * @return void
 */",
 "/**
 * testPoRulesFive method
 *
 * @return void
 */",
 "/**
 * testMoRulesFive method
 *
 * @return void
 */",
 "/**
 * Run the assertions for rule 5 plurals
 *
 * @return void
 */",
 "/**
 * testPoRulesSix method
 *
 * @return void
 */",
 "/**
 * testMoRulesSix method
 *
 * @return void
 */",
 "/**
 * Assertions for the sixth plural rules.
 *
 * @return void
 */",
 "/**
 * testPoRulesSeven method
 *
 * @return void
 */",
 "/**
 * testMoRulesSeven method
 *
 * @return void
 */",
 "/**
 * Run assertions for seventh plural rules
 *
 * @return void
 */",
 "/**
 * testPoRulesEight method
 *
 * @return void
 */",
 "/**
 * testMoRulesEight method
 *
 * @return void
 */",
 "/**
 * Run assertions for the eighth plural rule.
 *
 * @return void
 */",
 "/**
 * testPoRulesNine method
 *
 * @return void
 */",
 "/**
 * testMoRulesNine method
 *
 * @return void
 */",
 "/**
 * Assert plural rules nine
 *
 * @return void
 */",
 "/**
 * testPoRulesTen method
 *
 * @return void
 */",
 "/**
 * testMoRulesTen method
 *
 * @return void
 */",
 "/**
 * Assertions for plural rules 10
 *
 * @return void
 */",
 "/**
 * testPoRulesEleven method
 *
 * @return void
 */",
 "/**
 * testMoRulesEleven method
 *
 * @return void
 */",
 "/**
 * Assertions for plural rules eleven
 *
 * @return void
 */",
 "/**
 * testPoRulesTwelve method
 *
 * @return void
 */",
 "/**
 * testMoRulesTwelve method
 *
 * @return void
 */",
 "/**
 * Assertions for plural rules twelve
 *
 * @return void
 */",
 "/**
 * testMoRulesThirteen method
 *
 * @return void
 */",
 "/**
 * testPoRulesThirteen method
 *
 * @return void
 */",
 "/**
 * Assertions for plural rules thirteen
 *
 * @return void
 */",
 "/**
 * testMoRulesFourteen method
 *
 * @return void
 */",
 "/**
 * testPoRulesFourteen method
 *
 * @return void
 */",
 "/**
 * Assertions for plural rules fourteen
 *
 * @return void
 */",
 "/**
 * testSetLanguageWithSession method
 *
 * @return void
 */",
 "/**
 * testNoCoreTranslation method
 *
 * @return void
 */",
 "/**
 * testPluginTranslation method
 *
 * @return void
 */",
 "/**
 * testPoMultipleLineTranslation method
 *
 * @return void
 */",
 "/**
 * testPoNoTranslationNeeded method
 *
 * @return void
 */",
 "/**
 * testPoQuotedString method
 *
 * @return void
 */",
 "/**
 * testFloatValue method
 *
 * @return void
 */",
 "/**
 * testCategory method
 *
 * @return void
 */",
 "/**
 * testPluginCategory method
 *
 * @return void
 */",
 "/**
 * testCategoryThenSingular method
 *
 * @return void
 */",
 "/**
 * testTimeDefinition method
 *
 * @return void
 */",
 "/**
 * testTimeDefinitionJapanese method
 *
 * @return void
 */",
 "/**
 * testTranslateLanguageParam method
 *
 * @return void
 */",
 "/**
 * Singular method
 *
 * @return void
 */",
 "/**
 * Plural method
 *
 * @return void
 */",
 "/**
 * Singular method
 *
 * @return void
 */",
 "/**
 * Plural method
 *
 * @return void
 */",
 "/**
 * category method
 *
 * @return void
 */",
 "/**
 * Singular method
 *
 * @return void
 */",
 "/**
 * Plural method
 *
 * @return void
 */",
 "/**
 * singularFromCore method
 *
 * @return void
 */",
 "/**
 * pluralFromCore method
 *
 * @return void
 */",
 "/**
 * I18nTest class
 *
 * @package       Cake.Test.Case.I18n
 */",
 "/**
 * Setup for tests
 *
 * @return void
 */",
 "/**
 * Cleanup after tests
 *
 * @return void
 */",
 "/**
 * Tests the request object constructor
 *
 */",
 "/**
 * Tests the body method
 *
 */",
 "/**
 * Tests the charset method
 *
 */",
 "/**
 * Tests the statusCode method
 *
 * @expectedException CakeException
 */",
 "/**
 * Tests the type method
 *
 */",
 "/**
 * Tests the header method
 *
 */",
 "/**
 * Tests the send method
 *
 */",
 "/**
 * Tests the send method and changing the content type
 *
 */",
 "/**
 * Tests the send method and changing the content type
 *
 */",
 "/**
 * Tests the send method and changing the content type
 *
 */",
 "/**
 * Tests the disableCache method
 *
 */",
 "/**
 * Tests the cache method
 *
 */",
 "/**
 * Tests the compress method
 *
 * @return void
 */",
 "/**
 * Tests the httpCodes method
 *
 */",
 "/**
 * Tests the download method
 *
 */",
 "/**
 * Tests the mapType method
 *
 */",
 "/**
 * Tests the outputCompressed method
 *
 */",
 "/**
 * Tests the send and setting of Content-Length
 *
 */",
 "/**
 * Tests getting/setting the protocol
 *
 * @return void
 */",
 "/**
 * Tests getting/setting the Content-Length
 *
 * @return void
 */",
 "/**
 * Tests that the response body is unset if the status code is 304 or 204
 *
 * @return void
 */",
 "/**
 * Tests setting the expiration date
 *
 * @return void
 */",
 "/**
 * Tests setting the modification date
 *
 * @return void
 */",
 "/**
 * Tests setting of public/private Cache-Control directives
 *
 * @return void
 */",
 "/**
 * Tests setting of max-age Cache-Control directive
 *
 * @return void
 */",
 "/**
 * Tests setting of s-maxage Cache-Control directive
 *
 * @return void
 */",
 "/**
 * Tests setting of must-revalidate Cache-Control directive
 *
 * @return void
 */",
 "/**
 * Tests getting/setting the Vary header
 *
 * @return void
 */",
 "/**
 * Tests getting/setting the Etag header
 *
 * @return void
 */",
 "/**
 * Tests that the response is able to be marked as not modified
 *
 * @return void
 */",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test checkNotModified method
 *
 * @return void
 **/",
 "/**
 * Test cookie setting
 *
 * @return void
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllConsoleTest class
 *
 * This test group will run all console classes.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Connects the default, built-in routes, including prefix and plugin routes. The following routes are created
 * in the order below:
 *
 * For each of the Routing.prefixes the following routes are created. Routes containing `:plugin` are only
 * created when your application has one or more plugins.
 *
 * - `/:prefix/:plugin` a plugin shortcut route.
 * - `/:prefix/:plugin/:action/*` a plugin shortcut route.
 * - `/:prefix/:plugin/:controller`
 * - `/:prefix/:plugin/:controller/:action/*`
 * - `/:prefix/:controller`
 * - `/:prefix/:controller/:action/*`
 *
 * If plugins are found in your application the following routes are created:
 *
 * - `/:plugin` a plugin shortcut route.
 * - `/:plugin/:action/*` a plugin shortcut route.
 * - `/:plugin/:controller`
 * - `/:plugin/:controller/:action/*`
 *
 * And lastly the following catch-all routes are connected.
 *
 * - `/:controller\'
 * - `/:controller/:action/*\'
 *
 * You can disable the connection of default routes by deleting the require inside APP/Config/routes.php.
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * test applying settings in the constructor
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test that challenge headers are sent when no credentials are found.
 *
 * @return void
 */",
 "/**
 * test authenticate sucesss
 *
 * @return void
 */",
 "/**
 * test scope failure.
 *
 * @return void
 */",
 "/**
 * Test case for BasicAuthentication
 *
 * @package       Cake.Test.Case.Controller.Component.Auth
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.View.Helper
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Build the help formatter for a an OptionParser
 *
 * @param ConsoleOptionParser $parser The option parser help is being generated for.
 */",
 "/**
 * Get the help as formatted text suitable for output on the command line.
 *
 * @param integer $width The width of the help output.
 * @return string
 */",
 "/**
 * Generate the usage for a shell based on its arguments and options.
 * Usage strings favor short options over the long ones. and optional args will
 * be indicated with []
 *
 * @return string
 */",
 "/**
 * Iterate over a collection and find the longest named thing.
 *
 * @param array $collection
 * @return integer
 */",
 "/**
 * Get the help as an xml string.
 *
 * @param boolean $string Return the SimpleXml object or a string.  Defaults to true.
 * @return mixed. See $string
 */",
 "/**
 * HelpFormatter formats help for console shells.  Can format to either
 * text or XML formats.  Uses ConsoleOptionParser methods to generate help.
 *
 * Generally not directly used. Using $parser->help($command, \'xml\'); is usually
 * how you would access help.  Or via the `--help=xml` option on the command line.
 *
 * Xml output is useful for integration with other tools like IDE\'s or other build tools.
 *
 * @package       Cake.Console
 * @since  CakePHP(tm) v 2.0
 */",
 "/**
 * Make a new Input Option
 *
 * @param string|array $name The long name of the option, or an array with all the properties.
 * @param string $short The short alias for this option
 * @param string $help The help text for this option
 * @param boolean $boolean Whether this option is a boolean option.  Boolean options don\'t consume extra tokens
 * @param string $default The default value for this option.
 * @param array $choices Valid choices for this option.
 * @throws ConsoleException
 */",
 "/**
 * Get the value of the name attribute.
 *
 * @return string Value of this->_name.
 */",
 "/**
 * Get the value of the short attribute.
 *
 * @return string Value of this->_short.
 */",
 "/**
 * Generate the help for this this option.
 *
 * @param integer $width The width to make the name of the option.
 * @return string
 */",
 "/**
 * Get the usage value for this option
 *
 * @return string
 */",
 "/**
 * Get the default value for this option
 *
 * @return mixed
 */",
 "/**
 * Check if this option is a boolean option
 *
 * @return boolean
 */",
 "/**
 * Check that a value is a valid choice for this option.
 *
 * @param string $value
 * @return boolean
 * @throws ConsoleException
 */",
 "/**
 * Append the option\'s xml into the parent.
 *
 * @param SimpleXmlElement $parent The parent element.
 * @return SimpleXmlElement The parent with this option appended.
 */",
 "/**
 * An object to represent a single option used in the command line.
 * ConsoleOptionParser creates these when you use addOption()
 *
 * @see ConsoleOptionParser::addOption()
 * @package       Cake.Console
 */",
 "/**
 * Constructor
 *
 * @param string $path Path to file
 * @param boolean $create Create file if it does not exist (if true)
 * @param integer $mode Mode to apply to the folder holding the file
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File
 */",
 "/**
 * Closes the current file if it is opened
 *
 */",
 "/**
 * Creates the File.
 *
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::create
 */",
 "/**
 * Opens the current file with a given $mode
 *
 * @param string $mode A valid \'fopen\' mode string (r|w|a ...)
 * @param boolean $force If true then the file will be re-opened even if its already opened, otherwise it won\'t
 * @return boolean True on success, false on failure
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::open
 */",
 "/**
 * Return the contents of this File as a string.
 *
 * @param string $bytes where to start
 * @param string $mode A `fread` compatible mode.
 * @param boolean $force If true then the file will be re-opened even if its already opened, otherwise it won\'t
 * @return mixed string on success, false on failure
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::read
 */",
 "/**
 * Sets or gets the offset for the currently opened file.
 *
 * @param integer|boolean $offset The $offset in bytes to seek. If set to false then the current offset is returned.
 * @param integer $seek PHP Constant SEEK_SET | SEEK_CUR | SEEK_END determining what the $offset is relative to
 * @return mixed True on success, false on failure (set mode), false on failure or integer offset on success (get mode)
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::offset
 */",
 "/**
*Preparesaasciistringforwriting.Convertslineendingstothe
*correctterminatorforthecurrentplatform.Ifwindows\"\r\n\" will be used
 * all other platforms will use \"\n\"
 *
 * @param string $data Data to prepare for writing.
 * @param boolean $forceWindows
 * @return string The with converted line endings.
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::prepare
 */",
 "/**
 * Write given data to this File.
 *
 * @param string $data Data to write to this File.
 * @param string $mode Mode of writing. {@link http://php.net/fwrite See fwrite()}.
 * @param string $force force the file to open
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::write
 */",
 "/**
 * Append given data string to this File.
 *
 * @param string $data Data to write
 * @param string $force force the file to open
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::append
 */",
 "/**
 * Closes the current file if it is opened.
 *
 * @return boolean True if closing was successful or file was already closed, otherwise false
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::close
 */",
 "/**
 * Deletes the File.
 *
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::delete
 */",
 "/**
 * Returns the File info as an array with the following keys:
 *
 * - dirname
 * - basename
 * - extension
 * - filename
 * - filesize
 * - mime
 *
 * @return array File information.
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::info
 */",
 "/**
 * Returns the File extension.
 *
 * @return string The File extension
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::ext
 */",
 "/**
 * Returns the File name without extension.
 *
 * @return string The File name without extension.
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::name
 */",
 "/**
 * makes filename safe for saving
 *
 * @param string $name The name of the file to make safe if different from $this->name
 * @param string $ext The name of the extension to make safe if different from $this->ext
 * @return string $ext the extension of the file
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::safe
 */",
 "/**
 * Get md5 Checksum of file with previous check of Filesize
 *
 * @param integer|boolean $maxsize in MB or true to force
 * @return string md5 Checksum {@link http://php.net/md5_file See md5_file()}
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::md5
 */",
 "/**
 * Returns the full path of the File.
 *
 * @return string Full path to file
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::pwd
 */",
 "/**
 * Returns true if the File exists.
 *
 * @return boolean true if it exists, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::exists
 */",
 "/**
 * Returns the \"chmod\" (permissions) of the File.
 *
 * @return string Permissions for the file
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::perms
 */",
 "/**
 * Returns the Filesize
 *
 * @return integer size of the file in bytes, or false in case of an error
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::size
 */",
 "/**
 * Returns true if the File is writable.
 *
 * @return boolean true if its writable, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::writable
 */",
 "/**
 * Returns true if the File is executable.
 *
 * @return boolean true if its executable, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::executable
 */",
 "/**
 * Returns true if the File is readable.
 *
 * @return boolean true if file is readable, false otherwise
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::readable
 */",
 "/**
 * Returns the File\'s owner.
 *
 * @return integer the Fileowner
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::owner
 */",
 "/**
 * Returns the File\'s group.
 *
 * @return integer the Filegroup
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::group
 */",
 "/**
 * Returns last access time.
 *
 * @return integer timestamp Timestamp of last access time
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::lastAccess
 */",
 "/**
 * Returns last modified time.
 *
 * @return integer timestamp Timestamp of last modification
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::lastChange
 */",
 "/**
 * Returns the current folder.
 *
 * @return Folder Current folder
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::Folder
 */",
 "/**
 * Copy the File to $dest
 *
 * @param string $dest destination for the copy
 * @param boolean $overwrite Overwrite $dest if exists
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-utility-libraries/file-folder.html#File::copy
 */",
 "/**
 * Get the mime type of the file.  Uses the finfo extension if 
 * its available, otherwise falls back to mime_content_type
 *
 * @return false|string The mimetype of the file, or false if reading fails.
 */",
 "/**
 * Convenience class for reading, writing and appending to files.
 *
 * @package       Cake.Utility
 */",
 "/**
 * Core Configurations.
 *
 * PHP 5
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       Cake.Config
 * @since         CakePHP(tm) v 1.1.11.4062
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Start capturing output for a \'block\'
 *
 * Blocks allow you to create slots or blocks of dynamic content in the layout.
 * view files can implement some or all of a layout\'s slots.
 *
 * You can end capturing blocks using View::end().  Blocks can be output
 * using View::get();
 *
 * @param string $name The name of the block to capture for.
 * @return void
 */",
 "/**
 * End a capturing block. The compliment to ViewBlock::start()
 *
 * @return void
 * @see ViewBlock::start()
 */",
 "/**
 * Append to an existing or new block.  Appending to a new 
 * block will create the block.
 *
 * Calling append() without a value will create a new capturing
 * block that needs to be finished with View::end(). The content
 * of the new capturing context will be added to the existing block context.
 *
 * @param string $name Name of the block
 * @param string $value The content for the block.
 * @return void
 * @throws CakeException when you use non-string values.
 */",
 "/**
 * Set the content for a block.  This will overwrite any
 * existing content.
 *
 * @param string $name Name of the block
 * @param string $value The content for the block.
 * @return void
 * @throws CakeException when you use non-string values.
 */",
 "/**
 * Get the content for a block.
 *
 * @param string $name Name of the block
 * @return The block content or \'\' if the block does not exist.
 */",
 "/**
 * Get the names of all the existing blocks.
 *
 * @return array An array containing the blocks.
 */",
 "/**
 * Get the name of the currently open block.
 *
 * @return mixed Either null or the name of the last open block.
 */",
 "/**
 * Get the names of the unclosed/active blocks.
 *
 * @return array An array of unclosed blocks.
 */",
 "/**
 * ViewBlock implements the concept of Blocks or Slots in the View layer.
 * Slots or blocks are combined with extending views and layouts to afford slots
 * of content that are present in a layout or parent view, but are defined by the child
 * view or elements used in the view.
 *
 * @package Cake.View
 */",
 "/**
 * Constructor.  Looks at Session configuration information and
 * sets up the session model.
 *
 */",
 "/**
 * Method called on open of a database session.
 *
 * @return boolean Success
 */",
 "/**
 * Method called on close of a database session.
 *
 * @return boolean Success
 */",
 "/**
 * Method used to read from a database session.
 *
 * @param integer|string $id The key of the value to read
 * @return mixed The value of the key or false if it does not exist
 */",
 "/**
 * Helper function called on write for database sessions.
 *
 * @param integer $id ID that uniquely identifies session in database
 * @param mixed $data The value of the data to be saved.
 * @return boolean True for successful write, false otherwise.
 */",
 "/**
 * Method called on the destruction of a database session.
 *
 * @param integer $id ID that uniquely identifies session in database
 * @return boolean True for successful delete, false otherwise.
 */",
 "/**
 * Helper function called on gc for database sessions.
 *
 * @param integer $expires Timestamp (defaults to current time)
 * @return boolean Success
 */",
 "/**
 * DatabaseSession provides methods to be used with CakeSession.
 *
 * @package       Cake.Model.Datasource.Session
 */",
 "/**
 * Constructor
 *
 * @param string $fieldName The fieldname
 * @param array $ruleset
 */",
 "/**
 * Sets the list of methods to use for validation
 *
 * @return void
 **/",
 "/**
 * Sets the I18n domain for validation messages.
 *
 * @param string $validationDomain The validation domain to be used.
 * @return void
 */",
 "/**
 * Runs all validation rules in this set and returns a list of
 * validation errors
 *
 * @return array list of validation errors for this field
 */",
 "/**
 * Gets a rule for a given name if exists
 *
 * @param string $name
 * @return CakeValidationRule
 */",
 "/**
 * Returns all rules for this validation set
 *
 * @return array
 */",
 "/**
 * Sets a CakeValidationRule $rule with a $name
 *
 * ## Example:
 *
 * {{{
 *		$set
 *			->setRule(\'required\', array(\'rule\' => \'notEmpty\', \'required\' => true))
 *			->setRule(\'inRange\', array(\'rule\' => array(\'between\', 4, 10))
 * }}}
 *
 * @param string $name The name under which the rule should be set
 * @param CakeValidationRule|array $rule The validation rule to be set
 * @return CakeValidationSet this instance
 */",
 "/**
 * Removes a validation rule from the set
 *
 * ## Example:
 *
 * {{{
 *		$set
 *			->removeRule(\'required\')
 *			->removeRule(\'inRange\')
 * }}}
 *
 * @param string $name The name under which the rule should be unset
 * @return CakeValidationSet this instance
 */",
 "/**
 * Sets the rules for a given field
 *
 * ## Example:
 *
 * {{{
 *		$set->setRules(array(
 *			\'required\' => array(\'rule\' => \'notEmpty\', \'required\' => true),
 *			\'inRange\' => array(\'rule\' => array(\'between\', 4, 10)
 * 		));
 * }}}
 *
 * @param array $rules The rules to be set
 * @param bolean $mergeVars [optional] If true, merges vars instead of replace. Defaults to true.
 * @return ModelField
 */",
 "/**
 * Fetches the correct error message for a failed validation
 *
 * @param string $name the name of the rule as it was configured
 * @param CakeValidationRule $rule the object containing validation information
 * @return string
 */",
 "/**
 * Applies translations to validator arguments.
 *
 * @param array $args The args to translate
 * @return array Translated args.
 */",
 "/**
 * Returns wheter an index exists in the rule set
 *
 * @param string $index name of the rule
 * @return boolean
 **/",
 "/**
 * Returns a rule object by its index
 *
 * @param string $index name of the rule
 * @return CakeValidationRule
 **/",
 "/**
 * Sets or replace a validation rule
 *
 * @param string $index name of the rule
 * @param CakeValidationRule|array rule to add to $index
 **/",
 "/**
 * Unsets a validation rule
 *
 * @param string $index name of the rule
 * @return void
 **/",
 "/**
 * Returns an iterator for each of the rules to be applied
 *
 * @return ArrayIterator
 **/",
 "/**
 * Returns the number of rules in this set
 *
 * @return int
 **/",
 "/**
 * CakeValidationSet object. Holds all validation rules for a field and exposes
 * methods to dynamically add or remove validation rules
 *
 * @package       Cake.Model.Validator
 * @link          http://book.cakephp.org/2.0/en/data-validation.html
 */",
 "/**
 * Tests validation parameter order in custom validation methods
 *
 * @return void
 */",
 "/**
 * Tests validation parameter fieldList in invalidFields
 *
 * @return void
 */",
 "/**
 * Test that invalidFields() integrates well with save().  And that fieldList can be an empty type.
 *
 * @return void
 */",
 "/**
 * testValidates method
 *
 * @return void
 */",
 "/**
 * test that validates() checks all the \'with\' associations as well for validation
 * as this can cause partial/wrong data insertion.
 *
 * @return void
 */",
 "/**
 * test that saveAll and with models with validation interact well
 *
 * @return void
 */",
 "/**
 * test that saveAll and with models at initial insert (no id has set yet)
 * with validation interact well
 *
 * @return void
 */",
 "/**
 * Test that missing validation methods trigger errors in development mode.
 * Helps to make development easier.
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * Test that missing validation methods does not trigger errors in production mode.
 *
 * @return void
 */",
 "/**
 * Test placeholder replacement when validation message is an array
 *
 * @return void
 */",
 "/**
 * Test validation message translation
 *
 * @return void
 */",
 "/**
 * Test for \'on\' => [create|update] in validation rules.
 *
 * @return void
 */",
 "/**
 * Test for \'required\' => [create|update] in validation rules.
 *
 * @return void
 */",
 "/**
 * Test that \'required\' and \'on\' are not conflicting
 *
 * @return void
 */",
 "/**
 * testSaveAllDeepValidateOnly
 * tests the validate methods with deeper recursive data
 *
 * @return void
 */",
 "/**
 * testSaveAllNotDeepValidateOnly
 * tests the validate methods to not validate deeper recursive data
 *
 * @return void
 */",
 "/**
 * testValidateAssociated method
 *
 * @return void
 */",
 "/**
 * testValidateMany method
 *
 * @return void
 */",
 "/**
 * testGetMethods method
 *
 * @return void
 */",
 "/**
 * testSetValidationDomain method
 *
 * @return void
 */",
 "/**
 * testGetModel method
 *
 * @return void
 */",
 "/**
 * Tests it is possible to get validation sets for a field using an array inteface
 *
 * @return void
 */",
 "/**
 * Tests it is possible to check for validation sets for a field using an array inteface
 *
 * @return void
 */",
 "/**
 * Tests it is possible to set validation rules for a field using an array inteface
 *
 * @return void
 */",
 "/**
 * Tests it is possible to unset validation rules
 *
 * @return void
 */",
 "/**
 * Tests it is possible to iterate a validation object
 *
 * @return void
 */",
 "/**
 * Tests countable interface in ModelValidator
 *
 * @return void
 */",
 "/**
 * Tests it is possible to add validation rules
 *
 * @return void
 */",
 "/**
 * Tests it is possible to remove validation rules
 *
 * @return void
 */",
 "/**
 * Tests validation callbacks are triggered
 *
 * @return void
 */",
 "/**
 * Tests that altering data in a beforeValidate callback will lead to saving those
 * values in database
 *
 * @return void
 */",
 "/**
 * Tests that altering data in a beforeValidate callback will lead to saving those
 * values in database
 *
 * @return void
 */",
 "/**
 * testValidateFirstWithDefaults method
 *
 * return @void
 */",
 "/**
 * Test that rules are parsed correctly when calling getField()
 *
 * @return void
 */",
 "/**
 * Tests that altering data in a beforeValidate callback will lead to saving those
 * values in database, this time with belongsTo associations
 *
 * @return void
 */",
 "/**
 * Testing you can dynamically add rules to a field, added this to dispel doubts
 * after a presentation made to show off this new feature
 *
 * @return void
 **/",
 "/**
 * Test to ensure custom validation methods work with CakeValidationSet
 *
 * @return void
 */",
 "/**
 * ModelValidationTest
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * __construct
 *
 * @param CakeRequest $request
 * @param CakeResponse $response
 */",
 "/**
 * Escapes the viewVars.
 *
 * @return void
 */",
 "/**
 * Error Handling Controller
 *
 * Controller used by ErrorHandler to render error views.
 *
 * @package       Cake.Controller
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * Setup a mock that has out mocked.  Normally this is not used as it makes $this->at() really tricky.
 *
 * @return void
 */",
 "/**
 * sets up the rest of the dependencies for Model Task
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * Test that listAll scans the database connection and lists all the tables in it.s
 *
 * @return void
 */",
 "/**
 * Test that listAll uses the connection property
 *
 * @return void
 */",
 "/**
 * Test that getName interacts with the user and returns the model name.
 *
 * @return void
 */",
 "/**
 * test getName with a valid option.
 *
 * @return void
 */",
 "/**
 * test that an out of bounds option causes an error.
 *
 * @return void
 */",
 "/**
 * Test table name interactions
 *
 * @return void
 */",
 "/**
 * test gettting a custom table name.
 *
 * @return void
 */",
 "/**
 * test getTable with non-conventional tablenames
 *
 * @return void
 */",
 "/**
 * test getTable with non-conventional tablenames
 *
 * @return void
 */",
 "/**
 * test that initializing the validations works.
 *
 * @return void
 */",
 "/**
 * test that individual field validation works, with interactive = false
 * tests the guessing features of validation
 *
 * @return void
 */",
 "/**
 * test that interactive field validation works and returns multiple validators.
 *
 * @return void
 */",
 "/**
 * test that a bogus response doesn\'t cause errors to bubble up.
 *
 * @return void
 */",
 "/**
 * test that a regular expression can be used for validation.
 *
 * @return void
 */",
 "/**
 * test the validation Generation routine
 *
 * @return void
 */",
 "/**
 * test that finding primary key works
 *
 * @return void
 */",
 "/**
 * test finding Display field
 *
 * @return void
 */",
 "/**
 * Test finding a displayname from user input
 *
 * @return void
 */",
 "/**
 * test that belongsTo generation works.
 *
 * @return void
 */",
 "/**
 * test that hasOne and/or hasMany relations are generated properly.
 *
 * @return void
 */",
 "/**
 * Test that HABTM generation works
 *
 * @return void
 */",
 "/**
 * test non interactive doAssociations
 *
 * @return void
 */",
 "/**
 * Ensure that the fixture object is correctly called.
 *
 * @return void
 */",
 "/**
 * Ensure that the test object is correctly called.
 *
 * @return void
 */",
 "/**
 * test confirming of associations, and that when an association is hasMany
 * a question for the hasOne is also not asked.
 *
 * @return void
 */",
 "/**
 * test that inOptions generates questions and only accepts a valid answer
 *
 * @return void
 */",
 "/**
 * test baking validation
 *
 * @return void
 */",
 "/**
 * test baking relations
 *
 * @return void
 */",
 "/**
 * test bake() with a -plugin param
 *
 * @return void
 */",
 "/**
 * test that execute passes runs bake depending with named model.
 *
 * @return void
 */",
 "/**
 * data provider for testExecuteWithNamedModelVariations
 *
 * @return void
 */",
 "/**
 * test that execute passes with different inflections of the same name.
 *
 * @dataProvider nameVariations
 * @return void
 */",
 "/**
 * test that execute with a model name picks up hasMany associations.
 *
 * @return void
 */",
 "/**
 * test that execute runs all() when args[0] = all
 *
 * @return void
 */",
 "/**
 * test that odd tablenames arent inflected back from modelname
 *
 * @return void
 */",
 "/**
 * test that odd tablenames arent inflected back from modelname
 *
 * @return void
 */",
 "/**
 * test that skipTables changes how all() works.
 *
 * @return void
 */",
 "/**
 * test the interactive side of bake.
 *
 * @return void
 */",
 "/**
 * test using bake interactively with a table that does not exist.
 *
 * @return void
 */",
 "/**
 * test using bake interactively with a table that does not exist.
 *
 * @return void
 */",
 "/**
 * ModelTaskTest class
 *
 * @package	   Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 * @param Controller $controller
 */",
 "/**
 * Render a XML view.
 *
 * Uses the special \'_serialize\' parameter to convert a set of
 * view variables into a XML response.  Makes generating simple
 * XML responses very easy.  You can omit the \'_serialize\' parameter,
 * and use a normal view + layout as well.
 *
 * @param string $view The view being rendered.
 * @param string $layout The layout being rendered.
 * @return string The rendered view.
 */",
 "/**
 * A view class that is used for creating XML responses.
 *
 * By setting the \'_serialize\' key in your controller, you can specify a view variable
 * that should be serialized to XML and used as the response for the request.
 * This allows you to omit views + layouts, if your just need to emit a single view
 * variable as the XML response.
 *
 * In your controller, you could do the following:
 *
 * `$this->set(array(\'posts\' => $posts, \'_serialize\' => \'posts\'));`
 *
 * When the view is rendered, the `$posts` view variable will be serialized
 * into XML.
 *
 * **Note** The view variable you specify must be compatible with Xml::fromArray().
 *
 * You can also define `\'_serialize\'` as an array.  This will create an additional
 * top level element named `<response>` containing all the named view variables:
 *
 * {{{
 * $this->set(compact(\'posts\', \'users\', \'stuff\'));
 * $this->set(\'_serialize\', array(\'posts\', \'users\'));
 * }}}
 *
 * The above would generate a XML object that looks like:
 *
 * `<response><posts>...</posts><users>...</users></response>`
 *
 * If you don\'t use the `_serialize` key, you will need a view.  You can use extended
 * views to provide layout like functionality.
 *
 * @package       Cake.View
 * @since         CakePHP(tm) v 2.1.0
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * Tests the name() method
 *
 * @return void
 */",
 "/**
 * Tests the subject() method
 *
 * @return void
 */",
 "/**
 * Tests the event propagation stopping property
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to get/set custom data in a event
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to get the name and subject directly
 *
 * @return void
 */",
 "/**
 * Tests the CakeEvent class functionality
 *
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllShellsTest class
 *
 * This test group will run all top level shell classes.
 *
 * @package       Cake.Test.Case.Console
 */",
 "/**
 * StringMock class
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test String class methods are called correctly
 */",
 "/**
 * test engine override
 */",
 "/**
 * testAutoLink method
 *
 * @return void
 */",
 "/**
 * Test escaping for autoLink
 *
 * @return void
 */",
 "/**
 * testAutoLinkUrls method
 *
 * @return void
 */",
 "/**
 * Test autoLinkUrls with the escape option.
 *
 * @return void
 */",
 "/**
 * testAutoLinkEmails method
 *
 * @return void
 */",
 "/**
 * test invalid email addresses.
 *
 * @return void
 */",
 "/**
 * TextHelperTest class
 *
 * @package       Cake.Test.Case.View.Helper
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * The upper field is the decimal value of the upper case character
 *
 * The lower filed is an array of the decimal values that form the lower case version of a character.
 *
 *	The status field is:
 * C: common case folding, common mappings shared by both simple and full mappings.
 * F: full case folding, mappings that cause strings to grow in length. Multiple characters are separated by spaces.
 * S: simple case folding, mappings to single characters where different from F.
 * T: special case for uppercase I and dotted uppercase I
 *   - For non-Turkic languages, this mapping is normally not used.
 *   - For Turkic languages (tr, az), this mapping can be used instead of the normal mapping for these characters.
 *     Note that the Turkic mappings do not maintain canonical equivalence without additional processing.
 *     See the discussions of case mapping in the Unicode Standard for more information.
 */",
 "/**
 * DataTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Article class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * testEscapeAlphaNumeric method
 *
 * @return void
 */",
 "/**
 * testClean method
 *
 * @return void
 */",
 "/**
 * testHtml method
 *
 * @return void
 */",
 "/**
 * testStripWhitespace method
 *
 * @return void
 */",
 "/**
 * testParanoid method
 *
 * @return void
 */",
 "/**
 * testStripImages method
 *
 * @return void
 */",
 "/**
 * testStripScripts method
 *
 * @return void
 */",
 "/**
 * testStripAll method
 *
 * @return void
 */",
 "/**
 * testStripTags method
 *
 * @return void
 */",
 "/**
 * SanitizeTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Flag Tree Test Fixture
 *
 * Like Number Tree, but uses a flag for testing scope parameters
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testFormatAndCurrency method
 *
 * @return void
 */",
 "/**
 * testMultibyteFormat
 *
 * @return void
 */",
 "/**
 * Test currency method.
 *
 * @return void
 */",
 "/**
 * Test adding currency format options to the number helper
 *
 * @return void
 */",
 "/**
 * testCurrencyPositive method
 *
 * @return void
 */",
 "/**
 * testCurrencyNegative method
 *
 * @return void
 */",
 "/**
 * testCurrencyCentsPositive method
 *
 * @return void
 */",
 "/**
 * testCurrencyCentsNegative method
 *
 * @return void
 */",
 "/**
 * testCurrencyZero method
 *
 * @return void
 */",
 "/**
 * testCurrencyOptions method
 *
 * @return void
 */",
 "/**
 * testToReadableSize method
 *
 * @return void
 */",
 "/**
 * test toReadableSize() with locales
 *
 * @return void
 */",
 "/**
 * testToPercentage method
 *
 * @return void
 */",
 "/**
 * CakeNumberTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * stop method
 *
 * @param integer $status
 * @return void
 */",
 "/**
 * ShellTestShell class
 *
 * @package       Cake.Test.Case.Console.Command
 */",
 "/**
 * Class for testing merging vars
 *
 * @package       Cake.Test.Case.Console.Command
 */",
 "/**
 * TestAppleTask class
 *
 * @package       Cake.Test.Case.Console.Command
 */",
 "/**
 * TestBananaTask class
 *
 * @package       Cake.Test.Case.Console.Command
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * testConstruct method
 *
 * @return void
 */",
 "/**
 * test merging vars
 *
 * @return void
 */",
 "/**
 * testInitialize method
 *
 * @return void
 */",
 "/**
 * testIn method
 *
 * @return void
 */",
 "/**
 * Test in() when not interactive.
 *
 * @return void
 */",
 "/**
 * testOut method
 *
 * @return void
 */",
 "/**
 * test that verbose and quiet output levels work
 *
 * @return void
 */",
 "/**
 * test that verbose and quiet output levels work
 *
 * @return void
 */",
 "/**
 * testErr method
 *
 * @return void
 */",
 "/**
*testNl
*
*@returnvoid
*/",
 "/**
*testHr
*
*@returnvoid
*/",
 "/**
*testError
*
*@returnvoid
*/",
 "/**
*testLoadTasksmethod
*
*@returnvoid
*/",
 "/**
*testthat__get()makesargsandparamsreferences
*
*@returnvoid
*/",
 "/**
*testShortPathmethod
*
*@returnvoid
*/",
 "/**
*testCreateFilemethod
*
*@returnvoid
*/",
 "/**
*testcreateFilewhentheshellisinteractive.
*
*@returnvoid
*/",
 "/**
*Testthatyoucan\'tcreatefilesthataren\'twritable.
*
*@returnvoid
*/",
 "/**
*testhasTaskmethod
*
*@returnvoid
*/",
 "/**
*testthehasMethod
*
*@returnvoid
*/",
 "/**
*testruncommandcallingmain.
*
*@returnvoid
*/",
 "/**
*testruncommandcallingalegitmethod.
*
*@returnvoid
*/",
 "/**
*testruncommandcausingexceptiononShellmethod.
*
*@returnvoid
*/",
 "/**
*testruncommandcausingexceptiononShellmethod.
*
*@returnvoid
*/",
 "/**
*testthata--helpcauseshelptoshow.
*
*@returnvoid
*/",
 "/**
*testthatrunCommandwillcallrunCommandonthetask.
*
*@returnvoid
*/",
 "/**
*testwrapBlockwrappingtext.
*
*@returnvoid
*/",
 "/**
*Testingcamelcasednamingoftasks
*
*@returnvoid
*/",
 "/**
*Testthatoptionparsersarecreatedwiththecorrectname/command.
*
*@returnvoid
*/",
 "/**
*Testfileandconsoleandlogging
*/",
 "/**
*ShellTestclass
*
*@packageCake.Test.Case.Console.Command
*/",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test that initialize sets the path
 *
 * @return void
 */",
 "/**
 * test import option array generation
 *
 * @return void
 */",
 "/**
 * test importOptions choosing nothing.
 *
 * @return void
 */",
 "/**
 * test importOptions choosing from Table.
 *
 * @return void
 */",
 "/**
 * test generating a fixture with database conditions.
 *
 * @return void
 */",
 "/**
 * test that connection gets set to the import options when a different connection is used.
 *
 * @return void
 */",
 "/**
 * Ensure that fixture data doesn\'t get overly escaped.
 *
 * @return void
 */",
 "/**
 * test that execute passes runs bake depending with named model.
 *
 *
 * @return void
 */",
 "/**
 * test that execute runs all() when args[0] = all
 *
 * @return void
 */",
 "/**
 * test using all() with -count and -records
 *
 * @return void
 */",
 "/**
 * test interactive mode of execute
 *
 * @return void
 */",
 "/**
 * Test that bake works
 *
 * @return void
 */",
 "/**
 * test record generation with float and binary types
 *
 * @return void
 */",
 "/**
 * Test that file generation includes headers and correct path for plugins.
 *
 * @return void
 */",
 "/**
 * test generating files into plugins.
 *
 * @return void
 */",
 "/**
 * FixtureTaskTest class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * setup method
 *
 * @param mixed $version
 * @return void
 */",
 "/**
 * teardown method
 *
 * @param mixed $version
 * @return void
 */",
 "/**
 * getVar method
 *
 * @param string $var Name of var
 * @return mixed
 */",
 "/**
 * Test for Schema database management
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * setup method
 *
 * @param mixed $version
 * @return void
 */",
 "/**
 * teardown method
 *
 * @param mixed $version
 * @return void
 */",
 "/**
 * TestAppSchema class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SchemaPost class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SchemaComment class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SchemaTag class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SchemaDatatype class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Testdescribe class
 *
 * This class is defined purely to inherit the cacheSources variable otherwise
 * testSchemaCreateTable will fail if listSources has already been called and
 * its source cache populated - I.e. if the test is run within a group
 *
 * @uses          CakeTestModel
 * @package
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SchemaCrossDatabase class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SchemaCrossDatabaseFixture class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * SchemaPrefixAuthUser class
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testSchemaName method
 *
 * @return void
 */",
 "/**
 * testSchemaRead method
 *
 * @return void
 */",
 "/**
 * testSchemaReadWithAppModel method
 *
 * @access public
 * @return void
 */",
 "/**
 * testSchemaReadWithOddTablePrefix method
 *
 * @return void
 */",
 "/**
 * test read() with tablePrefix properties.
 *
 * @return void
 */",
 "/**
 * test reading schema with config prefix.
 *
 * @return void
 */",
 "/**
 * test reading schema from plugins.
 *
 * @return void
 */",
 "/**
 * test reading schema with tables from another database.
 *
 * @return void
 */",
 "/**
 * test that tables are generated correctly
 *
 * @return void
 */",
 "/**
 * testSchemaWrite method
 *
 * @return void
 */",
 "/**
 * testSchemaComparison method
 *
 * @return void
 */",
 "/**
 * test comparing \'\' and null and making sure they are different.
 *
 * @return void
 */",
 "/**
 * Test comparing tableParameters and indexes.
 *
 * @return void
 */",
 "/**
 * Test comparing with field changed from VARCHAR to DATETIME
 *
 * @return void
 */",
 "/**
 * testSchemaLoading method
 *
 * @return void
 */",
 "/**
 * test loading schema files inside of plugins.
 *
 * @return void
 */",
 "/**
 * testSchemaCreateTable method
 *
 * @return void
 */",
 "/**
 * CakeSchemaTest
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * get the option parser for the test suite.
 *
 * @return void
 */",
 "/**
 * Initialization method installs PHPUnit and loads all plugins
 *
 * @return void
 * @throws Exception
 */",
 "/**
 * Parse the CLI options into an array CakeTestDispatcher can use.
 *
 * @return array Array of params for CakeTestDispatcher
 */",
 "/**
 * Converts the options passed to the shell as options for the PHPUnit cli runner
 *
 * @return array Array of params for CakeTestDispatcher
 */",
 "/**
 * Main entry point to this shell
 *
 * @return void
 */",
 "/**
 * Runs the test case from $runnerArgs
 *
 * @param array $runnerArgs list of arguments as obtained from _parseArgs()
 * @param array $options list of options as constructed by _runnerOptions()
 * @return void
 */",
 "/**
 * Shows a list of available test cases and gives the option to run one of them
 *
 * @return void
 */",
 "/**
 * Find the test case for the passed file. The file could itself be a test.
 *
 * @param string $file
 * @param string $category 
 * @param boolean $throwOnMissingFile 
 * @access protected
 * @return array(type, case)
 * @throws Exception
 */",
 "/**
 * For the given file, what category of test is it? returns app, core or the name of the plugin
 *
 * @param string $file
 * @access protected
 * @return string
 */",
 "/**
 * Provides a CakePHP wrapper around PHPUnit.
 * Adds in CakePHP\'s fixtures and gives access to plugin, app and core test cases
 *
 * @package       Cake.Console.Command
 */",
 "/**
 * Constructor
 *
 * @param array $validator [optional] The validator properties
 */",
 "/**
 * Checks if the rule is valid
 *
 * @return boolean
 */",
 "/**
 * Returns whether the field can be left blank according to this rule
 *
 * @return boolean
 */",
 "/**
 * Checks if the field is required according to the `required` property
 *
 * @return boolean
 */",
 "/**
 * Checks whether the field failed the `field should be present` validation
 *
 * @param array $data data to check rule against
 * @return boolean
 */",
 "/**
 * Checks if the allowEmpty key applies
 *
 * @param array $data data to check rule against
 * @return boolean
 */",
 "/**
 * Checks if the validation rule should be skipped
 *
 * @return boolean True if the ValidationRule can be skipped
 */",
 "/**
 * Returns whethere this rule should break validation process for associated field
 * after it fails
 *
 * @return boolean
 */",
 "/**
 * Gets the validation error message
 *
 * @return string
 */",
 "/**
 * Gets an array with the rule properties
 *
 * @return array
 */",
 "/**
 * Sets the recordExists configuration value for this rule,
 * ir refers to wheter the model record it is validating exists
 * exists in the collection or not (create or update operation)
 *
 * If called with no parameters it will return whether this rule
 * is configured for update operations or not.
 *
 * @return boolean 
 **/",
 "/**
 * Dispatches the validation rule to the given validator method
 *
 * @return boolean True if the rule could be dispatched, false otherwise
 */",
 "/**
 * Returns passed options for this rule
 *
 * @return array
 **/",
 "/**
 * Sets the rule properties from the rule entry in validate
 *
 * @param array $validator [optional]
 * @return void
 */",
 "/**
 * Parses the rule and sets the rule and ruleParams
 *
 * @return void
 */",
 "/**
 * CakeValidationRule object. Represents a validation method, error message and
 * rules for applying such method to a field.
 *
 * @package       Cake.Model.Validator
 * @link          http://book.cakephp.org/2.0/en/data-validation.html
 */",
 "/**
 * Short description for file.
 *
 * PHP 5
 *
 * CakePHP(tm) Tests <http://book.cakephp.org/2.0/en/development/testing.html>
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://book.cakephp.org/2.0/en/development/testing.html CakePHP(tm) Tests
 * @package       Cake.Test.test_app.Plugin.TestPlugin.Vendor.sample
 * @since         CakePHP(tm) v 1.2.0.4206
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Case.Error
 */",
 "/**
 * initialize method
 *
 * @return void
 */",
 "/**
 * BlueberryComponent class
 *
 * @package       Cake.Test.Case.Error
 */",
 "/**
 * beforeRender method
 *
 * @return void
 */",
 "/**
 * index method
 *
 * @return void
 */",
 "/**
 * TestErrorController class
 *
 * @package       Cake.Test.Case.Error
 */",
 "/**
 * custom error message type.
 *
 * @return void
 */",
 "/**
 * MyCustomExceptionRenderer class
 *
 * @package       Cake.Test.Case.Error
 */",
 "/**
 * Exception class for testing app error handlers and custom errors.
 *
 * @package       Cake.Test.Case.Error
 */",
 "/**
 * setup create a request object to get out of router later.
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * Mocks out the response on the ExceptionRenderer object so headers aren\'t modified.
 *
 * @return void
 */",
 "/**
 * test that methods declared in an ExceptionRenderer subclass are not converted
 * into error400 when debug > 0
 *
 * @return void
 */",
 "/**
 * test that subclass methods are not converted when debug = 0
 *
 * @return void
 */",
 "/**
 * test that ExceptionRenderer subclasses properly convert framework errors.
 *
 * @return void
 */",
 "/**
 * test things in the constructor.
 *
 * @return void
 */",
 "/**
 * test that method gets coerced when debug = 0
 *
 * @return void
 */",
 "/**
 * test that helpers in custom CakeErrorController are not lost
 */",
 "/**
 * test that unknown exception types with valid status codes are treated correctly.
 *
 * @return void
 */",
 "/**
 * test that unknown exception types with valid status codes are treated correctly.
 *
 * @return void
 */",
 "/**
 * test that unknown exceptions have messages ignored.
 *
 * @return void
 */",
 "/**
 * test that unknown exception types with valid status codes are treated correctly.
 *
 * @return void
 */",
 "/**
 * testerror400 method
 *
 * @return void
 */",
 "/**
 * test that error400 only modifies the messages on CakeExceptions.
 *
 * @return void
 */",
 "/**
 * test that error400 doesn\'t expose XSS
 *
 * @return void
 */",
 "/**
 * testError500 method
 *
 * @return void
 */",
 "/**
 * testMissingController method
 *
 * @return void
 */",
 "/**
 * Returns an array of tests to run for the various CakeException classes.
 *
 * @return void
 */",
 "/**
 * Test the various CakeException sub classes
 *
 * @dataProvider testProvider
 * @return void
 */",
 "/**
 * Test exceptions being raised when helpers are missing.
 *
 * @return void
 */",
 "/**
 * Test that missing subDir/layoutPath don\'t cause other fatal errors.
 *
 * @return void
 */",
 "/**
 * Test that exceptions can be rendered when an request hasn\'t been registered
 * with Router
 *
 * @return void
 */",
 "/**
 * Tests the output of rendering a PDOException
 *
 * @return void
 */",
 "/**
 * ExceptionRendererTest class
 *
 * @package       Cake.Test.Case.Error
 */",
 "/**
 * Constructor
 *
 * @param ComponentCollection $collection The controller for this request.
 * @param string $settings An array of settings.  This class does not use any settings.
 */",
 "/**
 * Checks user authorization.
 *
 * @param array $user Active user data
 * @param CakeRequest $request
 * @return boolean
 */",
 "/**
 * Accessor to the controller object.
 *
 * @param Controller $controller null to get, a controller to set.
 * @return mixed
 * @throws CakeException
 */",
 "/**
 * Get the action path for a given request.  Primarily used by authorize objects
 * that need to get information about the plugin, controller, and action being invoked.
 *
 * @param CakeRequest $request The request a path is needed for.
 * @param string $path
 * @return string the action path for the given request.
 */",
 "/**
 * Maps crud actions to actual action names.  Used to modify or get the current mapped actions.
 *
 * Create additional mappings for a standard CRUD operation:
 *
 * {{{
 * $this->Auth->mapActions(array(\'create\' => array(\'add\', \'register\'));
 * }}}
 *
 * Create mappings for custom CRUD operations:
 *
 * {{{
 * $this->Auth->mapActions(array(\'my_action\' => \'admin\'));
 * }}}
 *
 * You can use the custom CRUD operations to create additional generic permissions
 * that behave like CRUD operations.  Doing this will require additional columns on the
 * permissions lookup.  When using with DbAcl, you\'ll have to add additional _admin type columns
 * to the `aros_acos` table.
 *
 * @param array $map Either an array of mappings, or undefined to get current values.
 * @return mixed Either the current mappings or null when setting.
 * @see AuthComponent::mapActions()
 */",
 "/**
 * Abstract base authorization adapter for AuthComponent.
 *
 * @package       Cake.Controller.Component.Auth
 * @since 2.0
 * @see AuthComponent::$authenticate
 */",
 "/**
 * Override startup of the Shell
 *
 * @return mixed
 */",
 "/**
 * Override main() for help message hook
 *
 * @return void
 */",
 "/**
 * Initialize I18N database.
 *
 * @return void
 */",
 "/**
 * Get and configure the Option parser
 *
 * @return ConsoleOptionParser
 */",
 "/**
 * Shell for I18N management.
 *
 * @package       Cake.Console.Command
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * test construct
 *
 * @return void
 */",
 "/**
 * no other sections should exist.
 *
 * @return void
 */",
 "/**
 * test without section
 *
 * @return void
 */",
 "/**
 * test that names with .\'s get exploded into arrays.
 *
 * @return void
 */",
 "/**
 * test boolean reading
 *
 * @return void
 */",
 "/**
 * test read file without extension
 *
 * @return void
 */",
 "/**
 * test dump method.
 *
 * @return void
 */",
 "/**
 * Test that dump() makes files read() can read.
 *
 * @return void
 */",
 "/**
 * Loads connections configuration.
 *
 * @return void
 */",
 "/**
 * Gets a reference to a DataSource object
 *
 * @param string $name The name of the DataSource, as defined in app/Config/database.php
 * @return DataSource Instance
 * @throws MissingDatasourceConfigException
 * @throws MissingDatasourceException
 */",
 "/**
 * Gets the list of available DataSource connections
 * This will only return the datasources instantiated by this manager
 * It differs from enumConnectionObjects, since the latter will return all configured connections
 *
 * @return array List of available connections
 */",
 "/**
 * Gets a DataSource name from an object reference.
 *
 * @param DataSource $source DataSource object
 * @return string Datasource name, or null if source is not present
 *    in the ConnectionManager.
 */",
 "/**
 * Loads the DataSource class for the given connection name
 *
 * @param string|array $connName A string name of the connection, as defined in app/Config/database.php,
 *                        or an array containing the filename (without extension) and class name of the object,
 *                        to be found in app/Model/Datasource/ or lib/Cake/Model/Datasource/.
 * @return boolean True on success, null on failure or false if the class is already loaded
 * @throws MissingDatasourceException
 */",
 "/**
 * Return a list of connections
 *
 * @return array An associative array of elements where the key is the connection name
 *               (as defined in Connections), and the value is an array with keys \'filename\' and \'classname\'.
 */",
 "/**
 * Dynamically creates a DataSource object at runtime, with the given name and settings
 *
 * @param string $name The DataSource name
 * @param array $config The DataSource configuration settings
 * @return DataSource A reference to the DataSource object, or null if creation failed
 */",
 "/**
 * Removes a connection configuration at runtime given its name
 *
 * @param string $name the connection name as it was created
 * @return boolean success if connection was removed, false if it does not exist
 */",
 "/**
 * Gets a list of class and file names associated with the user-defined DataSource connections
 *
 * @param string $name Connection name
 * @return void
 * @throws MissingDatasourceConfigException
 */",
 "/**
 * Returns the file, class name, and parent for the given driver.
 *
 * @param array $config Array with connection configuration. Key \'datasource\' is required
 * @return array An indexed array with: filename, classname, plugin and parent
 */",
 "/**
 * Manages loaded instances of DataSource objects
 *
 * Provides an interface for loading and enumerating connections defined in 
 * app/Config/database.php
 *
 * @package       Cake.Model
 */",
 "/**
 * testInactiveMins method
 *
 * @return void
 */",
 "/**
 * testGenerateAuthkey method
 *
 * @return void
 */",
 "/**
 * testValidateAuthKey method
 *
 * @return void
 */",
 "/**
 * testHash method
 *
 * @return void
 */",
 "/**
 * testCipher method
 *
 * @return void
 */",
 "/**
 * testCipherEmptyKey method
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * testRijndael method
 *
 * @return void
 */",
 "/**
 * testRijndaelInvalidOperation method
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * testRijndaelInvalidKey method
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * SecurityTest class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Extended HtmlHelper
 */",
 "/**
 * setUp
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test triggering callbacks on loaded helpers
 *
 * @return void
 */",
 "/**
 * test lazy loading of helpers
 *
 * @return void
 */",
 "/**
 * test lazy loading of helpers
 *
 * @expectedException MissingHelperException
 * @return void
 */",
 "/**
 * Tests loading as an alias
 *
 * @return void
 */",
 "/**
 * test that the enabled setting disables the helper.
 *
 * @return void
 */",
 "/**
 * test missinghelper exception
 *
 * @expectedException MissingHelperException
 * @return void
 */",
 "/**
 * test loading a plugin helper.
 *
 * @return void
 */",
 "/**
 * test unload()
 *
 * @return void
 */",
 "/**
 * Authentication
 *
 * @param HttpSocket $http
 * @param array $authInfo
 * @return void
 * @link http://www.ietf.org/rfc/rfc2617.txt
 */",
 "/**
 * Retrieve information about the authentication
 *
 * @param HttpSocket $http
 * @param array $authInfo
 * @return boolean
 */",
 "/**
 * Generate the header Authorization
 *
 * @param HttpSocket $http
 * @param array $authInfo
 * @return string
 */",
 "/**
 * Digest authentication
 *
 * @package       Cake.Network.Http
 */",
 "/**
 * setup
 *
 * @return void
 */",
 "/**
 * test applying settings in the constructor
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test the authenticate method
 *
 * @return void
 */",
 "/**
 * test authenticate success
 *
 * @return void
 */",
 "/**
 * test scope failure.
 *
 * @return void
 */",
 "/**
 * test a model in a plugin.
 *
 * @return void
 */",
 "/**
 * Test case for FormAuthentication
 *
 * @package       Cake.Test.Case.Controller.Component.Auth
 */",
 "/**
 * testDeleteHabtmReferenceWithConditions method
 *
 * @return void
 */",
 "/**
 * testDeleteArticleBLinks method
 *
 * @return void
 */",
 "/**
 * testDeleteDependentWithConditions method
 *
 * @return void
 */",
 "/**
 * testDel method
 *
 * @return void
 */",
 "/**
 * test that delete() updates the correct records counterCache() records.
 *
 * @return void
 */",
 "/**
 * testDeleteAll method
 *
 * @return void
 */",
 "/**
 * testDeleteAllUnknownColumn method
 *
 * @expectedException PDOException
 * @return void
 */",
 "/**
 * testRecursiveDel method
 *
 * @return void
 */",
 "/**
 * testDependentExclusiveDelete method
 *
 * @return void
 */",
 "/**
 * testDeleteLinks method
 *
 * @return void
 */",
 "/**
 * test that a plugin model as the \'with\' model doesn\'t have issues
 *
 * @return void
 */",
 "/**
 * testDeleteDependent method
 *
 * @return void
 */",
 "/**
 * test deleteLinks with Multiple habtm associations
 *
 * @return void
 */",
 "/**
 * testHabtmDeleteLinksWhenNoPrimaryKeyInJoinTable method
 *
 * @return void
 */",
 "/**
 * test that beforeDelete returning false can abort deletion.
 *
 * @return void
 */",
 "/**
 * test for a habtm deletion error that occurs in postgres but should not.
 * And should not occur in any dbo.
 *
 * @return void
 */",
 "/**
 * test that deleting records inside the beforeDelete doesn\'t truncate the table.
 *
 * @return void
 */",
 "/**
 * test that deleting the same record from the beforeDelete and the delete doesn\'t truncate the table.
 *
 * @return void
 */",
 "/**
 * ModelDeleteTest
 *
 * @package       Cake.Test.Case.Model
 */",
 "/**
 * UuidTreeFixture class
 *
 * @uses          CakeTestFixture
 * @package       Cake.Test.Fixture
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * testInflectingSingulars method
 *
 * @return void
 */",
 "/**
 * testInflectingPlurals method
 *
 * @return void
 */",
 "/**
 * testInflectorSlug method
 *
 * @return void
 */",
 "/**
 * testInflectorSlugWithMap method
 *
 * @return void
 */",
 "/**
 * testInflectorSlugWithMapOverridingDefault method
 *
 * @return void
 */",
 "/**
 * testInflectorUnderscore method
 *
 * @return void
 */",
 "/**
 * testVariableNaming method
 *
 * @return void
 */",
 "/**
 * testClassNaming method
 *
 * @return void
 */",
 "/**
 * testTableNaming method
 *
 * @return void
 */",
 "/**
 * testHumanization method
 *
 * @return void
 */",
 "/**
 * testCustomPluralRule method
 *
 * @return void
 */",
 "/**
 * testCustomSingularRule method
 *
 * @return void
 */",
 "/**
 * testCustomTransliterationRule method
 *
 * @return void
 */",
 "/**
 * test that setting new rules clears the inflector caches.
 *
 * @return void
 */",
 "/**
 * Test resetting inflection rules.
 *
 * @return void
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * ModelTest class
 *
 * This test group will run model class tests
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * testMovePromote method
 *
 * @return void
 */",
 "/**
 * testMoveWithWhitelist method
 *
 * @return void
 */",
 "/**
 * testRemoveNoChildren method
 *
 * @return void
 */",
 "/**
 * testRemoveAndDeleteNoChildren method
 *
 * @return void
 */",
 "/**
 * testChildren method
 *
 * @return void
 */",
 "/**
 * testNoAmbiguousColumn method
 *
 * @return void
 */",
 "/**
 * testGenerateTreeListWithSelfJoin method
 *
 * @return void
 */",
 "/**
 * TreeBehaviorUuidTest class
 *
 * @package       Cake.Test.Case.Model.Behavior
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 */",
 "/**
 * Initializes the containing component and sets the Aro/Aco objects to it.
 *
 * @param AclComponent $component
 * @return void
 */",
 "/**
 * Checks if the given $aro has access to action $action in $aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success (true if ARO has access to action in ACO, false otherwise)
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/access-control-lists.html#checking-permissions-the-acl-component
 */",
 "/**
 * Allow $aro to have access to action $actions in $aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $actions Action (defaults to *)
 * @param integer $value Value to indicate access type (1 to give access, -1 to deny, 0 to inherit)
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/access-control-lists.html#assigning-permissions
 */",
 "/**
 * Deny access for $aro to action $action in $aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 * @link http://book.cakephp.org/2.0/en/core-libraries/components/access-control-lists.html#assigning-permissions
 */",
 "/**
 * Let access for $aro to action $action in $aco be inherited
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 */",
 "/**
 * Allow $aro to have access to action $actions in $aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 * @see allow()
 */",
 "/**
 * Deny access for $aro to action $action in $aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @param string $action Action (defaults to *)
 * @return boolean Success
 * @see deny()
 */",
 "/**
 * Get an array of access-control links between the given Aro and Aco
 *
 * @param string $aro ARO The requesting object identifier.
 * @param string $aco ACO The controlled object identifier.
 * @return array Indexed array with: \'aro\', \'aco\' and \'link\'
 */",
 "/**
 * Get the keys used in an ACO
 *
 * @param array $keys Permission model info
 * @return array ACO keys
 */",
 "/**
 * DbAcl implements an ACL control system in the database.  ARO\'s and ACO\'s are
 * structured into trees and a linking table is used to define permissions.  You
 * can install the schema for DbAcl with the Schema Shell.
 *
 * `$aco` and `$aro` parameters can be slash delimited paths to tree nodes.
 *
 * eg. `controllers/Users/edit`
 *
 * Would point to a tree structure like
 *
 * {{{
 *	controllers
 *		Users
 *			edit
 * }}}
 *
 * @package       Cake.Controller.Component
 */",
 "/**
 * Sets default order for the model to avoid failing tests caused by
 * incorrect order when no order has been defined in the finds.
 * Postgres can return the results in any order it considers appropriate if none is specified
 *
 * @param array $queryData
 * @return array $queryData
 */",
 "/**
 * Overriding save() to set CakeTestSuiteDispatcher::date() as formatter for created, modified and updated fields
 *
 * @param array $data
 * @param boolean|array $validate
 * @param array $fieldList
 */",
 "/**
 * A model to extend from to help you during testing.
 *
 * @package       Cake.TestSuite.Fixture
 */",
 "/**
 * Constructs a new Console Logger.
 *
 * Config
 *
 * - `types` string or array, levels the engine is interested in
 * - `scopes` string or array, scopes the engine is interested in
 * - `stream` the path to save logs on.
 * - `outputAs` integer or ConsoleOutput::[RAW|PLAIN|COLOR]
 *
 * @param array $config Options for the FileLog, see above.
 * @throws CakeLogException
 */",
 "/**
 * Implements writing to console.
 *
 * @param string $type The type of log you are making.
 * @param string $message The message you want to log.
 * @return boolean success of write.
 */",
 "/**
 * Console logging.  Writes logs to console output.
 *
 * @package       Cake.Log.Engine
 */",
 "/**
 * suite method, defines tests for this suite.
 *
 * @return void
 */",
 "/**
 * AllControllersTest class
 *
 * This test group will run Controller related tests.
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * Initialize the Cache Engine
 *
 * Called automatically by the cache frontend
 * To reinitialize the settings call Cache::engine(\'EngineName\', [optional] settings = array());
 *
 * @param array $settings array of setting for the engine
 * @return boolean True if the engine has been successfully initialized, false if not
 */",
 "/**
 * Connects to a Redis server
 *
 * @return boolean True if Redis server was connected
 */",
 "/**
 * Write data for key into cache.
 *
 * @param string $key Identifier for the data
 * @param mixed $value Data to be cached
 * @param integer $duration How long to cache the data, in seconds
 * @return boolean True if the data was successfully cached, false on failure
 */",
 "/**
 * Read a key from the cache
 *
 * @param string $key Identifier for the data
 * @return mixed The cached data, or false if the data doesn\'t exist, has expired, or if there was an error fetching it
 */",
 "/**
 * Increments the value of an integer cached key
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to increment
 * @return New incremented value, false otherwise
 * @throws CacheException when you try to increment with compress = true
 */",
 "/**
 * Decrements the value of an integer cached key
 *
 * @param string $key Identifier for the data
 * @param integer $offset How much to subtract
 * @return New decremented value, false otherwise
 * @throws CacheException when you try to decrement with compress = true
 */",
 "/**
 * Delete a key from the cache
 *
 * @param string $key Identifier for the data
 * @return boolean True if the value was successfully deleted, false if it didn\'t exist or couldn\'t be removed
 */",
 "/**
 * Delete all keys from the cache
 *
 * @param boolean $check
 * @return boolean True if the cache was successfully cleared, false otherwise
 */",
 "/**
 * Returns the `group value` for each of the configured groups
 * If the group initial value was not found, then it initializes
 * the group accordingly.
 *
 * @return array
 **/",
 "/**
 * Increments the group value to simulate deletion of all keys under a group
 * old values will remain in storage until they expire.
 *
 * @return boolean success
 **/",
 "/**
 * Disconnects from the redis server
 *
 * @return voind
 **/",
 "/**
 * Redis storage engine for cache.
 *
 * @package       Cake.Cache.Engine
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setup test
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * test bake all
 *
 * @return void
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * test the array_diff_key compatibility function.
 *
 * @return void
 */",
 "/**
 * testHttpBase method
 *
 * @return void
 */",
 "/**
 * Test h()
 *
 * @return void
 */",
 "/**
 * Test am()
 *
 * @return void
 */",
 "/**
 * test cache()
 *
 * @return void
 */",
 "/**
 * test clearCache()
 *
 * @return void
 */",
 "/**
 * test __()
 *
 * @return void
 */",
 "/**
 * test __n()
 *
 * @return void
 */",
 "/**
 * test __d()
 *
 * @return void
 */",
 "/**
 * test __dn()
 *
 * @return void
 */",
 "/**
 * test __c()
 *
 * @return void
 */",
 "/**
 * test __dc()
 *
 * @return void
 */",
 "/**
 * test __dcn()
 *
 * @return void
 */",
 "/**
 * test LogError()
 *
 * @return void
 */",
 "/**
 * test fileExistsInPath()
 *
 * @return void
 */",
 "/**
*testconvertSlash()
*
*@returnvoid
*/",
 "/**
 * test debug()
 *
 * @return void
 */",
 "/**
 * test pr()
 *
 * @return void
 */",
 "/**
 * test stripslashes_deep()
 *
 * @return void
 */",
 "/**
 * test stripslashes_deep() with magic_quotes_sybase on
 *
 * @return void
 */",
 "/**
 * test pluginSplit
 *
 * @return void
 */",
 "/**
 * BasicsTest class
 *
 * @package       Cake.Test.Case
 */",
 "/**
 * DebugggerTestCaseDebuggger class
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testDocRef method
 *
 * @return void
 */",
 "/**
 * test Excerpt writing
 *
 * @return void
 */",
 "/**
 * testOutput method
 *
 * @return void
 */",
 "/**
 * Tests that changes in output formats using Debugger::output() change the templates used.
 *
 * @return void
 */",
 "/**
 * Test that outputAs works.
 *
 * @return void
 */",
 "/**
 * Test that choosing a non-existent format causes an exception
 *
 * @expectedException CakeException
 * @return void
 */",
 "/**
 * Tests that changes in output formats using Debugger::output() change the templates used.
 *
 * @return void
 */",
 "/**
 * Test adding a format that is handled by a callback.
 *
 * @return void
 */",
 "/**
 * Test method for testing addFormat with callbacks.
 */",
 "/**
 * testTrimPath method
 *
 * @return void
 */",
 "/**
 * testExportVar method
 *
 * @return void
 */",
 "/**
 * testLog method
 *
 * @return void
 */",
 "/**
 * testDump method
 *
 * @return void
 */",
 "/**
 * test getInstance.
 *
 * @return void
 */",
 "/**
 * testNoDbCredentials
 *
 * If a connection error occurs, the config variable is passed through exportVar
 * *** our database login credentials such that they are never visible
 *
 * @return void
 */",
 "/**
 * test trace exclude
 *
 * @return void
 */",
 "/**
 * DebuggerTest class
 *
 * !!! Be careful with changing code below as it may
 * !!! change line numbers which are used in the tests
 *
 * @package       Cake.Test.Case.Utility
 */",
 "/**
 * Behavior to allow for dynamic and atomic manipulation of a Model\'s associations used for a find call. Most useful for limiting
 * the amount of associations and data returned.
 *
 * @package       Cake.Test.test_app.Model.Behavior
 */",
 "/**
 * Generates report text to display.
 *
 * @return string compiled plain text report.
 */",
 "/**
 * Generates a \'diff\' report for a file.
 * Since diffs are too big for plain text reports a simple file => % covered is done.
 *
 * @param string $filename Name of the file having coverage generated
 * @param array $fileLines File data as an array. See file() for how to get one of these.
 * @param array $coverageData Array of coverage data to use to generate HTML diffs with
 * @return string
 */",
 "/**
 * Generates code coverage reports in Simple plain text from data obtained from PHPUnit
 *
 * @package       Cake.TestSuite.Coverage
 */",
 "/**
 * Application helper
 *
 * Add your application-wide methods in the class below, your helpers
 * will inherit them.
 *
 * @package       app.View.Helper
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testConfig method
 *
 * @return void
 */",
 "/**
 * Check that no fatal errors are issued doing normal things when Cache.disable is true.
 *
 * @return void
 */",
 "/**
 * test configuring CacheEngines in App/libs
 *
 * @return void
 */",
 "/**
 * testInvalidConfig method
 *
 * Test that the cache class doesn\'t cause fatal errors with a partial path
 *
 * @expectedException PHPUnit_Framework_Error_Warning
 * @return void
 */",
 "/**
 * Test reading from a config that is undefined.
 *
 * @return void
 */",
 "/**
 * test that trying to configure classes that don\'t extend CacheEngine fail.
 *
 * @expectedException CacheException
 * @return void
 */",
 "/**
 * testConfigChange method
 *
 * @return void
 */",
 "/**
 * test that calling config() sets the \'default\' configuration up.
 *
 * @return void
 */",
 "/**
*testWritingWithConfigmethod
*
*@returnvoid
*/",
 "/**
*testthatconfiguredreturnsanarrayofthecurrentlyconfiguredcache
*settings
*
*@returnvoid
*/",
 "/**
*testInitSettingsmethod
*
*@returnvoid
*/",
 "/**
*testthatdropremovescacheconfigs,andthatfurtherattemptstousethatconfig
*donotwork.
*
*@returnvoid
*/",
 "/**
*testWriteEmptyValuesmethod
*
*@returnvoid
*/",
 "/**
*Testthatfailedwritescauseerrorstobetriggered.
*
*@returnvoid
*/",
 "/**
*testCacheDisablemethod
*
*Checkthatthe\"Cache.disable\" configuration and a change to it
 * (even after a cache config has been setup) is taken into account.
 *
 * @return void
 */",
 "/**
 * testSet method
 *
 * @return void
 */",
 "/**
 * test set() parameter handling for user cache configs.
 *
 * @return void
 */",
 "/**
 * CacheTest class
 *
 * @package       Cake.Test.Case.Cache
 */",
 "/**
 * Test function to be used in event dispatching
 *
 * @return void
 */",
 "/**
 * Test function to be used in event dispatching
 *
 * @return void
 */",
 "/**
 * Auxiliary function to help in stopPropagation testing
 *
 * @param CakeEvent $event 
 * @return void
 */",
 "/**
 * Mock class used to test event dispatching
 *
 * @package Cake.Test.Case.Event
 */",
 "/**
 * Test function to be used in event dispatching
 *
 * @return void
 */",
 "/**
 * Mock used for testing the subscriber objects
 *
 * @package Cake.Test.Case.Event
 */",
 "/**
 * Tests the attach() method for a single event key in multiple queues
 *
 * @return void
 */",
 "/**
 * Tests the attach() method for multiple event key in multiple queues
 *
 * @return void
 */",
 "/**
 * Tests detaching an event from a event key queue
 *
 * @return void
 */",
 "/**
 * Tests detaching an event from all event queues
 *
 * @return void
 */",
 "/**
 * Tests event dispatching
 *
 * @return void
 */",
 "/**
 * Tests event dispatching using event key name
 *
 * @return void
 */",
 "/**
 * Tests event dispatching with a return value
 *
 * @return void
 */",
 "/**
 * Tests that returning false in a callback stops the event
 *
 * @return void
 */",
 "/**
 * Tests event dispatching using priorities
 *
 * @return void
 */",
 "/**
 * Tests event dispatching with passed params
 *
 * @return void
 */",
 "/**
 * Tests subscribing a listener object and firing the events it subscribed to
 *
 * @return void
 */",
 "/**
 * Tests subscribing a listener object and firing the events it subscribed to
 *
 * @return void
 */",
 "/**
 * Tests that it is possible to get/set the manager singleton
 *
 * @return void
 */",
 "/**
 * Tests that the global event manager gets the event too from any other manager
 *
 * @return void
 */",
 "/**
 * Tests that stopping an event will not notify the rest of the listeners
 *
 * @return void
 */",
 "/**
 * Tests the CakeEventManager class functionality
 *
 */",
 "/**
 * Sets up a Dbo class instance for testing
 *
 */",
 "/**
 * Sets up a Dbo class instance for testing
 *
 */",
 "/**
 * Test Dbo value method
 *
 * @group quoting
 */",
 "/**
*testthatlocalizedfloatsdon\'tcausetrouble.
*
*@groupquoting
*@returnvoid
*/",
 "/**
*testthatscientificnotationsareworkingcorrectly
*
*@returnvoid
*/",
 "/**
*testTinyintCastingmethod
*
*
*@returnvoid
*/",
 "/**
*testLastAffectedmethod
*
*
*@returnvoid
*/",
 "/**
*testIndexDetectionmethod
*
*@groupindices
*@returnvoid
*/",
 "/**
*testBuildColumnmethod
*
*@returnvoid
*/",
 "/**
*MySQL4.xreturnsindexdatainadifferentformat,
*UsingamockensurethatMySQL4.xoutputisproperlyparsed.
*
*@groupindices
*@returnvoid
*/",
 "/**
*testColumnmethod
*
*@returnvoid
*/",
 "/**
*testAlterSchemaIndexesmethod
*
*@groupindices
*@returnvoid
*/",
 "/**
*testsavingandretrievalofblobs
*
*@returnvoid
*/",
 "/**
*testalteringthetablesettingswithschema.
*
*@returnvoid
*/",
 "/**
*testalterSchemaontwotables.
*
*@returnvoid
*/",
 "/**
*testReadTableParametersmethod
*
*@returnvoid
*/",
 "/**
*testBuildTableParametersmethod
*
*@returnvoid
*/",
 "/**
*testBuildTableParametersmethod
*
*@returnvoid
*/",
 "/**
*testthatchangingthevirtualFieldSeparatorallowsfor__fields.
*
*@returnvoid
*/",
 "/**
*Testdescribe()onafixture.
*
*@returnvoid
*/",
 "/**
*testthatadescribe()getsadditionalfieldParameters
*
*@returnvoid
*/",
 "/**
*TeststhatlistSourcesmethodsendsthecorrectqueryandparsestheresultaccordingly
*@returnvoid
*/",
 "/**
*testthatlistDetailedSourceswithanamedtablethatdoesn\'texist.
*
*@returnvoid
*/",
 "/**
*TeststhatgetVersionmethodsendsthecorrectqueryforgettingthemysqlversion
*@returnvoid
*/",
 "/**
*TeststhatgetVersionmethodsendsthecorrectqueryforgettingtheclientencoding
*@returnvoid
*/",
 "/**
*testFieldDoubleEscapingmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQuerySelfJoinmethod
*
*@returnvoid
*/",
 "/**
*buildRelatedModelsmethod
*
*@paramModel$model
*@returnvoid
*/",
 "/**
*&_prepareAssociationQuerymethod
*
*@paramModel$model
*@paramarray$queryData
*@paramarray$binding
*@returnvoid
*/",
 "/**
*HelpermethodcopiedfromDboSource::_scrubQueryData()
*
*@paramarray$data
*@returnarray
*/",
 "/**
*testGenerateInnerJoinAssociationQuerymethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQuerySelfJoinWithConditionsInHasOneBindingmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQuerySelfJoinWithConditionsInBelongsToBindingmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQuerySelfJoinWithConditionsmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasOnemethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasOneWithConditionsmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryBelongsTomethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryBelongsToWithConditionsmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasManymethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasManyWithLimitmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasManyWithConditionsmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasManyWithOffsetAndLimitmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasManyWithPageAndLimitmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasManyWithFieldsmethod
*
*@returnvoid
*/",
 "/**
*testgenerateAssociationQuerywithahasManyandanaggregatefunction.
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasAndBelongsToManymethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasAndBelongsToManyWithConditionsmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasAndBelongsToManyWithOffsetAndLimitmethod
*
*@returnvoid
*/",
 "/**
*testGenerateAssociationQueryHasAndBelongsToManyWithPageAndLimitmethod
*
*@returnvoid
*/",
 "/**
*testSelectDistictmethod
*
*@returnvoid
*/",
 "/**
 * testStringConditionsParsing method
 *
 * @return void
 */",
 "/**
 * testQuotesInStringConditions method
 *
 * @return void
 */",
 "/**
 * testParenthesisInStringConditions method
 *
 * @return void
 */",
 "/**
 * testParenthesisInArrayConditions method
 *
 * @return void
 */",
 "/**
 * testArrayConditionsParsing method
 *
 * @return void
 */",
 "/**
 * testArrayConditionsParsingComplexKeys method
 *
 * @return void
 */",
 "/**
 * testMixedConditionsParsing method
 *
 * @return void
 */",
 "/**
 * testConditionsOptionalArguments method
 *
 * @return void
 */",
 "/**
 * testConditionsWithModel
 *
 * @return void
 */",
 "/**
 * testFieldParsing method
 *
 * @return void
 */",
 "/**
 * test that fields() will accept objects made from DboSource::expression
 *
 * @return void
 */",
 "/**
 * testRenderStatement method
 *
 * @return void
 */",
 "/**
 * testSchema method
 *
 * @return void
 */",
 "/**
 * testDropSchemaNoSchema method
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * testOrderParsing method
 *
 * @return void
 */",
 "/**
 * testComplexSortExpression method
 *
 * @return void
 */",
 "/**
 * testCalculations method
 *
 * @return void
 */",
 "/**
 * testLength method
 *
 * @return void
 */",
 "/**
 * testBuildIndex method
 *
 * @return void
 */",
 "/**
 * testBuildColumn method
 *
 * @return void
 */",
 "/**
 * testBuildColumnBadType method
 *
 * @expectedException PHPUnit_Framework_Error
 * @return void
 */",
 "/**
 * test hasAny()
 *
 * @return void
 */",
 "/**
 * test fields generating usable virtual fields to use in query
 *
 * @return void
 */",
 "/**
 * test conditions to generate query conditions for virtual fields
 *
 * @return void
 */",
 "/**
 * test that virtualFields with complex functions and aliases work.
 *
 * @return void
 */",
 "/**
 * test calculate to generate claculate statements on virtual fields
 *
 * @return void
 */",
 "/**
 * test reading virtual fields containing newlines when recursive > 0
 *
 * @return void
 */",
 "/**
 * test group to generate GROUP BY statements on virtual fields
 *
 * @return void
 */",
 "/**
 * test that virtualFields with complex functions and aliases work.
 *
 * @return void
 */",
 "/**
 * test that execute runs queries.
 *
 * @return void
 */",
 "/**
 * test a full example of using virtual fields
 *
 * @return void
 */",
 "/**
 * test reading complex virtualFields with subqueries.
 *
 * @return void
 */",
 "/**
 * testIntrospectType method
 *
 * @return void
 */",
 "/**
 * testRealQueries method
 *
 * @return void
 */",
 "/**
 * @expectedException MissingConnectionException
 * @return void
 */",
 "/**
 * testStatements method
 *
 * @return void
 */",
 "/**
 * Test deletes with a mock.
 *
 * @return void
 */",
 "/**
 * Test truncate with a mock.
 *
 * @return void
 */",
 "/**
 * Test nested transaction
 *
 * @return void
 */",
 "/**
 * DboMysqlTest class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * AppController class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * beforeFind method
 *
 * @param mixed $query
 * @return void
 */",
 "/**
 * find method
 *
 * @param string $type
 * @param array $options
 * @return void
 */",
 "/**
 * ControllerPost class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * ControllerPostsController class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * ControllerComment class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * ControllerAlias class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * NameTest class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * index method
 *
 * @param mixed $testId
 * @param mixed $test2Id
 * @return void
 */",
 "/**
 * view method
 *
 * @param mixed $testId
 * @param mixed $test2Id
 * @return void
 */",
 "/**
 * TestController class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * beforeRedirect method
 *
 * @return void
 */",
 "/**
 * initialize method
 *
 * @return void
 */",
 "/**
 * startup method
 *
 * @return void
 */",
 "/**
 * shutdown method
 *
 * @return void
 */",
 "/**
 * beforeRender callback
 *
 * @return void
 */",
 "/**
 * TestComponent class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * AnotherTestController class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * reset environment.
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * testLoadModel method
 *
 * @return void
 */",
 "/**
 * testLoadModel method from a plugin controller
 *
 * @return void
 */",
 "/**
 * testConstructClasses method
 *
 * @return void
 */",
 "/**
 * testAliasName method
 *
 * @return void
 */",
 "/**
 * testFlash method
 *
 * @return void
 */",
 "/**
 * testControllerSet method
 *
 * @return void
 */",
 "/**
 * testRender method
 *
 * @return void
 */",
 "/**
 * test that a component beforeRender can change the controller view class.
 *
 * @return void
 */",
 "/**
 * test that a component beforeRender can change the controller view class.
 *
 * @return void
 */",
 "/**
 * testToBeInheritedGuardmethods method
 *
 * @return void
 */",
 "/**
 * Generates status codes for redirect test.
 *
 * @return void
 */",
 "/**
 * testRedirect method
 *
 * @dataProvider statusCodeProvider
 * @return void
 */",
 "/**
 * test redirecting by message
 *
 * @dataProvider statusCodeProvider
 * @return void
 */",
 "/**
 * test that redirect triggers methods on the components.
 *
 * @return void
 */",
 "/**
 * test that beforeRedirect callback returning null doesn\'t affect things.
 *
 * @return void
 */",
 "/**
 * test that beforeRedirect callback returning null doesn\'t affect things.
 *
 * @return void
 */",
 "/**
 * test that beforeRedirect callback returning false in controller
 *
 * @return void
 */",
 "/**
 * Test that beforeRedirect works with returning an array from the controller method.
 *
 * @return void
 */",
 "/**
 * testMergeVars method
 *
 * @return void
 */",
 "/**
 * test that options from child classes replace those in the parent classes.
 *
 * @return void
 */",
 "/**
 * Ensure that _mergeControllerVars is not being greedy and merging with
 * ControllerTestAppController when you make an instance of Controller
 *
 * @return void
 */",
 "/**
 * testReferer method
 *
 * @return void
 */",
 "/**
 * testSetAction method
 *
 * @return void
 */",
 "/**
 * testValidateErrors method
 *
 * @return void
 */",
 "/**
 * test that validateErrors works with any old model.
 *
 * @return void
 */",
 "/**
 * testPostConditions method
 *
 * @return void
 */",
 "/**
 * testControllerHttpCodes method
 *
 * @return void
 */",
 "/**
 * Tests that the startup process calls the correct functions
 *
 * @return void
 */",
 "/**
 * Tests that the shutdown process calls the correct functions
 *
 * @return void
 */",
 "/**
 * Tests that the shutdown process calls the correct functions
 *
 * @return void
 */",
 "/**
 * Tests that the shutdown process calls the correct functions
 *
 * @return void
 */",
 "/**
 * test that BC works for attributes on the request object.
 *
 * @return void
 */",
 "/**
 * test that the BC wrapper doesn\'t interfere with models and components.
 *
 * @return void
 */",
 "/**
 * test that using Controller::paginate() falls back to PaginatorComponent
 *
 * @return void
 */",
 "/**
 * testMissingAction method
 *
 * @expectedException MissingActionException
 * @expectedExceptionMessage Action TestController::missing() could not be found.
 * @return void
 */",
 "/**
 * test invoking private methods.
 *
 * @expectedException PrivateActionException
 * @expectedExceptionMessage Private Action TestController::private_m() is not directly accessible.
 * @return void
 */",
 "/**
 * test invoking protected methods.
 *
 * @expectedException PrivateActionException
 * @expectedExceptionMessage Private Action TestController::protected_m() is not directly accessible.
 * @return void
 */",
 "/**
 * test invoking hidden methods.
 *
 * @expectedException PrivateActionException
 * @expectedExceptionMessage Private Action TestController::_hidden() is not directly accessible.
 * @return void
 */",
 "/**
 * test invoking controller methods.
 *
 * @expectedException PrivateActionException
 * @expectedExceptionMessage Private Action TestController::redirect() is not directly accessible.
 * @return void
 */",
 "/**
 * test invoking controller methods.
 *
 * @expectedException PrivateActionException
 * @expectedExceptionMessage Private Action TestController::admin_add() is not directly accessible.
 * @return void
 */",
 "/**
 * test invoking controller methods.
 *
 * @return void
 */",
 "/**
 * ControllerTest class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Inspects the test to look for unloaded fixtures and loads them
 *
 * @param CakeTestCase $test the test case to inspect
 * @return void
 */",
 "/**
 * Initializes this class with a DataSource object to use as default for all fixtures
 *
 * @return void
 */",
 "/**
 * Looks for fixture files and instantiates the classes accordingly
 *
 * @param array $fixtures the fixture names to load using the notation {type}.{name}
 * @return void
 * @throws UnexpectedValueException when a referenced fixture does not exist.
 */",
 "/**
 * Runs the drop and create commands on the fixtures if necessary.
 *
 * @param CakeTestFixture $fixture the fixture object to create
 * @param DataSource $db the datasource instance to use
 * @param boolean $drop whether drop the fixture if it is already created or not
 * @return void
 */",
 "/**
 * Creates the fixtures tables and inserts data on them.
 *
 * @param CakeTestCase $test the test to inspect for fixture loading
 * @return void
 */",
 "/**
 * Truncates the fixtures tables
 *
 * @param CakeTestCase $test the test to inspect for fixture unloading
 * @return void
 */",
 "/**
 * Creates a single fixture table and loads data into it.
 *
 * @param string $name of the fixture
 * @param DataSource $db DataSource instance or leave null to get DataSource from the fixture
 * @return void
 * @throws UnexpectedValueException if $name is not a previously loaded class
 */",
 "/**
 * Drop all fixture tables loaded by this class
 *
 * @return void
 */",
 "/**
 * A factory class to manage the life cycle of test fixtures
 *
 * @package       Cake.TestSuite.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Load a file and find the first test case / suite in that file.
 *
 * @param string $filePath
 * @param string $params
 * @return ReflectionClass
 */",
 "/**
 * Convert path fragments used by Cake\'s test runner to absolute paths that can be fed to PHPUnit.
 *
 * @return void
 */",
 "/**
 * Generates the base path to a set of tests based on the parameters.
 *
 * @param array $params
 * @return string The base path.
 */",
 "/**
 * Get the list of files for the test listing.
 *
 * @return void
 */",
 "/**
 * Gets a recursive list of files from a given directory and matches then against
 * a given fileTestFunction, like isTestCaseFile()
 *
 * @param string $directory The directory to scan for files.
 * @param mixed $fileTestFunction
 */",
 "/**
 * TestLoader for CakePHP Test suite.
 *
 * Turns partial paths used on the testsuite console and web UI into full file paths.
 *
 * @package Cake.TestSuite
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown()
 *
 * @return void
 */",
 "/**
 * test bake()
 *
 * @return void
 */",
 "/**
 * test execute with no args, flowing into interactive,
 *
 * @return void
 */",
 "/**
 * Test Execute
 *
 * @return void
 */",
 "/**
 * Test that findPath ignores paths that don\'t exist.
 *
 * @return void
 */",
 "/**
 * PluginTaskPlugin class
 *
 * @package       Cake.Test.Case.Console.Command.Task
 */",
 "/**
 * testGetFilename method
 *
 * @param string $action
 * @return void
 */",
 "/**
 * TestScaffoldView class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * ScaffoldViewMockController class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testGetViewFilename method
 *
 * @return void
 */",
 "/**
 * test getting the view file name for themed scaffolds.
 *
 * @return void
 */",
 "/**
 * test default index scaffold generation
 *
 * @return void
 */",
 "/**
 * test default view scaffold generation
 *
 * @return void
 */",
 "/**
 * test default view scaffold generation
 *
 * @return void
 */",
 "/**
 * Test Admin Index Scaffolding.
 *
 * @return void
 */",
 "/**
 * Test Admin Index Scaffolding.
 *
 * @return void
 */",
 "/**
 * Test Admin Index Scaffolding.
 *
 * @return void
 */",
 "/**
 * ScaffoldViewTest class
 *
 * @package       Cake.Test.Case.Controller
 */",
 "/**
 * testUtf8 method
 *
 * @return void
 */",
 "/**
 * testAscii method
 *
 * @return void
 */",
 "/**
 * testUsingMbStripos method
 *
 * @return void
 */",
 "/**
 * testMultibyteStripos method
 *
 * @return void
 */",
 "/**
 * testUsingMbStristr method
 *
 * @return void
 */",
 "/**
 * testMultibyteStristr method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrlen method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrlen method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrpos method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrpos method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrrchr method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrrchr method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrrichr method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrrichr method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrripos method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrripos method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrrpos method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrrpos method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrstr method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrstr method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrtolower method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrtolower method
 *
 * @return void
 */",
 "/**
 * testUsingMbStrtoupper method
 *
 * @return void
 */",
 "/**
 * testMultibyteStrtoupper method
 *
 * @return void
 */",
 "/**
 * testUsingMbSubstrCount method
 *
 * @return void
 */",
 "/**
 * testMultibyteSubstrCount method
 *
 * @return void
 */",
 "/**
 * testUsingMbSubstr method
 *
 * @return void
 */",
 "/**
 * testMultibyteSubstr method
 *
 * @return void
 */",
 "/**
 * testMultibyteSubstr method
 *
 * @return void
 */",
 "/**
 * MultibyteTest class
 *
 * @package       Cake.Test.Case.I18n
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * execute method
 *
 * @param mixed $sql
 * @param mixed $params
 * @param mixed $prepareOptions
 * @return mixed
 */",
 "/**
 * fetchAll method
 *
 * @param mixed $sql
 * @return void
 */",
 "/**
 * getLastQuery method
 *
 * @return string
 */",
 "/**
 * getPrimaryKey method
 *
 * @param mixed $model
 * @return string
 */",
 "/**
 * clearFieldMappings method
 *
 * @return void
 */",
 "/**
 * describe method
 *
 * @param object $model
 * @return void
 */",
 "/**
 * SqlserverTestDb class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * find method
 *
 * @param mixed $conditions
 * @param mixed $fields
 * @param mixed $order
 * @param mixed $recursive
 * @return void
 */",
 "/**
 * SqlserverTestModel class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * SqlserverClientTestModel class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * closeCursor method
 *
 * @return void
 */",
 "/**
 * fetch method
 *
 * @return void
 */",
 "/**
 * SqlserverTestResultIterator class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * Sets up a Dbo class instance for testing
 *
 */",
 "/**
 * tearDown method
 *
 * @return void
 */",
 "/**
 * testQuoting method
 *
 * @return void
 */",
 "/**
 * testFields method
 *
 * @return void
 */",
 "/**
 * testDistinctFields method
 *
 * @return void
 */",
 "/**
 * testDistinctWithLimit method
 *
 * @return void
 */",
 "/**
 * testDescribe method
 *
 * @return void
 */",
 "/**
 * testBuildColumn
 *
 * @return void
 */",
 "/**
 * testBuildIndex method
 *
 * @return void
 */",
 "/**
 * testUpdateAllSyntax method
 *
 * @return void
 */",
 "/**
 * testGetPrimaryKey method
 *
 * @return void
 */",
 "/**
 * SQL server < 11 doesn\'t have proper limit/offset support, test that our hack works.
 *
 * @return void
 */",
 "/**
 * Test that the return of stored procedures is honoured
 *
 * @return void
 */",
 "/**
 * SqlserverTest class
 *
 * @package       Cake.Test.Case.Model.Datasource.Database
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * setUp method
 *
 * @return void
 */",
 "/**
 * test the parsing of routes.
 *
 * @return void
 */",
 "/**
 * test case for RedirectRoute
 *
 * @package       Cake.Test.Case.Routing.Route
 */",
 "/**
 * Setup
 *
 * @return void
 */",
 "/**
 * testSend method
 *
 * @return void
 */",
 "/**
 * Test case
 *
 */",
 "/**
 * setup create a request object to get out of router later.
 *
 * @return void
 */",
 "/**
 * tearDown
 *
 * @return void
 */",
 "/**
 * test error handling when debug is on, an error should be printed from Debugger.
 *
 * @return void
 */",
 "/**
 * provides errors for mapping tests.
 *
 * @return void
 */",
 "/**
 * test error mappings
 *
 * @dataProvider errorProvider
 * @return void
 */",
 "/**
 * test error prepended by @
 *
 * @return void
 */",
 "/**
 * Test that errors go into CakeLog when debug = 0.
 *
 * @return void
 */",
 "/**
 * Test that errors going into CakeLog include traces.
 *
 * @return void
 */",
 "/**
 * test handleException generating a page.
 *
 * @return void
 */",
 "/**
 * test handleException generating log.
 *
 * @return void
 */",
 "/**
 * tests it is possible to load a plugin exception renderer
 *
 * @return void
 */",
 "/**
 * test handleFatalError generating a page.
 *
 * @return void
 */",
 "/**
 * test handleException generating log.
 *
 * @return void
 */",
 "/**
 * ErrorHandlerTest class
 *
 * @package       Cake.Test.Case.Error
 */",
 "/**
 * Construct and set up given controller with given parameters.
 *
 * @param Controller $controller Controller to scaffold
 * @param CakeRequest $request Request parameters.
 * @throws MissingModelException
 */",
 "/**
 * Renders a view action of scaffolded model.
 *
 * @param CakeRequest $request Request Object for scaffolding
 * @return mixed A rendered view of a row from Models database table
 * @throws NotFoundException
 */",
 "/**
 * Renders index action of scaffolded model.
 *
 * @param array $params Parameters for scaffolding
 * @return mixed A rendered view listing rows from Models database table
 */",
 "/**
 * Renders an add or edit action for scaffolded model.
 *
 * @param string $action Action (add or edit)
 * @return mixed A rendered view with a form to edit or add a record in the Models database table
 */",
 "/**
 * Saves or updates the scaffolded model.
 *
 * @param CakeRequest $request Request Object for scaffolding
 * @param string $action add or edit
 * @return mixed Success on save/update, add/edit form if data is empty or error if save or update fails
 * @throws NotFoundException
 */",
 "/**
 * Performs a delete on given scaffolded Model.
 *
 * @param CakeRequest $request Request for scaffolding
 * @return mixed Success on delete, error if delete fails
 * @throws MethodNotAllowedException When HTTP method is not a DELETE
 * @throws NotFoundException When id being deleted does not exist.
 */",
 "/**
 * Sends a message to the user.  Either uses Sessions or flash messages depending
 * on the availability of a session
 *
 * @param string $message Message to display
 * @return void
 */",
 "/**
 * Show a scaffold error
 *
 * @return mixed A rendered view showing the error
 */",
 "/**
 * When methods are now present in a controller
 * scaffoldView is used to call default Scaffold methods if:
 * `public $scaffold;` is placed in the controller\'s class definition.
 *
 * @param CakeRequest $request Request object for scaffolding
 * @return mixed A rendered view of scaffold action, or showing the error
 * @throws MissingActionException When methods are not scaffolded.
 * @throws MissingDatabaseException When the database connection is undefined.
 */",
 "/**
 * Returns associations for controllers models.
 *
 * @return array Associations for model
 */",
 "/**
 * Scaffolding is a set of automatic actions for starting web development work faster.
 *
 * Scaffold inspects your database tables, and making educated guesses, sets up a
 * number of pages for each of your Models. These pages have data forms that work,
 * and afford the web developer an early look at the data, and the possibility to over-ride
 * scaffolded actions with custom-made ones.
 *
 * @package       Cake.Controller
 */",
 "/**
 * Attaches a model object and loads a list of behaviors
 *
 * @todo Make this method a constructor instead..
 * @param string $modelName
 * @param array $behaviors
 * @return void
 */",
 "/**
 * Backwards compatible alias for load()
 *
 * @param string $behavior
 * @param array $config
 * @return void
 * @deprecated Replaced with load()
 */",
 "/**
 * Loads a behavior into the collection. You can use use `$config[\'enabled\'] = false`
 * to load a behavior with callbacks disabled. By default callbacks are enabled. Disable behaviors
 * can still be used as normal.
 *
 * You can alias your behavior as an existing behavior by setting the \'className\' key, i.e.,
 * {{{
 * public $actsAs = array(
 *   \'Tree\' => array(
 *     \'className\' => \'AliasedTree\'
 *   );
 * );
 * }}}
 * All calls to the `Tree` behavior would use `AliasedTree` instead.
 *
 * @param string $behavior CamelCased name of the behavior to load
 * @param array $config Behavior configuration parameters
 * @return boolean True on success, false on failure
 * @throws MissingBehaviorException when a behavior could not be found.
 */",
 "/**
 * Detaches a behavior from a model
 *
 * @param string $name CamelCased name of the behavior to unload
 * @return void
 */",
 "/**
 * Backwards compatible alias for unload()
 *
 * @param string $name Name of behavior
 * @return void
 * @deprecated Use unload instead.
 */",
 "/**
 * Dispatches a behavior method.  Will call either normal methods or mapped methods.
 *
 * If a method is not handled by the BehaviorCollection, and $strict is false, a
 * special return of `array(\'unhandled\')` will be returned to signal the method was not found.
 *
 * @param Model $model The model the method was originally called on.
 * @param string $method The method called.
 * @param array $params Parameters for the called method.
 * @param boolean $strict If methods are not found, trigger an error.
 * @return array All methods for all behaviors attached to this object
 */",
 "/**
 * Gets the method list for attached behaviors, i.e. all public, non-callback methods.
 * This does not include mappedMethods.
 *
 * @return array All public methods for all behaviors attached to this collection
 */",
 "/**
 * Check to see if a behavior in this collection implements the provided method.  Will
 * also check mappedMethods.
 *
 * @param string $method The method to find.
 * @param boolean $callback Return the callback for the method.
 * @return mixed If $callback is false, a boolean will be returned, if its true, an array
 *   containing callback information will be returned.  For mapped methods the array will have 3 elements.
 */",
 "/**
 * Returns the implemented events that will get routed to the trigger function
 * in order to dispatch them separately on each behavior
 *
 * @return array
 */",
 "/**
 * Model behavior collection class.
 *
 * Defines the Behavior interface, and contains common model interaction functionality.
 *
 * @package       Cake.Model
 */",
 "/**
 * Short description for class.
 *
 * @package       Cake.Test.Fixture
 */",
 "/**
 * Constructor
 *
 * ### Settings:
 *
 * - `engine` Class name to use to replace String functionality.
 *            The class needs to be placed in the `Utility` directory.
 *
 * @param View $View the view object the helper is attached to.
 * @param array $settings Settings array Settings array
 * @throws CakeException when the engine class could not be found.
 */",
 "/**
 * Call methods from String utility class
 */",
 "/**
 * Adds links (<a href=....) to a given text, by finding text that begins with
 * strings like http:// and ftp://.
 *
 * ### Options
 *
 * - `escape` Control HTML escaping of input. Defaults to true.
 *
 * @param string $text Text
 * @param array $options Array of HTML options, and options listed above.
 * @return string The text with links
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::autoLinkUrls
 */",
 "/**
 * Saves the placeholder for a string, for later use.  This gets around double
 * escaping content in URL\'s.
 *
 * @param array $matches An array of regexp matches.
 * @return string Replaced values.
 */",
 "/**
 * Replace placeholders with links.
 *
 * @param string $text The text to operate on.
 * @param array $htmlOptions The options for the generated links.
 * @return string The text with links inserted.
 */",
 "/**
 * Links email addresses
 *
 * @param string $text The text to operate on
 * @param array $options An array of options to use for the HTML.
 * @return string
 * @see TextHelper::autoLinkEmails()
 */",
 "/**
 * Adds email links (<a href=\"mailto:....) to a given text.
 *
 * ### Options
 *
 * - `escape` Control HTML escaping of input. Defaults to true.
 *
 * @param string $text Text
 * @param array $options Array of HTML options, and options listed above.
 * @return string The text with links
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::autoLinkEmails
 */",
 "/**
 * Convert all links and email addresses to HTML links.
 *
 * ### Options
 *
 * - `escape` Control HTML escaping of input. Defaults to true.
 *
 * @param string $text Text
 * @param array $options Array of HTML options, and options listed above.
 * @return string The text with links
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::autoLink
 */",
 "/**
 * @see String::highlight()
 *
 * @param string $text Text to search the phrase in
 * @param string $phrase The phrase that will be searched
 * @param array $options An array of html attributes and options.
 * @return string The highlighted text
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::highlight
 */",
 "/**
 * @see String::stripLinks()
 *
 * @param string $text Text
 * @return string The text without links
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::stripLinks
 */",
 "/**
 * @see String::truncate()
 *
 * @param string $text String to truncate.
 * @param integer $length Length of returned string, including ellipsis.
 * @param array $options An array of html attributes and options.
 * @return string Trimmed string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::truncate
 */",
 "/**
 * @see String::excerpt()
 *
 * @param string $text String to search the phrase in
 * @param string $phrase Phrase that will be searched for
 * @param integer $radius The amount of characters that will be returned on each side of the founded phrase
 * @param string $ending Ending that will be appended
 * @return string Modified string
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::excerpt
 */",
 "/**
 * @see String::toList()
 *
 * @param array $list The list to be joined
 * @param string $and The word used to join the last and second last items together with. Defaults to \'and\'
 * @param string $separator The separator used to join all the other items together. Defaults to \', \'
 * @return string The glued together string.
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html#TextHelper::toList
 */",
 "/**
 * Text helper library.
 *
 * Text manipulations: Highlight, excerpt, truncate, strip of links, convert email addresses to mailto: links...
 *
 * @package       Cake.View.Helper
 * @property      HtmlHelper $Html
 * @link http://book.cakephp.org/2.0/en/core-libraries/helpers/text.html
 * @see String
 */"]
