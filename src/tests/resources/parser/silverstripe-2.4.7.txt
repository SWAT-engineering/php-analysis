 ["/**
	 * Creates a new optionset field.
	 * @param name The field name
	 * @param title The field title
	 * @param source An map of the dropdown items
	 * @param value The current value
	 * @param form The parent form
	 */",
 "/**
	 * Create a UL tag containing sets of radio buttons and labels.  The IDs are set to
	 * FieldID_ItemKey, where ItemKey is the key with all non-alphanumerics removed.
	 * 
	 * @todo Should use CheckboxField FieldHolder rather than constructing own markup.
	 */",
 "/**
	 * Mark certain elements as disabled,
	 * regardless of the {@link setDisabled()} settings.
	 * 
	 * @param array $items Collection of array keys, as defined in the $source array
	 */",
 "/**
	 * @return Array
	 */",
 "/**
 * Set of radio buttons designed to emulate a dropdown.
 * It even uses the same constructor as a dropdown field.
 * 
 * This field allows you to ensure that a form element is submitted is not optional and is part of a fixed set of 
 * data. This field uses the input type of radio. It\'s a direct subclass of {@link DropdownField}, 
 * so the constructor and arguments are in the same format.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * new OptionsetField(
 *    $name = \"Foobar\",
 *    $title = \"FooBar\'s optionset\",
 *    $source = array(
 *       \"1\" => \"Option 1\",
 *       \"2\" => \"Option 2\",
 *       \"3\" => \"Option 3\",
 *       \"4\" => \"Option 4\",
 *       \"5\" => \"Option 5\"
 *    ),
 *    $value = \"1\"
 * );
 * </code>
 * 
 * You can use the helper functions on data object set to create the source array. eg: 
 * 
 * <code>
 * //Database request for the object
 * $myDoSet = DataObject::get(\"FooBars\",\"\");
 * if($myDoSet){
 *  // This returns an array of ID => Title
 *  $map = $myDoSet->toDropDownMap();
 *  
 *   // Instantiate the OptionsetField 
 *   $fieldset = new Fieldset(
 *     new OptionsetField(
 *      $name = \"Foobar\",
 *      $title = \"FooBar\'s optionset\",
 *      $source = $map,
 *      $value = $map[0]
 *     )
 *   );
 * }
 * 
 * // Pass the fields to the form constructor. etc
 * </code>
 * 
 * @see CheckboxSetField for multiple selections through checkboxes instead.
 * @see DropdownField for a simple <select> field with a single element.
 * @see TreeDropdownField for a rich and customizeable UI that can visualize a tree of selectable elements
 * 
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
	 * Enable the default configuration of MySQL full-text searching on the given data classes.
	 * It can be used to limit the searched classes, but not to add your own classes.
	 * For this purpose, please use {@link Object::add_extension()} directly:
	 * <code>
	 * Object::add_extension(\'MyObject\', \"FulltextSearchable(\'MySearchableField,\'MyOtherField\')\");
	 * </code>
	 * 
	 * Caution: This is a wrapper method that should only be used in _config.php,
	 * and only be called once in your code.
	 * 
	 * @param Array $searchableClasses The extension will be applied to all DataObject subclasses
	 *  listed here. Default: {@link SiteTree} and {@link File}.
	 */",
 "/**
	 * @param Array|String $searchFields Comma-separated list (or array) of database column names
	 *  that can be searched on. Used for generation of the database index defintions.
	 */",
 "/**
	 * Shows all classes that had the {@link FulltextSearchable} extension applied through {@link enable()}.
	 * 
	 * @return Array
	 */",
 "/**
 * Provides a simple search engine for your site based on the MySQL FULLTEXT index.
 * Adds the {@link FulltextSearchable} extension to data classes,
 * as well as the {@link ContentControllerSearchExtension} to {@link ContentController}.
 * (this means you can use $SearchForm in your template without changing your own implementation).
 * 
 * @see http://doc.silverstripe.org/tutorial:4-site-search
 *
 * @package sapphire
 * @subpackage search
 */",
 "/**
     * Generates the standard date object, could be a unix timestamp, localized date,
     * string, integer, array and so on. Also parts of dates or time are supported
     * Always set the default timezone: http://php.net/date_default_timezone_set
     * For example, in your bootstrap: date_default_timezone_set(\'America/Los_Angeles\');
     * For detailed instructions please look in the docu.
     *
     * @param  string|integer|Zend_Date|array  $date    OPTIONAL Date value or value of date part to set
     *                                                 ,depending on $part. If null the actual time is set
     * @param  string                          $part    OPTIONAL Defines the input format of $date
     * @param  string|Zend_Locale              $locale  OPTIONAL Locale for parsing input
     * @return Zend_Date
     * @throws Zend_Date_Exception
     */",
 "/**
     * Sets class wide options, if no option was given, the actual set options will be returned
     *
     * @param  array  $options  Options to set
     * @throws Zend_Date_Exception
     * @return Options array if no option was given
     */",
 "/**
     * Returns this object\'s internal UNIX timestamp (equivalent to Zend_Date::TIMESTAMP).
     * If the timestamp is too large for integers, then the return value will be a string.
     * This function does not return the timestamp as an object.
     * Use clone() or copyPart() instead.
     *
     * @return integer|string  UNIX timestamp
     */",
 "/**
     * Returns the calculated timestamp
     * HINT: timestamps are always GMT
     *
     * @param  string                          $calc    Type of calculation to make
     * @param  string|integer|array|Zend_Date  $stamp   Timestamp to calculate, when null the actual timestamp is calculated
     * @return Zend_Date|integer
     * @throws Zend_Date_Exception
     */",
 "/**
     * Sets a new timestamp
     *
     * @param  integer|string|array|Zend_Date  $timestamp  Timestamp to set
     * @return Zend_Date
     * @throws Zend_Date_Exception
     */",
 "/**
     * Adds a timestamp
     *
     * @param  integer|string|array|Zend_Date  $timestamp  Timestamp to add
     * @return Zend_Date
     * @throws Zend_Date_Exception
     */",
 "/**
     * Subtracts a timestamp
     *
     * @param  integer|string|array|Zend_Date  $timestamp  Timestamp to sub
     * @return Zend_Date
     * @throws Zend_Date_Exception
     */",
 "/**
     * Compares two timestamps, returning the difference as integer
     *
     * @param  integer|string|array|Zend_Date  $timestamp  Timestamp to compare
     * @return integer  0 = equal, 1 = later, -1 = earlier
     * @throws Zend_Date_Exception
     */",
 "/**
     * Returns a string representation of the object
     * Supported format tokens are:
     * G - era, y - year, Y - ISO year, M - month, w - week of year, D - day of year, d - day of month
     * E - day of week, e - number of weekday (1-7), h - hour 1-12, H - hour 0-23, m - minute, s - second
     * A - milliseconds of day, z - timezone, Z - timezone offset, S - fractional second, a - period of day
     *
     * Additionally format tokens but non ISO conform are:
     * SS - day suffix, eee - php number of weekday(0-6), ddd - number of days per month
     * l - Leap year, B - swatch internet time, I - daylight saving time, X - timezone offset in seconds
     * r - RFC2822 format, U - unix timestamp
     *
     * Not supported ISO tokens are
     * u - extended year, Q - quarter, q - quarter, L - stand alone month, W - week of month
     * F - day of week of month, g - modified julian, c - stand alone weekday, k - hour 0-11, K - hour 1-24
     * v - wall zone
     *
     * @param  string              $format  OPTIONAL Rule for formatting output. If null the default date format is used
     * @param  string              $type    OPTIONAL Type for the format string which overrides the standard setting
     * @param  string|Zend_Locale  $locale  OPTIONAL Locale for parsing input
     * @return string
     */",
 "/**
     * Returns a string representation of the date which is equal with the timestamp
     *
     * @return string
     */",
 "/**
     * Returns a integer representation of the object
     * But returns false when the given part is no value f.e. Month-Name
     *
     * @param  string|integer|Zend_Date  $part  OPTIONAL Defines the date or datepart to return as integer
     * @return integer|false
     */",
 "/**
     * Returns an array representation of the object
     *
     * @return array
     */",
 "/**
     * Returns a representation of a date or datepart
     * This could be for example a localized monthname, the time without date,
     * the era or only the fractional seconds. There are about 50 different supported date parts.
     * For a complete list of supported datepart values look into the docu
     *
     * @param  string              $part    OPTIONAL Part of the date to return, if null the timestamp is returned
     * @param  string|Zend_Locale  $locale  OPTIONAL Locale for parsing input
     * @return string  date or datepart
     */",
 "/**

*



*/",
 "/**

*


*/",
 "/**


*



*/",
 "/**


*


*/",
 "/**




*





*/",
 "/**







*





*/",
 "/**





*





*/",
 "/**


*





*/",
 "/**








*



*/",
 "/**

*


*/",
 "/**

*





*/",
 "/**

*






*/",
 "/**



*





*/",
 "/**



*





*/",
 "/**




*





*/",
 "/**



*


*/",
 "/**

*






*/",
 "/**




*





*/",
 "/**




*





*/",
 "/**




*





*/",
 "/**




*





*/",
 "/**

*


*/",
 "/**

*






*/",
 "/**




*





*/",
 "/**




*





*/",
 "/**





*





*/",
 "/**





*





*/",
 "/**




*


*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**


*


*/",
 "/**




*




*/",
 "/**





*




*/",
 "/**





*




*/",
 "/**





*




*/",
 "/**

*


*/",
 "/**


*






*/",
 "/**


*






*/",
 "/**


*






*/",
 "/**

*


*/",
 "/**

*

*/",
 "/**

*

*/",
 "/**

*

*/",
 "/**

*

*/",
 "/**

*


*/",
 "/**

*






*/",
 "/**

*





*/",
 "/**


*


*/",
 "/**






*




*/",
 "/**






*




*/",
 "/**






*




*/",
 "/**



*




*/",
 "/**


*


*/",
 "/**

*





*/",
 "/**






*




*/",
 "/**






*




*/",
 "/**






*




*/",
 "/**



*




*/",
 "/**


*


*/",
 "/**

*




*/",
 "/**







*




*/",
 "/**







*




*/",
 "/**







*




*/",
 "/**



*




*/",
 "/**



*


*/",
 "/**

*





*/",
 "/**





*




*/",
 "/**







*




*/",
 "/**







*




*/",
 "/**



*




*/",
 "/**


*


*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**



*




*/",
 "/**


*


*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**



*




*/",
 "/**


*


*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**



*




*/",
 "/**


*


*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**




*




*/",
 "/**



*




*/",
 "/**

*

*/",
 "/**

*



*/",
 "/**

*

*/",
 "/**


*



*/",
 "/**

*



*/",
 "/**

*



*/",
 "/**

*



*/",
 "/**


*


*/",
 "/**



*




*/",
 "/**



*




*/",
 "/**



*




*/",
 "/**




*



*/",
 "/**





*



*/",
 "/**

*

*/",
 "/**





*




*/",
 "/**

*



*/",
 "/**




*/",
 "/**
     * Constructor
     *
     * @param  array $options Associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Set the backend
     *
     * @param  object $backendObject
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Returns the backend
     *
     * @return object backend object
     */",
 "/**
     * Public frontend to set an option
     *
     * There is an additional validation (relatively to the protected _setOption method)
     *
     * @param  string $name  Name of the option
     * @param  mixed  $value Value of the option
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Public frontend to get an option value
     *
     * @param  string $name  Name of the option
     * @throws Zend_Cache_Exception
     * @return mixed option value
     */",
 "/**
     * Set an option
     *
     * @param  string $name  Name of the option
     * @param  mixed  $value Value of the option
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Force a new lifetime
     *
     * The new value is set for the core/frontend but for the backend too (directive)
     *
     * @param  int $newLifetime New lifetime (in seconds)
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @param  boolean $doNotUnserialize       Do not serialize (even if automatic_serialization is true) => for internal use
     * @return mixed|false Cached datas
     */",
 "/**
     * Test if a cache is available for the given id
     *
     * @param  string $id Cache id
     * @return boolean True is a cache is available, false else
     */",
 "/**
     * Save some data in a cache
     *
     * @param  mixed $data           Data to put in cache (can be another type than string if automatic_serialization is on)
     * @param  string $id             Cache id (if not set, the last cache id will be used)
     * @param  array $tags           Cache tags
     * @param  int $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @param  int   $priority         integer between 0 (very low priority) and 10 (maximum priority) used by some particular backends
     * @throws Zend_Cache_Exception
     * @return boolean True if no problem
     */",
 "/**
     * Remove a cache
     *
     * @param  string $id Cache id to remove
     * @return boolean True if ok
     */",
 "/**
     * Clean cache entries
     *
     * Available modes are :
     * \'all\' (default)  => remove all cache entries ($tags is not used)
     * \'old\'            => remove too old cache entries ($tags is not used)
     * \'matchingTag\'    => remove cache entries matching all given tags
     *                     ($tags can be an array of strings or a single string)
     * \'notMatchingTag\' => remove cache entries not matching one of the given tags
     *                     ($tags can be an array of strings or a single string)
     * \'matchingAnyTag\' => remove cache entries matching any given tags
     *                     ($tags can be an array of strings or a single string)
     *
     * @param  string       $mode
     * @param  array|string $tags
     * @throws Zend_Cache_Exception
     * @return boolean True if ok
     */",
 "/**
     * Return an array of stored cache ids which match given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which don\'t match given tags
     *
     * In case of multiple tags, a logical OR is made between tags
     *
     * @param array $tags array of tags
     * @return array array of not matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids
     *
     * @return array array of stored cache ids (string)
     */",
 "/**
     * Return an array of stored tags
     *
     * @return array array of stored tags (string)
     */",
 "/**
     * Return the filling percentage of the backend storage
     *
     * @return int integer between 0 and 100
     */",
 "/**
     * Give (if possible) an extra lifetime to the given cache id
     *
     * @param string $id cache id
     * @param int $extraLifetime
     * @return boolean true if ok
     */",
 "/**
     * Validate a cache id or a tag (security, reliable filenames, reserved prefixes...)
     *
     * Throw an exception if a problem is found
     *
     * @param  string $string Cache id or tag
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Validate a tags array (security, reliable filenames, reserved prefixes...)
     *
     * Throw an exception if a problem is found
     *
     * @param  array $tags Array of tags
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Make sure if we enable logging that the Zend_Log class
     * is available.
     * Create a default log object if none is set.
     *
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Log a message at the WARN (4) priority.
     *
     * @param string $message
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Make and return a cache id
     *
     * Checks \'cache_id_prefix\' and returns new id with prefix or simply the id if null
     *
     * @param  string $id Cache id
     * @return string Cache id (with or without prefix)
     */",
 "/**
 * @package    Zend_Cache
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Sets the internal value to ISO date format.
	 * 
	 * @param string|array $val String expects an ISO date format. Array notation with \'date\' and \'time\'
	 *  keys can contain localized strings. If the \'dmyfields\' option is used for {@link DateField},
	 *  the \'date\' value may contain array notation was well (see {@link DateField->setValue()}).
	 */",
 "/**
	 * @return DateField
	 */",
 "/**
	 * @return TimeField
	 */",
 "/**
	 * Note: Use {@link getDateField()} and {@link getTimeField()}
	 * to set field-specific config options.
	 * 
	 * @param string $name
	 * @param mixed $val
	 */",
 "/**
	 * Note: Use {@link getDateField()} and {@link getTimeField()}
	 * to get field-specific config options.
	 * 
	 * @param String $name
	 * @return mixed
	 */",
 "/**
 * A composite field for date and time entry,
 * based on {@link DateField} and {@link TimeField}.
 * Usually saves into a single {@link SS_Datetime} database column.
 * If you want to save into {@link Date} or {@link Time} columns,
 * please instanciate the fields separately.
 * 
 * # Configuration
 * 
 * All options in {@link setConfig()} are passed through to {@link DateField} and {@link TimeField}.
 * 
 * @package sapphire
 * @subpackage forms
 */",
 "/**
 * The readonly class for our {@link DatetimeField}.
 * 
 * @package forms
 * @subpackage fields-datetime
 */",
 "/**
	 * Determines if the field should render open or closed by default.
	 * 
	 * @param boolean
	 */",
 "/**
	 * @return String
	 */",
 "/**
 * Allows visibility of a group of fields to be toggled using \'+\' and \'-\' icons
 * @package forms
 * @subpackage fields-structural
 */",
 "/**
	 * Gets all orphans from \"Stage\" and \"Live\" stages.
	 * 
	 * @param string $class
	 * @param string $filter
	 * @param string $sort
	 * @param string $join
	 * @param int|array $limit
	 * @return DataObjectSet
	 */",
 "/**
	 * Handles URL requests.
	 *
	 *  - ViewableData::handleRequest() iterates through each rule in {@link self::$url_handlers}.
	 *  - If the rule matches, the named method will be called.
	 *  - If there is still more URL to be processed, then handleRequest() 
	 *    is called on the object that that method returns.
	 *
	 * Once all of the URL has been processed, the final result is returned.  
	 * However, if the final result is an array, this
	 * array is interpreted as being additional template data to customise the 
	 * 2nd to last result with, rather than an object
	 * in its own right.  This is most frequently used when a Controller\'s 
	 * action will return an array of data with which to
	 * customise the controller.
	 * 
	 * @param $request The {@link SS_HTTPRequest} object that is reponsible for distributing URL parsing
	 * @uses SS_HTTPRequest
	 * @uses SS_HTTPRequest->match()
	 * @return SS_HTTPResponse|RequestHandler|string|array
	 */",
 "/**
	 * Get a unified array of allowed actions on this controller (if such data is available) from both the controller
	 * ancestry and any extensions.
	 *
	 * @return array|null
	 */",
 "/**
	 * Checks if this request handler has a specific action (even if the current user cannot access it).
	 *
	 * @param string $action
	 * @return bool
	 */",
 "/**
	 * Check that the given action is allowed to be called from a URL.
	 * It will interrogate {@link self::$allowed_actions} to determine this.
	 */",
 "/**
	 * Throws a HTTP error response encased in a {@link SS_HTTPResponse_Exception}, which is later caught in
	 * {@link RequestHandler::handleAction()} and returned to the user.
	 *
	 * @param int $errorCode
	 * @param string $errorMessage Plaintext error message
	 * @uses SS_HTTPResponse_Exception
	 */",
 "/**
	 * Returns the SS_HTTPRequest object that this controller is using.
	 *
	 * @return SS_HTTPRequest
	 */",
 "/**
 * This class is the base class of any Sapphire object that can be used to handle HTTP requests.
 * 
 * Any RequestHandler object can be made responsible for handling its own segment of the URL namespace.
 * The {@link Director} begins the URL parsing process; it will parse the beginning of the URL to identify which
 * controller is being used.  It will then call {@link handleRequest()} on that Controller, passing it the parameters that it
 * parsed from the URL, and the {@link SS_HTTPRequest} that contains the remainder of the URL to be parsed.
 *
 * You can use ?debug_request=1 to view information about the different components and rule matches for a specific URL.
 *
 * In Sapphire, URL parsing is distributed throughout the object graph.  For example, suppose that we have a search form
 * that contains a {@link TreeMultiSelectField} named \"Groups\".  We want to use ajax to load segments of this tree as they are needed
 * rather than downloading the tree right at the beginning.  We could use this URL to get the tree segment that appears underneath
 * Group #36: \"admin/crm/SearchForm/field/Groups/treesegment/36\"
 *  - Director will determine that admin/crm is controlled by a new ModelAdmin object, and pass control to that.
 *    Matching Director Rule: \"admin/crm\" => \"ModelAdmin\" (defined in mysite/_config.php)
 *  - ModelAdmin will determine that SearchForm is controlled by a Form object returned by $this->SearchForm(), and pass control to that.
 *    Matching $url_handlers: \"$Action\" => \"$Action\" (defined in RequestHandler class)
 *  - Form will determine that field/Groups is controlled by the Groups field, a TreeMultiselectField, and pass control to that.
 *    Matching $url_handlers: \'field/$FieldName!\' => \'handleField\' (defined in Form class)
 *  - TreeMultiselectField will determine that treesegment/36 is handled by its treesegment() method.  This method will return an HTML fragment that is output to the screen.
 *    Matching $url_handlers: \"$Action/$ID\" => \"handleItem\" (defined in TreeMultiSelectField class)
 *
 * {@link RequestHandler::handleRequest()} is where this behaviour is implemented.
 * 
 * @package sapphire
 * @subpackage control
 */",
 "/**
	 * Returns TRUE if nested URLs (e.g. page/sub-page/) are currently enabled on this site.
	 *
	 * @return bool
	 */",
 "/**
	 * Set the (re)creation of default pages on /dev/build
	 *
	 * @param bool $option
	 */",
 "/**
	 * Fetches the {@link SiteTree} object that maps to a link.
	 *
	 * If you have enabled {@link SiteTree::nested_urls()} on this site, then you can use a nested link such as
	 * \"about-us/staff/\", and this function will traverse down the URL chain and grab the appropriate link.
	 *
	 * Note that if no model can be found, this method will fall over to a decorated alternateGetByLink method provided
	 * by a decorator attached to {@link SiteTree}
	 *
	 * @param string $link
	 * @param bool $cache
	 * @return SiteTree
	 */",
 "/**
	 * Return a subclass map of SiteTree
	 * that shouldn\'t be hidden through
	 * {@link SiteTree::$hide_ancestor}
	 *
	 * @return array
	 */",
 "/**
	 * Replace a \"[sitetree_link id=n]\" shortcode with a link to the page with the corresponding ID.
	 *
	 * @return string
	 */",
 "/**
	 * Return the link for this {@link SiteTree} object, with the {@link Director::baseURL()} included.
	 *
	 * @param string $action
	 * @return string
	 */",
 "/**
	 * Get the absolute URL for this page, including protocol and host.
	 *
	 * @param string $action
	 * @return string
	 */",
 "/**
	 * Return the link for this {@link SiteTree} object relative to the SilverStripe root.
	 *
	 * By default, it this page is the current home page, and there is no action specified then this will return a link
	 * to the root of the site. However, if you set the $action parameter to TRUE then the link will not be rewritten
	 * and returned in its full form.
	 *
	 * @uses RootURLController::get_homepage_link()
	 * @param string $action
	 * @return string
	 */",
 "/**
	 * Get the absolute URL for this page on the Live site.
	 */",
 "/**
	 * Return a CSS identifier generated from this page\'s link.
	 *
	 * @return string The URL segment
	 */",
 "/**
	 * Returns TRUE if this is the currently active page that is being used to handle a request.
	 *
	 * @return bool
	 */",
 "/**
	 * Check if this page is in the currently active section (e.g. it is either current or one of it\'s children is
	 * currently being viewed.
	 *
	 * @return bool
	 */",
 "/**
	 * Return \"link\" or \"current\" depending on if this is the {@link SiteTree::isCurrent()} current page.
	 *
	 * @return string
	 */",
 "/**
	 * Return \"link\" or \"section\" depending on if this is the {@link SiteTree::isSeciton()} current section.
	 *
	 * @return string
	 */",
 "/**
	 * Return \"link\", \"current\" or section depending on if this page is the current page, or not on the current page but
	 * in the current section.
	 *
	 * @return string
	 */",
 "/**
	 * Check if this page is in the given current section.
	 *
	 * @param string $sectionName Name of the section to check.
	 * @return boolean True if we are in the given section.
	 */",
 "/**
	 * Returns comments on this page. This will only show comments that
	 * have been marked as spam if \"?showspam=1\" is appended to the URL.
	 *
	 * @return DataObjectSet Comments on this page.
	 */",
 "/**
	 * Create a duplicate of this node. Doesn\'t affect joined data - create a
	 * custom overloading of this if you need such behaviour.
	 *
	 * @return SiteTree The duplicated object.
	 */",
 "/**
	 * Duplicates each child of this node recursively and returns the
	 * duplicate node.
	 *
	 * @return SiteTree The duplicated object.
	 */",
 "/**
	 * Duplicate this node and its children as a child of the node with the
	 * given ID
	 *
	 * @param int $id ID of the new node\'s new parent
	 */",
 "/**
	 * Return a breadcrumb trail to this page. Excludes \"hidden\" pages
	 * (with ShowInMenus=0).
	 *
	 * @param int $maxDepth The maximum depth to traverse.
	 * @param boolean $unlinked Do not make page names links
	 * @param string $stopAtPageType ClassName of a page to stop the upwards traversal.
	 * @param boolean $showHidden Include pages marked with the attribute ShowInMenus = 0 
	 * @return string The breadcrumb trail.
	 */",
 "/**
	 * Make this page a child of another page.
	 * 
	 * If the parent page does not exist, resolve it to a valid ID
	 * before updating this page\'s reference.
	 *
	 * @param SiteTree|int $item Either the parent object, or the parent ID
	 */",
 "/**
	 * Get the parent of this page.
	 *
	 * @return SiteTree Parent of this page.
	 */",
 "/**
	 * Return a string of the form \"parent - page\" or
	 * \"grandparent - parent - page\".
	 *
	 * @param int $level The maximum amount of levels to traverse.
	 * @param string $seperator Seperating string
	 * @return string The resulting string
	 */",
 "/**
	 * This function should return true if the current user can add children
	 * to this page. It can be overloaded to customise the security model for an
	 * application.
	 *
	 * Returns true if the member is allowed to do the given action.
	 *
	 * @uses DataObjectDecorator->can()
	 *
	 * If a page is set to inherit, but has no parent, it inherits from
	 * {@link SiteConfig}
	 *
	 * @param string $perm The permission to be checked, such as \'View\'.
	 * @param Member $member The member whose permissions need checking.
	 *                       Defaults to the currently logged in user.
	 *
	 * @return boolean True if the the member is allowed to do the given
	 *                 action.
	 *
	 * @todo Check we get a endless recursion if we use parent::can()
	 */",
 "/**
	 * This function should return true if the current user can add children
	 * to this page. It can be overloaded to customise the security model for an
	 * application.
	 * 
	 * Denies permission if any of the following conditions is TRUE:
	 * - alternateCanAddChildren() on a decorator returns FALSE
	 * - canEdit() is not granted
	 * - There are no classes defined in {@link $allowed_children}
	 * 
	 * @uses SiteTreeDecorator->canAddChildren()
	 * @uses canEdit()
	 * @uses $allowed_children
	 *
	 * @return boolean True if the current user can add children.
	 */",
 "/**
	 * This function should return true if the current user can view this
	 * page. It can be overloaded to customise the security model for an
	 * application.
	 * 
	 * Denies permission if any of the following conditions is TRUE:
	 * - canView() on any decorator returns FALSE
	 * - \"CanViewType\" directive is set to \"Inherit\" and any parent page return false for canView()
	 * - \"CanViewType\" directive is set to \"LoggedInUsers\" and no user is logged in
	 * - \"CanViewType\" directive is set to \"OnlyTheseUsers\" and user is not in the given groups
	 *
	 * @uses DataObjectDecorator->canView()
	 * @uses ViewerGroups()
	 *
	 * @return boolean True if the current user can view this page.
	 */",
 "/**
	 * This function should return true if the current user can delete this
	 * page. It can be overloaded to customise the security model for an
	 * application.
	 * 
	 * Denies permission if any of the following conditions is TRUE:
	 * - canDelete() returns FALSE on any decorator
	 * - canEdit() returns FALSE
	 * - any descendant page returns FALSE for canDelete()
	 * 
	 * @uses canDelete()
	 * @uses DataObjectDecorator->canDelete()
	 * @uses canEdit()
	 *
	 * @param Member $member
	 * @return boolean True if the current user can delete this page.
	 */",
 "/**
	 * This function should return true if the current user can create new
	 * pages of this class. It can be overloaded to customise the security model for an
	 * application.
	 * 
	 * Denies permission if any of the following conditions is TRUE:
	 * - canCreate() returns FALSE on any decorator
	 * - $can_create is set to FALSE and the site is not in \"dev mode\"
	 * 
	 * Use {@link canAddChildren()} to control behaviour of creating children under this page.
	 * 
	 * @uses $can_create
	 * @uses DataObjectDecorator->canCreate()
	 *
	 * @param Member $member
	 * @return boolean True if the current user can create pages on this class.
	 */",
 "/**
	 * This function should return true if the current user can edit this
	 * page. It can be overloaded to customise the security model for an
	 * application.
	 * 
	 * Denies permission if any of the following conditions is TRUE:
	 * - canEdit() on any decorator returns FALSE
	 * - canView() return false
	 * - \"CanEditType\" directive is set to \"Inherit\" and any parent page return false for canEdit()
	 * - \"CanEditType\" directive is set to \"LoggedInUsers\" and no user is logged in or doesn\'t have the CMS_Access_CMSMAIN permission code
	 * - \"CanEditType\" directive is set to \"OnlyTheseUsers\" and user is not in the given groups
	 * 
	 * @uses canView()
	 * @uses EditorGroups()
	 * @uses DataObjectDecorator->canEdit()
	 *
	 * @param Member $member Set to FALSE if you want to explicitly test permissions without a valid user (useful for unit tests)
	 * @return boolean True if the current user can edit this page.
	 */",
 "/**
	 * This function should return true if the current user can publish this
	 * page. It can be overloaded to customise the security model for an
	 * application.
	 * 
	 * Denies permission if any of the following conditions is TRUE:
	 * - canPublish() on any decorator returns FALSE
	 * - canEdit() returns FALSE
	 * 
	 * @uses SiteTreeDecorator->canPublish()
	 *
	 * @param Member $member
	 * @return boolean True if the current user can publish this page.
	 */",
 "/**
	 * Stub method to get the site config, provided so it\'s easy to override
	 */",
 "/**
	 * Pre-populate the cache of canEdit, canView, canDelete, canPublish permissions.
	 * This method will use the static can_(perm)_multiple method for efficiency.
	 * 
	 * @param $permission String The permission: edit, view, publish, approve, etc.
	 * @param $ids array An array of page IDs
	 * @param $batchCallBack The function/static method to call to calculate permissions.  Defaults
	 * to \'SiteTree::can_(permission)_multiple\'
	 */",
 "/**
	 * Get the \'can edit\' information for a number of SiteTree pages.
	 * 
	 * @param An array of IDs of the SiteTree pages to look up.
	 * @param useCached Return values from the permission cache if they exist.
	 * @return A map where the IDs are keys and the values are booleans stating whether the given
	 * page can be edited.
	 */",
 "/**
	 * Get the \'can edit\' information for a number of SiteTree pages.
	 * @param An array of IDs of the SiteTree pages to look up.
	 * @param useCached Return values from the permission cache if they exist.
	 */",
 "/**
	 * Collate selected descendants of this page.
	 *
	 * {@link $condition} will be evaluated on each descendant, and if it is
	 * succeeds, that item will be added to the $collator array.
	 *
	 * @param string $condition The PHP condition to be evaluated. The page
	 *                          will be called $item
	 * @param array $collator An array, passed by reference, to collect all
	 *                        of the matching descendants.
	 */",
 "/**
	 * Return the title, description, keywords and language metatags.
	 * 
	 * @todo Move <title> tag in separate getter for easier customization and more obvious usage
	 * 
	 * @param boolean|string $includeTitle Show default <title>-tag, set to false for custom templating
	 * @param boolean $includeTitle Show default <title>-tag, set to false for
	 *                              custom templating
	 * @return string The XHTML metatags
	 */",
 "/**
	 * Returns the object that contains the content that a user would
	 * associate with this page.
	 *
	 * Ordinarily, this is just the page itself, but for example on
	 * RedirectorPages or VirtualPages ContentSource() will return the page
	 * that is linked to.
	 *
	 * @return SiteTree The content source.
	 */",
 "/**
	 * Add default records to database.
	 *
	 * This function is called whenever the database is built, after the
	 * database tables have all been created. Overload this to add default
	 * records when the database is built, but make sure you call
	 * parent::requireDefaultRecords().
	 */",
 "/**
	 * Returns TRUE if this object has a URLSegment value that does not conflict with any other objects. This methods
	 * checks for:
	 *   - A page with the same URLSegment that has a conflict.
	 *   - Conflicts with actions on the parent page.
	 *   - A conflict caused by a root page having the same URLSegment as a class name.
	 *
	 * @return bool
	 */",
 "/**
	 * Generate a URL segment based on the title provided.
	 * 
	 * If {@link Extension}s wish to alter URL segment generation, they can do so by defining
	 * updateURLSegment(&$url, $title).  $url will be passed by reference and should be modified.
	 * $title will contain the title that was originally used as the source of this generated URL.
	 * This lets decorators either start from scratch, or incrementally modify the generated URL.
	 * 
	 * @param string $title Page title.
	 * @return string Generated url segment
	 */",
 "/**
	 * Rewrite a file URL on this page, after its been renamed.
	 * Triggers the onRenameLinkedAsset action on extensions.
	 */",
 "/**
	 * Returns the pages that depend on this page.
	 * This includes virtual pages, pages that link to it, etc.
	 * 
	 * @param $includeVirtuals Set to false to exlcude virtual pages.
	 */",
 "/**
	 * Return the number of {@link DependentPages()}
	 * 
	 * @param $includeVirtuals Set to false to exlcude virtual pages.
	 */",
 "/**
	 * Return all virtual pages that link to this page
	 */",
 "/**
	 * Returns a FieldSet with which to create the CMS editing form.
	 *
	 * You can override this in your child classes to add extra fields - first
	 * get the parent fields using parent::getCMSFields(), then use
	 * addFieldToTab() on the FieldSet.
	 *
	 * @return FieldSet The fields to be displayed in the CMS.
	 */",
 "/**
	 *
	 * @param boolean $includerelations a boolean value to indicate if the labels returned include relation fields
	 * 
	 */",
 "/**
	 * Get the actions available in the CMS for this page - eg Save, Publish.
	 * @return FieldSet The available actions for this page.
	 */",
 "/**
	 * Publish this page.
	 * 
	 * @uses SiteTreeDecorator->onBeforePublish()
	 * @uses SiteTreeDecorator->onAfterPublish()
	 */",
 "/**
	 * Unpublish this page - remove it from the live site
	 * 
	 * @uses SiteTreeDecorator->onBeforeUnpublish()
	 * @uses SiteTreeDecorator->onAfterUnpublish()
	 */",
 "/**
	 * Roll the draft version of this page to match the published page.
	 * Caution: Doesn\'t overwrite the object properties with the rolled back version.
	 * 
	 * @param $version Either the string \'Live\' or a version number
	 */",
 "/**
	 * Revert the draft changes: replace the draft content with the content on live
	 */",
 "/**
	 * Restore the content in the active copy of this SiteTree page to the stage site.
	 * @return The SiteTree object.
	 */",
 "/**
	 * Synonym of {@link doUnpublish}
	 */",
 "/**
	 * Check if this page is new - that is, if it has yet to have been written
	 * to the database.
	 *
	 * @return boolean True if this page is new.
	 */",
 "/**
	 * Check if this page has been published.
	 *
	 * @return boolean True if this page has been published.
	 */",
 "/**
	 * Get the class dropdown used in the CMS to change the class of a page.
	 * This returns the list of options in the drop as a Map from class name
	 * to text in dropdown.
	 *
	 * @return array
	 */",
 "/**
	 * Returns an array of the class names of classes that are allowed
	 * to be children of this class.
	 *
	 * @return array
	 */",
 "/**
	 * Returns the class name of the default class for children of this page.
	 *
	 * @return string
	 */",
 "/**
	 * Returns the class name of the default class for the parent of this
	 * page.
	 *
	 * @return string
	 */",
 "/**
	 * Function to clean up the currently loaded page after a reorganise has
	 * been called. It should return a piece of JavaScript to be executed on
	 * the client side, to clean up the results of the reorganise.
	 */",
 "/**
	 * Get the title for use in menus for this page. If the MenuTitle
	 * field is set it returns that, else it returns the Title field.
	 *
	 * @return string
	 */",
 "/**
	 * Set the menu title for this page.
	 *
	 * @param string $value
	 */",
 "/**
	 * TitleWithStatus will return the title in an <ins>, <del> or
	 * <span class=\"modified\"> tag depending on its publication status.
	 *
	 * @return string
	 */",
 "/**
	 * Returns the page in the current page stack of the given level.
	 * Level(1) will return the main menu item that we\'re currently inside, etc.
	 */",
 "/**
	 * Return the CSS classes to apply to this node in the CMS tree
	 *
	 * @param Controller $controller The controller object that the tree
	 *                               appears on
	 * @return string
	 */",
 "/**
	 * Compares current draft with live version,
	 * and returns TRUE if no draft version of this page exists,
	 * but the page is still published (after triggering \"Delete from draft site\" in the CMS).
	 * 
	 * @return boolean
	 */",
 "/**
	 * Return true if this page exists on the live site
	 */",
 "/**
	 * Compares current draft with live version,
	 * and returns TRUE if these versions differ,
	 * meaning there have been unpublished changes to the draft site.
	 * 
	 * @return boolean
	 */",
 "/**
	 * Compares current draft with live version,
	 * and returns true if no live version exists,
	 * meaning the page was never published.
	 * 
	 * @return boolean
	 */",
 "/**
	 * Stops extendCMSFields() being called on getCMSFields().
	 * This is useful when you need access to fields added by subclasses
	 * of SiteTree in a decorator. Call before calling parent::getCMSFields(),
	 * and reenable afterwards.
	 */",
 "/**
	 * Reenables extendCMSFields() being called on getCMSFields() after
	 * it has been disabled by disableCMSFieldsExtensions().
	 */",
 "/**
	 * Return the translated Singular name 
	 * 
	 * @return String
	 */",
 "/**
	 * Overloaded to also provide entities for \'Page\' class which is usually
	 * located in custom code, hence textcollector picks it up for the wrong folder.
	 */",
 "/**
 * Basic data-object representing all pages within the site tree.
 * This data-object takes care of the heirachy.  All page types that live within the heirachy
 * should inherit from this.
 *
 * In addition, it contains a number of static methods for querying the site tree.
 * @package cms
 */",
 "/**
	 * A key value pair of values that should be searched for.
	 * The keys should match the field names specified in {@link self::$fields}.
	 * Usually these values come from a submitted searchform
	 * in the form of a $_REQUEST object.
	 * CAUTION: All values should be treated as insecure client input.
	 * 
	 * @param string $modelClass The base {@link DataObject} class that search properties related to.
	 * 						Also used to generate a set of result objects based on this class.
	 * @param FieldSet $fields Optional. FormFields mapping to {@link DataObject::$db} properties
	 *	 					which are to be searched. Derived from modelclass using 
	 *						{@link DataObject::scaffoldSearchFields()} if left blank.
	 * @param array $filters Optional. Derived from modelclass if left blank
	 */",
 "/**
	 * Returns scaffolded search fields for UI.
	 *
	 * @return FieldSet
	 */",
 "/**
	 * @todo move to SQLQuery
	 * @todo fix hack
	 */",
 "/**
	 * Returns a SQL object representing the search context for the given
	 * list of query parameters.
	 *
	 * @param array $searchParams Map of search criteria, mostly taked from $_REQUEST.
	 *  If a filter is applied to a relationship in dot notation,
	 *  the parameter name should have the dots replaced with double underscores,
	 *  for example \"Comments__Name\" instead of the filter name \"Comments.Name\".
	 * @param string|array $sort Database column to sort on. 
	 *  Falls back to {@link DataObject::$default_sort} if not provided.
	 * @param string|array $limit 
	 * @param SQLQuery $existingQuery
	 * @return SQLQuery
	 */",
 "/**
	 * Returns a result set from the given search parameters.
	 *
	 * @todo rearrange start and limit params to reflect DataObject
	 * 
	 * @param array $searchParams
	 * @param string|array $sort
	 * @param string|array $limit
	 * @return DataObjectSet
	 */",
 "/**
	 * Callback map function to filter fields with empty values from
	 * being included in the search expression.
	 *
	 * @param unknown_type $value
	 * @return boolean
	 */",
 "/**
	 * Accessor for the filter attached to a named field.
	 *
	 * @param string $name
	 * @return SearchFilter
	 */",
 "/**
	 * Get the map of filters in the current search context.
	 *
	 * @return array
	 */",
 "/**
	 * Overwrite the current search context filter map.
	 *
	 * @param array $filters
	 */",
 "/**
	 * Adds a instance of {@link SearchFilter}.
	 *
	 * @param SearchFilter $filter
	 */",
 "/**
	 * Removes a filter by name.
	 *
	 * @param string $name
	 */",
 "/**
	 * Get the list of searchable fields in the current search context.
	 *
	 * @return FieldSet
	 */",
 "/**
	 * Apply a list of searchable fields to the current search context.
	 *
	 * @param FieldSet $fields
	 */",
 "/**
	 * Adds a new {@link FormField} instance.
	 *
	 * @param FormField $field
	 */",
 "/**
	 * Removes an existing formfield instance by its name.
	 *
	 * @param string $fieldName
	 */",
 "/**
* Manages searching of properties on one or more {@link DataObject}
* types, based on a given set of input parameters.
* SearchContext is intentionally decoupled from any controller-logic,
* it just receives a set of search parameters and an object class it acts on.
* 
* The default output of a SearchContext is either a {@link SQLQuery} object
* for further refinement, or a {@link DataObjectSet} that can be used to display
* search results, e.g. in a {@link TableListField} instance.
* 
* In case you need multiple contexts, consider namespacing your request parameters
* by using {@link FieldSet->namespace()} on the $fields constructor parameter.
* 
* Each DataObject subclass can have multiple search contexts for different cases,
* e.g. for a limited frontend search and a fully featured backend search.
* By default, you can use {@link DataObject->getDefaultSearchContext()} which is automatically
* scaffolded. It uses {@link DataObject::$searchable_fields} to determine which fields
* to include.
* 
* @see http://doc.silverstripe.com/doku.php?id=searchcontext
*
* @package sapphire
* @subpackage search
*/",
 "/**
	 * Set the targets to publish to.
	 * If target is an scp-style remote path, no password is accepted - we assume key-based authentication to be set up on the application server
	 * initiating the publication.
	 * 
	 * @param $targets An array of targets to publish to.  These can either be local file names, or scp-style targets, in the form \"user@server:path\"
	 */",
 "/**
	 * Specify folders to exclude from the rsync
	 * For example, you could exclude assets.
	 */",
 "/**
 * This static publisher can be used to deploy static content to multiple hosts, by generating the cache files locally and then rsyncing then to
 * each destination box.  This can be used to set up a load-balanced collection of static servers.
 * 
 * @see http://doc.silverstripe.com/doku.php?id=staticpublisher
 *
 * @package cms
 * @subpackage publishers
 */",
 "/**
	 * Get the data classes, grouped by their root class
	 *
	 * @return array Array of data classes, grouped by their root class
	 */",
 "/**
	 * Display a simple HTML menu of database admin helpers.
	 */",
 "/**
	 * Updates the database schema, creating tables & fields as necessary.
	 */",
 "/**
	 * Check if database needs to be built, and build it if it does.
	 */",
 "/**
	 * Build the default data, calling requireDefaultRecords on all
	 * DataObject classes
	 */",
 "/**

	*


	*/",
 "/**

	*


	*/",
 "/**
	 * Clear all data out of the database
	 * @todo Move this code into SS_Database class, for DB abstraction
	 */",
 "/**
	 * Method used to check mod_rewrite is working correctly in the installer.
	 */",
 "/**
	 * Remove invalid records from tables - that is, records that don\'t have
	 * corresponding records in their parent class tables.
	 */",
 "/**
 * DatabaseAdmin class
 *
 * Utility functions for administrating the database. These can be accessed
 * via URL, e.g. http://www.yourdomain.com/db/build.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * the constructor of a Simple/basic SearchForm
	 */",
 "/**
 * More advanced search form
 * @package sapphire
 * @subpackage search
 */",
 "/**
     * Set the frontend directives
     *
     * @param array $directives assoc of directives
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * Note : return value is always \"string\" (unserialization is done by the core not by the backend)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @return string|false cached datas
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param  string $id cache id
     * @return mixed|false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param  string $data            Datas to cache
     * @param  string $id              Cache id
     * @param  array $tags             Array of strings, the cache record will be tagged by each string entry
     * @param  int   $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @return boolean true if no problem
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id Cache id
     * @return boolean True if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * Zend_Cache::CLEANING_MODE_ALL (default)    => remove all cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_OLD              => remove too old cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     => remove cache entries matching all given tags
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG => remove cache entries not {matching one of the given tags}
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG => remove cache entries matching any given tags
     *                                               ($tags can be an array of strings or a single string)
     *
     * @param  string $mode Clean mode
     * @param  array  $tags Array of tags
     * @return boolean true if no problem
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Return a map of permission codes to add to the dropdown shown in the Security section of the CMS.
	 * array(
	 *   \'VIEW_SITE\' => \'View the site\',
	 * );
	 */",
 "/**
 * Used to let classes provide new permission codes.
 * Every implementor of PermissionProvider is accessed and providePermissions() called to get the full list of permission codes.
 * @package sapphire
 * @subpackage security
 */",
 "/**
     * Sets a new option value. Available options and values:
     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input (\'utf8\' for UTF-8,
     *         \'ucs4_string\' and \'ucs4_array\' respectively for UCS4); The output is always UTF-8]
     * [overlong - Unicode does not allow unnecessarily long encodings of chars,
     *             to allow this, set this parameter to true, else to false;
     *             default is false.]
     * [strict - true: strict mode, good for registration purposes - Causes errors
     *           on failures; false: loose mode, ideal for \"wildlife\" applications
     *           by silently ignoring errors and returning the original input instead
     *
     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)
     * @param    string    Value to use (if parameter 1 is a string)
     * @return   boolean   true on success, false otherwise
     * @access   public
     */",
 "/**
     * Decode a given ACE domain name
     * @param    string   Domain name (ACE string)
     * [@param    string   Desired output encoding, see {@link set_parameter}]
     * @return   string   Decoded Domain name (UTF-8 or UCS-4)
     * @access   public
     */",
 "/**
     * Encode a given UTF-8 domain name
     * @param    string   Domain name (UTF-8 or UCS-4)
     * [@param    string   Desired input encoding, see {@link set_parameter}]
     * @return   string   Encoded Domain name (ACE string)
     * @access   public
     */",
 "/**
     * Use this method to get the last error ocurred
     * @param    void
     * @return   string   The last error, that occured
     * @access   public
     */",
 "/**
     * The actual decoding algorithm
     * @access   private
     */",
 "/**
     * The actual encoding algorithm
     * @access   private
     */",
 "/**
     * Adapt the bias according to the current code point and position
     * @access   private
     */",
 "/**
     * Encoding a certain digit
     * @access   private
     */",
 "/**
     * Decode a certain digit
     * @access   private
     */",
 "/**
     * Internal error handling method
     * @access   private
     */",
 "/**
     * Do Nameprep according to RFC3491 and RFC3454
     * @param    array    Unicode Characters
     * @return   string   Unicode Characters, Nameprep\'d
     * @access   private
     */",
 "/**
     * Decomposes a Hangul syllable
     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul
     * @param    integer  32bit UCS4 code point
     * @return   array    Either Hangul Syllable decomposed or original 32bit value as one value array
     * @access   private
     */",
 "/**
     * Ccomposes a Hangul syllable
     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul
     * @param    array    Decomposed UCS4 sequence
     * @return   array    UCS4 sequence with syllables composed
     * @access   private
     */",
 "/**
     * Returns the combining class of a certain wide char
     * @param    integer    Wide char to check (32bit integer)
     * @return   integer    Combining class if found, else 0
     * @access   private
     */",
 "/**
     * Apllies the cannonical ordering of a decomposed UCS4 sequence
     * @param    array      Decomposed UCS4 sequence
     * @return   array      Ordered USC4 sequence
     * @access   private
     */",
 "/**
     * Do composition of a sequence of starter and non-starter
     * @param    array      UCS4 Decomposed sequence
     * @return   array      Ordered USC4 sequence
     * @access   private
     */",
 "/**
     * This converts an UTF-8 encoded string to its UCS-4 representation
     * By talking about UCS-4 \"strings\" we mean arrays of 32bit integers representing
     * each of the \"chars\". This is due to PHP not being able to handle strings with
     * bit depth different from 8. This apllies to the reverse method _ucs4_to_utf8(), too.
     * The following UTF-8 encodings are supported:
     * bytes bits  representation
     * 1        7  0xxxxxxx
     * 2       11  110xxxxx 10xxxxxx
     * 3       16  1110xxxx 10xxxxxx 10xxxxxx
     * 4       21  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
     * 5       26  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
     * 6       31  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
     * Each x represents a bit that can be used to store character data.
     * The five and six byte sequences are part of Annex D of ISO/IEC 10646-1:2000
     * @access   private
     */",
 "/**
     * Convert UCS-4 string into UTF-8 string
     * See _utf8_to_ucs4() for details
     * @access   private
     */",
 "/**
      * Convert UCS-4 array into UCS-4 string
      *
      * @access   private
      */",
 "/**
      * Convert UCS-4 strin into UCS-4 garray
      *
      * @access   private
      */",
 "/**
 * Encode/decode Internationalized Domain Names.
 *
 * The class allows to convert internationalized domain names
 * (see RFC 3490 for details) as they can be used with various registries worldwide
 * to be translated between their original (localized) form and their encoded form
 * as it will be used in the DNS (Domain Name System).
 *
 * The class provides two public methods, encode() and decode(), which do exactly
 * what you would expect them to do. You are allowed to use complete domain names,
 * simple strings and complete email addresses as well. That means, that you might
 * use any of the following notations:
 *
 * - www.n??rgler.com
 * - xn--nrgler-wxa
 * - xn--brse-5qa.xn--knrz-1ra.info
 *
 * Unicode input might be given as either UTF-8 string, UCS-4 string or UCS-4
 * array. Unicode output is available in the same formats.
 * You can select your preferred format via {@link set_paramter()}.
 *
 * ACE input and output is always expected to be ASCII.
 *
 * @author  Matthias Sommerfeld <mso@phlylabs.de>
 * @copyright 2004-2007 phlyLabs Berlin, http://phlylabs.de
 * @version 0.5.1
 *
 */",
 "/**
     * Sets a new option value. Available options and values:
     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input (\'utf8\' for UTF-8,
     *         \'ucs4_string\' and \'ucs4_array\' respectively for UCS4); The output is always UTF-8]
     * [overlong - Unicode does not allow unnecessarily long encodings of chars,
     *             to allow this, set this parameter to true, else to false;
     *             default is false.]
     * [strict - true: strict mode, good for registration purposes - Causes errors
     *           on failures; false: loose mode, ideal for \"wildlife\" applications
     *           by silently ignoring errors and returning the original input instead
     *
     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)
     * @param    string    Value to use (if parameter 1 is a string)
     * @return   boolean   true on success, false otherwise
     * @access   public
     */",
 "/**
* Adapter class for aligning the API of idna_convert with that of Net_IDNA
* @author  Matthias Sommerfeld <mso@phlylabs.de>
*/",
 "/**
	 * Represent the given form in a tabular style
	 * @param form The form to decorate.
	 */",
 "/**
	 * Return a representation of this form as a table row
	 */",
 "/**
	 * This is the \'wrapper\' aspect of the code
	 */",
 "/**
 * This is a form decorator (a class that wraps around a form) providing us with some functions
 * to display it in a Tabular style.
 * @package forms
 * @subpackage transformations
 */",
 "/**
	 * Spellchecks an array of words.
	 *
	 * @param {String} $lang Language code like sv or en.
	 * @param {Array} $words Array of words to spellcheck.
	 * @return {Array} Array of misspelled words.
	 */",
 "/**
	 * Returns suggestions of for a specific word.
	 *
	 * @param {String} $lang Language code like sv or en.
	 * @param {String} $word Specific word to get suggestions for.
	 * @return {Array} Array of suggestions for the specified word.
	 */",
 "/**
 * $Id: editor_plugin_src.js 201 2007-02-12 15:56:56Z spocke $
 *
 * @author Moxiecode
 * @copyright Copyright ? 2004-2007, Moxiecode Systems AB, All rights reserved.
 */",
 "/**
 * @package cms
 * @subpackage core
 * @access private
 */",
 "/**
 * @package cms
 * @subpackage core
 * @access private
 */",
 "/**
 * @package cms
 * @subpackage core
 * @access private
 */",
 "/**
 * @package cms
 * @subpackage core
 * @access private
 */",
 "/**
 * @package cms
 * @subpackage core
 * @access private
 */",
 "/**
 * Class used internally by Diff to actually compute the diffs.
 *
 * The algorithm used here is mostly lifted from the perl module
 * Algorithm::Diff (version 1.06) by Ned Konz, which is available at:
 *   http://www.perl.com/CPAN/authors/id/N/NE/NEDKONZ/Algorithm-Diff-1.06.zip
 *
 * More ideas are taken from:
 *   http://www.ics.uci.edu/~eppstein/161/960229.html
 *
 * Some ideas are (and a bit of code) are from from analyze.c, from GNU
 * diffutils-2.7, which can be found at:
 *   ftp://gnudist.gnu.org/pub/gnu/diffutils/diffutils-2.7.tar.gz
 *
 * Finally, some ideas (subdivision by NCHUNKS > 2, and some optimizations)
 * are my own.
 *
 * @author Geoffrey T. Dairiki
 * @access private
 * @package cms
 * @subpackage core
 */",
 "/**
     * Constructor.
     * Computes diff between sequences of strings.
     *
     * @param $from_lines array An array of strings.
     *        (Typically these are lines from a file.)
     * @param $to_lines array An array of strings.
     */",
 "/**
     * Compute reversed Diff.
     *
     * SYNOPSIS:
     *
     *  $diff = new Diff($lines1, $lines2);
     *  $rev = $diff->reverse();
     * @return object A Diff object representing the inverse of the
     *                original diff.
     */",
 "/**
     * Check for empty diff.
     *
     * @return bool True iff two sequences were identical.
     */",
 "/**
     * Compute the length of the Longest Common Subsequence (LCS).
     *
     * This is mostly for diagnostic purposed.
     *
     * @return int The length of the LCS.
     */",
 "/**
     * Get the original set of lines.
     *
     * This reconstructs the $from_lines parameter passed to the
     * constructor.
     *
     * @return array The original sequence of strings.
     */",
 "/**
     * Get the final set of lines.
     *
     * This reconstructs the $to_lines parameter passed to the
     * constructor.
     *
     * @return array The sequence of strings.
     */",
 "/**
     * Check a Diff for validity.
     *
     * This is here only for debugging purposes.
     */",
 "/**
	 *  Attempt to clean invalid HTML, which messes up diffs.
	 *  This cleans code if possible, using an instance of HTMLCleaner
	 *
	 *  NB: By default, only extremely simple tidying is performed,
	 *  by passing through DomDocument::loadHTML and saveXML
	 *
	 * @param string $content HTML content
	 * @param object $cleaner Optional instance of a HTMLCleaner class to
	 * 	use, overriding self::$html_cleaner_class
	 */",
 "/**
 * Class representing a \'diff\' between two sequences of strings.
 * @package cms
 * @subpackage core
 */",
 "/**
     * Constructor.
     *
     * Computes diff between sequences of strings.
     *
     * This can be used to compute things like
     * case-insensitve diffs, or diffs which ignore
     * changes in white-space.
     *
     * @param $from_lines array An array of strings.
     *  (Typically these are lines from a file.)
     *
     * @param $to_lines array An array of strings.
     *
     * @param $mapped_from_lines array This array should
     *  have the same size number of elements as $from_lines.
     *  The elements in $mapped_from_lines and
     *  $mapped_to_lines are what is actually compared
     *  when computing the diff.
     *
     * @param $mapped_to_lines array This array should
     *  have the same number of elements as $to_lines.
     */",
 "/**
 * Computes diff between sequences of strings.
 * @package cms
 * @subpackage core
 */",
 "/**
	 * Return a link to this comment
	 * @return string link to this comment.
	 */",
 "/**
	 *
	 * @param boolean $includerelations a boolean value to indicate if the labels returned include relation fields
	 * 
	 */",
 "/**
	 * This method is called just before this object is
	 * written to the database.
	 * 
	 * Specifically, make sure \"http://\" exists at the start
	 * of the URL, if it doesn\'t have https:// or http://
	 */",
 "/**
	 * This always returns true, and should be handled by {@link PageCommentInterface->CanPostComment()}.
	 * 
	 * @todo Integrate with PageCommentInterface::$comments_require_permission and $comments_require_login
	 * 
	 * @param Member $member
	 * @return Boolean
	 */",
 "/**
	 * Checks for association with a page,
	 * and {@link SiteTree->ProvidePermission} flag being set to TRUE.
	 * Note: There\'s an additional layer of permission control
	 * in {@link PageCommentInterface}.
	 * 
	 * @param Member $member
	 * @return Boolean
	 */",
 "/**
	 * Checks for \"CMS_ACCESS_CommentAdmin\" permission codes
	 * and {@link canView()}. 
	 * 
	 * @param Member $member
	 * @return Boolean
	 */",
 "/**
	 * Checks for \"CMS_ACCESS_CommentAdmin\" permission codes
	 * and {@link canEdit()}.
	 * 
	 * @param Member $member
	 * @return Boolean
	 */",
 "/**
 * Represents a single comment on a page
 * 
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * Deletes all comments on the page referenced by the url param pageid
	 */",
 "/**
	 * Report a Spam Comment as valid comment (not spam)
	 */",
 "/**
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * @param object|array $array Either an object with simple properties or an associative array.
	 * Converts object-properties to indices of an associative array.
	 */",
 "/**
	 * Get the source array
	 *
	 * @return array
	 */",
 "/**
	 * Get a value from a given field
	 *
	 * @param string $f field key
	 * @return mixed
	 */",
 "/**
	* Add or set a field on this object.
	*
	* @param string $field
	* @param mixed $value
	*/",
 "/**
	 * Check array to see if field isset
	 *
	 * @param string Field Key
	 * @return bool
	 */",
 "/**
	 * Converts an object with simple properties to 
	 * an associative array.
	 *
	 * @param obj $obj
	 * @return array
	 */",
 "/**
	 * This is pretty crude, but it helps diagnose error situations
	 */",
 "/**
 * Lets you wrap a bunch of array data into a {@link ViewableData} object.
 *
 * <code>
 * new ArrayData(array(
 *    \"ClassName\" => \"Page\",
 *    \"AddAction\" => \"Add a new Page page\",
 * ));
 * </code>
 *
 * @package sapphire
 * @subpackage view
 */",
 "/**
 * jsmin.php - PHP implementation of Douglas Crockford\'s JSMin.
 *
 * This is pretty much a direct port of jsmin.c to PHP with just a few
 * PHP-specific performance tweaks. Also, whereas jsmin.c reads from stdin and
 * outputs to stdout, this library accepts a string as input and returns another
 * string as output.
 *
 * PHP 5 or higher is required.
 *
 * Permission is hereby granted to use this version of the library under the
 * same terms as jsmin.c, which has the following license:
 *
 * --
 * Copyright (c) 2002 Douglas Crockford  (www.crockford.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the \"Software\"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * The Software shall be used for Good, not Evil.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * --
 *
 * @package JSMin
 * @author Ryan Grove <ryan@wonko.com>
 * @copyright 2002 Douglas Crockford <douglas@crockford.com> (jsmin.c)
 * @copyright 2008 Ryan Grove <ryan@wonko.com> (PHP port)
 * @license http://opensource.org/licenses/mit-license.php MIT License
 * @version 1.1.1 (2008-03-02)
 * @link http://code.google.com/p/jsmin-php/
 */",
 "/**
	 * Get all content as a javascript-compatible string (only if there is an Ajax-Request present).
	 * Falls back to {non_ajax_content}, {redirect_url} or Director::redirectBack() (in this order).
	 * 
	 * @return string
	 */",
 "/**
	 * Caution: Works only for forms which inherit methods from LeftAndMain.js
	 */",
 "/**
	 * Add custom scripts.
	 * Caution: Not escaped for backwards-compatibility.
	 * 
	 * @param $scriptContent string
	 * 
	 * @todo Should this content be escaped?
	 */",
 "/**
	 * @param $id int
	 */",
 "/**
	 * Sets the status-message (overlay-notification in the CMS).
	 * You can call this method multiple times, it will default to the \"worst\" statusmessage.
	 * 
	 * @param $message string
	 * @param $status string
	 */",
 "/**
	 * Alias for status_message($messsage, \'bad\')
	 * 
	 * @param $message string
	 */",
 "/**
	 * Update the status (upper right corner) of the given Form
	 * 
	 * @param $status string
	 * @param $form string
	 */",
 "/**
	 * Set the title of a single page in the pagetree
	 * 
	 * @param $id int
	 * @param $title string
	 */",
 "/**
	 * Fallback-method to supply normal HTML-response when not being called by ajax.
	 * 
	 * @param $content string HTML-content
	 */",
 "/**
	 * @param $url string
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Replace a given DOM-element with the given content.
	 * It automatically prefills {$non_ajax_content} with the passed content (as a fallback).
	 * 
	 * @param $domID string The DOM-ID of an HTML-element that should be replaced
	 * @param $domContent string The new HTML-content
	 * @param $reapplyBehaviour boolean Applies behaviour to the given domID after refreshing it
	 * @param $replaceMethod string Method for replacing - either \'replace\' (=outerHTML) or \'update\' (=innerHTML)
	 *   (Caution: \"outerHTML\" might cause problems on the client-side, e.g. on table-tags)
	 * 
	 * @todo More fancy replacing with loading-wheel etc.
	 */",
 "/**
	 * @return string Compiled string of javascript-function-calls (needs to be evaluated on the client-side!)
	 */",
 "/**
 * This class collects all output that needs to be returned after an Form-Request to the client. It automatically determines
 * if it needs to send back javascript after an Ajax-Request or just redirect to another page (on a normal request).
 * 
 * FormResponse is also responsible for keeping the client- and serverside in sync after an HTTP-Request
 * by collecting javascript-commands (which mostly trigger subsequent update-calls by Ajax.)
 * Use the output as a return-value for Ajax-based saving methods. Be sure to check if the call is acutally \"ajaxy\"
 * by checking Director::is_ajax(). It is the developers responsibility to include this into his custom form-methods.
 * Use the Request-Parameter \'htmlonly\' to enforce a pure HTML-response from the client-side.
 * 
 * Example: A {@TableField} is in an incorrect state after being saved, as it still has rows marked as \"new\"
 * which are already saved (and have an ID) in the database. By using AjaxSynchroniser we make sure that every instance
 * is refreshed by Ajax and reflects the correct state.
 *  
 * Caution: 
 * - FormResponse assumes that prototype.js is included on the client-side. (We can\'t put it into Requirements because it has to
 *   be included BEFORE an AjaxSynchroniser is called). 
 * - Please DON\'T escape literal parameters which are passed to FormResponse, they are escaped automatically.
 * - Some functions assume a {LeftAndMain}-based environment (e.g. load_form())
 * 
 * @todo Force a specific execution order ($forceTop, $forceBottom)??
 * @todo Extension to return different formats, e.g. JSON or XML
 * 
 * WARNING: This should only be used within the CMS context. Please use markup or JSON to transfer state to the client,
 * and react with javascript callbacks instead in other situations.
 * 
 * @package forms
 * @subpackage core
 */",
 "/**
     * Creates a currency instance. Every supressed parameter is used from the actual or the given locale.
     *
     * @param  string             $currency OPTIONAL currency short name
     * @param  string|Zend_Locale $locale   OPTIONAL locale name
     * @throws Zend_Currency_Exception When currency is invalid
     */",
 "/**
     * Returns a localized currency string
     *
     * @param  integer|float $value   Currency value
     * @param  array         $options OPTIONAL options to set temporary
     * @throws Zend_Currency_Exception When the value is not a number
     * @return string
     */",
 "/**
     * Internal method to extract the currency pattern
     * when a choice is given based on the given value
     *
     * @param  string $pattern
     * @param  float|integer $value
     * @return string
     */",
 "/**
     * Sets the formating options of the localized currency string
     * If no parameter is passed, the standard setting of the
     * actual set locale will be used
     *
     * @param  array $options (Optional) Options to set
     * @return Zend_Currency
     */",
 "/**
     * Internal function for checking static given locale parameter
     *
     * @param  string             $currency (Optional) Currency name
     * @param  string|Zend_Locale $locale   (Optional) Locale to display informations
     * @throws Zend_Currency_Exception When locale contains no region
     * @return string The extracted locale representation as string
     */",
 "/**
     * Returns the actual or details of other currency symbols,
     * when no symbol is available it returns the currency shortname (f.e. FIM for Finnian Mark)
     *
     * @param  string             $currency (Optional) Currency name
     * @param  string|Zend_Locale $locale   (Optional) Locale to display informations
     * @return string
     */",
 "/**
     * Returns the actual or details of other currency shortnames
     *
     * @param  string             $currency OPTIONAL Currency\'s name
     * @param  string|Zend_Locale $locale   OPTIONAL The locale
     * @return string
     */",
 "/**
     * Returns the actual or details of other currency names
     *
     * @param  string             $currency (Optional) Currency\'s short name
     * @param  string|Zend_Locale $locale   (Optional) The locale
     * @return string
     */",
 "/**
     * Returns a list of regions where this currency is or was known
     *
     * @param  string $currency OPTIONAL Currency\'s short name
     * @throws Zend_Currency_Exception When no currency was defined
     * @return array List of regions
     */",
 "/**
     * Returns a list of currencies which are used in this region
     * a region name should be 2 charachters only (f.e. EG, DE, US)
     * If no region is given, the actual region is used
     *
     * @param  string $region OPTIONAL Region to return the currencies for
     * @return array List of currencies
     */",
 "/**
     * Returns the actual currency name
     *
     * @return string
     */",
 "/**
     * Returns the currency name
     *
     * @return string
     */",
 "/**
     * Returns the set cache
     *
     * @return Zend_Cache_Core The set cache
     */",
 "/**
     * Sets a cache for Zend_Currency
     *
     * @param  Zend_Cache_Core $cache Cache to set
     * @return void
     */",
 "/**
     * Returns true when a cache is set
     *
     * @return boolean
     */",
 "/**
     * Removes any set cache
     *
     * @return void
     */",
 "/**
     * Clears all set cache data
     *
     * @return void
     */",
 "/**
     * Sets a new locale for data retreivement
     * Example: \'de_XX\' will be set to \'de\' because \'de_XX\' does not exist
     * \'xx_YY\' will be set to \'root\' because \'xx\' does not exist
     *
     * @param  string|Zend_Locale $locale (Optional) Locale for parsing input
     * @throws Zend_Currency_Exception When the given locale does not exist
     * @return Zend_Currency Provides fluent interface
     */",
 "/**
     * Returns the actual set locale
     *
     * @return string
     */",
 "/**
     * Internal method for checking the options array
     *
     * @param  array $options Options to check
     * @throws Zend_Currency_Exception On unknown position
     * @throws Zend_Currency_Exception On unknown locale
     * @throws Zend_Currency_Exception On unknown display
     * @throws Zend_Currency_Exception On precision not between -1 and 30
     * @throws Zend_Currency_Exception On problem with script conversion
     * @throws Zend_Currency_Exception On unknown options
     * @return array
     */",
 "/**
 * Class for handling currency notations
 *
 * @category  Zend
 * @package   Zend_Currency
 * @copyright Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
   * Method to authenticate an user
   *
   * @param array $RAW_data Raw data to authenticate the user
   * @param Form $form Optional: If passed, better error messages can be
   *                             produced by using
   *                             {@link Form::sessionMessage()}
   * @return bool|Member Returns FALSE if authentication fails, otherwise
   *                     the member object
   * @see Security::setDefaultAdmin()
   */",
 "/**
   * Method that creates the login form for this authentication method
   *
   * @param Controller The parent controller, necessary to create the
   *                   appropriate form action tag
   * @return Form Returns the login form to use with this authentication
   *              method
   */",
 "/**
   * Get the name of the authentication method
   *
   * @return string Returns the name of the authentication method.
   */",
 "/**
 * Authenticator for the default \"member\" method
 *
 * @author Markus Lanthaler <markus@silverstripe.com>
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Simple controller that the installer uses to test that URL rewriting is working.
 * @package sapphire
 * @subpackage testing
 */",
 "/**
	 * Returns a readonly span containing the correct value.
	 */",
 "/**
	 * Override parent behaviour by not merging arrays.
	 */",
 "/**
 * Read-only complement of {@link DropdownField}.
 * Shows the \"human value\" of the dropdown field for the currently selected value.
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
	 * @todo This should really be taken care of by TestRunner
	 */",
 "/**
 * Encrypt all passwords
 *
 * Action to encrypt all *clear text* passwords in the database according
 * to the current settings.
 * If the current settings are so that passwords shouldn\'t be encrypted,
 * an explanation will be printed out.
 *
 * To run this action, the user needs to have administrator rights!
 * 
 * @package sapphire
 * @subpackage tasks
 */",
 "/**
 * Returns an request value by name without magic quoting.
 *
 * @param String $name Name of parameter to get.
 * @param String $default_value Default value to return if value not found.
 * @return String request value by name without magic quoting or default value.
 */",
 "/**
 * @category   Zend
 * @package    Zend_Locale
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/** 
	 * Find the country for an IP address.
	 * 
	 * By default, it will return an array, keyed by
	 * the country code with a value of the country
	 * name.
	 * 
	 * To return the code only, pass in true for the
	 * $codeOnly parameter.
	 * 
	 * @param string $address The IP address to get the country of
	 * @param boolean $codeOnly Returns just the country code
	 */",
 "/**
	 * Returns the country code, for the current visitor
	 */",
 "/** 
	 * Sanity Checker for this class, which helps us debug,
	 * or ensure that its working as expected 
	 */",
 "/** 
	 * Returns the country name from the appropriate code.
	 * @return null|string String if country found, null if none found
	 */",
 "/** 
	 * Returns an array of ISO Country Codes -> Country Names
	 */",
 "/**
 * Routines for IP to country resolution.
 * 
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * See class comments
	 *
	 * @param ContentController $controller
	 * @param string $name
	 * @param string $sourceClass
	 * @param array $fieldList
	 * @param FieldSet $detailFormFields
	 * @param string $sourceFilter
	 * @param string $sourceSort
	 * @param string $sourceJoin
	 */",
 "/**
	 * Return the record filter for this table.
	 * It will automatically add a relation filter if relationAutoSetting is true, and it can determine an appropriate
	 * filter.
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * @return DataObjectSet
	 */",
 "/**
	 * Sets the popup-title by javascript. Make sure to use FormResponse in ajax-requests,
	 * otherwise the title-change will only take effect on items existing during page-load.
	 *
	 * @param $caption String
	 */",
 "/**
	 * @param $validator Validator
	 */",
 "/**
	 * Calculates the number of columns needed for colspans
	 * used in template
	 *
	 * @return Int
	 */",
 "/**
	 * Used to toggle paging (makes no sense when adding a record)
	 *
	 * @return Boolean
	 */",
 "/**
	 * @return FieldSet
	 */",
 "/**
	 * Determines on which relation-class the DetailForm is saved
	 * by looking at the surrounding form-record.
	 *
	 * @return String
	 */",
 "/**
	 * Return the record in which the CTF resides, if it exists.
	 */",
 "/**
	 * (Optional) Setter for a correct parent-relation-class.
	 * Defaults to the record loaded into the surrounding form as a fallback.
	 * Caution: Please use the classname, not the actual column-name in the database.
	 *
	 * @param $className string
	 */",
 "/**
	 * Returns the db-fieldname of the currently used has_one-relationship.
	 */",
 "/**
	 * Manually overwrites the parent-ID relations.
	 * @see setParentClass()
	 * 
	 * @param String $str Example: FamilyID (when one Individual has_one Family)
	 */",
 "/**
	 * Returns the db-fieldname of the currently used relationship.
	 * Note: constructed resolve ambiguous cases in the same manner as
	 * DataObject::getComponentJoinField()
	 */",
 "/**
	 * Return the object-specific fields for the given record, to be shown in the detail pop-up
	 * 
	 * This won\'t include all the CTF-specific \'plumbing; this method is called by self::getFieldsFor()
	 * and the result is then processed further to get the actual FieldSet for the form.
	 *
	 * The default implementation of this processes the value of $this->detailFormFields; consequently, if you want to 
	 * set the value of the fields to something that $this->detailFormFields doesn\'t allow, you can do so by overloading
	 * this method.
	 */",
 "/**
	 * By default, a ComplexTableField will assume that the field name is the name of a has-many relation on the object being
	 * edited.  It will identify the foreign key in the object being listed, and filter on that column, as well as auto-setting
	 * that column for newly created records.
	 * 
	 * Calling $this->setRelationAutoSetting(false) will disable this functionality.
	 *
	 * @param boolean $value Should the relation auto-setting functionality be enabled?
	 */",
 "/**
	 * Use the URL-Parameter \"action_saveComplexTableField\"
	 * to provide a clue to the main controller if the main form has to be rendered,
	 * even if there is no action relevant for the main controller (to provide the instance of ComplexTableField
	 * which in turn saves the record.
	 *
	 * This is for adding new item records. {@link ComplexTableField_ItemRequest::saveComplexTableField()}
	 *
	 * @see Form::ReferencedField
	 */",
 "/**
 * Provides a tabuar list in your form with view, edit and add links to edit records
 * with a \"has-one\"-relationship. Detail-views are shown in a greybox-iframe.
 * Features pagination in the overview as well as the detail-views.
 *
 * CAUTION: You need to make sure that the original form-call to the main controller (e.g. EditForm())
 * returns a form which includes this field even if no data is loaded,
 * to provide a \"starting point\" for action_callfieldmethod and ReferencedField.
 *
 * All URL data sent to and from ComplexTableField is encapsulated in $_REQUEST[\'ctf\']
 * to avoid side-effects with the main controller.
 *
 * Example-URL for a \"DetailForm\"-call explained:
 * \"/admin/family/?executeForm=EditForm&action_callfieldmethod&fieldName=Individual&childID=7&methodName=edit\"
 *  - executeForm			Name of the form on the main rendering page (e.g. \"FamilyAdmin\")
 *  - action_callfieldmethod	Trigger to call a method of a single field in \"EditForm\" instead of rendering the whole thing
 *  - fieldName				Name of the targeted formField
 *  - methodName				Method on the formfield (e.g. \"ComplexTableField\")
 *  - childID				Identifier of the database-record (the targeted table is determined by the $sourceClass parameter)
 *
 * @todo Find a less fragile solution for accessing this field through the main controller and ReferencedField, e.g.
 *      build a seperate CTF-instance (doesn\'t necessarly have to be connected to the original by ReferencedField)
 * @todo Control width/height of popup by constructor (hardcoded at the moment)
 * @todo Integrate search from MemberTableField.php
 * @todo Less performance-hungry implementation of detail-view paging (don\'t return all items on a single view)
 * @todo Use automatic has-many and many-many functions to return a ComponentSet rather than building the join manually
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * Just a hook, processed in {DetailForm()}
	 *
	 * @return String
	 */",
 "/**
	 * Just a hook, processed in {DetailForm()}
	 *
	 * @return String
	 */",
 "/**
	 * Return the data object being manipulated
	 */",
 "/**
	 * Renders view, edit and add, depending on the given information.
	 * The form needs several parameters to function independently of its \"parent-form\", some derived from the context into a hidden-field,
	 * some derived from the parent context (which is not accessible here) and delivered by GET:
	 * ID, Identifier of the currently edited record (only if record is loaded).
	 * <parentIDName>, Link back to the correct parent record (e.g. \"parentID\").
	 * parentClass, Link back to correct container-class (the parent-record might have many \'has-one\'-relationships)
	 * CAUTION: \"ID\" in the DetailForm would be the \"childID\" in the overview table.
	 * 
	 * @param int $childID
	 */",
 "/**
	 * Use the URL-Parameter \"action_saveComplexTableField\"
	 * to provide a clue to the main controller if the main form has to be rendered,
	 * even if there is no action relevant for the main controller (to provide the instance of ComplexTableField
	 * which in turn saves the record.
	 *
	 * This is for editing existing item records. {@link ComplexTableField::saveComplexTableField()}
	 *
	 * @see Form::ReferencedField
	 */",
 "/**
     * Method handles pagination in asset popup.
     *
     * @return Object DataObjectSet
     */",
 "/**
	 * Get part of class ancestry (even if popup is not subclassed it might be styled differently in css)
	 */",
 "/**
	 * Returns the db-fieldname of the currently used has_one-relationship.
	 */",
 "/**
	 * Manually overwrites the parent-ID relations.
	 * @see setParentClass()
	 * 
	 * @param String $str Example: FamilyID (when one Individual has_one Family)
	 */",
 "/**
	 * Returns the db-fieldname of the currently used relationship.
	 */",
 "/**
 * @todo Tie this into ComplexTableField_Item better.
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * @param String $action
	 * @return boolean
	 */",
 "/**
 * Single row of a {@link ComplexTableField}.
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * @return ComplexTableField_ItemRequest
	 */",
 "/**
 * ComplexTablefield_popup is rendered with a lightbox and can load a more
 * detailed view of the source class your presenting.
 * You can customise the fields and requirements as well as any
 * permissions you might need.
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
     * Write a message to the log.
     *
     * @param  array  $event  event data
     * @return void
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Writer
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Null.php 8064 2008-02-16 10:58:39Z thomas $
 */",
 "/**
	 * Sets default proxy settings for outbound RestfulService connections
	 *
	 * @param string $proxy The URL of the proxy to use.
	 * @param int $port Proxy port
	 * @param string $user The proxy auth user name
	 * @param string $password The proxy auth password
	 * @param boolean $socks Set true to use socks5 proxy instead of http
	 */",
 "/**
 	* Creates a new restful service.
 	* @param string $base Base URL of the web service eg: api.example.com 
 	* @param int $expiry Set the cache expiry interva. Defaults to 1 hour (3600 seconds)
 	*/",
 "/**
 	* Sets the Query string parameters to send a request.
 	* @param array $params An array passed with necessary parameters. 
 	*/",
 "/**
	 * Set proxy settings for this RestfulService instance
	 *
	 * @param string $proxy The URL of the proxy to use.
	 * @param int $port Proxy port
	 * @param string $user The proxy auth user name
	 * @param string $password The proxy auth password
	 * @param boolean $socks Set true to use socks5 proxy instead of http
	 */",
 "/**
	 * Set basic authentication
	 */",
 "/**
	 * Set a custom HTTP header
	 */",
 "/**
	 * @deprecated Use RestfulService::request()
	 */",
 "/**
	 * Makes a request to the RESTful server, and return a {@link RestfulService_Response} object for parsing of the result.
	 * @todo Better POST, PUT, DELETE, and HEAD support
	 * @todo Caching of requests - probably only GET and HEAD requestst
	 * @todo JSON support in RestfulService_Response
	 * @todo Pass the response headers to RestfulService_Response
	 *
	 * This is a replacement of {@link connect()}.
	 *
	 * @return RestfulService_Response - If curl request produces error, the returned response\'s status code will be 500
	 */",
 "/** 
	 * Returns a full request url
	 * @param string 
	 */",
 "/**
 	* Gets attributes as an array, of a particular type of element.
 	* Example : <photo id=\"2636\" owner=\"123\" secret=\"ab128\" server=\"2\"> 
 	* returns id, owner,secret and sever attribute values of all such photo elements.
 	* @param string $xml The source xml to parse, this could be the original response received.
 	* @param string $collection The name of parent node which wraps the elements, if available
 	* @param string $element The element we need to extract the attributes.
 	*/",
 "/**
 	* Gets an attribute of a particular element.
 	* @param string $xml The source xml to parse, this could be the original response received.
 	* @param string $collection The name of the parent node which wraps the element, if available
 	* @param string $element The element we need to extract the attribute
 	* @param string $attr The name of the attribute
 	*/",
 "/**
 	* Gets set of node values as an array. 
 	* When you get to the depth in the hierachchy use node_child_subchild syntax to get the value.
 	* @param string $xml The the source xml to parse, this could be the original response received.
 	* @param string $collection The name of parent node which wraps the elements, if available
 	* @param string $element The element we need to extract the node values.
 	*/",
 "/**
 	* Gets a single node value. 
 	* @param string $xml The source xml to parse, this could be the original response received.
 	* @param string $collection The name of parent node which wraps the elements, if available
 	* @param string $element The element we need to extract the node value.
 	*/",
 "/**
 	* Searches for a node in document tree and returns it value. 
 	* @param string $xml source xml to parse, this could be the original response received.
 	* @param string $node Node to search for
 	*/",
 "/**
 	* Searches for a node in document tree and returns its attributes. 
 	* @param string $xml the source xml to parse, this could be the original response received.
 	* @param string $node Node to search for
 	*/",
 "/**
 * RestfulService class allows you to consume various RESTful APIs.
 * Through this you could connect and aggregate data of various web services.
 * For more info visit wiki documentation - http://doc.silverstripe.org/doku.php?id=restfulservice  
 * 
 * @package sapphire
 * @subpackage integration
 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @param string
	 */",
 "/**
	 * Return an array of xpath matches
	 */",
 "/**
	 * Return the first xpath match
	 */",
 "/**
 * @package sapphire
 * @subpackage integration
 */",
 "/**
 * Daily task to send queued email.
 * @package sapphire
 * @subpackage email
 */",
 "/**
	 * Register a new batch action.  Each batch action needs to be represented by a subclass
	 * of 
	 * 
	 * @param $urlSegment The URL Segment of the batch action - the URL used to process this
	 * action will be admin/batchactions/(urlSegment)
	 * @param $batchActionClass The name of the CMSBatchAction subclass to register
	 */",
 "/**
	 * Return a DataObjectSet of ArrayData objects containing the following pieces of info
	 * about each batch action:
	 *  - Link
	 *  - Title
	 *  - DoingText
	 */",
 "/**
 * Special request handler for admin/batchaction
 *  
 * @package cms
 * @subpackage batchaction
 */",
 "/**
	 * Set the global database connection.
	 * Pass an object that\'s a subclass of SS_Database.  This object will be used when {@link DB::query()}
	 * is called.
	 * @param $connection The connecton object to set as the connection.
	 * @param $name The name to give to this connection.  If you omit this argument, the connection
	 * will be the default one used by the ORM.  However, you can store other named connections to
	 * be accessed through DB::getConn($name).  This is useful when you have an application that
	 * needs to connect to more than one database.
	 */",
 "/**
	 * Get the global database connection.
	 * @param $name An optional name given to a connection in the DB::setConn() call.  If omitted, 
	 * the default connection is returned.
	 * @return SS_Database
	 */",
 "/**
	 * Set an alternative database to use for this browser session.
	 * This is useful when using testing systems other than SapphireTest; for example, Windmill.
	 * Set it to null to revert to the main database.
	 */",
 "/**
	 * Get the name of the database in use
	 */",
 "/**
	 * Connect to a database.
	 * Given the database configuration, this method will create the correct subclass of SS_Database,
	 * and set it as the global connection.
	 * @param array $database A map of options. The \'type\' is the name of the subclass of SS_Database to use. For the rest of the options, see the specific class.
	 */",
 "/**
	 * Returns true if a database connection has been attempted.
	 * In particular, it lets the caller know if we\'re still so early in the execution pipeline that
	 * we haven\'t even tried to connect to the database yet.
	 */",
 "/**
	 * Build the connection string from input.
	 * @param array $parameters The connection details.
	 * @return string $connect The connection string.
	 **/",
 "/**
	 * Execute the given SQL query.
	 * @param string $sql The SQL query to execute
	 * @param int $errorLevel The level of error reporting to enable for the query
	 * @return SS_Query
	 */",
 "/**
	 * Execute a complex manipulation on the database.
	 * A manipulation is an array of insert / or update sequences.  The keys of the array are table names,
	 * and the values are map containing \'command\' and \'fields\'.  Command should be \'insert\' or \'update\',
	 * and fields should be a map of field names to field values, including quotes.  The field value can
	 * also be a SQL function or similar.
	 * 
	 * Example:
	 * <code>
	 * array(
	 *   // Command: insert
	 *   \"table name\" => array(
	 *      \"command\" => \"insert\",
	 *      \"fields\" => array(
	 *         \"ClassName\" => \"\'MyClass\'\", // if you\'re setting a literal, you need to escape and provide quotes
	 *         \"Created\" => \"now()\", // alternatively, you can call DB functions
	 *         \"ID\" => 234,
	 *       ),
	 *      \"id\" => 234 // an alternative to providing ID in the fields list
	 *    ),
	 * 
	 *   // Command: update
	 *   \"other table\" => array(
	 *      \"command\" => \"update\",
	 *      \"fields\" => array(
	 *         \"ClassName\" => \"\'MyClass\'\",
	 *         \"LastEdited\" => \"now()\",
	 *       ),
	 *      \"where\" => \"ID = 234\",
	 *      \"id\" => 234 // an alternative to providing a where clause
	 *    ),
	 * )
	 * </code>
	 * 
	 * You\'ll note that only one command on a given table can be called.  
	 * That\'s a limitation of the system that\'s due to it being written for {@link DataObject::write()}, 
	 * which needs to do a single write on a number of different tables.
	 * 
	 * @param array $manipulation
	 */",
 "/**
	 * Get the autogenerated ID from the previous INSERT query.
	 * @return int
	 */",
 "/**
	 * Check if the connection to the database is active.
	 * @return boolean
	 */",
 "/**
	 * Create the database and connect to it. This can be called if the
	 * initial database connection is not successful because the database
	 * does not exist.
	 * @param string $connect Connection string
	 * @param string $username SS_Database username
	 * @param string $password SS_Database Password
	 * @param string $database SS_Database to which to create
	 * @return boolean Returns true if successful
	 */",
 "/**
	 * Create a new table.
	 * @param $tableName The name of the table
	 * @param $fields A map of field names to field types
	 * @param $indexes A map of indexes
	 * @param $options An map of additional options.  The available keys are as follows:
	 *   - \'MSSQLDatabase\'/\'MySQLDatabase\'/\'PostgreSQLDatabase\' - database-specific options such as \"engine\" for MySQL.
	 *   - \'temporary\' - If true, then a temporary table will be created
	 * @return The table name generated.  This may be different from the table name, for example with temporary tables.
	 */",
 "/**
	 * Create a new field on a table.
	 * @param string $table Name of the table.
	 * @param string $field Name of the field to add.
	 * @param string $spec The field specification, eg \'INTEGER NOT NULL\'
	 */",
 "/**
	 * Generate the following table in the database, modifying whatever already exists
	 * as necessary.
	 * @param string $table The name of the table
	 * @param string $fieldSchema A list of the fields to create, in the same form as DataObject::$db
	 * @param string $indexSchema A list of indexes to create.  The keys of the array are the names of the index.
	 * @param boolean $hasAutoIncPK A flag indicating that the primary key on this table is an autoincrement type
	 * The values of the array can be one of:
	 *   - true: Create a single column index on the field named the same as the index.
	 *   - array(\'fields\' => array(\'A\',\'B\',\'C\'), \'type\' => \'index/unique/fulltext\'): This gives you full
	 *     control over the index.
	 * @param string $options SQL statement to append to the CREATE TABLE call.
	 */",
 "/**
	 * Generate the given field on the table, modifying whatever already exists as necessary.
	 * @param string $table The table name.
	 * @param string $field The field name.
	 * @param string $spec The field specification.
	 */",
 "/**
	 * Generate the given index in the database, modifying whatever already exists as necessary.
	 * @param string $table The table name.
	 * @param string $index The index name.
	 * @param string|boolean $spec The specification of the index. See requireTable() for more information.
	 */",
 "/**
	 * If the given table exists, move it out of the way by renaming it to _obsolete_(tablename).
	 * @param string $table The table name.
	 */",
 "/**
	 * See {@link SS_Database->dontRequireField()}.
	 * 
	 * @param string $table The table name.
	 * @param string $fieldName
	 */",
 "/**
	 * Checks a table\'s integrity and repairs it if necessary.
	 * @var string $tableName The name of the table.
	 * @return boolean Return true if the table has integrity after the method is complete.
	 */",
 "/**
	 * Return the number of rows affected by the previous operation.
	 * @return int
	 */",
 "/**
	 * Returns a list of all tables in the database.
	 * The table names will be in lower case.
	 * @return array
	 */",
 "/**
	 * Get a list of all the fields for the given table.
	 * Returns a map of field name => field spec.
	 * @param string $table The table name.
	 * @return array
	 */",
 "/**
	 * Enable supression of database messages.
	 */",
 "/**
	 * Show a message about database alteration.
	 */",
 "/**
 * Global database interface, complete with static methods.
 * Use this class for interacting with the database.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
     * Constructor
     * Validate that the Zend Platform is loaded and licensed
     *
     * @param  array $options Associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @return string Cached data (or false)
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param  string $id Cache id
     * @return mixed|false false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param  string $data             Data to cache
     * @param  string $id               Cache id
     * @param  array  $tags             Array of strings, the cache record will be tagged by each string entry
     * @param  int    $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @return boolean true if no problem
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id Cache id
     * @return boolean True if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * Zend_Cache::CLEANING_MODE_ALL (default)    => remove all cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_OLD              => remove too old cache entries ($tags is not used)
     *                                               This mode is not supported in this backend
     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     => remove cache entries matching all given tags
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG => unsupported
     * Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG => remove cache entries matching any given tags
     *                                               ($tags can be an array of strings or a single string)
     *
     * @param  string $mode Clean mode
     * @param  array  $tags Array of tags
     * @throws Zend_Cache_Exception
     * @return boolean True if no problem
     */",
 "/**
     * Clean a directory and recursivly go over it\'s subdirectories
     *
     * Remove all the cached files that need to be cleaned (according to mode and files mtime)
     *
     * @param  string $dir  Path of directory ot clean
     * @param  string $mode The same parameter as in Zend_Cache_Backend_ZendPlatform::clean()
     * @return boolean True if ok
     */",
 "/**
     * Remove a file
     *
     * If we can\'t remove the file (because of locks or any problem), we will touch
     * the file to invalidate it
     *
     * @param  string $file Complete file path
     * @return boolean True if ok
     */",
 "/**
 * Impementation of Zend Cache Backend using the Zend Platform (Output Content Caching)
 *
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * @category   Zend
 * @package    Zend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * Classes that must be run monthly extend this class
 * 
 * Please note: Subclasses of this task aren\'t extecuted automatically,
 * they need to be triggered by an external automation tool like unix cron.
 * See {@link ScheduledTask} for details.
 * 
 * @package sapphire
 * @subpackage cron
 */",
 "/**
 * Anything that implements HiddenClass won\'t be shown in user-interface elements.  For example,
 * DataObjects that implement HiddenClass won\'t be showing in the \"new page\" dropdown.
 * @package cms
 */",
 "/**
	 * Construct a string type field with a set of optional parameters
	 * @param $name string The name of the field
	 * @param $options array An array of options e.g. array(\'nullifyEmpty\'=>false).  See {@link StringField::setOptions()} for information on the available options
	 */",
 "/**
	 * Update the optional parameters for this field.
	 * @param $options array of options
	 * The options allowed are:
	 *   <ul><li>\"nullifyEmpty\"
	 *       This is a boolean flag.
	 *       True (the default) means that empty strings are automatically converted to nulls to be stored in the database.
	 *       Set it to false to ensure that nulls and empty strings are kept intact in the database.
	 *   </li></ul>
	 * @return unknown_type
	 */",
 "/**
	 * Set whether this field stores empty strings rather than converting them to null
	 * @param $value boolean True if empty strings are to be converted to null
	 */",
 "/**
	 * Get whether this field stores empty strings rather than converting them to null
	 * @return bool True if empty strings are to be converted to null
	 */",
 "/**
	 * (non-PHPdoc)
	 * @see core/model/fieldtypes/DBField#hasValue()
	 */",
 "/**
	 * (non-PHPdoc)
	 * @see core/model/fieldtypes/DBField#prepValueForDB($value)
	 */",
 "/**
	 * Return another DBField object with this value in lowercase.
	 */",
 "/**
	 * Return another DBField object with this value in uppercase.
	 */",
 "/**
 * An abstract base class for the string field types (i.e. Varchar and Text)
 * @package sapphire
 * @subpackage model
 * @author Pete Bacon Darwin
 *
 */",
 "/**
     * Constructor
     *
     * @param  array $options associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * WARNING $doNotTestCacheValidity=true is unsupported by the Apc backend
     *
     * @param  string  $id                     cache id
     * @param  boolean $doNotTestCacheValidity if set to true, the cache validity won\'t be tested
     * @return string cached datas (or false)
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param  string $id cache id
     * @return mixed false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param string $data datas to cache
     * @param string $id cache id
     * @param array $tags array of strings, the cache record will be tagged by each string entry
     * @param int $specificLifetime if != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @return boolean true if no problem
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id cache id
     * @return boolean true if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * \'all\' (default)  => remove all cache entries ($tags is not used)
     * \'old\'            => unsupported
     * \'matchingTag\'    => unsupported
     * \'notMatchingTag\' => unsupported
     * \'matchingAnyTag\' => unsupported
     *
     * @param  string $mode clean mode
     * @param  array  $tags array of tags
     * @throws Zend_Cache_Exception
     * @return boolean true if no problem
     */",
 "/**
     * Return true if the automatic cleaning is available for the backend
     *
     * DEPRECATED : use getCapabilities() instead
     * 
     * @deprecated 
     * @return boolean
     */",
 "/**
     * Return the filling percentage of the backend storage
     * 
     * @throws Zend_Cache_Exception
     * @return int integer between 0 and 100
     */",
 "/**
     * Return an array of stored tags
     *
     * @return array array of stored tags (string)
     */",
 "/**
     * Return an array of stored cache ids which match given tags
     * 
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which don\'t match given tags
     * 
     * In case of multiple tags, a logical OR is made between tags
     *
     * @param array $tags array of tags
     * @return array array of not matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which match any given tags
     * 
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of any matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids
     * 
     * @return array array of stored cache ids (string)
     */",
 "/**
     * Return an array of metadatas for the given cache id
     *
     * The array must include these keys :
     * - expire : the expire timestamp
     * - tags : a string array of tags
     * - mtime : timestamp of last modification time
     * 
     * @param string $id cache id
     * @return array array of metadatas (false if the cache id is not found)
     */",
 "/**
     * Give (if possible) an extra lifetime to the given cache id
     *
     * @param string $id cache id
     * @param int $extraLifetime
     * @return boolean true if ok
     */",
 "/**
     * Return an associative array of capabilities (booleans) of the backend
     * 
     * The array must include these keys :
     * - automatic_cleaning (is automating cleaning necessary)
     * - tags (are tags supported)
     * - expired_read (is it possible to read expired cache records
     *                 (for doNotTestCacheValidity option for example))
     * - priority does the backend deal with priority when saving
     * - infinite_lifetime (is infinite lifetime can work with this backend)
     * - get_list (is it possible to get the list of cache ids and the complete list of tags)
     * 
     * @return array associative of with capabilities
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Return a URL from this user\'s navigation history.
	 * @param pagesBack The number of pages back to go.  The default, 1, returns the previous
	 * page.
	 */",
 "/**
	 * Add URL matching rules to the Director.
	 * 
	 * The director is responsible for turning URLs into Controller objects.
	 * 
	 * @param $priority The priority of the rules; higher values will get your rule checked first.  
	 * We recommend priority 100 for your site\'s rules.  The built-in rules are priority 10, standard modules are priority 50.
	 */",
 "/**
	 * Process the given URL, creating the appropriate controller and executing it.
	 * 
	 * Request processing is handled as follows:
	 *  - Director::direct() creates a new SS_HTTPResponse object and passes this to Director::handleRequest().
	 *  - Director::handleRequest($request) checks each of the Director rules and identifies a controller to handle this 
	 *    request.
	 *  - Controller::handleRequest($request) is then called.  This will find a rule to handle the URL, and call the rule
	 *    handling method.
	 *  - RequestHandler::handleRequest($request) is recursively called whenever a rule handling method returns a
	 *    RequestHandler object.
	 *
	 * In addition to request processing, Director will manage the session, and perform the output of the actual response
	 * to the browser.
	 * 
	 * @param $url String, the URL the user is visiting, without the querystring.
	 * @uses handleRequest() rule-lookup logic is handled by this.
	 * @uses Controller::run() Controller::run() handles the page logic for a Director::direct() call.
	 */",
 "/**
	 * Test a URL request, returning a response object.
	 * 
	 * This method is the counterpart of Director::direct() that is used in functional testing.  It will execute the URL given,
	 * 
	 * @param string $url The URL to visit
	 * @param array $postVars The $_POST & $_FILES variables
	 * @param Session $session The {@link Session} object representing the current session.  By passing the same object to multiple
	 * calls of Director::test(), you can simulate a persisted session.
	 * @param string $httpMethod The HTTP method, such as GET or POST.  It will default to POST if postVars is set, GET otherwise.
	 *  Overwritten by $postVars[\'_method\'] if present.
	 * @param string $body The HTTP body
	 * @param array $headers HTTP headers with key-value pairs
	 * @param array $cookies to populate $_COOKIE
	 * @return SS_HTTPResponse
	 * 
	 * @uses getControllerForURL() The rule-lookup logic is handled by this.
	 * @uses Controller::run() Controller::run() handles the page logic for a Director::direct() call.
	 */",
 "/**
	 * Handle an HTTP request, defined with a SS_HTTPRequest object.
	 *
	 * @return SS_HTTPResponse|string
	 */",
 "/**
	 * Returns the urlParam with the given name
	 * 
	 * @deprecated 3.0 Use SS_HTTPRequest->latestParam()
	 */",
 "/**
	 * Returns an array of urlParams.
	 * 
	 * @deprecated 3.0 Use SS_HTTPRequest->latestParams()
	 */",
 "/**
	 * Set url parameters (should only be called internally by RequestHandler->handleRequest()).
	 * 
	 * @param $params array
	 */",
 "/**
	 * Return the {@link SiteTree} object that is currently being viewed. If there is no SiteTree object to return,
	 * then this will return the current controller.
	 *
	 * @return SiteTree
	 */",
 "/**
	 * Set the currently active {@link SiteTree} object that is being used to respond to the request.
	 *
	 * @param SiteTree $page
	 */",
 "/**
	 * @deprecated 2.4 Use {@link Director::get_current_page()}.
	 */",
 "/**
	 * Turns the given URL into an absolute URL.
	 * @todo Document how relativeToSiteBase works
	 */",
 "/**
	 * Returns the part of the URL, \'http://www.mysite.com\'.
	 * 
	 * @return boolean|string The domain from the PHP environment. Returns FALSE is this environment variable isn\'t set.
	 */",
 "/**
	 * Return the current protocol that the site is running under 
	 *
	 * @return String
	 */",
 "/**
	 * Redirect to another page.
	 *  - $url can be an absolute URL
	 *  - or it can be a URL relative to the \"site base\"
	 *  - if it is just a word without an slashes, then it redirects to another action on the current controller.
	 */",
 "/**
	 * Tests whether a redirection has been requested.
	 * @return string If redirect() has been called, it will return the URL redirected to.  Otherwise, it will return null;
	 */",
 "/**
	 * Sets the HTTP status code
	 */",
 "/**
	 * Returns the current HTTP status code
	 */",
 "/**
	 * @deprecated 2.5 Use Controller->redirectBack()
	 */",
 "/**


	*/",
 "/**


	*/",
 "/**


	*/",
 "/**


	*/",
 "/**


	*

	*


	*/",
 "/**


	*


	*/",
 "/**

	*


	*/",
 "/**


	*


	*/",
 "/**

	 * as defined by {@link makeRelative()} and {@link absoluteBaseUrl()}.
	 * Useful to check before redirecting based on a URL from user submissions
	 * through $_GET or $_POST, and avoid phishing attacks by redirecting
	 * to an attackers server.
	 * 
	 * @param string $url
	 * @return boolean
	 */",
 "/**
	 * Given a filesystem reference relative to the site root, return the full file-system path.
	 * 
	 * @param string $file
	 * @return string
	 */",
 "/**
	 * Returns true if the given file exists.
	 * @param $file Filename specified relative to the site root
	 */",
 "/**
	 * Returns the Absolute URL of the site root.
	 */",
 "/**
	 * Returns the Absolute URL of the site root, embedding the current basic-auth credentials into the URL.
	 */",
 "/**
	 * Force the site to run on SSL.
	 * 
	 * To use, call from _config.php. For example:
	 * <code>
	 * if(Director::isLive()) Director::forceSSL();
	 * </code>
	 * 
	 * If you don\'t want your entire site to be on SSL, you can pass an array of PCRE regular expression
	 * patterns for matching relative URLs. For example:
	 * <code>
	 * if(Director::isLive()) Director::forceSSL(array(\'/^admin/\', \'/^Security/\'));
	 * </code>
	 * 
	 * Note that the session data will be lost when moving from HTTP to HTTPS.
	 * It is your responsibility to ensure that this won\'t cause usability problems.
	 * 
	 * CAUTION: This does not respect the site environment mode. You should check this
	 * as per the above examples using Director::isLive() or Director::isTest() for example.
	 * 
	 * @return boolean|string String of URL when unit tests running, boolean FALSE if patterns don\'t match request URI
	 */",
 "/**
	 * Force a redirect to a domain starting with \"www.\"
	 */",
 "/**
	 * Checks if the current HTTP-Request is an \"Ajax-Request\"
	 * by checking for a custom header set by prototype.js or
	 * wether a manually set request-parameter \'ajax\' is present.
	 *
	 * @return boolean
	 */",
 "/**
	 * Returns true if this script is being run from the command line rather than the webserver.
	 * 
	 * @return boolean
	 */",
 "/**
	 * @deprecated 2.4
	 */",
 "/**
	 * @deprecated 2.4
	 */",
 "/**
	 * @deprecated 2.4 Use a custom extension on your controller.
	 */",
 "/**
	 * Set the environment type of the current site.
	 *
	 * Typically, a SilverStripe site have a number of environments: 
	 *  - development environments, such a copy on your local machine.
	 *  - test sites, such as the one you show the client before going live.
	 *  - the live site itself.
	 * 
	 * The behaviour of these environments often varies slightly.  For example, development sites may have errors dumped to the screen,
	 * and order confirmation emails might be sent to the developer instead of the client.
	 * 
	 * To help with this, Sapphire support the notion of an environment type.  The environment type can be dev, test, or live.
	 * 
	 * You can set it explicitly with Director::set_environment_tpye().  Or you can use {@link Director::set_dev_servers()} and {@link Director::set_test_servers()}
	 * to set it implicitly, based on the value of $_SERVER[\'HTTP_HOST\'].  If the HTTP_HOST value is one of the servers listed, then
	 * the environment type will be test or dev.  Otherwise, the environment type will be live.
	 *
	 * Dev mode can also be forced by putting ?isDev=1 in your URL, which will ask you to log in and then push the site into dev
	 * mode for the remainder of the session. Putting ?isDev=0 onto the URL can turn it back.
	 * 
	 * Test mode can also be forced by putting ?isTest=1 in your URL, which will ask you to log in and then push the site into test
	 * mode for the remainder of the session. Putting ?isTest=0 onto the URL can turn it back.
	 * 
	 * Generally speaking, these methods will be called from your _config.php file.
	 * 
	 * Once the environment type is set, it can be checked with {@link Director::isDev()}, {@link Director::isTest()}, and
	 * {@link Director::isLive()}.
	 * 
	 * @param $et string The environment type: dev, test, or live.
	 */",
 "/**
	 * Can also be checked with {@link Director::isDev()}, {@link Director::isTest()}, and {@link Director::isLive()}.
	 * 
	 * @return string \'dev\', \'test\' or \'live\'
	 */",
 "/**
	 * Specify HTTP_HOST values that are development environments.
	 * For information about environment types, see {@link Director::set_environment_type()}.
	 * 
	 * CAUTION: Domain information can easily be spoofed in HTTP requests,
	 * we recommend to set this mode via {@link Director::set_environment_type()}
	 * or an _ss_environment.php instead.
	 * 
	 * @param $servers array An array of HTTP_HOST values that should be treated as development environments.
	 */",
 "/**
	 * Specify HTTP_HOST values that are test environments.
	 * For information about environment types, see {@link Director::set_environment_type()}.
	 * 
	 * CAUTION: Domain information can easily be spoofed in HTTP requests,
	 * we recommend to set this mode via {@link Director::set_environment_type()}
	 * or an _ss_environment.php instead.
	 * 
	 * @param $servers array An array of HTTP_HOST values that should be treated as test environments.
	 */",
 "/**
	 * This function will return true if the site is in a development environment.
	 * For information about environment types, see {@link Director::set_environment_type()}.
	 */",
 "/**
	 * This function will return true if the site is in a test environment.
	 * For information about environment types, see {@link Director::set_environment_type()}.
	 */",
 "/**
 * Director is responsible for processing URLs, and providing environment information.
 * 
 * The most important part of director is {@link Director::direct()}, which is passed a URL and will execute the appropriate
 * controller.
 * 
 * Director also has a number of static methods that provide information about the environment, such as {@link Director::set_environment_type()}.
 *
 * @package sapphire
 * @subpackage control
 * @see Director::direct(),Director::addRules(),Director::set_environment_type()
 */",
 "/**
	 * Use javascript i18n through the ss.i18n class (enabled by default).
	 * If set to TRUE, includes javascript requirements for the base library
	 * (sapphire/javascript/i18n.js) and all necessary lang files (e.g. sapphire/lang/de_DE.js)
	 * plus fallbacks to the default locale (e.g. sapphire/lang/en_US.js).
	 * If set to FALSE, only includes a stub implementation
	 * which is necessary. Mainly disabled to save bandwidth
	 * in a frontend context when website is in single language.
	 *
	 * Caution: This flag gets overwritten in {@link LeftAndMain::init()} to enforce javascript
	 * i18n for the CMS interfaces.
	 * 
	 * @see Requirements::process_i18n_javascript() 
	 *
	 * @param bool $bool
	 */",
 "/**
	 * @return bool
	 */",
 "/**
	 * @param string ISO date format
	 */",
 "/**
	 * @return string ISO date format
	 */",
 "/**
	 * @param string ISO time format
	 */",
 "/**
	 * @return string ISO time format
	 */",
 "/**
	 * This is the main translator function. Returns the string defined by $class and $entity according to the currently set locale.
	 *
	 * @param string $entity Entity that identifies the string. It must be in the form \"Namespace.Entity\" where Namespace will be usually
	 * 						 the class name where this string is used and Entity identifies the string inside the namespace.
	 * @param string $string The original string itself. In a usual call this is a mandatory parameter, but if you are reusing a string which
	 *				 has already been \"declared\" (using another call to this function, with the same class and entity), you can omit it.
	 * @param string $priority Optional parameter to set a translation priority. If a string is widely used, should have a high priority (PR_HIGH),
	 * 				    in this way translators will be able to prioritise this strings. If a string is rarely shown, you should use PR_LOW.
	 *				    You can use PR_MEDIUM as well. Leaving this field blank will be interpretated as a \"normal\" priority (less than PR_MEDIUM).
	 * @param string $context If the string can be difficult to translate by any reason, you can help translators with some more info using this param
	 *
	 * @return string The translated string, according to the currently set locale {@link i18n::set_locale()}
	 */",
 "/**
	 * Get a list of commonly used languages
	 *
	 * @param boolean $native Use native names for languages instead of English ones
	 * @return list of languages in the form \'code\' => \'name\'
	 */",
 "/**
	 * Get a list of commonly used locales
	 *
	 * @param boolean $native Use native names for locale instead of English ones
	 * @return list of languages in the form \'code\' => \'name\'
	 */",
 "/**
	 * Get a list of locales (code => language and country)
	 *
	 * @return list of languages in the form \'code\' => \'name\'
	 */",
 "/**
	 * Searches the root-directory for module-directories
	 * (identified by having a _config.php on their first directory-level).
	 * Returns all found locales.
	 * 
	 * @return array
	 */",
 "/**
	 * Get a name from a language code (two characters, e.g. \"en\").
	 * 
	 * @see get_locale_name()
	 *
	 * @param mixed $code Language code
	 * @param boolean $native If true, the native name will be returned
	 * @return Name of the language
	 */",
 "/**
	 * Get a name from a locale code (xx_YY).
	 * 
	 * @see get_language_name()
	 *
	 * @param mixed $code locale code
	 * @return Name of the locale
	 */",
 "/**
	 * Get a code from an English language name
	 *
	 * @param mixed $name Name of the language
	 * @return Language code (if the name is not found, it\'ll return the passed name)
	 */",
 "/**
	 * Get the current tinyMCE language
	 * 
	 * @return Language
	 */",
 "/**
	 * Searches the root-directory for module-directories
	 * (identified by having a _config.php on their first directory-level
	 * and a language-file with the default locale in the /lang-subdirectory).
	 * 
	 * @return array
	 */",
 "/**
	 * Returns the \"short\" language name from a locale,
	 * e.g. \"en_US\" would return \"en\". This conversion
	 * is determined internally by the {@link $tinymce_lang}
	 * lookup table. If no match can be found in this lookup,
	 * the characters before the underscore (\"_\") are returned.
	 * 
	 * @todo More generic lookup table, don\'t rely on tinymce specific conversion
	 * 
	 * @param string $locale E.g. \"en_US\"
	 * @return string Short language code, e.g. \"en\"
	 */",
 "/**
	 * Provides you \"likely locales\"
	 * for a given \"short\" language code. This is a guess,
	 * as we can\'t disambiguate from e.g. \"en\" to \"en_US\" - it
	 * could also mean \"en_UK\". Based on the Unicode CLDR
	 * project.
	 * @see http://www.unicode.org/cldr/data/charts/supplemental/likely_subtags.html
	 * 
	 * @param string $lang Short language code, e.g. \"en\"
	 * @return string Long locale, e.g. \"en_US\"
	 */",
 "/**
	 * Gets a RFC 1766 compatible language code,
	 * e.g. \"en-US\".
	 *
	 * @see http://www.ietf.org/rfc/rfc1766.txt
	 * @see http://tools.ietf.org/html/rfc2616#section-3.10
	 * 
	 * @param string $locale
	 * @return string
	 */",
 "/**


	*


	*/",
 "/**
	*Validatesa\"long\" locale format (e.g. \"en_US\")
	 * by checking it against {@link $all_locales}.
	 * 
	 * To add a locale to {@link $all_locales}, use the following example
	 * in your mysite/_config.php:
	 * <code>
	 * i18n::$allowed_locales[\'xx_XX\'] = \'<Language name>\';
	 * </code>
	 * 
	 * Note: Does not check for {@link $allowed_locales}.
	 * 
	 * @return boolean
	 */",
 "/**
	 * Set the current locale, used as the default for 
	 * any localized classes, such as {@link FormField} or {@link DBField}
	 * instances. Locales can also be persisted in {@link Member->Locale},
	 * for example in the {@link CMSMain} interface the Member locale
	 * overrules the global locale value set here.
	 * 
	 * See {@link Translatable::set_locale()}.
	 * 
	 * @param string $locale Locale to be set. See http://unicode.org/cldr/data/diff/supplemental/languages_and_territories.html for a list of possible locales.
	 */",
 "/**
	 * Get the current locale.
	 * Used by {@link Member::populateDefaults()}
	 * 
	 * @return string Current locale in the system
	 */",
 "/**
	 * @deprecated 2.4 Use Translatable::set_default_locale() or i18n::set_default_locale()
	 * @param $lang String
	 */",
 "/**
	 * @deprecated 2.4 Use Translatable::default_locale() or i18n::default_locale()
	 * @return String
	 */",
 "/**
	 * This is the \"fallback locale\", in case resources with the \"current locale\"
	 * (set through {@link set_locale()}) can\'t be found.
	 * 
	 * If you just want to globally read/write a different locale (e.g. in a CMS interface),
	 * please use {@link get_locale()} and {@link set_locale()} instead.
	 * 
	 * For example, {@link Requirements::add_i18n_javascript()} and {@link i18n::include_by_class()}
	 * use this \"fallback locale\" value to include fallback language files.
	 * 
	 * @return String
	 */",
 "/**
	 * See {@link default_locale()} for usage.
	 * 
	 * 
	 * @param String $locale
	 */",
 "/**
	 * Enables the multilingual content feature (proxy for Translatable::enable()).
	 * 
	 * @deprecated 2.4 Use Object::add_extension(\'Page\', \'Translatable\');
	 */",
 "/**
	 * Disable the multilingual content feature (proxy for Translatable::disable())
	 * 
	 * @deprecated 2.4 Use Object::add_extension(\'Page\', \'Translatable\');
	 */",
 "/**
	 * Include a locale file determined by module name and locale 
	 * 
	 * @param string $module Module that contains the locale file
	 * @param string $locale Locale to be loaded
	 */",
 "/**
	 * Includes all available language files for a certain defined locale
	 * 
	 * @param string $locale All resources from any module in locale $locale will be loaded
	 * @param boolean $load_plugins		If true (default), load extra translations from registered plugins
	 * @param boolean $force_load		If true (not default), we force the inclusion. Generally this should be off
	 * 									for performance, but enabling this is useful for interfaces like
	 * 									CustomTranslationAdmin which need to load more than the usual locales,
	 * 									and may need to reload them. 
	 */",
 "/**
	 * Given a class name (a \"locale namespace\"), will search for its module and, if available,
	 * will load the resources for the currently defined locale.
	 * If not available, the original English resource will be loaded instead (to avoid blanks)
	 * 
	 * @param string $class Resources for this class will be included, according to the set locale.
	 */",
 "/**
	 * This method will delete every SiteTree instance in the given language
	 */",
 "/**
	 * Register a named translation plug-in function.
	 * Plug-ins are assumed to be registered before any call to _t. If registered after a call to _t
	 * for a given local, it will not be called.
	 * @static
	 * @throws Exception
	 * @param  $name		String		A unique name for the translation plug-in. If the plug-in is already registered,
	 * 									it is replaced, including if its a different priority.
	 * @param  $callback				A callback function as given to call_user_func_array.
	 * @param int $priority				An integer priority, default 10.
	 * @return void
	 */",
 "/**
	 * Unregister a plugin by name.
	 * @static
	 * @param  $name	String		Name of previously registered plugin
	 * @return Boolean				Returns true if remove, false if not.
	 */",
 "/**
	 * Load any translations from registered plugins. Merges them directly into $lang.
	 * @static
	 * @param  $local
	 * @param  $value
	 * @return void
	 */",
 "/**
	 * Merge an extra of language translations into $lang[$locale]. We\'d use array_merge_recursive, except
	 * it doesn\'t work for translations that specify priorities and comments, because they are indexed by number.
	 * @static
	 * @param $locale String		The locale we are merging into
	 * @param $extra Array			An array of [locale][class][entity]=> translation, keyed on entity, that are to be
	 * 								merged for this locale.
	 * @return void
	 */",
 "/**
 * Base-class for storage and retrieval of translated entities.
 * 
 * Please see the {@link Translatable} extension for managing translations of database-content.
 * 
 * <b>Usage</b>
 * 
 * PHP:
 * <code>
 * _t(\'MyNamespace.MYENTITY\', \'My default natural language value\');
 * _t(\'MyNamespace.MYENTITY\', \'My default natural language value\', PR_MEDIUM, \'My explanatory context\');
 * sprintf(_t(\'MyNamespace.MYENTITY\', \'Counting %s things\'), 42);
 * </code>
 * 
 * Templates:
 * <code>
 * <% _t(\'MyNamespace.MYENTITY\', \'My default natural language value\') %>
 * <% sprintf(_t(\'MyNamespace.MYENTITY\',\'Counting %s things\'),$ThingsCount) %>
 * </code>
 *
 * Javascript (see sapphire/javascript/i18n.js):
 * <code>
 * ss.i18n._t(\'MyEntity.MyNamespace\',\'My default natural language value\');
 * </code>
 * 
 * File-based i18n-translations always have a \"locale\" (e.g. \'en_US\').
 * Common language names (e.g. \'en\') are mainly used in {@link Translatable} for
 * database-entities.
 * 
 * <b>Text Collection</b>
 * 
 * Features a \"textcollector-mode\" that parses all files with a certain extension
 * (currently *.php and *.ss) for new translatable strings. Textcollector will write
 * updated string-tables to their respective folders inside the module, and automatically
 * namespace entities to the classes/templates they are found in (e.g. $lang[\'en_US\'][\'AssetAdmin\'][\'UPLOADFILES\']).
 * 
 * Caution: Does not apply any character-set conversion, it is assumed that all content
 * is stored and represented in UTF-8 (Unicode). Please make sure your files are created with the correct
 * character-set, and your HTML-templates render UTF-8.
 * 
 * Caution: The language file has to be stored in the same module path as the \"filename namespaces\"
 * on the entities. So an entity stored in $lang[\'en_US\'][\'AssetAdmin\'][\'DETAILSTAB\'] has to
 * in the language file cms/lang/en_US.php, as the referenced file (AssetAdmin.php) is stored
 * in the \"cms\" module.
 * 
 * <b>Locales</b>
 *
 * For the i18n class, a \"locale\" consists of a language code plus a region code separated by an underscore, 
 * for example \"de_AT\" for German language (\"de\") in the region Austria (\"AT\").
 * See http://www.w3.org/International/articles/language-tags/ for a detailed description.
 * 
 * @see http://doc.silverstripe.org/i18n
 * @see http://www.w3.org/TR/i18n-html-tech-lang
 *
 * @author Bernat Foj Capell <bernat@silverstripe.com>
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * Overload this method to contain the task logic.
	 */",
 "/**
 * Base class invoked from CLI rather than the webserver (Cron jobs, handling email bounces).
 * You can call subclasses of CliController directly, which will trigger a
 * call to {@link process()} on every sub-subclass. For instance, calling
 * \"sake DailyTask\" from the commandline will call {@link process()} on every subclass
 * of DailyTask.
 * 
 * @package sapphire
 * @subpackage cron
 */",
 "/**
	 * See {@link getShortName()} and {@link getNativeName()}.
	 * 
	 * @param Boolean $showNative Show a localized version of the name instead, based on the 
	 *  field\'s locale value.
	 * @return String
	 */",
 "/**
	 * Resolves the locale to a common english-language
	 * name through {@link i18n::get_common_locales()}.
	 * 
	 * @return String
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * Returns the localized name based on the field\'s value.
	 * Example: \"de_DE\" returns \"Deutsch\".
	 * 
	 * @return String
	 */",
 "/**
 * Locale database field, mainly used in {@link Translatable} extension.
 * 
 * @todo Allowing showing locale values in different languages through Nice()
 * 
 * @package sapphire
 * @subpackage i18n
 */",
 "/**
 * Classes that must be run yearly extend this class
 * 
 * Please note: Subclasses of this task aren\'t extecuted automatically,
 * they need to be triggered by an external automation tool like unix cron.
 * See {@link ScheduledTask} for details.
 * 
 * @package sapphire
 * @subpackage cron
 */",
 "/**
	 * Create a new ValidationResult.
	 * By default, it is a successful result.	Call $this->error() to record errors.
	 */",
 "/**
	 * Record an error against this validation result,
	 * @param $message The validation error message
	 * @param $code An optional error code string, that can be accessed with {@link $this->codeList()}.
	 */",
 "/**
	 * Returns true if the result is valid.
	 */",
 "/**
	 * Get an array of errors
	 */",
 "/**
	 * Get an array of error codes
	 */",
 "/**
	 * Get the error message as a string.
	 */",
 "/**
	 * Get a starred list of all messages
	 */",
 "/**
	 * Combine this Validation Result with the ValidationResult given in other.
	 * It will be valid if both this and the other result are valid.
	 * This object will be modified to contain the new validation information.
	 */",
 "/**
 * A class that combined as a boolean result with an optional list of error messages.
 * This is used for returning validation results from validators
 * @package sapphire
 * @subpackage core
 */",
 "/** PHP Validation **/",
 "/**
 * A Single Numeric field extending a typical 
 * TextField but with validation.
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
 * This class represents \"transformations\" of a form - such as making it printable or making it readonly.
 * The idea is that sometimes you will want to make your own such transformations, and you shouldn\'t have
 * to edit the underlying code to support this.
 * 
 * The first step in creating a transformation is subclassing FormTransformation.  After that, you have two
 * ways of defining specific functionality:
 *   - Define performMyTransformation() methods on each applicable FormField() object.
 *   - Define transformFieldType($field) methods on your subclass of FormTransformation.
 * 
 * To actually perform the transformation, call $form->transform(new MyTransformation());
 * @package forms
 * @subpackage transformations
 */",
 "/**
	 * Get current validator
	 * 
	 * @return object $validator
	 */",
 "/**
	 * Set a different instance than {@link Upload_Validator}
	 * for this upload session.
	 * 
	 * @param object $validator
	 */",
 "/**
	 * Save an file passed from a form post into this object.
	 * 
	 * @param $tmpFile array Indexed array that PHP generated for every file it uploads.
	 * @param $folderPath string Folder path relative to /assets
	 * @return Boolean|string Either success or error-message.
	 */",
 "/**
	 * Load temporary PHP-upload into File-object.
	 *
	 * @param array $tmpFile
	 * @param File $file
	 * @return Boolean
	 */",
 "/**
	 * Container for all validation on the file
	 * (e.g. size and extension restrictions).
	 * Is NOT connected to the {Validator} classes,
	 * please have a look at {FileField->validate()}
	 * for an example implementation of external validation.
	 *
	 * @param array $tmpFile
	 * @return boolean
	 */",
 "/**
	 * Get file-object, either generated from {load()},
	 * or manually set.
	 *
	 * @return File
	 */",
 "/**
	 * Set a file-object (similiar to {loadIntoFile()})
	 *
	 * @param File $file
	 */",
 "/**
	 * Get maximum file size for all or specified file extension.
	 * 
	 * @deprecated 2.5 Please use Upload_Validator::getAllowedMaxFileSize() instead
	 * 
	 * @param string $ext
	 * @return int Filesize in bytes
	 */",
 "/**
	 * Set filesize maximums (in bytes).
	 * Automatically converts extensions to lowercase
	 * for easier matching.
	 * 
	 * Example: 
	 * <code>
	 * array(\'*\' => 200, \'jpg\' => 1000)
	 * </code>
	 *
	 * @deprecated 2.5 Please use Upload_Validator::setAllowedMaxFileSize() instead
	 *
	 * @param array|int $rules
	 */",
 "/**
	 * @deprecated 2.5 Please use Upload_Validator::getAllowedExtensions() instead
	 * @return array
	 */",
 "/**
	 * @deprecated 2.5 Please use Upload_Validator::setAllowedExtensions() instead
	 * @param array $rules
	 */",
 "/**
	 * Determines if the bytesize of an uploaded
	 * file is valid - can be defined on an
	 * extension-by-extension basis in {$allowedMaxFileSize}
	 * 
	 * @deprecated 2.5 Please use Upload_Validator::isValidExtension() instead
	 *
	 * @param array $tmpFile
	 * @return boolean
	 */",
 "/**
	 * Determines if the temporary file has a valid extension
	 * 
	 * @deprecated 2.5 Please use Upload_Validator::isValidExtension() instead
	 * 
	 * @param array $tmpFile
	 * @return boolean
	 */",
 "/**
	 * Clear out all errors (mostly set by {loadUploaded()})
	 */",
 "/**
	 * Determines wether previous operations caused an error.
	 * 
	 * @return boolean
	 */",
 "/**
	 * Return all errors that occurred while processing so far
	 * (mostly set by {loadUploaded()})
	 *
	 * @return array
	 */",
 "/**
 * Manages uploads via HTML forms processed by PHP,
 * uploads to Silverstripe\'s default upload directory,
 * and either creates a new or uses an existing File-object
 * for syncing with the database.
 * 
 * <b>Validation</b>
 * 
 * By default, a user can upload files without extension limitations,
 * which can be a security risk if the webserver is not properly secured.
 * Use {@link setAllowedExtensions()} to limit this list,
 * and ensure the \"assets/\" directory does not execute scripts
 * (see http://doc.silverstripe.org/secure-development#filesystem).
 * {@link File::$allowed_extensions} provides a good start for a list of \"safe\" extensions.
 * 
 * @package sapphire
 * @subpackage filesystem
 * 
 * @todo Allow for non-database uploads
 */",
 "/**
	 * Return all errors that occurred while validating
	 * the temporary file.
	 *
	 * @return array
	 */",
 "/**
	 * Set information about temporary file produced by PHP.
	 * @param array $tmpFile
	 */",
 "/**
	 * Get maximum file size for all or specified file extension.
	 *
	 * @param string $ext
	 * @return int Filesize in bytes
	 */",
 "/**
	 * Set filesize maximums (in bytes).
	 * Automatically converts extensions to lowercase
	 * for easier matching.
	 * 
	 * Example: 
	 * <code>
	 * array(\'*\' => 200, \'jpg\' => 1000)
	 * </code>
	 *
	 * @param array|int $rules
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * Limit allowed file extensions. Empty by default, allowing all extensions.
	 * To allow files without an extension, use an empty string.
	 * See {@link File::$allowed_extensions} to get a good standard set of
	 * extensions that are typically not harmful in a webserver context.
	 * See {@link setAllowedMaxFileSize()} to limit file size by extension.
	 * 
	 * @param array $rules List of extensions
	 */",
 "/**
	 * Determines if the bytesize of an uploaded
	 * file is valid - can be defined on an
	 * extension-by-extension basis in {@link $allowedMaxFileSize}
	 *
	 * @return boolean
	 */",
 "/**
	 * Determines if the temporary file has a valid extension
	 * An empty string in the validation map indicates files without an extension.
	 * @return boolean
	 */",
 "/**
	 * Run through the rules for this validator checking against
	 * the temporary file set by {@link setTmpFile()} to see if
	 * the file is deemed valid or not.
	 * 
	 * @return boolean
	 */",
 "/**
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
 * Transformation that will turn a form into a readonly version of itself
 * @package forms
 * @subpackage transformations
 */",
 "/**
 * Classes that must be run quarter hourly extend this class
 * 
 * Please note: Subclasses of this task aren\'t extecuted automatically,
 * they need to be triggered by an external automation tool like unix cron.
 * See {@link ScheduledTask} for details.
 * 
 * @package sapphire
 * @subpackage cron
 */",
 "/**
	 * Find a File object by the given filename.
	 * 
	 * @param String $filename Matched against the \"Name\" property.
	 * @return mixed null if not found, File object of found file
	 */",
 "/**
	 * @todo Unnecessary shortcut for AssetTableField, coupled with cms module.
	 * 
	 * @return Integer
	 */",
 "/**
	 * Event handler called before deleting from the database.
	 * You can overload this to clean up or otherwise process data before delete this
	 * record.  Don\'t forget to call {@link parent::onBeforeDelete()}, though!
	 */",
 "/**
	 * Updates link tracking.
	 */",
 "/**
	 * @todo Enforce on filesystem URL level via mod_rewrite
	 * 
	 * @return boolean
	 */",
 "/**
	 * Returns true if the following conditions are met:
	 * - CMS_ACCESS_AssetAdmin
	 * 
	 * @todo Decouple from CMS view access
	 * 
	 * @return boolean
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Returns a category based on the file extension.
	 * This can be useful when grouping files by type,
	 * showing icons on filelinks, etc.
	 * Possible group values are: \"audio\", \"mov\", \"zip\", \"image\".
	 * 
	 * @return String
	 */",
 "/**
	 * Return the relative URL of an icon for the file type,
	 * based on the {@link appCategory()} value.
	 * Images are searched for in \"sapphire/images/app_icons/\".
	 * 
	 * @return String 
	 */",
 "/**
	 * Should be called after the file was uploaded 
	 */",
 "/**
	 * Delete the database record (recursively for folders) without touching the filesystem
	 */",
 "/**
	 * Make sure the file has a name
	 */",
 "/**
	 * Set name on filesystem. If the current object is a \"Folder\", will also update references
	 * to subfolders and contained file records (both in database and filesystem)
	 */",
 "/**
	 * Moving the file if appropriate according to updated database content.
	 * Throws an Exception if the new file already exists.
	 * 
	 * Caution: This method should just be called during a {@link write()} invocation,
	 * as it relies on {@link DataObject->isChanged()}, which is reset after a {@link write()} call.
	 * Might be called as {@link File->updateFilesystem()} from within {@link Folder->updateFilesystem()},
	 * so it has to handle both files and folders.
	 * 
	 * Assumes that the \"Filename\" property was previously updated, either directly or indirectly.
	 * (it might have been influenced by {@link setName()} or {@link setParentID()} before).
	 */",
 "/**
	 * Collate selected descendants of this page.
	 * $condition will be evaluated on each descendant, and if it is succeeds, that item will be added
	 * to the $collator array.
	 * @param condition The PHP condition to be evaluated.  The page will be called $item
	 * @param collator An array, passed by reference, to collect all of the matching descendants.
	 */",
 "/**
	 * Setter function for Name. Automatically sets a default title,
	 * and removes characters that might be invalid on the filesystem.
	 * Also adds a suffix to the name if the filename already exists
	 * on the filesystem, and is associated to a different {@link File} database record
	 * in the same folder. This means \"myfile.jpg\" might become \"myfile-1.jpg\".
	 * 
	 * Does not change the filesystem itself, please use {@link write()} for this.
	 * 
	 * @param String $name
	 */",
 "/**
	 * Rewrite links to the $old file to now point to the $new file.
	 * 
	 * @uses SiteTree->rewriteFileURL()
	 * 
	 * @param String $old File path relative to the webroot
	 * @param String $new File path relative to the webroot
	 */",
 "/**
	 * Does not change the filesystem itself, please use {@link write()} for this.
	 */",
 "/**
	 * Gets the absolute URL accessible through the web.
	 * 
	 * @uses Director::absoluteBaseURL()
	 * @return string
	 */",
 "/**
	 * Gets the relative URL accessible through the web.
	 * 
	 * @uses Director::baseURL()
	 * @return string
	 */",
 "/**
	 * Return the last 50 characters of the URL.
	 * 
	 * @deprecated 2.4
	 */",
 "/**
	 * Returns an absolute filesystem path to the file.
	 * Use {@link getRelativePath()} to get the same path relative to the webroot.
	 * 
	 * @return String 
	 */",
 "/**
	 * Returns path relative to webroot.
	 * Serves as a \"fallback\" method to create the \"Filename\" property if it isn\'t set.
	 * If no {@link Folder} is set (\"ParentID\" property),
	 * defaults to a filename relative to the ASSETS_DIR (usually \"assets/\").
	 * 
	 * @return String
	 */",
 "/**
	 * @todo Coupling with cms module, remove this method.
	 */",
 "/**
	 * Does not change the filesystem itself, please use {@link write()} for this.
	 */",
 "/**
	 * Returns the file extension
	 * 
	 * @todo This overrides getExtension() in DataObject, but it does something completely different.
	 * This should be renamed to getFileExtension(), but has not been yet as it may break
	 * legacy code.
	 * 
	 * @return String
	 */",
 "/**
	 * Gets the extension of a filepath or filename,
	 * by stripping away everything before the last \"dot\".
	 * Caution: Only returns the last extension in \"double-barrelled\"
	 * extensions (e.g. \"gz\" for \"tar.gz\").
	 * 
	 * Examples:
	 * - \"myfile\" returns \"\"
	 * - \"myfile.txt\" returns \"txt\"
	 * - \"myfile.tar.gz\" returns \"gz\"
	 *
	 * @param string $filename
	 * @return string
	 */",
 "/**
	 * Return the type of file for the given extension
	 * on the current file name.
	 *
	 * @return string
	 */",
 "/**
	 * Returns the size of the file type in an appropriate format.
	 */",
 "/**
	 * Return file size in bytes.
	 * @return int
	 */",
 "/**
	 * We\'ve overridden the DataObject::get function for File so that the very large content field
	 * is excluded!
	 *
	 * @todo Admittedly this is a bit of a hack; but we need a way of ensuring that large
	 * TEXT fields don\'t stuff things up for the rest of us.  Perhaps a separate search table would
	 * be a better way of approaching this?
	 * @deprecated alternative_instance_get()
	 */",
 "/**
	 *
	 * @param boolean $includerelations a boolean value to indicate if the labels returned include relation fields
	 * 
	 */",
 "/**
	 * Allow custom fields for uploads in {@link AssetAdmin}.
	 * Similar to {@link getCMSFields()}, but a more restricted
	 * set of fields which can be reliably set on any file type.
	 * 
	 * Needs to be enabled through {@link AssetAdmin::$metadata_upload_enabled}
	 * 
	 * @return FieldSet
	 */",
 "/**
 * This class handles the representation of a file on the filesystem within the framework.
 * Most of the methods also handle the {@link Folder} subclass.
 * 
 * Note: The files are stored in the assets/ directory, but sapphire
 * looks at the db object to gather information about a file such as URL
 * It then uses this for all processing functions (like image manipulation).
 * 
 * <b>Security</b>
 * 
 * Caution: It is recommended to disable any script execution in the \"assets/\"
 * directory in the webserver configuration, to reduce the risk of exploits.
 * See http://doc.silverstripe.org/secure-development#filesystem
 * 
 * <b>Properties</b>
 * 
 * - \"Name\": File name (including extension) or folder name.
 *   Should be the same as the actual filesystem. 
 * - \"Title\": Optional title of the file (for display purposes only).
 *   Defaults to \"Name\".
 * - \"Filename\": Path of the file or folder, relative to the webroot.
 *   Usually starts with the \"assets/\" directory, and has no trailing slash.
 *   Defaults to the \"assets/\" directory plus \"Name\" property if not set.
 *   Setting the \"Filename\" property will override the \"Name\" property.
 *   The value should be in sync with \"ParentID\".
 * - \"Content\": Typically unused, but handy for a textual representation of
 *   files, e.g. for fulltext indexing of PDF documents.
 * - \"ParentID\": Points to a {@link Folder} record. Should be in sync with
 *   \"Filename\". A ParentID=0 value points to the \"assets/\" folder, not the webroot.
 * 
 * <b>Synchronization</b>
 * 
 * Changes to a File database record can change the filesystem entry, 
 * but not the other way around. If the filesystem path is renamed outside
 * of SilverStripe, there\'s no way for the database to recover this linkage.
 * New physical files on the filesystem can be \"discovered\" via {@link Filesystem::sync()},
 * the equivalent {@link File} and {@link Folder} records are automatically 
 * created by this method.
 * 
 * Certain property changes within the File API that can cause a \"delayed\" filesystem change:
 * The change is enforced in {@link onBeforeWrite()} later on.
 * - setParentID()
 * - setFilename()
 * - setName()
 * It is recommended that you use {@link write()} directly after setting any of these properties,
 * otherwise getters like {@link getFullPath()} and {@link getRelativePath()}
 * will result paths that are inconsistent with the filesystem.
 * 
 * Caution: Calling {@link delete()} will also delete from the filesystem.
 * Call {@link deleteDatabaseOnly()} if you want to avoid this.
 * 
 * <b>Creating Files and Folders</b>
 * 
 * Typically both files and folders should be created first on the filesystem,
 * and then reflected in as database records. Folders can be created recursively
 * from sapphire both in the database and filesystem through {@link Folder::findOrMake()}.
 * Ensure that you always set a \"Filename\" property when writing to the database,
 * leaving it out can lead to unexpected results.
 * 
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
	 * Constructor
	 *
	 * @param DataObjectSet $entries RSS feed entries
	 * @param string $link Link to the feed
	 * @param string $title Title of the feed
	 * @param string $description Description of the field
	 * @param string $titleField Name of the field that should be used for the
	 *                           titles for the feed entries
	 * @param string $descriptionField Name of the field that should be used
	 *                                 for the description for the feed
	 *                                 entries
	 * @param string $authorField Name of the field that should be used for
	 *                            the author for the feed entries
	 * @param int $lastModified Unix timestamp of the latest modification
	 *                          (latest posting)
	 * @param string $etag The ETag is an unique identifier that is changed
	 *                         every time the representation does
	 */",
 "/**
	 * Include an link to the feed
	 *
	 * @param string $url URL of the feed
	 * @param string $title Title to show
	 */",
 "/**
	 * Get the RSS feed entries
	 *
	 * @return DataObjectSet Returns the {@link RSSFeed_Entry} objects.
	 */",
 "/**
	 * Get the title of thisfeed
	 *
	 * @return string Returns the title of the feed.
	 */",
 "/**
	 * Get the URL of this feed
	 *
	 * @param string $action
	 * @return string Returns the URL of the feed.
	 */",
 "/**
	 * Get the description of this feed
	 *
	 * @return string Returns the description of the feed.
	 */",
 "/**
	 * Output the feed to the browser
	 */",
 "/**
	 * Return the content of the RSS feed.
	 * 
	 * Also temporarily disabled source file comments, and restores
	 * to previous state once content has been rendered.
	 * 
	 * @return string
	 */",
 "/**
 * RSSFeed class
 *
 * This class is used to create an RSS feed.
 * @todo Improve documentation
 * @package sapphire
 * @subpackage integration
 */",
 "/**
	 * Create a new RSSFeed entry.
	 */",
 "/**
	 * Get the description of this entry
	 *
	 * @return string Returns the description of the entry.
	 */",
 "/**
	 * Get the description of this entry
	 *
	 * @return string Returns the description of the entry.
	 */",
 "/**
	 * Get the author of this entry
	 *
	 * @return string Returns the author of the entry.
	 */",
 "/**
	 * Return the named field as an obj() call from $this->failover.
	 * Default to the given class if there\'s no casting information.
	 */",
 "/**
	 * Get a link to this entry
	 *
	 * @return string Returns the URL of this entry
	 */",
 "/**
 * RSSFeed_Entry class
 *
 * This class is used for entries of an RSS feed.
 *
 * @see RSSFeed
 * @package sapphire
 * @subpackage integration
 */",
 "/**
	 * @todo Very basic validation at the moment
	 */",
 "/**
	 * @todo Very basic validation at the moment
	 */",
 "/**
 * Field for displaying phone numbers. It separates the number, the area code and optionally the country code
 * and extension.
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * Find the given folder or create it both as {@link Folder} database records
	 * and on the filesystem. If necessary, creates parent folders as well.
	 * 
	 * @param $folderPath string Absolute or relative path to the file.
	 *  If path is relative, its interpreted relative to the \"assets/\" directory.
	 * @return Folder
	 */",
 "/**
	 * Syncronise the file database with the actual content of the assets folder
	 */",
 "/**
	 * Construct a child of this Folder with the given name.
	 * It does this without actually using the object model, as this starts messing
	 * with all the data.  Rather, it does a direct database insert.
	 */",
 "/**
	 * Take a file uploaded via a POST form, and save it inside this folder.
	 */",
 "/**
	 * Delete the database record (recursively for folders) without touching the filesystem
	 */",
 "/**
	 * Returns true if this folder has children
	 */",
 "/**
	 * Returns true if this folder has children
	 */",
 "/**
	 * Overloaded to call recursively on all contained {@link File} records.
	 */",
 "/**
	 * This isn\'t a decendant of SiteTree, but needs this in case
	 * the group is \"reorganised\";
	 */",
 "/**
	 * Return the FieldSet used to edit this folder in the CMS.
	 * You can modify this fieldset by subclassing folder, or by creating a {@link DataObjectDecorator}
	 * and implemeting updateCMSFields(FieldSet $fields) on that decorator.	
	 */",
 "/**
     * Looks for files used in system and create where clause which contains all ID\'s of files.
     * 
     * @returns String where clause which will work as filter.
     */",
 "/**
	 * Display the upload form.  Returns an iframe tag that will show admin/assets/uploadiframe.
	 */",
 "/**
	 * Get the children of this folder that are also folders.
	 */",
 "/**
 * Represents a folder in the assets/ directory.
 * The folder path is stored in the \"Filename\" property.
 * 
 * Updating the \"Name\" or \"Filename\" properties on
 * a folder object also updates all associated children
 * (both {@link File} and {@link Folder} records).
 * 
 * Deleting a folder will also remove the folder from the filesystem,
 * including any subfolders and contained files. Use {@link deleteDatabaseOnly()}
 * to avoid touching the filesystem.
 * 
 * See {@link File} documentation for more details about the
 * relationship between the database and filesystem in the sapphire file APIs.
 * 
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
     * Creates table for displaying unused files.
     *
     * @returns AssetTableField
     */",
 "/**
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
	 * Get the HtmlEditorConfig object for the given identifier. This is a correct way to get an HtmlEditorConfig instance - do not call \'new\'
	 * @param $identifier string - the identifier for the config set
	 * @return HtmlEditorConfig - the configuration object. This will be created if it does not yet exist for that identifier
	 */",
 "/**
	 * Set the currently active configuration object
	 * @param $identifier string - the identifier for the config set
	 * @return null
	 */",
 "/**
	 * Get the currently active configuration object
	 * @return HtmlEditorConfig - the active configuration object
	 */",
 "/**
	 * Get the available configurations as a map of friendly_name to
	 * configuration name.
	 * @return array
	 */",
 "/**
	 * Get the current value of an option
	 * @param $k string - The key of the option to get
	 * @return mixed - The value of the specified option 
	 */",
 "/**
	 * Set the value of one option
	 * @param $k string - The key of the option to set
	 * @param $v mixed - The value of the option to set
	 * @return mixed - $v returned for chaining
	 */",
 "/**
	 * Set multiple options
	 * @param $a array - The options to set, as keys and values of the array
	 * @return null
	 */",
 "/**
	 * Enable one or several plugins. Will maintain unique list if already 
	 * enabled plugin is re-passed. If passed in as a map of plugin-name to path,
	 * the plugin will be loaded by tinymce.PluginManager.load() instead of through tinyMCE.init().
	 * Keep in mind that these externals plugins require a dash-prefix in their name.
	 * 
	 * @see http://wiki.moxiecode.com/index.php/TinyMCE:API/tinymce.PluginManager/load
	 * 
	 * @param String [0..] a string, or several strings, or a single array of strings - The plugins to enable
	 * @return null
	 */",
 "/**
	 * Enable one or several plugins. Will properly handle being passed a plugin that is already disabled
	 * @param String [0..] a string, or several strings, or a single array of strings - The plugins to disable
	 * @return null
	 */",
 "/**
	 * @return Array
	 */",
 "/**
	 * Totally re-set the buttons on a given line
	 * 
	 * @param integer from 1..3 - The line number to redefine
	 * @param string  a string or several strings, or a single array of strings - The button names to make this line contain 
	 * @return null
	 */",
 "/**
	 * Add buttons to the end of a line
	 * @param integer from 1..3
	 * @param string a string, or several strings, or a single array of strings - The button names to add to the end of this line 
	 * @return null
	 */",
 "/**
	 * Internal function for adding and removing buttons related to another button
	 * @param $name string - the name of the button to modify
	 * @param $offset integer - the offset relative to that button to perform an array_splice at - 0 for before $name, 1 for after 
	 * @param $del integer - the number of buttons to remove at the position given by index(string) + offset
	 * @param $add mixed - an array or single item to insert at the position given by index(string) + offset, or null for no insertion
	 * @return boolean - true if $name matched a button, false otherwise
	 */",
 "/**
	 * Insert buttons before the first occurance of another button
	 * @param string - the name of the button to insert other buttons before
	 * @param string a string, or several strings, or a single array of strings - the button names to insert before that button 
	 * @return boolean - true if insertion occured, false if it did not (because the given button name was not found)
	 */",
 "/**
	 * Insert buttons after the first occurance of another button
	 * @param string - the name of the button to insert other buttons after
	 * @param string a string, or several strings, or a single array of strings - the button names to insert after that button 
	 * @return boolean - true if insertion occured, false if it did not (because the given button name was not found)
	 */",
 "/**
	 * Remove the first occurance of buttons
	 * @param string one or more strings - the name of the buttons to remove
	 * @return null
	 */",
 "/**
	 * Generate the javascript that will set tinyMCE\'s configuration to that of the current settings of this object
	 * @return string - the javascript
	 */",
 "/**
 * A PHP version of TinyMCE\'s configuration, to allow various parameters to be configured on a site or section basis
 * 
 * There can be multiple HtmlEditorConfig\'s, which should always be created / accessed using HtmlEditorConfig::get. You can then set 
 * the currently active config using set_active. Whichever config is active when HtmlEditorField#Field is called wins.
 *  
 * @author \"Hamish Friedlander\" <hamish@silverstripe.com>
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * Create a new LanguageDropdownField
	 * @param string $name
	 * @param string $title
	 * @param array $excludeLocales List of locales that won\'t be included
	 * @param string $translatingClass Name of the class with translated instances where to look for used languages
	 * @param string $list Indicates the source language list. Can be either Common-English, Common-Native, Locale-English, Locale-Native
	 */",
 "/**
 * An extension to dropdown field, pre-configured to list languages.
 * The languages already used in the site will be on top.
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * Applies a match on the trailing characters of a field value.
	 *
	 * @return unknown
	 */",
 "/**
 * Matches textual content with a substring match on a text fragment leading
 * to the end of the string.
 * 
 * <code>
 *  \"abcdefg\" => \"defg\" # true
 *  \"abcdefg\" => \"abcd\" # false
 * </code>
 * 
 * @package sapphire
 * @subpackage search
 */",
 "/**
 * Abstract task representing scheudled tasks.
 * 
 * Scheduled tasks are tasks that are run at a certain time or set interval. For example, notify a page owner that
 * their page is about to expire. Scheduled tasks are implemented as singleton instances and a single 
 * instance is responsibly directly or  indirectly for executing all tasks that should be run at that time.
 * 
 * You can use the different subclasses {@link HourlyTask}, {@link DailyTask},
 * {@link WeeklyTask} to determine when a task should be run,
 * and use automation tools such as unix cron to trigger them.
 * 
 * <b>Usage</b>
 * 
 * Implement a daily task by extending DailyTask and implementing process().
 * 
 * <code>
 * class MyTask extends DailyTask {
 *     function process() {
 *       // implement your task here
 *     }
 *   }
 * </code>
 * 
 * You can also implement the index() method to overwrite which singleton classes are instantiated and processed. 
 * By default, all subclasses of the task are instantiated and used. For the DailyTask class, this means 
 * that an instance of each subclass of DailyTask will be created.
 * 
 * You can test your task from the command line by running the following command 
 * (replace <MyTask> is the classname of your task):
 * 
 * <code>sapphire/cli-script.php /<MyTask></code>
 * 
 * To perform all Daily tasks, run from the command line:
 * 
 * <code>cli-script.php /DailyTask</code>
 * 
 * <b>Example Cron Definition</b>
 * 
 * <code>
 * # Quarter-hourly task (every hour at 25 minutes past) (remove space between first * and /15)
 * * /15 * * * *  www-data /my/webroot/sapphire/cli-script.php /QuarterlyHourlyTask > /var/log/silverstripe_quarterhourlytask.log
 *
 * # HourlyTask (every hour at 25 minutes past)
 * 25 * * * *  www-data /my/webroot/sapphire/cli-script.php /HourlyTask > /var/log/silverstripe_hourlytask.log
 * 
 * # DailyTask (every day at 6:25am)
 * 25 6 * * *  www-data /my/webroot/sapphire/cli-script.php /DailyTask > /var/log/silverstripe_dailytask.log
 * 
 * # WeelkyTask (every Monday at 6:25am)
 * 25 6 1 * *  www-data /my/webroot/sapphire/cli-script.php /WeeklyTask > /var/log/silverstripe_weeklytask.log
 * </code>
 * 
 * @todo Improve documentation
 * @package sapphire
 * @subpackage cron
 */",
 "/**
	 * Returns an hidden input field, class=\"hidden\" and type=\"hidden\"
	 */",
 "/**
 * Hidden field.
 * @package forms
 * @subpackage fields-dataless
 */",
 "/**
     * Constructor
     *
     * @param  array $options associative array of options
     * @return void
     */",
 "/**
     * Set the frontend directives
     *
     * @param  array $directives assoc of directives
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * For this test backend only, if $id == \'false\', then the method will return false
     * if $id == \'serialized\', the method will return a serialized array
     * (\'foo\' else)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @return string Cached datas (or false)
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * For this test backend only, if $id == \'false\', then the method will return false
     * (123456 else)
     *
     * @param  string $id Cache id
     * @return mixed|false false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * For this test backend only, if $id == \'false\', then the method will return false
     * (true else)
     *
     * @param  string $data             Datas to cache
     * @param  string $id               Cache id
     * @param  array  $tags             Array of strings, the cache record will be tagged by each string entry
     * @param  int    $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @return boolean True if no problem
     */",
 "/**
     * Remove a cache record
     *
     * For this test backend only, if $id == \'false\', then the method will return false
     * (true else)
     *
     * @param  string $id Cache id
     * @return boolean True if no problem
     */",
 "/**
     * Clean some cache records
     *
     * For this test backend only, if $mode == \'false\', then the method will return false
     * (true else)
     *
     * Available modes are :
     * Zend_Cache::CLEANING_MODE_ALL (default)    => remove all cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_OLD              => remove too old cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     => remove cache entries matching all given tags
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG => remove cache entries not {matching one of the given tags}
     *                                               ($tags can be an array of strings or a single string)
     *
     * @param  string $mode Clean mode
     * @param  array  $tags Array of tags
     * @return boolean True if no problem
     */",
 "/**
     * Get the last log
     *
     * @return string The last log
     */",
 "/**
     * Get the log index
     *
     * @return int Log index
     */",
 "/**
     * Get the complete log array
     *
     * @return array Complete log array
     */",
 "/**
     * Return true if the automatic cleaning is available for the backend
     *
     * @return boolean
     */",
 "/**
     * Add an event to the log array
     *
     * @param  string $methodName MethodName
     * @param  array  $args       Arguments
     * @return void
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * @return $query
	 */",
 "/**
 * Selects numerical/date content smaller than the input
 *
 * @todo documentation
 * 
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Creates the link to this form, including the search pattern
	 *
	 * @return string
	 */",
 "/**
	 * Get the pop-up fields for the given record.
	 */",
 "/**
	 * Provide some HTML for a search form, to be 
	 * added above the AssetTable field, allowing
	 * a user to filter the current table\'s files
	 * by their filename.
	 *
	 * @return string HTML for search form
	 */",
 "/**
 * A special kind of complex table field for manipulating assets.
 *
 * @package cms
 * @subpackage assets
 */",
 "/**
	 * Check that the user has appropriate permissions to execute this task
	 */",
 "/**
	 * Actually clear out all the images
	 */",
 "/**
 * Remove all cached/generated images that have been created as the result of a manipulation method being called on a
 * {@link Image} object
 *
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
	 * Get a DataFormatter object suitable for handling the given file extension.
	 * 
	 * @param string $extension
	 * @return DataFormatter
	 */",
 "/**
	 * Get formatter for the first matching extension.
	 *
	 * @param array $extensions
	 * @return DataFormatter
	 */",
 "/**
	 * Get a DataFormatter object suitable for handling the given mimetype.
	 * 
	 * @param string $mimeType
	 * @return DataFormatter
	 */",
 "/**
	 * Get formatter for the first matching mimetype.
	 * Useful for HTTP Accept headers which can contain
	 * multiple comma-separated mimetypes.
	 *
	 * @param array $mimetypes
	 * @return DataFormatter
	 */",
 "/**
	 * @param array $fields
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * @param array $fields
	 */",
 "/**
	 * @param array $relations
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * @param array $fields
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * @param int $size
	 */",
 "/**
	 * @return int
	 */",
 "/**
	 * Returns all fields on the object which should be shown
	 * in the output. Can be customised through {@link self::setCustomFields()}.
	 *
	 * @todo Allow for custom getters on the processed object (currently filtered through inheritedDatabaseFields)
	 * @todo Field level permission checks
	 * 
	 * @param DataObject $obj
	 * @return array
	 */",
 "/** 
	 * Return an array of the extensions that this data formatter supports
	 */",
 "/**
	 * Convert a single data object to this format.  Return a string.
	 */",
 "/**
	 * Convert a data object set to this format.  Return a string.
	 */",
 "/**
	 * @param string $strData HTTP Payload as string
	 */",
 "/**
 * A DataFormatter object handles transformation of data from Sapphire model objects to a particular output format, and vice versa.
 * This is most commonly used in developing RESTful APIs.
 * 
 * @package sapphire
 * @subpackage formatters
 */",
 "/**
     * Constructor
     *
     * @param  array $options Associative array of options
     * @throws Zend_cache_Exception
     * @return void
     */",
 "/**
     * Destructor
     *
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @return string|false Cached datas
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param string $id Cache id
     * @return mixed|false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param  string $data             Datas to cache
     * @param  string $id               Cache id
     * @param  array  $tags             Array of strings, the cache record will be tagged by each string entry
     * @param  int    $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @throws Zend_Cache_Exception
     * @return boolean True if no problem
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id Cache id
     * @return boolean True if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * Zend_Cache::CLEANING_MODE_ALL (default)    => remove all cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_OLD              => remove too old cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     => remove cache entries matching all given tags
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG => remove cache entries not {matching one of the given tags}
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG => remove cache entries matching any given tags
     *                                               ($tags can be an array of strings or a single string)
     *
     * @param  string $mode Clean mode
     * @param  array  $tags Array of tags
     * @return boolean True if no problem
     */",
 "/**
     * Return an array of stored cache ids
     *
     * @return array array of stored cache ids (string)
     */",
 "/**
     * Return an array of stored tags
     *
     * @return array array of stored tags (string)
     */",
 "/**
     * Return an array of stored cache ids which match given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which don\'t match given tags
     *
     * In case of multiple tags, a logical OR is made between tags
     *
     * @param array $tags array of tags
     * @return array array of not matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which match any given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of any matching cache ids (string)
     */",
 "/**
     * Return the filling percentage of the backend storage
     *
     * @throws Zend_Cache_Exception
     * @return int integer between 0 and 100
     */",
 "/**
     * Return an array of metadatas for the given cache id
     *
     * The array must include these keys :
     * - expire : the expire timestamp
     * - tags : a string array of tags
     * - mtime : timestamp of last modification time
     *
     * @param string $id cache id
     * @return array array of metadatas (false if the cache id is not found)
     */",
 "/**
     * Give (if possible) an extra lifetime to the given cache id
     *
     * @param string $id cache id
     * @param int $extraLifetime
     * @return boolean true if ok
     */",
 "/**
     * Return an associative array of capabilities (booleans) of the backend
     *
     * The array must include these keys :
     * - automatic_cleaning (is automating cleaning necessary)
     * - tags (are tags supported)
     * - expired_read (is it possible to read expired cache records
     *                 (for doNotTestCacheValidity option for example))
     * - priority does the backend deal with priority when saving
     * - infinite_lifetime (is infinite lifetime can work with this backend)
     * - get_list (is it possible to get the list of cache ids and the complete list of tags)
     *
     * @return array associative of with capabilities
     */",
 "/**
     * PUBLIC METHOD FOR UNIT TESTING ONLY !
     *
     * Force a cache record to expire
     *
     * @param string $id Cache id
     */",
 "/**
     * Return the connection resource
     *
     * If we are not connected, the connection is made
     *
     * @throws Zend_Cache_Exception
     * @return resource Connection resource
     */",
 "/**
     * Execute an SQL query silently
     *
     * @param string $query SQL query
     * @return mixed|false query results
     */",
 "/**
     * Deal with the automatic vacuum process
     *
     * @return void
     */",
 "/**
     * Register a cache id with the given tag
     *
     * @param  string $id  Cache id
     * @param  string $tag Tag
     * @return boolean True if no problem
     */",
 "/**
     * Build the database structure
     *
     * @return false
     */",
 "/**
     * Check if the database structure is ok (with the good version)
     *
     * @return boolean True if ok
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * Zend_Cache::CLEANING_MODE_ALL (default)    => remove all cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_OLD              => remove too old cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     => remove cache entries matching all given tags
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG => remove cache entries not {matching one of the given tags}
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG => remove cache entries matching any given tags
     *                                               ($tags can be an array of strings or a single string)
     *
     * @param  string $mode Clean mode
     * @param  array  $tags Array of tags
     * @return boolean True if no problem
     */",
 "/**
     * Check if the database structure is ok (with the good version), if no : build it
     *
     * @throws Zend_Cache_Exception
     * @return boolean True if ok
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * Dummy class that filters need to extend from.
 * @package  sapphire
 * @subpackage misc
 */",
 "/**
	 * Convert the given utf8 string to a safe ASCII source
	 */",
 "/**
	 * Transliteration using strtr() and a lookup table
	 */",
 "/**
	 * Transliteration using iconv()
	 */",
 "/**
 * Support class for converting unicode strings into a suitable 7-bit ASCII equivalent.
 * 
 * Usage:
 * 
 * <code>
 * $tr = new Transliterator();
 * $ascii = $tr->toASCII($unicode);
 * </code>
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Set the value of this field in various formats.
	 * Used by {@link DataObject->getField()}, {@link DataObject->setCastedField()}
	 * {@link DataObject->dbObject()} and {@link DataObject->write()}.
	 * 
	 * As this method is used both for initializing the field after construction,
	 * and actually changing its values, it needs a {@link $markChanged}
	 * parameter. 
	 * 
	 * @param DBField|array $value
	 * @param array $record Map of values loaded from the database
	 * @param boolean $markChanged Indicate wether this field should be marked changed. 
	 *  Set to FALSE if you are initializing this field after construction, rather
	 *  than setting a new value.
	 */",
 "/**
	 * Add the custom internal values to an INSERT or UPDATE
	 * request passed through the ORM with {@link DataObject->write()}.
	 * Fields are added in $manipulation[\'fields\']. Please ensure
	 * these fields are escaped for database insertion, as no
	 * further processing happens before running the query.
	 * Use {@link DBField->prepValueForDB()}.
	 * Ensure to write NULL or empty values as well to allow 
	 * unsetting a previously set field. Use {@link DBField->nullValue()}
	 * for the appropriate type.
	 * 
	 * @param array $manipulation
	 */",
 "/**
	 * Add all columns which are defined through {@link requireField()}
	 * and {@link $composite_db}, or any additional SQL that is required
	 * to get to these columns. Will mostly just write to the {@link SQLQuery->select}
	 * array.
	 * 
	 * @param SQLQuery $query
	 */",
 "/**
	 * Return array in the format of {@link $composite_db}.
	 * Used by {@link DataObject->hasOwnDatabaseField()}.
	 * @return array
	 */",
 "/**
	 * Determines if the field has been changed since its initialization.
	 * Most likely relies on an internal flag thats changed when calling
	 * {@link setValue()} or any other custom setters on the object.
	 * 
	 * @return boolean
	 */",
 "/**
	 * Determines if any of the properties in this field have a value,
	 * meaning at least one of them is not NULL.
	 * 
	 * @return boolean
	 */",
 "/**
 * Apply this interface to any {@link DBField} that doesn\'t have a 1-1 mapping with a database field.
 * This includes multi-value fields and transformed fields
 *
 * @todo Unittests for loading and saving composite values (see GIS module for existing similiar unittests)
 * 
 * Example with a combined street name and number:
 * <code>
* class Street extends DBFields implements CompositeDBField() {
* 	protected $streetNumber;
* 	protected $streetName;
* 	protected $isChanged = false;
* 	static $composite_db = return array(
* 		\"Number\" => \"Int\",
* 		\"Name\" => \"Text\"
* 	);
* 		
* 	function requireField() {
* 		DB::requireField($this->tableName, \"{$this->name}Number\", \'Int\');
* 		DB::requireField($this->tableName, \"{$this->name}Name\", \'Text\');
* 	}
* 
* 	function writeToManipulation(&$manipulation) {
* 		if($this->getStreetName()) {
* 			$manipulation[\'fields\'][\"{$this->name}Name\"] = $this->prepValueForDB($this->getStreetName());
* 		} else {
* 			$manipulation[\'fields\'][\"{$this->name}Name\"] = DBField::create(\'Varchar\', $this->getStreetName())->nullValue();
* 		}
* 		
* 		if($this->getStreetNumber()) {
* 			$manipulation[\'fields\'][\"{$this->name}Number\"] = $this->prepValueForDB($this->getStreetNumber());
* 		} else {
* 			$manipulation[\'fields\'][\"{$this->name}Number\"] = DBField::create(\'Int\', $this->getStreetNumber())->nullValue();
* 		}
* 	}
* 	
* 	function addToQuery(&$query) {
* 		parent::addToQuery($query);
* 		$query->select[] = \"{$this->name}Number\";
* 		$query->select[] = \"{$this->name}Name\";
* 	}
* 	
* 	function setValue($value, $record = null, $markChanged=true) {
* 		if ($value instanceof Street && $value->hasValue()) {
* 			$this->setStreetName($value->getStreetName(), $markChanged);
* 			$this->setStreetNumber($value->getStreetNumber(), $markChanged);
* 			if($markChanged) $this->isChanged = true;
* 		} else if($record && isset($record[$this->name . \'Name\']) && isset($record[$this->name . \'Number\'])) {
* 			if($record[$this->name . \'Name\'] && $record[$this->name . \'Number\']) {
* 				$this->setStreetName($record[$this->name . \'Name\'], $markChanged);
* 				$this->setStreetNumber($record[$this->name . \'Number\'], $markChanged);
* 			} 
* 			if($markChanged) $this->isChanged = true;
* 		} else if (is_array($value)) {
* 			if (array_key_exists(\'Name\', $value)) {
* 				$this->setStreetName($value[\'Name\'], $markChanged);
* 			}
* 			if (array_key_exists(\'Number\', $value)) {
* 				$this->setStreetNumber($value[\'Number\'], $markChanged);
* 			}
* 			if($markChanged) $this->isChanged = true;
* 		}
* 	}
* 	
* 	function setStreetNumber($val, $markChanged=true) {
* 		$this->streetNumber = $val;
* 		if($markChanged) $this->isChanged = true;
* 	}
* 	
* 	function setStreetName($val, $markChanged=true) {
* 		$this->streetName = $val;
* 		if($markChanged) $this->isChanged = true;
* 	}
* 	
* 	function getStreetNumber() {
* 		return $this->streetNumber;
* 	}
* 	
* 	function getStreetName() {
* 		return $this->streetName;
* 	}
* 	
* 	function isChanged() {
* 		return $this->isChanged;
* 	}
* 	
* 	function hasValue() {
* 		return ($this->getStreetName() || $this->getStreetNumber());
* 	}
* }
 * </code>
 *
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 *	@throws	Exception	An exception is thrown if your API key is invalid.
	 *	@param	string	Your WordPress API key.
	 *	@param	string	$blogURL			The URL of your blog.
	 */",
 "/**
	 *	Tests for spam.
	 *
	 *	Uses the web service provided by {@link http://www.akismet.com Akismet} to see whether or not the submitted comment is spam.  Returns a boolean value.
	 *
	 *	@return		bool	True if the comment is spam, false if not
	 */",
 "/**
	 *	Submit spam that is incorrectly tagged as ham.
	 *
	 *	Using this function will make you a good citizen as it helps Akismet to learn from its mistakes.  This will improve the service for everybody.
	 */",
 "/**
	 *	Submit ham that is incorrectly tagged as spam.
	 *
	 *	Using this function will make you a good citizen as it helps Akismet to learn from its mistakes.  This will improve the service for everybody.
	 */",
 "/**
	 *	To override the user IP address when submitting spam/ham later on
	 *
	 *	@param string $userip	An IP address.  Optional.
	 */",
 "/**
	 *	To override the referring page when submitting spam/ham later on
	 *
	 *	@param string $referrer	The referring page.  Optional.
	 */",
 "/**
	 *	A permanent URL referencing the blog post the comment was submitted to.
	 *
	 *	@param string $permalink	The URL.  Optional.
	 */",
 "/**
	 *	The type of comment being submitted.  
	 *
	 *	May be blank, comment, trackback, pingback, or a made up value like \"registration\" or \"wiki\".
	 */",
 "/**
	 *	The name that the author submitted with the comment.
	 */",
 "/**
	 *	The email address that the author submitted with the comment.
	 *
	 *	The address is assumed to be valid.
	 */",
 "/**
	 *	The URL that the author submitted with the comment.
	 */",
 "/**
	 *	The comment\'s body text.
	 */",
 "/**
	 *	Defaults to 80
	 */",
 "/**
	 *	Defaults to rest.akismet.com
	 */",
 "/**
	 *	Defaults to \'1.1\'
	 */",
 "/**
 *	The Akismet PHP5 Class
 *
 *  This class takes the functionality from the Akismet WordPress plugin written by {@link http://photomatt.net/ Matt Mullenweg} and allows it to be integrated into any PHP5 application or website.
 *
 *  The original plugin is {@link http://akismet.com/download/ available on the Akismet website}.
 *
 *  <b>Usage:</b>
 *  <code>
 *    $akismet = new Akismet(\'http://www.example.com/blog/\', \'aoeu1aoue\');
 *    $akismet->setCommentAuthor($name);
 *    $akismet->setCommentAuthorEmail($email);
 *    $akismet->setCommentAuthorURL($url);
 *    $akismet->setCommentContent($comment);
 *    $akismet->setPermalink(\'http://www.example.com/blog/alex/someurl/\');
 *    if($akismet->isCommentSpam())
 *      // store the comment but mark it as spam (in case of a mis-diagnosis)
 *    else
 *      // store the comment normally
 *  </code>
 *
 *	@version	0.2
 *  @author		Alex Potsides
 *  @link		http://www.achingbrain.net/
 * @package cms
 * @subpackage comments
 */",
 "/**
	 *	@param	string	$host			The host to send/receive data.
	 *	@param	int		$port			The port on the remote host.
	 *	@param	string	$request		The data to send.
	 *	@param	int		$responseLength	The amount of data to read.  Defaults to 1160 bytes.
	 */",
 "/**
	 *  Sends the data to the remote host.
	 *
	 * @throws	An exception is thrown if a connection cannot be made to the remote host.
	 */",
 "/**
	 *  Returns the server response text
	 *
	 *  @return	string
	 */",
 "/**
	 *	Returns the error number
	 *
	 *	If there was no error, 0 will be returned.
	 *
	 *	@return int
	 */",
 "/**
	 *	Returns the error string
	 *
	 *	If there was no error, an empty string will be returned.
	 *
	 *	@return string
	 */",
 "/**
 *	Utility class used by Akismet
 *
 *  This class is used by Akismet to do the actual sending and receiving of data.  It opens a connection to a remote host, sends some data and the reads the response and makes it available to the calling program.
 *
 *  The code that makes up this class originates in the Akismet WordPress plugin, which is {@link http://akismet.com/download/ available on the Akismet website}.
 *
 *	N.B. It is not necessary to call this class directly to use the Akismet class.  This is included here mainly out of a sense of completeness.
 *
 *	@name		SocketWriteRead
 *	@version	0.1
 *  @author		Alex Potsides
 *  @link		http://www.achingbrain.net/
 * @package cms
 * @subpackage comments
 */",
 "/**
     * This is a simple boolean filter.
     *
     * Call suppress(true) to suppress all log events.
     * Call suppress(false) to accept all log events.
     *
     * @param  boolean  $suppress  Should all log events be suppressed?
     * @return  void
     */",
 "/**
     * Returns TRUE to accept the message, FALSE to block it.
     *
     * @param  array    $event    event data
     * @return boolean            accepted?
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Filter
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Suppress.php 8064 2008-02-16 10:58:39Z thomas $
 */",
 "/**
     * Returns TRUE to accept the message, FALSE to block it.
     *
     * @param  array    $event    event data
     * @return boolean            accepted?
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Filter
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Interface.php 8064 2008-02-16 10:58:39Z thomas $
 */",
 "/**
     *    Factory for the tag objects. Creates the
     *    appropriate tag object for the incoming tag name
     *    and attributes.
     *    @param string $name        HTML tag name.
     *    @param hash $attributes    Element attributes.
     *    @return SimpleTag          Tag object.
     *    @access public
     */",
 "/**
     *    Factory for selection fields.
     *    @param hash $attributes    Element attributes.
     *    @return SimpleTag          Tag object.
     *    @access protected
     */",
 "/**
     *    Factory for input tags.
     *    @param hash $attributes    Element attributes.
     *    @return SimpleTag          Tag object.
     *    @access protected
     */",
 "/**
     *    Make the keys lower case for case insensitive look-ups.
     *    @param hash $map   Hash to convert.
     *    @return hash       Unchanged values, but keys lower case.
     *    @access private
     */",
 "/**
 *    Creates tags and widgets given HTML tag
 *    attributes.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Sets the builder up empty.
     *    @access public
     */",
 "/**
     *    Frees up any references so as to allow the PHP garbage
     *    collection from unset() to work.
     *    @access public
     */",
 "/**
     *    Reads the raw content and send events
     *    into the page to be built.
     *    @param $response SimpleHttpResponse  Fetched response.
     *    @return SimplePage                   Newly parsed page.
     *    @access public
     */",
 "/**
     *    Creates an empty page.
     *    @return SimplePage        New unparsed page.
     *    @access protected
     */",
 "/**
     *    Creates the parser used with the builder.
     *    @param $listener SimpleSaxListener   Target of parser.
     *    @return SimpleSaxParser              Parser to generate
     *                                         events for the builder.
     *    @access protected
     */",
 "/**
     *    Start of element event. Opens a new tag.
     *    @param string $name         Element name.
     *    @param hash $attributes     Attributes without content
     *                                are marked as true.
     *    @return boolean             False on parse error.
     *    @access public
     */",
 "/**
     *    End of element event.
     *    @param string $name        Element name.
     *    @return boolean            False on parse error.
     *    @access public
     */",
 "/**
     *    Test to see if there are any open tags awaiting
     *    closure that match the tag name.
     *    @param string $name        Element name.
     *    @return boolean            True if any are still open.
     *    @access private
     */",
 "/**
     *    Unparsed, but relevant data. The data is added
     *    to every open tag.
     *    @param string $text        May include unparsed tags.
     *    @return boolean            False on parse error.
     *    @access public
     */",
 "/**
     *    Any content fills all currently open tags unless it
     *    is part of an option tag.
     *    @param string $text        May include unparsed tags.
     *    @access private
     */",
 "/**
     *    Parsed data in tag form. The parsed tag is added
     *    to every open tag. Used for adding options to select
     *    fields only.
     *    @param SimpleTag $tag        Option tags only.
     *    @access private
     */",
 "/**
     *    Opens a tag for receiving content. Multiple tags
     *    will be receiving input at the same time.
     *    @param SimpleTag $tag        New content tag.
     *    @access private
     */",
 "/**
 *    SAX event handler. Maintains a list of
 *    open tags and dispatches them as they close.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Parses a page ready to access it\'s contents.
     *    @param SimpleHttpResponse $response     Result of HTTP fetch.
     *    @access public
     */",
 "/**
     *    Extracts all of the response information.
     *    @param SimpleHttpResponse $response    Response being parsed.
     *    @access private
     */",
 "/**
     *    Sets up a missing response.
     *    @access private
     */",
 "/**
     *    Original request as bytes sent down the wire.
     *    @return mixed              Sent content.
     *    @access public
     */",
 "/**
     *    Accessor for raw text of page.
     *    @return string        Raw unparsed content.
     *    @access public
     */",
 "/**
     *    Accessor for plain text of page as a text browser
     *    would see it.
     *    @return string        Plain text of page.
     *    @access public
     */",
 "/**
     *    Accessor for raw headers of page.
     *    @return string       Header block as text.
     *    @access public
     */",
 "/**
     *    Original request method.
     *    @return string        GET, POST or HEAD.
     *    @access public
     */",
 "/**
     *    Original resource name.
     *    @return SimpleUrl        Current url.
     *    @access public
     */",
 "/**
     *    Base URL if set via BASE tag page url otherwise
     *    @return SimpleUrl        Base url.
     *    @access public
     */",
 "/**
     *    Original request data.
     *    @return mixed              Sent content.
     *    @access public
     */",
 "/**
     *    Accessor for last error.
     *    @return string        Error from last response.
     *    @access public
     */",
 "/**
     *    Accessor for current MIME type.
     *    @return string    MIME type as string; e.g. \'text/html\'
     *    @access public
     */",
 "/**
     *    Accessor for HTTP response code.
     *    @return integer    HTTP response code received.
     *    @access public
     */",
 "/**
     *    Accessor for last Authentication type. Only valid
     *    straight after a challenge (401).
     *    @return string    Description of challenge type.
     *    @access public
     */",
 "/**
     *    Accessor for last Authentication realm. Only valid
     *    straight after a challenge (401).
     *    @return string    Name of security realm.
     *    @access public
     */",
 "/**
     *    Accessor for current frame focus. Will be
     *    false as no frames.
     *    @return array    Always empty.
     *    @access public
     */",
 "/**
     *    Sets the focus by index. The integer index starts from 1.
     *    @param integer $choice    Chosen frame.
     *    @return boolean           Always false.
     *    @access public
     */",
 "/**
     *    Sets the focus by name. Always fails for a leaf page.
     *    @param string $name    Chosen frame.
     *    @return boolean        False as no frames.
     *    @access public
     */",
 "/**
     *    Clears the frame focus. Does nothing for a leaf page.
     *    @access public
     */",
 "/**
     *    Adds a tag to the page.
     *    @param SimpleTag $tag        Tag to accept.
     *    @access public
     */",
 "/**
     *    Opens a label for a described widget.
     *    @param SimpleFormTag $tag      Tag to accept.
     *    @access public
     */",
 "/**
     *    Closes the most recently opened label.
     *    @access public
     */",
 "/**
     *    Tests to see if a tag is a possible form
     *    element.
     *    @param string $name     HTML element name.
     *    @return boolean         True if form element.
     *    @access private
     */",
 "/**
     *    Opens a form. New widgets go here.
     *    @param SimpleFormTag $tag      Tag to accept.
     *    @access public
     */",
 "/**
     *    Closes the most recently opened form.
     *    @access public
     */",
 "/**
     *    Opens a frameset. A frameset may contain nested
     *    frameset tags.
     *    @param SimpleFramesetTag $tag      Tag to accept.
     *    @access public
     */",
 "/**
     *    Closes the most recently opened frameset.
     *    @access public
     */",
 "/**
     *    Takes a single frame tag and stashes it in
     *    the current frame set.
     *    @param SimpleFrameTag $tag      Tag to accept.
     *    @access public
     */",
 "/**
     *    Test to see if in the middle of reading
     *    a frameset.
     *    @return boolean        True if inframeset.
     *    @access private
     */",
 "/**
     *    Test to see if link is an absolute one.
     *    @param string $url     Url to test.
     *    @return boolean        True if absolute.
     *    @access protected
     */",
 "/**
     *    Adds a link to the page.
     *    @param SimpleAnchorTag $tag      Link to accept.
     *    @access protected
     */",
 "/**
     *    Marker for end of complete page. Any work in
     *    progress can now be closed.
     *    @access public
     */",
 "/**
     *    Test for the presence of a frameset.
     *    @return boolean        True if frameset.
     *    @access public
     */",
 "/**
     *    Accessor for frame name and source URL for every frame that
     *    will need to be loaded. Immediate children only.
     *    @return boolean/array     False if no frameset or
     *                              otherwise a hash of frame URLs.
     *                              The key is either a numerical
     *                              base one index or the name attribute.
     *    @access public
     */",
 "/**
     *    Fetches a list of loaded frames.
     *    @return array/string    Just the URL for a single page.
     *    @access public
     */",
 "/**
     *    Accessor for a list of all links.
     *    @return array   List of urls with scheme of
     *                    http or https and hostname.
     *    @access public
     */",
 "/**
     *    Accessor for URLs by the link label. Label will match
     *    regardess of whitespace issues and case.
     *    @param string $label    Text of link.
     *    @return array           List of links with that label.
     *    @access public
     */",
 "/**
     *    Accessor for a URL by the id attribute.
     *    @param string $id       Id attribute of link.
     *    @return SimpleUrl       URL with that id of false if none.
     *    @access public
     */",
 "/**
     *    Converts a link tag into a target URL.
     *    @param SimpleAnchor $link    Parsed link.
     *    @return SimpleUrl            URL with frame target if any.
     *    @access private
     */",
 "/**
     *    Expands expandomatic URLs into fully qualified
     *    URLs.
     *    @param SimpleUrl $url        Relative URL.
     *    @return SimpleUrl            Absolute URL.
     *    @access public
     */",
 "/**
     *    Sets the base url for the page.
     *    @param SimpleTag $tag    Base URL for page.
     *    @access protected
     */",
 "/**
     *    Sets the title tag contents.
     *    @param SimpleTitleTag $tag    Title of page.
     *    @access protected
     */",
 "/**
     *    Accessor for parsed title.
     *    @return string     Title or false if no title is present.
     *    @access public
     */",
 "/**
     *    Finds a held form by button label. Will only
     *    search correctly built forms.
     *    @param SimpleSelector $selector       Button finder.
     *    @return SimpleForm                    Form object containing
     *                                          the button.
     *    @access public
     */",
 "/**
     *    Finds a held form by image using a selector.
     *    Will only search correctly built forms.
     *    @param SimpleSelector $selector  Image finder.
     *    @return SimpleForm               Form object containing
     *                                     the image.
     *    @access public
     */",
 "/**
     *    Finds a held form by the form ID. A way of
     *    identifying a specific form when we have control
     *    of the HTML code.
     *    @param string $id     Form label.
     *    @return SimpleForm    Form object containing the matching ID.
     *    @access public
     */",
 "/**
     *    Sets a field on each form in which the field is
     *    available.
     *    @param SimpleSelector $selector    Field finder.
     *    @param string $value               Value to set field to.
     *    @return boolean                    True if value is valid.
     *    @access public
     */",
 "/**
     *    Accessor for a form element value within a page.
     *    @param SimpleSelector $selector    Field finder.
     *    @return string/boolean             A string if the field is
     *                                       present, false if unchecked
     *                                       and null if missing.
     *    @access public
     */",
 "/**
 *    A wrapper for a web page.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
	 * Set a different base URL for the static copy of the site.
	 * This can be useful if you are running the CMS on a different domain from the website.
	 */",
 "/**
	 * @param $destFolder The folder to save the cached site into.
	 *   This needs to be set in sapphire/static-main.php as well through the {@link $cacheBaseDir} variable.
	 * @param $fileExtension  The file extension to use, e.g \'html\'.  
	 *   If omitted, then each page will be placed in its own directory, 
	 *   with the filename \'index.html\'.  If you set the extension to PHP, then a simple PHP script will
	 *   be generated that can do appropriate cache & redirect header negotation.
	 */",
 "/**
	 * Transforms relative or absolute URLs to their static path equivalent.
	 * This needs to be the same logic that\'s used to look up these paths through
	 * sapphire/static-main.php. Does not include the {@link $destFolder} prefix.
	 * Replaces various special characters in the resulting filename similar to {@link SiteTree::generateURLSegment()}.
	 * 
	 * Examples (without $domain_based_caching):
	 *  - http://mysite.com/mywebroot/ => /index.html (assuming your webroot is in a subfolder)
	 *  - http://mysite.com/about-us => /about-us.html
	 *  - http://mysite.com/parent/child => /parent/child.html
	 * 
	 * Examples (with $domain_based_caching):
	 *  - http://mysite.com/mywebroot/ => /mysite.com/index.html (assuming your webroot is in a subfolder)
	 *  - http://mysite.com/about-us => /mysite.com/about-us.html
	 *  - http://myothersite.com/about-us => /myothersite.com/about-us.html
	 *  - http://subdomain.mysite.com/parent/child => /subdomain.mysite.com/parent/child.html
	 * 
	 * @param Array $urls Absolute or relative URLs
	 * @return Array Map of original URLs to filesystem paths (relative to {@link $destFolder}).
	 */",
 "/**
	 * Generate the templated content for a PHP script that can serve up the given piece of content with the given age and expiry
	 */",
 "/**
	 * Generate the templated content for a PHP script that can serve up a 301 redirect to the given destionation
	 */",
 "/**
	 * Return an array of all the existing static cache files, as a map of URL => file.
	 * Only returns cache files that will actually map to a URL, based on urlsToPaths.
	 */",
 "/**
 * Usage: Object::add_extension(\"SiteTree\", \"FilesystemPublisher(\'static-folder\', \'html\')\");
 * 
 * Usage: To work with Subsite module you need to:
 * - Add FilesystemPublisher::$domain_based_caching = true; in mysite/_config.php
 * - Added main site host mapping in subsites/host-map.php after everytime a new subsite is created or modified 
 *
 * You may also have a method $page->pagesAffectedByUnpublishing() to return other URLS
 * that should be de-cached if $page is unpublished.
 *
 * @see http://doc.silverstripe.com/doku.php?id=staticpublisher
 * 
 * @package cms
 * @subpackage publishers
 */",
 "/**
	 * Require basic authentication.  Will request a username and password if none is given.
	 * 
	 * Used by {@link Controller::init()}.
	 * 
	 * @throws SS_HTTPResponse_Exception
	 * 
	 * @param string $realm
	 * @param string|array $permissionCode Optional
	 * @param boolean $tryUsingSessionLogin If true, then the method with authenticate against the
	 *  session log-in if those credentials are disabled.
	 * @return Member $member 
	 */",
 "/**
	 * Enable protection of the entire site with basic authentication.
	 * 
	 * This log-in uses the Member database for authentication, but doesn\'t interfere with the
	 * regular log-in form. This can be useful for test sites, where you want to hide the site
	 * away from prying eyes, but still be able to test the regular log-in features of the site.
	 * 
	 * If you are including conf/ConfigureFromEnv.php in your _config.php file, you can also enable
	 * this feature by adding this line to your _ss_environment.php:
	 * 
	 * define(\'SS_USE_BASIC_AUTH\', true);
	 * 
	 * @param boolean $protect Set this to false to disable protection.
	 * @param String $code {@link Permission} code that is required from the user.
	 *  Defaults to \"ADMIN\". Set to NULL to just require a valid login, regardless
	 *  of the permission codes a user has.
	 */",
 "/**
	 * @deprecated Use BasicAuth::protect_entire_site() instead.
	 */",
 "/**
	 * @deprecated Use BasicAuth::protect_entire_site(false) instead.
	 */",
 "/**
	 * Call {@link BasicAuth::requireLogin()} if {@link BasicAuth::protect_entire_site()} has been called.
	 * This is a helper function used by {@link Controller::init()}.
	 * 
	 * If you want to enabled protection (rather than enforcing it),
	 * please use {@link protect_entire_site()}.
	 */",
 "/**
 * Provides an interface to HTTP basic authentication.
 * 
 * This utility class can be used to secure any request with basic authentication.  To do so,
 * {@link BasicAuth::requireLogin()} from your Controller\'s init() method or action handler method.
 * 
 * It also has a function to protect your entire site.  See {@link BasicAuth::protect_entire_site()}
 * for more information. You can control this setting on controller-level by using {@link Controller->basicAuthEnabled}.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Exception thrown by {@link DataObject}::write if validation fails. By throwing an
 * exception rather than a user error, the exception can be caught in unit tests and as such
 * can be used as a successful test.
 * 
 * @package sapphire
 * @subpackage validation
 */",
 "/**
	 * Construct a SS_HTTPRequest from a URL relative to the site root.
	 */",
 "/**
	 * Returns all combined HTTP GET and POST parameters
	 * passed into this request. If a parameter with the same
	 * name exists in both arrays, the POST value is returned.
	 * 
	 * @return array
	 */",
 "/**
	 * Returns a possible file extension found in parsing the URL
	 * as denoted by a \".\"-character near the end of the URL.
	 * Doesn\'t necessarily have to belong to an existing file,
	 * for example used for {@link RestfulServer} content-type-switching.
	 * 
	 * @return string
	 */",
 "/**
	 * Checks if the {@link SS_HTTPRequest->getExtension()} on this request matches one of the more common media types
	 * embedded into a webpage - e.g. css, png.
	 *
	 * This is useful for things like determining wether to display a fully rendered error page or not. Note that the
	 * media file types is not at all comprehensive.
	 *
	 * @return bool
	 */",
 "/**
	 * Add a HTTP header to the response, replacing any header of the same name.
	 * 
	 * @param string $header Example: \"Content-Type\"
	 * @param string $value Example: \"text/xml\" 
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * Remove an existing HTTP header
	 *
	 * @param string $header
	 */",
 "/**
	 * Remove an existing HTTP header by its name,
	 * e.g. \"Content-Type\".
	 *
	 * @param string $header
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Enables the existence of a key-value pair in the request to be checked using
	 * array syntax, so isset($request[\'title\']) will check for $_POST[\'title\'] and $_GET[\'title\']
	 *
	 * @param unknown_type $offset
	 * @return boolean
	 */",
 "/**
	 * Access a request variable using array syntax. eg: $request[\'title\'] instead of $request->postVar(\'title\')
	 *
	 * @param unknown_type $offset
	 * @return unknown
	 */",
 "/**
	 * @ignore
	 */",
 "/**
	 * @ignore
	 */",
 "/**
	 * Construct an SS_HTTPResponse that will deliver a file to the client
	 */",
 "/**
	 * Matches a URL pattern
	 * The pattern can contain a number of segments, separated by / (and an extension indicated by a .)
	 * 
	 * The parts can be either literals, or, if they start with a $ they are interpreted as variables.
	 *  - Literals must be provided in order to match
	 *  - $Variables are optional
	 *  - However, if you put ! at the end of a variable, then it becomes mandatory.
	 * 
	 * For example:
	 *  - admin/crm/list will match admin/crm/$Action/$ID/$OtherID, but it won\'t match admin/crm/$Action!/$ClassName!
	 * 
	 * The pattern can optionally start with an HTTP method and a space.  For example, \"POST $Controller/$Action\".
	 * This is used to define a rule that only matches on a specific HTTP method.
	 */",
 "/**
	 * Shift all the parameter values down a key space, and return the shifted value.
	 *
	 * @return string
	 */",
 "/**
	 * Finds a named URL parameter (denoted by \"$\"-prefix in $url_handlers)
	 * from the full URL.
	 * 
	 * @param string $name
	 * @return string Value of the URL parameter (if found)
	 */",
 "/**
	 * Returns the unparsed part of the original URL
	 * separated by commas. This is used by {@link RequestHandler->handleRequest()}
	 * to determine if further URL processing is necessary.
	 * 
	 * @return string Partial URL
	 */",
 "/**
	 * Returns true if this is a URL that will match without shifting off any of the URL.
	 * This is used by the request handler to prevent infinite parsing loops.
	 */",
 "/**
	 * Shift one or more parts off the beginning of the URL.
	 * If you specify shifting more than 1 item off, then the items will be returned as an array
	 *
	 * @param int $count Shift Count
	 *
	 * @return String|Array
	 */",
 "/**
	 * Returns true if the URL has been completely parsed.
	 * This will respect parsed but unshifted directory parts.
	 */",
 "/**
	 * Returns the client IP address which
	 * originated this request.
	 *
	 * @return string
	 */",
 "/**
	 * Returns all mimetypes from the HTTP \"Accept\" header
	 * as an array.
	 * 
	 * @param boolean $includeQuality Don\'t strip away optional \"quality indicators\", e.g. \"application/xml;q=0.9\" (Default: false)
	 * @return array
	 */",
 "/**
	 * @return string HTTP method (all uppercase)
	 */",
 "/**
	 * Gets the \"real\" HTTP method for a request.
	 * 
	 * Used to work around browser limitations of form
	 * submissions to GET and POST, by overriding the HTTP method
	 * with a POST parameter called \"_method\" for PUT, DELETE, HEAD.
	 * Using GET for the \"_method\" override is not supported,
	 * as GET should never carry out state changes.
	 * Alternatively you can use a custom HTTP header \'X-HTTP-Method-Override\'
	 * to override the original method in {@link Director::direct()}. 
	 * The \'_method\' POST parameter overrules the custom HTTP header.
	 *
	 * @param string $origMethod Original HTTP method from the browser request
	 * @param array $postVars
	 * @return string HTTP method (all uppercase)
	 */",
 "/**
 * Represents a HTTP-request, including a URL that is tokenised for parsing, and a request method (GET/POST/PUT/DELETE).
 * This is used by {@link RequestHandler} objects to decide what to do.
 * 
 * The intention is that a single SS_HTTPRequest object can be passed from one object to another, each object calling
 * match() to get the information that they need out of the URL.  This is generally handled by 
 * {@link RequestHandler::handleRequest()}.
 * 
 * @todo Accept X_HTTP_METHOD_OVERRIDE http header and $_REQUEST[\'_method\'] to override request types (useful for webclients
 *   not supporting PUT and DELETE)
 * 
 * @package sapphire
 * @subpackage control
 */",
 "/**
 * Special kind of ComplexTableField for managing comments.
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * @return String
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * @return String
	 */",
 "/**
 * Single row of a {@link CommentTableField}
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * @param SS_HTTPRequest $request
	 * @return SS_HTTPResponse
	 */",
 "/**
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * Set the ComponentSet specific information.
	 * @param string $type Type of relationship (eg \'1-1\', \'1-many\').
	 * @param DataObject $ownerObj Object that owns this set.
	 * @param string $ownerClass Class of object that owns this set.
	 * @param string $tableName Table that holds this relationship.
	 * @param string $childClass Class of child side of the relationship.
	 * @param string $joinField Field to join on.
	 */",
 "/**
	 * Get the ComponentSet specific information
	 * 
	 * Returns an array on the format array( 
	 * 		\'type\' => <string>, 
	 * 		\'ownerObj\' => <Object>, 
	 * 		\'ownerClass\' => <string>, 
	 * 		\'tableName\' => <string>, 
	 * 		\'childClass\' => <string>, 
	 * 		\'joinField\' => <string>|null );
	 * 
	 * @return array
	 */",
 "/**
	 * Get an array of all the IDs in this component set, where the keys are the same as the
	 * values.
	 * @return array
	 */",
 "/**
	 * Add an item to this set.
	 * @param DataObject|int|string $item Item to add, either as a DataObject or as the ID.
	 * @param array $extraFields A map of extra fields to add.
	 */",
 "/**
	 * Method to save many-many join data into the database for the given $item.
	 * Used by add() and write().
	 * @param DataObject|string|int The item to save, as either a DataObject or the ID.
	 * @param array $extraFields Map of extra fields.
	 */",
 "/**
	 * Add a number of items to the component set.
	 * @param array $items Items to add, as either DataObjects or IDs.
	 */",
 "/**
	 * Sets the ComponentSet to be the given ID list.
	 * Records will be added and deleted as appropriate.
	 * @param array $idList List of IDs.
	 */",
 "/**
	 * Remove an item from this set.
	 *
	 * @param DataObject|string|int $item Item to remove, either as a DataObject or as the ID.
	 */",
 "/**
	 * Remove many items from this set.
	 * @param array $itemList The items to remove, as a numerical array with IDs or as a DataObjectSet
	 */",
 "/**
	 * Remove all items in this set.
	 */",
 "/**
	 * Write this set to the database.
	 * Called by DataObject::write().
	 * @param boolean $firstWrite This should be set to true if it the first time the set is being written.
	 */",
 "/**
	 * Returns information about this set in HTML format for debugging.
	 * 
	 * @return string
	 */",
 "/**
 * This is a special kind of DataObjectSet used to represent the items linked to in a 1-many or many-many
 * join.  It provides add and remove methods that will update the database.
 * @package sapphire
 * @subpackage model
 */",
 "/**
     * Constructor
     *
     * @param  array $options associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Set the cache_dir (particular case of setOption() method)
     *
     * @param  string  $value
     * @param  boolean $trailingSeparator If true, add a trailing separator is necessary
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param string $id cache id
     * @param boolean $doNotTestCacheValidity if set to true, the cache validity won\'t be tested
     * @return string|false cached datas
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param string $id cache id
     * @return mixed false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param  string $data             Datas to cache
     * @param  string $id               Cache id
     * @param  array  $tags             Array of strings, the cache record will be tagged by each string entry
     * @param  int    $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @return boolean true if no problem
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id cache id
     * @return boolean true if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * \'all\' (default)  => remove all cache entries ($tags is not used)
     * \'old\'            => remove too old cache entries ($tags is not used)
     * \'matchingTag\'    => remove cache entries matching all given tags
     *                     ($tags can be an array of strings or a single string)
     * \'notMatchingTag\' => remove cache entries not matching one of the given tags
     *                     ($tags can be an array of strings or a single string)
     * \'matchingAnyTag\' => remove cache entries matching any given tags
     *                     ($tags can be an array of strings or a single string)
     *
     * @param string $mode clean mode
     * @param tags array $tags array of tags
     * @return boolean true if no problem
     */",
 "/**
     * Return an array of stored cache ids
     *
     * @return array array of stored cache ids (string)
     */",
 "/**
     * Return an array of stored tags
     *
     * @return array array of stored tags (string)
     */",
 "/**
     * Return an array of stored cache ids which match given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which don\'t match given tags
     *
     * In case of multiple tags, a logical OR is made between tags
     *
     * @param array $tags array of tags
     * @return array array of not matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which match any given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of any matching cache ids (string)
     */",
 "/**
     * Return the filling percentage of the backend storage
     *
     * @throws Zend_Cache_Exception
     * @return int integer between 0 and 100
     */",
 "/**
     * Return an array of metadatas for the given cache id
     *
     * The array must include these keys :
     * - expire : the expire timestamp
     * - tags : a string array of tags
     * - mtime : timestamp of last modification time
     *
     * @param string $id cache id
     * @return array array of metadatas (false if the cache id is not found)
     */",
 "/**
     * Give (if possible) an extra lifetime to the given cache id
     *
     * @param string $id cache id
     * @param int $extraLifetime
     * @return boolean true if ok
     */",
 "/**
     * Return an associative array of capabilities (booleans) of the backend
     *
     * The array must include these keys :
     * - automatic_cleaning (is automating cleaning necessary)
     * - tags (are tags supported)
     * - expired_read (is it possible to read expired cache records
     *                 (for doNotTestCacheValidity option for example))
     * - priority does the backend deal with priority when saving
     * - infinite_lifetime (is infinite lifetime can work with this backend)
     * - get_list (is it possible to get the list of cache ids and the complete list of tags)
     *
     * @return array associative of with capabilities
     */",
 "/**
     * PUBLIC METHOD FOR UNIT TESTING ONLY !
     *
     * Force a cache record to expire
     *
     * @param string $id cache id
     */",
 "/**
     * Get a metadatas record
     *
     * @param  string $id  Cache id
     * @return array|false Associative array of metadatas
     */",
 "/**
     * Set a metadatas record
     *
     * @param  string $id        Cache id
     * @param  array  $metadatas Associative array of metadatas
     * @param  boolean $save     optional pass false to disable saving to file
     * @return boolean True if no problem
     */",
 "/**
     * Drop a metadata record
     *
     * @param  string $id Cache id
     * @return boolean True if no problem
     */",
 "/**
     * Clear the metadatas array
     *
     * @return void
     */",
 "/**
     * Load metadatas from disk
     *
     * @param  string $id Cache id
     * @return array|false Metadatas associative array
     */",
 "/**
     * Save metadatas to disk
     *
     * @param  string $id        Cache id
     * @param  array  $metadatas Associative array
     * @return boolean True if no problem
     */",
 "/**
     * Make and return a file name (with path) for metadatas
     *
     * @param  string $id Cache id
     * @return string Metadatas file name (with path)
     */",
 "/**
     * Check if the given filename is a metadatas one
     *
     * @param  string $fileName File name
     * @return boolean True if it\'s a metadatas one
     */",
 "/**
     * Remove a file
     *
     * If we can\'t remove the file (because of locks or any problem), we will touch
     * the file to invalidate it
     *
     * @param  string $file Complete file path
     * @return boolean True if ok
     */",
 "/**
     * Clean some cache records (private method used for recursive stuff)
     *
     * Available modes are :
     * Zend_Cache::CLEANING_MODE_ALL (default)    => remove all cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_OLD              => remove too old cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     => remove cache entries matching all given tags
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG => remove cache entries not {matching one of the given tags}
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG => remove cache entries matching any given tags
     *                                               ($tags can be an array of strings or a single string)
     *
     * @param  string $dir  Directory to clean
     * @param  string $mode Clean mode
     * @param  array  $tags Array of tags
     * @throws Zend_Cache_Exception
     * @return boolean True if no problem
     */",
 "/**
     * Compute & return the expire time
     *
     * @return int expire time (unix timestamp)
     */",
 "/**
     * Make a control key with the string containing datas
     *
     * @param  string $data        Data
     * @param  string $controlType Type of control \'md5\', \'crc32\' or \'strlen\'
     * @throws Zend_Cache_Exception
     * @return string Control key
     */",
 "/**
     * Transform a cache id into a file name and return it
     *
     * @param  string $id Cache id
     * @return string File name
     */",
 "/**
     * Make and return a file name (with path)
     *
     * @param  string $id Cache id
     * @return string File name (with path)
     */",
 "/**
     * Return the complete directory path of a filename (including hashedDirectoryStructure)
     *
     * @param  string $id Cache id
     * @param  boolean $parts if true, returns array of directory parts instead of single string
     * @return string Complete directory path
     */",
 "/**
     * Make the directory strucuture for the given id
     *
     * @param string $id cache id
     * @return boolean true
     */",
 "/**
     * Test if the given cache id is available (and still valid as a cache record)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @return boolean|mixed false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Return the file content of the given file
     *
     * @param  string $file File complete path
     * @return string File content (or false if problem)
     */",
 "/**
     * Put the given string into the given file
     *
     * @param  string $file   File complete path
     * @param  string $string String to put in file
     * @return boolean true if no problem
     */",
 "/**
     * Transform a file name into cache id and return it
     *
     * @param  string $fileName File name
     * @return string Cache id
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Get a {@link SS_HTTPResponse} to response to a HTTP error code if an {@link ErrorPage} for that code is present.
	 *
	 * @param int $statusCode
	 * @return SS_HTTPResponse
	 */",
 "/**
	 * Ensures that there is always a 404 page
	 * by checking if there\'s an instance of
	 * ErrorPage with a 404 and 500 error code. If there
	 * is not, one is created when the DB is built.
	 */",
 "/**
	 * When an error page is published, create a static HTML page with its
	 * content, so the page can be shown even when SilverStripe is not
	 * functioning correctly before publishing this page normally.
	 * @param string|int $fromStage Place to copy from. Can be either a stage name or a version number.
	 * @param string $toStage Place to copy to. Must be a stage name.
	 * @param boolean $createNewVersion Set this to true to create a new version number.  By default, the existing version number will be copied over.
	 */",
 "/**
	 *
	 * @param boolean $includerelations a boolean value to indicate if the labels returned include relation fields
	 * 
	 */",
 "/**
	 * Returns an absolute filesystem path to a static error file
	 * which is generated through {@link publish()}.
	 * 
	 * @param int $statusCode A HTTP Statuscode, mostly 404 or 500
	 * @param String $locale A locale, e.g. \'de_DE\' (Optional)
	 * @return String
	 */",
 "/**
	 * Set the path where static error files are saved through {@link publish()}.
	 * Defaults to /assets.
	 * 
	 * @param string $path
	 */",
 "/**
	 * @return string
	 */",
 "/**
 * ErrorPage holds the content for the page of an error response.
 * Renders the page on each publish action into a static HTML file
 * within the assets directory, after the naming convention
 * /assets/error-<statuscode>.html.
 * This enables us to show errors even if PHP experiences a recoverable error.
 * ErrorPages
 * 
 * @see Debug::friendlyError()
 * 
 * @package cms
 */",
 "/**
 * Controller for ErrorPages.
 * @package cms
 */",
 "/**
 * A migration task is a build task that is reversible.
 * 
 * <b>Creating Migration Tasks</b>
 * 
 * To create your own migration task all you need to do is define your own subclass of MigrationTask and define the following functions
 * 
 * <i>mysite/code/MyMigrationTask.php</i>
 * 
 * <code>
 * class MyMigrationTask extends BuildTask {
 * 	
 * 	protected $title = \"My Database Migrations\"; // title of the script
 * 	protected $description = \"Description\"; // description of what it does
 * 	
 * 	function run($request) {
 * 		if ($request->param(\'Direction\') == \'down\') {
 * 			$this->down();
 * 		} else {
 * 			$this->up();
 * 		}
 * 	}
 * 	
 * 	function up() {
 * 		// do something when going from old -> new
 * 	}
 * 	
 * 	function down() {
 * 		// do something when going from new -> old
 * 	}	
 * }
 * </code>
 * 
 * <b>Running Migration Tasks</b>
 * To run any tasks you can find them under the dev/ namespace. To run the above script you would need to run 
 * the following and note - Either the site has to be in [devmode](debugging) or you need to add ?isDev=1 to the URL
 * 
 * <code>
 * // url to visit if in dev mode.
 * http://www.yoursite.com/dev/tasks/MyMigrationTask
 * 
 * // url if you are in live mode but need to run this
 * http://www.yoursite.com/dev/tasks/MyMigrationTask?isDev=1
 * </code>
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * @param String $name
	 * @param String $title
	 * @param String $managedClass
	 * @param String $filterField
	 * @param Group|DataObjectSet $records One or more {@link Group} or {@link PermissionRole} records 
	 *  used to determine permission checkboxes.
	 *  Caution: saveInto() can only be used with a single record, all inherited permissions will be marked readonly.
	 *  Setting multiple groups only makes sense in a readonly context. (Optional)
	 */",
 "/**
	 * @param Array $codes
	 */",
 "/**
	 * @return Array
	 */",
 "/**
	 * Update the permission set associated with $record DataObject
	 *
	 * @param DataObject $record
	 */",
 "/**
	 * @return PermissionCheckboxSetField_Readonly
	 */",
 "/**
	 * Retrieves all permission codes for the currently set records
	 * 
	 * @return array
	 */",
 "/**
 * Shows a categorized list of available permissions (through {@link Permission::get_codes()}).
 * Permissions which are assigned to a given {@link Group} record
 * (either directly, inherited from parent groups, or through a {@link PermissionRole})
 * will be checked automatically. All checkboxes for \"inherited\" permissions will be readonly.
 * 
 * The field can gets its assignment data either from {@link Group} or {@link PermissionRole} records.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Readonly version of a {@link PermissionCheckboxSetField} - 
 * uses the same structure, but has all checkboxes disabled.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Plug-ins for additional functionality in your SiteTree classes.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * Matches textual content with a LIKE \'%keyword%\' construct.
 *
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Populate $this->ids with the IDs of the pages returned by pagesIncluded(), also including
	 * the necessary parent helper pages.
	 */",
 "/**
	 * Returns true if the given page should be included in the tree.
	 */",
 "/**
 * Base class for filtering the subtree for certain node statuses.
 * 
 * The simplest way of building a CMSSiteTreeFilter is to create a pagesToBeShown() method that
 * returns an Iterator of maps, each entry containing the \'ID\' and \'ParentID\' of the pages to be
 * included in the tree.  The reuslt of a DB::query() can be returned directly.
 *
 * If you wish to make a more complex tree, you can overload includeInTree($page) to return true/
 * false depending on whether the given page should be included.  Note that you will need to include
 * parent helper pages yourself.
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
	 * Retun an array of maps containing the keys, \'ID\' and \'ParentID\' for each page to be displayed
	 * in the search.
	 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
	 * Return the number of moderated comments
	 */",
 "/**
	 * Return the number of unmoderated comments
	 */",
 "/**
	 * Return the number of comments marked as spam
	 */",
 "/**
	 * @param $num int
	 */",
 "/**
	 * @return int
	 */",
 "/**
 * Comment administration system within the CMS
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * Create a new action button.
	 * @param action The method to call when the button is clicked
	 * @param title The label on the button
	 * @param image The default image to display
	 * @param hoverImage The image to display on hover
	 * @param form The parent form, auto-set when the field is placed inside a form 
	 */",
 "/**
 * Action that uses an image instead of a button
 * @package forms
 * @subpackage actions
 */",
 "/**
     * Class Constructor
     *
     * @param  streamOrUrl     Stream or URL to open as a stream
     * @param  mode            Mode, only applicable if a URL is given
     */",
 "/**
     * Close the stream resource.
     *
     * @return void
     */",
 "/**
     * Write a message to the log.
     *
     * @param  array  $event  event data
     * @return void
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Writer
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Stream.php 14131 2009-02-21 20:13:38Z shahar $
 */",
 "/**
	 * Call this function to set the javascript validation handler for all valdiation on your site.
	 * This could be called from _config.php to set site-wide javascript validation, or from ContentController::init()
	 * to affect only the front-end site.
	 * Use instance method {@link setJavascriptValidationHandler()} to
	 * only set handler for a specific form instance.
	 *
	 * @param $handler A string representing the handler to use: \'prototype\' or \'none\'.
	 * @todo Add \'jquery\' as a handler option.
	 */",
 "/**
	 * Returns global validation handler used for all forms by default,
	 * unless overwritten by {@link setJavascriptValidationHandler()}.
	 * 
	 * @return string
	 */",
 "/**
	 * Set JavaScript validation for this validator.
	 * Use static method {@link set_javascript_validation_handler()}
	 * to set handlers globally.
	 * 
	 * @param string $handler
	 */",
 "/**
	 * Gets the current javascript validation handler for this form.
	 * If not set, falls back to the global static {@link self::$javascript_validation_handler}.
	 * 
	 * @return string
	 */",
 "/**
	 * @param Form $form
	 */",
 "/**
	 * @return array Errors (if any)
	 */",
 "/**
	 * Callback to register an error on a field (Called from implementations of {@link FormField::validate})
	 * 
	 * @param $fieldName name of the field
	 * @param $message error message to display
	 * @param $messageType optional parameter, gets loaded into the HTML class attribute in the rendered output. See {@link getErrors()} for details.
	 */",
 "/**
	 * @deprecated 2.4 Use Validator->getErrors() and custom code
	 */",
 "/**
	 * @deprecated 2.4 Use custom code
	 */",
 "/**
	 * @deprecated 2.4 Use getErrors()
	 */",
 "/**
	 * Returns all errors found by a previous call to {@link validate()}.
	 * The array contains the following keys for each error:
	 * - \'fieldName\': the name of the FormField instance
	 * - \'message\': Validation message (optionally localized)
	 * - \'messageType\': Arbitrary type of the message which is rendered as a CSS class in the FormField template,
	 *   e.g. <span class=\"message (type)\">. Usually \"bad|message|validation|required\", which renders differently
	 *   if sapphire/css/Form.css is included.
	 * 
	 * @return array
	 */",
 "/**
	 * Returns true if the named field is \"required\".
	 * Used by FormField to return a value for FormField::Required(), to do things like show *s on the form template.
	 * By default, it always returns false.
	 */",
 "/**
 * This validation class handles all form and custom form validation through
 * the use of Required fields.
 * 
 * Relies on javascript for client-side validation, and marking fields after serverside validation.
 * 
 * Acts as a visitor to individual form fields.
 * 
 * @todo Automatically mark fields after serverside validation and replace the form through
 * FormResponse if the request was made by ajax.
 * 
 * @package forms
 * @subpackage validators
 */",
 "/**
	 * @todo Better messages for relation checks and duplicate detection
	 * Note that columnMap isn\'t used
	 */",
 "/**
	 * Find an existing objects based on one or more uniqueness
	 * columns specified via {@link self::$duplicateChecks}
	 *
	 * @param array $record CSV data column
	 * @return unknown
	 */",
 "/**
	 * Determine wether any loaded files should be parsed
	 * with a header-row (otherwise we rely on {@link self::$columnMap}.
	 *
	 * @return boolean
	 */",
 "/**
 * Utility class to facilitate complex CSV-imports by defining column-mappings and custom converters. 
 * Uses the fgetcsv() function to process CSV input. Accepts a file-handler as input.
 * 
 * @see http://rfc.net/rfc4180.html
 * @package cms
 * @subpackage bulkloading
 * @author Ingo Schommer, Silverstripe Ltd. (<myfirstname>@silverstripe.com)
 * 
 * @todo Support for deleting existing records not matched in the import (through relation checks)
 */",
 "/**
	 * Construct a new SQLQuery.
	 * 
	 * @param array $select An array of fields to select.
	 * @param array $from An array of join clauses. The first one should be just the table name.
	 * @param array $where An array of filters, to be inserted into the WHERE clause.
	 * @param string $orderby An ORDER BY clause.
	 * @param array $groupby An array of fields to group by.
	 * @param array $having An array of having clauses.
	 * @param string $limit A LIMIT clause.
	 * 
	 * TODO: perhaps we can quote things here instead of requiring all the parameters to be quoted
	 * by this stage.
	 */",
 "/**
	 * Specify the list of columns to be selected by the query.
	 *
	 * <code>
	 *  // pass fields to select as single parameter array
	 *  $query->select(array(\"Col1\",\"Col2\"))->from(\"MyTable\");
	 * 
	 *  // pass fields to select as multiple parameters
	 *  $query->select(\"Col1\", \"Col2\")->from(\"MyTable\");
	 * </code>
	 * 
	 * @param mixed $fields
	 * @return SQLQuery
	 */",
 "/**
	 * Specify the target table to select from.
	 * 
	 * <code>
	 *  $query->from(\"MyTable\"); // SELECT * FROM MyTable
	 * </code>
	 *
	 * @param string $table
	 * @return SQLQuery This instance
	 */",
 "/**
	 * Add a LEFT JOIN criteria to the FROM clause.
	 * 
	 * @param String $table Table name (unquoted)
	 * @param String $onPredicate The \"ON\" SQL fragment in a \"LEFT JOIN ... AS ... ON ...\" statement.
	 *  Needs to be valid (quoted) SQL.
	 * @param String $tableAlias Optional alias which makes it easier to identify and replace joins later on
	 * @return SQLQuery This instance 
	 */",
 "/**
	 * Add an INNER JOIN criteria to the FROM clause.
	 * 
	 * @param String $table Table name (unquoted)
	 * @param String $onPredicate The \"ON\" SQL fragment in a \"LEFT JOIN ... AS ... ON ...\" statement.
	 *  Needs to be valid (quoted) SQL.
	 * @param String $tableAlias Optional alias which makes it easier to identify and replace joins later on
	 * @return SQLQuery This instance 
	 */",
 "/**
	 * Returns true if we are already joining to the given table alias
	 */",
 "/**
	 * Pass LIMIT clause either as SQL snippet or in array format.
	 *
	 * @param string|array $limit
	 * @return SQLQuery This instance
	 */",
 "/**
	 * Pass ORDER BY clause either as SQL snippet or in array format.
	 *
	 * @todo Implement passing of multiple orderby pairs in nested array syntax,
	 * 	e.g. array(array(\'sort\'=>\'A\',\'dir\'=>\'asc\'),array(\'sort\'=>\'B\'))
	 * 
	 * @param string|array $orderby
	 * @return SQLQuery This instance
	 */",
 "/**
	 * Add a GROUP BY clause.
	 *
	 * @param string|array $groupby
	 * @return SQLQuery
	 */",
 "/**
	 * Add a HAVING clause.
	 *
	 * @param string|array $having
	 * @return SQLQuery
	 */",
 "/**
	 * Apply a predicate filter to the where clause.
	 * 
	 * Accepts a variable length of arguments, which represent
	 * different ways of formatting a predicate in a where clause:
	 * 
	 * <code>
	 *  // the entire predicate as a single string
	 *  $query->where(\"Column = \'Value\'\");
	 * 
	 *  // an exact match predicate with a key value pair
	 *  $query->where(\"Column\", \"Value\");
	 * 
	 *  // a predicate with user defined operator
	 *  $query->where(\"Column\", \"!=\", \"Value\");
	 * </code>
	 * 
	 */",
 "/**
	 * Use the disjunctive operator \'OR\' to join filter expressions in the WHERE clause.
	 */",
 "/**
	 * Use the conjunctive operator \'AND\' to join filter expressions in the WHERE clause.
	 */",
 "/**
	 * Swap the use of one table with another.
	 * @param string $old Name of the old table.
	 * @param string $new Name of the new table.
	 */",
 "/**
	 * Swap some text in the SQL query with another.
	 * @param string $old The old text.
	 * @param string $new The new text.
	 */",
 "/**
	 * Return an SQL WHERE clause to filter a SELECT query.
	 *
	 * @return string
	 */",
 "/**
	 * Generate the SQL statement for this query.
	 * 
	 * @return string
	 */",
 "/**
	 * Return the generated SQL string for this query
	 * 
	 * @return string
	 */",
 "/**
	 * Execute this query.
	 * @return SS_Query
	 */",
 "/**
	 * Checks whether this query is for a specific ID in a table
	 * 
	 * @todo Doesn\'t work with combined statements (e.g. \"Foo=\'bar\' AND ID=5\")
	 *
	 * @return boolean
	 */",
 "/**
	 * Checks whether this query is filtering on a foreign key, ie finding a has_many relationship
	 * 
	 * @todo Doesn\'t work with combined statements (e.g. \"Foo=\'bar\' AND ParentID=5\")
	 *
	 * @return boolean
	 */",
 "/**
	 * Return the number of rows in this query if the limit were removed.  Useful in paged data sets. 
	 * @return int 
	 */",
 "/**
	 * Returns true if this query can be sorted by the given field.
	 * Note that the implementation of this method is a little crude at the moment, it wil return
	 * \"false\" more often that is strictly necessary.
	 */",
 "/**
 * Object representing a SQL query.
 * The various parts of the SQL query can be manipulated individually.
 * 
 * Caution: Only supports SELECT (default) and DELETE at the moment.
 * 
 * @todo Add support for INSERT and UPDATE queries
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * Classes that implement TestOnly are only to be used during testing
 * @package sapphire
 * @subpackage testing
 */",
 "/**
 * Formats SS error entries in an error file log.
 * Format: [d-M-Y h:i:s] <type> at <file> line <line>: <errormessage> <url>
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * An implementation of the factory method, allows you to create an instance of a class
	 *
	 * This method first for strong class overloads (singletons & DB interaction), then custom class overloads. If an
	 * overload is found, an instance of this is returned rather than the original class. To overload a class, use
	 * {@link Object::useCustomClass()}
	 *
	 * @param string $class the class name
	 * @param mixed $arguments,... arguments to pass to the constructor
	 * @return Object
	 */",
 "/**
	 * Create an object from a string representation.  It treats it as a PHP constructor without the
	 * \'new\' keyword.  It also manages to construct the object without the use of eval().
	 * 
	 * Construction itself is done with Object::create(), so that Object::useCustomClass() calls
	 * are respected.
	 * 
	 * `Object::create_from_string(\"Versioned(\'Stage\',\'Live\')\")` will return the result of
	 * `Object::create(\'Versioned\', \'Stage\', \'Live);`
	 * 
	 * It is designed for simple, clonable objects.  The first time this method is called for a given
	 * string it is cached, and clones of that object are returned.
	 * 
	 * If you pass the $firstArg argument, this will be prepended to the constructor arguments. It\'s
	 * impossible to pass null as the firstArg argument.
	 * 
	 * `Object::create_from_string(\"Varchar(50)\", \"MyField\")` will return the result of
	 * `Object::create(\'Vachar\', \'MyField\', \'50\');`
	 * 
	 * Arguments are always strings, although this is a quirk of the current implementation rather
	 * than something that can be relied upon.
	 */",
 "/**
	*Parsesaclass-spec,suchas\"Versioned(\'Stage\',\'Live\')\", as passed to create_from_string().
	 * Returns a 2-elemnent array, with classname and arguments
	 */",
 "/**
	 * Similar to {@link Object::create()}, except that classes are only overloaded if you set the $strong parameter to
	 * TRUE when using {@link Object::useCustomClass()}
	 *
	 * @param string $class the class name
	 * @param mixed $arguments,... arguments to pass to the constructor
	 * @return Object
	 */",
 "/**
	 * This class allows you to overload classes with other classes when they are constructed using the factory method
	 * {@link Object::create()}
	 *
	 * @param string $oldClass the class to replace
	 * @param string $newClass the class to replace it with
	 * @param bool $strong allows you to enforce a certain class replacement under all circumstances. This is used in
	 *        singletons and DB interaction classes
	 */",
 "/**
	 * If a class has been overloaded, get the class name it has been overloaded with - otherwise return the class name
	 *
	 * @param string $class the class to check
	 * @return string the class that would be created if you called {@link Object::create()} with the class
	 */",
 "/**
	 * Get a static variable, taking into account SS\'s inbuild static caches and pseudo-statics
	 *
	 * This method first checks for any extra values added by {@link Object::add_static_var()}, and attemps to traverse
	 * up the extra static var chain until it reaches the top, or it reaches a replacement static.
	 *
	 * If any extra values are discovered, they are then merged with the default PHP static values, or in some cases
	 * completely replace the default PHP static when you set $replace = true, and do not define extra data on any child
	 * classes
	 * 
	 * Note that from SilverStripe 2.3.2, Object::get_static() can only be used to get public
	 * static variables, not protected ones.
	 *
	 * @param string $class
	 * @param string $name the property name
	 * @param bool $uncached if set to TRUE, force a regeneration of the static cache
	 * @return mixed
	 */",
 "/**
	 * Set a static variable
	 *
	 * @param string $class
	 * @param string $name the property name to set
	 * @param mixed $value
	 */",
 "/**
	 * Get an uninherited static variable - a variable that is explicity set in this class, and not in the parent class.
	 * 
	 * Note that from SilverStripe 2.3.2, Object::uninherited_static() can only be used to get public
	 * static variables, not protected ones.
	 * 
	 * @todo Recursively filter out parent statics, currently only inspects the parent class
	 *
	 * @param string $class
	 * @param string $name
	 * @return mixed
	 */",
 "/**
	 * Traverse down a class ancestry and attempt to merge all the uninherited static values for a particular static
	 * into a single variable
	 *
	 * @param string $class
	 * @param string $name the static name
	 * @param string $ceiling an optional parent class name to begin merging statics down from, rather than traversing
	 *        the entire hierarchy
	 * @return mixed
	 */",
 "/**
	 * Merge in a set of additional static variables
	 *
	 * @param string $class
	 * @param array $properties in a [property name] => [value] format
	 * @param bool $replace replace existing static vars
	 */",
 "/**
	 * Add a static variable without replacing it completely if possible, but merging in with both existing PHP statics
	 * and existing psuedo-statics. Uses PHP\'s array_merge_recursive() with if the $replace argument is FALSE.
	 * 
	 * Documentation from http://php.net/array_merge_recursive:
	 * If the input arrays have the same string keys, then the values for these keys are merged together 
	 * into an array, and this is done recursively, so that if one of the values is an array itself, 
	 * the function will merge it with a corresponding entry in another array too. 
	 * If, however, the arrays have the same numeric key, the later value will not overwrite the original value, 
	 * but will be appended. 
	 *
	 * @param string $class
	 * @param string $name the static name
	 * @param mixed $value
	 * @param bool $replace completely replace existing static values
	 */",
 "/**
	 * Return TRUE if a class has a specified extension
	 *
	 * @param string $class
	 * @param string $requiredExtension the class name of the extension to check for.
	 */",
 "/**
	 * Add an extension to a specific class.
	 * As an alternative, extensions can be added to a specific class
	 * directly in the {@link Object::$extensions} array.
	 * See {@link SiteTree::$extensions} for examples.
	 * Keep in mind that the extension will only be applied to new
	 * instances, not existing ones (including all instances created through {@link singleton()}).
	 *
	 * @param string $class Class that should be decorated - has to be a subclass of {@link Object}
	 * @param string $extension Subclass of {@link Extension} with optional parameters 
	 *  as a string, e.g. \"Versioned\" or \"Translatable(\'Param\')\"
	 */",
 "/**
	 * Prepare static variables before processing a {@link get_static} or {@link set_static}
	 * call.
	 */",
 "/**
	 * Remove an extension from a class.
	 * Keep in mind that this won\'t revert any datamodel additions
	 * of the extension at runtime, unless its used before the
	 * schema building kicks in (in your _config.php).
	 * Doesn\'t remove the extension from any {@link Object}
	 * instances which are already created, but will have an
	 * effect on new extensions.
	 * Clears any previously created singletons through {@link singleton()}
	 * to avoid side-effects from stale extension information.
	 * 
	 * @todo Add support for removing extensions with parameters
	 *
	 * @param string $class
	 * @param string $extension Classname of an {@link Extension} subclass, without parameters
	 */",
 "/**
	 * @param string $class
	 * @param bool $includeArgumentString Include the argument string in the return array,
	 *  FALSE would return array(\"Versioned\"), TRUE returns array(\"Versioned(\'Stage\',\'Live\')\").
	 * @return array Numeric array of either {@link DataObjectDecorator} classnames,
	 *  or eval\'ed classname strings with constructor arguments.
	 */",
 "/**
	 * Attemps to locate and call a method dynamically added to a class at runtime if a default cannot be located
	 *
	 * You can add extra methods to a class using {@link Extensions}, {@link Object::createMethod()} or
	 * {@link Object::addWrapperMethod()}
	 *
	 * @param string $method
	 * @param array $arguments
	 * @return mixed
	 */",
 "/**
	 * Return TRUE if a method exists on this object
	 *
	 * This should be used rather than PHP\'s inbuild method_exists() as it takes into account methods added via
	 * extensions
	 *
	 * @param string $method
	 * @return bool
	 */",
 "/**
	 * Return the names of all the methods available on this object
	 *
	 * @param bool $custom include methods added dynamically at runtime
	 * @return array
	 */",
 "/**
	 * Adds any methods from {@link Extension} instances attached to this object.
	 * All these methods can then be called directly on the instance (transparently
	 * mapped through {@link __call()}), or called explicitly through {@link extend()}.
	 * 
	 * @uses addMethodsFrom()
	 */",
 "/**
	 * Add all the methods from an object property (which is an {@link Extension}) to this object.
	 *
	 * @param string $property the property name
	 * @param string|int $index an index to use if the property is an array
	 */",
 "/**
	 * Add a wrapper method - a method which points to another method with a different name. For example, Thumbnail(x)
	 * can be wrapped to generateThumbnail(x)
	 *
	 * @param string $method the method name to wrap
	 * @param string $wrap the method name to wrap to
	 */",
 "/**
	 * Add an extra method using raw PHP code passed as a string
	 *
	 * @param string $method the method name
	 * @param string $code the PHP code - arguments will be in an array called $args, while you can access this object
	 *        by using $obj. Note that you cannot call protected methods, as the method is actually an external function
	 */",
 "/**
	 * @see Object::get_static()
	 */",
 "/**
	 * @see Object::set_static()
	 */",
 "/**
	 * @see Object::uninherited_static()
	 */",
 "/**
	 * @deprecated
	 */",
 "/**
	 * Return true if this object \"exists\" i.e. has a sensible value
	 *
	 * This method should be overriden in subclasses to provide more context about the classes state. For example, a
	 * {@link DataObject} class could return false when it is deleted from the database
	 *
	 * @return bool
	 */",
 "/**
	 * @return string this classes parent class
	 */",
 "/**
	 * Check if this class is an instance of a specific class, or has that class as one of its parents
	 *
	 * @param string $class
	 * @return bool
	 */",
 "/**
	 * @return string the class name
	 */",
 "/**
	 * Calls a method if available on both this object and all applied {@link Extensions}, and then attempts to merge
	 * all results into an array
	 *
	 * @param string $method the method name to call
	 * @param mixed $argument a single argument to pass
	 * @return mixed
	 * @todo integrate inheritance rules
	 */",
 "/**
	 * Run the given function on all of this object\'s extensions. Note that this method originally returned void, so if
	 * you wanted to return results, you\'re hosed
	 *
	 * Currently returns an array, with an index resulting every time the function is called. Only adds returns if
	 * they\'re not NULL, to avoid bogus results from methods just defined on the parent decorator. This is important for
	 * permission-checks through extend, as they use min() to determine if any of the returns is FALSE. As min() doesn\'t
	 * do type checking, an included NULL return would fail the permission checks.
	 * 
	 * The extension methods are defined during {@link __construct()} in {@link defineMethods()}.
	 * 
	 * @param string $method the name of the method to call on each extension
	 * @param mixed $a1,... up to 7 arguments to be passed to the method
	 * @return array
	 */",
 "/**
	 * Get an extension instance attached to this object by name.
	 * 
	 * @uses hasExtension()
	 *
	 * @param string $extension
	 * @return Extension
	 */",
 "/**
	 * Returns TRUE if this object instance has a specific extension applied
	 * in {@link $extension_instances}. Extension instances are initialized
	 * at constructor time, meaning if you use {@link add_extension()}
	 * afterwards, the added extension will just be added to new instances
	 * of the decorated class. Use the static method {@link has_extension()}
	 * to check if a class (not an instance) has a specific extension.
	 * Caution: Don\'t use singleton(<class>)->hasExtension() as it will
	 * give you inconsistent results based on when the singleton was first
	 * accessed.
	 *
	 * @param string $extension Classname of an {@link Extension} subclass without parameters
	 * @return bool
	 */",
 "/**
	 * Get all extension instances for this specific object instance.
	 * See {@link get_extensions()} to get all applied extension classes
	 * for this class (not the instance).
	 * 
	 * @return array Map of {@link DataObjectDecorator} instances, keyed by classname.
	 */",
 "/**
	 * Cache the results of an instance method in this object to a file, or if it is already cache return the cached
	 * results
	 *
	 * @param string $method the method name to cache
	 * @param int $lifetime the cache lifetime in seconds
	 * @param string $ID custom cache ID to use
	 * @param array $arguments an optional array of arguments
	 * @return mixed the cached data
	 */",
 "/**
	 * Clears the cache for the given cacheToFile call
	 */",
 "/**
	 * @deprecated
	 */",
 "/**
	 * Loads a cache from the filesystem if a valid on is present and within the specified lifetime
	 *
	 * @param string $cache the cache name
	 * @param int $lifetime the lifetime (in seconds) of the cache before it is invalid
	 * @return mixed
	 */",
 "/**
	 * Save a piece of cached data to the file system
	 *
	 * @param string $cache the cache name
	 * @param mixed $data data to save (must be serializable)
	 */",
 "/**
	 * Strip a file name of special characters so it is suitable for use as a cache file name
	 *
	 * @param string $name
	 * @return string the name with all special cahracters replaced with underscores
	 */",
 "/**
	 * @deprecated 2.4 Use getExtensionInstance
	 */",
 "/**
 * A base class for all sapphire objects to inherit from.
 *
 * This class provides a number of pattern implementations, as well as methods and fixes to add extra psuedo-static
 * and method functionality to PHP.
 * 
 * See {@link Extension} on how to implement a custom multiple
 * inheritance for object instances based on PHP5 method call overloading.
 * 
 * @todo Create instance-specific removeExtension() which removes an extension from $extension_instances,
 * but not from static $extensions, and clears everything added through defineMethods(), mainly $extra_methods.
 *
 * @package sapphire
 * @subpackage core
 */",
 "/**
	 * Create a new Decimal field.
	 */",
 "/**
	 * Returns the number, expressed as a percentage. For example, ???36.30%???
	 */",
 "/**
 * Represents a decimal field from 0-1 containing a percentage value.
 * 
 * Example instantiation in {@link DataObject::$db}:
 * <code>
 * static $db = array(
 * 	\"SuccessRatio\" => \"Percentage\",
 * 	\"ReallyAccurate\" => \"Percentage(6)\",
 * );
 * </code>
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Create a new HTTP response
	 * 
	 * @param $body The body of the response
	 * @param $statusCode The numeric status code - 200, 404, etc
	 * @param $statusDescription The text to be given alongside the status code. 
	 *  See {@link setStatusCode()} for more information.
	 */",
 "/**
	 * @param String $code
	 * @param String $description Optional. See {@link setStatusDescription()}.
	 *  No newlines are allowed in the description.
	 *  If omitted, will default to the standard HTTP description
	 *  for the given $code value (see {@link $status_codes}).
	 */",
 "/**
	 * The text to be given alongside the status code (\"reason phrase\").
	 * Caution: Will be overwritten by {@link setStatusCode()}.
	 * 
	 * @param String $description 
	 */",
 "/**
	 * @return Int
	 */",
 "/**
	 * @return string Description for a HTTP status code
	 */",
 "/**
	 * Returns true if this HTTP response is in error
	 */",
 "/**
	 * Add a HTTP header to the response, replacing any header of the same name.
	 * 
	 * @param string $header Example: \"Content-Type\"
	 * @param string $value Example: \"text/xml\" 
	 */",
 "/**
	 * Return the HTTP header of the given name.
	 * 
	 * @param string $header
	 * @returns string
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * Remove an existing HTTP header by its name,
	 * e.g. \"Content-Type\".
	 *
	 * @param unknown_type $header
	 */",
 "/**
	 * Send this HTTPReponse to the browser
	 */",
 "/**
	 * Returns true if this response is \"finished\", that is, no more script execution should be done.
	 * Specifically, returns true if a redirect has already been requested
	 */",
 "/**
	 * @deprecated 2.4 Use {@link HTTP::getLinksIn()} on DOMDocument.
	 */",
 "/**
 * Represents a response returned by a controller.
 *
 * @package sapphire
 * @subpackage control
 */",
 "/**
	 * @see SS_HTTPResponse::__construct();
	 */",
 "/**
	  * @return SS_HTTPResponse
	  */",
 "/**
	  * @param SS_HTTPResponse $response
	  */",
 "/**
 * A {@link SS_HTTPResponse} encapsulated in an exception, which can interrupt the processing flow and be caught by the
 * {@link RequestHandler} and returned to the user.
 *
 * Example Usage:
 * <code>
 * throw new SS_HTTPResponse_Exception(\'This request was invalid.\', 400);
 * throw new SS_HTTPResponse_Exception(new SS_HTTPResponse(\'There was an internal server error.\', 500));
 * </code>
 *
 * @package sapphire
 * @subpackage control
 */",
 "/**
	 * Applies a substring match on a field value.
	 *
	 * @return unknown
	 */",
 "/**
 * Matches textual content with a substring match from the beginning
 * of the string.
 * 
 * <code>
 *  \"abcdefg\" => \"defg\" # false
 *  \"abcdefg\" => \"abcd\" # true
 * </code>
 * 
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Returns a readonly version of this field
	 */",
 "/**
 * SimpleImageField provides an easy way of uploading images to {@link Image} has_one relationships.
 * These relationships are auto-detected if you name the field accordingly.
 * Unlike {@link ImageField}, it doesn\'t use an iframe.
 * 
 * Restricts the upload size to 2MB by default, and only allows upload
 * of files with the extension \'jpg\', \'gif\' or \'png\'.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * class Article extends DataObject {
 * 	static $has_one = array(\'MyImage\' => \'Image\');
 * }
 * // use in your form constructor etc.
 * $myField = new SimpleImageField(\'MyImage\');
 * </code>
 * 
 * <b>Usage within a controller</b>
 * 
 * First add your $has_one relationship:
 * 
 * <code>
 * static $has_one = array(
 *    \'FileName\' => \'FileType\'
 * );
 * </code>
 * (i.e. Image for a FileType)
 * 
 * Then add your Field into your form:
 * 
 * <code>
 * function Form() {
 *    return new Form($this, \"Form\", new FieldSet(
 *        new SimpleImageField (
 *            $name = \"FileTypeID\",
 *            $title = \"Upload your FileType\"
 *        )
 *    ), new FieldSet(
 * 
 *    // List the action buttons here - doform executes the function \'doform\' below
 *        new FormAction(\"doform\", \"Submit\")
 * 
 *    // List the required fields here
 *    ), new RequiredFields(
 *        \"FileTypeID\"
 *    ));
 * }
 * // Then make sure that the file is saved into the assets area:
 * function doform($data, $form) {
 *    $file = new File();
 *    $file->loadUploaded($_FILES[\'FileTypeID\']);
 * 		
 *    // Redirect to a page thanking people for registering
 *    Director::redirect(\'thanks-for-your-submission/\');
 * }
 * </code>
 * 
 * Your file should be now in the uploads directory
 * 
 * @package forms
 * @subpackage fields-files
 */",
 "/**
 * Disabled version of {@link SimpleImageField}.
 * @package forms
 * @subpackage fields-files
 */",
 "/**
 * Autocompleting text field, using script.aculo.us
 * 
 * @deprecated 2.4 Use third-party alternatives like http://code.google.com/p/ss-module-formfields/ or http://silverstripe.org/tag-field-module/
 * 
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
 * Grouped dropdown, using <optgroup> tags.
 * 
 * $source parameter (from DropdownField) must be a two dimensional array.
 * The first level of the array is used for the <optgroup>, and the second
 * level are the <options> for each group.
 * 
 * Returns a <select> tag containing all the appropriate <option> tags, with
 * <optgroup> tags around the <option> tags as required.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * new GroupedDropdownField(
 *    $name = \"dropdown\",
 *    $title = \"Simple Grouped Dropdown\",
 *    $source = array(
 *       \"numbers\" => array(
 *       		\"1\" => \"1\",
 *       		\"2\" => \"2\",
 *       		\"3\" => \"3\",
 *       		\"4\" => \"4\"
 *    		),
 *       \"letters\" => array(
 *       		\"1\" => \"A\",
 *       		\"2\" => \"B\",
 *       		\"3\" => \"C\",
 *       		\"4\" => \"D\",
 *       		\"5\" => \"E\",
 *       		\"6\" => \"F\"
 *    		)
 *    )
 * )
 * </code>
 * 
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
 * A tokenised regular expression is a parser, similar to a regular expression, that acts on tokens rather than characters.
 * This is a crucial component of the ManifestBuilder.
 * @package sapphire
 * @subpackage core
 */",
 "/**
	 * Returns when validation on DataObjects is enabled.
	 * @return bool
	 */",
 "/**
	 * Set whether DataObjects should be validated before they are written.
	 * @param $enable bool
	 * @see DataObject::validate()
	 */",
 "/**
	 * Return the complete map of fields on this object, including Created, LastEdited and ClassName
	 *
	 * @param string $class
	 * @return array
	 */",
 "/**
	 * Get all database columns explicitly defined on a class in {@link DataObject::$db} 
	 * and {@link DataObject::$has_one}. Resolves instances of {@link CompositeDBField} 
	 * into the actual database fields, rather than the name of the field which 
	 * might not equate a database column.
	 * 
	 * @uses CompositeDBField->compositeDatabaseFields()
	 *
	 * @param string $class
	 * @return array Map of fieldname to specification, similiar to {@link DataObject::$db}.
	 */",
 "/**
	 * Returns the field class if the given db field on the class is a composite field.
	 * Will check all applicable ancestor classes and aggregate results.
	 */",
 "/**
	 * Returns a list of all the composite if the given db field on the class is a composite field.
	 * Will check all applicable ancestor classes and aggregate results.
	 */",
 "/**
	 * Internal cacher for the composite field information
	 */",
 "/**
	 * Construct a new DataObject.
	 *
	 * @param array|null $record This will be null for a new database record.  Alternatively, you can pass an array of
	 * field values.  Normally this contructor is only used by the internal systems that get objects from the database.
	 * @param boolean $isSingleton This this to true if this is a singleton() object, a stub for calling methods.  Singletons
	 * don\'t have their defaults set.
	 */",
 "/**
	 * Destroy all of this objects dependant objects.
	 * You\'ll need to call this to get the memory of an object that has components or extensions freed.
	 */",
 "/**
	 * Create a duplicate of this node.
	 * Caution: Doesn\'t duplicate relations.
	 *
	 * @param $doWrite Perform a write() operation before returning the object.  If this is true, it will create the duplicate in the database.
	 * @return DataObject A duplicate of this node. The exact type will be the type of this node.
	 */",
 "/**
	 * Set the ClassName attribute. {@link $class} is also updated.
	 * Warning: This will produce an inconsistent record, as the object
	 * instance will not automatically switch to the new subclass.
	 * Please use {@link newClassInstance()} for this purpose,
	 * or destroy and reinstanciate the record.
	 *
	 * @param string $className The new ClassName attribute (a subclass of {@link DataObject})
	 */",
 "/**
	 * Create a new instance of a different class from this object\'s record.
	 * This is useful when dynamically changing the type of an instance. Specifically,
	 * it ensures that the instance of the class is a match for the className of the
	 * record. Don\'t set the {@link DataObject->class} or {@link DataObject->ClassName}
	 * property manually before calling this method, as it will confuse change detection.
	 * 
	 * If the new class is different to the original class, defaults are populated again
	 * because this will only occur automatically on instantiation of a DataObject if
	 * there is no record, or the record has no ID. In this case, we do have an ID but
	 * we still need to repopulate the defaults.
	 *
	 * @param string $newClassName The name of the new class
	 *
	 * @return DataObject The new instance of the new class, The exact type will be of the class name provided.
	 */",
 "/**
	 * Adds methods from the extensions.
	 * Called by Object::__construct() once per class.
	 */",
 "/**
	 * Returns true if this object \"exists\", i.e., has a sensible value.
	 * The default behaviour for a DataObject is to return true if
	 * the object exists in the database, you can override this in subclasses.
	 *
	 * @return boolean true if this object exists
	 */",
 "/**
	 * Get the user friendly singular name of this DataObject.
	 * If the name is not defined (by redefining $singular_name in the subclass),
	 * this returns the class name.
	 *
	 * @return string User friendly singular name of this DataObject
	 */",
 "/**
	 * Get the translated user friendly singular name of this DataObject
	 * same as singular_name() but runs it through the translating function
	 *
	 * Translating string is in the form:
	 *     $this->class.SINGULARNAME
	 * Example:
	 *     Page.SINGULARNAME
	 *
	 * @return string User friendly translated singular name of this DataObject
	 */",
 "/**
	 * Get the user friendly plural name of this DataObject
	 * If the name is not defined (by renaming $plural_name in the subclass),
	 * this returns a pluralised version of the class name.
	 *
	 * @return string User friendly plural name of this DataObject
	 */",
 "/**
	 * Get the translated user friendly plural name of this DataObject
	 * Same as plural_name but runs it through the translation function
	 * Translation string is in the form:
	 *      $this->class.PLURALNAME
	 * Example:
	 *      Page.PLURALNAME
	 *
	 * @return string User friendly translated plural name of this DataObject
	 */",
 "/**
	 * Standard implementation of a title/label for a specific
	 * record. Tries to find properties \'Title\' or \'Name\',
	 * and falls back to the \'ID\'. Useful to provide
	 * user-friendly identification of a record, e.g. in errormessages
	 * or UI-selections.
	 * 
	 * Overload this method to have a more specialized implementation,
	 * e.g. for an Address record this could be:
	 * <code>
	 * public function getTitle() {
	 *   return \"{$this->StreetNumber} {$this->StreetName} {$this->City}\";
	 * }
	 * </code>
	 *
	 * @return string
	 */",
 "/**
	 * Returns the associated database record - in this case, the object itself.
	 * This is included so that you can call $dataOrController->data() and get a DataObject all the time.
	 *
	 * @return DataObject Associated database record
	 */",
 "/**
	 * Convert this object to a map.
	 *
	 * @return array The data as a map.
	 */",
 "/**
	 * Update a number of fields on this object, given a map of the desired changes.
	 * 
	 * The field names can be simple names, or you can use a dot syntax to access $has_one relations.
	 * For example, array(\"Author.FirstName\" => \"Jim\") will set $this->Author()->FirstName to \"Jim\".
	 * 
	 * update() doesn\'t write the main object, but if you use the dot syntax, it will write() 
	 * the related objects that it alters.
	 *
	 * @param array $data A map of field name to data values to update.
	 */",
 "/**
	 * Pass changes as a map, and try to
	 * get automatic casting for these fields.
	 * Doesn\'t write to the database. To write the data,
	 * use the write() method.
	 *
	 * @param array $data A map of field name to data values to update.
	 */",
 "/**
	 * Merges data and relations from another object of same class,
	 * without conflict resolution. Allows to specify which
	 * dataset takes priority in case its not empty.
	 * has_one-relations are just transferred with priority \'right\'.
	 * has_many and many_many-relations are added regardless of priority.
	 *
	 * Caution: has_many/many_many relations are moved rather than duplicated,
	 * meaning they are not connected to the merged object any longer.
	 * Caution: Just saves updated has_many/many_many relations to the database,
	 * doesn\'t write the updated object itself (just writes the object-properties).
	 * Caution: Does not delete the merged object.
	 * Caution: Does now overwrite Created date on the original object.
	 *
	 * @param $obj DataObject
	 * @param $priority String left|right Determines who wins in case of a conflict (optional)
	 * @param $includeRelations Boolean Merge any existing relations (optional)
	 * @param $overwriteWithEmpty Boolean Overwrite existing left values with empty right values.
	 * 	Only applicable with $priority=\'right\'. (optional)
	 * @return Boolean
	 */",
 "/**
	 * Forces the record to think that all its data has changed.
	 * Doesn\'t write to the database. Only sets fields as changed
	 * if they are not already marked as changed.
	 */",
 "/**
	 * Validate the current object.
	 *
	 * By default, there is no validation - objects are always valid!  However, you can overload this method in your
	 * DataObject sub-classes to specify custom validation.
	 * 
	 * Invalid objects won\'t be able to be written - a warning will be thrown and no write will occur.  onBeforeWrite()
	 * and onAfterWrite() won\'t get called either.
	 * 
	 * It is expected that you call validate() in your own application to test that an object is valid before attempting
	 * a write, and respond appropriately if it isnt\'.
	 * 
	 * @return A {@link ValidationResult} object
	 */",
 "/**
	 * Event handler called before writing to the database.
	 * You can overload this to clean up or otherwise process data before writing it to the
	 * database.  Don\'t forget to call parent::onBeforeWrite(), though!
	 *
	 * This called after {@link $this->validate()}, so you can be sure that your data is valid.
	 * 
	 * @uses DataObjectDecorator->onBeforeWrite()
	 */",
 "/**
	 * Event handler called after writing to the database.
	 * You can overload this to act upon changes made to the data after it is written.
	 * $this->changed will have a record
	 * database.  Don\'t forget to call parent::onAfterWrite(), though!
	 *
	 * @uses DataObjectDecorator->onAfterWrite()
	 */",
 "/**
	 * Event handler called before deleting from the database.
	 * You can overload this to clean up or otherwise process data before delete this
	 * record.  Don\'t forget to call parent::onBeforeDelete(), though!
	 *
	 * @uses DataObjectDecorator->onBeforeDelete()
	 */",
 "/**
	 * Load the default values in from the self::$defaults array.
	 * Will traverse the defaults of the current class and all its parent classes.
	 * Called by the constructor when creating new records.
	 * 
	 *  @uses DataObjectDecorator->populateDefaults()
	 */",
 "/**
	 * Writes all changes to this object to the database.
	 *  - It will insert a record whenever ID isn\'t set, otherwise update.
	 *  - All relevant tables will be updated.
	 *  - $this->onBeforeWrite() gets called beforehand.
	 *  - Extensions such as Versioned will ammend the database-write to ensure that a version is saved.
	 *  - Calls to {@link DataObjectLog} can be used to see everything that\'s been changed.
	 * 
	 *  @uses DataObjectDecorator->augmentWrite()
	 *
	 * @param boolean $showDebug Show debugging information
	 * @param boolean $forceInsert Run INSERT command rather than UPDATE, even if record already exists
	 * @param boolean $forceWrite Write to database even if there are no changes
	 * @param boolean $writeComponents Call write() on all associated component instances which were previously
	 * 					retrieved through {@link getComponent()}, {@link getComponents()} or {@link getManyManyComponents()}
	 * 					(Default: false)
	 *
	 * @return int The ID of the record
	 * @throws ValidationException Exception that can be caught and handled by the calling function
	 */",
 "/**
	 * Write the cached components to the database. Cached components could refer to two different instances of the same record.
	 * 
	 * @param $recursive Recursively write components
	 */",
 "/**
	 * Perform a write without affecting the version table.
	 * On objects without versioning.
	 *
	 * @return int The ID of the record
	 */",
 "/**
	 * Delete this data object.
	 * $this->onBeforeDelete() gets called.
	 * Note that in Versioned objects, both Stage and Live will be deleted.
	 *  @uses DataObjectDecorator->augmentSQL()
	 */",
 "/**
	 * Delete the record with the given ID.
	 *
	 * @param string $className The class name of the record to be deleted
	 * @param int $id ID of record to be deleted
	 */",
 "/**
	 * Get the class ancestry, including the current class name.
	 * The ancestry will be returned as an array of class names, where the 0th element
	 * will be the class that inherits directly from DataObject, and the last element
	 * will be the current class.
	 *
	 * @return array Class ancestry
	 */",
 "/**
	 * Return a component object from a one to one relationship, as a DataObject.
	 * If no component is available, an \'empty component\' will be returned.
	 *
	 * @param string $componentName Name of the component
	 *
	 * @return DataObject The component object. It\'s exact type will be that of the component.
	 */",
 "/**
	 * Returns a one-to-many component, as a ComponentSet.
	 * The return value will be cached on this object instance,
	 * but only when no related objects are found (to avoid unnecessary empty checks in the database).
	 * If related objects exist, no caching is applied.
	 *
	 * @param string $componentName Name of the component
	 * @param string $filter A filter to be inserted into the WHERE clause
	 * @param string|array $sort A sort expression to be inserted into the ORDER BY clause. If omitted, the static field $default_sort on the component class will be used.
	 * @param string $join A single join clause. This can be used for filtering, only 1 instance of each DataObject will be returned.
	 * @param string|array $limit A limit expression to be inserted into the LIMIT clause
	 *
	 * @return ComponentSet The components of the one-to-many relationship.
	 */",
 "/**
	 * Get the query object for a $has_many Component.
	 *
	 * Use {@link DataObjectSet->setComponentInfo()} to attach metadata to the
	 * resultset you\'re building with this query.
	 * Use {@link DataObject->buildDataObjectSet()} to build a set out of the {@link SQLQuery}
	 * object, and pass \"ComponentSet\" as a $containerClass.
	 *
	 * @param string $componentName
	 * @param string $filter
	 * @param string|array $sort
	 * @param string $join
	 * @param string|array $limit
	 * @return SQLQuery
	 */",
 "/**
	 * Tries to find the database key on another object that is used to store a relationship to this class. If no join
	 * field can be found it defaults to \'ParentID\'.
	 *
	 * @param string $component
	 * @param string $type the join type - either \'has_many\' or \'belongs_to\'
	 * @return string
	 */",
 "/**
	 * Sets the component of a relationship.
	 * This should only need to be called internally,
	 * and is mainly due to the caching logic in {@link getComponents()}
	 * and {@link getManyManyComponents()}.
	 *
	 * @param string $componentName Name of the component
	 * @param DataObject|ComponentSet $componentValue Value of the component
	 */",
 "/**
	 * Returns a many-to-many component, as a ComponentSet.
	 * The return value will be cached on this object instance,
	 * but only when no related objects are found (to avoid unnecessary empty checks in the database).
	 * If related objects exist, no caching is applied.
	 * 
	 * @param string $componentName Name of the many-many component
	 * @return ComponentSet The set of components
	 *
	 * @todo Implement query-params
	 */",
 "/**
	 * Get the query object for a $many_many Component.
	 * Use {@link DataObjectSet->setComponentInfo()} to attach metadata to the
	 * resultset you\'re building with this query.
	 * Use {@link DataObject->buildDataObjectSet()} to build a set out of the {@link SQLQuery}
	 * object, and pass \"ComponentSet\" as a $containerClass.
	 *
	 * @param string $componentName
	 * @param string $filter
	 * @param string|array $sort
	 * @param string $join
	 * @param string|array $limit
	 * @return SQLQuery
	 */",
 "/**
	 * Pull out a join clause for a many-many relationship.
	 *
	 * @param string $componentName The many_many or belongs_many_many relation to join to.
	 * @param string $baseTable The classtable that will already be included in the SQL query to which this join will be added.
	 * @return string SQL join clause
	 */",
 "/**
	 * Return an aggregate object. An aggregate object returns the result of running some SQL aggregate function on a field of 
	 * this dataobject type.
	 * 
	 * It can be called with no arguments, in which case it returns an object that calculates aggregates on this object\'s type,
	 * or with an argument (possibly statically), in which case it returns an object for that type
	 */",
 "/**
	 * Return an relationship aggregate object. A relationship aggregate does the same thing as an aggregate object, but operates
	 * on a has_many rather than directly on the type specified
	 */",
 "/**
	 * Return the class of a one-to-one component.  If $component is null, return all of the one-to-one components and their classes.
	 *
	 * @param string $component Name of component
	 *
	 * @return string|array The class of the one-to-one component, or an array of all one-to-one components and their classes.
	 */",
 "/**
	 * Returns the class of a remote belongs_to relationship. If no component is specified a map of all components and
	 * their class name will be returned.
	 *
	 * @param string $component
	 * @param bool $classOnly If this is TRUE, than any has_many relationships in the form \"ClassName.Field\" will have
	 *        the field data stripped off. It defaults to TRUE.
	 * @return string|array
	 */",
 "/**
	 * Return all of the database fields defined in self::$db and all the parent classes.
	 * Doesn\'t include any fields specified by self::$has_one.  Use $this->has_one() to get these fields
	 *
	 * @param string $fieldName Limit the output to a specific field name
	 * @return array The database fields
	 */",
 "/**
	 * Gets the class of a one-to-many relationship. If no $component is specified then an array of all the one-to-many
	 * relationships and their classes will be returned.
	 *
	 * @param string $component Name of component
	 * @param bool $classOnly If this is TRUE, than any has_many relationships in the form \"ClassName.Field\" will have
	 *        the field data stripped off. It defaults to TRUE.
	 * @return string|array
	 */",
 "/**
	 * Return the many-to-many extra fields specification.
	 * 
	 * If you don\'t specify a component name, it returns all
	 * extra fields for all components available.
	 * 
	 * @param string $component Name of component
	 * @return array
	 */",
 "/**
	 * Return information about a many-to-many component.
	 * The return value is an array of (parentclass, childclass).  If $component is null, then all many-many
	 * components are returned.
	 *
	 * @param string $component Name of component
	 *
	 * @return array  An array of (parentclass, childclass), or an array of all many-many components
	 */",
 "/**
	 * This returns an array (if it exists) describing the database extensions that are required, or false if none
	 * 
	 * This is experimental, and is currently only a Postgres-specific enhancement.
	 * 
	 * @return array or false
	 */",
 "/**
	 * Generates a SearchContext to be used for building and processing
	 * a generic search form for properties on this object.
	 *
	 * @return SearchContext
	 */",
 "/**
	 * Determine which properties on the DataObject are
	 * searchable, and map them to their default {@link FormField}
	 * representations. Used for scaffolding a searchform for {@link ModelAdmin}.
	 *
	 * Some additional logic is included for switching field labels, based on
	 * how generic or specific the field type is.
	 *
	 * Used by {@link SearchContext}.
	 * 
	 * @param array $_params
	 * 	\'fieldClasses\': Associative array of field names as keys and FormField classes as values
	 * 	\'restrictFields\': Numeric array of a field name whitelist
	 * @return FieldSet
	 */",
 "/**
	 * Scaffold a simple edit form for all properties on this dataobject,
	 * based on default {@link FormField} mapping in {@link DBField::scaffoldFormField()}.
	 * Field labels/titles will be auto generated from {@link DataObject::fieldLabels()}.
	 *
	 * @uses FormScaffolder
	 * 
	 * @param array $_params Associative array passing through properties to {@link FormScaffolder}.
	 * @return FieldSet
	 */",
 "/**
	 * Centerpiece of every data administration interface in Silverstripe,
	 * which returns a {@link FieldSet} suitable for a {@link Form} object.
	 * If not overloaded, we\'re using {@link scaffoldFormFields()} to automatically
	 * generate this set. To customize, overload this method in a subclass
	 * or decorate onto it by using {@link DataObjectDecorator->updateCMSFields()}.
	 *
	 * <code>
	 * klass MyCustomClass extends DataObject {
	 * 	static $db = array(\'CustomProperty\'=>\'Boolean\');
	 *
	 * 	public function getCMSFields() {
	 * 		$fields = parent::getCMSFields();
	 * 		$fields->addFieldToTab(\'Root.Content\',new CheckboxField(\'CustomProperty\'));
	 *		return $fields;
	 *	}
	 * }
	 * </code>
	 *
	 * @see Good example of complex FormField building: SiteTree::getCMSFields()
	 *
	 * @param array $params See {@link scaffoldFormFields()}
	 * @return FieldSet Returns a TabSet for usage within the CMS - don\'t use for frontend forms.
	 */",
 "/**
	 * need to be overload by solid dataobject, so that the customised actions of that dataobject,
	 * including that dataobject\'s decorator customised actions could be added to the EditForm.
	 * 
	 * @return an Empty FieldSet(); need to be overload by solid subclass
	 */",
 "/**
	 * Used for simple frontend forms without relation editing
	 * or {@link TabSet} behaviour. Uses {@link scaffoldFormFields()}
	 * by default. To customize, either overload this method in your
	 * subclass, or decorate it by {@link DataObjectDecorator->updateFrontEndFields()}.
	 * 
	 * @todo Decide on naming for \"website|frontend|site|page\" and stick with it in the API
	 *
	 * @param array $params See {@link scaffoldFormFields()}
	 * @return FieldSet Always returns a simple field collection without TabSet.
	 */",
 "/**
	 * Gets the value of a field.
	 * Called by {@link __get()} and any getFieldName() methods you might create.
	 *
	 * @param string $field The name of the field
	 *
	 * @return mixed The field value
	 */",
 "/**
	 * Return a map of all the fields for this record.
	 *
	 * @return array A map of field names to field values.
	 */",
 "/**
	 * Return the fields that have changed.
	 * 
	 * The change level affects what the functions defines as \"changed\":
	 * - Level 1 will return strict changes, even !== ones.
	 * - Level 2 is more lenient, it will only return real data changes, for example a change from 0 to null
	 * would not be included.
	 *
	 * Example return:
	 * <code>
	 * array(
	 *   \'Title\' = array(\'before\' => \'Home\', \'after\' => \'Home-Changed\', \'level\' => 2)
	 * )
	 * </code>
	 *
	 * @param boolean $databaseFieldsOnly Get only database fields that have changed
	 * @param int $changeLevel The strictness of what is defined as change
	 * @return array
	 */",
 "/**
	 * Uses {@link getChangedFields()} to determine if fields have been changed
	 * since loading them from the database.
	 * 
	 * @param string $fieldName Name of the database field to check, will check for any if not given
	 * @param int $changeLevel See {@link getChangedFields()}
	 * @return boolean
	 */",
 "/**
	 * Set the value of the field
	 * Called by {@link __set()} and any setFieldName() methods you might create.
	 *
	 * @param string $fieldName Name of the field
	 * @param mixed $val New field value
	 */",
 "/**
	 * Set the value of the field, using a casting object.
	 * This is useful when you aren\'t sure that a date is in SQL format, for example.
	 * setCastedField() can also be used, by forms, to set related data.  For example, uploaded images
	 * can be saved into the Image table.
	 *
	 * @param string $fieldName Name of the field
	 * @param mixed $value New field value
	 */",
 "/**
	 * Returns true if the given field exists
	 * in a database column on any of the objects tables,
	 * or as a dynamic getter with get<fieldName>().
	 *
	 * @param string $field Name of the field
	 * @return boolean True if the given field exists
	 */",
 "/**
	 * Returns true if the given field exists as a database column
	 *
	 * @param string $field Name of the field
	 *
	 * @return boolean
	 */",
 "/**
	 * Returns the field type of the given field, if it belongs to this class, and not a parent.
	 * Note that the field type will not include constructor arguments in round brackets, only the classname.
	 *
	 * @param string $field Name of the field
	 * @return string The field type of the given field
	 */",
 "/**
	 * Returns true if given class has its own table. Uses the rules for whether the table should exist rather than
	 * actually looking in the database.
	 *
	 * @param string $dataClass
	 * @return bool
	 */",
 "/**
	 * Returns true if the member is allowed to do the given action.
	 * See {@link extendedCan()} for a more versatile tri-state permission control.
	 *
	 * @param string $perm The permission to be checked, such as \'View\'.
	 * @param Member $member The member whose permissions need checking.  Defaults to the currently logged
	 * in user.
	 *
	 * @return boolean True if the the member is allowed to do the given action
	 */",
 "/**
	 * Process tri-state responses from permission-alterting decorators.  The decorators are
	 * expected to return one of three values:
	 * 
	 *  - false: Disallow this permission, regardless of what other decorators say
	 *  - true: Allow this permission, as long as no other decorators return false
	 *  - NULL: Don\'t affect the outcome
	 * 
	 * This method itself returns a tri-state value, and is designed to be used like this:
	 *
	 * <code>
	 * $extended = $this->extendedCan(\'canDoSomething\', $member);
	 * if($extended !== null) return $extended;
	 * else return $normalValue;
	 * </code>
	 * 
	 * @param String $methodName Method on the same object, e.g. {@link canEdit()}
	 * @param Member|int $member
	 * @return boolean|null
	 */",
 "/**
	 * Helper functon for extendedCan
	 * 
	 * @param Mixed $value
	 * @return boolean
	 */",
 "/**
	 * @param Member $member
	 * @return boolean
	 */",
 "/**
	 * @param Member $member
	 * @return boolean
	 */",
 "/**
	 * @param Member $member
	 * @return boolean
	 */",
 "/**
	 * @todo Should canCreate be a static method?
	 *
	 * @param Member $member
	 * @return boolean
	 */",
 "/**
	 * Debugging used by Debug::show()
	 *
	 * @return string HTML data representing this object
	 */",
 "/**
	 * Return the DBField object that represents the given field.
	 * This works similarly to obj() with 2 key differences:
	 *   - it still returns an object even when the field has no value.
	 *   - it only matches fields and not methods
	 *   - it matches foreign keys generated by has_one relationships, eg, \"ParentID\"
	 *
	 * @param string $fieldName Name of the field
	 * @return DBField The field as a DBField object
	 */",
 "/**
	 * Traverses to a DBField referenced by relationships between data objects.
	 * The path to the related field is specified with dot separated syntax (eg: Parent.Child.Child.FieldName)
	 *
	 * @param $fieldPath string
	 * @return DBField
	 */",
 "/**
	 * Temporary hack to return an association name, based on class, to get around the mangle
	 * of having to deal with reverse lookup of relationships to determine autogenerated foreign keys.
	 * 
	 * @return String
	 */",
 "/**
	 * Build a {@link SQLQuery} object to perform the given query.
	 *
	 * @param string $filter A filter to be inserted into the WHERE clause.
	 * @param string|array $sort A sort expression to be inserted into the ORDER BY clause. If omitted, self::$default_sort will be used.
	 * @param string|array $limit A limit expression to be inserted into the LIMIT clause.
	 * @param string $join A single join clause. This can be used for filtering, only 1 instance of each DataObject will be returned.
	 * @param boolean $restictClasses Restrict results to only objects of either this class of a subclass of this class
	 * @param string $having A filter to be inserted into the HAVING clause.
	 *
	 * @return SQLQuery Query built.
	 */",
 "/**
	 * Like {@link buildSQL}, but applies the extension modifications.
	 * 
	 * @uses DataObjectDecorator->augmentSQL()
	 *
	 * @param string $filter A filter to be inserted into the WHERE clause.
	 * @param string|array $sort A sort expression to be inserted into the ORDER BY clause. If omitted, self::$default_sort will be used.
	 * @param string|array $limit A limit expression to be inserted into the LIMIT clause.
	 * @param string $join A single join clause. This can be used for filtering, only 1 instance of each DataObject will be returned.
	 * @param string $having A filter to be inserted into the HAVING clause.
	 * @return SQLQuery Query built
	 */",
 "/**
	 * Return all objects matching the filter
	 * sub-classes are automatically selected and included
	 *
	 * @param string $callerClass The class of objects to be returned
	 * @param string $filter A filter to be inserted into the WHERE clause.
	 * @param string|array $sort A sort expression to be inserted into the ORDER BY clause.  If omitted, self::$default_sort will be used.
	 * @param string $join A single join clause.  This can be used for filtering, only 1 instance of each DataObject will be returned.
	 * @param string|array $limit A limit expression to be inserted into the LIMIT clause.
	 * @param string $containerClass The container class to return the results in.
	 *
	 * @return mixed The objects matching the filter, in the class specified by $containerClass
	 */",
 "/**
	 * The internal function that actually performs the querying for get().
	 * DataObject::get(\"Table\",\"filter\") is the same as singleton(\"Table\")->instance_get(\"filter\")
	 *
	 * @param string $filter A filter to be inserted into the WHERE clause.
	 * @param string $sort A sort expression to be inserted into the ORDER BY clause.  If omitted, self::$default_sort will be used.
	 * @param string $join A single join clause.  This can be used for filtering, only 1 instance of each DataObject will be returned.
	 * @param string $limit A limit expression to be inserted into the LIMIT clause.
	 * @param string $containerClass The container class to return the results in.
	 *
	 * @return mixed The objects matching the filter, in the class specified by $containerClass
	 */",
 "/**
	 * Take a database {@link SS_Query} and instanciate an object for each record.
	 *
	 * @param SS_Query|array $records The database records, a {@link SS_Query} object or an array of maps.
	 * @param string $containerClass The class to place all of the objects into.
	 *
	 * @return mixed The new objects in an object of type $containerClass
	 */",
 "/**
	 * Return the first item matching the given query.
	 * All calls to get_one() are cached.
	 *
	 * @param string $callerClass The class of objects to be returned
	 * @param string $filter A filter to be inserted into the WHERE clause
	 * @param boolean $cache Use caching
	 * @param string $orderby A sort expression to be inserted into the ORDER BY clause.
	 *
	 * @return DataObject The first item matching the query
	 */",
 "/**
	 * Flush the cached results for all relations (has_one, has_many, many_many)
	 * Also clears any cached aggregate data
	 * 
	 * @param boolean $persistant When true will also clear persistant data stored in the Cache system.
	 *                            When false will just clear session-local cached data 
	 * 
	 */",
 "/**
	 * Reset internal caches, for example after test runs
	 */",
 "/**
	 * Does the hard work for get_one()
	 * 
	 * @uses DataObjectDecorator->augmentSQL()
	 *
	 * @param string $filter A filter to be inserted into the WHERE clause
	 * @param string $orderby A sort expression to be inserted into the ORDER BY clause.
	 * @return DataObject The first item matching the query
	 */",
 "/**
	 * Return the given element, searching by ID
	 *
	 * @param string $callerClass The class of the object to be returned
	 * @param int $id The id of the element
	 * @param boolean $cache See {@link get_one()}
	 *
	 * @return DataObject The element
	 */",
 "/**
	 * Get the name of the base table for this object
	 */",
 "/**
	 * Return the database indexes on this table.
	 * This array is indexed by the name of the field with the index, and
	 * the value is the type of index.
	 */",
 "/**
	 * Check the database schema and update it as necessary.
	 * 
	 * @uses DataObjectDecorator->augmentDatabase()
	 */",
 "/**
	 * Add default records to database. This function is called whenever the
	 * database is built, after the database tables have all been created. Overload
	 * this to add default records when the database is built, but make sure you
	 * call parent::requireDefaultRecords().
	 * 
	 * @uses DataObjectDecorator->requireDefaultRecords()
	 */",
 "/**
	 * @see DataObject::database_fields()
	 */",
 "/**
	 * @see DataObject::custom_database_fields()
	 */",
 "/**
	 * Returns fields bu traversing the class heirachy in a bottom-up direction.
	 *
	 * Needed to avoid getCMSFields being empty when customDatabaseFields overlooks
	 * the inheritance chain of the $db array, where a child data object has no $db array,
	 * but still needs to know the properties of its parent. This should be merged into databaseFields or
	 * customDatabaseFields.
	 *
	 * @todo review whether this is still needed after recent API changes
	 */",
 "/**
	 * Get the default searchable fields for this object,
	 * as defined in the $searchable_fields list. If searchable
	 * fields are not defined on the data object, uses a default
	 * selection of summary fields.
	 *
	 * @return array
	 */",
 "/**
	 * Get any user defined searchable fields labels that
	 * exist. Allows overriding of default field names in the form
	 * interface actually presented to the user.
	 *
	 * The reason for keeping this separate from searchable_fields,
	 * which would be a logical place for this functionality, is to
	 * avoid bloating and complicating the configuration array. Currently
	 * much of this system is based on sensible defaults, and this property
	 * would generally only be set in the case of more complex relationships
	 * between data object being required in the search interface.
	 *
	 * Generates labels based on name of the field itself, if no static property 
	 * {@link self::field_labels} exists.
	 *
	 * @uses $field_labels
	 * @uses FormField::name_to_label()
	 *
	 * @param boolean $includerelations a boolean value to indicate if the labels returned include relation fields
	 * 
	 * @return array|string Array of all element labels if no argument given, otherwise the label of the field
	 */",
 "/**
	 * Get a human-readable label for a single field,
	 * see {@link fieldLabels()} for more details.
	 * 
	 * @uses fieldLabels()
	 * @uses FormField::name_to_label()
	 * 
	 * @param string $name Name of the field
	 * @return string Label of the field
	 */",
 "/**
	 * Get the default summary fields for this object.
	 *
	 * @todo use the translation apparatus to return a default field selection for the language
	 *
	 * @return array
	 */",
 "/**
	 * Defines a default list of filters for the search context.
	 *
	 * If a filter class mapping is defined on the data object,
	 * it is constructed here. Otherwise, the default filter specified in
	 * {@link DBField} is used.
	 *
	 * @todo error handling/type checking for valid FormField and SearchFilter subclasses?
	 *
	 * @return array
	 */",
 "/**
	 * @return boolean True if the object is in the database
	 */",
 "/**
	 * Sets a \'context object\' that can be used to provide hints about how to process a particular get / get_one request.
	 * In particular, DataObjectDecorators can use this to amend queries more effectively.
	 * Care must be taken to unset the context object after you\'re done with it, otherwise you will have a stale context,
	 * which could cause horrible bugs.
	 */",
 "/**
	 * Retrieve the current context object.
	 */",
 "/**
	 * Temporarily disable subclass access in data object qeur
	 */",
 "/**
	 * Collect all static properties on the object
	 * which contain natural language, and need to be translated.
	 * The full entity name is composed from the class name and a custom identifier.
	 * 
	 * @return array A numerical array which contains one or more entities in array-form.
	 * Each numeric entity array contains the \"arguments\" for a _t() call as array values:
	 * $entity, $string, $priority, $context.
	 */",
 "/**
 	 * Returns true if the given method/parameter has a value
 	 * (Uses the DBField::hasValue if the parameter is a database field)
 	 * 
	 * @param string $field The field name
	 * @param array $arguments
	 * @param bool $cache
 	 * @return boolean
 	 */",
 "/**
 * A single database record & abstract class for the data-access-model.
 *
 * <h2>Extensions and Decorators</h2>
 *
 * See {@link Extension} and {@link DataObjectDecorator}.
 * 
 * <h2>Permission Control</h2>
 * 
 * Object-level access control by {@link Permission}. Permission codes are arbitrary
 * strings which can be selected on a group-by-group basis.
 * 
 * <code>
 * class Article extends DataObject implements PermissionProvider {
 * 	static $api_access = true;
 * 	
 * 	public function canView($member = false) {
 * 		return Permission::check(\'ARTICLE_VIEW\');
 * 	}
 * 	public function canEdit($member = false) {
 * 		return Permission::check(\'ARTICLE_EDIT\');
 * 	}
 * 	public function canDelete() {
 * 		return Permission::check(\'ARTICLE_DELETE\');
 * 	}
 * 	public function canCreate() {
 * 		return Permission::check(\'ARTICLE_CREATE\');
 * 	}
 * 	public function providePermissions() {
 * 		return array(
 * 			\'ARTICLE_VIEW\' => \'Read an article object\',
 * 			\'ARTICLE_EDIT\' => \'Edit an article object\',
 * 			\'ARTICLE_DELETE\' => \'Delete an article object\',
 * 			\'ARTICLE_CREATE\' => \'Create an article object\',
 * 		);
 * 	}
 * }
 * </code> 
 *
 * Object-level access control by {@link Group} membership: 
 * <code>
 * class Article extends DataObject {
 * 	static $api_access = true;
 * 	
 * 	public function canView($member = false) {
 * 		if(!$member) $member = Member::currentUser();
 *		return $member->inGroup(\'Subscribers\');
 * 	}
 * 	public function canEdit($member = false) {
 * 		if(!$member) $member = Member::currentUser();
 *		return $member->inGroup(\'Editors\');
 * 	}
 * 	
 * 	// ...
 * }
 * </code>
 * 
 * If any public method on this class is prefixed with an underscore, 
 * the results are cached in memory through {@link cachedCall()}.
 * 
 * 
 * @todo Add instance specific removeExtension() which undos loadExtraStatics()
 *  and defineMethods()
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * Transformation that disables all the fields on the form.
 * @package forms
 * @subpackage transformations
 */",
 "/**
	 * Show the contents of val in a debug-friendly way.
	 * Debug::show() is intended to be equivalent to dprintr()
	 */",
 "/**
	 * Close out the show dumper
	 *
	 * @param mixed $val
	 */",
 "/**
	 * Quick dump of a variable.
	 *
	 * @param mixed $val
	 */",
 "/**
	 * ??
	 *
	 * @param unknown_type $val
	 * @return unknown
	 */",
 "/**
	 * Show a debugging message
	 */",
 "/**
	 * Send a debug message in an HTTP header. Only works if you are
	 * on Dev, and headers have not yet been sent.
	 *
	 * @param string $msg 
	 * @param string $prefix (optional)
	 * @return void
	 */",
 "/**
	 * Log to a standard text file output.
	 *
	 * @param $message string to output
	 */",
 "/**
	 * Load error handlers into environment.
	 * Caution: The error levels default to E_ALL is the site is in dev-mode (set in main.php).
	 */",
 "/**
	 * Handle a non-fatal warning error thrown by PHP interpreter.
	 *
	 * @param unknown_type $errno
	 * @param unknown_type $errstr
	 * @param unknown_type $errfile
	 * @param unknown_type $errline
	 * @param unknown_type $errcontext
	 */",
 "/**
	 * Handle a fatal error, depending on the mode of the site (ie: Dev, Test, or Live).
	 * 
	 * Runtime execution dies immediately once the error is generated.
	 *
	 * @param unknown_type $errno
	 * @param unknown_type $errstr
	 * @param unknown_type $errfile
	 * @param unknown_type $errline
	 * @param unknown_type $errcontext
	 */",
 "/**
	 * Render a user-facing error page, using the default HTML error template
	 * rendered by {@link ErrorPage} if it exists. Doesn\'t use the standard {@link SS_HTTPResponse} class
	 * the keep dependencies minimal. 
	 * 
	 * @uses ErrorPage
	 *
	 * @param int $statusCode HTTP Status Code (Default: 500)
	 * @param string $friendlyErrorMessage User-focused error message. Should not contain code pointers or \"tech-speak\".
	 *    Used in the HTTP Header and ajax responses.
	 * @param string $friendlyErrorDetail Detailed user-focused message. Is just used if no {@link ErrorPage} is found
	 *    for this specific status code.
	 * @return string HTML error message for non-ajax requests, plaintext for ajax-request.
	 */",
 "/**
	 * Create an instance of an appropriate DebugView object.
	 */",
 "/**
	 * Render a developer facing error page, showing the stack trace and details
	 * of the code where the error occured.
	 *
	 * @param unknown_type $errno
	 * @param unknown_type $errstr
	 * @param unknown_type $errfile
	 * @param unknown_type $errline
	 * @param unknown_type $errcontext
	 */",
 "/**
	 * Utility method to render a snippet of PHP source code, from selected file
	 * and highlighting the given line number.
	 *
	 * @param string $errfile
	 * @param int $errline
	 */",
 "/**
	 * Dispatch an email notification message when an error is triggered.
	 * @deprecated 2.5
	 * To create error logs by email, use this code instead:
	 * <code>
	 * $emailWriter = new SS_LogEmailWriter(\'my@email.com\');
	 * SS_Log::add_writer($emailWriter, SS_Log::ERR);
	 * </code>
	 * 
	 * @param string $emailAddress
	 * @param string $errno
	 * @param string $errstr
	 * @param string $errfile
	 * @param int $errline
	 * @param string $errcontext
	 * @param string $errorType \"warning\" or \"error\"
	 * @return boolean
	 */",
 "/**
	 * Log the given error, if self::$log_errors is set.
	 * Uses the native error_log() funtion in PHP.
	 * 
	 * Format: [d-M-Y h:i:s] <type> at <file> line <line>: <errormessage> <url>
	 * 
	 * @todo Detect script path for CLI errors
	 * @todo Log detailed errors to full file
	 * @deprecated 2.5 See SS_Log on setting up error file logging
	 */",
 "/**
	 * @param string $server IP-Address or domain
	 * @deprecated 2.5 See SS_Log on setting up error email notification
	 */",
 "/**
	 * @return string
	 * @deprecated 2.5 See SS_Log on setting up error email notification
	 */",
 "/**
	 * Send errors to the given email address.
	 * Can be used like so:
	 * if(Director::isLive()) Debug::send_errors_to(\"sam@silverstripe.com\");
	 * 
	 * @deprecated 2.5 See SS_Log on setting up error email notification
	 * 
	 * @param string $emailAddress The email address to send errors to
	 * @param string $sendWarnings Set to true to send warnings as well as errors (Default: false)
	 */",
 "/**
	 * @return string
	 * @deprecated 2.5 See SS_Log on setting up error email notification
	 */",
 "/**
	 * @param string $emailAddress
	 * @deprecated 2.5 See SS_Log on setting up error email notification
	 */",
 "/**
	 * @return string
	 * @deprecated 2.5 See SS_Log on setting up error email notification
	 */",
 "/**
	 * Call this to enable logging of errors.
	 * @deprecated 2.5 See SS_Log on setting up error file logging
	 */",
 "/**
	 * @deprecated 2.5 Please use {@link SS_Backtrace::backtrace()}
	 */",
 "/**
	 * @deprecated 2.5 Please use {@link SS_Backtrace::get_rendered_backtrace()}
	 */",
 "/**
	 * Check if the user has permissions to run URL debug tools,
	 * else redirect them to log in.
	 */",
 "/**
 * Supports debugging and core error handling.
 * 
 * Attaches custom methods to the default error handling hooks
 * in PHP. Currently, two levels of error are supported:
 * 
 * - Notice
 * - Warning
 * - Error
 * 
 * Uncaught exceptions are currently passed to the debug
 * reporter as standard PHP errors.
 * 
 * Errors handled by this class are passed along to {@link SS_Log}.
 * For configuration information, see the {@link SS_Log}
 * class documentation.
 * 
 * @todo add support for user defined config: Debug::die_on_notice(true | false)
 * @todo better way of figuring out the error context to display in highlighted source
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
 * Generic callback, to catch uncaught exceptions when they bubble up to the top of the call chain.
 * 
 * @ignore 
 * @param Exception $exception
 */",
 "/**
 * Generic callback to catch standard PHP runtime errors thrown by the interpreter
 * or manually triggered with the user_error function.
 * Caution: The error levels default to E_ALL is the site is in dev-mode (set in main.php).
 * 
 * @ignore 
 * @param int $errno
 * @param string $errstr
 * @param string $errfile
 * @param int $errline
 */",
 "/**
	 * Display error bar if it exists
	 */",
 "/**
 * Test reporter optimised for CLI (ie, plain-text) output
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
 * Content side-report listing pages with broken links
 * @package cms
 * @subpackage content
 */",
 "/**
 * Plug-ins for additional functionality in your LeftAndMain classes.
 * 
 * @package cms
 * @subpackage core
 */",
 "/**
     * Add a filter specific to this writer.
     *
     * @param  Zend_Log_Filter_Interface  $filter
     * @return void
     */",
 "/**
     * Log a message to this writer.
     *
     * @param  array     $event  log data event
     * @return void
     */",
 "/**
     * Set a new formatter for this writer
     *
     * @param  Zend_Log_Formatter_Interface $formatter
     * @return void
     */",
 "/**
     * Perform shutdown activites such as closing open resources
     *
     * @return void
     */",
 "/**
     * Write a message to the log.
     *
     * @param  array  $event  log data event
     * @return void
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Writer
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Abstract.php 13621 2009-01-14 01:53:04Z cadorn $
 */",
 "/**
	 * @todo Explain different source data that can be used with this field,
	 * e.g. SQLMap, DataObjectSet or an array.
	 * 
	 * @todo Should use CheckboxField FieldHolder rather than constructing own markup.
	 */",
 "/**
	 * Default selections, regardless of the {@link setValue()} settings.
	 * Note: Items marked as disabled through {@link setDisabledItems()} can still be
	 * selected by default through this method.
	 * 
	 * @param Array $items Collection of array keys, as defined in the $source array
	 */",
 "/**
	 * @return Array
	 */",
 "/**
	 * Load a value into this CheckboxSetField
	 */",
 "/**
	 * Save the current value of this CheckboxSetField into a DataObject.
	 * If the field it is saving to is a has_many or many_many relationship,
	 * it is saved by setByIDList(), otherwise it creates a comma separated
	 * list for a standard DB text/varchar field.
	 *
	 * @param DataObject $record The record to save into
	 */",
 "/**
	 * Return the CheckboxSetField value as a string 
	 * selected item keys.
	 * 
	 * @return string
	 */",
 "/**
	 * Transforms the source data for this CheckboxSetField
	 * into a comma separated list of values.
	 * 
	 * @return ReadonlyField
	 */",
 "/**
 * Displays a set of checkboxes as a logical group.
 *
 * ASSUMPTION -> IF you pass your source as an array, you pass values as an array too. Likewise objects are handled the same.
 * 
 * Example:
 * <code php>
 * new CheckboxSetField(
 *    $name = \"topics\",
 *    $title = \"I am interested in the following topics\",
 *    $source = array(
 *       \"1\" => \"Technology\",
 *       \"2\" => \"Gardening\",
 *       \"3\" => \"Cooking\",
 *       \"4\" => \"Sports\"
 *    ),
 *    $value = \"1\"
 * )
 * </code>
 * 
 * <b>Saving</b>
 * The checkbox set field will save its data in one of ways:
 *   * If the field name matches a many-many join on the object being edited, that many-many join will be updated to link to the objects selected on the checkboxes.  In this case, the keys of your value map should be the IDs of the database records.
 *   * If the field name matches a database field, a comma-separated list of values will be saved to that field.  The keys can be text or numbers.
 * 
 * @todo Document the different source data that can be used
 * with this form field - e.g ComponentSet, DataObjectSet,
 * array. Is it also appropriate to accept so many different
 * types of data when just using an array would be appropriate?
 * 
 * @todo Make use of FormField->createTag() to generate the
 * HTML tag(s) for this field.
 * 
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
	 * The SimplePie class contains feed level data and options
	 *
	 * There are two ways that you can create a new SimplePie object. The first
	 * is by passing a feed URL as a parameter to the SimplePie constructor
	 * (as well as optionally setting the cache location and cache expiry). This
	 * will initialise the whole feed with all of the default settings, and you
	 * can begin accessing methods and properties immediately.
	 *
	 * The second way is to create the SimplePie object with no parameters
	 * at all. This will enable you to set configuration options. After setting
	 * them, you must initialise the feed using $feed->init(). At that point the
	 * object\'s methods and properties will be available to you. This format is
	 * what is used throughout this documentation.
	 *
	 * @access public
	 * @since 1.0 Preview Release
	 * @param string $feed_url This is the URL you want to parse.
	 * @param string $cache_location This is where you want the cache to be stored.
	 * @param int $cache_duration This is the number of seconds that you want to store the cache file for.
	 */",
 "/**
	 * Used for converting object to a string
	 */",
 "/**
	 * This is the URL of the feed you want to parse.
	 *
	 * This allows you to enter the URL of the feed you want to parse, or the
	 * website you want to try to use auto-discovery on. This takes priority
	 * over any set raw data.
	 *
	 * You can set multiple feeds to mash together by passing an array instead
	 * of a string for the $url. Remember that with each additional feed comes
	 * additional processing and resources.
	 *
	 * @access public
	 * @since 1.0 Preview Release
	 * @param mixed $url This is the URL (or array of URLs) that you want to parse.
	 * @see SimplePie::set_raw_data()
	 */",
 "/**
	 * Provides an instance of SimplePie_File to use as a feed
	 *
	 * @access public
	 * @param object &$file Instance of SimplePie_File (or subclass)
	 * @return bool True on success, false on failure
	 */",
 "/**
	 * Allows you to use a string of RSS/Atom data instead of a remote feed.
	 *
	 * If you have a feed available as a string in PHP, you can tell SimplePie
	 * to parse that data string instead of a remote feed. Any set feed URL
	 * takes precedence.
	 *
	 * @access public
	 * @since 1.0 Beta 3
	 * @param string $data RSS or Atom data as a string.
	 * @see SimplePie::set_feed_url()
	 */",
 "/**
	 * Allows you to override the default timeout for fetching remote feeds.
	 *
	 * This allows you to change the maximum time the feed\'s server to respond
	 * and send the feed back.
	 *
	 * @access public
	 * @since 1.0 Beta 3
	 * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.
	 */",
 "/**
	 * Forces SimplePie to use fsockopen() instead of the preferred cURL
	 * functions.
	 *
	 * @access public
	 * @since 1.0 Beta 3
	 * @param bool $enable Force fsockopen() to be used
	 */",
 "/**
	 * Outputs the raw XML content of the feed, after it has gone through
	 * SimplePie\'s filters.
	 *
	 * Used only for debugging, this function will output the XML content as
	 * text/xml. When SimplePie reads in a feed, it does a bit of cleaning up
	 * before trying to parse it. Many parts of the feed are re-written in
	 * memory, and in the end, you have a parsable feed. XML dump shows you the
	 * actual XML that SimplePie tries to parse, which may or may not be very
	 * different from the original feed.
	 *
	 * @access public
	 * @since 1.0 Preview Release
	 * @param bool $enable Enable XML dump
	 */",
 "/**
	 * Enables/disables caching in SimplePie.
	 *
	 * This option allows you to disable caching all-together in SimplePie.
	 * However, disabling the cache can lead to longer load times.
	 *
	 * @access public
	 * @since 1.0 Preview Release
	 * @param bool $enable Enable caching
	 */",
 "/**
	 * Set the length of time (in seconds) that the contents of a feed
	 * will be cached.
	 *
	 * @access public
	 * @param int $seconds The feed content cache duration.
	 */",
 "/**
	 * Set the length of time (in seconds) that the autodiscovered feed
	 * URL will be cached.
	 *
	 * @access public
	 * @param int $seconds The autodiscovered feed URL cache duration.
	 */",
 "/**
	 * Set the file system location where the cached files should be stored.
	 *
	 * @access public
	 * @param string $location The file system location.
	 */",
 "/**
	 * Determines whether feed items should be sorted into reverse chronological order.
	 *
	 * @access public
	 * @param bool $enable Sort as reverse chronological order.
	 */",
 "/**
	 * Allows you to override the character encoding reported by the feed.
	 *
	 * @access public
	 * @param string $encoding Character encoding.
	 */",
 "/**
	 * Set how much feed autodiscovery to do
	 *
	 * @access public
	 * @see SIMPLEPIE_LOCATOR_NONE
	 * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY
	 * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION
	 * @see SIMPLEPIE_LOCATOR_LOCAL_BODY
	 * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION
	 * @see SIMPLEPIE_LOCATOR_REMOTE_BODY
	 * @see SIMPLEPIE_LOCATOR_ALL
	 * @param int $level Feed Autodiscovery Level (level can be a
	 * combination of the above constants, see bitwise OR operator)
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for caching.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for auto-discovery.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for XML parsing.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for remote file fetching.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for data sanitization.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for handling feed items.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for handling author data.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for handling category data.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for feed enclosures.
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for <media:text> captions
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for <media:copyright>
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for <media:credit>
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for <media:rating>
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to change which class SimplePie uses for <media:restriction>
	 * Useful when you are overloading or extending SimplePie\'s default classes.
	 *
	 * @access public
	 * @param string $class Name of custom class.
	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation
	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation
	 */",
 "/**
	 * Allows you to override the default user agent string.
	 *
	 * @access public
	 * @param string $ua New user agent string.
	 */",
 "/**
	 * Set callback function to create cache filename with
	 *
	 * @access public
	 * @param mixed $function Callback function
	 */",
 "/**
	 * Set javascript query string parameter
	 *
	 * @access public
	 * @param mixed $get Javascript query string parameter
	 */",
 "/**
	 * Set options to make SP as fast as possible.  Forgoes a
	 * substantial amount of data sanitization in favor of speed.
	 *
	 * @access public
	 * @param bool $set Whether to set them or not
	 */",
 "/**
	 * Set maximum number of feeds to check with autodiscovery
	 *
	 * @access public
	 * @param int $max Maximum number of feeds to check
	 */",
 "/**
	 * Set element/attribute key/value pairs of HTML attributes
	 * containing URLs that need to be resolved relative to the feed
	 *
	 * @access public
	 * @since 1.0
	 * @param array $element_attribute Element/attribute key/value pairs
	 */",
 "/**
	 * Set the handler to enable the display of cached favicons.
	 *
	 * @access public
	 * @param str $page Web-accessible path to the handler_favicon.php file.
	 * @param str $qs The query string that the value should be passed to.
	 */",
 "/**
	 * Set the handler to enable the display of cached images.
	 *
	 * @access public
	 * @param str $page Web-accessible path to the handler_image.php file.
	 * @param str $qs The query string that the value should be passed to.
	 */",
 "/**
	 * Return the error message for the occured error
	 *
	 * @access public
	 * @return string Error message
	 */",
 "/**
	 * Returns the URL for the favicon of the feed\'s website.
	 *
	 * @access public
	 * @since 1.0
	 */",
 "/**
	 * @todo If we have a perm redirect we should return the new URL
	 * @todo When we make the above change, let\'s support <itunes:new-feed-url> as well
	 * @todo Also, |atom:link|@rel=self
	 */",
 "/**
	 * Creates the subscribe_* methods\' return data
	 *
	 * @access private
	 * @param string $feed_url String to prefix to the feed URL
	 * @param string $site_url String to prefix to the site URL (and
	 * suffix to the feed URL)
	 * @return mixed URL if feed exists, false otherwise
	 */",
 "/**
	 * Added for parity between the parent-level and the item/entry-level.
	 */",
 "/**
 * SimplePie
 *
 * @package SimplePie
 * @version \"Razzleberry\"
 * @copyright 2004-2007 Ryan Parman, Geoffrey Sneddon
 * @author Ryan Parman
 * @author Geoffrey Sneddon
 * @todo Option for type of fetching (cache, not modified header, fetch, etc.)
 */",
 "/**
	 * @todo Atom inheritance (item author, source author, feed author)
	 */",
 "/**
	 * @todo Add ability to prefer one type of content over another (in a media group).
	 */",
 "/**
	 * Grabs all available enclosures (podcasts, etc.)
	 *
	 * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.
	 *
	 * At this point, we\'re pretty much assuming that all enclosures for an item are the same content.  Anything else is too complicated to properly support.
	 *
	 * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).
	 * @todo Add support for itunes: tags.  These should be relatively simple compared to media:.
	 * @todo If an element exists at a level, but it\'s value is empty, we should fall back to the value from the parent (if it exists).
	 */",
 "/**
	 * Creates the add_to_* methods\' return data
	 *
	 * @access private
	 * @param string $item_url String to prefix to the item permalink
	 * @param string $title_url String to prefix to the item title
	 * (and suffix to the item permalink)
	 * @return mixed URL if feed exists, false otherwise
	 */",
 "/**
	 * @todo If the dimensions for media:content are defined, use them when width/height are set to \'auto\'.
	 */",
 "/**
 * @todo Move to properly supporting RFC2616 (HTTP/1.1)
 */",
 "/**
	 * Create an instance of the class with the input data
	 *
	 * @access public
	 * @param string $data Input data
	 */",
 "/**
	 * Parse the input data
	 *
	 * @access public
	 * @return bool true on success, false on failure
	 */",
 "/**
	 * Check whether there is data beyond the pointer
	 *
	 * @access private
	 * @return bool true if there is further data, false if not
	 */",
 "/**
	 * See if the next character is LWS
	 *
	 * @access private
	 * @return bool true if the next character is LWS, false if not
	 */",
 "/**
	 * The starting state of the state machine, see if the data is a response or request
	 *
	 * @access private
	 */",
 "/**
	 * Parse an HTTP-version string
	 *
	 * @access private
	 */",
 "/**
	 * Parse LWS, replacing consecutive characters with a single space
	 *
	 * @access private
	 */",
 "/**
	 * Parse an HTTP-version string within a response
	 *
	 * @access private
	 */",
 "/**
	 * Parse a status code
	 *
	 * @access private
	 */",
 "/**
	 * Skip over the reason phrase (it has no normative value, and you can send absolutely anything here)
	 *
	 * @access private
	 */",
 "/**
	 * Parse a header name
	 *
	 * @access private
	 */",
 "/**
	 * See what state to move the state machine to while within non-quoted header values
	 *
	 * @access private
	 */",
 "/**
	 * Parse a header value while outside quotes
	 *
	 * @access private
	 */",
 "/**
	 * Parse LWS outside quotes
	 *
	 * @access private
	 */",
 "/**

	*

	*/",
 "/**

	*

	*/",
 "/**

	*

	*/",
 "/**

	*

	*/",
 "/**

	*

	*/",
 "/**

*


*/",
 "/**
	 * If a file has been cached, retrieve and display it.
	 *
	 * This is most useful for caching images (get_favicon(), etc.),
	 * however it works for all cached files.  This WILL NOT display ANY
	 * file/image/page/whatever, but rather only display what has already
	 * been cached by SimplePie.
	 *
	 * @access public
	 * @see SimplePie::get_favicon()
	 * @param str $identifier_url URL that is used to identify the content.
	 * This may or may not be the actual URL of the live content.
	 * @param str $cache_location Location of SimplePie\'s cache.  Defaults
	 * to \'./cache\'.
	 * @param str $cache_extension The file extension that the file was
	 * cached with.  Defaults to \'spc\'.
	 * @param str $cache_class Name of the cache-handling class being used
	 * in SimplePie.  Defaults to \'SimplePie_Cache\', and should be left
	 * as-is unless you\'ve overloaded the class.
	 * @param str $cache_name_function Function that converts the filename
	 * for saving.  Defaults to \'md5\'.
	 */",
 "/**
	 * Remove bad UTF-8 bytes
	 *
	 * PCRE Pattern to locate bad bytes in a UTF-8 string comes from W3C
	 * FAQ: Multilingual Forms (modified to include full ASCII range)
	 *
	 * @author Geoffrey Sneddon
	 * @see http://www.w3.org/International/questions/qa-forms-utf-8
	 * @param string $str String to remove bad UTF-8 bytes from
	 * @return string UTF-8 string
	 */",
 "/**
	 * Strip HTML comments
	 *
	 * @access public
	 * @param string $data Data to strip comments from
	 * @return string Comment stripped string
	 */",
 "/**
	 * Decode HTML entities
	 *
	 * @static
	 * @access public
	 * @param string $data Input data
	 * @return string Output data
	 */",
 "/**
	 * Remove RFC822 comments
	 *
	 * @author Tomas V.V.Cox <cox@idecnet.com>
	 * @author Pierre-Alain Joye <pajoye@php.net>
	 * @author Amir Mohammad Saied <amir@php.net>
	 * @copyright 1997-2006 Pierre-Alain Joye,Tomas V.V.Cox,Amir Mohammad Saied
	 * @license http://www.opensource.org/licenses/bsd-license.php New BSD License
	 * @version CVS: $Id: Validate.php,v 1.104 2006/11/17 16:32:06 amir Exp $
	 * @link http://pear.php.net/package/Validate
	 * @access public
	 * @param string $data Data to strip comments from
	 * @return string Comment stripped string
	 */",
 "/**
	 * Converts a unicode codepoint to a UTF-8 character
	 *
	 * @static
	 * @access public
	 * @param int $codepoint Unicode codepoint
	 * @return string UTF-8 character
	 */",
 "/**
	 * Re-implementation of PHP 4.2.0\'s is_a()
	 *
	 * @static
	 * @access public
	 * @param object $object The tested object
	 * @param string $class_name The class name
	 * @return bool Returns true if the object is of this class or has this class as one of its parents, false otherwise
	 */",
 "/**
	 * Re-implementation of PHP 5\'s stripos()
	 *
	 * Returns the numeric position of the first occurrence of needle in the
	 * haystack string.
	 *
	 * @static
	 * @access string
	 * @param object $haystack
	 * @param string $needle Note that the needle may be a string of one or more
	 *     characters. If needle is not a string, it is converted to an integer
	 *     and applied as the ordinal value of a character.
	 * @param int $offset The optional offset parameter allows you to specify which
	 *     character in haystack to start searching. The position returned is still
	 *     relative to the beginning of haystack.
	 * @return bool If needle is not found, stripos() will return boolean false.
	 */",
 "/**
	 * Create an instance of the class with the input data
	 *
	 * @access public
	 * @param string $data Input data
	 */",
 "/**
	 * Parse the input data
	 *
	 * @access public
	 * @return string Output data
	 */",
 "/**
	 * Consume the next byte
	 *
	 * @access private
	 * @return mixed The next byte, or false, if there is no more data
	 */",
 "/**
	 * Consume a range of characters
	 *
	 * @access private
	 * @param string $chars Characters to consume
	 * @return mixed A series of characters that match the range, or false
	 */",
 "/**
	 * Unconsume one byte
	 *
	 * @access private
	 */",
 "/**
	 * Decode an entity
	 *
	 * @access private
	 */",
 "/**
 * Decode HTML Entities
 *
 * This implements HTML5 as of revision 967 (2007-06-28)
 *
 * @package SimplePie
 */",
 "/**
	 * Set element/attribute key/value pairs of HTML attributes
	 * containing URLs that need to be resolved relative to the feed
	 *
	 * @access public
	 * @since 1.0
	 * @param array $element_attribute Element/attribute key/value pairs
	 */",
 "/**
 * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shortern a string while preserving HTML tags
 */",
 "/**
	 * If this is set to true, the \"switchView\" context in the
	 * template is shown, with links to the staging and publish site.
	 *
	 * @return boolean
	 */",
 "/**
	 * Overloads the LeftAndMain::ShowView. Allows to pass a page as a parameter, so we are able
	 * to switch view also for archived versions.
	 */",
 "/**
	 * Override {@link LeftAndMain} Link to allow blank URL segment for CMSMain.
	 * 
	 * @return string
	 */",
 "/**
	 * Return the entire site tree as a nested set of ULs
	 */",
 "/**
	 * Use a CMSSiteTreeFilter to only get certain nodes
	 *
	 * @return string
	 */",
 "/**
	 * Returns a list of batch actions
	 */",
 "/**
	 * Returns the SiteTree columns that can be filtered using the the Site Tree Search button as a DataObjectSet
	 */",
 "/**
	 * Return a javascript instanciation of this array
	 */",
 "/**
	 * Populates an array of classes in the CMS
	 * which allows the user to change the page type.
	 *
	 * @return DataObjectSet
	 */",
 "/**
	 * Save the current sites {@link SiteConfig} into the database
	 *
	 * @param array $data 
	 * @param Form $form 
	 * @return FormResponse
	 */",
 "/**
	 * Get a database record to be managed by the CMS
	 */",
 "/**
	 * @return Form
	 */",
 "/**
	 * @uses LeftAndMainDecorator->augmentNewSiteTreeItem()
	 */",
 "/**
	 * Delete the page from live. This means a page in draft mode might still exist.
	 * 
	 * @see delete()
	 */",
 "/**
	 * Actually perform the publication step
	 */",
 "/**
 	 * Reverts a page by publishing it to live.
 	 * Use {@link restorepage()} if you want to restore a page
 	 * which was deleted from draft without publishing.
 	 * 
 	 * @uses SiteTree->doRevertToLive()
	 */",
 "/**
	 * Delete the current page from draft stage.
	 * @see deletefromlive()
	 */",
 "/**
	 * Generate the parameter HTML for SideReports that have params
	 *
	 * @return LiteralField
	 */",
 "/**
	 * Get the content for a side report
	 */",
 "/**
	 * Get the versions of the current page
	 */",
 "/**
	 * Roll a page back to a previous version
	 */",
 "/**
	 * Return a few pieces of information about a change to a page
	 *  - Send the new status message
	 *  - Update the action buttons
	 *  - Update the treenote
	 *  - Send a status message
	 */",
 "/**
	 * Batch Actions Handler
	 */",
 "/**
	 * @return Form
	 */",
 "/**
	 * Returns a list of batch actions
	 */",
 "/**
	 * @return Form
	 */",
 "/**
	 * Helper function to get page count
	 */",
 "/**
	 * Restore a completely deleted page from the SiteTree_versions table.
	 */",
 "/**
	 * Create a new translation from an existing item, switch to this language and reload the tree.
	 */",
 "/**
	 * Provide the permission codes used by LeftAndMain.
	 * Can\'t put it on LeftAndMain since that\'s an abstract base class.
	 */",
 "/**
     * Returns all languages with languages already used appearing first.
     * Called by the SSViewer when rendering the template.
     */",
 "/**
	 * Determine if there are more than one languages in our site tree.
	 * 
	 * @return boolean
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
 * The main \"content\" area of the CMS.
 * This class creates a 2-frame layout - left-tree and right-form - to sit beneath the main
 * admin menu.
 * 
 * @package cms
 * @subpackage content
 * @todo Create some base classes to contain the generic functionality that will be replicated.
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
     *    Constructor. Starts with no patterns.
     *    @param boolean $case    True for case sensitive, false
     *                            for insensitive.
     *    @access public
     */",
 "/**
     *    Adds a pattern with an optional label.
     *    @param string $pattern      Perl style regex, but ( and )
     *                                lose the usual meaning.
     *    @param string $label        Label of regex to be returned
     *                                on a match.
     *    @access public
     */",
 "/**
     *    Attempts to match all patterns at once against
     *    a string.
     *    @param string $subject      String to match against.
     *    @param string $match        First matched portion of
     *                                subject.
     *    @return boolean             True on success.
     *    @access public
     */",
 "/**
     *    Compounds the patterns into a single
     *    regular expression separated with the
     *    \"or\" operator. Caches the regex.
     *    Will automatically escape (, ) and / tokens.
     *    @param array $patterns    List of patterns in order.
     *    @access private
     */",
 "/**
     *    Accessor for perl regex mode flags to use.
     *    @return string       Perl regex flags.
     *    @access private
     */",
 "/**
 *    Compounded regular expression. Any of
 *    the contained patterns could match and
 *    when one does, it\'s label is returned.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Constructor. Starts in named state.
     *    @param string $start        Starting state name.
     *    @access public
     */",
 "/**
     *    Accessor for current state.
     *    @return string       State.
     *    @access public
     */",
 "/**
     *    Adds a state to the stack and sets it
     *    to be the current state.
     *    @param string $state        New state.
     *    @access public
     */",
 "/**
     *    Leaves the current state and reverts
     *    to the previous one.
     *    @return boolean    False if we drop off
     *                       the bottom of the list.
     *    @access public
     */",
 "/**
 *    States for a stack machine.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Sets up the lexer in case insensitive matching
     *    by default.
     *    @param SimpleSaxParser $parser  Handling strategy by
     *                                    reference.
     *    @param string $start            Starting handler.
     *    @param boolean $case            True for case sensitive.
     *    @access public
     */",
 "/**
     *    Adds a token search pattern for a particular
     *    parsing mode. The pattern does not change the
     *    current mode.
     *    @param string $pattern      Perl style regex, but ( and )
     *                                lose the usual meaning.
     *    @param string $mode         Should only apply this
     *                                pattern when dealing with
     *                                this type of input.
     *    @access public
     */",
 "/**
     *    Adds a pattern that will enter a new parsing
     *    mode. Useful for entering parenthesis, strings,
     *    tags, etc.
     *    @param string $pattern      Perl style regex, but ( and )
     *                                lose the usual meaning.
     *    @param string $mode         Should only apply this
     *                                pattern when dealing with
     *                                this type of input.
     *    @param string $new_mode     Change parsing to this new
     *                                nested mode.
     *    @access public
     */",
 "/**
     *    Adds a pattern that will exit the current mode
     *    and re-enter the previous one.
     *    @param string $pattern      Perl style regex, but ( and )
     *                                lose the usual meaning.
     *    @param string $mode         Mode to leave.
     *    @access public
     */",
 "/**
     *    Adds a pattern that has a special mode. Acts as an entry
     *    and exit pattern in one go, effectively calling a special
     *    parser handler for this token only.
     *    @param string $pattern      Perl style regex, but ( and )
     *                                lose the usual meaning.
     *    @param string $mode         Should only apply this
     *                                pattern when dealing with
     *                                this type of input.
     *    @param string $special      Use this mode for this one token.
     *    @access public
     */",
 "/**
     *    Adds a mapping from a mode to another handler.
     *    @param string $mode        Mode to be remapped.
     *    @param string $handler     New target handler.
     *    @access public
     */",
 "/**
     *    Splits the page text into tokens. Will fail
     *    if the handlers report an error or if no
     *    content is consumed. If successful then each
     *    unparsed and parsed token invokes a call to the
     *    held listener.
     *    @param string $raw        Raw HTML text.
     *    @return boolean           True on success, else false.
     *    @access public
     */",
 "/**
     *    Sends the matched token and any leading unmatched
     *    text to the parser changing the lexer to a new
     *    mode if one is listed.
     *    @param string $unmatched    Unmatched leading portion.
     *    @param string $matched      Actual token match.
     *    @param string $mode         Mode after match. A boolean
     *                                false mode causes no change.
     *    @return boolean             False if there was any error
     *                                from the parser.
     *    @access private
     */",
 "/**
     *    Tests to see if the new mode is actually to leave
     *    the current mode and pop an item from the matching
     *    mode stack.
     *    @param string $mode    Mode to test.
     *    @return boolean        True if this is the exit mode.
     *    @access private
     */",
 "/**
     *    Test to see if the mode is one where this mode
     *    is entered for this token only and automatically
     *    leaves immediately afterwoods.
     *    @param string $mode    Mode to test.
     *    @return boolean        True if this is the exit mode.
     *    @access private
     */",
 "/**
     *    Strips the magic underscore marking single token
     *    modes.
     *    @param string $mode    Mode to decode.
     *    @return string         Underlying mode name.
     *    @access private
     */",
 "/**
     *    Calls the parser method named after the current
     *    mode. Empty content will be ignored. The lexer
     *    has a parser handler for each mode in the lexer.
     *    @param string $content        Text parsed.
     *    @param boolean $is_match      Token is recognised rather
     *                                  than unparsed data.
     *    @access private
     */",
 "/**
     *    Tries to match a chunk of text and if successful
     *    removes the recognised chunk and any leading
     *    unparsed data. Empty strings will not be matched.
     *    @param string $raw         The subject to parse. This is the
     *                               content that will be eaten.
     *    @return array/boolean      Three item list of unparsed
     *                               content followed by the
     *                               recognised token and finally the
     *                               action the parser is to take.
     *                               True if no match, false if there
     *                               is a parsing error.
     *    @access private
     */",
 "/**
 *    Accepts text and breaks it into tokens.
 *    Some optimisation to make the sure the
 *    content is only scanned by the PHP regex
 *    parser once. Lexer modes must not start
 *    with leading underscores.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Sets up the lexer with case insensitive matching
     *    and adds the HTML handlers.
     *    @param SimpleSaxParser $parser  Handling strategy by
     *                                    reference.
     *    @access public
     */",
 "/**
     *    List of parsed tags. Others are ignored.
     *    @return array        List of searched for tags.
     *    @access private
     */",
 "/**
     *    The lexer has to skip certain sections such
     *    as server code, client code and styles.
     *    @access private
     */",
 "/**
     *    Pattern matches to start and end a tag.
     *    @param string $tag          Name of tag to scan for.
     *    @access private
     */",
 "/**
     *    Pattern matches to parse the inside of a tag
     *    including the attributes and their quoting.
     *    @access private
     */",
 "/**
     *    Matches attributes that are either single quoted,
     *    double quoted or unquoted.
     *    @access private
     */",
 "/**
 *    Breaks HTML into SAX events.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Sets the listener.
     *    @param SimpleSaxListener $listener    SAX event handler.
     *    @access public
     */",
 "/**
     *    Runs the content through the lexer which
     *    should call back to the acceptors.
     *    @param string $raw      Page text to parse.
     *    @return boolean         False if parse error.
     *    @access public
     */",
 "/**
     *    Sets up the matching lexer. Starts in \'text\' mode.
     *    @param SimpleSaxParser $parser    Event generator, usually $self.
     *    @return SimpleLexer               Lexer suitable for this parser.
     *    @access public
     *    @static
     */",
 "/**
     *    Accepts a token from the tag mode. If the
     *    starting element completes then the element
     *    is dispatched and the current attributes
     *    set back to empty. The element or attribute
     *    name is converted to lower case.
     *    @param string $token     Incoming characters.
     *    @param integer $event    Lexer event type.
     *    @return boolean          False if parse error.
     *    @access public
     */",
 "/**
     *    Accepts a token from the end tag mode.
     *    The element name is converted to lower case.
     *    @param string $token     Incoming characters.
     *    @param integer $event    Lexer event type.
     *    @return boolean          False if parse error.
     *    @access public
     */",
 "/**
     *    Part of the tag data.
     *    @param string $token     Incoming characters.
     *    @param integer $event    Lexer event type.
     *    @return boolean          False if parse error.
     *    @access public
     */",
 "/**
     *    A character entity.
     *    @param string $token    Incoming characters.
     *    @param integer $event   Lexer event type.
     *    @return boolean         False if parse error.
     *    @access public
     */",
 "/**
     *    Character data between tags regarded as
     *    important.
     *    @param string $token     Incoming characters.
     *    @param integer $event    Lexer event type.
     *    @return boolean          False if parse error.
     *    @access public
     */",
 "/**
     *    Incoming data to be ignored.
     *    @param string $token     Incoming characters.
     *    @param integer $event    Lexer event type.
     *    @return boolean          False if parse error.
     *    @access public
     */",
 "/**
     *    Decodes any HTML entities.
     *    @param string $html    Incoming HTML.
     *    @return string         Outgoing plain text.
     *    @access public
     *    @static
     */",
 "/**
     *    Turns HTML into text browser visible text. Images
     *    are converted to their alt text and tags are supressed.
     *    Entities are converted to their visible representation.
     *    @param string $html        HTML to convert.
     *    @return string             Plain text.
     *    @access public
     *    @static
     */",
 "/**
 *    Converts HTML tokens into selected SAX events.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Sets the document to write to.
     *    @access public
     */",
 "/**
     *    Start of element event.
     *    @param string $name        Element name.
     *    @param hash $attributes    Name value pairs.
     *                               Attributes without content
     *                               are marked as true.
     *    @return boolean            False on parse error.
     *    @access public
     */",
 "/**
     *    End of element event.
     *    @param string $name        Element name.
     *    @return boolean            False on parse error.
     *    @access public
     */",
 "/**
     *    Unparsed, but relevant data.
     *    @param string $text        May include unparsed tags.
     *    @return boolean            False on parse error.
     *    @access public
     */",
 "/**
 *    SAX event handler.
 *    @package SimpleTest
 *    @subpackage WebTester
 *    @abstract
 */",
 "/**
     *    Stashes the name for later comparison.
     *    @param string $name     Name attribute to match.
     */",
 "/**
     *    Compares with name attribute of widget.
     *    @param SimpleWidget $widget    Control to compare.
     *    @access public
     */",
 "/**
 *    Used to extract form elements for testing against.
 *    Searches by name attribute.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Stashes the name for later comparison.
     *    @param string $label     Visible text to match.
     */",
 "/**
     *    Comparison. Compares visible text of widget or
     *    related label.
     *    @param SimpleWidget $widget    Control to compare.
     *    @access public
     */",
 "/**
 *    Used to extract form elements for testing against.
 *    Searches by visible label or alt text.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Stashes the name for later comparison.
     *    @param string $id     ID atribute to match.
     */",
 "/**
     *    Comparison. Compares id attribute of widget.
     *    @param SimpleWidget $widget    Control to compare.
     *    @access public
     */",
 "/**
 *    Used to extract form elements for testing against.
 *    Searches dy id attribute.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Stashes the name/label for later comparison.
     *    @param string $label     Visible text to match.
     */",
 "/**
     *    Comparison. Compares visible text of widget or
     *    related label or name.
     *    @param SimpleWidget $widget    Control to compare.
     *    @access public
     */",
 "/**
 *    Used to extract form elements for testing against.
 *    Searches by visible label, name or alt text.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
	 * Create a folder on the filesystem, recursively.
	 * Uses {@link Filesystem::$folder_create_mask} to set filesystem permissions.
	 * Use {@link Folder::findOrMake()} to create a {@link Folder} database
	 * record automatically.
	 * 
	 * @param String $folder Absolute folder path
	 */",
 "/**
	 * Remove a directory and all subdirectories and files.
	 * 
	 * @param String $folder Absolute folder path
	 * @param Boolean $contentsOnly If this is true then the contents of the folder will be removed but not the folder itself
	 */",
 "/**
	 * Cleanup function to reset all the Filename fields.  Visit File/fixfiles to call.
	 */",
 "/**
	 * Return the most recent modification time of anything in the folder.
	 * 
	 * @param $folder The folder, relative to the site root
	 * @param $extensionList An option array of file extensions to limit the search to
	 * @return String Same as filemtime() format.
	 */",
 "/**
	 * Returns true if the given filename is an absolute file reference.
	 * Works on Linux and Windows.
	 * 
	 * @param String $filename Absolute or relative filename, with or without path.
	 * @return Boolean
	 */",
 "/**
	 * This function ensures the file table is correct with the files in the assets folder.
	 * 
	 * If a Folder record ID is given, all of that folder\'s children will be synchronised.
	 * If the given Folder ID isn\'t found, or not specified at all, then everything will
	 * be synchronised from the root folder (singleton Folder).
	 * 
	 * See {@link File->updateFilesystem()} to sync properties of a single database record 
	 * back to the equivalent filesystem record.
	 * 
	 * @param int $folderID Folder ID to sync along with all it\'s children
	 */",
 "/**
 * A collection of static methods for manipulating the filesystem. 
 * 
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
	 * This is the main method to build the master string tables with the original strings.
	 * It will search for existent modules that use the i18n feature, parse the _t() calls
	 * and write the resultant files in the lang folder of each module.
	 * 
	 * @uses DataObject->collectI18nStatics()
	 */",
 "/**
 * @package sapphire
 * @subpackage tasks
 */",
 "/**
     * Sets class wide options, if no option was given, the actual set options will be returned
     * The \'precision\' option of a value is used to truncate or stretch extra digits. -1 means not to touch the extra digits.
     * The \'locale\' option helps when parsing numbers and dates using separators and month names.
     * The date format \'format_type\' option selects between CLDR/ISO date format specifier tokens and PHP\'s date() tokens.
     * The \'fix_date\' option enables or disables heuristics that attempt to correct invalid dates.
     * The \'number_format\' option can be used to specify a default number format string
     * The \'date_format\' option can be used to specify a default date format string, but beware of using getDate(),
     * checkDateFormat() and getTime() after using setOptions() with a \'format\'.  To use these four methods
     * with the default date format for a locale, use array(\'date_format\' => null, \'locale\' => $locale) for their options.
     *
     * @param  array  $options  Array of options, keyed by option name: format_type = \'iso\' | \'php\', fix_date = true | false,
     *                          locale = Zend_Locale | locale string, precision = whole number between -1 and 30
     * @throws Zend_Locale_Exception
     * @return Options array if no option was given
     */",
 "/**
     * Internal function for checking the options array of proper input values
     * See {@link setOptions()} for details.
     *
     * @param  array  $options  Array of options, keyed by option name: format_type = \'iso\' | \'php\', fix_date = true | false,
     *                          locale = Zend_Locale | locale string, precision = whole number between -1 and 30
     * @throws Zend_Locale_Exception
     * @return Options array if no option was given
     */",
 "/**
     * Changes the numbers/digits within a given string from one script to another
     * \'Decimal\' representated the stardard numbers 0-9, if a script does not exist
     * an exception will be thrown.
     *
     * Examples for conversion from Arabic to Latin numerals:
     *   convertNumerals(\'?????? Tests\', \'Arab\'); -> returns \'100 Tests\'
     * Example for conversion from Latin to Arabic numerals:
     *   convertNumerals(\'100 Tests\', \'Latn\', \'Arab\'); -> returns \'?????? Tests\'
     *
     * @param  string  $input  String to convert
     * @param  string  $from   Script to parse, see {@link Zend_Locale::getScriptList()} for details.
     * @param  string  $to     OPTIONAL Script to convert to
     * @return string  Returns the converted input
     * @throws Zend_Locale_Exception
     */",
 "/**


*








*




*/",
 "/**





*




*/",
 "/**

*



*/",
 "/**

*



*/",
 "/**


*



*/",
 "/**


*



*/",
 "/**


*







*



*/",
 "/**

*



*/",
 "/**

*



*/",
 "/**




*


*


*/",
 "/**

*



*/",
 "/**

*


*

*/",
 "/**

*



*/",
 "/**







*



*/",
 "/**



*



*/",
 "/**

*


*/",
 "/**






*



*/",
 "/**





*/",
 "/**
	 * Returns the date in the raw SQL-format, e.g. ???2006-01-18 16:32:04???
	 */",
 "/**
	 * Returns either the current system date as determined
	 * by date(), or a mocked date through {@link set_mock_now()}.
	 * 
	 * @return SS_Datetime
	 */",
 "/**
	 * Mock the system date temporarily, which is useful for time-based unit testing.
	 * Use {@link clear_mock_now()} to revert to the current system date.
	 * Caution: This sets a fixed date that doesn\'t increment with time.
	 * 
	 * @param SS_Datetime|string $datetime Either in object format, or as a SS_Datetime compatible string.
	 */",
 "/**
	 * Clear any mocked date, which causes
	 * {@link Now()} to return the current system date.
	 */",
 "/**
 * Represents a date-time field.
 * The field currently supports New Zealand date format (DD/MM/YYYY),
 * or an ISO 8601 formatted date and time (Y-m-d H:i:s).
 * Alternatively you can set a timestamp that is evaluated through
 * PHP\'s built-in date() and strtotime() function according to your system locale.
 * 
 * For all computations involving the current date and time,
 * please use {@link SS_Datetime::now()} instead of PHP\'s built-in date() and time()
 * methods. This ensures that all time-based computations are testable with mock dates
 * through {@link SS_Datetime::set_mock_now()}.
 * 
 * Example definition via {@link DataObject::$db}:
 * <code>
 * static $db = array(
 *  \"Expires\" => \"SS_Datetime\",
 * );
 * </code>
 * 
 * @todo Add localization support, see http://open.silverstripe.com/ticket/2931
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
     * Returns the location from the selected city
     *
     * @param  string $city    City to get location for
     * @param  string $horizon Horizon to use :
     *                         default: effective
     *                         others are civil, nautic, astronomic
     * @return array
     * @throws Zend_Date_Exception When city is unknown
     */",
 "/**
     * Return a list with all known cities
     *
     * @return array
     */",
 "/**
 * Additional data for sunset/sunrise calculations
 *
 * Holds the geographical data for all capital cities and many others worldwide
 * Original data from http://www.fallingrain.com/world/
 *
 * @category   Zend
 * @package    Zend_Date
 * @subpackage Zend_Date_Cities
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
     * Constructor
     *
     * @param  array $options Associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Set the frontend directives
     *
     * @param  array $directives Assoc of directives
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Set an option
     *
     * @param  string $name
     * @param  mixed  $value
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Get the life time
     *
     * if $specificLifetime is not false, the given specific life time is used
     * else, the global lifetime is used
     *
     * @param  int $specificLifetime
     * @return int Cache life time
     */",
 "/**
     * Return true if the automatic cleaning is available for the backend
     *
     * DEPRECATED : use getCapabilities() instead
     *
     * @deprecated
     * @return boolean
     */",
 "/**
     * Return a system-wide tmp directory
     *
     * @return string System-wide tmp directory
     */",
 "/**
     * Make sure if we enable logging that the Zend_Log class
     * is available.
     * Create a default log object if none is set.
     *
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Log a message at the WARN (4) priority.
     *
     * @param  string $message
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Returns the {@link Session} object for this test
	 */",
 "/**
	 * Submit a get request
	 * @uses Director::test()
	 */",
 "/**
	 * Submit a post request
	 * @uses Director::test()
	 */",
 "/**
	 * Submit the form with the given HTML ID, filling it out with the given data.
	 * Acts on the most recent response
	 */",
 "/**
	 * Return the most recent content
	 */",
 "/**
	 * Find an attribute in a SimpleXMLElement object by name.
	 * @param SimpleXMLElement object
	 * @param string $attribute Name of attribute to find
	 * @return SimpleXMLElement object of the attribute
	 */",
 "/**
	 * Return a CSSContentParser for the most recent content.
	 */",
 "/**
	 * Assert that the most recently queried page contains a number of content tags specified by a CSS selector.
	 * The given CSS selector will be applied to the HTML of the most recent page.  The content of every matching tag
	 * will be examined. The assertion fails if one of the expectedMatches fails to appear.
	 *
	 * Note: &nbsp; characters are stripped from the content; make sure that your assertions take this into account.
	 * 
	 * @param string $selector A basic CSS selector, e.g. \'li.jobs h3\'
	 * @param array|string $expectedMatches The content of at least one of the matched tags
	 * @throws PHPUnit_Framework_AssertionFailedError
	 * @return boolean
	 */",
 "/**
	 * Assert that the most recently queried page contains a number of content tags specified by a CSS selector.
	 * The given CSS selector will be applied to the HTML of the most recent page.  The full HTML of every matching tag
	 * will be examined. The assertion fails if one of the expectedMatches fails to appear.
	 *
	 * Note: &nbsp; characters are stripped from the content; make sure that your assertions take this into account.
	 * 
	 * @param string $selector A basic CSS selector, e.g. \'li.jobs h3\'
	 * @param array|string $expectedMatches The content of *all* matching tags as an array
	 * @throws PHPUnit_Framework_AssertionFailedError
	 * @return boolean
	 */",
 "/**
	 * Assert that the most recently queried page contains a number of content tags specified by a CSS selector.
	 * The given CSS selector will be applied to the HTML of the most recent page.  The content of every matching tag
	 * will be examined. The assertion fails if one of the expectedMatches fails to appear.
	 *
	 * Note: &nbsp; characters are stripped from the content; make sure that your assertions take this into account.
	 *
	 * @param string $selector A basic CSS selector, e.g. \'li.jobs h3\'
	 * @param array|string $expectedMatches The content of at least one of the matched tags
	 * @throws PHPUnit_Framework_AssertionFailedError
	 * @return boolean
	 */",
 "/**
	 * Assert that the most recently queried page contains a number of content tags specified by a CSS selector.
	 * The given CSS selector will be applied to the HTML of the most recent page.  The full HTML of every matching tag
	 * will be examined. The assertion fails if one of the expectedMatches fails to appear.
	 *
	 * Note: &nbsp; characters are stripped from the content; make sure that your assertions take this into account.
	 * 
	 * @param string $selector A basic CSS selector, e.g. \'li.jobs h3\'
	 * @param array|string $expectedMatches The content of *all* matched tags as an array
	 * @throws PHPUnit_Framework_AssertionFailedError
	 * @return boolean
	 */",
 "/**
	 * Log in as the given member
	 * @param $member The ID, fixture codename, or Member object of the member that you want to log in
	 */",
 "/**
	 * Use the draft (stage) site for testing.
	 * This is helpful if you\'re not testing publication functionality and don\'t want \"stage management\" cluttering your test.
	 *
	 * @param bool toggle the use of the draft site
	 */",
 "/**
	 * Return a static variable from this class.
	 * Gets around PHP\'s lack of late static binding.
	 */",
 "/**
 * Sapphire-specific testing object designed to support functional testing of your web app.  It simulates get/post
 * requests, form submission, and can validate resulting HTML, looking up content by CSS selector.
 * 
 * The example below shows how it works.
 * 
 * <code>
 *   function testMyForm() {
 *     // Visit a URL
 *     $this->get(\"your/url\");
 * 
 *     // Submit a form on the page that you get in response
 *     $this->submitForm(\"MyForm_ID\",  array(\"Email\" => \"invalid email ^&*&^\"));
 *
 *     // Validate the content that is returned
 *     $this->assertExactMatchBySelector(\"#MyForm_ID p.error\", array(\"That email address is invalid.\"));
 *  }	
 * </code>
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
	 * Returns a number of SimpleXML elements that match the given CSS selector.
	 * Currently the selector engine only supports querying by tag, id, and class.
	 * See {@link getByXpath()} for a more direct selector syntax.
	 * 
	 * @param String $selector
	 * @return SimpleXMLElement
	 */",
 "/**
	 * Allows querying the content through XPATH selectors.
	 * 
	 * @param String $xpath SimpleXML compatible XPATH statement
	 * @return SimpleXMLElement|false
	 */",
 "/**
	 * Converts a CSS selector into an equivalent xpath expression.
	 * Currently the selector engine only supports querying by tag, id, and class.
	 * 
	 * @param String $selector See {@link getBySelector()}
	 * @return String XPath expression
	 */",
 "/**
 * CSSContentParser enables parsing & assertion running of HTML content via CSS selectors.
 * 
 * It works by converting the content to XHTML using tidy, rewriting the CSS selectors as XPath queries, and executing
 * those using SimpeXML.
 * 
 * It was built to facilitate testing using PHPUnit and contains a number of assert methods that will throw PHPUnit
 * assertion exception when applicable.
 * 
 * Tries to use the PHP Tidy extension (http://php.net/tidy),
 * and falls back to the \"tidy\" CLI tool. If none of those exists,
 * the string is parsed directly without sanitization.
 * 
 * @package sapphire
 * @subpackage core
 */",
 "/**
	 * @param string $name Identifier
	 * @param string $title (Optional) Natural language title of the tabset
	 * @param Tab|TabSet $unknown All further parameters are inserted as children into the TabSet
	 */",
 "/**
	 * Returns a tab-strip and the associated tabs.
	 * The HTML is a standardised format, containing a &lt;ul;
	 */",
 "/**
	 * Return a dataobject set of all this classes tabs
	 */",
 "/**
	 * Returns the named tab
	 */",
 "/**
	 * Add a new child field to the end of the set.
	 */",
 "/**
	 * Inserts a field before a particular field in a FieldSet.
	 *
	 * @param FormField $item The form field to insert
	 * @param string $name Name of the field to insert before
	 */",
 "/**
 * Defines a set of tabs in a form.
 * The tabs are build with our standard tabstrip javascript library.  
 * By default, the HTML is generated using FieldHolder.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * new TabSet(
 * 	$name = \"TheTabSetName\",
 * 	new Tab(
 * 		$title=\'Tab one\',
 * 		new HeaderField(\"A header\"),
 * 		new LiteralField(\"Lipsum\",\"Lorem ipsum dolor sit amet enim.\")
 * 	),
 * 	new Tab(
 * 		$title=\'Tab two\',
 * 		new HeaderField(\"A second header\"),
 * 		new LiteralField(\"Lipsum\",\"Ipsum dolor sit amet enim.\")
 * 	)
 * )
 * </code>
 * 
 * @package forms
 * @subpackage fields-structural
 */",
 "/**
	 * Return debug_backtrace() results with functions filtered
	 * specific to the debugging system, and not the trace.
	 * 
	 * @param null|array $ignoredFunctions If an array, filter these functions out of the trace
	 * @return array
	 */",
 "/**
	 * Filter a backtrace so that it doesn\'t show the calls to the
	 * debugging system, which is useless information.
	 * 
	 * @param array $bt Backtrace to filter
	 * @param null|array $ignoredFunctions List of extra functions to filter out
	 * @return array
	 */",
 "/**
	 * Render or return a backtrace from the given scope.
	 *
	 * @param unknown_type $returnVal
	 * @param unknown_type $ignoreAjax
	 * @return unknown
	 */",
 "/**
	 * Return the full function name.  If showArgs is set to true, a string representation of the arguments will be shown
	 */",
 "/**
	 * Render a backtrace array into an appropriate plain-text or HTML string.
	 * 
	 * @param string $bt The trace array, as returned by debug_backtrace() or Exception::getTrace()
	 * @param boolean $plainText Set to false for HTML output, or true for plain-text output
	 * @param array List of functions that should be ignored. If not set, a default is provided
	 * @return string The rendered backtrace
	 */",
 "/**
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Log a password change from the given member.
	 * Call MemberPassword::log($this) from within Member whenever the password is changed.
	 */",
 "/**
	 * Check if the given password is the same as the one stored in this record.
	 * See {@link Member->checkPassword()}.
	 * 
	 * @param String $password Cleartext password
	 * @return Boolean
	 */",
 "/**
 * Keep track of users\' previous passwords, so that we can check that new passwords aren\'t changed back to old ones.
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * @package    Zend_Cache
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Example usage:
	 * <code>
	 * class MyTestClass implements i18nEntityProvider {
	 * function provideI18nEntities() {
	 * 	$entities = array();
	 * 	foreach($this->stat(\'my_static_array) as $key => $value) {
	 * 		$entities[\"MyTestClass.my_static_array_{$key}\"] = array(
	 * 			$value,
	 * 			PR_MEDIUM,
	 * 			\'My context description\'
	 * 		);
	 * 	}
	 * 	return $entities;
	 * }
	 * 
	 * static function my_static_array() {
	 * 	$t_my_static_array = array();
	 * 	foreach(self::$my_static_array as $k => $v) {
	 * 		$t_my_static_array[$k] = _t(\"MyTestClass.my_static_array_{$key}\", $v);
	 * 	}
	 * 	return $t_my_static_array;
	 * }
	 * }
	 * </code>
	 * 
	 * Example usage in {@link DataObject->provideI18nEntities()}.
	 * 
	 * You can ask textcollector to add the provided entity to a different module
	 * than the class is contained in by adding a 4th argument to the array:
	 * <code>
	 * class MyTestClass implements i18nEntityProvider {
	 * function provideI18nEntities() {
	 * 	$entities = array();
	 * 		$entities[\"MyOtherModuleClass.MYENTITY\"] = array(
	 * 			$value,
	 * 			PR_MEDIUM,
	 * 			\'My context description\',
	 * 			\'myothermodule\'
	 * 		);
	 * 	}
	 * 	return $entities;
	 * }
	 * </code>
	 * 
	 * @return array All entites in an associative array, with
	 * entity name as the key, and a numerical array of pseudo-arguments
	 * for _t() as a value.
	 */",
 "/**
 * Dynamically provide translatable entites for the {@link i18n} logic.
 * This is particularly handy for natural language strings in static variables
 * of a class definition, as the _t() method can only be used in a runtime/instance
 * context. The provideI18nEntities() method enables you to define your own entities
 * with your custom naming, mostly involving either the variable name or the array
 * key. With this in place, you can use a getter method to trigger translation
 * of your values.
 * For any statics containing natural language, never use the static directly -
 * always wrap it in a getter.
 * 
 * @package sapphire
 * @subpackage i18n
 * @uses i18nTextCollector->collectFromEntityProviders()
 */",
 "/**
     * Store data
     *
     * @var mixed  $data        Object to store
     * @var string $id          Cache id
     * @var int    $timeToLive  Time to live in seconds
     * @throws Zend_Cache_Exception
     */",
 "/**
     * Fetch data
     *
     * @var mixed  $data        Object to store
     * @var string $id          Cache id
     * @var int    $timeToLive  Time to live in seconds
     * @throws Zend_Cache_Exception
     */",
 "/**
     * Unset data
     *
     * @var string $id          Cache id
     */",
 "/**
     * Clear cache
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string  $id                     cache id
     * @param  boolean $doNotTestCacheValidity if set to true, the cache validity won\'t be tested
     * @return string cached datas (or false)
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param  string $id cache id
     * @return mixed false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     * @throws Zend_Cache_Exception
     */",
 "/**
     * Compute & return the expire time
     *
     * @return int expire time (unix timestamp)
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param string $data datas to cache
     * @param string $id cache id
     * @param array $tags array of strings, the cache record will be tagged by each string entry
     * @param int $specificLifetime if != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @return boolean true if no problem
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id cache id
     * @return boolean true if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * \'all\' (default)  => remove all cache entries ($tags is not used)
     * \'old\'            => unsupported
     * \'matchingTag\'    => unsupported
     * \'notMatchingTag\' => unsupported
     * \'matchingAnyTag\' => unsupported
     *
     * @param  string $mode clean mode
     * @param  array  $tags array of tags
     * @throws Zend_Cache_Exception
     * @return boolean true if no problem
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Enable combining of css/javascript files.
	 * @param boolean $enable
	 */",
 "/**
	 * Checks whether combining of css/javascript files is enabled.
	 * @return boolean
	 */",
 "/**
	 * Set the relative folder e.g. \"assets\" for where to store combined files
	 * @param string $folder Path to folder
	 */",
 "/**
	 * Set whether we want to suffix requirements with the time / 
	 * location on to the requirements
	 * 
	 * @param bool
	 */",
 "/**
	 * Return whether we want to suffix requirements
	 * 
	 * @return bool
	 */",
 "/**
	 * Setter method for changing the Requirements backend
	 *
	 * @param Requirements $backend
	 */",
 "/**
	 * Register the given javascript file as required.
	 * 
	 * See {@link Requirements_Backend::javascript()} for more info
	 * 
	 */",
 "/**
	 * Add the javascript code to the header of the page
	 * 
	 * See {@link Requirements_Backend::customScript()} for more info
	 * @param script The script content
	 * @param uniquenessID Use this to ensure that pieces of code only get added once.
	 */",
 "/**
	 * Include custom CSS styling to the header of the page.
	 * 
	 * See {@link Requirements_Backend::customCSS()}
	 * 
	 * @param string $script CSS selectors as a string (without <style> tag enclosing selectors).
	 * @param int $uniquenessID Group CSS by a unique ID as to avoid duplicate custom CSS in header
	 */",
 "/**
	 * Add the following custom code to the <head> section of the page.
	 * See {@link Requirements_Backend::insertHeadTags()}
	 * 
	 * @param string $html
	 * @param string $uniquenessID
	 */",
 "/**
	 * Load the given javascript template with the page.
	 * See {@link Requirements_Backend::javascriptTemplate()}
	 * 
	 * @param file The template file to load.
	 * @param vars The array of variables to load.  These variables are loaded via string search & replace.
	 */",
 "/**
	 * Register the given stylesheet file as required.
	 * See {@link Requirements_Backend::css()}
	 * 
	 * @param $file String Filenames should be relative to the base, eg, \'sapphire/javascript/tree/tree.css\'
	 * @param $media String Comma-separated list of media-types (e.g. \"screen,projector\") 
	 * @see http://www.w3.org/TR/REC-CSS2/media.html
	 */",
 "/**
	 * Register the given \"themeable stylesheet\" as required. See {@link Requirements_Backend::themedCSS()}
	 * 
	 * @param $name String The identifier of the file.  For example, css/MyFile.css would have the identifier \"MyFile\"
	 * @param $media String Comma-separated list of media-types (e.g. \"screen,projector\") 
	 */",
 "/**
	 * Clear either a single or all requirements.
	 * Caution: Clearing single rules works only with customCSS and customScript if you specified a {@uniquenessID}. 
	 * 
	 * See {@link Requirements_Backend::clear()}
	 * 
	 * @param $file String
	 */",
 "/**
	 * Blocks inclusion of a specific file
	 * See {@link Requirements_Backend::block()}
	 *
	 * @param unknown_type $fileOrID
	 */",
 "/**
	 * Removes an item from the blocking-list.
	 * See {@link Requirements_Backend::unblock()}
	 * 
	 * @param string $fileOrID
	 */",
 "/**
	 * Removes all items from the blocking-list.
	 * See {@link Requirements_Backend::unblock_all()}
	 */",
 "/**
	 * Restore requirements cleared by call to Requirements::clear
	 * See {@link Requirements_Backend::restore()}
	 */",
 "/**
	 * Update the given HTML content with the appropriate include tags for the registered
	 * requirements. 
	 * See {@link Requirements_Backend::includeInHTML()} for more information.
	 * 
	 * @param string $templateFilePath Absolute path for the *.ss template file
	 * @param string $content HTML content that has already been parsed from the $templateFilePath through {@link SSViewer}.
	 * @return string HTML content thats augumented with the requirements before the closing <head> tag.
	 */",
 "/**
	 * Add i18n files from the given javascript directory.
	 * @param $langDir The javascript lang directory, relative to the site root, e.g., \'sapphire/javascript/lang\'
	 * 
	 * See {@link Requirements_Backend::add_i18n_javascript()} for more information.
	 */",
 "/**
	 * Concatenate several css or javascript files into a single dynamically generated file.
	 * See {@link Requirements_Backend::combine_files()} for more info.
	 *
	 * @param string $combinedFileName
	 * @param array $files
	 */",
 "/**
	 * Returns all combined files.
	 * See {@link Requirements_Backend::get_combine_files()}
	 * 
	 * @return array
	 */",
 "/**
	 * Deletes all dynamically generated combined files from the filesystem. 
	 * See {@link Requirements_Backend::delete_combine_files()}
	 * 
	 * @param string $combinedFileName If left blank, all combined files are deleted.
	 */",
 "/**
	 * Re-sets the combined files definition. See {@link Requirements_Backend::clear_combined_files()}
	 */",
 "/**
	 * See {@link combine_files()}.
 	 */",
 "/**
	 * Returns all custom scripts
	 * See {@link Requirements_Backend::get_custom_scripts()}
	 *
	 * @return array
	 */",
 "/**
	 * Set whether you want to write the JS to the body of the page or 
	 * in the head section 
	 * 
	 * @see Requirements_Backend::set_write_js_to_body()
	 * @param boolean
	 */",
 "/**
 * Requirements tracker, for javascript and css.
 * @todo Document the requirements tracker, and discuss it with the others.
 * 
 * @package sapphire
 * @subpackage view
 */",
 "/**
	 * @param String $folder
	 */",
 "/**
	 * @return String Folder relative to the webroot
	 */",
 "/**
	 * Set whether we want to suffix requirements with the time / 
	 * location on to the requirements
	 * 
	 * @param bool
	 */",
 "/**
	 * Return whether we want to suffix requirements
	 * 
	 * @return bool
	 */",
 "/**
	 * Set whether you want the files written to the head or the body. It
	 * writes to the body by default which can break some scripts
	 *
	 * @param boolean
	 */",
 "/**
	 * Register the given javascript file as required.
	 * Filenames should be relative to the base, eg, \'sapphire/javascript/loader.js\'
	 */",
 "/**
	 * Returns an array of all included javascript
	 *
	 * @return array
	 */",
 "/**
	 * Add the javascript code to the header of the page
	 * @todo Make Requirements automatically put this into a separate file :-)
	 * @param script The script content
	 * @param uniquenessID Use this to ensure that pieces of code only get added once.
	 */",
 "/**
	 * Include custom CSS styling to the header of the page.
	 *
	 * @param string $script CSS selectors as a string (without <style> tag enclosing selectors).
	 * @param int $uniquenessID Group CSS by a unique ID as to avoid duplicate custom CSS in header
	 */",
 "/**
	 * Add the following custom code to the <head> section of the page.
	 *
	 * @param string $html
	 * @param string $uniquenessID
	 */",
 "/**
	 * Load the given javascript template with the page.
	 * @param file The template file to load.
	 * @param vars The array of variables to load.  These variables are loaded via string search & replace.
	 */",
 "/**
	 * Register the given stylesheet file as required.
	 * 
	 * @param $file String Filenames should be relative to the base, eg, \'sapphire/javascript/tree/tree.css\'
	 * @param $media String Comma-separated list of media-types (e.g. \"screen,projector\") 
	 * @see http://www.w3.org/TR/REC-CSS2/media.html
	 */",
 "/**
	 * Needed to actively prevent the inclusion of a file,
	 * e.g. when using your own prototype.js.
	 * Blocking should only be used as an exception, because
	 * it is hard to trace back. You can just block items with an
	 * ID, so make sure you add an unique identifier to customCSS() and customScript().
	 * 
	 * @param string $fileOrID
	 */",
 "/**
	 * Clear either a single or all requirements.
	 * Caution: Clearing single rules works only with customCSS and customScript if you specified a {@uniquenessID}. 
	 * 
	 * @param $file String
	 */",
 "/**
	 * Removes an item from the blocking-list.
	 * CAUTION: Does not \"re-add\" any previously blocked elements.
	 * @param string $fileOrID
	 */",
 "/**
	 * Removes all items from the blocking-list.
	 */",
 "/**
	 * Restore requirements cleared by call to Requirements::clear
	 */",
 "/**
	 * Update the given HTML content with the appropriate include tags for the registered
	 * requirements. Needs to receive a valid HTML/XHTML template in the $content parameter,
	 * including a <head> tag. The requirements will insert before the closing <head> tag automatically.
	 *
	 * @todo Calculate $prefix properly
	 * 
	 * @param string $templateFilePath Absolute path for the *.ss template file
	 * @param string $content HTML content that has already been parsed from the $templateFilePath through {@link SSViewer}.
	 * @return string HTML content thats augumented with the requirements before the closing <head> tag.
	 */",
 "/**
	 * Attach requirements inclusion to X-Include-JS and X-Include-CSS headers on the HTTP response
	 */",
 "/**
	 * Add i18n files from the given javascript directory.  Sapphire expects that the given directory
	 * will contain a number of java script files named by language: en_US.js, de_DE.js, etc.
	 * @param $langDir The javascript lang directory, relative to the site root, e.g., \'sapphire/javascript/lang\'
	 */",
 "/**
	 * Finds the path for specified file.
	 *
	 * @param string $fileOrUrl
	 * @return string|boolean 
	 */",
 "/**
	 * Concatenate several css or javascript files into a single dynamically generated
	 * file (stored in {@link Director::baseFolder()}). This increases performance
	 * by fewer HTTP requests.
	 * 
	 * The combined file is regenerated
	 * based on every file modification time. Optionally a rebuild can be triggered
	 * by appending ?flush=1 to the URL.
	 * If all files to be combined are javascript, we use the external JSMin library
	 * to minify the javascript. This can be controlled by {@link $combine_js_with_jsmin}.
	 * 
	 * All combined files will have a comment on the start of each concatenated file
	 * denoting their original position. For easier debugging, we recommend to only
	 * minify javascript if not in development mode ({@link Director::isDev()}).
	 * 
	 * CAUTION: You\'re responsible for ensuring that the load order for combined files
	 * is retained - otherwise combining javascript files can lead to functional errors
	 * in the javascript logic, and combining css can lead to wrong styling inheritance.
	 * Depending on the javascript logic, you also have to ensure that files are not included
	 * in more than one combine_files() call.
	 * Best practice is to include every javascript file in exactly *one* combine_files()
	 * directive to avoid the issues mentioned above - this is enforced by this function.
	 * 
	 * CAUTION: Combining CSS Files discards any \"media\" information.
	 *
	 * Example for combined JavaScript:
	 * <code>
	 * Requirements::combine_files(
	 *  \'foobar.js\',
	 *  array(
	 * 		\'mysite/javascript/foo.js\',
	 * 		\'mysite/javascript/bar.js\',
	 * 	)
	 * );
	 * </code>
	 *
	 * Example for combined CSS:
	 * <code>
	 * Requirements::combine_files(
	 *  \'foobar.css\',
	 * 	array(
	 * 		\'mysite/javascript/foo.css\',
	 * 		\'mysite/javascript/bar.css\',
	 * 	)
	 * );
	 * </code>
	 *
	 * @see http://code.google.com/p/jsmin-php/
	 * 
	 * @todo Should we enforce unique inclusion of files, or leave it to the developer? Can auto-detection cause breaks?
	 * 
	 * @param string $combinedFileName Filename of the combined file (will be stored in {@link Director::baseFolder()} by default)
	 * @param array $files Array of filenames relative to the webroot
	 */",
 "/**
	 * Returns all combined files.
	 * @return array
	 */",
 "/**
	 * Deletes all dynamically generated combined files from the filesystem. 
	 * 
	 * @param string $combinedFileName If left blank, all combined files are deleted.
	 */",
 "/**
	 * See {@link combine_files()}
	 *
	 */",
 "/**
	 * Register the given \"themeable stylesheet\" as required.
	 * Themeable stylesheets have globally unique names, just like templates and PHP files.
	 * Because of this, they can be replaced by similarly named CSS files in the theme directory.
	 * 
	 * @param $name String The identifier of the file.  For example, css/MyFile.css would have the identifier \"MyFile\"
	 * @param $media String Comma-separated list of media-types (e.g. \"screen,projector\") 
	 */",
 "/**
 * @package sapphire
 * @subpackage view
 */",
 "/**
	 * Return a sequential set of all fields that have data.  This excludes wrapper composite fields
	 * as well as heading / help text fields.
	 */",
 "/**
	 * Add an extra field to a tab within this fieldset.
	 * This is most commonly used when overloading getCMSFields()
	 * 
	 * @param string $tabName The name of the tab or tabset.  Subtabs can be referred to as TabSet.Tab or TabSet.Tab.Subtab.
	 * This function will create any missing tabs.
	 * @param FormField $field The {@link FormField} object to add to the end of that tab.
	 * @param string $insertBefore The name of the field to insert before.  Optional.
	 */",
 "/**
	 * Add a number of extra fields to a tab within this fieldset.
	 * This is most commonly used when overloading getCMSFields()
	 * 
	 * @param string $tabName The name of the tab or tabset.  Subtabs can be referred to as TabSet.Tab or TabSet.Tab.Subtab.
	 * This function will create any missing tabs.
	 * @param array $fields An array of {@link FormField} objects.
	 */",
 "/**
	 * Remove the given field from the given tab in the field.
	 * 
	 * @param string $tabName The name of the tab
	 * @param string $fieldName The name of the field
	 */",
 "/**
	 * Removes a number of fields from a Tab/TabSet within this FieldSet.
	 *
	 * @param string $tabName The name of the Tab or TabSet field
	 * @param array $fields A list of fields, e.g. array(\'Name\', \'Email\')
	 */",
 "/**
	 * Remove a field from this FieldSet by Name.
	 * The field could also be inside a CompositeField.
	 * 
	 * @param string $fieldName The name of the field or tab
	 * @param boolean $dataFieldOnly If this is true, then a field will only
	 * be removed if it\'s a data field.  Dataless fields, such as tabs, will
	 * be left as-is.
	 */",
 "/**
	 * Replace a single field with another.  Ignores dataless fields such as Tabs and TabSets
	 *
	 * @param string $fieldName The name of the field to replace
	 * @param FormField $newField The field object to replace with
	 * @return boolean TRUE field was successfully replaced
	 * 					 FALSE field wasn\'t found, nothing changed
	 */",
 "/**
	 * Rename the title of a particular field name in this set.
	 *
	 * @param string $fieldName Name of field to rename title of
	 * @param string $newFieldTitle New title of field
	 * @return boolean
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Returns the specified tab object, creating it if necessary.
	 * 
	 * @todo Support recursive creation of TabSets
	 * 
	 * @param string $tabName The tab to return, in the form \"Tab.Subtab.Subsubtab\".
	 *   Caution: Does not recursively create TabSet instances, you need to make sure everything
	 *   up until the last tab in the chain exists.
	 * @param string $title Natural language title of the tab. If {@link $tabName} is passed in dot notation,
	 *   the title parameter will only apply to the innermost referenced tab.
	 *   The title is only changed if the tab doesn\'t exist already.
	 * @return Tab The found or newly created Tab instance
	 */",
 "/**
	 * Returns a named field.
	 * You can use dot syntax to get fields from child composite fields
	 * 
	 * @todo Implement similiarly to dataFieldByName() to support nested sets - or merge with dataFields()
	 */",
 "/**
	 * Returns a named field in a sequential set.
	 * Use this if you\'re using nested FormFields.
	 * 
	 * @param string $name The name of the field to return
	 * @return FormField instance
	 */",
 "/**
	 * Inserts a field before a particular field in a FieldSet.
	 *
	 * @param FormField $item The form field to insert
	 * @param string $name Name of the field to insert before
	 */",
 "/**
	 * Inserts a field after a particular field in a FieldSet.
	 *
	 * @param FormField $item The form field to insert
	 * @param string $name Name of the field to insert after
	 */",
 "/**
	 * Push a single field into this FieldSet instance.
	 *
	 * @param FormField $item The FormField to add
	 * @param string $key An option array key (field name)
	 */",
 "/**
	 * Handler method called before the FieldSet is going to be manipulated.
	 */",
 "/**
	 * Set the Form instance for this FieldSet.
	 *
	 * @param Form $form The form to set this FieldSet to
	 */",
 "/**
	 * Load the given data into this form.
	 * 
	 * @param data An map of data to load into the FieldSet
	 */",
 "/**
	 * Return all <input type=\"hidden\"> fields
	 * in a form - including fields nested in {@link CompositeFields}.
	 * Useful when doing custom field layouts.
	 * 
	 * @return FieldSet
	 */",
 "/**
	 * Transform this FieldSet with a given tranform method,
	 * e.g. $this->transform(new ReadonlyTransformation())
	 * 
	 * @return FieldSet
	 */",
 "/**
	 * Returns the root field set that this belongs to
	 */",
 "/**
	 * Transforms this FieldSet instance to readonly.
	 *
	 * @return FieldSet
	 */",
 "/**
	 * Transform the named field into a readonly feld.
	 * 
	 * @param string|FormField
	 */",
 "/**
	 * Change the order of fields in this FieldSet by specifying an ordered list of field names.
	 * This works well in conjunction with SilverStripe\'s scaffolding functions: take the scaffold, and
	 * shuffle the fields around to the order that you want.
	 * 
	 * Please note that any tabs or other dataless fields will be clobbered by this operation.
	 *
	 * @param array $fieldNames Field names can be given as an array, or just as a list of arguments.
	 */",
 "/**
	 * Find the numerical position of a field within
	 * the children collection. Doesn\'t work recursively.
	 * 
	 * @param string|FormField
	 * @return Position in children collection (first position starts with 0). Returns FALSE if the field can\'t be found.
	 */",
 "/**
 * DataObjectSet designed for form fields.
 * It extends the DataObjectSet with the ability to get a sequential set of fields.
 * @package forms
 * @subpackage fields-structural
 */",
 "/**
 * A fieldset designed to store a list of hidden fields.  When inserted into a template, only the
 * input tags will be included
 * 
 * @package forms
 * @subpackage fields-structural
 */",
 "/**
 * Migrates the old Translatable datamodel introduced in SilverStripe 2.1 to the new schema
 * introduced in SilverStripe 2.3.2.
 * Just works for {@link SiteTree} records and subclasses. If you have used the Translatable
 * extension on other {@link DataObject} subclasses before, this script won\'t migrate them automatically.
 * 
 * <h2>Limitations</h2>
 * 
 * - Information from the {@link Versioned} extension (e.g. in \"SiteTree_versions\" table)
 *   will be discarded for translated records.
 * - Custom translatable fields on your own {@link Page} class or subclasses thereof won\'t
 *   be migrated into the translation.
 * - 2.1-style subtags of a language (e.g. \"en\") will be automatically disambiguated to their full
 *   locale value (e.g. \"en_US\"), by the lookup defined in {@link i18n::get_locale_from_lang()}.
 * - Doesn\'t detect published translations when the script is run twice on the same data set
 * 
 * <h2>Usage</h2>
 * 
 * PLEASE BACK UP YOUR DATABASE BEFORE RUNNING THIS SCRIPT.
 * 
 * Warning: Please run dev/build on your 2.2 database to update the schema before running this task.
 * The dev/build command will rename tables like \"SiteTree_lang\" to \"_obsolete_SiteTree_lang\".
 *
 * <h3>Commandline</h3>
 * Requires \"sake\" tool (see http://doc.silverstripe.com/?id=sake)
 * <example>
 * sake dev/tasks/MigrateTranslatableTask
 * </example>
 *
 * <h3>Browser</h3>
 * <example>
 * http://mydomain.com/dev/tasks/MigrateTranslatableTask
 * </example>
 * 
 * @package sapphire
 * @subpackage tasks
 */",
 "/**
	 * Get the fields that are sent to the CMS. In
	 * your decorators: updateCMSFields(&$fields)
	 *
	 * @return Fieldset
	 */",
 "/**
	 * Get all available themes that haven\'t been marked as disabled.
	 * @param string $baseDir Optional alternative theme base directory for testing
	 * @return array of theme directory names
	 */",
 "/**
	 * Get the actions that are sent to the CMS. In
	 * your decorators: updateEditFormActions(&$actions)
	 *
	 * @return Fieldset
	 */",
 "/**
	 * Get the current sites SiteConfig, and creates a new one
	 * through {@link make_site_config()} if none is found.
	 *
	 * @param string $locale
	 * @return SiteConfig
	 */",
 "/**
	 * Setup a default SiteConfig record if none exists
	 */",
 "/**
	 * Create SiteConfig with defaults from language file.
	 * if Translatable is enabled on SiteConfig, see if one already exist
	 * and use those values for the translated defaults. 
	 * 
	 * @param string $locale
	 * @return SiteConfig
	 */",
 "/**
	 * Can a user view pages on this site? This method is only
	 * called if a page is set to Inherit, but there is nothing
	 * to inherit from.
	 *
	 * @param mixed $member 
	 * @return boolean
	 */",
 "/**
	 * Can a user edit pages on this site? This method is only
	 * called if a page is set to Inherit, but there is nothing
	 * to inherit from.
	 *
	 * @param mixed $member 
	 * @return boolean
	 */",
 "/**
	 * Can a user create pages in the root of this site?
	 *
	 * @param mixed $member 
	 * @return boolean
	 */",
 "/**
 * Sitewide configuration.
 * 
 * h2. Translation
 * 
 * To enable translation of configurations alongside the {@link Translatable} extension.
 * This also allows assigning language-specific toplevel permissions for viewing and editing
 * pages, in addition to the normal `TRANSLATE_*`/`TRANSLATE_ALL` permissions.
 * 
 * 	Object::add_extension(\'SiteConfig\', \'Translatable\');
 *
 * @author Tom Rix
 * @package cms
 */",
 "/**
	 * Creates a new TextParser object.
	 * 
	 * @param string $content The contents of the dbfield
	 */",
 "/**
	 * Convenience method, shouldn\'t really be used, but it\'s here if you want it
	 */",
 "/**
	 * Define your own parse method to parse $this->content appropriately.
	 * See the class doc-block for more implementation details.
	 */",
 "/**
 * Parses text in a variety of ways.
 * 
 * Called from a template by $Content.Parse(SubClassName), similar to $Content.XML.
 * This will work on any Text database field (Or a sub-class, such as HTMLText, 
 * although it\'s usefulness in this situation is more limited).
 * 
 * Any sub-classes of TextParser must implement a parse() method. 
 * This should take $this->content and parse it however you want. For an example
 * of the implementation, @see BBCodeParser.
 * 
 * Your sub-class will be initialized with a string of text, then parse() will be called.
 * parse() should (after processing) return the formatted string.
 * 
 * Note: $this->content will have NO conversions applied to it. 
 * You should run Covert::raw2xml or whatever is appropriate before using it. 
 * 
 * Optionally (but recommended), is creating a static usable_tags method, 
 * which will return a DataObjectSet of all the usable tags that can be parsed.
 * This will (mostly) be used to create helper blocks - telling users what things will be parsed.
 * Again, @see BBCodeParser for an example of the syntax
 * 
 * @todo Define a proper syntax for (or refactor) usable_tags that can be extended as needed.
 * @package sapphire
 * @subpackage misc
 */",
 "/**
 * @package cms
 * @subpackage assets
 */",
 "/**
	 * Constructor
	 *
	 * @param Controller $controller The parent controller, necessary to
	 *                               create the appropriate form action tag.
	 * @param string $name The method on the controller that will return this
	 *                     form object.
	 * @param FieldSet|FormField $fields All of the fields in the form - a
	 *                                   {@link FieldSet} of {@link FormField}
	 *                                   objects.
	 * @param FieldSet|FormAction $actions All of the action buttons in the
	 *                                     form - a {@link FieldSet} of
	 */",
 "/**
	 * Change the password
	 *
	 * @param array $data The user submitted data
	 */",
 "/**
 * Standard Change Password Form
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * A special type Int field used for foreign keys in has_one relationships.
 * @uses ImageField
 * @uses SimpleImageField
 * @uses FileIFrameField
 * @uses DropdownField
 * 
 * @param string $name
 * @param DataOject $object The object that the foreign key is stored on (should have a relation with $name) 
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Set the character set encoding for this page.  By default it\'s utf-8, but you could change it to, say, windows-1252, to
	 * improve interoperability with extended characters being imported from windows excel.
	 */",
 "/**
	 * Return the character encoding set bhy ContentNegotiator::set_encoding().  It\'s recommended that all classes that need to
	 * specify the character set make use of this function.
	 */",
 "/**
	 * Enable content negotiation for all templates, not just those with the xml header.
	 */",
 "/**
	 * Returns true if negotation is enabled for the given response.
	 * By default, negotiation is only enabled for pages that have the xml header.
	 */",
 "/**
	 * Only sends the HTTP Content-Type as \"application/xhtml+xml\"
	 * if the template starts with the typical \"<?xml\" Pragma.
	 * Assumes that a correct doctype is set, and doesn\'t change or append to it.
	 * Replaces a few common tags and entities with their XHTML representations (<br>, <img>, &nbsp;).
	 *
	 * @param $response SS_HTTPResponse
	 * @return string
	 * @todo More flexible tag and entity parsing through regular expressions or tag definition lists
	 */",
 "/**
 * The content negotiator performs \"text/html\" or \"application/xhtml+xml\" switching.
 * It does this through the static function ContentNegotiator::process().
 * By default, ContentNegotiator will comply to the Accept headers the clients
 * sends along with the HTTP request, which is most likely \"application/xhtml+xml\"
 * (see \"Order of selection\" below).
 *
 * Order of selection between html or xhtml is as follows:
 * - if PHP has already sent the HTTP headers, default to \"html\" (we can\'t send HTTP Content-Type headers any longer)
 * - if a GET variable ?forceFormat is set, it takes precedence (for testing purposes)
 * - if the user agent is detected as W3C Validator we always deliver \"xhtml\"
 * - if an HTTP Accept header is sent from the client, we respect its order (this is the most common case)
 * - if none of the above matches, fallback is \"html\"
 * 
 * ContentNegotiator doesn\'t enable you to send content as a true XML document
 * through the \"text/xml\" or \"application/xhtml+xml\" Content-Type.
 * Please see http://webkit.org/blog/68/understanding-html-xml-and-xhtml/ for further information.
 * 
 * @package sapphire
 * @subpackage control
 * @see http://doc.silverstripe.org/doku.php?id=xhtml-support
 * @see http://doc.silverstripe.org/doku.php?id=contentnegotiator
 * @see http://doc.silverstripe.org/doku.php?id=html
 * 
 * @todo Check for correct XHTML doctype in xhtml()
 * @todo Allow for other HTML4 doctypes (e.g. Transitional) in html()
 * @todo Make content replacement and doctype setting two separately configurable behaviours - some
 * devs might know what they\'re doing and don\'t want contentnegotiator messing with their HTML4 doctypes,
 * but still find it useful to have self-closing tags removed.
 */",
 "/**
	 * @param string $name
	 * @param string $title
	 * @param mixed $value
	 * @param Form $form
	 * @param boolean $showOnClick
	 * @param string $titleConfirmField Alternate title (not localizeable)
	 */",
 "/**
	 * Can be empty is a flag that turns on/off empty field checking.
	 * For example, set this to false (the default) when creating a user account,
	 * and true 
	 */",
 "/**
	 * The title on the link which triggers display of the
	 * \"password\" and \"confirm password\" formfields.
	 * Only used if {@link setShowOnClick()} is set to TRUE.
	 * 
	 * @param $title
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @param array: 2 entrie array with the customised title for each of the 2 children.
	 */",
 "/**
	 * Value is sometimes an array, and sometimes a single value, so we need to handle both cases
	 */",
 "/**
	 * Determines if the field was actually
	 * shown on the clientside - if not,
	 * we don\'t validate or save it.
	 * 
	 * @return bool
	 */",
 "/**
	 * Only save if field was shown on the client,
	 * and is not empty.
	 *
	 * @param DataObject $record
	 * @return bool
	 */",
 "/**
	 * Makes a pretty readonly field with some stars in it
	 */",
 "/**
 * Shows two password-fields, and checks for matching passwords.
 * Optionally hides the fields by default and shows
 * a link to toggle their visibility.
 * 
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
     *    Starts with no held controls/widgets.
     *    @param SimpleTag $tag        Form tag to read.
     *    @param SimplePage $page      Holding page.
     */",
 "/**
     *    Creates the request packet to be sent by the form.
     *    @param SimpleTag $tag        Form tag to read.
     *    @return string               Packet class.
     *    @access private
     */",
 "/**
     *    Sets the frame target within a frameset.
     *    @param string $frame        Name of frame.
     *    @access public
     */",
 "/**
     *    Accessor for method of form submission.
     *    @return string           Either get or post.
     *    @access public
     */",
 "/**
     *    Combined action attribute with current location
     *    to get an absolute form target.
     *    @param string $action    Action attribute from form tag.
     *    @param SimpleUrl $base   Page location.
     *    @return SimpleUrl        Absolute form target.
     */",
 "/**
     *    Absolute URL of the target.
     *    @return SimpleUrl           URL target.
     *    @access public
     */",
 "/**
     *    Creates the encoding for the current values in the
     *    form.
     *    @return SimpleFormEncoding    Request to submit.
     *    @access private
     */",
 "/**
     *    ID field of form for unique identification.
     *    @return string           Unique tag ID.
     *    @access public
     */",
 "/**
     *    Adds a tag contents to the form.
     *    @param SimpleWidget $tag        Input tag to add.
     *    @access public
     */",
 "/**
     *    Sets the widget into the form, grouping radio
     *    buttons if any.
     *    @param SimpleWidget $tag   Incoming form control.
     *    @access private
     */",
 "/**
     *    Adds a radio button, building a group if necessary.
     *    @param SimpleRadioButtonTag $tag   Incoming form control.
     *    @access private
     */",
 "/**
     *    Adds a checkbox, making it a group on a repeated name.
     *    @param SimpleCheckboxTag $tag   Incoming form control.
     *    @access private
     */",
 "/**
     *    Extracts current value from form.
     *    @param SimpleSelector $selector   Criteria to apply.
     *    @return string/array              Value(s) as string or null
     *                                      if not set.
     *    @access public
     */",
 "/**
     *    Sets a widget value within the form.
     *    @param SimpleSelector $selector   Criteria to apply.
     *    @param string $value              Value to input into the widget.
     *    @return boolean                   True if value is legal, false
     *                                      otherwise. If the field is not
     *                                      present, nothing will be set.
     *    @access public
     */",
 "/**
     *    Used by the page object to set widgets labels to
     *    external label tags.
     *    @param SimpleSelector $selector   Criteria to apply.
     *    @access public
     */",
 "/**
     *    Test to see if a form has a submit button.
     *    @param SimpleSelector $selector   Criteria to apply.
     *    @return boolean                   True if present.
     *    @access public
     */",
 "/**
     *    Test to see if a form has an image control.
     *    @param SimpleSelector $selector   Criteria to apply.
     *    @return boolean                   True if present.
     *    @access public
     */",
 "/**
     *    Gets the submit values for a selected button.
     *    @param SimpleSelector $selector   Criteria to apply.
     *    @param hash $additional           Additional data for the form.
     *    @return SimpleEncoding            Submitted values or false
     *                                      if there is no such button
     *                                      in the form.
     *    @access public
     */",
 "/**
     *    Gets the submit values for an image.
     *    @param SimpleSelector $selector   Criteria to apply.
     *    @param integer $x                 X-coordinate of click.
     *    @param integer $y                 Y-coordinate of click.
     *    @param hash $additional           Additional data for the form.
     *    @return SimpleEncoding            Submitted values or false
     *                                      if there is no such button in the
     *                                      form.
     *    @access public
     */",
 "/**
     *    Simply submits the form without the submit button
     *    value. Used when there is only one button or it
     *    is unimportant.
     *    @return hash           Submitted values.
     *    @access public
     */",
 "/**
 *    Form tag class to hold widget values.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
    * constructs a new JSON instance
    *
    * @param    int     $use    object behavior flags; combine with boolean-OR
    *
    *                           possible values:
    *                           - SERVICES_JSON_LOOSE_TYPE:  loose typing.
    *                                   \"{...}\" syntax creates associative arrays
    *                                   instead of objects in decode().
    *                           - SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.
    *                                   Values which can\'t be encoded (e.g. resources)
    *                                   appear as NULL instead of throwing errors.
    *                                   By default, a deeply-nested resource will
    *                                   bubble up with an error, so all return values
    *                                   from encode() should be checked with isError()
    */",
 "/**
    * convert a string from one UTF-16 char to one UTF-8 char
    *
    * Normally should be handled by mb_convert_encoding, but
    * provides a slower PHP-only method for installations
    * that lack the multibye string extension.
    *
    * @param    string  $utf16  UTF-16 character
    * @return   string  UTF-8 character
    * @access   private
    */",
 "/**
    * convert a string from one UTF-8 char to one UTF-16 char
    *
    * Normally should be handled by mb_convert_encoding, but
    * provides a slower PHP-only method for installations
    * that lack the multibye string extension.
    *
    * @param    string  $utf8   UTF-8 character
    * @return   string  UTF-16 character
    * @access   private
    */",
 "/**
    * encodes an arbitrary variable into JSON format
    *
    * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.
    *                           see argument 1 to Services_JSON() above for array-parsing behavior.
    *                           if var is a strng, note that encode() always expects it
    *                           to be in ASCII or UTF-8 format!
    *
    * @return   mixed   JSON string representation of input var or an error if a problem occurs
    * @access   public
    */",
 "/**
    * array-walking function for use in generating JSON-formatted name-value pairs
    *
    * @param    string  $name   name of key to use
    * @param    mixed   $value  reference to an array element to be encoded
    *
    * @return   string  JSON-formatted name-value pair, like \'\"name\":value\'
    * @access   private
    */",
 "/**
    * reduce a string by removing leading and trailing comments and whitespace
    *
    * @param    $str    string      string value to strip of comments and whitespace
    *
    * @return   string  string value stripped of comments and whitespace
    * @access   private
    */",
 "/**

*

*






*/",
 "/**

*/",
 "/**

*

*



*



*


 *
 * // accept incoming POST data, assumed to be in JSON notation
 * $input = file_get_contents(\'php://input\', 1000000);
 * $value = $json->decode($input);
 * </code>
 */",
 "/**
     * @todo Ultimately, this class shall be descended from PEAR_Error
     */",
 "/**
 * Checks if a value starts with one of the items of in a given set.
 * SQL syntax used: Column IN (\'val1\',\'val2\')
 * 
 * @todo Add negation (NOT IN)6
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Initialize the \'default\' named cache backend
	 */",
 "/**
	 * Add a new named cache backend
	 * 
	 * @param string $name The name of this backend as a freeform string
	 * @param string $type The Zend_Cache backend (\'File\' or \'Sqlite\' or ...)
	 * @param array $options The Zend_Cache backend options (see http://framework.zend.com/manual/en/zend.cache.html)
	 * @return none
	 */",
 "/**
	 * Pick a named cache backend for a particular named cache
	 *  
	 * @param string $name The name of the backend, as passed as the first argument to add_backend
	 * @param string $for The name of the cache to pick this backend for (or \'any\' for any backend)
	 * @param integer $priority The priority of this pick - the call with the highest number will be the actual backend picked.
	 *                          A backend picked for a specific cache name will always be used instead of \'any\' if it exists, no matter the priority.
	 * @return none
	 */",
 "/**
	 * Set the cache lifetime for a particular named cache
	 * 
	 * @param string $for The name of the cache to set this lifetime for (or \'any\' for all backends)
	 * @param integer $lifetime The lifetime of an item of the cache, in seconds, or -1 to disable caching
	 * @param integer $priority The priority. The highest priority setting is used. Unlike backends, \'any\' is not special in terms of priority. 
	 */",
 "/**
	 * Build a cache object
	 * @param string $for The name of the cache to build the cache object for
	 * @param string $frontend (optional) The type of Zend_Cache frontend to use. Output is almost always the best
	 * @param array $frontendOptions (optional) Any frontend options to use.
	 * 
	 * @return The cache object. It has been partitioned so that actions on the object
	 *	won\'t affect cache objects generated with a different $for value, even those using the same Zend_Backend 
	 * 
	 * -- Cache a calculation
	 * 
	 * if (!($result = $cache->load($cachekey))) {
	 * 	$result = caluate some how;
	 * 	$cache->save($result);
	 * }
	 * 
	 * return $result;
	 * 
	 * -- Cache captured output
	 * 
	 * if (!($cache->start($cachekey))) {
	 * 
	 * 	// output everything as usual
	 * 	echo \'Hello world! \';
	 * 	echo \'This is cached (\'.time().\') \';
	 * 
	 * 	$cache->end(); // output buffering ends
	 * }
	 * 
	 * -- Invalidate an element
	 * 
	 * $cache->remove($cachekey);
	 * 
	 * -- Clear the cache (warning - this clears the entire backend, not just this named cache partition)
	 * 
	 * $cache->clean(Zend_Cache::CLEANING_MODE_ALL);
	 * 
	 * See the Zend_Cache documentation at http://framework.zend.com/manual/en/zend.cache.html for more
	 * 
	 */",
 "/**
 * SS_Cache provides a bunch of static functions wrapping the Zend_Cache system in something a little more
 * easy to use with the SilverStripe config system.
 * 
 * A Zend_Cache has both a frontend (determines how to get the value to cache, and how to serialize it for storage)
 * and a backend (handles the actual storage).
 * 
 * Rather than require library code to specify the backend directly, cache consumers provide a name for the cache
 * backend they want. The end developer can then specify which backend to use for each name in their project\'s
 * _config.php. They can also use \'all\' to provide a backend for all named caches
 * 
 * End developers provide a set of named backends, then pick the specific backend for each named cache. There is a 
 * default File cache set up as the \'default\' named backend, which is assigned to \'all\' named caches
 * 
 * USING A CACHE
 * 
 * $cache = SS_Cache::factory(\'foo\') ; // foo is any name (try to be specific), and is used to get configuration & storage info
 * 
 * if (!($result = $cache->load($cachekey))) {
 * 	$result = caluate some how;
 * 	$cache->save($result);
 * }
 * 
 * return $result;
 * 
 * Normally there\'s no need to remove things from the cache - the cache backends clear out entries based on age & maximum 
 * allocated storage. If you include the version of the object in the cache key, even object changes don\'t need any invalidation
 * 
 * DISABLING CACHING IN DEV MOVE
 * 
 * (in _config.php)
 * 
 * if (Director::isDev()) SS_Cache::set_cache_lifetime(\'any\', -1, 100);
 * 
 * USING MEMCACHED AS STORE
 * 
 * (in _config.php)
 * 
 * SS_Cache::add_backend(\'primary_memcached\', \'Memcached\',
 * 	array(\'host\' => \'localhost\', \'port\' => 11211, \'persistent\' => true, \'weight\' => 1, \'timeout\' => 5, \'retry_interval\' => 15, \'status\' => true, \'failure_callback\' => \'\' )
 * );
 * 
 * SS_Cache::pick_backend(\'primary_memcached\', \'any\', 10);
 * SS_Cache::pick_backend(\'default\', \'aggregate\', 20); // Aggregate needs a backend with tag support, which memcached doesn\'t provide
 * 
 * USING APC AND FILE AS TWO LEVEL STORE
 * 
 * (in _config.php)
 * 
 * SS_Cache::add_backend(\'two-level\', \'TwoLevels\', array(
 * 	\'slow_backend\' => \'File\',
 * 	\'fast_backend\' => \'Apc\',
 * 	\'slow_backend_options\' => array(\'cache_dir\' => TEMP_FOLDER . DIRECTORY_SEPARATOR . \'cache\')
 * ));
 * 
 * SS_Cache::pick_backend(\'two-level\', \'any\', 10); // No need for special backend for aggregate - TwoLevels with a File slow backend supports tags
 * 
 * @author hfried
 * @package sapphire
 * @subpackage core
 */",
 "/**
	 * Returns the number, with commas added as appropriate, eg ???1,000???.
	 */",
 "/**
	 * Return an encoding of the given value suitable for inclusion in a SQL statement.
	 * If necessary, this should include quotes.
	 */",
 "/**
 * Represents a signed 32 bit integer field.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * @uses FormField::name_to_label()
	 * 
	 * @param string $name Identifier of the tab, without characters like dots or spaces
	 * @param string $title Natural language title of the tab. If its left out,
	 *  the class uses {@link FormField::name_to_label()} to produce a title from the {@link $name} parameter.
	 * @param FormField All following parameters are inserted as children to this tab
	 */",
 "/**
	 * Returns the named field
	 */",
 "/**
 * Implements a single tab in a {@link TabSet}.
 * 
 * Here is a simple implementation of a Tab. Obviously, you can include as much fields 
 * inside as you want. A tab can contain other tabs as well.
 * 
 * <code>
 * new Tab(
 * 	$title=\'Tab one\',
 * 	new HeaderField(\"A header\"),
 * 	new LiteralField(\"Lipsum\",\"Lorem ipsum dolor sit amet enim.\")
 * )
 * </code>
 * 
 * @package forms
 * @subpackage fields-structural
 */",
 "/**
	 * Get the current page ID.
	 * @return int
	 */",
 "/**
	 * Check if the given DataObject is the current page.
	 * @param DataObject $page The page to check.
	 * @return boolean
	 */",
 "/**
 * This interface lets us set up objects that will tell us what the current page is.
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Constructs a new logger instance.
	 */",
 "/**
	 * Sets the current log level, use the MC_LOGGER constants.
	 *
	 * @param int $level Log level instance for example MC_LOGGER_DEBUG.
	 */",
 "/**
	 * Returns the current log level for example MC_LOGGER_DEBUG.
	 *
	 * @return int Current log level for example MC_LOGGER_DEBUG.
	 */",
 "/**
	 * Converts a Unix path to OS specific path.
	 *
	 * @param String $path Unix path to convert.
	 */",
 "/**
 * Logging utility class. This class handles basic logging with levels, log rotation and custom log formats. It\'s
 * designed to be compact but still powerful and flexible.
 */",
 "/**
	 * Create a new CMS Menu Item
	 * @param string $title
	 * @param string $url
	 * @param string $controller Controller class name
	 * @param integer $priority The sort priority of the item
	 */",
 "/**
 * A simple CMS menu item
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
	 * @param $locale
	 */",
 "/**
	 * This is the main method to build the master string tables with the original strings.
	 * It will search for existent modules that use the i18n feature, parse the _t() calls
	 * and write the resultant files in the lang folder of each module.
	 * 
	 * @uses DataObject->collectI18nStatics()
	 * 
	 * @param array $restrictToModules
	 */",
 "/**
	 * Build the module\'s master string table
	 *
	 * @param string $module Module\'s name or \'themes\'
	 */",
 "/**
	 * @uses i18nEntityProvider
	 */",
 "/**
	 * @todo Fix regexes so the deletion of quotes, commas and newlines from wrong matches isn\'t necessary
	 */",
 "/**
	 * Input for langArrayCodeForEntitySpec() should be suitable for insertion
	 * into single-quoted strings, so needs to be escaped already.
	 * 
	 * @param string $entity The entity name, e.g. CMSMain.BUTTONSAVE
	 */",
 "/**
	 * Write the master string table of every processed module
	 */",
 "/**
	 * Helper function that searches for potential files to be parsed
	 * 
	 * @param string $folder base directory to scan (will scan recursively)
	 * @param array $fileList Array where potential files will be added to
	 */",
 "/**
 * SilverStripe-variant of the \"gettext\" tool:
 * Parses the string content of all PHP-files and SilverStripe templates
 * for ocurrences of the _t() translation method. Also uses the {@link i18nEntityProvider}
 * interface to get dynamically defined entities by executing the 
 * {@link provideI18nEntities()} method on all implementors of this interface.
 * 
 * Collects all found entities (and their natural language text for the default locale)
 * into language-files for each module in an array notation. Creates or overwrites these files,
 * e.g. sapphire/lang/en_US.php.
 * 
 * The collector needs to be run whenever you make new translatable
 * entities available. Please don\'t alter the arrays in language tables manually.
 * 
 * Usage through URL: http://localhost/dev/tasks/i18nTextCollectorTask
 * Usage through URL (module-specific): http://localhost/dev/tasks/i18nTextCollectorTask/?module=mymodule
 * Usage on CLI: sake dev/tasks/i18nTextCollectorTask
 * Usage on CLI (module-specific): sake dev/tasks/i18nTextCollectorTask module=mymodule
 *
 * Requires PHP 5.1+ due to class_implements() limitations
 * 
 * @author Bernat Foj Capell <bernat@silverstripe.com>
 * @author Ingo Schommer <FIRSTNAME@silverstripe.com>
 * @package sapphire
 * @subpackage i18n
 * @uses i18nEntityProvider
 * @uses i18n
 */",
 "/**
	 * Reset static configuration variables to their default values
	 */",
 "/**
	 * Choose the language the site is currently on.
	 *
	 * If $_GET[\'locale\'] is currently set, then that locale will be used. Otherwise the member preference (if logged
	 * in) or default locale will be used.
	 * 
	 * @todo Re-implement cookie and member option
	 * 
	 * @param $langsAvailable array A numerical array of languages which are valid choices (optional)
	 * @return string Selected language (also saved in $current_locale).
	 */",
 "/**
	 * Get the current reading language.
	 * This value has to be set before the schema is built with translatable enabled,
	 * any changes after this can cause unintended side-effects.
	 * 
	 * @return string
	 */",
 "/**
	 * Set default language. Please set this value *before* creating
	 * any database records (like pages), as this locale will be attached
	 * to all new records.
	 * 
	 * @param $locale String
	 */",
 "/**
	 * Get the current reading language.
	 * If its not chosen, call {@link choose_site_locale()}.
	 * 
	 * @return string
	 */",
 "/**
	 * Set the reading language, either namespaced to \'site\' (website content)
	 * or \'cms\' (management backend). This value is used in {@link augmentSQL()}
	 * to \"auto-filter\" all SELECT queries by this language.
	 * See {@link disable_locale_filter()} on how to override this behaviour temporarily.
	 * 
	 * @param string $lang New reading language.
	 */",
 "/**
	 * Get a singleton instance of a class in the given language.
	 * @param string $class The name of the class.
	 * @param string $locale  The name of the language.
	 * @param string $filter A filter to be inserted into the WHERE clause.
	 * @param boolean $cache Use caching (default: false)
	 * @param string $orderby A sort expression to be inserted into the ORDER BY clause.
	 * @return DataObject
	 */",
 "/**
	 * Get all the instances of the given class translated to the given language
	 *
	 * @param string $class The name of the class
	 * @param string $locale  The name of the language
	 * @param string $filter A filter to be inserted into the WHERE clause.
	 * @param string $sort A sort expression to be inserted into the ORDER BY clause.
	 * @param string $join A single join clause.  This can be used for filtering, only 1 instance of each DataObject will be returned.
	 * @param string $limit A limit expression to be inserted into the LIMIT clause.
	 * @param string $containerClass The container class to return the results in.
	 * @param string $having A filter to be inserted into the HAVING clause.
	 * @return mixed The objects matching the conditions.
	 */",
 "/**
	 * @return bool
	 */",
 "/**
	 * Enables automatic filtering by locale. This is normally called after is has been
	 * disabled using {@link disable_locale_filter()}.
	 */",
 "/**
	 * Disables automatic locale filtering in {@link augmentSQL()}. This can be re-enabled
	 * using {@link enable_locale_filter()}.
	 */",
 "/**
	 * Gets all translations for this specific page.
	 * Doesn\'t include the language of the current record.
	 * 
	 * @return array Numeric array of all locales, sorted alphabetically.
	 */",
 "/**
	 * Gets all locales that a member can access
	 * as defined by {@link $allowed_locales}
	 * and {@link canTranslate()}.
	 * If {@link $allowed_locales} is not set and
	 * the user has the `TRANSLATE_ALL` permission,
	 * the method will return all available locales in the system.
	 * 
	 * @param Member $member
	 * @return array Map of locales
	 */",
 "/**
	 * Get a list of languages in which a given element has been translated.
	 * 
	 * @deprecated 2.4 Use {@link getTranslations()}
	 *
	 * @param string $class Name of the class of the element
	 * @param int $id ID of the element
	 * @return array List of languages
	 */",
 "/**
	 * Enables the multilingual feature
	 *
	 * @deprecated 2.4 Use Object::add_extension(\'SiteTree\', \'Translatable\')
	 */",
 "/**
	 * Disable the multilingual feature
	 *
	 * @deprecated 2.4 Use Object::remove_extension(\'SiteTree\', \'Translatable\')
	 */",
 "/**
	 * Check whether multilingual support has been enabled
	 *
	 * @deprecated 2.4 Use Object::has_extension(\'SiteTree\', \'Translatable\')
	 * @return boolean True if enabled
	 */",
 "/**
	 * Construct a new Translatable object.
	 * @var array $translatableFields The different fields of the object that can be translated.
	 * This is currently not implemented, all fields are marked translatable (see {@link setOwner()}).
	 */",
 "/**
	 * Changes any SELECT query thats not filtering on an ID
	 * to limit by the current language defined in {@link get_current_locale()}.
	 * It falls back to \"Locale=\'\' OR Lang IS NULL\" and assumes that
	 * this implies querying for the default language.
	 * 
	 * Use {@link disable_locale_filter()} to temporarily disable this \"auto-filtering\".
	 */",
 "/**
	 * Create <table>_translation database table to enable
	 * tracking of \"translation groups\" in which each related
	 * translation of an object acts as a sibling, rather than
	 * a parent->child relation.
	 */",
 "/**
	 * @todo Find more appropriate place to hook into database building
	 */",
 "/**
	 * Add a record to a \"translation group\",
	 * so its relationship to other translations
	 * based off the same object can be determined later on.
	 * See class header for further comments.
	 * 
	 * @param int $originalID Either the primary key of the record this new translation is based on,
	 *  or the primary key of this record, to create a new translation group
	 * @param boolean $overwrite
	 */",
 "/**
	 * Gets the translation group for the current record.
	 * This ID might equal the record ID, but doesn\'t have to -
	 * it just points to one \"original\" record in the list.
	 * 
	 * @return int Numeric ID of the translationgroup in the <classname>_translationgroup table
	 */",
 "/**
	 * Removes a record from the translation group lookup table.
	 * Makes no assumptions on other records in the group - meaning
	 * if this happens to be the last record assigned to the group,
	 * this group ceases to exist.
	 */",
 "/**
	 * Determine if a table needs Versioned support
	 * This is called at db/build time
	 *
	 * @param string $table Table name
	 * @return boolean
	 */",
 "/**
	 * Note: The bulk of logic is in ModelAsController->getNestedController()
	 * and ContentController->handleRequest()
	 */",
 "/**
	 * Recursively creates translations for parent pages in this language
	 * if they aren\'t existing already. This is a necessity to make
	 * nested pages accessible in a translated CMS page tree.
	 * It would be more userfriendly to grey out untranslated pages,
	 * but this involves complicated special cases in AllChildrenIncludingDeleted().
	 * 
	 * {@link SiteTree->onBeforeWrite()} will ensure that each translation will get
	 * a unique URL across languages, by means of {@link SiteTree::get_by_link()}
	 * and {@link Translatable->alternateGetByURL()}.
	 */",
 "/**
	 * Remove the record from the translation group mapping.
	 */",
 "/**
	 * Attempt to get the page for a link in the default language that has been translated.
	 *
	 * @param string $URLSegment
	 * @param int|null $parentID
	 * @return SiteTree
	 */",
 "/**
	 * If the record is not shown in the default language, this method
	 * will try to autoselect a master language which is shown alongside
	 * the normal formfields as a readonly representation.
	 * This gives translators a powerful tool for their translation workflow
	 * without leaving the translated page interface.
	 * Translatable also adds a new tab \"Translation\" which shows existing
	 * translations, as well as a formaction to create new translations based
	 * on a dropdown with available languages.
	 * 
	 * @todo This is specific to SiteTree and CMSMain
	 * @todo Implement a special \"translation mode\" which triggers display of the
	 * readonly fields, so you can translation INTO the \"default language\" while
	 * seeing readonly fields as well.
	 */",
 "/**
	 * Get the names of all translatable fields on this class
	 * as a numeric array.
	 * @todo Integrate with blacklist once branches/translatable is merged back.
	 * 
	 * @return array
	 */",
 "/**
	 * Return the base table - the class that directly extends DataObject.
	 * @return string
	 */",
 "/**
	 * Gets all related translations for the current object,
	 * excluding itself. See {@link getTranslation()} to retrieve
	 * a single translated object.
	 * 
	 * Getter with $stage parameter is specific to {@link Versioned} extension,
	 * mostly used for {@link SiteTree} subclasses.
	 * 
	 * @param string $locale
	 * @param string $stage 
	 * @return DataObjectSet
	 */",
 "/**
	 * Gets an existing translation based on the language code.
	 * Use {@link hasTranslation()} as a quicker alternative to check
	 * for an existing translation without getting the actual object.
	 * 
	 * @param String $locale
	 * @return DataObject Translated object
	 */",
 "/**
	 * Creates a new translation for the owner object of this decorator.
	 * Checks {@link getTranslation()} to return an existing translation
	 * instead of creating a duplicate. Writes the record to the database before
	 * returning it. Use this method if you want the \"translation group\"
	 * mechanism to work, meaning that an object knows which group of translations
	 * it belongs to. For \"original records\" which are not created through this
	 * method, the \"translation group\" is set in {@link onAfterWrite()}.
	 * 
	 * @param string $locale
	 * @return DataObject The translated object
	 */",
 "/**
	 * Caution: Does not consider the {@link canEdit()} permissions.
	 * 
	 * @param DataObject|int $member
	 * @param string $locale
	 * @return boolean
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Returns TRUE if the current record has a translation in this language.
	 * Use {@link getTranslation()} to get the actual translated record from
	 * the database.
	 * 
	 * @param string $locale
	 * @return boolean
	 */",
 "/**
	 * Returns <link rel=\"alternate\"> markup for insertion into
	 * a HTML4/XHTML compliant <head> section, listing all available translations
	 * of a page.
	 * 
	 * @see http://www.w3.org/TR/html4/struct/links.html#edef-LINK
	 * @see http://www.w3.org/International/articles/language-tags/
	 * 
	 * @return string HTML
	 */",
 "/**
	 * Get a list of languages with at least one element translated in (including the default language)
	 *
	 * @param string $className Look for languages in elements of this class
	 * @param string $where Optional SQL WHERE statement
	 * @return array Map of languages in the form locale => langName
	 */",
 "/**
	 * Get the RelativeLink value for a home page in another locale. This is found by searching for the default home
	 * page in the default language, then returning the link to the translated version (if one exists).
	 *
	 * @return string
	 */",
 "/**
	 * @deprecated 2.4 Use {@link Translatable::get_homepage_link_by_locale()}
	 */",
 "/**
	 * Define all locales which in which a new translation is allowed.
	 * Checked in {@link canTranslate()}.
	 *
	 * @param array List of allowed locale codes (see {@link i18n::$all_locales}).
	 *  Example: array(\'de_DE\',\'ja_JP\')
	 */",
 "/**
	 * Get all locales which are generally permitted to be translated.
	 * Use {@link canTranslate()} to check if a specific member has permission
	 * to translate a record.
	 * 
	 * @return array
	 */",
 "/**
	 * @deprecated 2.4 Use get_homepage_urlsegment_by_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use custom check: self::$default_locale == self::get_current_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use set_default_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use get_default_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use get_current_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use set_current_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use get_reading_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use default_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use get_by_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use get_one_by_locale()
	 */",
 "/**
	 * Determines if the record has a locale,
	 * and if this locale is different from the \"default locale\"
	 * set in {@link Translatable::default_locale()}.
	 * Does not look at translation groups to see if the record
	 * is based on another record.
	 * 
	 * @return boolean
	 * @deprecated 2.4
	 */",
 "/**
	 * @deprecated 2.4 Use choose_site_locale()
	 */",
 "/**
	 * @deprecated 2.4 Use getTranslatedLocales()
	 */",
 "/**
	 * Return a piece of text to keep DataObject cache keys appropriately specific
	 */",
 "/**
	 * Extends the SiteTree::validURLSegment() method, to do checks appropriate
	 * to Translatable
	 * 
	 * @return bool
     */",
 "/**
 * The Translatable decorator allows your DataObjects to have versions in different languages,
 * defining which fields are can be translated. Translatable can be applied
 * to any {@link DataObject} subclass, but is mostly used with {@link SiteTree}.
 * Translatable is compatible with the {@link Versioned} extension.
 * To avoid cluttering up the database-schema of the 99% of sites without multiple languages,
 * the translation-feature is disabled by default.
 * 
 * Locales (e.g. \'en_US\') are used in Translatable for identifying a record by language,
 * see section \"Locales and Language Tags\".
 * 
 * <h2>Configuration</h2>
 * 
 * <h3>Through Object::add_extension()</h3>
 * Enabling Translatable through {@link Object::add_extension()} in your _config.php:
 * <code>
 * Object::add_extension(\'MyClass\', \'Translatable\');
 * </code>
 * This is the recommended approach for enabling Translatable.
 * 
 * <h3>Through $extensions</h3>
 * <code>
 * class MyClass extends DataObject {
 *   static $extensions = array(
 *     \"Translatable\"
 *   );
 * }
 * </code>
 * 
 * Make sure to rebuild the database through /dev/build after enabling translatable.
 * Use the correct {@link set_default_locale()} before building the database
 * for the first time, as this locale will be written on all new records.
 * 
 * <h3>\"Default\" locales</h3>
 * 
 * Important: If the \"default language\" of your site is not US-English (en_US), 
 * please ensure to set the appropriate default language for
 * your content before building the database with Translatable enabled:
 * <code>
 * Translatable::set_default_locale(<locale>); // e.g. \'de_DE\' or \'fr_FR\'
 * </code>
 * 
 * For the Translatable class, a \"locale\" consists of a language code plus a region code separated by an underscore, 
 * for example \"de_AT\" for German language (\"de\") in the region Austria (\"AT\").
 * See http://www.w3.org/International/articles/language-tags/ for a detailed description.
 * 
 * <h2>Usage</h2>
 *
 * Getting a translation for an existing instance: 
 * <code>
 * $translatedObj = Translatable::get_one_by_locale(\'MyObject\', \'de_DE\');
 * </code>
 * 
 * Getting a translation for an existing instance: 
 * <code>
 * $obj = DataObject::get_by_id(\'MyObject\', 99); // original language
 * $translatedObj = $obj->getTranslation(\'de_DE\');
 * </code>
 * 
 * Getting translations through {@link Translatable::set_current_locale()}.
 * This is *not* a recommended approach, but sometimes inavoidable (e.g. for {@link Versioned} methods).
 * <code>
 * $origLocale = Translatable::get_current_locale();
 * Translatable::set_current_locale(\'de_DE\');
 * $obj = Versioned::get_one_by_stage(\'MyObject\', \"ID = 99\");
 * Translatable::set_current_locale($origLocale);
 * </code>
 * 
 * Creating a translation: 
 * <code>
 * $obj = new MyObject();
 * $translatedObj = $obj->createTranslation(\'de_DE\');
 * </code>
 *
 * <h2>Usage for SiteTree</h2>
 * 
 * Translatable can be used for subclasses of {@link SiteTree} as well. 
 * 
 * <code>
 * Object::add_extension(\'SiteTree\', \'Translatable\');
 * Object::add_extension(\'SiteConig\', \'Translatable\');
 * </code>
 * 
 * If a child page translation is requested without the parent
 * page already having a translation in this language, the extension
 * will recursively create translations up the tree.
 * Caution: The \"URLSegment\" property is enforced to be unique across
 * languages by auto-appending the language code at the end.
 * You\'ll need to ensure that the appropriate \"reading language\" is set
 * before showing links to other pages on a website through $_GET[\'locale\'].
 * Pages in different languages can have different publication states
 * through the {@link Versioned} extension.
 * 
 * Note: You can\'t get Children() for a parent page in a different language
 * through set_current_locale(). Get the translated parent first.
 * 
 * <code>
 * // wrong
 * Translatable::set_current_locale(\'de_DE\');
 * $englishParent->Children(); 
 * // right
 * $germanParent = $englishParent->getTranslation(\'de_DE\');
 * $germanParent->Children();
 * </code>
 *
 * <h2>Translation groups</h2>
 * 
 * Each translation can have one or more related pages in other languages. 
 * This relation is optional, meaning you can
 * create translations which have no representation in the \"default language\".
 * This means you can have a french translation with a german original, 
 * without either of them having a representation
 * in the default english language tree.
 * Caution: There is no versioning for translation groups,
 * meaning associating an object with a group will affect both stage and live records.
 * 
 * SiteTree database table (abbreviated)
 * ^ ID ^ URLSegment ^ Title ^ Locale ^
 * | 1 | about-us | About us | en_US |
 * | 2 | ueber-uns | ??ber uns | de_DE |
 * | 3 | contact | Contact | en_US |
 * 
 * SiteTree_translationgroups database table
 * ^ TranslationGroupID ^ OriginalID ^
 * | 99 | 1 |
 * | 99 | 2 |
 * | 199 | 3 |
 *
 * <h2>Character Sets</h2>
 * 
 * Caution: Does not apply any character-set conversion, it is assumed that all content
 * is stored and represented in UTF-8 (Unicode). Please make sure your database and
 * HTML-templates adjust to this.
 * 
 * <h2>Permissions</h2>
 * 
 * Authors without administrative access need special permissions to edit locales other than
 * the default locale.
 * 
 * - TRANSLATE_ALL: Translate into all locales
 * - Translate_<locale>: Translate a specific locale. Only available for all locales set in
 *   `Translatable::set_allowed_locales()`.
 * 
 * Note: If user-specific view permissions are required, please overload `SiteTree->canView()`.
 * 
 * <h2>Uninstalling/Disabling</h2>
 * 
 * Disabling Translatable after creating translations will lead to all
 * pages being shown in the default sitetree regardless of their language.
 * It is advised to start with a new database after uninstalling Translatable,
 * or manually filter out translated objects through their \"Locale\" property
 * in the database.
 * 
 * @see http://doc.silverstripe.org/doku.php?id=multilingualcontent
 *
 * @author Ingo Schommer <ingo (at) silverstripe (dot) com>
 * @author Michael Gall <michael (at) wakeless (dot) net>
 * @author Bernat Foj Capell <bernat@silverstripe.com>
 * 
 * @package sapphire
 * @subpackage i18n
 */",
 "/**
	 * Returns the original DataObject attached to the Transformation
	 *
	 * @return DataObject
	 */",
 "/**
	 * @todo transformTextareaField() not used at the moment
	 */",
 "/**
 * Transform a formfield to a \"translatable\" representation,
 * consisting of the original formfield plus a readonly-version
 * of the original value, wrapped in a CompositeField.
 * 
 * @param DataObject $original Needs the original record as we populate the readonly formfield with the original value
 * 
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * @param name The field name
	 * @param title The field title
	 * @param value The current value
	 */",
 "/**
	 * Determines if the field should render open or closed by default.
	 * 
	 * @param boolean
	 */",
 "/**
 * ReadonlyField with added toggle-capabilities - will preview the first sentence of the contained text-value,
 * and show the full content by a javascript-switch.
 * 
 * Caution: Strips HTML-encoding for the preview.
 * @package forms
 * @subpackage fields-dataless
 */",
 "/**
	 * Get the ID of an object from the fixture.
	 * @param $className The data class, as specified in your fixture file.  Parent classes won\'t work
	 * @param $identifier The identifier string, as provided in your fixture file
	 */",
 "/**
	 * Return all of the IDs in the fixture of a particular class name.
	 * 
	 * @return A map of fixture-identifier => object-id
	 */",
 "/**
	 * Get an object from the fixture.
	 * 
	 * @param $className The data class, as specified in your fixture file.  Parent classes won\'t work
	 * @param $identifier The identifier string, as provided in your fixture file
	 */",
 "/**
	 * Load a YAML fixture file into the database.
	 * Once loaded, you can use idFromFixture() and objFromFixture() to get items from the fixture.
	 * 
	 * Caution: In order to support reflexive relations which need a valid object ID,
	 * the record is written twice: first after populating all non-relational fields,
	 * then again after populating all relations (has_one, has_many, many_many).
	 */",
 "/**
	 * Writes the fixture into the database using DataObjects
	 *
	 * @param string $dataClass
	 * @param array $items
	 */",
 "/**
	 * Writes the fixture into the database directly using a database manipulation
	 *
	 * @param string $table
	 * @param array $items
	 */",
 "/**
	 * Parse a value from a fixture file.  If it starts with => it will get an ID from the fixture dictionary
	 */",
 "/**
 * Uses the Spyc library to parse a YAML document (see http://yaml.org).
 * YAML is a simple markup languages that uses tabs and colons instead of the more verbose XML tags, 
 * and because of this much better for developers creating files by hand.
 * 
 * The contents of the YAML file are broken into three levels:
 * - Top level: class names - Page and ErrorPage. This is the name of the dataobject class that should be created. 
 *   The fact that ErrorPage is actually a subclass is irrelevant to the system populating the database. 
 *   Each identifier you specify delimits a new database record. 
 *   This means that every record needs to have an identifier, whether you use it or not.
 * - Third level: fields - each field for the record is listed as a 3rd level entry. 
 *   In most cases, the field?s raw content is provided. 
 *   However, if you want to define a relationship, you can do so using \"=>\"
 * 
 * There are a couple of lines like this:
 * <code>
 * Parent: =>Page.about
 * </code>
 * This will tell the system to set the ParentID database field to the ID of the Page object with the identifier ?about?. 
 * This can be used on any has-one or many-many relationship. 
 * Note that we use the name of the relationship (Parent), and not the name of the database field (ParentID)
 *
 * On many-many relationships, you should specify a comma separated list of values.
 * <code>
 * MyRelation: =>Class.inst1,=>Class.inst2,=>Class.inst3
 * </code>
 * An crucial thing to note is that the YAML file specifies DataObjects, not database records. 
 * The database is populated by instantiating DataObject objects, setting the fields listed, and calling write(). 
 * This means that any onBeforeWrite() or default value logic will be executed as part of the test. 
 * This forms the basis of our testURLGeneration() test above.
 * 
 * For example, the URLSegment value of Page.staffduplicate is the same as the URLSegment value of Page.staff. 
 * When the fixture is set up, the URLSegment value of Page.staffduplicate will actually be my-staff-2.
 * 
 * Finally, be aware that requireDefaultRecords() is not called by the database populator - 
 * so you will need to specify standard pages such as 404 and home in your YAML file.
 * 
 * <code>
 * Page:
 *    home:
 *       Title: Home
 *    about:
 *       Title: About Us
 *    staff:
 *       Title: Staff
 *       URLSegment: my-staff
 *       Parent: =>Page.about
 *    staffduplicate:
 *       Title: Staff
 *       URLSegment: my-staff
 *       Parent: =>Page.about
 *    products:
 *       Title: Products
 * ErrorPage:
 *    404:
 *      Title: Page not Found
 *      ErrorCode: 404
 * </code>
 * 
 * @package sapphire
 * @subpackage core
 * 
 * @see http://spyc.sourceforge.net/
 * 
 * @todo Write unit test for YamlFixture
 *  
 * @param $fixtureFile The location of the .yml fixture file, relative to the site base dir
 */",
 "/**
 * The SSAkismet class provides spam detection for comments using http://akismet.com/. 
 * In order to use it, you must get an API key, which you can get free for non-commercial use by signing 
 * up for a http://www.wordpress.com account. Commercial keys can be bought at http://akismet.com/commercial/.
 * 
 * To enable spam detection, set your API key in _config.php.  
 * The following lines should be added to **mysite/_config.php** 
 * (or to the _config.php in another folder if you\'re not using mysite). 
 * 
 * <code>
 * SSAkismet::setAPIKey(\'<your-key>\');
 * </code>
 * 
 * You can then view spam for a page by appending <i>?showspam=1</i> to the url, or use the {@link CommentAdmin} in the CMS.
 * 
 * @see http://demo.silverstripe.com/blog Demo of SSAkismet in action
 * 
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * @param $name
	 */",
 "/**
	 * Gets a global token (or creates one if it doesnt exist already).
	 * 
	 * @return SecurityToken
	 */",
 "/**
	 * Globally disable the token (override with {@link NullSecurityToken})
	 * implementation. Note: Does not apply for 
	 */",
 "/**
	 * Globally enable tokens that have been previously disabled through {@link disable}.
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * @param String $val
	 */",
 "/**
	 * Checks for an existing CSRF token in the current users session.
	 * This check is automatically performed in {@link Form->httpSubmission()}
	 * if a form has security tokens enabled.
	 * This direct check is mainly used for URL actions on {@link FormField} that are not routed
	 * through {@link Form->httpSubmission()}.
	 * 
	 * Typically you\'ll want to check {@link Form->securityTokenEnabled()} before calling this method.
	 * 
	 * @param String $compare
	 * @return Boolean
	 */",
 "/**
	 * See {@link check()}.
	 * 
	 * @param SS_HTTPRequest $request
	 * @return Boolean
	 */",
 "/**
	 * Note: Doesn\'t call {@link FormField->setForm()}
	 * on the returned {@link HiddenField}, you\'ll need to take
	 * care of this yourself.
	 * 
	 * @param FieldSet $fieldset
	 * @return HiddenField|false
	 */",
 "/**
	 * @param String $url
	 * @return String
	 */",
 "/**
	 * You can\'t disable an existing instance, it will need to be overwritten like this:
	 * <code>
	 * $old = SecurityToken::inst(); // isEnabled() returns true
	 * SecurityToken::disable();
	 * $new = SecurityToken::inst(); // isEnabled() returns false
	 * </code>
	 * 
	 * @return boolean
	 */",
 "/**
	 * @uses RandomGenerator
	 * 
	 * @return String
	 */",
 "/**
 * Cross Site Request Forgery (CSRF) protection for the {@link Form} class and other GET links.
 * Can be used globally (through {@link SecurityToken::inst()})
 * or on a form-by-form basis {@link Form->getSecurityToken()}.
 * 
 * <b>Usage in forms</b>
 * 
 * This protective measure is automatically turned on for all new {@link Form} instances,
 * and can be globally disabled through {@link disable()}.
 * 
 * <b>Usage in custom controller actions</b>
 * 
 * <code>
 * class MyController extends Controller {
 * 	function mygetaction($request) {
 * 		if(!SecurityToken::inst()->checkRequest($request)) return $this->httpError(400);
 * 
 * 		// valid action logic ...
 * 	}
 * }
 * </code>
 * 
 * @todo Make token name form specific for additional forgery protection.
 */",
 "/**
	 * @param String
	 * @return boolean
	 */",
 "/**
	 * @param SS_HTTPRequest $request
	 * @return Boolean
	 */",
 "/**
	 * @param FieldSet $fieldset
	 * @return false
	 */",
 "/**
	 * @param String $url
	 * @return String
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * @param String $val
	 */",
 "/**
	 * @return String
	 */",
 "/**
 * Specialized subclass for disabled security tokens - always returns
 * TRUE for token checks. Use through {@link SecurityToken::disable()}.
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param string $name        Tag name.
     *    @param hash $attributes    Attribute names and
     *                               string values. Note that
     *                               the keys must have been
     *                               converted to lower case.
     */",
 "/**
     *    Check to see if the tag can have both start and
     *    end tags with content in between.
     *    @return boolean        True if content allowed.
     *    @access public
     */",
 "/**
     *    The current tag should not swallow all content for
     *    itself as it\'s searchable page content. Private
     *    content tags are usually widgets that contain default
     *    values.
     *    @return boolean        False as content is available
     *                           to other tags by default.
     *    @access public
     */",
 "/**
     *    Appends string content to the current content.
     *    @param string $content        Additional text.
     *    @access public
     */",
 "/**
     *    Adds an enclosed tag to the content.
     *    @param SimpleTag $tag    New tag.
     *    @access public
     */",
 "/**
     *    Accessor for tag name.
     *    @return string       Name of tag.
     *    @access public
     */",
 "/**
     *    List of legal child elements.
     *    @return array        List of element names.
     *    @access public
     */",
 "/**
     *    Accessor for an attribute.
     *    @param string $label    Attribute name.
     *    @return string          Attribute value.
     *    @access public
     */",
 "/**
     *    Sets an attribute.
     *    @param string $label    Attribute name.
     *    @return string $value   New attribute value.
     *    @access protected
     */",
 "/**
     *    Accessor for the whole content so far.
     *    @return string       Content as big raw string.
     *    @access public
     */",
 "/**
     *    Accessor for content reduced to visible text. Acts
     *    like a text mode browser, normalising space and
     *    reducing images to their alt text.
     *    @return string       Content as plain text.
     *    @access public
     */",
 "/**
     *    Test to see if id attribute matches.
     *    @param string $id        ID to test against.
     *    @return boolean          True on match.
     *    @access public
     */",
 "/**
 *    HTML or XML tag.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Base tag is not a block tag.
     *    @return boolean       false
     *    @access public
     */",
 "/**
 *    Base url.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
 *    Page title.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Accessor for URL as string.
     *    @return string    Coerced as string.
     *    @access public
     */",
 "/**
 *    Link.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param string $name        Tag name.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Accessor for name submitted as the key in
     *    GET/POST variables hash.
     *    @return string        Parsed value.
     *    @access public
     */",
 "/**
     *    Accessor for default value parsed with the tag.
     *    @return string        Parsed value.
     *    @access public
     */",
 "/**
     *    Accessor for currently set value or default if
     *    none.
     *    @return string      Value set by form or default
     *                        if none.
     *    @access public
     */",
 "/**
     *    Sets the current form element value.
     *    @param string $value       New value.
     *    @return boolean            True if allowed.
     *    @access public
     */",
 "/**
     *    Resets the form element value back to the
     *    default.
     *    @access public
     */",
 "/**
     *    Allows setting of a label externally, say by a
     *    label tag.
     *    @param string $label    Label to attach.
     *    @access public
     */",
 "/**
     *    Reads external or internal label.
     *    @param string $label    Label to test.
     *    @return boolean         True is match.
     *    @access public
     */",
 "/**
     *    Dispatches the value into the form encoded packet.
     *    @param SimpleEncoding $encoding    Form packet.
     *    @access public
     */",
 "/**
 *    Form element.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Tag contains no content.
     *    @return boolean        False.
     *    @access public
     */",
 "/**
     *    Sets the current form element value. Cannot
     *    change the value of a hidden field.
     *    @param string $value       New value.
     *    @return boolean            True if allowed.
     *    @access public
     */",
 "/**
 *    Text, password and hidden field.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Tag contains no end element.
     *    @return boolean        False.
     *    @access public
     */",
 "/**
     *    Disables the setting of the button value.
     *    @param string $value       Ignored.
     *    @return boolean            True if allowed.
     *    @access public
     */",
 "/**
     *    Value of browser visible text.
     *    @return string        Visible label.
     *    @access public
     */",
 "/**
     *    Test for a label match when searching.
     *    @param string $label     Label to test.
     *    @return boolean          True on match.
     *    @access public
     */",
 "/**
 *    Submit button as input tag.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Tag contains no end element.
     *    @return boolean        False.
     *    @access public
     */",
 "/**
     *    Disables the setting of the button value.
     *    @param string $value       Ignored.
     *    @return boolean            True if allowed.
     *    @access public
     */",
 "/**
     *    Value of browser visible text.
     *    @return string        Visible label.
     *    @access public
     */",
 "/**
     *    Test for a label match when searching.
     *    @param string $label     Label to test.
     *    @return boolean          True on match.
     *    @access public
     */",
 "/**
     *    Dispatches the value into the form encoded packet.
     *    @param SimpleEncoding $encoding    Form packet.
     *    @param integer $x                  X coordinate of click.
     *    @param integer $y                  Y coordinate of click.
     *    @access public
     */",
 "/**
 *    Image button as input tag.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    Defaults are very browser dependent.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Check to see if the tag can have both start and
     *    end tags with content in between.
     *    @return boolean        True if content allowed.
     *    @access public
     */",
 "/**
     *    Disables the setting of the button value.
     *    @param string $value       Ignored.
     *    @return boolean            True if allowed.
     *    @access public
     */",
 "/**
     *    Value of browser visible text.
     *    @return string        Visible label.
     *    @access public
     */",
 "/**
     *    Test for a label match when searching.
     *    @param string $label     Label to test.
     *    @return boolean          True on match.
     *    @access public
     */",
 "/**
 *    Submit button as button tag.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Accessor for starting value.
     *    @return string        Parsed value.
     *    @access public
     */",
 "/**
     *    Applies word wrapping if needed.
     *    @param string $value      New value.
     *    @return boolean            True if allowed.
     *    @access public
     */",
 "/**
     *    Test to see if text should be wrapped.
     *    @return boolean        True if wrapping on.
     *    @access private
     */",
 "/**
     *    Performs the formatting that is peculiar to
     *    this tag. There is strange behaviour in this
     *    one, including stripping a leading new line.
     *    Go figure. I am using Firefox as a guide.
     *    @param string $text    Text to wrap.
     *    @return string         Text wrapped with carriage
     *                           returns and line feeds
     *    @access private
     */",
 "/**
     *    The content of textarea is not part of the page.
     *    @return boolean        True.
     *    @access public
     */",
 "/**
 *    Content tag for text area.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Tag contains no content.
     *    @return boolean        False.
     *    @access public
     */",
 "/**
     *    Dispatches the value into the form encoded packet.
     *    @param SimpleEncoding $encoding    Form packet.
     *    @access public
     */",
 "/**
 *    File upload widget.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Adds an option tag to a selection field.
     *    @param SimpleOptionTag $tag     New option.
     *    @access public
     */",
 "/**
     *    Text within the selection element is ignored.
     *    @param string $content        Ignored.
     *    @access public
     */",
 "/**
     *    Scans options for defaults. If none, then
     *    the first option is selected.
     *    @return string        Selected field.
     *    @access public
     */",
 "/**
     *    Can only set allowed values.
     *    @param string $value       New choice.
     *    @return boolean            True if allowed.
     *    @access public
     */",
 "/**
     *    Accessor for current selection value.
     *    @return string      Value attribute or
     *                        content of opton.
     *    @access public
     */",
 "/**
 *    Drop down widget.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Adds an option tag to a selection field.
     *    @param SimpleOptionTag $tag     New option.
     *    @access public
     */",
 "/**
     *    Text within the selection element is ignored.
     *    @param string $content        Ignored.
     *    @access public
     */",
 "/**
     *    Scans options for defaults to populate the
     *    value array().
     *    @return array        Selected fields.
     *    @access public
     */",
 "/**
     *    Can only set allowed values. Any illegal value
     *    will result in a failure, but all correct values
     *    will be set.
     *    @param array $desired      New choices.
     *    @return boolean            True if all allowed.
     *    @access public
     */",
 "/**
     *    Accessor for current selection value.
     *    @return array      List of currently set options.
     *    @access public
     */",
 "/**
 *    Drop down widget.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Stashes the attributes.
     */",
 "/**
     *    Does nothing.
     *    @param string $value      Ignored.
     *    @return boolean           Not allowed.
     *    @access public
     */",
 "/**
     *    Test to see if a value matches the option.
     *    @param string $compare    Value to compare with.
     *    @return boolean           True if possible match.
     *    @access public
     */",
 "/**
     *    Accessor for starting value. Will be set to
     *    the option label if no value exists.
     *    @return string        Parsed value.
     *    @access public
     */",
 "/**
     *    The content of options is not part of the page.
     *    @return boolean        True.
     *    @access public
     */",
 "/**
 *    Option for selection field.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Stashes the attributes.
     *    @param array $attributes        Hash of attributes.
     */",
 "/**
     *    Tag contains no content.
     *    @return boolean        False.
     *    @access public
     */",
 "/**
     *    The only allowed value sn the one in the
     *    \"value\" attribute.
     *    @param string $value      New value.
     *    @return boolean           True if allowed.
     *    @access public
     */",
 "/**
     *    Accessor for starting value.
     *    @return string        Parsed value.
     *    @access public
     */",
 "/**
 *    Radio button.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Tag contains no content.
     *    @return boolean        False.
     *    @access public
     */",
 "/**
     *    The only allowed value in the one in the
     *    \"value\" attribute. The default for this
     *    attribute is \"on\". If this widget is set to
     *    true, then the usual value will be taken.
     *    @param string $value      New value.
     *    @return boolean           True if allowed.
     *    @access public
     */",
 "/**
     *    Accessor for starting value. The default
     *    value is \"on\".
     *    @return string        Parsed value.
     *    @access public
     */",
 "/**
 *    Checkbox widget.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Adds a tag to the group.
     *    @param SimpleWidget $widget
     *    @access public
     */",
 "/**
     *    Accessor to widget set.
     *    @return array        All widgets.
     *    @access protected
     */",
 "/**
     *    Accessor for an attribute.
     *    @param string $label    Attribute name.
     *    @return boolean         Always false.
     *    @access public
     */",
 "/**
     *    Fetches the name for the widget from the first
     *    member.
     *    @return string        Name of widget.
     *    @access public
     */",
 "/**
     *    Scans the widgets for one with the appropriate
     *    ID field.
     *    @param string $id        ID value to try.
     *    @return boolean          True if matched.
     *    @access public
     */",
 "/**
     *    Scans the widgets for one with the appropriate
     *    attached label.
     *    @param string $label     Attached label to try.
     *    @return boolean          True if matched.
     *    @access public
     */",
 "/**
     *    Dispatches the value into the form encoded packet.
     *    @param SimpleEncoding $encoding    Form packet.
     *    @access public
     */",
 "/**
 *    A group of multiple widgets with some shared behaviour.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Accessor for current selected widget or false
     *    if none.
     *    @return string/array     Widget values or false if none.
     *    @access public
     */",
 "/**
     *    Accessor for starting value that is active.
     *    @return string/array      Widget values or false if none.
     *    @access public
     */",
 "/**
     *    Accessor for current set values.
     *    @param string/array/boolean $values   Either a single string, a
     *                                          hash or false for nothing set.
     *    @return boolean                       True if all values can be set.
     *    @access public
     */",
 "/**
     *    Tests to see if a possible value set is legal.
     *    @param string/array/boolean $values   Either a single string, a
     *                                          hash or false for nothing set.
     *    @return boolean                       False if trying to set a
     *                                          missing value.
     *    @access private
     */",
 "/**
     *    Converts the output to an appropriate format. This means
     *    that no values is false, a single value is just that
     *    value and only two or more are contained in an array.
     *    @param array $values           List of values of widgets.
     *    @return string/array/boolean   Expected format for a tag.
     *    @access private
     */",
 "/**
     *    Converts false or string into array. The opposite of
     *    the coercian method.
     *    @param string/array/boolean $value  A single item is converted
     *                                        to a one item list. False
     *                                        gives an empty list.
     *    @return array                       List of values, possibly empty.
     *    @access private
     */",
 "/**
 *    A group of tags with the same name within a form.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Each tag is tried in turn until one is
     *    successfully set. The others will be
     *    unchecked if successful.
     *    @param string $value      New value.
     *    @return boolean           True if any allowed.
     *    @access public
     */",
 "/**
     *    Tests to see if a value is allowed.
     *    @param string    Attempted value.
     *    @return boolean  True if a valid value.
     *    @access private
     */",
 "/**
     *    Accessor for current selected widget or false
     *    if none.
     *    @return string/boolean   Value attribute or
     *                             content of opton.
     *    @access public
     */",
 "/**
     *    Accessor for starting value that is active.
     *    @return string/boolean      Value of first checked
     *                                widget or false if none.
     *    @access public
     */",
 "/**
 *    A group of tags with the same name within a form.
 *    Used for radio buttons.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Access for the ID to attach the label to.
     *    @return string        For attribute.
     *    @access public
     */",
 "/**
 *    Tag to keep track of labels.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
 *    Tag to aid parsing the form.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts with a named tag with attributes only.
     *    @param hash $attributes    Attribute names and
     *                               string values.
     */",
 "/**
     *    Tag contains no content.
     *    @return boolean        False.
     *    @access public
     */",
 "/**
 *    Tag to aid parsing the frames in a page.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
	 * Generate breadcrumb links to the URL path being displayed
	 *
	 * @return string
	 */",
 "/**
	 * Render HTML header for development views
	 */",
 "/**
	 * Render the information header for the view
	 * 
	 * @param string $title
	 * @param string $title
	 */",
 "/**
	 * Render HTML footer for development views
	 */",
 "/**
	 * Write information about the error to the screen
	 */",
 "/**
	 * Write a fragment of the a source file
	 * @param $lines An array of file lines; the keys should be the original line numbers
	 */",
 "/**
	 * Write a backtrace
	 */",
 "/**
	 * @param string $text
	 */",
 "/**
 * A basic HTML wrapper for stylish rendering of a developement info view.
 * Used to output error messages, and test results.
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Set up template methods to access the transformations generated by \'generate\' methods.
	 */",
 "/**
	 * An image exists if it has a filename.
	 * Does not do any filesystem checks.
	 * 
	 * @return boolean
	 */",
 "/**
	 * Return an XHTML img tag for this Image,
	 * or NULL if the image file doesn\'t exist on the filesystem.
	 * 
	 * @return string
	 */",
 "/**
	 * Return an XHTML img tag for this Image.
	 * 
	 * @return string
	 */",
 "/**
	 * Resize this Image by width, keeping aspect ratio. Use in templates with $SetWidth.
	 * @return GD
	 */",
 "/**
	 * Resize this Image by height, keeping aspect ratio. Use in templates with $SetHeight.
	 * @return GD
	 */",
 "/**
	 * Resize this Image by both width and height, using padded resize. Use in templates with $SetSize.
	 * @return GD
	 */",
 "/**
	 * Resize this image for the CMS. Use in templates with $CMSThumbnail.
	 * @return GD
	 */",
 "/**
	 * Resize this image for preview in the Asset section. Use in templates with $AssetLibraryPreview.
	 * @return GD
	 */",
 "/**
	 * Resize this image for thumbnail in the Asset section. Use in templates with $AssetLibraryThumbnail.
	 * @return GD
	 */",
 "/**
	 * Resize this image for use as a thumbnail in a strip. Use in templates with $StripThumbnail.
	 * @return GD
	 */",
 "/**
	 * Return an image object representing the image in the given format.
	 * This image will be generated using generateFormattedImage().
	 * The generated image is cached, to flush the cache append ?flush=1 to your URL.
	 * @param string $format The name of the format.
	 * @param string $arg1 An argument to pass to the generate function.
	 * @param string $arg2 A second argument to pass to the generate function.
	 * @return Image_Cached
	 */",
 "/**
	 * Return the filename for the cached image, given it\'s format name and arguments.
	 * @param string $format The format name.
	 * @param string $arg1 The first argument passed to the generate function.
	 * @param string $arg2 The second argument passed to the generate function.
	 * @return string
	 */",
 "/**
	 * Generate an image on the specified format. It will save the image
	 * at the location specified by cacheFilename(). The image will be generated
	 * using the specific \'generate\' method for the specified format.
	 * @param string $format Name of the format to generate.
	 * @param string $arg1 Argument to pass to the generate method.
	 * @param string $arg2 A second argument to pass to the generate method.
	 */",
 "/**
	 * Generate a resized copy of this image with the given width & height.
	 * Use in templates with $ResizedImage.
	 */",
 "/**
	 * Generate a resized copy of this image with the given width & height, cropping to maintain aspect ratio.
	 * Use in templates with $CroppedImage
	 */",
 "/**
	 * Remove all of the formatted cached images for this image.
	 * @return int The number of formatted images deleted
	 */",
 "/**
	 * Get the dimensions of this Image.
	 * @param string $dim If this is equal to \"string\", return the dimensions in string form,
	 * if it is 0 return the height, if it is 1 return the width.
	 * @return string|int
	 */",
 "/**
	 * Get the width of this image.
	 * @return int
	 */",
 "/**
	 * Get the height of this image.
	 * @return int
	 */",
 "/**
	 * Get the orientation of this image.
	 * @return ORIENTATION_SQUARE|ORIENTATION_PORTRAIT|ORIENTATION_LANDSCAPE
	 */",
 "/**
 * Represents an image attached to a page.
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
	 * Create a new cached image.
	 * @param string $filename The filename of the image.
	 * @param boolean $isSingleton This this to true if this is a singleton() object, a stub for calling methods.  Singletons
	 * don\'t have their defaults set.
	 */",
 "/**
 * A resized / processed {@link Image} object.
 * When Image object are processed or resized, a suitable Image_Cached object is returned, pointing to the
 * cached copy of the processed image.
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
 * Text field that automatically checks that the value entered is unique for the given
 * set of fields in a given set of tables
 * @deprecated 2.3
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
 * @todo Migrate Permission->Arg and Permission->Type values
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
     * Return an array of stored cache ids
     * 
     * @return array array of stored cache ids (string)
     */",
 "/**
     * Return an array of stored tags
     *
     * @return array array of stored tags (string)
     */",
 "/**
     * Return an array of stored cache ids which match given tags
     * 
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which don\'t match given tags
     * 
     * In case of multiple tags, a logical OR is made between tags
     *
     * @param array $tags array of tags
     * @return array array of not matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which match any given tags
     * 
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of any matching cache ids (string)
     */",
 "/**
     * Return the filling percentage of the backend storage
     *
     * @return int integer between 0 and 100
     */",
 "/**
     * Return an array of metadatas for the given cache id
     *
     * The array must include these keys :
     * - expire : the expire timestamp
     * - tags : a string array of tags
     * - mtime : timestamp of last modification time
     * 
     * @param string $id cache id
     * @return array array of metadatas (false if the cache id is not found)
     */",
 "/**
     * Give (if possible) an extra lifetime to the given cache id
     *
     * @param string $id cache id
     * @param int $extraLifetime
     * @return boolean true if ok
     */",
 "/**
     * Return an associative array of capabilities (booleans) of the backend
     * 
     * The array must include these keys :
     * - automatic_cleaning (is automating cleaning necessary)
     * - tags (are tags supported)
     * - expired_read (is it possible to read expired cache records
     *                 (for doNotTestCacheValidity option for example))
     * - priority does the backend deal with priority when saving
     * - infinite_lifetime (is infinite lifetime can work with this backend)
     * - get_list (is it possible to get the list of cache ids and the complete list of tags)
     * 
     * @return array associative of with capabilities
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 	 * Implement this method in the task subclass to
	 * execute via the TaskRunner
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return string HTML formatted description
	 */",
 "/**
 * Interface for a generic build task. Does not support dependencies. This will simply
 * run a chunk of code when called.
 * 
 * To disable the task (in the case of potentially destructive updates or deletes), declare
 * the $Disabled property on the subclass.
 * 
 * @todo move from sapphire/testing to sapphire/dev or sapphire/development?
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Note: Returned values are not guaranteed to be crypto-safe,
	 * depending on the used retrieval method.
	 * 
	 * @return string Returns a random series of bytes
	 */",
 "/**
	 * Generates a hash suitable for manual session identifiers, CSRF tokens, etc.
	 * 
	 * @param String $algorithm Any identifier listed in hash_algos() (Default: whirlpool)
	 *  If possible, choose a slow algorithm which complicates brute force attacks.
	 * @return String Returned length will depend on the used $algorithm
	 */",
 "/**
 * Generates entropy values based on strongest available methods
 * (mcrypt_create_iv(), openssl_random_pseudo_bytes(), /dev/urandom, COM.CAPICOM.Utilities.1, mt_rand()).
 * Chosen method depends on operating system and PHP version.
 * 
 * @package sapphire
 * @subpackage security
 * @author Ingo Schommer
 */",
 "/**
	 * Turns a local system filename into a URL by comparing it to the script filename
	 */",
 "/**
	 * Turn all relative URLs in the content to absolute URLs
	 */",
 "/**
	 * Will try to include a GET parameter for an existing URL,
	 * preserving existing parameters and fragments.
	 * If no URL is given, falls back to $_SERVER[\'REQUEST_URI\'].
	 * Uses parse_url() to dissect the URL, and http_build_query() to reconstruct it
	 * with the additional parameter. Converts any \'&\' (ampersand)
	 * URL parameter separators to the more XHTML compliant \'&amp;\'.
	 * 
	 * CAUTION: If the URL is determined to be relative,
	 * it is prepended with Director::absoluteBaseURL().
	 * This method will always return an absolute URL because
	 * Director::makeRelative() can lead to inconsistent results.
	 * 
	 * @param String $varname
	 * @param String $varvalue
	 * @param String $currentURL Relative or absolute URL (Optional).
	 * @param String $separator Separator for http_build_query(). (Optional).
	 * @return String Absolute URL
	 */",
 "/**
	 * Search for all tags with a specific attribute, then return the value of that attribute in a flat array.
	 *
	 * @param string $content
	 * @param array $attributes an array of tags to attributes, for example \"[a] => \'href\', [div] => \'id\'\"
	 * @return array
	 */",
 "/**
	 * Send an HTTP request to the host.
	 *
	 * @return String Response text
	 */",
 "/**
	 * Send a HTTP POST request through fsockopen().
	 *
	 * @param string $host Absolute URI without path, e.g. http://silverstripe.com
	 * @param string $path Path with leading slash
	 * @param array|string $data Payload for the request
	 * @param string $name Parametername for the payload (only if passed as a string)
	 * @param string $query
	 * @param string $port
	 * @return string Raw HTTP-result including headers
	 */",
 "/**
	 * Set the maximum age of this page in web caches, in seconds
	 */",
 "/**
	 * Add the appropriate caching headers to the response, including If-Modified-Since / 304 handling.
	 *
	 * @param SS_HTTPResponse The SS_HTTPResponse object to augment.  Omitted the argument or passing a string is deprecated; in these
	 * cases, the headers are output directly.
	 */",
 "/**
	 * Return an {@link http://www.faqs.org/rfcs/rfc2822 RFC 2822} date in the
	 * GMT timezone (a timestamp is always in GMT: the number of seconds
	 * since January 1 1970 00:00:00 GMT)
	 */",
 "/**
 * A class with HTTP-related helpers.
 * Like Debug, this is more a bundle of methods than a class ;-)
 * 
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * This handler acts as the switchboard for the controller.
	 * Since no $Action url-param is set, all requests are sent here.
	 */",
 "/**
	 * Handler for object read.
	 * 
	 * The data object will be returned in the following format:
	 *
	 * <ClassName>
	 *   <FieldName>Value</FieldName>
	 *   ...
	 *   <HasOneRelName id=\"ForeignID\" href=\"LinkToForeignRecordInAPI\" />
	 *   ...
	 *   <HasManyRelName>
	 *     <ForeignClass id=\"ForeignID\" href=\"LinkToForeignRecordInAPI\" />
	 *     <ForeignClass id=\"ForeignID\" href=\"LinkToForeignRecordInAPI\" />
	 *   </HasManyRelName>
	 *   ...
	 *   <ManyManyRelName>
	 *     <ForeignClass id=\"ForeignID\" href=\"LinkToForeignRecordInAPI\" />
	 *     <ForeignClass id=\"ForeignID\" href=\"LinkToForeignRecordInAPI\" />
	 *   </ManyManyRelName>
	 * </ClassName>
	 *
	 * Access is controlled by two variables:
	 * 
	 *   - static $api_access must be set. This enables the API on a class by class basis
	 *   - $obj->canView() must return true. This lets you implement record-level security
	 * 
	 * @todo Access checking
	 * 
	 * @param String $className
	 * @param Int $id
	 * @param String $relation
	 * @return String The serialized representation of the requested object(s) - usually XML or JSON.
	 */",
 "/**
	 * Uses the default {@link SearchContext} specified through
	 * {@link DataObject::getDefaultSearchContext()} to augument
	 * an existing query object (mostly a component query from {@link DataObject})
	 * with search clauses. 
	 * 
	 * @todo Allow specifying of different searchcontext getters on model-by-model basis
	 *
	 * @param string $className
	 * @param array $params
	 * @return DataObjectSet
	 */",
 "/**
	 * Returns a dataformatter instance based on the request
	 * extension or mimetype. Falls back to {@link self::$default_extension}.
	 * 
	 * @param boolean $includeAcceptHeader Determines wether to inspect and prioritize any HTTP Accept headers 
	 * @return DataFormatter
	 */",
 "/**
	 * Handler for object delete
	 */",
 "/**
	 * Handler for object write
	 */",
 "/**
	 * Handler for object append / method call.
	 * 
	 * @todo Posting to an existing URL (without a relation)
	 * current resolves in creatig a new element,
	 * rather than a \"Conflict\" message.
	 */",
 "/**
	 * Converts either the given HTTP Body into an array
	 * (based on the DataFormatter instance), or returns
	 * the POST variables.
	 * Automatically filters out certain critical fields
	 * that shouldn\'t be set by the client (e.g. ID).
	 *
	 * @param DataObject $obj
	 * @param DataFormatter $formatter
	 * @return DataObject The passed object
	 */",
 "/**
	 * Gets a single DataObject by ID,
	 * through a request like /api/v1/<MyClass>/<MyID>
	 * 
	 * @param string $className
	 * @param int $id
	 * @param array $params
	 * @return SQLQuery
	 */",
 "/**
	 * @param DataObject $obj
	 * @param array $params
	 * @param int|array $sort
	 * @param int|array $limit
	 * @return SQLQuery
	 */",
 "/**
	 * @param DataObject $obj
	 * @param array $params
	 * @param int|array $sort
	 * @param int|array $limit
	 * @param string $relationName
	 * @return SQLQuery|boolean
	 */",
 "/**
	 * Return only relations which have $api_access enabled.
	 * @todo Respect field level permissions once they are available in core
	 * 
	 * @param string $class
	 * @param Member $member
	 * @return array
	 */",
 "/**
 * Sapphire\'s generic RESTful server.
 * 
 * This class gives your application a RESTful API for free.  All you have to do is define static $api_access = true on
 * the appropriate DataObjects.  You will need to ensure that all of your data manipulation and security is defined in
 * your model layer (ie, the DataObject classes) and not in your Controllers.  This is the recommended design for Sapphire
 * applications.
 * 
 * Enabling restful access on a model will also enable a SOAP API, see {@link SOAPModelAccess}.
 * 
 * Example DataObject with simple api access, giving full access to all object properties and relations,
 * unless explicitly controlled through model permissions.
 * <code>
 * class Article extends DataObject {
 * 	static $db = array(\'Title\'=>\'Text\',\'Published\'=>\'Boolean\');
 * 	static $api_access = true;
 * }
 * </code>
 *
 * * Example DataObject with advanced api access, limiting viewing and editing to Title attribute only:
 * <code>
 * class Article extends DataObject {
 * 	static $db = array(\'Title\'=>\'Text\',\'Published\'=>\'Boolean\');
 * 	static $api_access = array(
 * 		\'view\' => array(\'Title\'),
 * 		\'edit\' => array(\'Title\'),
 * 	);
 * }
 * </code>
 * 
 * <b>Supported operations</b>
 * 
 *  - GET /api/v1/(ClassName)/(ID) - gets a database record
 *  - GET /api/v1/(ClassName)/(ID)/(Relation) - get all of the records linked to this database record by the given reatlion
 *  - GET /api/v1/(ClassName)?(Field)=(Val)&(Field)=(Val) - searches for matching database records
 *  - POST /api/v1/(ClassName) - create a new database record
 *  - PUT /api/v1/(ClassName)/(ID) - updates a database record
 *  - PUT /api/v1/(ClassName)/(ID)/(Relation) - updates a relation, replacing the existing record(s) (NOT IMPLEMENTED YET)
 *  - POST /api/v1/(ClassName)/(ID)/(Relation) - updates a relation, appending to the existing record(s) (NOT IMPLEMENTED YET)
 * 
 *  - DELETE /api/v1/(ClassName)/(ID) - deletes a database record (NOT IMPLEMENTED YET)
 *  - DELETE /api/v1/(ClassName)/(ID)/(Relation)/(ForeignID) - remove the relationship between two database records, but don\'t actually delete the foreign object (NOT IMPLEMENTED YET)
 *
 *  - POST /api/v1/(ClassName)/(ID)/(MethodName) - executes a method on the given object (e.g, publish)
 * 
 * <b>Search</b>
 * 
 * You can trigger searches based on the fields specified on {@link DataObject::searchable_fields} and passed
 * through {@link DataObject::getDefaultSearchContext()}. Just add a key-value pair with the search-term
 * to the url, e.g. /api/v1/(ClassName)/?Title=mytitle.
 * 
 * <b>Other url-modifiers</b>
 * 
 * - &limit=<numeric>: Limit the result set
 * - &relationdepth=<numeric>: Displays links to existing has-one and has-many relationships to a certain depth (Default: 1)
 * - &fields=<string>: Comma-separated list of fields on the output object (defaults to all database-columns).
 *   Handy to limit output for bandwidth and performance reasons.
 * - &sort=<myfield>&dir=<asc|desc>
 * - &add_fields=<string>: Comma-separated list of additional fields, for example dynamic getters.
 * 
 * <b>Access control</b>
 *
 * Access control is implemented through the usual Member system with Basicauth authentication only.
 * By default, you have to bear the ADMIN permission to retrieve or send any data.
 *
 * You should override the following built-in methods to customize permission control on a
 * class- and object-level:
 * - {@link DataObject::canView()}
 * - {@link DataObject::canEdit()}
 * - {@link DataObject::canDelete()}
 * - {@link DataObject::canCreate()}
 * See {@link DataObject} documentation for further details.
 * 
 * You can specify the character-encoding for any input on the HTTP Content-Type.
 * At the moment, only UTF-8 is supported. All output is made in UTF-8 regardless of Accept headers.
 * 
 * @todo Finish RestfulServer_Item and RestfulServer_List implementation and re-enable $url_handlers
 * @todo Implement PUT/POST/DELETE for relations
 * @todo Access-Control for relations (you might be allowed to view Members and Groups, but not their relation with each other)
 * @todo Make SearchContext specification customizeable for each class
 * @todo Allow for range-searches (e.g. on Created column)
 * @todo Allow other authentication methods (currently only HTTP BasicAuth)
 * @todo Filter relation listings by $api_access and canView() permissions
 * @todo Exclude relations when \"fields\" are specified through URL (they should be explicitly requested in this case)
 * @todo Custom filters per DataObject subclass, e.g. to disallow showing unpublished pages in SiteTree/Versioned/Hierarchy
 * @todo URL parameter namespacing for search-fields, limit, fields, add_fields (might all be valid dataobject properties)
 *       e.g. you wouldn\'t be able to search for a \"limit\" property on your subclass as its overlayed with the search logic
 * @todo i18n integration (e.g. Page/1.xml?lang=de_DE)
 * @todo Access to decoratable methods/relations like SiteTree/1/Versions or SiteTree/1/Version/22
 * @todo Respect $api_access array notation in search contexts
 * 
 * @package sapphire
 * @subpackage api
 */",
 "/**
 * Restful server handler for a DataObjectSet
 * 
 * @package sapphire
 * @subpackage api
 */",
 "/**
 * Restful server handler for a single DataObject
 * 
 * @package sapphire
 * @subpackage api
 */",
 "/**
	 * Generate an XML representation of the given {@link DataObject}.
	 * 
	 * @param DataObject $obj
	 * @param $includeHeader Include <?xml ...?> header (Default: true)
	 * @return String XML
	 */",
 "/**
	 * Generate an XML representation of the given {@link DataObjectSet}.
	 * 
	 * @param DataObjectSet $set
	 * @return String XML
	 */",
 "/**
 * @package sapphire
 * @subpackage formatters
 */",
 "/**
	 * Include the manifest, regenerating it if necessary
	 */",
 "/**
	 * Load a copy of the manifest with tests/ folders included.
	 * Only loads the ClassInfo and __autoload() globals; this assumes that _config.php files are already included.
	 */",
 "/**
	 * Loads all PHP class files - actually opening them and executing them.
	 */",
 "/**
	 * Generates a new manifest file and saves it to {@link MANIFEST_FILE}.
	 */",
 "/**
	 * Turn an array produced by get_manifest_info() into the content of the manifest PHP include
	 */",
 "/**
 	 * Parse the $manifestInfo array, updating the appropriate globals and loading the appropriate _config files.
 	 */",
 "/**
	 * Get themes from a particular directory.
	 * 
	 * @param string $baseDir Optional: Absolute path to theme directory for testing e.g. \"/Users/sharvey/Sites/test24/themes\"
	 * @param boolean $includeSubThemes If set to TRUE, sub-themes such as \"blackcandy_blog\" are included too
	 * @return array Listing of theme directories
	 */",
 "/**
	 * Return an array containing information for the manifest
	 * @param $baseDir The root directory to analyse
	 * @param $excludedFolders An array folder names to exclude.  These don\'t care about where the
	 *        folder appears in the hierarchy, so be careful
	 */",
 "/**
	 * Generates a list of all the PHP files that should be analysed by the manifest builder.
	 *
	 * @param string $folder The folder to traverse (recursively)
	 * @param array $classMap The already built class map
	 */",
 "/**
	 * Generates the template manifest - a list of all the .ss files in the
	 * application.
	 * 
	 * See {@link SSViewer} for an overview on the array structure this class creates.
	 * 
	 * @param String $baseDir
	 * @param String $folder
	 */",
 "/**
	 * Include everything, so that actually *all* classes are available and
	 * build a map of classes and their subclasses
	 * 
	 * @param $classManifest An array of all Sapphire classes; keys are class names and values are filenames
	 *
	 * @return array Returns an array that holds all class relevant
	 *               information.
	 */",
 "/**

	*

	*/",
 "/**


	*/",
 "/**


	*/",
 "/**

	*

	*/",
 "/**

	*

	*/",
 "/**

	*


	*/",
 "/**

	*

	*/",
 "/**

	*


	*/",
 "/**

*





*



*

*





*



*/",
 "/**
     *    Constructor. Sets the stored values.
     *    @param string $name            Cookie key.
     *    @param string $value           Value of cookie.
     *    @param string $path            Cookie path if not host wide.
     *    @param string $expiry          Expiry date as string.
     *    @param boolean $is_secure      Currently ignored.
     */",
 "/**
     *    Sets the host. The cookie rules determine
     *    that the first two parts are taken for
     *    certain TLDs and three for others. If the
     *    new host does not match these rules then the
     *    call will fail.
     *    @param string $host       New hostname.
     *    @return boolean           True if hostname is valid.
     *    @access public
     */",
 "/**
     *    Accessor for the truncated host to which this
     *    cookie applies.
     *    @return string       Truncated hostname.
     *    @access public
     */",
 "/**
     *    Test for a cookie being valid for a host name.
     *    @param string $host    Host to test against.
     *    @return boolean        True if the cookie would be valid
     *                           here.
     */",
 "/**
     *    Extracts just the domain part that determines a
     *    cookie\'s host validity.
     *    @param string $host    Host name to truncate.
     *    @return string        Domain or false on a bad host.
     *    @access private
     */",
 "/**
     *    Accessor for name.
     *    @return string       Cookie key.
     *    @access public
     */",
 "/**
     *    Accessor for value. A deleted cookie will
     *    have an empty string for this.
     *    @return string       Cookie value.
     *    @access public
     */",
 "/**
     *    Accessor for path.
     *    @return string       Valid cookie path.
     *    @access public
     */",
 "/**
     *    Tests a path to see if the cookie applies
     *    there. The test path must be longer or
     *    equal to the cookie path.
     *    @param string $path       Path to test against.
     *    @return boolean           True if cookie valid here.
     *    @access public
     */",
 "/**
     *    Accessor for expiry.
     *    @return string       Expiry string.
     *    @access public
     */",
 "/**
     *    Test to see if cookie is expired against
     *    the cookie format time or timestamp.
     *    Will give true for a session cookie.
     *    @param integer/string $now  Time to test against. Result
     *                                will be false if this time
     *                                is later than the cookie expiry.
     *                                Can be either a timestamp integer
     *                                or a cookie format date.
     *    @access public
     */",
 "/**
     *    Ages the cookie by the specified number of
     *    seconds.
     *    @param integer $interval   In seconds.
     *    @public
     */",
 "/**
     *    Accessor for the secure flag.
     *    @return boolean       True if cookie needs SSL.
     *    @access public
     */",
 "/**
     *    Adds a trailing and leading slash to the path
     *    if missing.
     *    @param string $path            Path to fix.
     *    @access private
     */",
 "/**
 *    Cookie data holder. Cookie rules are full of pretty
 *    arbitary stuff. I have used...
 *    http://wp.netscape.com/newsref/std/cookie_spec.html
 *    http://www.cookiecentral.com/faq/
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Constructor. Jar starts empty.
     *    @access public
     */",
 "/**
     *    Removes expired and temporary cookies as if
     *    the browser was closed and re-opened.
     *    @param string/integer $now   Time to test expiry against.
     *    @access public
     */",
 "/**
     *    Ages all cookies in the cookie jar.
     *    @param integer $interval     The old session is moved
     *                                 into the past by this number
     *                                 of seconds. Cookies now over
     *                                 age will be removed.
     *    @access public
     */",
 "/**
     *    Sets an additional cookie. If a cookie has
     *    the same name and path it is replaced.
     *    @param string $name       Cookie key.
     *    @param string $value      Value of cookie.
     *    @param string $host       Host upon which the cookie is valid.
     *    @param string $path       Cookie path if not host wide.
     *    @param string $expiry     Expiry date.
     *    @access public
     */",
 "/**
     *    Finds a matching cookie to write over or the
     *    first empty slot if none.
     *    @param SimpleCookie $cookie    Cookie to write into jar.
     *    @return integer                Available slot.
     *    @access private
     */",
 "/**
     *    Reads the most specific cookie value from the
     *    browser cookies. Looks for the longest path that
     *    matches.
     *    @param string $host        Host to search.
     *    @param string $path        Applicable path.
     *    @param string $name        Name of cookie to read.
     *    @return string             False if not present, else the
     *                               value as a string.
     *    @access public
     */",
 "/**
     *    Tests cookie for matching against search
     *    criteria.
     *    @param SimpleTest $cookie    Cookie to test.
     *    @param string $host          Host must match.
     *    @param string $path          Cookie path must be shorter than
     *                                 this path.
     *    @param string $name          Name must match.
     *    @return boolean              True if matched.
     *    @access private
     */",
 "/**
     *    Uses a URL to sift relevant cookies by host and
     *    path. Results are list of strings of form \"name=value\".
     *    @param SimpleUrl $url       Url to select by.
     *    @return array               Valid name and value pairs.
     *    @access public
     */",
 "/**
 *    Repository for cookies. This stuff is a
 *    tiny bit browser dependent.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     * Set this object to have a new UNIX timestamp.
     *
     * @param  string|integer  $timestamp  OPTIONAL timestamp; defaults to local time using time()
     * @return string|integer  old timestamp
     * @throws Zend_Date_Exception
     */",
 "/**
     * Returns this object\'s UNIX timestamp
     * A timestamp greater then the integer range will be returned as string
     * This function does not return the timestamp as object. Use copy() instead.
     *
     * @return  integer|string  timestamp
     */",
 "/**
     * Internal function.
     * Returns time().  This method exists to allow unit tests to work-around methods that might otherwise
     * be hard-coded to use time().  For example, this makes it possible to test isYesterday() in Date.php.
     *
     * @param   integer  $sync      OPTIONAL time syncronisation value
     * @return  integer  timestamp
     */",
 "/**
     * Internal mktime function used by Zend_Date.
     * The timestamp returned by mktime() can exceed the precision of traditional UNIX timestamps,
     * by allowing PHP to auto-convert to using a float value.
     *
     * Returns a timestamp relative to 1970/01/01 00:00:00 GMT/UTC.
     * DST (Summer/Winter) is depriciated since php 5.1.0.
     * Year has to be 4 digits otherwise it would be recognised as
     * year 70 AD instead of 1970 AD as expected !!
     *
     * @param  integer  $hour
     * @param  integer  $minute
     * @param  integer  $second
     * @param  integer  $month
     * @param  integer  $day
     * @param  integer  $year
     * @param  boolean  $gmt     OPTIONAL true = other arguments are for UTC time, false = arguments are for local time/date
     * @return  integer|float  timestamp (number of seconds elapsed relative to 1970/01/01 00:00:00 GMT/UTC)
     */",
 "/**
     * Returns true, if given $year is a leap year.
     *
     * @param  integer  $year
     * @return boolean  true, if year is leap year
     */",
 "/**

*

*




*/",
 "/**


*




*/",
 "/**


*

*


*



*/",
 "/**

*

*




*/",
 "/**


*


*/",
 "/**

*



*/",
 "/**



*



*/",
 "/**


*

*/",
 "/**



*

*/",
 "/**





*/",
 "/**
	 * Construct a DataDifferencer to show the changes between $fromRecord and $toRecord.
	 * If $fromRecord is null, this will represent a \"creation\".
	 */",
 "/**
	 * Specify some fields to ignore changes from.  Repeated calls are cumulative.
	 * @param $ignoredFields An array of field names to ignore.  Alternatively, pass the field names as
	 * separate args.
	 */",
 "/**
	 * Get a DataObject with altered values replaced with HTML diff strings, incorporating
	 * <ins> and <del> tags.
	 */",
 "/**
	 * Get a DataObjectSet of the changed fields.
	 * Each element is an array data containing
	 *  - Name: The field name
	 *  - Title: The human-readable field title
	 *  - Diff: An HTML diff showing the changes
	 *  - From: The older version of the field
	 *  - To: The newer version of the field
	 */",
 "/**
	 * Get an array of the names of every fields that has changed.
	 * This is simpler than {@link ChangedFields()}
	 */",
 "/**
 * Utility class to render views of the differences between two data objects (or two versions of the
 * same data object).
 * 
 * Construcing a diff object is done as follows:
 * <code>
 * $fromRecord = Versioned::get_version(\'SiteTree\', $pageID, $fromVersion);
 * $toRecord = Versioned::get_version(\'SiteTree, $pageID, $toVersion);
 * $diff = new DataDifferencer($fromRecord, $toRecord);
 * </code>
 * 
 * And then it can be used in a number of ways.  You can use the ChangedFields() method in a template:
 * <pre>
 * <dl class=\"diff\">
 * <% control Diff.ChangedFields %>
 *    <dt>$Title</dt>
 *    <dd>$Diff</dd>
 * <% end_control %>
 * </dl>
 * </pre>
 * 
 * Or you can get the diff\'ed content as another DataObject, that you can insert into a form.
 * <code>
 * $form->loadDataFrom($diff->diffedData());
 * </code>
 * 
 * If there are fields whose changes you aren\'t interested in, you can ignore them like so:
 * <code>
 * $diff->ignoreFields(\'AuthorID\', \'Status\');
 * </code>
 * 
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * Sets the internal value to ISO date format.
	 * 
	 * @param String|Array $val 
	 */",
 "/**
	 * @return String ISO 8601 date, suitable for insertion into database
	 */",
 "/**
	 * Validate an array with expected keys \'day\', \'month\' and \'year.
	 * Used because Zend_Date::isDate() doesn\'t provide this.
	 * 
	 * @param Array $val
	 * @return boolean
	 */",
 "/**
	 * @return Boolean
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Caution: Will not update the \'dateformat\' config value.
	 * 
	 * @param String $locale
	 */",
 "/**
	 * @param string $name
	 * @param mixed $val
	 */",
 "/**
	 * @param String $name
	 * @return mixed
	 */",
 "/**
 * Form field to display an editable date string,
 * either in a single `<input type=\"text\">` field,
 * or in three separate fields for day, month and year.
 * 
 * # Configuration
 * 
 * - \'showcalendar\' (boolean): Determines if a calendar picker is shown.
 *    By default, jQuery UI datepicker is used (see {@link DateField_View_JQuery}).
 * - \'jslocale\' (string): Overwrites the \"Locale\" value set in this class.
 *    Only useful in combination with {@link DateField_View_JQuery}.
 * - \'dmyfields\' (boolean): Show three input fields for day, month and year separately.
 *    CAUTION: Might not be useable in combination with \'showcalendar\', depending on the used javascript library
 * - \'dateformat\' (string): Date format compatible with Zend_Date.
 *    Usually set to default format for {@link locale} through {@link Zend_Locale_Format::getDateFormat()}.
 * - \'datavalueformat\' (string): Internal ISO format string used by {@link dataValue()} to save the
 *    date to a database.
 * - \'min\' (string): Minimum allowed date value (in ISO format, or strtotime() compatible).
 *    Example: \'2010-03-31\', or \'-7 days\'
 * - \'max\' (string): Maximum allowed date value (in ISO format, or strtotime() compatible).
 *    Example: \'2010-03-31\', or \'1 year\'
 * 
 * # Localization
 * 
 * The field will get its default locale from {@link i18n::get_locale()}, and set the `dateformat`
 * configuration accordingly. Changing the locale through {@link setLocale()} will not update the 
 * `dateformat` configuration automatically.
 * 
 * # Usage
 * 
 * ## Example: German dates with separate fields for day, month, year
 * 
 * 	$f = new DateField(\'MyDate\');
 * 	$f->setLocale(\'de_DE\');
 * 	$f->setConfig(\'dmyfields\');
 * 
 * # Validation
 * 
 * Caution: JavaScript validation is only supported for the \'en_NZ\' locale at the moment,
 * it will be disabled automatically for all other locales.
 * 
 * @package forms
 * @subpackage fields-datetime
 */",
 "/**
 * Disabled version of {@link DateField}.
 * Allows dates to be represented in a form, by showing in a user friendly format, eg, dd/mm/yyyy.
 * @package forms
 * @subpackage fields-datetime
 */",
 "/**
	 * @param DateField $field
	 */",
 "/**
	 * @return DateField
	 */",
 "/**
	 * 
	 */",
 "/**
	 * @param String $html
	 * @return 
	 */",
 "/**
	 * Determines which language to use for jQuery UI, which
	 * can be different from the value set in i18n.
	 * 
	 * @return String
	 */",
 "/**
	 * Convert iso to jquery UI date format.
	 * Needs to be consistent with Zend formatting, otherwise validation will fail.
	 * Removes all time settings like hour/minute/second from the format.
	 * See http://docs.jquery.com/UI/Datepicker/formatDate
	 * 
	 * @param String $format
	 * @return String
	 */",
 "/**
 * Preliminary API to separate optional view properties
 * like calendar popups from the actual datefield logic.
 * 
 * Caution: This API is highly volatile, and might change without prior deprecation.
 * 
 * @package sapphire
 * @subpackage forms
 */",
 "/**
	 * Ensure the locale is set to something sensible by default.
	 */",
 "/**
	 * If this is called, then a session cookie will be set to \"1\" whenever a user
	 * logs in.  This lets 3rd party tools, such as apache\'s mod_rewrite, detect
	 * whether a user is logged in or not and alter behaviour accordingly.
	 * 
	 * One known use of this is to bypass static caching for logged in users.  This is
	 * done by putting this into _config.php
	 * <pre>
	 * Member::set_login_marker_cookie(\"SS_LOGGED_IN\");
	 * </pre>
	 * 
	 * And then adding this condition to each of the rewrite rules that make use of
	 * the static cache.
	 * <pre>
	 * RewriteCond %{HTTP_COOKIE} !SS_LOGGED_IN=1
	 * </pre>
	 * 
	 * @param $cookieName string The name of the cookie to set.
	 */",
 "/**
	 * Check if the passed password matches the stored one (if the member is not locked out).
	 *
	 * @param  string $password
	 * @return ValidationResult
	 */",
 "/**
	 * Returns a valid {@link ValidationResult} if this member can currently log in, or an invalid
	 * one with error messages to display if the member is locked out.
	 *
	 * You can hook into this with a \"canLogIn\" method on an attached extension.
	 *
	 * @return ValidationResult
	 */",
 "/**
	 * Returns true if this user is locked out
	 */",
 "/**
	 * Regenerate the session_id.
	 * This wrapper is here to make it easier to disable calls to session_regenerate_id(), should you need to.  
	 * They have caused problems in certain
	 * quirky problems (such as using the Windmill 0.3.6 proxy).
	 */",
 "/**
	 * Get the field used for uniquely identifying a member
	 * in the database. {@see Member::$unique_identifier_field}
	 * 
	 * @return string
	 */",
 "/**
	 * Set the field used for uniquely identifying a member
	 * in the database. {@see Member::$unique_identifier_field}
	 * 
	 * @param $field The field name to set as the unique field
	 */",
 "/**
	 * Set a {@link PasswordValidator} object to use to validate member\'s passwords.
	 */",
 "/**
	 * Returns the current {@link PasswordValidator}
	 */",
 "/**
	 * Set the number of days that a password should be valid for.
	 * Set to null (the default) to have passwords never expire.
	 */",
 "/**
	 * Configure the security system to lock users out after this many incorrect logins
	 */",
 "/**
	 * Logs this member in
	 *
	 * @param bool $remember If set to TRUE, the member will be logged in automatically the next time.
	 */",
 "/**
	 * Check if the member ID logged in session actually
	 * has a database record of the same ID. If there is
	 * no logged in user, FALSE is returned anyway.
	 * 
	 * @return boolean TRUE record found FALSE no record found
	 */",
 "/**
	 * Log the user in if the \"remember login\" cookie is set
	 *
	 * The <i>remember login token</i> will be changed on every successful
	 * auto-login.
	 */",
 "/**
	 * Logs this member out.
	 */",
 "/**
	 * Generate an auto login hash
	 *
	 * This creates an auto login hash that can be used to reset the password.
	 *
	 * @param int $lifetime The lifetime of the auto login hash in days (by default 2 days)
	 *
	 * @todo Make it possible to handle database errors such as a \"duplicate key\" error
	 */",
 "/**
	 * Return the member for the auto login hash
	 *
	 * @param bool $login Should the member be logged in?
	 */",
 "/**
	 * Send signup, change password or forgot password informations to an user
	 *
	 * @param string $type Information type to send (\"signup\", \"changePassword\" or \"forgotPassword\")
	 * @param array $data Additional data to pass to the email (can be used in the template)
	 */",
 "/**
	 * Returns the fields for the member form - used in the registration/profile module.
	 * It should return fields that are editable by the admin and the logged-in user. 
	 *
	 * @return FieldSet Returns a {@link FieldSet} containing the fields for
	 *                  the member form.
	 */",
 "/**
	 * Returns the current logged in user
	 *
	 * @return bool|Member Returns the member object of the current logged in
	 *                     user or FALSE.
	 */",
 "/**
	 * Get the ID of the current logged in user
	 *
	 * @return int Returns the ID of the current logged in user or 0.
	 */",
 "/**
	 * Event handler called before writing to the database.
	 */",
 "/**
	 * If any admin groups are requested, deny the whole save operation.
	 * 
	 * @param Array $ids Database IDs of Group records
	 * @return boolean
	 */",
 "/**
	 * Check if the member is in one of the given groups.
	 *
	 * @param array|DataObjectSet $groups Collection of {@link Group} DataObjects to check
	 * @param boolean $strict Only determine direct group membership if set to true (Default: false)
	 * @return bool Returns TRUE if the member is in one of the given groups, otherwise FALSE.
	 */",
 "/**
	 * Check if the member is in the given group or any parent groups.
	 *
	 * @param int|Group|string $group Group instance, Group Code or ID
	 * @param boolean $strict Only determine direct group membership if set to TRUE (Default: FALSE)
	 * @return bool Returns TRUE if the member is in the given group, otherwise FALSE.
	 */",
 "/**
	 * Adds the member to a group. This will create the group if the given 
	 * group code does not return a valid group object. 
	 *
	 * @param string $groupcode
	 * @param string Title of the group
	 */",
 "/**
	 * Returns true if this user is an administrator.
	 * Administrators have access to everything.
	 * 
	 * @deprecated Use Permission::check(\'ADMIN\') instead
	 * @return Returns TRUE if this user is an administrator.
	 */",
 "/**
	 * @param Array $columns Column names on the Member record to show in {@link getTitle()}.
	 * @param String $sep Separator
	 */",
 "/**
	 * Get the complete name of the member, by default in the format \"<Surname>, <FirstName>\".
	 * Falls back to showing either field on its own.
	 * 
	 * You can overload this getter with {@link set_title_format()}
	 * and {@link set_title_sql()}.
	 *
	 * @return string Returns the first- and surname of the member. If the ID
	 *  of the member is equal 0, only the surname is returned.
	 */",
 "/**
	 * Return a SQL CONCAT() fragment suitable for a SELECT statement.
	 * Useful for custom queries which assume a certain member title format.
	 * 
	 * @param String $tableName
	 * @return String SQL
	 */",
 "/**
	 * Get the complete name of the member
	 *
	 * @return string Returns the first- and surname of the member.
	 */",
 "/**
	 * Set first- and surname
	 *
	 * This method assumes that the last part of the name is the surname, e.g.
	 * <i>A B C</i> will result in firstname <i>A B</i> and surname <i>C</i>
	 *
	 * @param string $name The name
	 */",
 "/**
	 * Alias for {@link setName}
	 *
	 * @param string $name The name
	 * @see setName()
	 */",
 "/**
	 * Override the default getter for DateFormat so the
	 * default format for the user\'s locale is used
	 * if the user has not defined their own.
	 * 
	 * @return string ISO date format
	 */",
 "/**
	 * Override the default getter for TimeFormat so the
	 * default format for the user\'s locale is used
	 * if the user has not defined their own.
	 * 
	 * @return string ISO date format
	 */",
 "/**
	 * Get a \"many-to-many\" map that holds for all members their group
	 * memberships
	 *
	 * @return Member_GroupSet Returns a map holding for all members their
	 *                         group memberships.
	 */",
 "/**
	 * Get member SQLMap
	 *
	 * @param string $filter Filter for the SQL statement (WHERE clause)
	 * @param string $sort Sorting function (ORDER clause)
	 * @param string $blank Shift a blank member in the items
	 * @return SQLMap Returns an SQLMap that returns all Member data.
	 *
	 * @todo Improve documentation of this function! (Markus)
	 */",
 "/**
	 * Get a member SQLMap of members in specific groups
	 *
	 * @param mixed $groups Optional groups to include in the map. If NULL is
	 *                      passed, all groups are returned, i.e.
	 *                      {@link map()} will be called.
	 * @return SQLMap Returns an SQLMap that returns all Member data.
	 * @see map()
	 *
	 * @todo Improve documentation of this function! (Markus)
	 */",
 "/**
	 * Get a map of all members in the groups given that have CMS permissions
	 *
	 * If no groups are passed, all groups with CMS permissions will be used.
	 *
	 * @param array $groups Groups to consider or NULL to use all groups with
	 *                      CMS permissions.
	 * @return SQLMap Returns a map of all members in the groups given that
	 *                have CMS permissions.
	 */",
 "/**
	 * Get the groups in which the member is NOT in
	 *
	 * When passed an array of groups, and a component set of groups, this
	 * function will return the array of groups the member is NOT in.
	 *
	 * @param array $groupList An array of group code names.
	 * @param array $memberGroups A component set of groups (if set to NULL,
	 * 														$this->groups() will be used)
	 * @return array Groups in which the member is NOT in.
	 */",
 "/**
	 * Return a {@link FieldSet} of fields that would appropriate for editing
	 * this member.
	 *
	 * @return FieldSet Return a FieldSet of fields that would appropriate for
	 *                  editing this member.
	 */",
 "/**
	 *
	 * @param boolean $includerelations a boolean value to indicate if the labels returned include relation fields
	 * 
	 */",
 "/**
	 * Users can view their own record.
	 * Otherwise they\'ll need ADMIN or CMS_ACCESS_SecurityAdmin permissions.
	 * This is likely to be customized for social sites etc. with a looser permission model.
	 */",
 "/**
	 * Users can edit their own record.
	 * Otherwise they\'ll need ADMIN or CMS_ACCESS_SecurityAdmin permissions
	 */",
 "/**
	 * Users can edit their own record.
	 * Otherwise they\'ll need ADMIN or CMS_ACCESS_SecurityAdmin permissions
	 */",
 "/**
	 * Validate this member object.
	 */",
 "/**
	 * Change password. This will cause rehashing according to
	 * the `PasswordEncryption` property.
	 * 
	 * @param String $password Cleartext password
	 */",
 "/**
	 * Tell this member that someone made a failed attempt at logging in as them.
	 * This can be used to lock the user out temporarily if too many failed attempts are made.
	 */",
 "/**
	 * Get the HtmlEditorConfig for this user to be used in the CMS.
	 * This is set by the group. If multiple configurations are set,
	 * the one with the highest priority wins.
	 * 
	 * @return string
	 */",
 "/**
 * The member class which represents the users of the system
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Control group membership with a number of checkboxes.
	 *  - If the checkbox fields are present in $data, then the member will be
	 *    added to the group with the same codename.
	 *  - If the checkbox fields are *NOT* present in $data, then the member
	 *    will be removed from the group with the same codename.
	 *
	 * @param array $checkboxes An array list of the checkbox fieldnames (only
	 *               	          values are used). E.g. array(0, 1, 2)
	 * @param array $data The form data. Uually in the format array(0 => 2)
	 *                    (just pass the checkbox data from your form)
	 */",
 "/**
	 * Allows you to set groups based on a CheckboxSetField
	 *
	 * Pass the form element from your post data directly to this method, and
	 * it will update the groups and add and remove the member as appropriate.
	 *
	 * On the form setup:
	 *
	 * <code>
	 * $fields->push(
	 *   new CheckboxSetField(
	 *     \"NewsletterSubscriptions\",
	 *     \"Receive email notification of events in \",
	 *     $sourceitems = DataObject::get(\"NewsletterType\")->toDropDownMap(\"GroupID\",\"Title\"),
	 *     $selectedgroups = $member->Groups()->Map(\"ID\",\"ID\")
	 *   )
	 * );
	 * </code>
	 *
	 * On the form handler:
	 *
	 * <code>
	 * $groups = $member->Groups();
	 * $checkboxfield = $form->Fields()->fieldByName(\"NewsletterSubscriptions\");
	 * $groups->setByCheckboxSetField($checkboxfield);
	 * </code>
	 *
	 * @param CheckboxSetField $checkboxsetfield The CheckboxSetField (with
	 *                                           data) from your form.
	 */",
 "/**
	 * Adds this member to the groups based on the group IDs
	 *
	 * @param array $ids Group identifiers.
	 */",
 "/**
	 * Removes the member from many groups based on the group IDs
	 *
	 * @param array $ids Group identifiers.
	 */",
 "/**
	 * Returns the groups from an array of group IDs
	 *
	 * @param array $ids Group identifiers.
	 * @return mixed Returns the groups from the array of Group IDs.
	 */",
 "/**
	 * Adds this member to the groups based on the group codenames
	 *
	 * @param array $codenames Group codenames
	 */",
 "/**
	 * Removes this member from the groups based on the group codenames
	 *
	 * @param array $codenames Group codenames
	 */",
 "/**
	 * Helper function to return the appropriate groups via a codenames
	 *
	 * @param array $codenames Group codenames
	 * @return array Returns the the appropriate groups.
	 */",
 "/**
 * Special kind of {@link ComponentSet} that has special methods for
 * manipulating a user\'s membership
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Form for editing a member profile.
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Class used as template to send an email to new members
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Class used as template to send an email saying that the password has been
 * changed
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Class used as template to send the forgot password email
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Constructor
	 */",
 "/**
	 * Check if the submitted member data is valid (server-side)
	 *
	 * Check if a member with that email doesn\'t already exist, or if it does
	 * that it is this member.
	 *
	 * @param array $data Submitted data
	 * @return bool Returns TRUE if the submitted data is valid, otherwise
	 *              FALSE.
	 */",
 "/**
	 * Check if the submitted member data is valid (client-side)
	 *
	 * @param array $data Submitted data
	 * @return bool Returns TRUE if the submitted data is valid, otherwise
	 *              FALSE.
	 */",
 "/**
 * Member Validator
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * @todo Put this text into a template?
	 */",
 "/**
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Caution: Only call on instances, not through a singleton.
	 *
	 * @return FieldSet
	 */",
 "/**
	 *
	 * @param boolean $includerelations a boolean value to indicate if the labels returned include relation fields
	 * 
	 */",
 "/**
	 * @deprecated 2.5
	 */",
 "/**
	 * Overloaded getter.
	 *
	 * @TODO Where is this used, why is this overloaded?
	 * 
	 * @param $limit string SQL
	 * @param $offset int
	 * @param $filter string SQL
	 * @param $sort string SQL
	 * @param $join string SQL
	 * @return ComponentSet
	 */",
 "/**
	 * Return a set of this record\'s \"family\" of IDs - the IDs of
	 * this record and all its descendants.
	 * @return array
	 */",
 "/**
	 * Returns an array of the IDs of this group and all its parents
	 */",
 "/**
	 * This isn\'t a decendant of SiteTree, but needs this in case
	 * the group is \"reorganised\";
	 */",
 "/**
	 * Override this so groups are ordered in the CMS
	 */",
 "/**
	 * Overloaded to ensure the code is always descent.
	 */",
 "/**
	 * Checks for permission-code CMS_ACCESS_SecurityAdmin.
	 * If the group has ADMIN permissions, it requires the user to have ADMIN permissions as well.
	 * 
	 * @param $member Member
	 * @return boolean
	 */",
 "/**
	 * Checks for permission-code CMS_ACCESS_SecurityAdmin.
	 * 
	 * @param $member Member
	 * @return boolean
	 */",
 "/**
	 * Returns all of the children for the CMS Tree.
	 * Filters to only those groups that the current user can edit
	 */",
 "/**
	 * Returns true if the given IP address is granted access to this group.
	 * For unrestricted groups, this always returns true.
	 */",
 "/**
	 * Add default records to database.
	 *
	 * This function is called whenever the database is built, after the
	 * database tables have all been created.
	 */",
 "/**
 * A security group.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Constructor, checks to see availability of PEAR Benchmark_Timer and
	 * sets up basic properties
	 * 
	 * @access public
	 * @return void
	 */",
 "/**
	 * Returns the suite results
	 * 
	 * @access public
	 * @return array Suite results
	 */",
 "/**
	 * Sets up the container for result details of the current test suite when
	 * each suite is first run
	 * 
	 * @access public
	 * @param obj PHPUnit2_Framework_TestSuite, the suite that is been run
	 * @return void
	 */",
 "/**
	 * Sets up the container for result details of the current test when each 
	 * test is first run
	 * 
	 * @access public
	 * @param obj PHPUnit_Framework_Test, the test that is being run
	 * @return void
	 */",
 "/**
	 * Adds the failure detail to the current test and increases the failure
	 * count for the current suite
	 * 
	 * @access public
	 * @param obj PHPUnit_Framework_Test, current test that is being run
	 * @param obj PHPUnit_Framework_AssertationFailedError, PHPUnit error
	 * @return void
	 */",
 "/**
	 * Adds the error detail to the current test and increases the error
	 * count for the current suite
	 * 
	 * @access public
	 * @param obj PHPUnit_Framework_Test, current test that is being run
	 * @param obj PHPUnit_Framework_AssertationFailedError, PHPUnit error
	 * @return void
	 */",
 "/**
	 * Adds the test incomplete detail to the current test and increases the incomplete
	 * count for the current suite
	 * 
	 * @access public
	 * @param obj PHPUnit_Framework_Test, current test that is being run
	 * @param obj PHPUnit_Framework_AssertationFailedError, PHPUnit error
	 * @return void
	 */",
 "/**
	 * Not used
	 *
	 * @param PHPUnit_Framework_Test $test
	 * @param unknown_type $time
	 */",
 "/**
	 * Upon completion of a test, records the execution time (if available) and adds the test to 
	 * the tests performed in the current suite.
	 * 
	 * @access public
	 * @param obj PHPUnit_Framework_Test, current test that is being run
	 * @return void
	 */",
 "/**
	 * Upon completion of a test suite adds the suite to the suties performed
	 * 
	 * @access public
	 * @param obj PHPUnit_Framework_TestSuite, current suite that is being run
	 * @return void
	 */",
 "/**
	 * Trys to get the original exception thrown by the test on failure/error 
	 * to enable us to give a bit more detail about the failure/error
	 * 
	 * @access private
	 * @param obj PHPUnit_Framework_Test, current test that is being run
	 * @param obj PHPUnit_Framework_AssertationFailedError, PHPUnit error
	 * @return array
	 */",
 "/**
	 * Display error bar if it exists
	 */",
 "/**
 * Gathers details about PHPUnit2 test suites as they 
 * are been executed. This does not actually format any output
 * but simply gathers extended information about the overall 
 * results of all suites & their tests for use elsewhere.
 *
 * Changelog:
 *  0.6 First created [David Spurr]
 *  0.7 Added fix to getTestException provided [Glen Ogilvie]
 * 
 * @package sapphire
 * @subpackage testing
 *
 * @version 0.7 2006-03-12
 * @author David Spurr
 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @param string
	 */",
 "/**
	 * @todo Return casted Float DBField?
	 * 
	 * @return float
	 */",
 "/**
	 * @param float $amount
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * @param string $locale
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @param array $arr
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * Returns a CompositeField instance used as a default
	 * for form scaffolding.
	 *
	 * Used by {@link SearchContext}, {@link ModelAdmin}, {@link DataObject::scaffoldFormFields()}
	 * 
	 * @param string $title Optional. Localized title of the generated instance
	 * @return FormField
	 */",
 "/**
	 * For backwards compatibility reasons
	 * (mainly with ecommerce module),
	 * this returns the amount value of the field,
	 * rather than a {@link Nice()} formatting.
	 */",
 "/**
 * Implements the \"Money\" pattern.
 * 
 * @see http://www.martinfowler.com/eaaCatalog/money.html
 *
 * @todo Support different ways of rounding
 * @todo Equality operators
 * @todo Addition, substraction and allocation of values
 * @todo Model validation for $allowedCurrencies
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Get the filter
	 */",
 "/**
	 * Determines if a field is \"sortable\".
	 * If the field is generated by a custom getter, we can\'t sort on it
	 * without generating all objects first (which would be a huge performance impact).
	 * 
	 * @param string $fieldName
	 * @return bool
	 */",
 "/**
	 * Dummy function to get number of actions originally generated in
	 * TableListField_Item.
	 * 
	 * @return DataObjectSet
	 */",
 "/**
	 * Provide a custom query to compute sourceItems. This is the preferred way to using
	 * {@setSourceItems}, because we can still paginate.
	 * Caution: Other parameters such as {@sourceFilter} will be ignored.
	 * Please use this only as a fallback for really complex queries (e.g. involving HAVING and GROUPBY).  
	 * 
	 * @param $query SS_Query
	 */",
 "/**
	 * Generates the query for sourceitems (without pagination/limit-clause)
	 * 
	 * @return string
	 */",
 "/**
	 * Configure this table to load content into a subform via ajax
	 */",
 "/**
	 * Configure this table to open a popup window
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * Can utilize some built-in summary-functions, with optional casting. 
	 * Currently supported:
	 * - sum
	 * - avg
	 * 
	 * @param $summaryTitle string
	 * @param $summaryFields array 
	 * Simple Format: array(\"MyFieldName\"=>\"sum\")
	 * With Casting: array(\"MyFieldname\"=>array(\"sum\",\"Currency->Nice\"))
	 */",
 "/**
	 * @param DataObjectSet $items Only used to pass grouped sourceItems for creating
	 * partial summaries.
	 */",
 "/**
	 * Template accessor for Permissions.
	 * See {@link TableListField_Item->Can()} for object-specific
	 * permissions.
	 * 
	 * @return boolean
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * #################################
	 *           Pagination
	 * #################################
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * @param array
	 * @deprecated Put the query string onto your form\'s link instead :-)
	 */",
 "/**
	 * @return array
	 */",
 "/**
	  * Compile all request-parameters for search and pagination
	  * (except the actual list-positions) as a query-string.
	  * 
	  * @return String URL-parameters
	  */",
 "/**
	 * #################################
	 *           CSV Export
	 * #################################
	 */",
 "/**
	 * Set the CSV separator character.  Defaults to ,
	 */",
 "/**
	 * Get the CSV separator character.  Defaults to ,
	 */",
 "/**
	 * Remove the header row from the CSV export
	 */",
 "/**
	 * Exports a given set of comma-separated IDs (from a previous search-query, stored in a HiddenField).
	 * Uses {$csv_columns} if present, and falls back to {$result_columns}.
	 * We move the most filedata generation code to the function {@link generateExportFileData()} so that a child class
	 * could reuse the filedata generation code while overwrite export function.
	 * 
	 * @todo Make relation-syntax available (at the moment you\'ll have to use custom sql) 
	 */",
 "/**
	 * We need to instanciate this button manually as a normal button has no means of adding inline onclick-behaviour.
	 */",
 "/**
	 * #################################
	 *           Utilty
	 * #################################
	 */",
 "/**
	 * Returns the content of the TableListField as a piece of FormResponse javascript
	 * @deprecated Please use the standard URL through Link() which gives you the FieldHolder as an HTML fragment.
	 */",
 "/**
	 * Edit the field list
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * Overloaded to automatically add security token.
	 * 
	 * @param String $action
	 * @return String
	 */",
 "/**
	 * @return Int
	 */",
 "/**
	 * Helper method to determine permissions for a scaffolded
	 * TableListField (or subclasses) - currently used in {@link ModelAdmin} and {@link DataObject->scaffoldFormFields()}.
	 * Returns true for each permission that doesn\'t have an explicit getter.
	 * 
	 * @todo Temporary method, implement directly in FormField subclasses with object-level permissions.
	 *
	 * @param string $class
	 * @param numeric $id
	 * @return array
	 */",
 "/**
	 * @param $value
	 * 
	 */",
 "/**
	 * See {@link SelectOptions()} for introduction.
	 * 
	 * @param $options array Options to add, key being a unique identifier of the action,
	 *  and value a title for the rendered link element (can contain HTML).
	 *  The keys for \'all\' and \'none\' have special behaviour associated
	 *  through TableListField.js JavaScript.
	 *  For any other key, the JavaScript automatically checks all checkboxes contained in
	 *  <td> elements with a matching classname.
	 */",
 "/**
	 * Remove one all more table\'s {@link $selectOptions}
	 * 
	 * @param $optionsNames array
	 */",
 "/**
	 * Return the table\'s {@link $selectOptions}.
	 * Used to toggle checkboxes for each table row through button elements.
	 * 
	 * Requires {@link Markable()} to return TRUE.
	 * This is only functional with JavaScript enabled.
	 * 
	 * @return DataObjectSet of ArrayData objects
	 */",
 "/**
 * Form field that embeds a list into a form, such as a member list or a file list.
 * 
 * All get variables are namespaced in the format ctf[MyFieldName][MyParameter] to avoid collisions
 * when multiple TableListFields are present in a form.
 * 
 * @param $name string The fieldname
 * @param $sourceClass string The source class of this field
 * @param $fieldList array An array of field headings of Fieldname => Heading Text (eg. heading1)
 * @param $sourceFilter string The filter field you wish to limit the objects by (eg. parentID)
 * @param $sourceSort string
 * @param $sourceJoin string
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * Checks global permissions for field in  {@link TableListField->Can()}.
	 * If they are allowed, it checks for object permissions by assuming
	 * a method with \"can\" + $mode parameter naming, e.g. canDelete().
	 * 
	 * @param string $mode See {@link TableListField::$permissions} array.
	 * @return boolean
	 */",
 "/**
	 * Returns all row-based actions not disallowed through permissions.
	 * See TableListField->Action for a similiar dummy-function to work
	 * around template-inheritance issues.
	 * 
	 * @return DataObjectSet
	 */",
 "/**
	 * According to {@link TableListField->selectOptions}, each record will check if the options\' key on the object is true,
	 * if it is true, add the key as a class to the record
	 * 
	 * @return string Value for a \'class\' HTML attribute.
	 */",
 "/**
	 * Legacy: Please use permissions instead
	 */",
 "/**
 * A single record in a TableListField.
 * @package forms
 * @subpackage fields-relational
 * @see TableListField
 */",
 "/**
	 * Return the data object being manipulated
	 */",
 "/**
	 * Returns the db-fieldname of the currently used has_one-relationship.
	 */",
 "/**
	 * Manually overwrites the parent-ID relations.
	 * @see setParentClass()
	 * 
	 * @param String $str Example: FamilyID (when one Individual has_one Family)
	 */",
 "/**
	 * Returns the db-fieldname of the currently used relationship.
	 */",
 "/**
	 * @return TableListField
	 */",
 "/**
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Exception.php 8064 2008-02-16 10:58:39Z thomas $
 */",
 "/**
	 * Construct a SQLMap.
	 * @param SQLQuery $query The query to generate this map. THis isn\'t executed until it\'s needed.
	 */",
 "/**
	 * Get the name of an item.
	 * @param string|int $id The id of the item.
	 * @return string
	 */",
 "/**
	 * Get the items in this class.
	 * @return DataObjectSet
	 */",
 "/**
	 * Generate the items in this map. This is used by
	 * getItems() if the items have not been generated already.
	 */",
 "/**
 * This is a class used to represent key->value pairs generated from database queries.
 * The query isn\'t actually executed until you need it.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * @package sapphire
 * @subpackage model
 */",
 "/** 
	 * Displays the headings on the template
	 * 
	 * @return DataObjectSet
	 */",
 "/**
	 * Calculates the number of columns needed for colspans
	 * used in template
	 * 
	 * @return int
	 */",
 "/**
	 * Displays the items from {@link sourceItems()} using the encapsulation object.
	 * If the field value has been set as an array (e.g. after a failed validation),
	 * it generates the rows from array data instead.
	 * Used in the formfield template to iterate over each row.
	 * 
	 * @return DataObjectSet Collection of {@link TableField_Item}
	 */",
 "/**
	 * Generates a new {@link TableField} instance
	 * by loading a fieldset for this row into a temporary form.
	 * 
	 * @param DataObject $dataObj
	 * @return TableField_Item
	 */",
 "/**
	 * @return array
	 */",
 "/** 
	 * Saves the Dataobjects contained in the field
	 */",
 "/**
	 * Get all {@link FormField} instances necessary for a single row,
	 * respecting the casting set in {@link $fieldTypes}.
	 * Doesn\'t populate with any data. Optionally performs a readonly
	 * transformation if {@link $IsReadonly} is set, or the current user
	 * doesn\'t have edit permissions.
	 * 
	 * @return FieldSet
	 */",
 "/**
	 * Needed for Form->callfieldmethod.
	 */",
 "/**
	 * Called on save, it creates the appropriate objects and writes them
	 * to the database.
	 * 
	 * @param DataObjectSet $dataObjects
	 * @param boolean $existingValues If set to TRUE, it tries to find existing objects
	 *  based on the database IDs passed as array keys in $dataObjects parameter.
	 *  If set to FALSE, it will always create new object (default: TRUE)
	 * @return array Array of saved object IDs in the key, and the status (\"Updated\") in the value
	 */",
 "/** 
	 * Organises the data in the appropriate manner for saving
	 * 
	 * @param array $data 
	 * @param int $recordID
	 * @return array Collection of maps suitable to construct DataObjects
	 */",
 "/**
	 * @param $extraData array
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * Sets the template to be rendered with
	 */",
 "/**
	 * @return Int
	 */",
 "/**
	 * @param boolean $value 
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
 * TableField behaves in the same manner as TableListField, however allows the addition of 
 * fields and editing of attributes specified, and filtering results.
 * 
 * Caution: If you insert DropdownFields in the fieldTypes-array, make sure they have an empty first option.
 * Otherwise the saving can\'t determine if a new row should really be saved.
 * 
 * Caution: TableField relies on {@FormResponse} to reload the field after it is saved.
 * A TableField-instance should never be saved twice without reloading, because otherwise it 
 * can\'t determine if a field is new (=create) or existing (=update), and will produce duplicates.
 * 
 * @param $name string The fieldname
 * @param $sourceClass string The source class of this field
 * @param $fieldList array An array of field headings of Fieldname => Heading Text (eg. heading1)
 * @param $fieldTypes array An array of field types of fieldname => fieldType (eg. formfield). Do not use for extra data/hiddenfields.
 * @param $filterField string The field to filter by.  Give the filter value in $sourceFilter.  The value will automatically be set on new records.
 * @param $sourceFilter string If $filterField has a value, then this is the value to filter by.  Otherwise, it is a SQL filter expression.
 * @param $editExisting boolean (Note: Has to stay on this position for legacy reasons)
 * @param $sourceSort string
 * @param $sourceJoin string
 * 
 * @todo We should refactor this to support a single FieldSet instead of evaluated Strings for building FormFields
 * 
 * @package forms
 * @subpackage fields-relational
 */",
 "/** 
	 * Each row contains a dataobject with any number of attributes
	 * @param $ID int The ID of the record
	 * @param $form Form A Form object containing all of the fields for this item.  The data should be loaded in
	 * @param $fieldTypes array An array of name => fieldtype for use when creating a new field
	 * @param $parent TableListField The parent table for quick reference of names, and id\'s for storing values.
	 */",
 "/** 
	 * Represents each cell of the table with an attribute.
	 *
	 * @return FieldSet
	 */",
 "/**
	 * Get the flag isAddRow of this item, 
	 * to indicate if the item is that blank last row in the table which is not in the database
	 * 
	 * @return boolean
	 */",
 "/**
 * Single record in a TableField.
 * @package forms
 * @subpackage fields-relational
 * @see TableField
 */",
 "/**
	 * Create a DBField object that\'s not bound to any particular field.
	 * Useful for accessing the classes behaviour for other parts of your code.
	 */",
 "/**
	 * Set the name of this field.
	 * The name should never be altered, but it if was never given a name in the first place you can set a name.
	 * If you try an alter the name a warning will be thrown. 
	 */",
 "/**
	 * Returns the name of this field.
	 * @return string
	 */",
 "/**
	 * Returns the value of this field.
	 * @return mixed
	 */",
 "/**
	 * Set the value on the field.
	 * Optionally takes the whole record as an argument,
	 * to pick other values.
	 *
	 * @param mixed $value
	 * @param array $record
	 */",
 "/**
	 * Determines if the field has a value which
	 * is not considered to be \'null\' in
	 * a database context.
	 * 
	 * @return boolean
	 */",
 "/**
	 * @return bool
	 */",
 "/**
	 * Return an encoding of the given value suitable
	 * for inclusion in a SQL statement. If necessary,
	 * this should include quotes.
	 * 
	 * @param $value mixed The value to check
	 * @return string The encoded value
	 */",
 "/**
	 * Prepare the current field for usage in a 
	 * database-manipulation (works on a manipulation reference).
	 * 
	 * Make value safe for insertion into
	 * a SQL SET statement by applying addslashes() - 
	 * can also be used to apply special SQL-commands
	 * to the raw value (e.g. for GIS functionality).
	 * {@see prepValueForDB}
	 * 
	 * @param array $manipulation
	 */",
 "/**
	 * Add custom query parameters for this field,
	 * mostly SELECT statements for multi-value fields. 
	 * 
	 * By default, the ORM layer does a
	 * SELECT <tablename>.* which
	 * gets you the default representations
	 * of all columns.
	 *
	 * @param SS_Query $query
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Converts the current value for this Enum DBField to lowercase.
	 * @return string
	 */",
 "/**
	 * Converts the current value for this Enum DBField to uppercase.
	 * @return string 
	 */",
 "/**
	 * Returns the value to be set in the database to blank this field.
	 * Usually it\'s a choice between null, 0, and \'\'
	 */",
 "/**
	 * Saves this field to the given data object.
	 */",
 "/**
	 * Returns a FormField instance used as a default
	 * for form scaffolding.
	 *
	 * Used by {@link SearchContext}, {@link ModelAdmin}, {@link DataObject::scaffoldFormFields()}
	 * 
	 * @param string $title Optional. Localized title of the generated instance
	 * @return FormField
	 */",
 "/**
	 * Returns a FormField instance used as a default
	 * for searchform scaffolding.
	 *
	 * Used by {@link SearchContext}, {@link ModelAdmin}, {@link DataObject::scaffoldFormFields()}.
	 * 
	 * @param string $title Optional. Localized title of the generated instance
	 * @return FormField
	 */",
 "/**
	 * @todo documentation
	 * 
	 * @todo figure out how we pass configuration parameters to
	 * search filters (note: parameter hack now in place to pass in the required full path - using $this->name won\'t work)
	 *
	 * @return SearchFilter
	 */",
 "/**
	 * Add the field to the underlying database.
	 */",
 "/**
 * Single field in the database.
 * Every field from the database is represented as a sub-class of DBField.
 * 
 * <b>Multi-value DBField objects</b>
 * 
 * Sometimes you will want to make DBField classes that don\'t have a 1-1 match to database fields.  To do this, there are a
 * number of fields for you to overload.
 *  - Overload {@link writeToManipulation} to add the appropriate references to the INSERT or UPDATE command
 *  - Overload {@link addToQuery} to add the appropriate items to a SELECT query\'s field list
 *  - Add appropriate accessor methods 
 * 
 * <b>Subclass Example</b>
 * 
 * The class is easy to overload with custom types, e.g. the MySQL \"BLOB\" type (http://dev.mysql.com/doc/refman/5.0/en/blob.html).
 * 
 * <code>
 * class Blob extends DBField {                                                                                                   
 * 	function requireField() {                                                                                                         
 * 		DB::requireField($this->tableName, $this->name, \"blob\");
 *  }
 * }
 * </code>
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Returns the date in the format dd/mm/yy 
	 */",
 "/**
	 * Returns the date in US format: ???01/18/2006???
	 */",
 "/** 
	 * Returns the year from the given date
	 */",
 "/**
	 * Returns the Full day, of the given date.
	 */",
 "/**
	 * Returns a full textual representation of a month, such as January.
	 */",
 "/**
	 * Returns the short version of the month such as Jan
	 */",
 "/**
	 * Returns the date of the month
	 */",
 "/**
	 * Returns the date in the format 24 December 2006
	 */",
 "/**
	 * Returns the date in the format 24 Dec 2006
	 */",
 "/**
	 * Return the date using a particular formatting string.
	 * 
	 * @param string $format Format code string. e.g. \"d M Y\" (see http://php.net/date)
	 * @return string The date in the requested format
	 */",
 "/**
	 * Return the date formatted using the given strftime formatting string.
	 *
	 * strftime obeys the current LC_TIME/LC_ALL when printing lexical values
	 * like day- and month-names
	 */",
 "/**
	 * Returns the number of seconds/minutes/hours/days or months since the timestamp
	 */",
 "/**
	 * Gets the time difference, but always returns it in a certain format
	 * @param string $format The format, could be one of these: 
	 * \'seconds\', \'minutes\', \'hours\', \'days\', \'months\', \'years\'.
	 * 
	 * @return string
	 */",
 "/**
	 * Returns true if date is in the past.
	 * @return boolean
	 */",
 "/**
	 * Returns true if date is in the future.
	 * @return boolean
	 */",
 "/**
	 * Returns true if date is today.
	 * @return boolean
	 */",
 "/**
	 * Returns a date suitable for insertion into a URL and use by the system.
	 */",
 "/**
	 * Return the nearest date in the past, based on day and month.
	 * Automatically attaches the correct year.
	 * 
	 * This is useful for determining a financial year start or end date.
	 * 
	 * @param $fmonth int The number of the month (e.g. 3 is March, 4 is April)
	 * @param $fday int The day of the month
	 * @param $fyear int Determine historical value
	 * @return string Date in YYYY-MM-DD format
	 */",
 "/**
 * Represents a date field.
 * The field currently supports New Zealand date format (DD/MM/YYYY),
 * or an ISO 8601 formatted date (YYYY-MM-DD).
 * Alternatively you can set a timestamp that is evaluated through
 * PHP\'s built-in date() function according to your system locale.
 * 
 * Example definition via {@link DataObject::$db}:
 * <code>
 * static $db = array(
 * 	\"Expires\" => \"Date\",
 * );
 * </code>
 * 
 * @todo Add localization support, see http://open.silverstripe.com/ticket/2931
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Create a new textarea field.
	 * 
	 * @param $name Field name
	 * @param $title Field title
	 * @param $rows The number of rows
	 * @param $cols The number of columns
	 * @param $value The current value
	 * @param $form The parent form.  Auto-set when the field is placed in a form.
	 */",
 "/**
	 * Create the <textarea> or <span> HTML tag with the
	 * attributes for this instance of TextareaField. This
	 * makes use of {@link FormField->createTag()} functionality.
	 * 
	 * @return HTML code for the textarea OR span element
	 */",
 "/**
	 * Performs a readonly transformation on this field. You should still be able
	 * to copy from this field, and it should still send when you submit
	 * the form it\'s attached to.
	 * The element shouldn\'t be both disabled and readonly at the same time.
	 */",
 "/**
	 * Performs a disabled transformation on this field. You shouldn\'t be able to
	 * copy from this field, and it should not send any data when you submit the 
	 * form it\'s attached to.
	 * The element shouldn\'t be both disabled and readonly at the same time.
	 */",
 "/**
	 * Set the number of rows in the textarea
	 *
	 * @param int
	 */",
 "/**
	 * Set the number of columns in the textarea
	 *
	 * @return int
	 */",
 "/**
 * TextareaField creates a multi-line text field,
 * allowing more data to be entered than a standard
 * text field. It creates the <textarea> tag in the
 * form HTML.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * new TextareaField(
 *    $name = \"description\",
 *    $title = \"Description\",
 *    $rows = 8,
 *    $cols = 3,
 *    $value = \"This is the default description\"
 * );
 * </code>
 * 
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
 	 * (non-PHPdoc)
 	 * @see DBField::requireField()
 	 */",
 "/**
	 * Limit this field\'s content by a number of words.
	 * CAUTION: This is not XML safe. Please use
	 * {@link LimitWordCountXML()} instead.
	 *
	 * @param int $numWords Number of words to limit by
	 * @param string $add Ellipsis to add to the end of truncated string
	 * @return string
	 */",
 "/**
	 * Return the value of the field stripped of html tags
	 * @return string
	 */",
 "/**
	 * Return the value of the field with XML tags escaped.
	 * @return string
	 */",
 "/**
	 * Return the value of the field with relative links converted to absolute urls.
	 * @return string
	 */",
 "/**
	 * Limit this field\'s content by a number of characters.
	 * CAUTION: Does not take into account HTML tags, so it
	 * has the potential to return malformed HTML.
	 *
	 * @param int $limit Number of characters to limit by
	 * @param string $add Ellipsis to add to the end of truncated string
	 * @return string
	 */",
 "/**
	 * Limit the number of words of the current field\'s
	 * content. This is XML safe, so characters like &
	 * are converted to &amp;
	 *
	 * @param int $numWords Number of words to limit by
	 * @param string $add Ellipsis to add to the end of truncated string
	 * @return string
	 */",
 "/**
	 * Limit sentences, can be controlled by passing an integer.
	 * @param int $sentCount The amount of sentences you want.
	 */",
 "/**
	 * Caution: Not XML/HTML-safe - does not respect closing tags.
	 */",
 "/**
	 * Caution: Not XML/HTML-safe - does not respect closing tags.
	 */",
 "/**
	* Performs the same function as the big summary, but doesnt trim new paragraphs off data.
	* Caution: Not XML/HTML-safe - does not respect closing tags.
	*/",
 "/**
	 * Caution: Not XML/HTML-safe - does not respect closing tags.
	 */",
 "/**
	 * Perform context searching to give some context to searches, optionally
	 * highlighting the search term.
	 * 
	 * @param int $characters Number of characters in the summary
	 * @param boolean $string Supplied string (\"keywords\")
	 * @param boolean $striphtml Strip HTML?
	 * @param boolean $highlight Add a highlight <span> element around search query?
	 * @param String prefix text
	 * @param String suffix 
	 * 
	 * @return string
	 */",
 "/**
	 * Allows a sub-class of TextParser to be rendered.
	 * 
	 * @see TextParser for implementation details.
	 * @return string
	 */",
 "/**
	 * (non-PHPdoc)
	 * @see DBField::scaffoldFormField()
	 */",
 "/**
	 * (non-PHPdoc)
	 * @see DBField::scaffoldSearchField()
	 */",
 "/**
 * Represents a variable-length string of up to 2 megabytes, designed to store raw text
 * 
 * Example definition via {@link DataObject::$db}:
 * <code>
 * static $db = array(
 * 	\"MyDescription\" => \"Text\",
 * );
 * </code>
 * 
 * @see HTMLText
 * @see HTMLVarchar
 * @see Varchar
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * Special ComplexTableField for editing a many_many relation.
 * 
 * This field  allows you to show a **many-to-many** relation with a group of 
 * DataObjects as a (readonly) tabular list (similiar to {@link ComplexTableField}). 
 * Its most useful when you want to manage the relationship itself 
 * thanks to the check boxes present on each line of the table.
 * 
 * See {@link ComplexTableField} for more documentation on the base-class.
 * See {@link HasManyComplexTableField} for more documentation on the relation table base-class.
 * 
 * Note: This class relies on the fact that both sides of the relation have database tables. 
 * If you are only creating a class as a logical extension (that is, it doesn\'t have any database fields), 
 * then you will need to create a dummy static $db array because SilverStripe won\'t create a database 
 * table unless needed.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * $tablefield = new ManyManyComplexTableField(
 *     $this,
 *     \'MyFruits\',
 *     \'Fruit\',
 *     array(
 * 	\'Name\' => \'Name\',
 * 	\'Color\' => \'Color\'
 *     ),
 *     \'getCMSFields_forPopup\'
 * );
 * </code>
 * 
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
 * One record in a {@link ManyManyComplexTableField}.
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * Create a new file field.
	 * 
	 * @param string $name The internal field name, passed to forms.
	 * @param string $title The field label.
	 * @param int $value The value of the field.
	 * @param Form $form Reference to the container form
	 * @param string $rightTitle Used in SmallFieldHolder() to force a right-aligned label
	 * @param string $folderName Folder to upload files to
	 */",
 "/**
	 * Get custom validator for this field
	 * 
	 * @param object $validator
	 */",
 "/**
	 * Set custom validator for this field
	 * 
	 * @param object $validator
	 */",
 "/**
	 * Get maximum file size for all or specified file extension.
	 * Falls back to the default filesize restriction (\'*\')
	 * if the extension was not found.
	 *
	 * @deprecated 2.5
	 * @param string $ext
	 * @return int Filesize in bytes (0 means no filesize set)
	 */",
 "/**
	 * Set filesize maximums (in bytes).
	 * Automatically converts extensions to lowercase
	 * for easier matching.
	 * 
	 * Example: 
	 * <code>
	 * array(\'*\' => 200, \'jpg\' => 1000)
	 * </code>
	 *
	 * @deprecated 2.5
	 * @param unknown_type $rules
	 */",
 "/**
	 * @deprecated 2.5
	 * @return array
	 */",
 "/**
	 * @deprecated 2.5
	 * @param array $rules
	 */",
 "/**
	 * @param string $folderName
	 */",
 "/**
	 * @return string
	 */",
 "/**
 * Represents a file type which can be added to a form.
 * Automatically tries to save has_one-relations on the saved
 * record.
 * 
 * Please set a validator on the form-object to get feedback
 * about imposed filesize/extension restrictions.
 * 
 * CAUTION: Doesn\'t work in the CMS due to ajax submission, please use {@link FileIFrameField} instead.
 * 
 * <b>Usage</p>
 * 
 * If you want to implement a FileField into a form element, you need to pass it an array of source data.
 * 
 * <code>
 * class ExampleForm_Controller extends Page_Controller {
 * 
 * 	public function Form() {
 * 		$fields = new FieldSet(
 * 			new TextField(\'MyName\'),
 * 			new FileField(\'MyFile\')
 * 		);
 * 		$actions = new FieldSet(
 * 			new FormAction(\'doUpload\', \'Upload file\')
 * 		);
 *    $validator = new RequiredFields(array(\'MyName\', \'MyFile\'));
 * 
 * 		return new Form($this, \'Form\', $fields, $actions, $validator);
 * 	}
 * 
 * 	function doUpload($data, $form) {
 * 		$file = $data[\'MyFile\'];
 * 		$content = file_get_contents($file[\'tmp_name\']);
 * 		// ... process content
 * 	}
 * }
 * </code>
 * 
 * @package forms
 * @subpackage fields-files
 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return DataObjectSet Collection of ArrayData elements describing
	 *  the method (keys: \'Name\', \'Arguments\', \'ReturnType\')
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return string
	 */",
 "/**
 * Soap server class which auto-generates a WSDL
 * file to initialize PHPs integrated {@link SoapServer} class.
 * 
 * See {@link SOAPModelAccess} for an auto-generated SOAP API for your models.
 * 
 * @todo Improve documentation
 * @package sapphire
 * @subpackage integration
 */",
 "/**
	 * Override the default reporter with a custom configured subclass.
	 *
	 * @param string $reporter
	 */",
 "/**
	 * Run all test classes
	 */",
 "/**
	 * Browse all enabled test cases in the environment
	 */",
 "/**
	 * Run only a single test class
	 */",
 "/**
	 * Returns the URL for a test case file.
	 * 
	 * @return string
	 */",
 "/**
 * Controller that executes QUnit tests via jQuery.
 * Finds all htm/html files located in <yourmodule>/javascript/tests
 * and includes them as iFrames.
 * 
 * To create your own tests, please use this template:
 * <code>
 * <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">
 * <html>
 * <head>
 * 	<script src=\"http://code.jquery.com/jquery-latest.js\"></script>
 *  <link rel=\"stylesheet\" href=\"http://dev.jquery.com/view/trunk/qunit/testsuite.css\" type=\"text/css\" media=\"screen\" />
 * 	<script>
 * 	$(document).ready(function(){
 * 		test(\"test my feature\", function() {
 * 			ok(\'mytest\');
 * 		});
 * 	});
 *   </script>
 * </head>
 * <body>
 * <script type=\"text/javascript\" src=\"http://jqueryjs.googlecode.com/svn/trunk/qunit/testrunner.js\"></script>
 *  <h1>My Test Name</h1>
 *  <h2 id=\"banner\"></h2>
 *  <h2 id=\"userAgent\"></h2>
 *  <ol id=\"tests\"></ol>
 *  <div id=\"main\"></div>
 * </body>
 * </html>
 * </code>
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
	 * Create a new form, with the given fields an action buttons.
	 * 
	 * @param Controller $controller The parent controller, necessary to create the appropriate form action tag.
	 * @param String $name The method on the controller that will return this form object.
	 * @param FieldSet $fields All of the fields in the form - a {@link FieldSet} of {@link FormField} objects.
	 * @param FieldSet $actions All of the action buttons in the form - a {@link FieldSet} of {@link FormAction} objects
	 * @param Validator $validator Override the default validator instance (Default: {@link RequiredFields})
	 */",
 "/**
	 * Set up current form errors in session to
	 * the current form if appropriate.
	 */",
 "/**
	 * Handle a form submission.  GET and POST requests behave identically.
	 * Populates the form with {@link loadDataFrom()}, calls {@link validate()},
	 * and only triggers the requested form action/method
	 * if the form is valid.
	 */",
 "/**
	 * Handle a field request.
	 * Uses {@link Form->dataFieldByName()} to find a matching field,
	 * and falls back to {@link FieldSet->fieldByName()} to look
	 * for tabs instead. This means that if you have a tab and a
	 * formfield with the same name, this method gives priority
	 * to the formfield.
	 * 
	 * @param SS_HTTPRequest $request
	 * @return FormField
	 */",
 "/**
	 * Convert this form into a readonly form
	 */",
 "/**
	 * Set whether the user should be redirected back down to the 
	 * form on the page upon validation errors in the form or if 
	 * they just need to redirect back to the page
	 *
	 * @param bool Redirect to the form
	 */",
 "/**
	 * Get whether the user should be redirected back down to the
	 * form on the page upon validation errors
	 *
	 * @return bool
	 */",
 "/**
	 * Add an error message to a field on this form.  It will be saved into the session
	 * and used the next time this form is displayed.
	 */",
 "/**
	 * Get the {@link Validator} attached to this form.
	 * @return Validator
	 */",
 "/**
	 * Set the {@link Validator} on this form.
	 */",
 "/**
	 * Remove the {@link Validator} from this from.
	 */",
 "/**
	 * Convert this form to another format.
	 */",
 "/**
	 * Generate extra special fields - namely the security token field (if required).
	 * 
	 * @return FieldSet
	 */",
 "/**
	 * Return the form\'s fields - used by the templates
	 * 
	 * @return FieldSet The form fields
	 */",
 "/**
	 * Return all <input type=\"hidden\"> fields
	 * in a form - including fields nested in {@link CompositeFields}.
	 * Useful when doing custom field layouts.
	 * 
	 * @return FieldSet
	 */",
 "/**
	 * Setter for the form fields.
	 *
	 * @param FieldSet $fields
	 */",
 "/**
	 * Get a named field from this form\'s fields.
	 * It will traverse into composite fields for you, to find the field you want.
	 * It will only return a data field.
	 * 
	 * @return FormField
	 */",
 "/**
	 * Return the form\'s action buttons - used by the templates
	 * 
	 * @return FieldSet The action list
	 */",
 "/**
	 * Setter for the form actions.
	 *
	 * @param FieldSet $actions
	 */",
 "/**
	 * Unset all form actions
	 */",
 "/**
	 * Unset the form\'s action button by its name.
	 * 
	 * @param string $name
	 */",
 "/**
	 * Unset the form\'s dataField by its name
	 */",
 "/**
	 * Remove a field from the given tab.
	 */",
 "/**
	 * Return the attributes of the form tag - used by the templates.
	 * 
	 * @return string The attribute string
	 */",
 "/**
	* Set the target of this form to any value - useful for opening the form contents in a new window or refreshing another frame
	* 
	* @param target The value of the target
	*/",
 "/**
	 * Set the legend value to be inserted into
	 * the <legend> element in the Form.ss template.
	 */",
 "/**
	 * Set the SS template that this form should use
	 * to render with. The default is \"Form\".
	 * 
	 * @param string $template The name of the template (without the .ss extension)
	 */",
 "/**
	 * Return the template to render this form with.
	 * If the template isn\'t set, then default to the
	 * form class name e.g \"Form\".
	 * 
	 * @return string
	 */",
 "/**
	 * Returns the encoding type of the form.
	 * This will be either \"multipart/form-data\"\" if there are any {@link FileField} instances,
	 * otherwise \"application/x-www-form-urlencoded\"
	 * 
	 * @return string The encoding mime type
	 */",
 "/**
	 * Returns the real HTTP method for the form:
	 * GET, POST, PUT, DELETE or HEAD.
	 * As most browsers only support GET and POST in
	 * form submissions, all other HTTP methods are
	 * added as a hidden field \"_method\" that
	 * gets evaluated in {@link Director::direct()}.
	 * See {@link FormMethod()} to get a HTTP method
	 * for safe insertion into a <form> tag.
	 * 
	 * @return string HTTP method
	 */",
 "/**
	 * Returns the form method to be used in the <form> tag.
	 * See {@link FormHttpMethod()} to get the \"real\" method.
	 * 
	 * @return string Form tag compatbile HTTP method: \'get\' or \'post\'
	 */",
 "/**
	 * Set the form method: GET, POST, PUT, DELETE.
	 * 
	 * @param $method string
	 */",
 "/**
	 * Return the form\'s action attribute.
	 * This is build by adding an executeForm get variable to the parent controller\'s Link() value
	 * 
	 * @return string 
	 */",
 "/**
	 * Set the form action attribute to a custom URL.
	 * 
	 * Note: For \"normal\" forms, you shouldn\'t need to use this method.  It is recommended only for situations where you have
	 * two relatively distinct parts of the system trying to communicate via a form post.
	 */",
 "/**
	 * Returns the name of the form
	 */",
 "/**
	 * Set the HTML ID attribute of the form
	 */",
 "/**
	 * Returns this form\'s controller
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Returns an object where there is a method with the same name as each data field on the form.
	 * That method will return the field itself.
	 * It means that you can execute $firstNameField = $form->FieldMap()->FirstName(), which can be handy
	 */",
 "/**
	 * The next functions store and modify the forms
	 * message attributes. messages are stored in session under
	 * $_SESSION[formname][message];
	 * 
	 * @return string
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Set a status message for the form.
	 * 
	 * @param message the text of the message
	 * @param type Should be set to good, bad, or warning.
	 */",
 "/**
	 * Set a message to the session, for display next time this form is shown.
	 * 
	 * @param message the text of the message
	 * @param type Should be set to good, bad, or warning.
	 */",
 "/**
	 * Returns the DataObject that has given this form its data
	 * through {@link loadDataFrom()}.
	 * 
	 * @return DataObject
	 */",
 "/**
	 * Get the legend value to be inserted into the
	 * <legend> element in Form.ss
	 *
	 * @return string
	 */",
 "/**
	 * Processing that occurs before a form is executed.
	 * This includes form validation, if it fails, we redirect back
	 * to the form with appropriate error messages.
	 * Triggered through {@link httpSubmission()}.
	 * Note that CSRF protection takes place in {@link httpSubmission()},
	 * if it fails the form data will never reach this method.
	 * 
	 * @return boolean
	 */",
 "/**
	 * Load data from the given DataObject or array.
	 * It will call $object->MyField to get the value of MyField.
	 * If you passed an array, it will call $object[MyField].
	 * Doesn\'t save into dataless FormFields ({@link DatalessField}),
	 * as determined by {@link FieldSet->dataFields()}.
	 * 
	 * By default, if a field isn\'t set (as determined by isset()),
	 * its value will not be saved to the field, retaining
	 * potential existing values.
	 * 
	 * Passed data should not be escaped, and is saved to the FormField instances unescaped.
	 * Escaping happens automatically on saving the data through {@link saveInto()}.
	 * 
	 * @uses FieldSet->dataFields()
	 * @uses FormField->setValue()
	 * 
	 * @param array|DataObject $data
	 * @param boolean $clearMissingFields By default, fields which don\'t match
	 *  a property or array-key of the passed {@link $data} argument are \"left alone\",
	 *  meaning they retain any previous values (if present). If this flag is set to true,
	 *  those fields are overwritten with null regardless if they have a match in {@link $data}.
	 * @param $fieldList An optional list of fields to process.  This can be useful when you have a 
	 * form that has some fields that save to one object, and some that save to another.
	 */",
 "/**
	 * Save the contents of this form into the given data object.
	 * It will make use of setCastedField() to do this.
	 * 
	 * @param $dataObject The object to save data into
	 * @param $fieldList An optional list of fields to process.  This can be useful when you have a 
	 * form that has some fields that save to one object, and some that save to another.
	 */",
 "/**
	 * Get the submitted data from this form through
	 * {@link FieldSet->dataFields()}, which filters out
	 * any form-specific data like form-actions.
	 * Calls {@link FormField->dataValue()} on each field,
	 * which returns a value suitable for insertion into a DataObject
	 * property.
	 * 
	 * @return array
	 */",
 "/**
	 * Resets a specific field to its passed default value.
	 * Does NOT clear out all submitted data in the form.
	 * 
	 * @param string $fieldName
	 * @param mixed $fieldValue
	 */",
 "/**
	 * Call the given method on the given field.
	 * This is used by Ajax-savvy form fields.  By putting \'&action=callfieldmethod\' to the end
	 * of the form action, they can access server-side data.
	 * @param fieldName The name of the field.  Can be overridden by $_REQUEST[fieldName]
	 * @param methodName The name of the field.  Can be overridden by $_REQUEST[methodName]
	 */",
 "/**
	 * Return a rendered version of this form.
	 * 
	 * This is returned when you access a form as $FormObject rather
	 * than <% control FormObject %>
	 */",
 "/**
	 * Return a rendered version of this form, suitable for ajax post-back.
	 * It triggers slightly different behaviour, such as disabling the rewriting of # links
	 */",
 "/**
	 * Returns an HTML rendition of this form, without the <form> tag itself.
	 * Attaches 3 extra hidden files, _form_action, _form_name, _form_method, and _form_enctype.  These are
	 * the attributes of the form.  These fields can be used to send the form to Ajax.
	 */",
 "/**
	 * Render this form using the given template, and return the result as a string
	 * You can pass either an SSViewer or a template name
	 */",
 "/**
	 * Sets the button that was clicked.  This should only be called by the Controller.
	 * @param funcName The name of the action method that will be called.
	 */",
 "/**
	 * Return the default button that should be clicked when another one isn\'t available
	 */",
 "/**
	 * Disable the default button.
	 * Ordinarily, when a form is processed and no action_XXX button is available, then the first button in the actions list
	 * will be pressed.  However, if this is \"delete\", for example, this isn\'t such a good idea.
	 */",
 "/**
	 * Disable the requirement of a security token on this form instance. This security protects
	 * against CSRF attacks, but you should disable this if you don\'t want to tie 
	 * a form to a session - eg a search form.
	 * 
	 * Check for token state with {@link getSecurityToken()} and {@link SecurityToken->isEnabled()}.
	 */",
 "/**
	 * Enable {@link SecurityToken} protection for this form instance.
	 * 
	 * Check for token state with {@link getSecurityToken()} and {@link SecurityToken->isEnabled()}.
	 */",
 "/**
	 * Disable security tokens for every form.
	 * Note that this doesn\'t apply to {@link SecurityToken}
	 * instances outside of the Form class, nor applies
	 * to existing form instances.
	 * 
	 * See {@link enable_all_security_tokens()}.
	 * 
	 * @deprecated 2.5 Use SecurityToken::disable()
	 */",
 "/**
	 * Returns true if security is enabled - that is if the security token
	 * should be included and checked on this form.
	 * 
	 * @deprecated 2.5 Use Form->getSecurityToken()->isEnabled()
	 *
	 * @return bool
	 */",
 "/**
	 * Returns the security token for this form (if any exists).
	 * Doesn\'t check for {@link securityTokenEnabled()}.
	 * Use {@link SecurityToken::inst()} to get a global token.
	 * 
	 * @return SecurityToken|null
	 */",
 "/**
	 * Returns the name of a field, if that\'s the only field that the current controller is interested in.
	 * It checks for a call to the callfieldmethod action.
	 * This is useful for optimising your forms
	 * 
	 * @return string
	 */",
 "/**
	 * Return the current form action being called, if available.
	 * This is useful for optimising your forms
	 */",
 "/**
	 * Set the current form action.  Should only be called by Controller.
	 */",
 "/**
	 * Compiles all CSS-classes. 
	 * 
	 * @return String CSS-classnames, separated by a space
	 */",
 "/**
	 * Add a CSS-class to the form-container.
	 * 
	 * @param $class String
	 */",
 "/**
	 * Remove a CSS-class from the form-container.
	 * 
	 * @param $class String
	 */",
 "/**
	 * Test a submission of this form.
	 * @return SS_HTTPResponse the response object that the handling controller produces.  You can interrogate this in your unit test.
	 */",
 "/**
	 * Test an ajax submission of this form.
	 * @return SS_HTTPResponse the response object that the handling controller produces.  You can interrogate this in your unit test.
	 */",
 "/**
 * Base class for all forms.
 * The form class is an extensible base for all forms on a sapphire application.  It can be used
 * either by extending it, and creating processor methods on the subclass, or by creating instances
 * of form whose actions are handled by the parent controller.
 *
 * In either case, if you want to get a form to do anything, it must be inextricably tied to a
 * controller.  The constructor is passed a controller and a method on that controller.  This method
 * should return the form object, and it shouldn\'t require any arguments.  Parameters, if necessary,
 * can be passed using the URL or get variables.  These restrictions are in place so that we can
 * recreate the form object upon form submission, without the use of a session, which would be too
 * resource-intensive.
 * 
 * You will need to create at least one method for processing the submission (through {@link FormAction}).
 * This method will be passed two parameters: the raw request data, and the form object.
 * Usually you want to save data into a {@link DataObject} by using {@link saveInto()}.
 * If you want to process the submitted data in any way, please use {@link getData()} rather than
 * the raw request data.
 * 
 * <h2>Validation</h2>
 * Each form needs some form of {@link Validator} to trigger the {@link FormField->validate()} methods for each field.
 * You can\'t disable validator for security reasons, because crucial behaviour like extension checks for file uploads depend on it.
 * The default validator is an instance of {@link RequiredFields}.
 * If you want to enforce serverside-validation to be ignored for a specific {@link FormField},
 * you need to subclass it.
 *
 * <h2>URL Handling</h2>
 * The form class extends {@link RequestHandler}, which means it can
 * be accessed directly through a URL. This can be handy for refreshing
 * a form by ajax, or even just displaying a single form field.
 * You can find out the base URL for your form by looking at the
 * <form action=\"...\"> value. For example, the edit form in the CMS would be located at
 * \"admin/EditForm\". This URL will render the form without its surrounding
 * template when called through GET instead of POST. 
 * 
 * By appending to this URL, you can render invidual form elements
 * through the {@link FormField->FieldHolder()} method.
 * For example, the \"URLSegment\" field in a standard CMS form would be
 * accessible through \"admin/EditForm/field/URLSegment/FieldHolder\".
 *
 * @package forms
 * @subpackage core
 */",
 "/**
	 * Ensure that all potential method calls get passed to __call(), therefore to dataFieldByName
	 */",
 "/**
 * @package forms
 * @subpackage core
 */",
 "/**
   * Method to authenticate an user
   *
   * @param array $RAW_data Raw data to authenticate the user
   * @param Form $form Optional: If passed, better error messages can be
   *                             produced by using
   *                             {@link Form::sessionMessage()}
   * @return bool|Member Returns FALSE if authentication fails, otherwise
   *                     the member object
   */",
 "/**
   * Method that creates the login form for this authentication method
   *
   * @param Controller The parent controller, necessary to create the
   *                   appropriate form action tag
   * @return Form Returns the login form to use with this authentication
   *              method
   */",
 "/**
   * Get the name of the authentication method
   *
   * @return string Returns the name of the authentication method.
   */",
 "/**
   * Register a new authenticator
   *
   * The new authenticator has to exist and to be derived from the
   * {@link Authenticator}.
   * Every authenticator can be registered only once.
   *
   * @param string $authenticator Name of the authenticator class to
   *                              register
   * @return bool Returns TRUE on success, FALSE otherwise.
   */",
 "/**
	 * Remove a previously registered authenticator
	 *
	 * @param string $authenticator Name of the authenticator class to register
	 * @return bool Returns TRUE on success, FALSE otherwise.
	 */",
 "/**
   * Check if a given authenticator is registered
   *
   * @param string $authenticator Name of the authenticator class to check
   * @return bool Returns TRUE if the authenticator is registered, FALSE
   *              otherwise.
   */",
 "/**
   * Get all registered authenticators
   *
   * @return array Returns an array with the class names of all registered
   *               authenticators.
   */",
 "/**
   * Set a default authenticator (shows first in tabs)
   *
   * @param string
   */",
 "/**
   * @return string
   */",
 "/**
   * Callback function that is called when the authenticator is registered
   *
   * Use this method for initialization of a newly registered authenticator.
   * Just overload this method and it will be called when the authenticator
   * is registered.
   * <b>If the method returns FALSE, the authenticator won\'t be
   * registered!</b>
   *
   * @return bool Returns TRUE on success, FALSE otherwise.
   */",
 "/**
   * Callback function that is called when an authenticator is removed.
   *
   * @return bool
   */",
 "/**
 * Abstract base class for an authentication method
 *
 * This class is used as a base class for the different authentication
 * methods like {@link MemberAuthenticator} or {@link OpenIDAuthenticator}.
 *
 * @author Markus Lanthaler <markus@silverstripe.com>
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Return this field\'s linked items
	 */",
 "/**
	 * We overwrite the field attribute to add our hidden fields, as this 
	 * formfield can contain multiple values.
	 */",
 "/**
	 * Save the results into the form
	 * Calls function $record->onChange($items) before saving to the assummed 
	 * Component set.
	 */",
 "/**
	 * Changes this field to the readonly field.
	 */",
 "/**
 * This formfield represents many-many joins using a tree selector shown in a dropdown styled element
 * which can be added to any form usually in the CMS.
 * 
 * This form class allows you to represent Many-Many Joins in a handy single field. The field has javascript which generates a AJAX tree of the site structure allowing you to save selected options to a component set on a given {@link DataObject}.
 * 
 * <b>Saving</b>
 * 
 * This field saves a {@link ComponentSet} object which is present on the {@link DataObject} passed by the form, returned by calling a function with the same name as the field. The Join is updated by running setByIDList on the {@link ComponentSet}
 * 
 * <b>Customizing Save Behaviour</b>
 * 
 * Before the data is saved, you can modify the ID list sent to the {@link ComponentSet} by specifying a function on the {@link DataObject} called \"onChange[fieldname](&items)\". This will be passed by reference the IDlist (an array of ID\'s) from the Treefield to be saved to the component set. 
 * Returning false on this method will prevent treemultiselect from saving to the {@link ComponentSet} of the given {@link DataObject}
 * 
 * <code>
 * // Called when we try and set the Parents() component set
 * // by Tree Multiselect Field in the administration.
 * function onChangeParents(&$items) {
 *  // This ensures this DataObject can never be a parent of itself
 * 	if($items){
 * 		foreach($items as $k => $id){
 * 			if($id == $this->ID){
 * 				unset($items[$k]);
 * 			}
 * 		}
 * 	}	
 * 	return true;
 * }
 * </code> 
 * 
 * @see TreeDropdownField for the sample implementation, but only allowing single selects
 * 
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
     *    Sets the target URL.
     *    @param SimpleUrl $url   URL as object.
     *    @access public
     */",
 "/**
     *    Resource name.
     *    @return SimpleUrl        Current url.
     *    @access protected
     */",
 "/**
     *    Creates the first line which is the actual request.
     *    @param string $method   HTTP request method, usually GET.
     *    @return string          Request line content.
     *    @access protected
     */",
 "/**
     *    Creates the host part of the request.
     *    @return string          Host line content.
     *    @access protected
     */",
 "/**
     *    Opens a socket to the route.
     *    @param string $method      HTTP request method, usually GET.
     *    @param integer $timeout    Connection timeout.
     *    @return SimpleSocket       New socket.
     *    @access public
     */",
 "/**
     *    Factory for socket.
     *    @param string $scheme                   Protocol to use.
     *    @param string $host                     Hostname to connect to.
     *    @param integer $port                    Remote port.
     *    @param integer $timeout                 Connection timeout.
     *    @return SimpleSocket/SimpleSecureSocket New socket.
     *    @access protected
     */",
 "/**
 *    Creates HTTP headers for the end point of
 *    a HTTP request.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Stashes the proxy address.
     *    @param SimpleUrl $url     URL as object.
     *    @param string $proxy      Proxy URL.
     *    @param string $username   Username for autentication.
     *    @param string $password   Password for autentication.
     *    @access public
     */",
 "/**
     *    Creates the first line which is the actual request.
     *    @param string $method   HTTP request method, usually GET.
     *    @param SimpleUrl $url   URL as object.
     *    @return string          Request line content.
     *    @access protected
     */",
 "/**
     *    Creates the host part of the request.
     *    @param SimpleUrl $url   URL as object.
     *    @return string          Host line content.
     *    @access protected
     */",
 "/**
     *    Opens a socket to the route.
     *    @param string $method       HTTP request method, usually GET.
     *    @param integer $timeout     Connection timeout.
     *    @return SimpleSocket        New socket.
     *    @access public
     */",
 "/**
 *    Creates HTTP headers for the end point of
 *    a HTTP request via a proxy server.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Builds the socket request from the different pieces.
     *    These include proxy information, URL, cookies, headers,
     *    request method and choice of encoding.
     *    @param SimpleRoute $route              Request route.
     *    @param SimpleFormEncoding $encoding    Content to send with
     *                                           request.
     *    @access public
     */",
 "/**
     *    Dispatches the content to the route\'s socket.
     *    @param integer $timeout      Connection timeout.
     *    @return SimpleHttpResponse   A response which may only have
     *                                 an error, but hopefully has a
     *                                 complete web page.
     *    @access public
     */",
 "/**
     *    Sends the headers.
     *    @param SimpleSocket $socket           Open socket.
     *    @param string $method                 HTTP request method,
     *                                          usually GET.
     *    @param SimpleFormEncoding $encoding   Content to send with request.
     *    @access private
     */",
 "/**
     *    Adds a header line to the request.
     *    @param string $header_line    Text of full header line.
     *    @access public
     */",
 "/**
     *    Reads all the relevant cookies from the
     *    cookie jar.
     *    @param SimpleCookieJar $jar     Jar to read
     *    @param SimpleUrl $url           Url to use for scope.
     *    @access public
     */",
 "/**
     *    Wraps the socket in a response parser.
     *    @param SimpleSocket $socket   Responding socket.
     *    @return SimpleHttpResponse    Parsed response object.
     *    @access protected
     */",
 "/**
 *    HTTP request for a web page. Factory for
 *    HttpResponse object.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Parses the incoming header block.
     *    @param string $headers     Header block.
     *    @access public
     */",
 "/**
     *    Accessor for parsed HTTP protocol version.
     *    @return integer           HTTP error code.
     *    @access public
     */",
 "/**
     *    Accessor for raw header block.
     *    @return string        All headers as raw string.
     *    @access public
     */",
 "/**
     *    Accessor for parsed HTTP error code.
     *    @return integer           HTTP error code.
     *    @access public
     */",
 "/**
     *    Returns the redirected URL or false if
     *    no redirection.
     *    @return string      URL or false for none.
     *    @access public
     */",
 "/**
     *    Test to see if the response is a valid redirect.
     *    @return boolean       True if valid redirect.
     *    @access public
     */",
 "/**
     *    Test to see if the response is an authentication
     *    challenge.
     *    @return boolean       True if challenge.
     *    @access public
     */",
 "/**
     *    Accessor for MIME type header information.
     *    @return string           MIME type.
     *    @access public
     */",
 "/**
     *    Accessor for authentication type.
     *    @return string        Type.
     *    @access public
     */",
 "/**
     *    Accessor for security realm.
     *    @return string        Realm.
     *    @access public
     */",
 "/**
     *    Writes new cookies to the cookie jar.
     *    @param SimpleCookieJar $jar   Jar to write to.
     *    @param SimpleUrl $url         Host and path to write under.
     *    @access public
     */",
 "/**
     *    Called on each header line to accumulate the held
     *    data within the class.
     *    @param string $header_line        One line of header.
     *    @access protected
     */",
 "/**
     *    Parse the Set-cookie content.
     *    @param string $cookie_line    Text after \"Set-cookie:\"
     *    @return SimpleCookie          New cookie object.
     *    @access private
     */",
 "/**
 *    Collection of header lines in the response.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Constructor. Reads and parses the incoming
     *    content and headers.
     *    @param SimpleSocket $socket   Network connection to fetch
     *                                  response text from.
     *    @param SimpleUrl $url         Resource name.
     *    @param mixed $encoding        Record of content sent.
     *    @access public
     */",
 "/**
     *    Splits up the headers and the rest of the content.
     *    @param string $raw    Content to parse.
     *    @access private
     */",
 "/**
     *    Original request method.
     *    @return string        GET, POST or HEAD.
     *    @access public
     */",
 "/**
     *    Resource name.
     *    @return SimpleUrl        Current url.
     *    @access public
     */",
 "/**
     *    Original request data.
     *    @return mixed              Sent content.
     *    @access public
     */",
 "/**
     *    Raw request that was sent down the wire.
     *    @return string        Bytes actually sent.
     *    @access public
     */",
 "/**
     *    Accessor for the content after the last
     *    header line.
     *    @return string           All content.
     *    @access public
     */",
 "/**
     *    Accessor for header block. The response is the
     *    combination of this and the content.
     *    @return SimpleHeaders        Wrapped header block.
     *    @access public
     */",
 "/**
     *    Accessor for any new cookies.
     *    @return array       List of new cookies.
     *    @access public
     */",
 "/**
     *    Reads the whole of the socket output into a
     *    single string.
     *    @param SimpleSocket $socket  Unread socket.
     *    @return string               Raw output if successful
     *                                 else false.
     *    @access private
     */",
 "/**
     *    Test to see if the packet from the socket is the
     *    last one.
     *    @param string $packet    Chunk to interpret.
     *    @return boolean          True if empty or EOF.
     *    @access private
     */",
 "/**
 *    Basic HTTP response.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
 * Read-only field to display a non-editable value with a label.
 * Consider using an {@link LabelField} if you just need a label-less
 * value display.
 * 
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
 * Stores a queued email to be sent at the given time
 * @package sapphire
 * @subpackage email
 */",
 "/**
	 * Validates for RFC 2822 compliant email adresses.
	 * 
	 * @see http://www.regular-expressions.info/email.html
	 * @see http://www.ietf.org/rfc/rfc2822.txt
	 * 
	 * @param Validator $validator
	 * @return String
	 */",
 "/**
 * Text field with Email Validation.
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
 * This class lets you export a static copy of your site.
 * It creates a huge number of folders each containing an index.html file.
 * This preserves the URL naming format.
 * 
 * Requirements: Unix Filesystem supporting symlinking. Doesn\'t work on Windows.
 * 
 * <b>Usage</b>
 * 
 * The exporter can only be invoked through a URL. Usage on commandline (through [sake](sake)) is not possible at the moment, as we\'re sending a file to the browser for download.
 * 
 * <pre>http://localhost/StaticExporter/export</pre>
 * 
 * Specify a custom baseurl in case you want to deploy the static HTML pages on a different host:
 * <pre>http://localhost/StaticExporter/export?baseurl=http://example.com</pre>
 * 
 * @see StaticPublisher
 * 
 * @package cms
 * @subpackage export
 */",
 "/**
	 * Override the default reporter with a custom configured subclass.
	 *
	 * @param string $reporter
	 */",
 "/**
	 * Run test classes that should be run with every commit.
	 * Currently excludes PhpSyntaxTest
	 */",
 "/**
	 * Run test classes that should be run before build - i.e., everything possible.
	 */",
 "/**
	 * Browse all enabled test cases in the environment
	 */",
 "/**
	 * Run a coverage test across all modules
	 */",
 "/**
	 * Run only a single coverage test class or a comma-separated list of tests
	 */",
 "/**
	 * Run coverage tests for one or more \"modules\".
	 * A module is generally a toplevel folder, e.g. \"mysite\" or \"sapphire\".
	 */",
 "/**
	 * Run only a single test class or a comma-separated list of tests
	 */",
 "/**
	 * Run tests for one or more \"modules\".
	 * A module is generally a toplevel folder, e.g. \"mysite\" or \"sapphire\".
	 */",
 "/**
	 * @param array $classList
	 * @param boolean $coverage
	 */",
 "/**
	 * Start a test session.
	 * Usage: visit dev/tests/startsession?fixture=(fixturefile).  A test database will be constructed, and your browser session will be amended
	 * to use this database.  This can only be run on dev and test sites.
	 */",
 "/**
 * Controller that executes PHPUnit tests.
 * 
 * Alternatively, you can also use the \"phpunit\" binary directly by
 * pointing it to a file or folder containing unit tests.
 * See phpunit.dist.xml in the webroot for configuration details.
 *
 * <h2>URL Options</h2>
 * - SkipTests: A comma-separated list of test classes to skip (useful when running dev/tests/all)
 * 
 * See {@link browse()} output for generic usage instructions.
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
     * Filter logging by $priority.  By default, it will accept any log
     * event whose priority value is less than or equal to $priority.
     *
     * @param  integer  $priority  Priority
     * @param  string   $operator  Comparison operator
     * @throws Zend_Log_Exception
     */",
 "/**
     * Returns TRUE to accept the message, FALSE to block it.
     *
     * @param  array    $event    event data
     * @return boolean            accepted?
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Filter
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Priority.php 14132 2009-02-21 20:23:00Z shahar $
 */",
 "/**
	 * Rebuilds the static cache for the pages passed through via $urls
	 *
	 * @param array $urls The URLs of pages to re-fetch and cache.
	 * @param bool $removeAll Remove all stale cache files (default TRUE).
	 */",
 "/**
 * @package cms
 * @subpackage tasks
 * 
 * @todo Make this use the Task interface once it gets merged back into trunk
 */",
 "/**
     * Class constructor
     *
     * @param Zend_Db_Adapter $db   Database adapter instance
     * @param string $table         Log table in database
     * @param array $columnMap
     */",
 "/**
     * Formatting is not possible on this writer
     */",
 "/**
     * Remove reference to database adapter
     *
     * @return void
     */",
 "/**
     * Write a message to the log.
     *
     * @param  array  $event  event data
     * @return void
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Writer
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Db.php 14336 2009-03-16 21:12:38Z wil $
 */",
 "/**
	 * @todo Improve documentation
	 */",
 "/**
	 * @todo Improve documentation
	 */",
 "/**
	 * @todo Move this to SS_Database or DB
	 */",
 "/**
	 * Returns the manifest of all classes which are present in the database.
	 * @param string $class Class name to check enum values for ClassName field
	 */",
 "/**
	 * Return the database tables linked to this class.
	 * Gets an array of the current class, it subclasses and its ancestors.  It then filters that list
	 * to those with DB tables
	 * 
	 * @param mixed $class string of the classname or instance of the class
	 * @todo Move this into data object
	 * @return array
	 */",
 "/**
	 * Return the root data class for that class.
	 * This root table has a lot of special use in the DataObject system.
	 * 
	 * @param mixed $class string of the classname or instance of the class
	 * @return array
	 */",
 "/**
	 * Returns a list of classes that inherit from the given class.
	 * The resulting array includes the base class passed
	 * through the $class parameter as the first array value.
	 * 
	 * Example usage:
	 * <code>
	 * ClassInfo::subclassesFor(\'BaseClass\');
	 * 	array(
	 * 	0 => \'BaseClass\',
	 * 	\'ChildClass\' => \'ChildClass\',
	 * 	\'GrandChildClass\' => \'GrandChildClass\'
	 * )
	 * </code>
	 * 
	 * @param mixed $class string of the classname or instance of the class
	 * @return array Names of all subclasses as an associative array.
	 */",
 "/**
	 * @todo Improve documentation
	 */",
 "/**
	 * @return array A self-keyed array of class names. Note that this is only available with Silverstripe
	 * classes and not built-in PHP classes.
	 */",
 "/**
	 * Returns true if the given class implements the given interface
	 */",
 "/**
	 * Returns true if $subclass is a subclass of $parentClass.
	 * Identical to the PHP built-in function, but faster.
	 */",
 "/**
	 * Get all classes contained in a file.
	 * @uses ManifestBuilder
	 * 
	 * @todo Doesn\'t return additional classes that only begin
	 *  with the filename, and have additional naming separated through underscores.
	 * 
	 * @param string $filePath Path to a PHP file (absolute or relative to webroot)
	 * @return array
	 */",
 "/**
	 * Returns all classes contained in a certain folder.
	 *
	 * @todo Doesn\'t return additional classes that only begin
	 *  with the filename, and have additional naming separated through underscores.
	 * 
	 * @param string $folderPath Relative or absolute folder path
	 * @return array Array of class names
	 */",
 "/**
	 * @deprecated Use Security::database_is_ready() instead.
	 */",
 "/**
 * Provides introspection information about the class tree.
 * It\'s a cached wrapper around the built-in class functions.  Sapphire uses class introspection heavily
 * and without the caching it creates an unfortunate performance hit.
 *
 * @package sapphire
 * @subpackage core
 */",
 "/**
     * Constructor
     *
     * @param  array $options Associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Change the master_file option
     * 
     * @param string $masterFile the complete path and name of the master file
     */",
 "/**
     * Change the master_file option
     * 
     * To keep the compatibility 
     * 
     * @deprecated
     * @param string $masterFile the complete path and name of the master file
     */",
 "/**
     * Public frontend to set an option
     *
     * Just a wrapper to get a specific behaviour for master_file
     *
     * @param  string $name  Name of the option
     * @param  mixed  $value Value of the option
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @param  boolean $doNotUnserialize       Do not serialize (even if automatic_serialization is true) => for internal use
     * @return mixed|false Cached datas
     */",
 "/**
     * Test if a cache is available for the given id
     *
     * @param  string $id Cache id
     * @return boolean True is a cache is available, false else
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Frontend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * The ContentController will take the URLSegment parameter from the URL and use that to look
	 * up a SiteTree record.
	 */",
 "/**
	 * Return the link to this controller, but force the expanded link to be returned so that form methods and
	 * similar will function properly.
	 *
	 * @return string
	 */",
 "/**
	 * Return the children of a given page. The parent reference can either be a page link or an ID.
	 *
	 * @param string|int $parentRef
	 * @return DataObjectSet
	 */",
 "/**
	 * @return DataObjectSet
	 */",
 "/**
	 * This acts the same as {@link Controller::handleRequest()}, but if an action cannot be found this will attempt to
	 * fall over to a child controller in order to provide functionality for nested URLs.
	 *
	 * @return SS_HTTPResponse
	 */",
 "/**
	 * @uses ErrorPage::response_for()
	 */",
 "/**
	 * Handles widgets attached to a page through one or more {@link WidgetArea} elements.
	 * Iterated through each $has_one relation with a {@link WidgetArea}
	 * and looks for connected widgets by their database identifier.
	 * Assumes URLs in the following format: <URLSegment>/widget/<Widget-ID>.
	 * 
	 * @return RequestHandler
	 */",
 "/**
	 * Get the project name
	 *
	 * @return string
	 */",
 "/**
	 * Returns the associated database record
	 */",
 "/**
	 * Returns a fixed navigation menu of the given level.
	 * @return DataObjectSet
	 */",
 "/**
	 * Returns the default log-in form.
	 *
	 * @todo Check if here should be returned just the default log-in form or
	 *       all available log-in forms (also OpenID...)
	 */",
 "/**
	 * Returns a page comment system
	 */",
 "/**
	 * Returns the xml:lang and lang attributes.
	 * 
	 * @deprecated 2.5 Use ContentLocale() instead and write attribute names suitable to XHTML/HTML
	 * templates directly in the template.
	 */",
 "/**
	 * Returns an RFC1766 compliant locale string, e.g. \'fr-CA\'.
	 * Inspects the associated {@link dataRecord} for a {@link SiteTree->Locale} value if present,
	 * and falls back to {@link Translatable::get_current_locale()} or {@link i18n::default_locale()},
	 * depending if Translatable is enabled.
	 * 
	 * Suitable for insertion into lang= and xml:lang=
	 * attributes in HTML or XHTML output.
	 * 
	 * @return string
	 */",
 "/**
	 * This action is called by the installation system
	 */",
 "/**
 * The most common kind of controller; effectively a controller linked to a {@link DataObject}.
 *
 * ContentControllers are most useful in the content-focused areas of a site.  This is generally
 * the bulk of a site; however, they may be less appropriate in, for example, the user management
 * section of an application.
 *
 * On its own, content controller does very little.  Its constructor is passed a {@link DataObject}
 * which is stored in $this->dataRecord.  Any unrecognised method calls, for example, Title()
 * and Content(), will be passed along to the data record,
 *
 * Subclasses of ContentController are generally instantiated by ModelAsController; this will create
 * a controller based on the URLSegment action variable, by looking in the SiteTree table.
 * 
 * @todo Can this be used for anything other than SiteTree controllers?
 *
 * @package sapphire
 * @subpackage control
 */",
 "/**
 * A special kind of form used to make the action dialogs that appear just underneath the top-right
 * buttons in the CMS
 * 
 * @package cms
 * @subpackage core
 */",
 "/**
     * Class constructor
     *
     * @param array $elementMap
     */",
 "/**
     * Formats data into a single line to be written by the writer.
     *
     * @param  array    $event    event data
     * @return string             formatted line to write to the log
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Formatter
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Xml.php 12363 2008-11-07 10:45:22Z beberlei $
 */",
 "/**
 * Exception class for Zend_Currency
 *
 * @category  Zend
 * @package   Zend_Currency
 * @copyright Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * @param SiteTree $record
	 * @return Array template data
	 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
 * Navigator items are links that appear in the $SilverStripeNavigator bar.
 * To add an item, extends this class.
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
	 * Returns the number as a currency, eg ???$1,000.00???.
	 */",
 "/**
	 * Returns the number as a whole-number currency, eg ???$1,000???.
	 */",
 "/**
 * Represents a decimal field containing a currency amount.
 * Currency the currency class only supports single currencies.
 * 
 * Example definition via {@link DataObject::$db}:
 * <code>
 * static $db = array(
 * 	\"Price\" => \"Currency\",
 * 	\"Tax\" => \"Currency(5)\",
 * );
 * </code>
 *
 * @deprecated 2.5 Use Money class
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * Accepts form encoded strings and converts them
 * to a valid PHP array via {@link parse_str()}.
 * Use together with {@link RESTfulServer} to submit
 * data via POST or PUT.
 *
 * Example when using cURL on commandline:
 * <code>
 * curl -d \"Name=This is a new record\" http://host/api/v1/(DataObject)
 * curl -X PUT -d \"Name=This is an updated record\" http://host/api/v1/(DataObject)/1
 * </code>
 * 
 * @todo Format response form encoded as well - currently uses XMLDataFormatter
 * 
 * @author Cam Spiers <camspiers at gmail dot com>
 * 
 * @package sapphire
 * @subpackage formatters
 */",
 "/**
	 * Sets the character set for the MySQL database connection.
	 * 
	 * The character set connection should be set to \'utf8\' for SilverStripe version 2.4.0 and
	 * later.
	 * 
	 * However, sites created before version 2.4.0 should leave this unset or data that isn\'t 7-bit
	 * safe will be corrupted.  As such, the installer comes with this set in mysite/_config.php by
	 * default in versions 2.4.0 and later.
	 */",
 "/**
	 * Connect to a MySQL database.
	 * @param array $parameters An map of parameters, which should include:
	 *  - server: The server, eg, localhost
	 *  - username: The username to log on with
	 *  - password: The password to log on with
	 *  - database: The database to connect to
	 *  - timezone: (optional) The timezone offset. For example: +12:00, \"Pacific/Auckland\", or \"SYSTEM\"
	 */",
 "/**
	 * Not implemented, needed for PDO
	 */",
 "/**
	 * Returns true if this database supports collations
	 * @return boolean
	 */",
 "/**
	 * Get the version of MySQL.
	 * @return string
	 */",
 "/**
	 * Get the database server, namely mysql.
	 * @return string
	 */",
 "/**
	 * Drop the database that this object is currently connected to.
	 * Use with caution.
	 */",
 "/**
	 * Drop the database that this object is currently connected to.
	 * Use with caution.
	 */",
 "/**
	 * Returns the name of the currently selected database
	 */",
 "/**
	 * Switches to the given database.
	 * If the database doesn\'t exist, you should call createDatabase() after calling selectDatabase()
	 */",
 "/**
	 * Returns true if the named database exists.
	 */",
 "/**
	 * Returns a column 
	 */",
 "/**
	 * Create a new table.
	 * @param $tableName The name of the table
	 * @param $fields A map of field names to field types
	 * @param $indexes A map of indexes
	 * @param $options An map of additional options.  The available keys are as follows:
	 *   - \'MSSQLDatabase\'/\'MySQLDatabase\'/\'PostgreSQLDatabase\' - database-specific options such as \"engine\" for MySQL.
	 *   - \'temporary\' - If true, then a temporary table will be created
	 * @return The table name generated.  This may be different from the table name, for example with temporary tables.
	 */",
 "/**
	 * Alter a table\'s schema.
	 * @param $table The name of the table to alter
	 * @param $newFields New fields, a map of field name => field schema
	 * @param $newIndexes New indexes, a map of index name => index type
	 * @param $alteredFields Updated fields, a map of field name => field schema
	 * @param $alteredIndexes Updated indexes, a map of index name => index type
	 * @param $alteredOptions
	 */",
 "/**
	 * Checks a table\'s integrity and repairs it if necessary.
	 * @var string $tableName The name of the table.
	 * @return boolean Return true if the table has integrity after the method is complete.
	 */",
 "/**
	 * Helper function used by checkAndRepairTable.
	 * @param string $sql Query to run.
	 * @return boolean Returns if the query returns a successful result.
	 */",
 "/**
	 * Change the database type of the given field.
	 * @param string $tableName The name of the tbale the field is in.
	 * @param string $fieldName The name of the field to change.
	 * @param string $fieldSpec The new field specification
	 */",
 "/**
	 * Change the database column name of the given field.
	 * 
	 * @param string $tableName The name of the tbale the field is in.
	 * @param string $oldName The name of the field to change.
	 * @param string $newName The new name of the field
	 */",
 "/**
	 * Create an index on a table.
	 * 
	 * @param string $tableName The name of the table.
	 * @param string $indexName The name of the index.
	 * @param string $indexSpec The specification of the index, see {@link SS_Database::requireIndex()} for more details.
	 */",
 "/**
	 * This takes the index spec which has been provided by a class (ie static $indexes = blah blah)
	 * and turns it into a proper string.
	 * Some indexes may be arrays, such as fulltext and unique indexes, and this allows database-specific
	 * arrays to be created. See {@link requireTable()} for details on the index format.
	 * 
	 * @see http://dev.mysql.com/doc/refman/5.0/en/create-index.html
	 * 
	 * @param string|array $indexSpec
	 * @return string MySQL compatible ALTER TABLE syntax
	 */",
 "/**
	 * @param string $indexName
	 * @param string|array $indexSpec See {@link requireTable()} for details
	 * @return string MySQL compatible ALTER TABLE syntax
	 */",
 "/**
	 * MySQL does not need any transformations done on the index that\'s created, so we can just return it as-is
	 */",
 "/**
	 * Alter an index on a table.
	 * @param string $tableName The name of the table.
	 * @param string $indexName The name of the index.
	 * @param string $indexSpec The specification of the index, see {@link SS_Database::requireIndex()} for more details.
	 */",
 "/**
	 * Return the list of indexes in a table.
	 * @param string $table The table name.
	 * @return array
	 */",
 "/**
	 * Returns a list of all the tables in the database.
	 * @return array
	 */",
 "/**
	 * Return the number of rows affected by the previous operation.
	 * @return int 
	 */",
 "/**
	 * Return a boolean type-formatted string
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a date type-formatted string
	 * For MySQL, we simply return the word \'date\', no other parameters are necessary
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a decimal type-formatted string
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a enum type-formatted string
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a set type-formatted string
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a float type-formatted string
	 * For MySQL, we simply return the word \'date\', no other parameters are necessary
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a int type-formatted string
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a datetime type-formatted string
	 * For MySQL, we simply return the word \'datetime\', no other parameters are necessary
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a text type-formatted string
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a time type-formatted string
	 * For MySQL, we simply return the word \'time\', no other parameters are necessary
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * Return a varchar type-formatted string
	 * 
	 * @param array $values Contains a tokenised list of info about this data type
	 * @return string
	 */",
 "/**
	 * This returns the column which is the primary key for each table
	 * In Postgres, it is a SERIAL8, which is the equivalent of an auto_increment
	 *
	 * @return string
	 */",
 "/**
	 * Returns the SQL command to get all the tables in this database
	 */",
 "/**
	 * Returns true if the given table is exists in the current database 
	 * NOTE: Experimental; introduced for db-abstraction and may changed before 2.4 is released.
	 */",
 "/**
	 * Returns the values of the given enum field
	 * NOTE: Experimental; introduced for db-abstraction and may changed before 2.4 is released.
	 */",
 "/**
	 * The core search engine, used by this class and its subclasses to do fun stuff.
	 * Searches both SiteTree and File.
	 * 
	 * @param string $keywords Keywords as a string.
	 */",
 "/**
	 * MySQL uses NOW() to return the current date/time.
	 */",
 "/**
	 * Returns a SQL fragment for querying a fulltext search index
	 * @param $fields array The list of field names to search on
	 * @param $keywords string The search query
	 * @param $booleanSearch A MySQL-specific flag to switch to boolean search
	 */",
 "/**
	 * Function to return an SQL datetime expression that can be used with MySQL
	 * used for querying a datetime in a certain format
	 * @param string $date to be formated, can be either \'now\', literal datetime like \'1973-10-14 10:30:00\' or field name, e.g. \'\"SiteTree\".\"Created\"\'
	 * @param string $format to be used, supported specifiers:
	 * %Y = Year (four digits)
	 * %m = Month (01..12)
	 * %d = Day (01..31)
	 * %H = Hour (00..23)
	 * %i = Minutes (00..59)
	 * %s = Seconds (00..59)
	 * %U = unix timestamp, can only be used on it\'s own
	 * @return string SQL datetime expression to query for a formatted datetime
	 */",
 "/**
	 * Function to return an SQL datetime expression that can be used with MySQL
	 * used for querying a datetime addition
	 * @param string $date, can be either \'now\', literal datetime like \'1973-10-14 10:30:00\' or field name, e.g. \'\"SiteTree\".\"Created\"\'
	 * @param string $interval to be added, use the format [sign][integer] [qualifier], e.g. -1 Day, +15 minutes, +1 YEAR
	 * supported qualifiers:
	 * - years
	 * - months
	 * - days
	 * - hours
	 * - minutes
	 * - seconds
	 * This includes the singular forms as well
	 * @return string SQL datetime expression to query for a datetime (YYYY-MM-DD hh:mm:ss) which is the result of the addition
	 */",
 "/**
	 * Function to return an SQL datetime expression that can be used with MySQL
	 * used for querying a datetime substraction
	 * @param string $date1, can be either \'now\', literal datetime like \'1973-10-14 10:30:00\' or field name, e.g. \'\"SiteTree\".\"Created\"\'
	 * @param string $date2 to be substracted of $date1, can be either \'now\', literal datetime like \'1973-10-14 10:30:00\' or field name, e.g. \'\"SiteTree\".\"Created\"\'
	 * @return string SQL datetime expression to query for the interval between $date1 and $date2 in seconds which is the result of the substraction
	 */",
 "/**
 * MySQL connector class.
 * 
 * Supported indexes for {@link requireTable()}:
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Hook the result-set given into a Query class, suitable for use by sapphire.
	 * @param database The database object that created this query.
	 * @param handle the internal mysql handle that is points to the resultset.
	 */",
 "/**
 * A result-set from a MySQL database.
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * This method checks if a given filename exists in the include path (defined
 * in php.ini. 
 *
 * @return boolean when the file has been found in the include path.
 */",
 "/** 
	 * Getter for $coverage (@see $coverage).
	 * @return boolean
	 */",
 "/** 
	 * Setter for $coverage (@see $coverage).
	 * @parameter $value Boolean
	 */",
 "/** 
	 * Getter for $suite (@see $suite).
	 * @return PHPUnit_Framework_TestSuite
	 */",
 "/** 
	 * Setter for $suite (@see $suite).
	 * @param $value PHPUnit_Framework_TestSuite
	 */",
 "/** 
	 * Getter for $reporter (@see $reporter).
	 * @return PHPUnit_Framework_TestListener
	 */",
 "/** 
	 * Setter for $reporter (@see $reporter).
	 * @param $value PHPUnit_Framework_TestListener
	 */",
 "/** 
	 * Getter for $results (@see $results).
	 * @return PHPUnit_Framework_TestResult
	 */",
 "/** 
	 * Setter for $results (@see $results).
	 * @param $value PHPUnit_Framework_TestResult
	 */",
 "/** 
	 * Getter for $version (@see $version).
	 * @return String
	 */",
 "/**
	 * Loads and initiates phpunit, based on the available phpunit version.
	 *
	 * @return PhpUnitWrapper Instance of the php-wrapper class
	 */",
 "/**
	 * Returns true if one of the two supported PHPUNIT versions is installed.
	 *
	 * @return boolean true if PHPUnit has been installed on the environment.
	 */",
 "/** 
	 * Implements method, defined in the interface IPhpUnitWrapper:init (@see IPhpUnitWrapper).
	 * This wrapper class doesn\'t require any initialisation.
	 */",
 "/**
	 * This method is called before the unittests are performed. 
	 * This wrapper implements the non-PHPUnit version which means that unit tests
	 * can not be performed. 
	 * @throws PhpUnitWrapper_Excption
	 */",
 "/**
	 * This method is called after the unittests are performed. 
	 * This wrapper implements the non-PHPUnit version which means that unit tests
	 * can not be performed. 
	 * @throws PhpUnitWrapper_Excption
	 */",
 "/**
	 * Perform all tests, added to the suite and initialises Sapphire to collect
	 * the results of the unit tests.
	 *
	 * This method calls @see beforeRunTests and @see afterRunTests.
	 */",
 "/**
 * PHPUnit Wrapper class.
 * Base class for PHPUnit wrapper classes to support different PHPUnit versions.
 * The current implementation supports PHPUnit 3.4 and PHPUnit 3.5.
 */",
 "/** 
 * Interface, implementing the general PHPUnit wrapper API.
 */",
 "/**
 * PHPUnitWrapper Exception class
 */",
 "/**
	 * PHPUnit is a testing framework that can be installed using PEAR.
	 * It\'s not bundled with Sapphire, you will need to install it yourself.
	 * 
	 * @package sapphire
	 * @subpackage testing
	 */",
 "/**
 * Text field that automatically checks that the value entered is unique for the given
 * set of fields in a given set of tables
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * Convert a value to be suitable for an XML attribute.
	 * 
	 * @param array|string $val String to escape, or array of strings
	 * @return array|string
	 */",
 "/**
	 * Convert a value to be suitable for an HTML attribute.
	 * 
	 * This is useful for converting human readable values into
	 * a value suitable for an ID or NAME attribute.
	 * 
	 * @see http://www.w3.org/TR/REC-html40/types.html#type-cdata
	 * @uses Convert::raw2att()
	 * @param array|string $val String to escape, or array of strings
	 * @return array|string
	 */",
 "/**
	 * Ensure that text is properly escaped for XML.
	 * 
	 * @see http://www.w3.org/TR/REC-xml/#dt-escape
	 * @param array|string $val String to escape, or array of strings
	 * @return array|string
	 */",
 "/**
	 * Ensure that text is properly escaped for Javascript.
	 *
	 * @param array|string $val String to escape, or array of strings
	 * @return array|string
	 */",
 "/**
	 * Uses the PHP 5.2 native json_encode function if available,
	 * otherwise falls back to the Services_JSON class.
	 * 
	 * @see http://pear.php.net/pepr/pepr-proposal-show.php?id=198
	 * @uses Director::baseFolder()
	 * @uses Services_JSON
	 *
	 * @param mixed $val
	 * @return string JSON safe string
	 */",
 "/**
	 * Convert XML to raw text.
	 * @uses html2raw()
	 * @todo Currently &#xxx; entries are stripped; they should be converted
	 */",
 "/**
	 * Convert an array into a JSON encoded string.
	 * 
	 * @see http://pear.php.net/pepr/pepr-proposal-show.php?id=198
	 * @uses Director::baseFolder()
	 * @uses Services_JSON
	 * 
	 * @param array $val Array to convert
	 * @return string JSON encoded string
	 */",
 "/**
	 * Convert a JSON encoded string into an object.
	 * 
	 * @see http://pear.php.net/pepr/pepr-proposal-show.php?id=198
	 * @uses Director::baseFolder()
	 * @uses Services_JSON
	 *
	 * @param string $val
	 * @return mixed JSON safe string
	 */",
 "/**
	 * Convert a JSON string into an array.
	 * 
	 * @uses json2obj
	 * @param string $val JSON string to convert
	 * @return array|boolean
	 */",
 "/**
	 * @uses recursiveXMLToArray()
	 */",
 "/**
	 * Function recursively run from {@link Convert::xml2array()}
	 * @uses SimpleXMLElement
	 */",
 "/**
	 * Create a link if the string is a valid URL
	 * @param string The string to linkify
	 * @return A link to the URL if string is a URL
	 */",
 "/**
	 * Simple conversion of HTML to plaintext.
	 * 
	 * @param $data string
	 * @param $preserveLinks boolean
	 * @param $wordwrap array 
	 */",
 "/**
	 * There are no real specifications on correctly encoding mailto-links,
	 * but this seems to be compatible with most of the user-agents.
	 * Does nearly the same as rawurlencode().
	 * Please only encode the values, not the whole url, e.g.
	 * \"mailto:test@test.com?subject=\" . Convert::raw2mailto($subject)
	 * 
	 * @param $data string
	 * @return string
	 * @see http://www.ietf.org/rfc/rfc1738.txt
	 */",
 "/**
 * Library of conversion functions, implemented as static methods.
 *
 * The methods are all of the form (format)2(format), where the format is one of
 * 
 *  raw: A UTF8 string
 *  attr: A UTF8 string suitable for inclusion in an HTML attribute
 *  js: A UTF8 string suitable for inclusion in a double-quoted javascript string.
 * 
 *  array: A PHP associative array
 *  json: JavaScript object notation
 *
 *  html: HTML source suitable for use in a page or email
 *  text: Plain-text content, suitable for display to a user as-is, or insertion in a plaintext email.
 * 
 * Objects of type {@link ViewableData} can have an \"escaping type\",
 * which determines if they are automatically escaped before output by {@link SSViewer}. 
 * 
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * Create a new DataObjectSet. If you pass one or more arguments, it will try to convert them into {@link ArrayData} objects. 
	 * @todo Does NOT automatically convert objects with complex datatypes (e.g. converting arrays within an objects to its own DataObjectSet)							
	 * 
	 * @param ViewableData|array|mixed $items Parameters to use in this set, either as an associative array, object with simple properties, or as multiple parameters.
	 */",
 "/**
	 * Destory all of the DataObjects in this set.
	 */",
 "/**
	 * Removes all the items in this set.
	 */",
 "/**
	 * Convert this DataObjectSet to an array of DataObjects.
	 * @param string $index Index the array by this field.
	 * @return array
	 */",
 "/**
	* Convert this DataObjectSet to an array of maps.
	* @param string $index Index the array by this field.
	* @return array
	*/",
 "/**
	 * Returns an array of ID => Title for the items in this set.
	 * 
	 * This is an alias of {@link DataObjectSet->map()}
	 * 
	 * @deprecated 2.5 Please use map() instead
	 * 
	 * @param string $index The field to use as a key for the array
	 * @param string $titleField The field (or method) to get values for the map
	 * @param string $emptyString Empty option text e.g \"(Select one)\"
	 * @param bool $sort Sort the map alphabetically based on the $titleField value
	 * @return array
	 */",
 "/**
	 * Set number of objects on each page.
	 * @param int $length Number of objects per page
	 */",
 "/**
	 * Set the page limits.
	 * @param int $pageStart The start of this page.
	 * @param int $pageLength Number of objects per page
	 * @param int $totalSize Total number of objects.
	 */",
 "/**
	 * Get the page limits
	 * @return array
	 */",
 "/**
	 * Use the limit from the given query to add prev/next buttons to this DataObjectSet.
	 * @param SQLQuery $query The query used to generate this DataObjectSet
	 */",
 "/**
	 * Returns the number of the current page.
	 * @return int
	 */",
 "/**
	 * Returns the total number of pages.
	 * @return int
	 */",
 "/**
	 * Return a datafeed of page-links, good for use in search results, etc.
	 * $maxPages will put an upper limit on the number of pages to return.  It will
	 * show the pages surrounding the current page, so you can still get to the deeper pages.
	 * @param int $maxPages The maximum number of pages to return
	 * @return DataObjectSet
	 */",
 "/**
	 * Returns true if the current page is not the first page.
	 * @return boolean
	 */",
 "/**
	 * Returns true if the current page is not the last page.
	 * @return boolean
	 */",
 "/**
	 * Returns true if there is more than one page.
	 * @return boolean
	 */",
 "/**
	 * Returns the URL of the previous page.
	 * @return string
	 */",
 "/**
	 * Returns the URL of the next page.
	 * @return string
	 */",
 "/**
	 * Allows us to use multiple pagination GET variables on the same page (eg. if you have search results and page comments on a single page)
	 *
	 * Example: @see PageCommentInterface::Comments()
	 * @param string $var The variable to go in the GET string (Defaults to \'start\')
	 */",
 "/**
	 * Add an item to the DataObject Set.
	 * @param DataObject $item Item to add.
	 * @param string $key Key to index this DataObject by.
	 */",
 "/**
	 * Add an item to the beginning of the DataObjectSet
	 * @param DataObject $item Item to add
	 * @param string $key Key to index this DataObject by.
	 */",
 "/**
	 * Insert a DataObject at the beginning of this set.
	 * @param DataObject $item Item to insert.
	 */",
 "/**
	 * Remove a DataObject from the beginning of this set and return it.
	 * This is the equivalent of pop() but acts on the head of the set.
	 * Opposite of unshift().
	 * 
	 * @return DataObject (or null if there are no items in the set)
	 */",
 "/**
	 * Remove a DataObject from the end of this set and return it.
	 * This is the equivalent of shift() but acts on the tail of the set.
	 * Opposite of push().
	 * 
	 * @return DataObject (or null if there are no items in the set)
	 */",
 "/**
	 * Remove a DataObject from this set.
	 * @param DataObject $itemObject Item to remove.
	 */",
 "/**
	 * Replaces $itemOld with $itemNew
	 *
	 * @param DataObject $itemOld
	 * @param DataObject $itemNew
	 */",
 "/**
	 * Merge another set onto the end of this set.
	 * To merge without causing duplicates, consider calling
	 * {@link removeDuplicates()} after this method on the new set.
	 * 
	 * @param DataObjectSet $anotherSet Set to mege onto this set.
	 */",
 "/**
	 * Gets a specific slice of an existing set.
	 * 
	 * @param int $offset
	 * @param int $length
	 * @return DataObjectSet
	 */",
 "/**
	 * Returns an Iterator for this DataObjectSet.
	 * This function allows you to use DataObjectSets in foreach loops
	 * @return DataObjectSet_Iterator
	 */",
 "/**
	 * Returns false if the set is empty.
	 * @return boolean
	 */",
 "/**
	 * Return the first item in the set.
	 * @return DataObject
	 */",
 "/**
	 * Return the last item in the set.
	 * @return DataObject
	 */",
 "/**
	 * Return the total number of items in this dataset.
	 * @return int
	 */",
 "/**
	 * Returns the actual number of items in this dataset.
	 * @return int
	 */",
 "/**
	 * Returns this set as a XHTML unordered list.
	 * @return string
	 */",
 "/**
	 * Returns this set as a XHTML unordered list.
	 * @return string
	 */",
 "/**
	 * Returns an array of ID => Title for the items in this set.
	 * 
	 * @param string $index The field to use as a key for the array
	 * @param string $titleField The field (or method) to get values for the map
	 * @param string $emptyString Empty option text e.g \"(Select one)\"
	 * @param bool $sort Sort the map alphabetically based on the $titleField value
	 * @return array
	 */",
 "/**
	 * Find an item in this list where the field $key is equal to $value
	 * Eg: $doSet->find(\'ID\', 4);
	 * @return ViewableData The first matching item.
	 */",
 "/**
	 * Return a column of the given field
	 * @param string $value The field name
	 * @return array
	 */",
 "/**
	 * Returns an array of DataObjectSets. The array is keyed by index.
	 * 
	 * @param string $index The field name to index the array by.
	 * @return array
	 */",
 "/**
	 * Groups the items by a given field.
	 * Returns a DataObjectSet suitable for use in a nested template.
	 * @param string $index The field to group by
	 * @param string $childControl The name of the nested page control
	 * @return DataObjectSet
	 */",
 "/**
	 * Returns a nested unordered list out of a \"chain\" of DataObject-relations,
	 * using the automagic ComponentSet-relation-methods to find subsequent DataObjectSets.
	 * The formatting of the list can be different for each level, and is evaluated as an SS-template
	 * with access to the current DataObjects attributes and methods.
	 *
	 * Example: Groups (Level 0, the \"calling\" DataObjectSet, needs to be queried externally)
	 * and their Members (Level 1, determined by the Group->Members()-relation).
	 * 
	 * @param array $nestingLevels
	 * Defines relation-methods on DataObjects as a string, plus custom
	 * SS-template-code for the list-output. Use \"Root\" for the current DataObjectSet (is will not evaluate into
	 * a function).
	 * Caution: Don\'t close the list-elements (determined programatically).
	 * You need to escape dollar-signs that need to be evaluated as SS-template-code.
	 * Use $EvenOdd to get appropriate classes for CSS-styling.
	 * Format:
	 * array(
	 * 	array(
	 * 		\"dataclass\" => \"Root\",
	 * 		\"template\" => \"<li class=\"\$EvenOdd\"><a href=\"admin/crm/show/\$ID\">\$AccountName</a>\"
	 * 	),
	 * 	array(
	 * 		\"dataclass\" => \"GrantObjects\",
	 * 		\"template\" => \"<li class=\"\$EvenOdd\"><a href=\"admin/crm/showgrant/\$ID\">#\$GrantNumber: \$TotalAmount.Nice, \$ApplicationDate.ShortMonth \$ApplicationDate.Year</a>\"
	 * 	)
	 * );
	 * @param string $ulExtraAttributes Extra attributes
	 * 
	 * @return string Unordered List (HTML)
	 */",
 "/**
	 * Gets called recursively on the child-objects of the chain.
	 * 
	 * @param array $nestingLevels see {@buildNestedUL}
	 * @param int $level Current nesting level
	 * @param string $template Template for list item
	 * @param string $ulExtraAttributes Extra attributes
	 * @return string
	 */",
 "/**
	* Sorts the current DataObjectSet instance.
	* @param string $fieldname The name of the field on the DataObject that you wish to sort the set by.
	* @param string $direction Direction to sort by, either \"ASC\" or \"DESC\".
	*/",
 "/**
	* Remove duplicates from this set based on the dataobjects field.
	* Assumes all items contained in the set all have that field.
	* Useful after merging to sets via {@link merge()}.
	* 
	* @param string $field the field to check for duplicates
	*/",
 "/**
	 * Returns information about this set in HTML format for debugging.
	 * @return string
	 */",
 "/**
	 * Groups the set by $groupField and returns the parent of each group whose class
	 * is $groupClassName. If $collapse is true, the group will be collapsed up until an ancestor with the
	 * given class is found.
	 * @param string $groupField The field to group by.
	 * @param string $groupClassName Classname.
	 * @param string $sortParents SORT clause to insert into the parents SQL.
	 * @param string $parentField Parent field.
	 * @param boolean $collapse Collapse up until an ancestor with the given class is found.
	 * @param string $requiredParents Required parents
	 * @return DataObjectSet
	 */",
 "/**
	 * Add a field to this set without writing it to the database
	 * @param DataObject $field Field to add
	 */",
 "/**
	 * Returns true if the DataObjectSet contains all of the IDs givem
	 * @param $idList An array of object IDs
	 */",
 "/**
	 * Returns true if the DataObjectSet contains all of and *only* the IDs given.
	 * Note that it won\'t like duplicates very much.
	 * @param $idList An array of object IDs
	 */",
 "/**
 * This class represents a set of {@link ViewableData} subclasses (mostly {@link DataObject} or {@link ArrayData}).
 * It is used by the ORM-layer of Silverstripe to return query-results from {@link SQLQuery}.
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * Sort a 2D array by particular column.
 * @param array $data The array to sort.
 * @param string $column The name of the column you wish to sort by.
 * @param string $direction Direction to sort by, either \"ASC\" or \"DESC\".
 * @param boolean $preserveIndexes Preserve indexes
 */",
 "/**
 * Callback used by column_sort
 */",
 "/**
	 * Prepare an item taken from the internal array for 
	 * output by this iterator.  Ensures that it is an object.
	 * @param DataObject $item Item to prepare
	 * @return DataObject
	 */",
 "/**
	 * Return the current object of the iterator.
	 * @return DataObject
	 */",
 "/**
	 * Return the key of the current object of the iterator.
	 * @return mixed
	 */",
 "/**
	 * Return the next item in this set.
	 * @return DataObject
	 */",
 "/**
	 * Rewind the iterator to the beginning of the set.
	 * @return DataObject The first item in the set.
	 */",
 "/**
	 * Check the iterator is pointing to a valid item in the set.
	 * @return boolean
	 */",
 "/**
	 * Return the next item in this set without progressing the iterator.
	 * @return DataObject
	 */",
 "/**
	 * Return the prvious item in this set, without affecting the iterator.
	 * @return DataObject
	 */",
 "/**
	 * Return the object in this set offset by $offset from the iterator pointer.
	 * @param int $offset The offset.
	 * @return DataObject|boolean DataObject of offset item, or boolean FALSE if not found
	 */",
 "/**
 * An Iterator for a DataObjectSet
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Ensure that the database function for connectivity is available.
	 * If it is, we assume the PHP module for this database has been setup correctly.
	 * 
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return boolean
	 */",
 "/**
	 * Ensure that the database server exists.
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return array Result - e.g. array(\'okay\' => true, \'error\' => \'details of error\')
	 */",
 "/**
	 * Ensure a database connection is possible using credentials provided.
	 * The established connection resource is returned with the results as well.
	 * 
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return array Result - e.g. array(\'okay\' => true, \'connection\' => mysql link, \'error\' => \'details of error\')
	 */",
 "/**
	 * Ensure that the database connection is able to use an existing database,
	 * or be able to create one if it doesn\'t exist.
	 * 
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return array Result - e.g. array(\'okay\' => true, \'existsAlready\' => \'true\')
	 */",
 "/**
 * Interface for database helper classes.
 * @package sapphire
 */",
 "/** 
	 * Sets whether or not files can be uploaded into the CMS from the user\'s local computer 
	 * @param boolean $can
	 */",
 "/**
	 * The data class that this field is editing.
	 * @return string Class name
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Attempt to retreive a File object that has already been attached to this forms data record
	 *
	 * @return File|null
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return Form
	 */",
 "/**
	 * @return Form
	 */",
 "/**
	 * Get the type of file this field is used to attach (e.g. File, Image)
	 *
	 * @return string
	 */",
 "/**
 * A field that allows you to attach a file to a DataObject without submitting the form it is part of, through the use
 * of an iframe.
 *
 * If all you need is a simple file upload, it is reccomended you use {@link FileField}
 *
 * @package forms
 * @subpackage fields-files
 */",
 "/**
	 * @param Member $member
	 * @return boolean
	 */",
 "/**
	 * @uses LeftAndMainDecorator->init()
	 * @uses LeftAndMainDecorator->accessedCMS()
	 * @uses CMSMenu
	 */",
 "/**
	 * If this is set to true, the \"switchView\" context in the
	 * template is shown, with links to the staging and publish site.
	 *
	 * @return boolean
	 */",
 "/**
	 * You should implement a Link() function in your subclass of LeftAndMain,
	 * to point to the URL of that particular controller.
	 * 
	 * @return string
	 */",
 "/**
 	* Returns the menu title for the given LeftAndMain subclass.
 	* Implemented static so that we can get this value without instantiating an object.
 	* Menu title is *not* internationalised.
 	*/",
 "/**
	 * Returns the main menu of the CMS.  This is also used by init() to work out which sections the user
	 * has access to.
	 * 
	 * @return DataObjectSet
	 */",
 "/**
   * Return a list of appropriate templates for this class, with the given suffix
   */",
 "/**
	 * Get a site tree displaying the nodes under the given objects
	 * @param $className The class of the root object
	 * @param $rootID The ID of the root object.  If this is null then a complete tree will be
	 *                shown
	 * @param $childrenMethod The method to call to get the children of the tree.  For example,
	 *                        Children, AllChildrenIncludingDeleted, or AllHistoricalChildren
	 */",
 "/**
	 * Get a subtree underneath the request param \'ID\'.
	 * If ID = 0, then get the whole tree.
	 */",
 "/**
	 * Allows you to returns a new data object to the tree (subclass of sitetree)
	 * and updates the tree via javascript.
	 */",
 "/**
	 * Save and Publish page handler
	 */",
 "/**
	 * Returns a javascript snippet that will update the actions of the main form
	 * 
	 * @return string
	 */",
 "/**
	 * Returns a javascript snippet to generate a tree node for the given page, if visible
	 *
	 * @return string
	 */",
 "/**
	 * Returns a javascript snippet to remove a tree node for the given page, if it exists.
	 *
	 * @return string
	 */",
 "/**
	 * Sets a static variable on this class which means the panel will be reloaded.
	 */",
 "/**
	 * Ajax handler for updating the parent of a tree node
	 */",
 "/**
	 * Ajax handler for updating the order of a number of tree nodes
	 * $_GET[ID]: An array of node ids in the correct order
	 * $_GET[MovedNodeID]: The node that actually got moved
	 */",
 "/**
	 * Delete a number of items
	 */",
 "/**
	 * Returns a placeholder form, used by {@link getEditForm()} if no record is selected.
	 * Our javascript logic always requires a form to be present in the CMS interface.
	 * 
	 * @return Form
	 */",
 "/**
	 * Return the CMS\'s HTML-editor toolbar
	 */",
 "/**
	 * Return the version number of this application.
	 * Uses the subversion path information in <mymodule>/silverstripe_version
	 * (automacially replaced $URL$ placeholder).
	 * 
	 * @return string
	 */",
 "/**
	 * Return the version from the content of a silverstripe_version file
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * Get the application name.
	 * @return String
	 */",
 "/**
	 * Get the application logo text.
	 * @return String
	 */",
 "/**
	 * Return the title of the current section, as shown on the main menu
	 */",
 "/**
	 * Set the CMS application logo.
	 *
	 * @param String $logo Relative path to the logo
	 * @param String $logoStyle Custom CSS styles for the logo
	 * 							e.g. \"border: 1px solid red; padding: 5px;\"
	 */",
 "/**
	 * Set the image shown when the CMS is loading.
	 */",
 "/**
	 * Return the base directory of the tiny_mce codebase
	 */",
 "/**
	 * Use this as an action handler for custom CMS buttons.
	 */",
 "/**
	 * Register the given javascript file as required in the CMS.
	 * Filenames should be relative to the base, eg, SAPPHIRE_DIR . \'/javascript/loader.js\'
	 */",
 "/**
	 * Register the given stylesheet file as required.
	 * 
	 * @param $file String Filenames should be relative to the base, eg, THIRDPARTY_DIR . \'/tree/tree.css\'
	 * @param $media String Comma-separated list of media-types (e.g. \"screen,projector\") 
	 * @see http://www.w3.org/TR/REC-CSS2/media.html
	 */",
 "/**
	 * Register the given \"themeable stylesheet\" as required.
	 * Themeable stylesheets have globally unique names, just like templates and PHP files.
	 * Because of this, they can be replaced by similarly named CSS files in the theme directory.
	 * 
	 * @param $name String The identifier of the file.  For example, css/MyFile.css would have the identifier \"MyFile\"
	 * @param $media String Comma-separated list of media-types (e.g. \"screen,projector\") 
	 */",
 "/**
 * LeftAndMain is the parent class of all the two-pane views in the CMS.
 * If you are wanting to add more areas to the CMS, you can do it by subclassing LeftAndMain.
 * 
 * This is essentially an abstract class which should be subclassed.
 * See {@link CMSMain} for a good example.
 * 
 * @package cms
 * @subpackage core
 */",
 "/**
 * This file is designed to be the new \'server\' of sites using StaticPublisher.
 * to use this, you need to modify your .htaccess to point all requests to
 * static-main.php, rather than main.php. This file also allows for using
 * static publisher with the subsites module.
 *
 * If you are using StaticPublisher+Subsites, set the following in _config.php:
 *   FilesystemPublisher::$domain_based_caching = true;
 * and added main site host mapping in subsites/host-map.php after everytime a new subsite is created or modified 
 * 
 * If you are not using subsites, the host-map.php file will not exist (it is
 * automatically generated by the Subsites module) and the cache will default
 * to no subdirectory.
 */",
 "/**
	 * Preview a file import (don\'t write anything to the database).
	 * Useful to analyze the input and give the users a chance to influence
	 * it through a UI.
	 *
	 * @todo Implement preview()
	 *
	 * @param string $filepath Absolute path to the file we\'re importing
	 * @return array See {@link self::processAll()}
	 */",
 "/**
	 * Process every record in the file
	 * 
	 * @param string $filepath Absolute path to the file we\'re importing (with UTF8 content)
	 * @param boolean $preview If true, we\'ll just output a summary of changes but not actually do anything
	 * @return BulkLoader_Result A collection of objects which are either created, updated or deleted.
	 * \'message\': free-text string that can optionally provide some more information about what changes have
	 */",
 "/**
	 * Process a single record from the file.
	 * 
	 * @param array $record An map of the data, keyed by the header field defined in {@link self::$columnMap}
	 * @param array $columnMap
	 * @param $result BulkLoader_Result (passed as reference)
	 * @param boolean $preview
	 */",
 "/**
	 * Return a FieldSet containing all the options for this form; this
	 * doesn\'t include the actual upload field itself
	 */",
 "/**
	 * Return a human-readable name for this object.
	 * It defaults to the class name can be overridden by setting the static variable $title
	 * 
	 * @return string
	 */",
 "/**
	 * Get a specification of all available columns and relations on the used model.
	 * Useful for generation of spec documents for technical end users.
	 * 
	 * Return Format:
	 * <code>
	 * array(
	 *   \'fields\' => array(\'myFieldName\'=>\'myDescription\'), 
	 *   \'relations\' => array(\'myRelationName\'=>\'myDescription\'), 
	 * )
	 * </code>
	 *
	 * @todo Mix in custom column mappings
	 *
	 * @return array
	 **/",
 "/**
	 * Determines if a specific field is null.
	 * Can be useful for unusual \"empty\" flags in the file,
	 * e.g. a \"(not set)\" value.
	 * The usual {@link DBField::isNull()} checks apply when writing the {@link DataObject},
	 * so this is mainly a customization method.
	 *
	 * @param mixed $val
	 * @param string $field Name of the field as specified in the array-values for {@link self::$columnMap}.
	 * @return boolean
	 */",
 "/**
 * A base for bulk loaders of content into the SilverStripe database.
 * Bulk loaders give SilverStripe authors the ability to do large-scale uploads into their Sapphire databases.
 * 
 * You can configure column-handling, 
 * 
 * @todo Add support for adding/editing has_many relations.
 * @todo Add support for deep chaining of relation properties (e.g. Player.Team.Stats.GoalCount)
 * @todo Character conversion
 * 
 * @see http://rfc.net/rfc4180.html
 * @package cms
 * @subpackage bulkloading
 * @author Ingo Schommer, Silverstripe Ltd. (<firstname>@silverstripe.com)
 */",
 "/**
	 * Returns the count of all objects which were
	 * created or updated.
	 *
	 * @return int
	 */",
 "/**
	 * @return int
	 */",
 "/**
	 * @return int
	 */",
 "/**
	 * @return int
	 */",
 "/**
	 * Returns all created objects. Each object might
	 * contain specific importer feedback in the \"_BulkLoaderMessage\" property.
	 *
	 * @return DataObjectSet
	 */",
 "/**
	 * @return DataObjectSet
	 */",
 "/**
	 * @return DataObjectSet
	 */",
 "/**
	 * Returns the last change.
	 * It is in the same format as {@link $created} but with an additional key, \"ChangeType\", which will be set to
	 * one of 3 strings: \"created\", \"updated\", or \"deleted\"
	 */",
 "/**
	 * @param $obj DataObject
	 * @param $message string
	 */",
 "/**
	 * @param $obj DataObject
	 * @param $message string
	 */",
 "/**
	 * @param $obj DataObject
	 * @param $message string
	 */",
 "/**
	 * @param $arr Array containing ID and ClassName maps
	 * @return DataObjectSet
	 */",
 "/**
 * Encapsulates the result of a {@link BulkLoader} import
 * (usually through the {@link BulkLoader->processAll()} method).
 * 
 * @todo Refactor to support lazy-loaded DataObjectSets once they are implemented.
 *
 * @package cms
 * @subpackage bulkloading
 * @author Ingo Schommer, Silverstripe Ltd. (<firstname>@silverstripe.com)
 */",
 "/**
	 * Finish the \"pre\" block in method content.
	 * Will remove whitespace and empty \"pre\" blocks
	 */",
 "/**
	 * Render the given token as HTML
	 */",
 "/**
 * Allows human reading of a test in a format suitable for agile documentation
 * @package sapphire
 * @subpackage testing
 */",
 "/**
	 * Get the authenticator class
	 * @return Authenticator Returns the authenticator class for this login form.
	 */",
 "/**
 * Abstract base class for a login form
 *
 * This class is used as a base class for the different log-in forms like
 * {@link MemberLoginForm} or {@link OpenIDLoginForm}.
 *
 * @author Markus Lanthaler <markus@silverstripe.com>
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * @package sapphire
 * @subpackage tasks
 */",
 "/**
     * Executes statements before the actual array building starts
     *
     * This method should be overwritten in a filter if you want to do
     * something before the parsing process starts. This can be useful to
     * allow certain short alternative tags which then can be converted into
     * proper tags with preg_replace() calls.
     * The main class walks through all the filters and and calls this
     * method if it exists. The filters should modify their private $_text
     * variable.
     *
     * @return   none
     * @access   private
     * @see      $_text
     * @author   Stijn de Reede <sjr@gmx.co.uk>
     * @author   Seth Price <seth@pricepages.org>
     */",
 "/**
     * Intelligently expand a URL into a link
     *
     * @return  string
     * @access  private
     * @author  Seth Price <seth@pricepages.org>
     * @author  Lorenzo Alberton <l.alberton@quipo.it>
     */",
 "/**
     * Finish preparsing URL to clean it up
     *
     * @return  string
     * @access  private
     * @author  Seth Price <seth@pricepages.org>
     */",
 "/**
 * @package  sapphire
 * @subpackage misc
 */",
 "/**
 * A PermissionRole represents a collection of permission codes that can be applied to groups.
 * 
 * Because permission codes are very granular, this lets website administrators create more
 * business-oriented units of access control - Roles - and assign those to groups.
 * 
 * If the <b>OnlyAdminCanApply</b> property is set to TRUE, the role can only be assigned
 * to new groups by a user with ADMIN privileges. This is a simple way to prevent users
 * with access to {@link SecurityAdmin} (but no ADMIN privileges) to get themselves ADMIN access
 * (which might be implied by certain roles).
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Create a new Enum field.
	 * 
	 * Example usage in {@link DataObject::$db} with comma-separated string notation (\'Val1\' is default)
	 * <code>
	 *  \"MyField\" => \"Enum(\'Val1, Val2, Val3\', \'Val1\')\"
	 * </code>
	 * 
	 * Example usage in in {@link DataObject::$db} with array notation (\'Val1\' is default)
	 * <code>
	 * \"MyField\" => \"Enum(array(\'Val1\', \'Val2\', \'Val3\'), \'Val1\')\"
	 * </code>
	 * 
	 * @param enum: A string containing a comma separated list of options or an array of Vals.
	 * @param default The default option, which is either NULL or one of the items in the enumeration.
	 */",
 "/**
	 * Return a dropdown field suitable for editing this field 
	 */",
 "/**
	 * Return the values of this enum, suitable for insertion into a dropdown field.
	 */",
 "/**
 * Class Enum represents an enumeration of a set of strings.
 * See {@link DropdownField} for a {@link FormField} to select enum values.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * A Text field that cannot contain certain characters
 * @deprecated 2.5
 * @package forms
 * @subpackage fields-formatted
 */",
 "/**
	 * Execute the given SQL query.
	 * This abstract function must be defined by subclasses as part of the actual implementation.
	 * It should return a subclass of SS_Query as the result.
	 * @param string $sql The SQL query to execute
	 * @param int $errorLevel The level of error reporting to enable for the query
	 * @return SS_Query
	 */",
 "/**
	 * Get the autogenerated ID from the previous INSERT query.
	 * @return int
	 */",
 "/**
	 * Check if the connection to the database is active.
	 * @return boolean
	 */",
 "/**
	 * Create the database and connect to it. This can be called if the
	 * initial database connection is not successful because the database
	 * does not exist.
	 * 
	 * It takes no parameters, and should create the database from the information
	 * specified in the constructor.
	 * 
	 * @return boolean Returns true if successful
	 */",
 "/**
	 * Build the connection string from input
	 * @param array $parameters The connection details
	 * @return string $connect The connection string
	 **/",
 "/**
	 * Create a new table.
	 * @param $tableName The name of the table
	 * @param $fields A map of field names to field types
	 * @param $indexes A map of indexes
	 * @param $options An map of additional options.  The available keys are as follows:
	 *   - \'MSSQLDatabase\'/\'MySQLDatabase\'/\'PostgreSQLDatabase\' - database-specific options such as \"engine\" for MySQL.
	 *   - \'temporary\' - If true, then a temporary table will be created
	 * @return The table name generated.  This may be different from the table name, for example with temporary tables.
	 */",
 "/**
	 * Alter a table\'s schema.
	 */",
 "/**
	 * Rename a table.
	 * @param string $oldTableName The old table name.
	 * @param string $newTableName The new table name.
	 */",
 "/**
	 * Create a new field on a table.
	 * @param string $table Name of the table.
	 * @param string $field Name of the field to add.
	 * @param string $spec The field specification, eg \'INTEGER NOT NULL\'
	 */",
 "/**
	 * Change the database column name of the given field.
	 * 
	 * @param string $tableName The name of the tbale the field is in.
	 * @param string $oldName The name of the field to change.
	 * @param string $newName The new name of the field
	 */",
 "/**
	 * Get a list of all the fields for the given table.
	 * Returns a map of field name => field spec.
	 * @param string $table The table name.
	 * @return array
	 */",
 "/**
	 * Returns a list of all tables in the database.
	 * Keys are table names in lower case, values are table names in case that
	 * database expects.
	 * @return array
	 */",
 "/**
	 * Returns true if the given table exists in the database
	 */",
 "/**
	 * Returns the enum values available on the given field
	 */",
 "/**
	 * Start a schema-updating transaction.
	 * All calls to requireTable/Field/Index will keep track of the changes requested, but not actually do anything.
	 * Once	
	 */",
 "/**
	 * Completes a schema-updated transaction, executing all the schema chagnes.
	 */",
 "/**
	 * Cancels the schema updates requested after a beginSchemaUpdate() call.
	 */",
 "/**
	 * Returns true if schema modifications were requested after a beginSchemaUpdate() call.
	 */",
 "/**
	 * @param string $table
	 * @param string $options
	 */",
 "/**
	 * @param string $table
	 * @param array $options
	 */",
 "/**
	 * Handler for the other transXXX methods - mark the given table as being altered
	 * if it doesn\'t already exist
	 */",
 "/**
	 * Generate the following table in the database, modifying whatever already exists
	 * as necessary.
	 * @todo Change detection for CREATE TABLE $options other than \"Engine\"
	 * 
	 * @param string $table The name of the table
	 * @param string $fieldSchema A list of the fields to create, in the same form as DataObject::$db
	 * @param string $indexSchema A list of indexes to create. See {@link requireIndex()}
	 * @param array $options
	 */",
 "/**
	 * If the given table exists, move it out of the way by renaming it to _obsolete_(tablename).
	 * @param string $table The table name.
	 */",
 "/**
	 * Generate the given index in the database, modifying whatever already exists as necessary.
	 * 
	 * The keys of the array are the names of the index.
	 * The values of the array can be one of:
	 *  - true: Create a single column index on the field named the same as the index.
	 *  - array(\'type\' => \'index|unique|fulltext\', \'value\' => \'FieldA, FieldB\'): This gives you full
	 *    control over the index.
	 * 
	 * @param string $table The table name.
	 * @param string $index The index name.
	 * @param string|boolean $spec The specification of the index. See requireTable() for more information.
	 */",
 "/**
	 * Generate the given field on the table, modifying whatever already exists as necessary.
	 * @param string $table The table name.
	 * @param string $field The field name.
	 * @param array|string $spec The field specification. If passed in array syntax, the specific database
	 * 	driver takes care of the ALTER TABLE syntax. If passed as a string, its assumed to
	 * 	be prepared as a direct SQL framgment ready for insertion into ALTER TABLE. In this case you\'ll
	 * 	need to take care of database abstraction in your DBField subclass.  
	 */",
 "/**
	 * If the given field exists, move it out of the way by renaming it to _obsolete_(fieldname).
	 * 
	 * @param string $table
	 * @param string $fieldName
	 */",
 "/**
	 * Execute a complex manipulation on the database.
	 * A manipulation is an array of insert / or update sequences.  The keys of the array are table names,
	 * and the values are map containing \'command\' and \'fields\'.  Command should be \'insert\' or \'update\',
	 * and fields should be a map of field names to field values, including quotes.  The field value can
	 * also be a SQL function or similar.
	 * @param array $manipulation
	 */",
 "/** Replaces \"\\'\\'\" with \"null\", recursively walks through the given array. 
	 * @param string $array Array where the replacement should happen
	 */",
 "/**
	 * Error handler for database errors.
	 * All database errors will call this function to report the error.  It isn\'t a static function;
	 * it will be called on the object itself and as such can be overridden in a subclass.
	 * @todo hook this into a more well-structured error handling system.
	 * @param string $msg The error message.
	 * @param int $errorLevel The level of the error to throw.
	 */",
 "/**
	 * Enable supression of database messages.
	 */",
 "/**
	 * Show a message about database alteration
	 */",
 "/**
	 * Convert a SQLQuery object into a SQL statement
	 */",
 "/**
	 * Function to return an SQL datetime expression that can be used with the adapter in use
	 * used for querying a datetime in a certain format
	 * @param string $date to be formated, can be either \'now\', literal datetime like \'1973-10-14 10:30:00\' or field name, e.g. \'\"SiteTree\".\"Created\"\'
	 * @param string $format to be used, supported specifiers:
	 * %Y = Year (four digits)
	 * %m = Month (01..12)
	 * %d = Day (01..31)
	 * %H = Hour (00..23)
	 * %i = Minutes (00..59)
	 * %s = Seconds (00..59)
	 * %U = unix timestamp, can only be used on it\'s own
	 * @return string SQL datetime expression to query for a formatted datetime
	 */",
 "/**
	 * Function to return an SQL datetime expression that can be used with the adapter in use
	 * used for querying a datetime addition
	 * @param string $date, can be either \'now\', literal datetime like \'1973-10-14 10:30:00\' or field name, e.g. \'\"SiteTree\".\"Created\"\'
	 * @param string $interval to be added, use the format [sign][integer] [qualifier], e.g. -1 Day, +15 minutes, +1 YEAR
	 * supported qualifiers:
	 * - years
	 * - months
	 * - days
	 * - hours
	 * - minutes
	 * - seconds
	 * This includes the singular forms as well
	 * @return string SQL datetime expression to query for a datetime (YYYY-MM-DD hh:mm:ss) which is the result of the addition
	 */",
 "/**
	 * Function to return an SQL datetime expression that can be used with the adapter in use
	 * used for querying a datetime substraction
	 * @param string $date1, can be either \'now\', literal datetime like \'1973-10-14 10:30:00\' or field name, e.g. \'\"SiteTree\".\"Created\"\'
	 * @param string $date2 to be substracted of $date1, can be either \'now\', literal datetime like \'1973-10-14 10:30:00\' or field name, e.g. \'\"SiteTree\".\"Created\"\'
	 * @return string SQL datetime expression to query for the interval between $date1 and $date2 in seconds which is the result of the substraction
	 */",
 "/**
 * Abstract database connectivity class.
 * Sub-classes of this implement the actual database connection libraries
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Return an array containing all the values from a specific column. If no column is set, then the first will be
	 * returned
	 *
	 * @param string $column
	 * @return array
	 */",
 "/**
	 * Return an array containing all values in the leftmost column, where the keys are the
	 * same as the values.
	 * @return array
	 */",
 "/**
	 * Return a map from the first column to the second column.
	 * @return array
	 */",
 "/**
	 * Returns the next record in the iterator.
	 * @return array
	 */",
 "/**
	 * Returns the first column of the first record.
	 * @return string
	 */",
 "/**
	 * Return an HTML table containing the full result-set
	 */",
 "/**
	 * Iterator function implementation. Rewind the iterator to the first item and return it.
	 * Makes use of {@link seek()} and {@link numRecords()}, takes care of the plumbing.
	 * @return array
	 */",
 "/**
	 * Iterator function implementation. Return the current item of the iterator.
	 * @return array
	 */",
 "/**
	 * Iterator function implementation. Return the first item of this iterator.
	 * @return array
	 */",
 "/**
	 * Iterator function implementation. Return the row number of the current item.
	 * @return int
	 */",
 "/**
	 * Iterator function implementation. Return the next record in the iterator.
	 * Makes use of {@link nextRecord()}, takes care of the plumbing.
	 * @return array
	 */",
 "/**
	 * Iterator function implementation. Check if the iterator is pointing to a valid item.
	 * @return boolean
	 */",
 "/**
	 * Return the next record in the query result.
	 * @return array
	 */",
 "/**
	 * Return the total number of items in the query result.
	 * @return int
	 */",
 "/**
	 * Go to a specific row number in the query result and return the record.
	 * @param int $rowNum Tow number to go to.
	 * @return array
	 */",
 "/**
 * Abstract query-result class.
 * Once again, this should be subclassed by an actual database implementation.  It will only
 * ever be constructed by a subclass of SS_Database.  The result of a database query - an iteratable object that\'s returned by DB::SS_Query
 *
 * Primarily, the SS_Query class takes care of the iterator plumbing, letting the subclasses focusing
 * on providing the specific data-access methods that are required: {@link nextRecord()}, {@link numRecords()}
 * and {@link seek()}
 * @package sapphire
 * @subpackage model
 */",
 "/**
     * Constructor
     *
     * @param array $options associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @return string|false cached datas
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param  string $id Cache id
     * @return mixed|false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param  string $data             Datas to cache
     * @param  string $id               Cache id
     * @param  array  $tags             Array of strings, the cache record will be tagged by each string entry
     * @param  int    $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @return boolean True if no problem
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id Cache id
     * @return boolean True if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * \'all\' (default)  => remove all cache entries ($tags is not used)
     * \'old\'            => unsupported
     * \'matchingTag\'    => unsupported
     * \'notMatchingTag\' => unsupported
     * \'matchingAnyTag\' => unsupported
     *
     * @param  string $mode Clean mode
     * @param  array  $tags Array of tags
     * @throws Zend_Cache_Exception
     * @return boolean True if no problem
     */",
 "/**
     * Return true if the automatic cleaning is available for the backend
     *
     * @return boolean
     */",
 "/**
     * Set the frontend directives
     *
     * @param  array $directives Assoc of directives
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Return an array of stored cache ids
     *
     * @return array array of stored cache ids (string)
     */",
 "/**
     * Return an array of stored tags
     *
     * @return array array of stored tags (string)
     */",
 "/**
     * Return an array of stored cache ids which match given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which don\'t match given tags
     *
     * In case of multiple tags, a logical OR is made between tags
     *
     * @param array $tags array of tags
     * @return array array of not matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which match any given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of any matching cache ids (string)
     */",
 "/**
     * Return the filling percentage of the backend storage
     *
     * @throws Zend_Cache_Exception
     * @return int integer between 0 and 100
     */",
 "/**
     * Return an array of metadatas for the given cache id
     *
     * The array must include these keys :
     * - expire : the expire timestamp
     * - tags : a string array of tags
     * - mtime : timestamp of last modification time
     *
     * @param string $id cache id
     * @return array array of metadatas (false if the cache id is not found)
     */",
 "/**
     * Give (if possible) an extra lifetime to the given cache id
     *
     * @param string $id cache id
     * @param int $extraLifetime
     * @return boolean true if ok
     */",
 "/**
     * Return an associative array of capabilities (booleans) of the backend
     *
     * The array must include these keys :
     * - automatic_cleaning (is automating cleaning necessary)
     * - tags (are tags supported)
     * - expired_read (is it possible to read expired cache records
     *                 (for doNotTestCacheValidity option for example))
     * - priority does the backend deal with priority when saving
     * - infinite_lifetime (is infinite lifetime can work with this backend)
     * - get_list (is it possible to get the list of cache ids and the complete list of tags)
     *
     * @return array associative of with capabilities
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
     * Filter out any log messages not matching $regexp.
     *
     * @param  string  $regexp     Regular expression to test the log message
     * @throws Zend_Log_Exception
     */",
 "/**
     * Returns TRUE to accept the message, FALSE to block it.
     *
     * @param  array    $event    event data
     * @return boolean            accepted?
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Filter
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Message.php 14132 2009-02-21 20:23:00Z shahar $
 */",
 "/**
     * This method formats the event for the firebug writer.
     * 
     * The default is to just send the message parameter, but through 
     * extension of this class and calling the
     * {@see Zend_Log_Writer_Firebug::setFormatter()} method you can
     * pass as much of the event data as you are interested in.
     *
     * @param  array    $event    event data
     * @return mixed              event message
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Formatter
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * Include _ss_environment.php files
 */",
 "/**
 * Sapphire class autoloader.  Requires the ManifestBuilder to work.
 * $_CLASS_MANIFEST must have been loaded up by ManifestBuilder for this to successfully load
 * classes.  Classes will be loaded from any PHP file within the application.
 * If your class contains an underscore, for example, Page_Controller, then the filename is
 * expected to be the stuff before the underscore.  In this case, Page.php.
 * 
 * Class names are converted to lowercase for lookup to adhere to PHP\'s case-insensitive
 * way of dealing with them.
 */",
 "/**


*


*/",
 "/**

*


*/",
 "/**
*Createsaclassinstancebythe\"singleton\" design pattern.
 * It will always return the same instance for this class,
 * which can be used for performance reasons and as a simple
 * way to access instance methods which don\'t rely on instance
 * data (e.g. the custom SilverStripe static handling).
 *
 * @uses Object::strong_create()
 *
 * @param string $className
 * @return Object
 */",
 "/**
 * @see i18n::_t()
 */",
 "/**
 * Increase the memory limit to the given level if it\'s currently too low.
 * @param A memory limit string, such as \"64M\".  If omitted, unlimited memory will be set.
 */",
 "/**
 * Turn a memory string, such as 512M into an actual number of bytes.
 * @param A memory limit string, such as \"64M\"
 */",
 "/**
 * Increase the time limit of this script.  By default, the time will be unlimited.
 * @param $timeLimit The time limit in seconds.  If omitted, no time limit will be set.
 */",
 "/**
	 * Internal volatile API.
	 * 
	 * @see DateField->FieldDriver()
	 */",
 "/**
	 * Sets the internal value to ISO date format.
	 * 
	 * @param String|Array $val
	 */",
 "/**
	 * @return String ISO 8601 date, suitable for insertion into database
	 */",
 "/**
	 * @return Boolean
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @param String $locale
	 */",
 "/**
	 * @param string $name
	 * @param mixed $val
	 */",
 "/**
	 * @param String $name
	 * @return mixed
	 */",
 "/**
	 * Creates a new readonly field specified below
	 */",
 "/**
 * Form field to display editable time values in an <input type=\"text\">
 * field. Can optionally display a dropdown with predefined time ranges
 * through `setConfig(\'showdropdown\', true)`.
 * 
 * # Configuration
 * 
 * - \'timeformat\' (string): Time format compatible with Zend_Date.
 *    Usually set to default format for {@link locale}
 *    through {@link Zend_Locale_Format::getTimeFormat()}.
 * - \'use_strtotime\' (boolean): Accept values in PHP\'s built-in strtotime() notation, in addition
 *    to the format specified in `timeformat`. Example inputs: \'now\', \'11pm\', \'23:59:59\'.
 * - \'showdropdown\': Show a dropdown with suggested date values.
 *    CAUTION: The dropdown does not support localization.
 * 
 * # Localization
 * 
 * See {@link DateField}
 * 
 * @todo Timezone support
 * @todo \'showdropdown\' localization
 *
 * @package forms
 * @subpackage fields-datetime
 */",
 "/**
 * The readonly class for our {@link TimeField}.
 * 
 * @package forms
 * @subpackage fields-datetime
 */",
 "/**
	 * Constructor method for MemberTableField.
	 * 
	 * @param Controller $controller Controller class which created this field
	 * @param string $name Name of the field (e.g. \"Members\")
	 * @param mixed $group Can be the ID of a Group instance, or a Group instance itself
	 * @param DataObjectSet $members Optional set of Members to set as the source items for this field
	 * @param boolean $hidePassword Hide the password field or not in the summary?
	 */",
 "/**
	 * Add existing member to group rather than creating a new member
	 */",
 "/**
	 * Custom delete implementation:
	 * Remove member from group rather than from the database
	 */",
 "/**
	 * #################################
	 *           Utility Functions
	 * #################################
	 */",
 "/**
	 * Customise an existing DataObjectSet of Member
	 * objects with a GroupID.
	 * 
	 * @param DataObjectSet $members Set of Member objects to customise
	 * @param Group $group Group object to customise with
	 * @return DataObjectSet Customised set of Member objects
	 */",
 "/**
	 * @return Group
	 */",
 "/**
	 * Add existing member to group by name (with JS-autocompletion)
	 */",
 "/**
	 * Same behaviour as parent class, but adds the
	 * member to the passed GroupID.
	 *
	 * @return string
	 */",
 "/**
	 * Cached version for getting the appropraite members for this particular group.
	 *
	 * This includes getting inherited groups, such as groups under groups.
	 */",
 "/**
	 * Handles item requests
	 * MemberTableField needs its own item request class so that it can overload the delete method
	 */",
 "/**
 * Enhances {ComplexTableField} with the ability to list groups and given members.
 * It is based around groups, so it deletes Members from a Group rather than from the entire system.
 *
 * In contrast to the original implementation, the URL-parameters \"ParentClass\" and \"ParentID\" are used
 * to specify \"Group\" (hardcoded) and the GroupID-relation.
 *
 *	@todo write a better description about what this field does.
 *
 * Returns either:
 * - provided members
 * - members of a provided group
 * - all members
 * - members based on a search-query
 * 
 * @package cms
 * @subpackage security
 */",
 "/**
 * Popup window for {@link MemberTableField}.
 * @package cms
 * @subpackage security
 */",
 "/**
* @package cms
* @subpackage security
*/",
 "/**
	 * Deleting an item from a member table field should just remove that member from the group
	 */",
 "/**
* @package cms
* @subpackage security
*/",
 "/**
	 * Open a CSV file for parsing.
	 * You can use the object returned in a foreach loop to extract the data
	 * @param $filename The name of the file.  If relative, it will be relative to the site\'s base dir
	 * @param $delimiter The character for seperating columns
	 * @param $enclosure The character for quoting or enclosing columns
	 */",
 "/**
	 * Re-map columns in the CSV file.
	 * This can be useful for identifying synonyms in the file
	 * For example:
	 * <code>
	 * $csv->mapColumns(array(
	 *   \'firstname\' => \'FirstName\',
	 *   \'last name\' => \'Surname\',
	 * ));
	 * </code>
	 */",
 "/**
	 * If your CSV file doesn\'t have a header row, then you can call this function to provide one.
	 * If you call this function, then the first row of the CSV will be included in the data returned.
	 */",
 "/**
	 * Open the CSV file for reading
	 */",
 "/**
	 * Close the CSV file and re-set all of the internal variables
	 */",
 "/**
	 * Get a header row from the CSV file
	 */",
 "/**
	 * Map the contents of a header array using $this->mappedColumns
	 */",
 "/**

	*/",
 "/**

	*/",
 "/**

	*/",
 "/**

	*/",
 "/**

	*/",
 "/**

	*/",
 "/**

	*/",
 "/**


*







*));

*	//$rowisamapofcolumnname=>columnvalue



*}

*


*/",
 "/**
 * @package  sapphire
 * @subpackage misc
 */",
 "/**
 * Uses a substring match against content in column rows.
 * 
 * @package sapphire
 * @subpackage search
 */",
 "/**
     *    Stashes the data for rendering later.
     *    @param string $key       Form element name.
     *    @param string $value     Data to send.
     */",
 "/**
     *    The pair as a single string.
     *    @return string        Encoded pair.
     *    @access public
     */",
 "/**
     *    The MIME part as a string.
     *    @return string        MIME part encoding.
     *    @access public
     */",
 "/**
     *    Is this the value we are looking for?
     *    @param string $key    Identifier.
     *    @return boolean       True if matched.
     *    @access public
     */",
 "/**
     *    Is this the value we are looking for?
     *    @return string       Identifier.
     *    @access public
     */",
 "/**
     *    Is this the value we are looking for?
     *    @return string       Content.
     *    @access public
     */",
 "/**
 *    Single post parameter.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Stashes the data for rendering later.
     *    @param string $key          Key to add value to.
     *    @param string $content      Raw data.
     *    @param hash $filename       Original filename.
     */",
 "/**
     *    The pair as a single string.
     *    @return string        Encoded pair.
     *    @access public
     */",
 "/**
     *    The MIME part as a string.
     *    @return string        MIME part encoding.
     *    @access public
     */",
 "/**
     *    Attempts to figure out the MIME type from the
     *    file extension and the content.
     *    @return string        MIME type.
     *    @access private
     */",
 "/**
     *    Tests each character is in the range 0-127.
     *    @param string $ascii    String to test.
     *    @access private
     */",
 "/**
     *    Is this the value we are looking for?
     *    @param string $key    Identifier.
     *    @return boolean       True if matched.
     *    @access public
     */",
 "/**
     *    Is this the value we are looking for?
     *    @return string       Identifier.
     *    @access public
     */",
 "/**
     *    Is this the value we are looking for?
     *    @return string       Content.
     *    @access public
     */",
 "/**
 *    Single post parameter.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts empty.
     *    @param array $query       Hash of parameters.
     *                              Multiple values are
     *                              as lists on a single key.
     *    @access public
     */",
 "/**
     *    Empties the request of parameters.
     *    @access public
     */",
 "/**
     *    Adds a parameter to the query.
     *    @param string $key            Key to add value to.
     *    @param string/array $value    New data.
     *    @access public
     */",
 "/**
     *    Adds a new value into the request.
     *    @param string $key            Key to add value to.
     *    @param string/array $value    New data.
     *    @access private
     */",
 "/**
     *    Adds a MIME part to the query. Does nothing for a
     *    form encoded packet.
     *    @param string $key          Key to add value to.
     *    @param string $content      Raw data.
     *    @param hash $filename       Original filename.
     *    @access public
     */",
 "/**
     *    Adds a set of parameters to this query.
     *    @param array/SimpleQueryString $query  Multiple values are
     *                                           as lists on a single key.
     *    @access public
     */",
 "/**
     *    Accessor for single value.
     *    @return string/array    False if missing, string
     *                            if present and array if
     *                            multiple entries.
     *    @access public
     */",
 "/**
     *    Accessor for listing of pairs.
     *    @return array        All pair objects.
     *    @access public
     */",
 "/**
     *    Renders the query string as a URL encoded
     *    request part.
     *    @return string        Part of URL.
     *    @access protected
     */",
 "/**
 *    Bundle of GET/POST parameters. Can include
 *    repeated parameters.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts empty.
     *    @param array $query       Hash of parameters.
     *                              Multiple values are
     *                              as lists on a single key.
     *    @access public
     */",
 "/**
     *    HTTP request method.
     *    @return string        Always GET.
     *    @access public
     */",
 "/**
     *    Writes no extra headers.
     *    @param SimpleSocket $socket        Socket to write to.
     *    @access public
     */",
 "/**
     *    No data is sent to the socket as the data is encoded into
     *    the URL.
     *    @param SimpleSocket $socket        Socket to write to.
     *    @access public
     */",
 "/**
     *    Renders the query string as a URL encoded
     *    request part for attaching to a URL.
     *    @return string        Part of URL.
     *    @access public
     */",
 "/**
 *    Bundle of GET parameters. Can include
 *    repeated parameters.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts empty.
     *    @param array $query       Hash of parameters.
     *                              Multiple values are
     *                              as lists on a single key.
     *    @access public
     */",
 "/**
     *    HTTP request method.
     *    @return string        Always HEAD.
     *    @access public
     */",
 "/**
 *    Bundle of URL parameters for a HEAD request.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts empty.
     *    @param array $query       Hash of parameters.
     *                              Multiple values are
     *                              as lists on a single key.
     *    @access public
     */",
 "/**
     *    HTTP request method.
     *    @return string        Always POST.
     *    @access public
     */",
 "/**
     *    Dispatches the form headers down the socket.
     *    @param SimpleSocket $socket        Socket to write to.
     *    @access public
     */",
 "/**
     *    Dispatches the form data down the socket.
     *    @param SimpleSocket $socket        Socket to write to.
     *    @access public
     */",
 "/**
     *    Renders the query string as a URL encoded
     *    request part for attaching to a URL.
     *    @return string        Part of URL.
     *    @access public
     */",
 "/**
 *    Bundle of POST parameters. Can include
 *    repeated parameters.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Starts empty.
     *    @param array $query       Hash of parameters.
     *                              Multiple values are
     *                              as lists on a single key.
     *    @access public
     */",
 "/**
     *    Dispatches the form headers down the socket.
     *    @param SimpleSocket $socket        Socket to write to.
     *    @access public
     */",
 "/**
     *    Dispatches the form data down the socket.
     *    @param SimpleSocket $socket        Socket to write to.
     *    @access public
     */",
 "/**
     *    Renders the query string as a URL encoded
     *    request part.
     *    @return string        Part of URL.
     *    @access public
     */",
 "/**
 *    Bundle of POST parameters in the multipart
 *    format. Can include file uploads.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
	 * Return fake-ID \"root\" if no ID is found (needed to upload files into the root-folder)
	 */",
 "/**
	 * Set up the controller, in particular, re-sync the File database with the assets folder./
	 */",
 "/**
	 * Show the content of the upload iframe.  The form is specified by a template.
	 */",
 "/**
	 * Needs to be enabled through {@link AssetAdmin::$metadata_upload_enabled}
	 * 
	 * @return String
	 */",
 "/**
	 * Return the form object shown in the uploadiframe.
	 */",
 "/**
	 * This method processes the results of the UploadForm.
	 * It will save the uploaded files to /assets/ and create new File objects as required.
	 */",
 "/**
	 * Custom currentPage() method to handle opening the \'root\' folder
	 */",
 "/**
	 * Return the form that displays the details of a folder, including a file list and fields for editing the folder name.
	 */",
 "/**
	 * Perform the \"move marked\" action.
	 * Called and returns in same way as \'save\' function
	 */",
 "/**
	 * Perform the \"delete marked\" action.
	 * Called and returns in same way as \'save\' function
	 */",
 "/**
	 * Returns the content to be placed in Form_SubForm when editing a file.
	 * Called using ajax.
	 */",
 "/**
	 * Action handler for the save button on the file subform.
	 * Saves the file
	 */",
 "/**
	 * Return the entire site tree as a nested UL.
	 * @return string HTML for site tree
	 */",
 "/**
	 * Returns a subtree of items underneat the given folder.
	 */",
 "/**
	 * Add a new folder and return its details suitable for ajax.
	 */",
 "/**
	 * @return Form
	 */",
 "/**
	 * Delete a folder
	 */",
 "/**
	 * Removes all unused thumbnails from the file store
	 * and returns the status of the process to the user.
	 */",
 "/**

	*




	*

	*/",
 "/**


*


*/",
 "/** 
	 * Initialise the wrapper class.
	 */",
 "/**
	 * Overwrites beforeRunTests. Initiates coverage-report generation if 
	 * $coverage has been set to true (@see setCoverageStatus).
	 */",
 "/**
	 * Overwrites aferRunTests. Creates coverage report and clover report 
	 * if required.
	 */",
 "/**
 * PHPUnit Wrapper class. Implements the correct behaviour for PHPUnit V3.4.
 */",
 "/**
 * @category   Zend
 * @package    Zend_Date
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Add new adapter to the registry
	 * @param array $config Associative array of configuration details
	 */",
 "/**
 * This class keeps track of the available database adapters
 * and provides a meaning of registering community built
 * adapters in to the installer process.
 *
 * @package installer
 * @author Tom Rix
 */",
 "/**
 * Definition class for all Windows locales
 *
 * @category  Zend
 * @package   Zend_Locale
 * @copyright Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
     * Constructor
     *
     * @param  array $options associative array of options
     * @throws Zend_Cache_Exception
     */",
 "/**
     * Store data
     *
     * @var mixed  $data        Object to store
     * @var string $id          Cache id
     * @var int    $timeToLive  Time to live in seconds
     * @return boolean true if no problem
     */",
 "/**
     * Fetch data
     *
     * @var mixed  $data        Object to store
     * @var string $id          Cache id
     * @var int    $timeToLive  Time to live in seconds
     */",
 "/**
     * Unset data
     *
     * @var string $id          Cache id
     * @return boolean true if no problem
     */",
 "/**
     * Clear cache
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * Text field that automatically checks that the value entered is unique for the given
 * set of fields in a given set of tables
 * @deprecated 2.5
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * Pass each field to be validated as a seperate argument
	 * @param $required array The list of required fields
	 */",
 "/**
	 * Creates the client side validation from form fields
	 * which is generated at the header of each page 
	 */",
 "/**
	 * Creates the server side validation from form fields
	 * which is executed on form submission
	 */",
 "/**
	 * allows you too add more required fields to this object after construction.
	 */",
 "/**
 * CustomRequiredFields allow you to create your own validation on forms, while still having the ability to have required fields (as used in [RequiredFields](http://api.silverstripe.org/current/sapphire/form/RequiredFields.html)).
 * 
 * The constructor of CustomRequiredFields takes an array. Each array element is one of two things - either the name of a field that is required, or an array containing two items, \'js\' and \'php\'. These items are functions called to validate in javascript or php respectively.
 * 
 * Some useful javascript: 
 * 1.  _CURRENT_FORM is the current form
 * 2.  _CURRENT_FORM.elements is an array of the fields
 * 3.  validationError(element, message, type) will create a validation error
 * 4.  clearErrorMessage(element) will clear the validation error
 * 5.  require(\'FieldName\') create a required field ($this->requireField(\'FieldName\') is the php equivalent)
 * 
 * An example for creating required fields only if payment type is CreditCard:
 * 
 * <code>
 * new CustomRequiredFields(
 * 	array(
 * 	        \"PaymentMethod\",
 * 	        array(
 * 	                \"js\" => \"
 * 	                        for( var i = 0; i <= this.elements.PaymentMethod.length -1; i++){
 * 	                                if(this.elements.PaymentMethod[i].value == \'CC\' && this.elements.PaymentMethod[i].checked == true){
 * 	                                        require(\'CardHolderName\');
 * 	                                        require(\'CreditCardNumber\');
 * 	                                        require(\'DateExpiry\');
 * 	                                }
 * 	                        }
 * 	                        
 * 	                \",
 * 	                \"php\" => \'if($data[PaymentMethod] == \"CC\") {
 * 	                        $this->requireField($field,\"$field is required\",\"required\");
 * 	                        $this->requireField(\"CardHolderName\", $data);
 * 	                        $this->requireField(\"CreditCardNumber\", $data);
 * 	                        $this->requireField(\"DateExpiry\", $data);
 * 	                }\',
 * 	        )
 * 	)
 * );
 * </code>
 * 
 * And example for confirming mobile number and email address:
 * 
 * <code>
 * $js = <<<JS
 * if(_CURRENT_FORM.elements[\"MobileNumberConfirm\"].value == _CURRENT_FORM.elements[\"MobileNumber\"].value) {
 *    clearErrorMessage(_CURRENT_FORM.elements[\"MobileNumberConfirm\"].parentNode);
 * } else {
 *    validationError(_CURRENT_FORM.elements[\"MobileNumberConfirm\"], \"Mobile numbers do not match\", \"validation\");
 * }
 * JS;
 * 
 * $js2 = <<<JS2
 * if(_CURRENT_FORM.elements[\"EmailConfirm\"].value == _CURRENT_FORM.elements[\"Email\"].value) {
 *    clearErrorMessage(_CURRENT_FORM.elements[\"EmailConfirm\"].parentNode);
 * } else {
 *    validationError(_CURRENT_FORM.elements[\"EmailConfirm\"], \"Email addresses do not match\", \"validation\");
 * }
 * JS2;
 * 
 * //create validator
 * $validator=new CustomRequiredFields(array(\'FirstName\', \'Surname\', \'Email\', \'MobileNumber\', array(\'js\' => $js, \'php\' => \'return true;\'), array(\'js\' => $js2, \'php\'=>\'return true;\')));
 * </code>
 * 
 * @package forms
 * @subpackage validators
 */",
 "/**
	 * Returns an input field, class=\"text\" and type=\"text\" with an optional
	 * maxlength
	 */",
 "/**
	 * Makes a pretty readonly field with some stars in it
	 */",
 "/**
 * Password input field.
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * @param DataObject $obj
	 * @param array $params
	 */",
 "/**
	 * Gets the form fields as defined through the metadata
	 * on {@link $obj} and the custom parameters passed to FormScaffolder.
	 * Depending on those parameters, the fields can be used in ajax-context,
	 * contain {@link TabSet}s etc.
	 * 
	 * @return FieldSet
	 */",
 "/**
	 * Return an array suitable for passing on to {@link DBField->scaffoldFormField()}
	 * without tying this call to a FormScaffolder interface.
	 * 
	 * @return array
	 */",
 "/**
 * 
 * @package sapphire
 * @subpackage forms
 *
 * @uses DBField::scaffoldFormField()
 * @uses DataObject::fieldLabels()
 */",
 "/**
	 * Add this DataObject as added in the log.
	 * @param DataObject $object
	 */",
 "/**
	 * Add this DataObject as deleted in the log.
	 * @param DataObject $object
	 */",
 "/**
	 * Add this DataObject as changed in the log.
	 * @param DataObject $object
	 */",
 "/**
	 * Get all DataObjects that have been added this session that are of
	 * the class or a subclass of the class provided.
	 * @param string $className The class name.
	 * @return array
	 */",
 "/**
	 * Get all DataObjects that have been deleted this session that are of
	 * the class or a subclass of the class provided.
	 * @param string $className The class name.
	 * @return array
	 */",
 "/**
	 * Get all DataObjects that have been changed this session that are of
	 * the class or a subclass of the class provided.
	 * @param string $className The class name.
	 * @return array
	 */",
 "/**
	 * Get all DataObjects in the given set that are of the class or a
	 * subclass of the class provided.
	 * @param string $className The class name.
	 * @param array $set The set to search in.
	 * @return array
	 */",
 "/**
 * A DataObjectLog is a log of changes that have been made to the database in this session.
 * It was designed to help with updates to the CMS tree, and could be used wherever an Ajax call 
 * needs to update a complex on-screen representation of your data.
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Return the title of this report.
	 * 
	 * You have two ways of specifying the description:
	 *  - overriding description(), which lets you support i18n 
	 *  - defining the $description property
	 */",
 "/**
	 * Return the description of this report.
	 * 
	 * You have two ways of specifying the description:
	 *  - overriding description(), which lets you support i18n 
	 *  - defining the $description property
	 */",
 "/**
	 * Return a FieldSet specifying the search criteria for this report.
	 * 
	 * Override this method to define search criteria.
	 */",
 "/**
	 * Return the {@link SQLQuery} that provides your report data.
	 */",
 "/**
	 * Return a DataObjectSet records for this report.
	 */",
 "/**
	 * Return an map of columns for your report.
	 *  - The map keys will be the source columns for your report (in TableListField dot syntax)
	 *  - The values can either be a string (the column title), or a map containing the following
	 *    column parameters:
	 *    - title: The column title
	 *    - formatting: A formatting string passed to {@link TableListField::setFieldFormatting()}
	 */",
 "/**
	 * Return the number of records in this report with no filters applied.
	 */",
 "/**
	 * Return the data class for this report
	 */",
 "/**
	 * Returns a FieldSet with which to create the CMS editing form.
	 * You can use the extend() method of FieldSet to create customised forms for your other
	 * data objects.
	 *
	 * @uses getReportField() to render a table, or similar field for the report. This
	 * method should be defined on the SS_Report subclasses.
	 *
	 * @return FieldSet
	 */",
 "/**
	 * Return a field, such as a {@link ComplexTableField} that is
	 * used to show and manipulate data relating to this report.
	 * 
	 * Generally, you should override {@link columns()} and {@link records()} to make your report,
	 * but if they aren\'t sufficiently flexible, then you can override this method.
	 *
	 * @return FormField subclass
	 */",
 "/**
	 * @param Member $member
	 * @return boolean
	 */",
 "/**
	 * Return the name of this report, which
	 * is used by the templates to render the
	 * name of the report in the report tree,
	 * the left hand pane inside ReportAdmin.
	 *
	 * @return string
	 */",
 "/**
	 * Return the ID of this Report class.
	 * Because it doesn\'t have a number, we
	 * use the class name as the ID.
	 *
	 * @return string
	 */",
 "/**
	 * Register a report.
	 * @param $list The list to add the report to: \"ReportAdmin\" or \"SideReports\"
	 * @param $reportClass The class of the report to add.
	 * @param $priority The priority.  Higher numbers will appear furhter up in the reports list.
	 * The default value is zero.
	 */",
 "/**
	 * Unregister a report, removing it from the list
	 */",
 "/**
	 * Return the SS_Report objects making up the given list.
	 * @return An array of SS_Report objects
	 */",
 "/**
 * Base \"abstract\" class creating reports on your data.
 * 
 * Creating reports
 * ================
 * 
 * Creating a new report is a matter overloading a few key methods
 * 
 *  {@link title()}: Return the title - i18n is your responsibility
 *  {@link description()}: Return the description - i18n is your responsibility
 *  {@link sourceQuery()}: Return a DataObjectSet of the search results
 *  {@link columns()}: Return information about the columns in this report.
 *  {@link parameterFields()}: Return a FieldSet of the fields that can be used to filter this
 *  report.
 * 
 * If you can\'t express your report as a query, you can implement the this method instead:
 * 
 *     // Return an array of fields that can be used to sort the data
 *     public function sourceRecords($params, $sort, $limit) { ... }
 * 
 * The $sort value will be set to the corresponding key of the columns() array.  If you wish to
 * make only a subset of the columns sortable, then you can override `sortColumns()` to return a
 * subset of the array keys.
 * 
 * Note that this implementation is less efficient and should only be used when necessary.
 * 
 * If you wish to modify the report in more extreme ways, you could overload these methods instead.
 * 
 * {@link getReportField()}: Return a FormField in the place where your report\'s TableListField
 * usually appears.
 * {@link getCMSFields()}: Return the FieldSet representing the complete right-hand area of the 
 * report, including the title, description, parameter fields, and results.
 * 
 * Showing reports to the user
 * ===========================
 * 
 * Right now, all subclasses of SS_Report will be shown in the ReportAdmin.  However, we are planning
 * on adding an explicit registration mechanism, so that you can decide which reports go in the
 * report admin, and which go elsewhere (such as the side panel in the CMS).
 * 
 * @package cms
 * @subpackage reports
 */",
 "/**
	 * Provide a method that will return a list of columns that can be used to sort.
	 */",
 "/**
 * This is an object that can be used to dress up a more complex querying mechanism in the clothing
 * of a SQLQuery object.  This means that you can inject it into a TableListField.
 * 
 * Use it like this:
 * 
 *     function sourceQuery($params) {
 *         return new SS_Report_FakeQuery($this, \'sourceRecords\', $params)
 *     }
 *     function sourceRecords($params, $sort, $limit) {
 *         // Do some stuff
 *         // Return a DataObjectSet of actual objects.
 *     }
 * 
 * This object is used by the default implementation of sourceQuery() on SS_Report, to make use of
 * a sourceReords() method if one exists.
 */",
 "/**
	 * Override this method to perform some actions prior to querying.
	 */",
 "/**
	 * Override this method to perform some actions after querying.
	 */",
 "/**
 * SS_ReportWrapper is a base class for creating report wappers.
 * 
 * Wrappers encapsulate an existing report to alter their behaviour - they are implementations of
 * the standard GoF decorator pattern.
 * 
 * This base class ensure that, by default, wrappers behave in the same way as the report that is
 * being wrapped.  You should override any methods that need to behave differently in your subclass
 * of SS_ReportWrapper.
 * 
 * It also makes calls to 2 empty methods that you can override {@link beforeQuery()} and
 * {@link afterQuery()}
 * 
 * @package cms
 * @subpackage reports
 */",
 "/**
	 * @param Array $groups
	 */",
 "/**
	 * @return Array
	 */",
 "/**
 * Imports member records, and checks/updates duplicates based on their
 * \'Email\' property.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Create a new nullable field
	 * @param $valueField
	 * @return NullableField
	 */",
 "/**
	 * Get the label used for the Is Null checkbox.
	 * @return string
	 */",
 "/**
	 * Set the label used for the Is Null checkbox.
	 * @param $isNulLabel string
	 */",
 "/**
	 * Get the id used for the Is Null check box.
	 * @return string
	 */",
 "/**
	 * (non-PHPdoc)
	 * @see sapphire/forms/FormField#Field()
	 */",
 "/**
	 * Value is sometimes an array, and sometimes a single value, so we need to handle both cases
	 */",
 "/**
	 * (non-PHPdoc)
	 * @see forms/FormField#setName($name)
	 */",
 "/**
	 * (non-PHPdoc)
	 * @see sapphire/forms/FormField#debug()
	 */",
 "/**
 * NullableField is a field that wraps other fields when you want to allow the user to specify whether the value of the field is null or not.
 * 
 * The classic case is to wrap a TextField so that the user can distinguish between an empty string and a null string.
 * $a = new NullableField(new TextField(\"Field1\", \"Field 1\", \"abc\"));
 * 
 * It displays the field that is wrapped followed by a checkbox that is used to specify if the value is null or not.
 * It uses the Title of the wrapped field for its title.
 * When a form is submitted the field tests the value of the \"is null\" checkbox and sets its value accordingly.
 * You can retrieve the value of the wrapped field from the NullableField as follows:
 * $field->Value() or $field->dataValue()
 * 
 * You can specify the label to use for the \"is null\" checkbox.  If you want to use I8N for this label then specify it like this:
 * $field->setIsNullLabel(_T(SOME_MODULE_ISNULL_LABEL, \"Is Null\");
 * 
 * @author Pete Bacon Darwin
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
 * Represents a short text field that is intended to contain HTML content.
 *
 * This behaves similarly to Varchar, but the template processor won\'t escape any HTML content within it.
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Create a new field.
	 * @param name The internal field name, passed to forms.
	 * @param title The field label.
	 * @param value The value of the field.
	 * @param form Reference to the container form
	 * @param maxLength The Maximum length of the attribute
	 */",
 "/**
	 * Return a Link to this field
	 */",
 "/**
	 * Returns the HTML ID of the field - used in the template by label tags.
	 * The ID is generated as FormName_FieldName.  All Field functions should ensure
	 * that this ID is included in the field.
	 */",
 "/**
	 * Returns the field name - used by templates.
	 * 
	 * @return string
	 */",
 "/** 
	 * Returns the field message, used by form validation.
	 * Use {@link setError()} to set this property.
	 * 
	 * @return string
	 */",
 "/** 
	 * Returns the field message type, used by form validation.
	 * Arbitrary value which is mostly used for CSS classes
	 * in the rendered HTML, e.g. \"required\".
	 * Use {@link setError()} to set this property.
	 * 
	 * @return string
	 */",
 "/**
	 * Returns the field value - used by templates.
	 */",
 "/**
	 * Method to save this form field into the given data object.
	 * By default, makes use of $this->dataValue()
	 */",
 "/**
	 * Returns the field value suitable for insertion into the data object
	 */",
 "/**
	 * Returns the field label - used by templates.
	 */",
 "/**
	 * Set tabindex HTML attribute
	 * (defaults to none).
	 *
	 * @param int $index
	 */",
 "/**
	 * Get tabindex (if previously set)
	 *
	 * @return int
	 */",
 "/**
	 * Get tabindex HTML string
	 *
	 * @param int $increment Increase current tabindex by this value
	 * @return string
	 */",
 "/**
	 * Compiles all CSS-classes. Optionally includes a \"nolabel\"-class
	 * if no title was set on the formfield.
	 * Uses {@link Message()} and {@link MessageType()} to add validatoin
	 * error classes which can be used to style the contained tags.
	 * 
	 * @return String CSS-classnames
	 */",
 "/**
	 * Add a CSS-class to the formfield-container.
	 * 
	 * @param $class String
	 */",
 "/**
	 * Remove a CSS-class from the formfield-container.
	 * 
	 * @param $class String
	 */",
 "/**
	 * Returns a version of a title suitable for insertion into an HTML attribute
	 */",
 "/**
	 * Returns a version of a title suitable for insertion into an HTML attribute
	 */",
 "/**
	 * Set the field value.
	 * Returns $this.
	 */",
 "/**
	 * Set the field name
	 */",
 "/**
	 * Set the container form.
	 * This is called whenever you create a new form and put fields inside it, so that you don\'t
	 * have to worry about linking the two.
	 */",
 "/**
	 * Get the currently used form.
	 *
	 * @return Form
	 */",
 "/**
	 * Return TRUE if security token protection is enabled on the parent {@link Form}.
	 *
	 * @return bool
	 */",
 "/**
	 * Sets the error message to be displayed on the form field
	 * Set by php validation of the form
	 */",
 "/**
	 * Set the custom error message to show instead of the default
	 * format of Please Fill In XXX. Different from setError() as
	 * that appends it to the standard error messaging
	 * 
	 * @param String Message for the error
	 */",
 "/**
	 * Get the custom error message for this form field. If a custom
	 * message has not been defined then just return blank. The default
	 * error is defined on {@link Validator}.
	 *
	 * @todo Should the default error message be stored here instead
	 * @return String
	 */",
 "/**
	 * Returns the form field - used by templates.
	 * Although FieldHolder is generally what is inserted into templates, all of the field holder
	 * templates make use of $Field.  It\'s expected that FieldHolder will give you the \"complete\"
	 * representation of the field on the form, whereas Field will give you the core editing widget,
	 * such as an input tag.
	 * 
	 * Our base FormField class just returns a span containing the value.  This should be overridden!
	 */",
 "/**
	 * Returns a \"Field Holder\" for this field - used by templates.
	 * Forms are constructed from by concatenating a number of these field holders.  The default
	 * field holder is a label and form field inside a paragraph tag.
	 * 
	 * Composite fields can override FieldHolder to create whatever visual effects you like.  It\'s
	 * a good idea to put the actual HTML for field holders into templates.  The default field holder
	 * is the DefaultFieldHolder template.  This lets you override the HTML for specific sites, if it\'s
	 * necessary.
	 * 
	 * @todo Add \"validationError\" if needed.
	 */",
 "/**
	 * Returns a restricted field holder used within things like FieldGroups.
	 */",
 "/**
	 * Returns true if this field is a composite field.
	 * To create composite field types, you should subclass {@link CompositeField}.
	 */",
 "/**
	 * Returns true if this field has its own data.
	 * Some fields, such as titles and composite fields, don\'t actually have any data.  It doesn\'t
	 * make sense for data-focused methods to look at them.  By overloading hasData() to return false,
	 * you can prevent any data-focused methods from looking at it.
	 *
	 * @see FieldSet::collateDataFields()
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Sets readonly-flag on form-field. Please use performReadonlyTransformation()
	 * to actually transform this instance.
	 * @param $bool boolean Setting \"false\" has no effect on the field-state.
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Sets disabed-flag on form-field. Please use performDisabledTransformation()
	 * to actually transform this instance.
	 * @param $bool boolean Setting \"false\" has no effect on the field-state.
	 */",
 "/**
	 * Returns a readonly version of this field
	 */",
 "/**
	 * Return a disabled version of this field
	 */",
 "/**
	 * Returns the field type - used by templates.
	 * The field type is the class name with the word Field dropped off the end, all lowercase.
	 * It\'s handy for assigning HTML classes.
	 */",
 "/**
	 * Construct and return HTML tag.
	 * 
	 * @todo Transform to static helper method.
	 */",
 "/**
	 * javascript handler Functions for each field type by default
	 * formfield doesnt have a validation function
	 * 
	 * @todo shouldn\'t this be an abstract method?
	 */",
 "/**
	 * Validation Functions for each field type by default
	 * formfield doesnt have a validation function
	 * 
	 * @todo shouldn\'t this be an abstract method?
	 */",
 "/**
	 * Describe this field, provide help text for it.
	 * The function returns this so it can be used like this:
	 * $action = FormAction::create(\'submit\', \'Submit\')->describe(\"Send your changes to be approved\")
	 */",
 "/**
	 * This function is used by the template processor.  If you refer to a field as a $ variable, it
	 * will return the $Field value.
	 */",
 "/**
	 * @uses Validator->fieldIsRequired()
	 * @return boolean
	 */",
 "/**
	 * Takes a fieldname and converts camelcase to spaced
	 * words. Also resolves combined fieldnames with dot syntax
	 * to spaced words.
	 * 
	 * Examples:
	 * - \'TotalAmount\' will return \'Total Amount\'
	 * - \'Organisation.ZipCode\' will return \'Organisation Zip Code\'
	 *
	 * @param string $fieldName
	 * @return string
	 */",
 "/**
	 * Set the fieldset that contains this field. 
	 *
	 * @param FieldSet $containerFieldSet
	 */",
 "/**
 * Represents a field in a form. 
 *  
 * A FieldSet contains a number of FormField objects which make up the whole of a form.
 * In addition to single fields, FormField objects can be \"composite\", for example, the {@link TabSet}
 * field.  Composite fields let us define complex forms without having to resort to custom HTML.
 * 
 * <b>Subclassing</b>
 * 
 * Define a {@link dataValue()} method that returns a value suitable for inserting into a single database field. 
 * For example, you might tidy up the format of a date or currency field.
 * Define {@link saveInto()} to totally customise saving. 
 * For example, data might be saved to the filesystem instead of the data record, 
 * or saved to a component of the data record instead of the data record itself.
 * 
 * @package forms
 * @subpackage core
 */",
 "/**
	 * @return Array Map of encryptor code to the used class.
	 */",
 "/**
	 * Add a new encryptor implementation.
	 * 
	 * Note: Due to portability concerns, its not advisable to 
	 * override an existing $code mapping with different behaviour.
	 * 
	 * @param String $code This value will be stored stored in the 
	 * 	{@link Member->PasswordEncryption} property.
	 * @param String $class Classname of a {@link PasswordEncryptor} subclass
	 */",
 "/**
	 * @param String $code Unique lookup.
	 */",
 "/**
	 * @param String $algorithm
	 * @return PasswordEncryptor|Boolean Returns FALSE if class was not found
	 */",
 "/**
	 * Return a string value stored in the {@link Member->Password} property.
	 * The password should be hashed with {@link salt()} if applicable.
	 * 
	 * @param String $password Cleartext password to be hashed
	 * @param String $salt (Optional)
	 * @param Member $member (Optional)
	 * @return String Maximum of 512 characters.
	 */",
 "/**
	 * Return a string value stored in the {@link Member->Salt} property.
	 * Note: Only used when {@link Security::$useSalt} is TRUE.
	 * 
	 * @uses RandomGenerator
	 * 
	 * @param String $password Cleartext password
	 * @param Member $member (Optional)
	 * @return String Maximum of 50 characters
	 */",
 "/**
	 * This usually just returns a strict string comparison,
	 * but is necessary for {@link PasswordEncryptor_LegacyPHPHash}.
	 * 
	 * @param String $hash1
	 * @param String $hash2
	 * @return boolean
	 */",
 "/**
 * Allows pluggable password encryption.
 * By default, this might be PHP\'s integrated sha1()
 * function, but could also be more sophisticated to facilitate
 * password migrations from other systems.
 * Use {@link register()} to add new implementations.
 * 
 * Used in {@link Security::encrypt_password()}.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * @param String $algorithm A PHP built-in hashing algorithm as defined by hash_algos()
	 */",
 "/**
	 * @return string
	 */",
 "/**
 * This is the default class used for built-in hash types in PHP.
 * Please note that the implemented algorithms depend on the PHP
 * distribution and architecture.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Legacy implementation for SilverStripe 2.1 - 2.3,
 * which had a design flaw in password hashing that caused
 * the hashes to differ between architectures due to 
 * floating point precision problems in base_convert().
 * See http://open.silverstripe.org/ticket/3004
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Uses MySQL\'s PASSWORD encryption. Requires an active DB connection.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Uses MySQL\'s OLD_PASSWORD encyrption. Requires an active DB connection.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * Cleartext passwords (used in SilverStripe 2.1).
 * Also used when Security::$encryptPasswords is set to FALSE.
 * Not recommended.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
 * @package sapphire
 * @subpackage security
 */",
 "/**
     *    Creates a copy whether in PHP5 or PHP4.
     *    @param object $object     Thing to copy.
     *    @return object            A copy.
     *    @access public
     *    @static
     */",
 "/**
     *    Identity test. Drops back to equality + types for PHP5
     *    objects as the === operator counts as the
     *    stronger reference constraint.
     *    @param mixed $first    Test subject.
     *    @param mixed $second   Comparison object.
     *    @return boolean        True if identical.
     *    @access public
     *    @static
     */",
 "/**
     *    Recursive type test.
     *    @param mixed $first    Test subject.
     *    @param mixed $second   Comparison object.
     *    @return boolean        True if same type.
     *    @access private
     *    @static
     */",
 "/**
     *    Recursive type test for each element of an array.
     *    @param mixed $first    Test subject.
     *    @param mixed $second   Comparison object.
     *    @return boolean        True if identical.
     *    @access private
     *    @static
     */",
 "/**
     *    Test for two variables being aliases.
     *    @param mixed $first    Test subject.
     *    @param mixed $second   Comparison object.
     *    @return boolean        True if same.
     *    @access public
     *    @static
     */",
 "/**
     *    Test to see if an object is a member of a
     *    class hiearchy.
     *    @param object $object    Object to test.
     *    @param string $class     Root name of hiearchy.
     *    @return boolean         True if class in hiearchy.
     *    @access public
     *    @static
     */",
 "/**
     *    Sets a socket timeout for each chunk.
     *    @param resource $handle    Socket handle.
     *    @param integer $timeout    Limit in seconds.
     *    @access public
     *    @static
     */",
 "/**
 *  Static methods for compatibility between different
 *  PHP versions.
 *  @package    SimpleTest
 */",
 "/**
 * ComplexTableField with a radio button column, designed to edit a has_one join.
 * 
 * This [RelationTable](RelationTable) allows you to show a **1-to-1** or **1-to-many** relation with a group of DataObjects as a (readonly) tabular list (similiar to [ComplexTableField](ComplexTableField)). Its most useful when you want to manage the relationship itself thanks the **radio buttons** present on each line of the table.
 * 
 * Moreover, you have the possibility to uncheck a radio button in order to make the relation as null.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * $tablefield = new HasOneComplexTableField(
 *     $this,
 *     \'MyOnlyFruit\',
 *     \'Fruit\',
 *     array(
 * 	\'Name\' => \'Name\',
 * 	\'Color\' => \'Color\'
 *     ),
 *     \'getCMSFields_forPopup\'
 * );
 * </code>
 * 
 * **Notice** : You still have different ways to customize the popup window as in the parent-class [ComplexTableField](ComplexTableField).
 * 
 * This field is made to manage a **has_one** relation. In the SilverStripe relation between DataObjects, you can use this relation for **1-to-1** and **1-to-many** relations.
 * By default, a HasOneComplexTableField manages a **1-to-many** relation. If you want to specify that the relation that you manage is a **1-to-1** relation, add this code :
 * 
 * <code>
 * $tablefield->setOneToOne();
 * </code>
 * 
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
 * Single record of a {@link HasOneComplexTableField} field.
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
    * Executes statements before the actual array building starts
    *
    * This method should be overwritten in a filter if you want to do
    * something before the parsing process starts. This can be useful to
    * allow certain short alternative tags which then can be converted into
    * proper tags with preg_replace() calls.
    * The main class walks through all the filters and and calls this
    * method if it exists. The filters should modify their private $_text
    * variable.
    *
    * @return   none
    * @access   private
    * @see      $_text
    * @author   Stijn de Reede <sjr@gmx.co.uk>, Seth Price <seth@pricepages.org>
    */",
 "/**
 * @package  sapphire
 * @subpackage misc
 */",
 "/**
	 * Return {@link $this->resultsTableClassName}
	 */",
 "/**
	 * Initialize the model admin interface. Sets up embedded jquery libraries and requisite plugins.
	 * 
	 * @todo remove reliance on urlParams
	 */",
 "/**
	 * overwrite the static page_length of the admin panel, 
	 * should be called in the project _config file.
	 */",
 "/**
	 * Return the static page_length of the admin, default as 30
	 */",
 "/**
	 * Return the class name of the collection controller
	 *
	 * @param string $model model name to get the controller for
	 * @return string the collection controller class
	 */",
 "/**
	 * Return the class name of the record controller
	 *
	 * @param string $model model name to get the controller for
	 * @return string the record controller class
	 */",
 "/**
	 * Add mappings for generic form constructors to automatically delegate to a scaffolded form object.
	 */",
 "/**
	 * Base scaffolding method for returning a generic model instance.
	 */",
 "/**
	 * This method can be overloaded to specify the UI by which the search class is chosen.
	 *
	 * It can create a tab strip or a dropdown.  The dropdown is useful when there are a large number of classes.
	 * By default, it will show a tabs for 1-3 classes, and a dropdown for 4 or more classes.
	 *
	 * @return String: \'tabs\' or \'dropdown\'
	 */",
 "/**
	 * Returns managed models\' create, search, and import forms
	 * @uses SearchContext
	 * @uses SearchFilter
	 * @return DataObjectSet of forms 
	 */",
 "/**
	 * @return array
	 */",
 "/**
	 * Returns all importers defined in {@link self::$model_importers}.
	 * If none are defined, we fall back to {@link self::managed_models}
	 * with a default {@link CsvBulkLoader} class. In this case the column names of the first row
	 * in the CSV file are assumed to have direct mappings to properties on the object.
	 *
	 * @return array
	 */",
 "/**
 * Generates a three-pane UI for editing model classes,
 * with an automatically generated search panel, tabular results
 * and edit forms.
 * Relies on data such as {@link DataObject::$db} and {@DataObject::getCMSFields()}
 * to scaffold interfaces \"out of the box\", while at the same time providing
 * flexibility to customize the default output.
 * 
 * Add a route (note - this doc is not currently in sync with the code, need to update)
 * <code>
 * Director::addRules(50, array(\'admin/mymodel/$Class/$Action/$ID\' => \'MyModelAdmin\'));
 * </code>
 *
 * @todo saving logic (should mostly use Form->saveInto() and iterate over relations)
 * @todo ajax form loading and saving
 * @todo ajax result display
 * @todo relation formfield scaffolding (one tab per relation) - relations don\'t have DBField sublclasses, we do
 * 	we define the scaffold defaults. can be ComplexTableField instances for a start. 
 * @todo has_many/many_many relation autocomplete field (HasManyComplexTableField doesn\'t work well with larger datasets)
 * 
 * Long term TODOs:
 * @todo Hook into RESTful interface on DataObjects (yet to be developed)
 * @todo Permission control via datamodel and Form class
 * 
 * @uses SearchContext
 * 
 * @package cms
 * @subpackage core
 */",
 "/**
	 * Appends the model class to the URL.
	 *
	 * @param string $action
	 * @return string
	 */",
 "/**
	 * Return the class name of the model being managed.
	 *
	 * @return unknown
	 */",
 "/**
	 * Delegate to different control flow, depending on whether the
	 * URL parameter is a number (record id) or string (action).
	 * 
	 * @param unknown_type $request
	 * @return unknown
	 */",
 "/**
	 * Delegate to the RecordController if a valid numeric ID appears in the URL
	 * segment.
	 *
	 * @param SS_HTTPRequest $request
	 * @return RecordController
	 */",
 "/**
	 * Get a combination of the Search, Import and Create forms that can be inserted into a {@link ModelAdmin} sidebar.
	 *
	 * @return string
	 */",
 "/**
	 * Get a search form for a single {@link DataObject} subclass.
	 * 
	 * @return Form
	 */",
 "/**
	 * Create a form that consists of one button 
	 * that directs to a give model\'s Add form
	 */",
 "/**
	 * Checks if a CSV import form should be generated by a className criteria or in general for ModelAdmin.
	 */",
 "/**
	 * Generate a CSV import form for a single {@link DataObject} subclass.
	 *
	 * @return Form
	 */",
 "/**
	 * Imports the submitted CSV file based on specifications given in
	 * {@link self::model_importers}.
	 * Redirects back with a success/failure message.
	 * 
	 * @todo Figure out ajax submission of files via jQuery.form plugin
	 *
	 * @param array $data
	 * @param Form $form
	 * @param SS_HTTPRequest $request
	 */",
 "/**
	 * Return the columns available in the column selection field.
	 * Overload this to make other columns available
	 */",
 "/**
	 * Return the columns selected by default in the column selection field.
	 * Overload this to make other columns selected by default
	 */",
 "/**
	 * Give the flexibilility to show variouse combination of columns in the search result table
	 */",
 "/**
	 * Action to render a data object collection, using the model context to provide filters
	 * and paging.
	 * 
	 * @return string
	 */",
 "/**
	 * Gets the search query generated on the SearchContext from
	 * {@link DataObject::getDefaultSearchContext()},
	 * and the current GET parameters on the request.
	 *
	 * @return SQLQuery
	 */",
 "/**
	 * Returns all columns used for tabular search results display.
	 * Defaults to all fields specified in {@link DataObject->summaryFields()}.
	 * 
	 * @param array $searchCriteria Limit fields by populating the \'ResultsAssembly\' key
	 * @param boolean $selectedOnly Limit by \'ResultsAssempty
	 */",
 "/**
	 * Creates and returns the result table field for resultsForm.
	 * Uses {@link resultsTableClassName()} to initialise the formfield. 
	 * Method is called from {@link ResultsForm}.
	 *
	 * @param array $searchCriteria passed through from ResultsForm 
	 *
	 * @return TableListField 
	 */",
 "/**
	 * Shows results from the \"search\" action in a TableListField. 
	 *
	 * @uses getResultsTable()
	 *
	 * @return Form
	 */",
 "/**
	 * Create a new model record.
	 *
	 * @param unknown_type $request
	 * @return unknown
	 */",
 "/**
	 * Returns a form suitable for adding a new model, falling back on the default edit form.
	 * 
	 * Caution: The add-form shows a DataObject\'s {@link DataObject->getCMSFields()} method on a record
	 * that doesn\'t exist in the database yet, hence has no ID. This means the {@link DataObject->getCMSFields()}
	 * implementation has to ensure that no fields are added which would rely on a
	 * record ID being present, e.g. {@link HasManyComplexTableField}.
	 * 
	 * Example:
	 * <code>
	 * function getCMSFields() {
	 *   $fields = parent::getCMSFields();
	 *     if($this->exists()) {
	 *       $ctf = new HasManyComplexTableField($this, \'MyRelations\', \'MyRelation\');
	 *       $fields->addFieldToTab(\'Root.Main\', $ctf);
	 *     }
	 *   return $fields;
	 * }
	 * </code>
	 *
	 * @return Form
	 */",
 "/**
 * Handles a managed model class and provides default collection filtering behavior.
 *
 * @package cms
 * @subpackage core
 */",
 "/**
	 * Link fragment - appends the current record ID to the URL.
	 */",
 "/**
	 * Edit action - shows a form for editing this record
	 */",
 "/**
	 * Returns a form for editing the attached model
	 */",
 "/**
	 * Postback action to save a record
	 *
	 * @param array $data
	 * @param Form $form
	 * @param SS_HTTPRequest $request
	 * @return mixed
	 */",
 "/**
	 * Delete the current record
	 */",
 "/**
	 * Renders the record view template.
	 * 
	 * @param SS_HTTPRequest $request
	 * @return mixed
	 */",
 "/**
	 * Returns a form for viewing the attached model
	 * 
	 * @return Form
	 */",
 "/**
 * Handles operations on a single record from a managed model.
 * 
 * @package cms
 * @subpackage core
 * @todo change the parent controller varname to indicate the model scaffolding functionality in ModelAdmin
 */",
 "/**
	 * @param string $content
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @param string $content
	 * @return bool
	 */",
 "/**
	 * @return DOMDocument
	 */",
 "/**
	 * A simple convenience wrapper around DOMDocument::getElementsByTagName().
	 *
	 * @param string $name
	 * @return DOMNodeList
	 */",
 "/**
	 * @see HTMLValue::getContent()
	 */",
 "/**
 * This class acts as a wrapper around the built in DOMDocument class in order to use it to manage a HTML snippet,
 * rather than a whole document, while still exposing the DOMDocument API.
 *
 * @package sapphire
 * @subpackage integration
 */",
 "/**
	 * Limit this field\'s content by a number of characters.
	 * This makes use of strip_tags() to avoid malforming the
	 * HTML tags in the string of text.
	 *
	 * @param int $limit Number of characters to limit by
	 * @param string $add Ellipsis to add to the end of truncated string
	 * @return string
	 */",
 "/**
	 * Create a summary of the content. This will be some section of the first paragraph, limited by
	 * $maxWords. All internal tags are stripped out - the return value is a string
	 * 
	 * This is sort of the HTML aware equivilent to Text#Summary, although the logic for summarising is not exactly the same
	 * 
	 * @param int $maxWords Maximum number of words to return - may return less, but never more. Pass -1 for no limit
	 * @param int $flex Number of words to search through when looking for a nice cut point 
	 * @param string $add What to add to the end of the summary if we cut at a less-than-ideal cut point
	 * @return string A nice(ish) summary with no html tags (but possibly still some html entities)
	 * 
	 * @see sapphire/core/model/fieldtypes/Text#Summary($maxWords)
	 */",
 "/**
	 * Returns the first sentence from the first paragraph. If it can\'t figure out what the first paragraph is (or there isn\'t one)
	 * it returns the same as Summary()
	 * 
	 * This is the HTML aware equivilent to Text#FirstSentence
	 * 
	 * @see sapphire/core/model/fieldtypes/Text#FirstSentence()
	 */",
 "/**
 * Represents a large text field that contains HTML content.
 * This behaves similarly to {@link Text}, but the template processor won\'t escape any HTML content within it.
 * 
 * @see HTMLVarchar
 * @see Text
 * @see Varchar
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Submit a get request
	 * @uses Director::test()
	 */",
 "/**
	 * Submit a post request
	 * @uses Director::test()
	 */",
 "/**
	 * Submit the form with the given HTML ID, filling it out with the given data.
	 * Acts on the most recent response
	 */",
 "/**
	 * If the last request was a 3xx response, then follow the redirection
	 */",
 "/**
	 * Returns true if the last response was a 3xx redirection
	 */",
 "/**
	 * Get the most recent response, as an SS_HTTPResponse object
	 */",
 "/**
	 * Get the most recent response\'s content
	 */",
 "/**
	 * Get the last response as a SimplePage object
	 */",
 "/**
	 * Get the current session, as a Session object
	 */",
 "/**
 * Represents a test usage session of a web-app
 * It will maintain session-state from request to request
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
 * Wrapper around SS_HTTPResponse to make it look like a SimpleHTTPResposne
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
     * Class constructor.  Create a new logger
     *
     * @param Zend_Log_Writer_Abstract|null  $writer  default writer
     */",
 "/**
     * Class destructor.  Shutdown log writers
     *
     * @return void
     */",
 "/**
     * Undefined method handler allows a shortcut:
     *   $log->priorityName(\'message\')
     *     instead of
     *   $log->log(\'message\', Zend_Log::PRIORITY_NAME)
     *
     * @param  string  $method  priority name
     * @param  string  $params  message to log
     * @return void
     * @throws Zend_Log_Exception
     */",
 "/**
     * Log a message at a priority
     *
     * @param  string   $message   Message to log
     * @param  integer  $priority  Priority of message
     * @return void
     * @throws Zend_Log_Exception
     */",
 "/**
     * Add a custom priority
     *
     * @param  string   $name      Name of priority
     * @param  integer  $priority  Numeric priority
     * @throws Zend_Log_InvalidArgumentException
     */",
 "/**
     * Add a filter that will be applied before all log writers.
     * Before a message will be received by any of the writers, it
     * must be accepted by all filters added with this method.
     *
     * @param  int|Zend_Log_Filter_Interface $filter
     * @return void
     */",
 "/**
     * Add a writer.  A writer is responsible for taking a log
     * message and writing it out to storage.
     *
     * @param  Zend_Log_Writer_Abstract $writer
     * @return void
     */",
 "/**
     * Set an extra item to pass to the log writers.
     *
     * @param  $name    Name of the field
     * @param  $value   Value of the field
     * @return void
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id$
 */",
 "/**
     *    Sets the error to empty.
     *    @access public
     */",
 "/**
     *    Test for an outstanding error.
     *    @return boolean           True if there is an error.
     *    @access public
     */",
 "/**
     *    Accessor for an outstanding error.
     *    @return string     Empty string if no error otherwise
     *                       the error message.
     *    @access public
     */",
 "/**
     *    Sets the internal error.
     *    @param string       Error message to stash.
     *    @access protected
     */",
 "/**
     *    Resets the error state to no error.
     *    @access protected
     */",
 "/**
 *    Stashes an error for later. Useful for constructors
 *    until PHP gets exceptions.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Opens a socket for reading and writing.
     *    @param string $host          Hostname to send request to.
     *    @param integer $port         Port on remote machine to open.
     *    @param integer $timeout      Connection timeout in seconds.
     *    @param integer $block_size   Size of chunk to read.
     *    @access public
     */",
 "/**
     *    Writes some data to the socket and saves alocal copy.
     *    @param string $message       String to send to socket.
     *    @return boolean              True if successful.
     *    @access public
     */",
 "/**
     *    Reads data from the socket. The error suppresion
     *    is a workaround for PHP4 always throwing a warning
     *    with a secure socket.
     *    @return integer/boolean           Incoming bytes. False
     *                                     on error.
     *    @access public
     */",
 "/**
     *    Accessor for socket open state.
     *    @return boolean           True if open.
     *    @access public
     */",
 "/**
     *    Closes the socket preventing further reads.
     *    Cannot be reopened once closed.
     *    @return boolean           True if successful.
     *    @access public
     */",
 "/**
     *    Accessor for content so far.
     *    @return string        Bytes sent only.
     *    @access public
     */",
 "/**
     *    Actually opens the low level socket.
     *    @param string $host          Host to connect to.
     *    @param integer $port         Port on host.
     *    @param integer $error_number Recipient of error code.
     *    @param string $error         Recipoent of error message.
     *    @param integer $timeout      Maximum time to wait for connection.
     *    @access protected
     */",
 "/**
 *    Wrapper for TCP/IP socket.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     *    Opens a secure socket for reading and writing.
     *    @param string $host      Hostname to send request to.
     *    @param integer $port     Port on remote machine to open.
     *    @param integer $timeout  Connection timeout in seconds.
     *    @access public
     */",
 "/**
     *    Actually opens the low level socket.
     *    @param string $host          Host to connect to.
     *    @param integer $port         Port on host.
     *    @param integer $error_number Recipient of error code.
     *    @param string $error         Recipient of error message.
     *    @param integer $timeout      Maximum time to wait for connection.
     *    @access protected
     */",
 "/**
 *    Wrapper for TCP/IP socket over TLS.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
	 * Create a new page comment interface
	 * @param controller The controller that the interface is used on
	 * @param methodName The method to return this PageCommentInterface object
	 * @param page The page that we\'re commenting on
	 */",
 "/**
	 * See {@link PageCommentInterface::$comments_require_login}
	 *
	 * @param boolean state The new state of this static field
	 */",
 "/**
	 * See {@link PageCommentInterface::$comments_require_permission}
	 *
	 * @param string permission The permission to check against.
	 */",
 "/**
	 * See {@link PageCommentInterface::$show_comments_when_disabled}
	 * 
	 * @param bool - show / hide the existing comments when disabled
	 */",
 "/**
	 * See {@link PageCommentInterface::$order_comments_by}
	 *
	 * @param String
	 */",
 "/**
	 * See {@link PageCommentInterface::$use_ajax_commenting}
	 *
	 * @param bool
	 */",
 "/**
	 * @return boolean true if the currently logged in user can post a comment,
	 * false if they can\'t. Users can post comments by default, enforce 
	 * security by using 
	 * @link PageCommentInterface::set_comments_require_login() and 
	 * @link {PageCommentInterface::set_comments_require_permission()}.
	 */",
 "/**
	 * if this page comment form requires users to have a
	 * valid permission code in order to post (used to customize the error 
	 * message).
	 * 
	 * @return bool
	 */",
 "/**
	 * A link to PageComment_Controller.deleteallcomments() which deletes all
	 * comments on a page referenced by the url param pageid
	 */",
 "/**
 * Represents an interface for viewing and adding page comments
 * Create one, passing the page discussed to the constructor.  It can then be
 * inserted into a template.
 * @package cms
 * @subpackage comments
 */",
 "/**
 * @package cms
 * @subpackage comments
 */",
 "/**
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * Returns the number, with commas and decimal places as appropriate, eg ???1,000.00???.
	 * 
	 * @uses number_format()
	 */",
 "/**
	 * Returns the value to be set in the database to blank this field.
	 * Usually it\'s a choice between null, 0, and \'\'
	 */",
 "/**
	 * Return an encoding of the given value suitable for inclusion in a SQL statement.
	 * If necessary, this should include quotes.
	 */",
 "/**
 * Represents a floating point field.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * Returns information about the current site instance.
 * @package sapphire
 * @subpackage control
 */",
 "/**
	 * Return a user friendly format for time
	 * in a 12 hour format.
	 * 
	 * @return string Time in 12 hour format
	 */",
 "/**
	 * Return a user friendly format for time
	 * in a 24 hour format.
	 * 
	 * @return string Time in 24 hour format
	 */",
 "/**
	 * Return the time using a particular formatting string.
	 * 
	 * @param string $format Format code string. e.g. \"g:ia\"
	 * @return string The date in the requested format
	 */",
 "/**
 * Represents a column in the database with the type \'Time\'.
 * 
 * Example definition via {@link DataObject::$db}:
 * <code>
 * static $db = array(
 * 	\"StartTime\" => \"Time\",
 * );
 * </code>
 * 
 * @todo Add localization support, see http://open.silverstripe.com/ticket/2931
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Get the full form (e.g. /home/) relative link to the home page for the current HTTP_HOST value. Note that the
	 * link is trimmed of leading and trailing slashes before returning to ensure consistency.
	 *
	 * @return string
	 */",
 "/**
	 * Gets the link that denotes the homepage if there is not one explicitly defined for this HTTP_HOST value.
	 *
	 * @return string
	 */",
 "/**
	 * Returns TRUE if a request to a certain page should be redirected to the site root (i.e. if the page acts as the
	 * home page).
	 *
	 * @param SiteTree $page
	 * @return bool
	 */",
 "/**
	 * Resets the cached homepage link value - useful for testing.
	 */",
 "/**
	 * @param SS_HTTPRequest $request
	 * @return SS_HTTPResponse
	 */",
 "/**
 * @package sapphire
 * @subpackage control
 */",
 "/**
 * Classes that must be run weekly extend this class
 * 
 * Please note: Subclasses of this task aren\'t extecuted automatically,
 * they need to be triggered by an external automation tool like unix cron.
 * See {@link ScheduledTask} for details.
 * 
 * @package sapphire
 * @subpackage cron
 */",
 "/**
     * Surprisingly, the results of this implementation of round()
     * prove better than the native PHP round(). For example, try:
     *   round(639.795, 2);
     *   round(267.835, 2);
     *   round(0.302515, 5);
     *   round(0.36665, 4);
     * then try:
     *   Zend_Locale_Math::round(\'639.795\', 2);
     */",
 "/**
     * Normalizes an input to standard english notation
     * Fixes a problem of BCMath with setLocale which is PHP related
     *
     * @param   integer  $value  Value to normalize
     * @return  string           Normalized string without BCMath problems
     */",
 "/**
     * Localizes an input from standard english notation
     * Fixes a problem of BCMath with setLocale which is PHP related
     *
     * @param   integer  $value  Value to normalize
     * @return  string           Normalized string without BCMath problems
     */",
 "/**
     * Changes exponential numbers to plain string numbers
     * Fixes a problem of BCMath with numbers containing exponents
     *
     * @param integer $value Value to erase the exponent
     * @param integer $scale (Optional) Scale to use
     * @return string
     */",
 "/**
     * BCAdd - fixes a problem of BCMath and exponential numbers
     *
     * @param  string  $op1
     * @param  string  $op2
     * @param  integer $scale
     * @return string
     */",
 "/**
     * BCSub - fixes a problem of BCMath and exponential numbers
     *
     * @param  string  $op1
     * @param  string  $op2
     * @param  integer $scale
     * @return string
     */",
 "/**
     * BCPow - fixes a problem of BCMath and exponential numbers
     *
     * @param  string  $op1
     * @param  string  $op2
     * @param  integer $scale
     * @return string
     */",
 "/**
     * BCMul - fixes a problem of BCMath and exponential numbers
     *
     * @param  string  $op1
     * @param  string  $op2
     * @param  integer $scale
     * @return string
     */",
 "/**
     * BCDiv - fixes a problem of BCMath and exponential numbers
     *
     * @param  string  $op1
     * @param  string  $op2
     * @param  integer $scale
     * @return string
     */",
 "/**
     * BCSqrt - fixes a problem of BCMath and exponential numbers
     *
     * @param  string  $op1
     * @param  integer $scale
     * @return string
     */",
 "/**
     * BCMod - fixes a problem of BCMath and exponential numbers
     *
     * @param  string  $op1
     * @param  string  $op2
     * @return string
     */",
 "/**
     * BCComp - fixes a problem of BCMath and exponential numbers
     *
     * @param  string  $op1
     * @param  string  $op2
     * @param  integer $scale
     * @return string
     */",
 "/**
 * Utility class for proxying math function to bcmath functions, if present,
 * otherwise to PHP builtin math operators, with limited detection of overflow conditions.
 * Sampling of PHP environments and platforms suggests that at least 80% to 90% support bcmath.
 * Thus, this file should be as light as possible.
 *
 * @category   Zend
 * @package    Zend_Locale
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * @param string $name
	 * @param string $title
	 * @param string $className (Deprecated: use addExtraClass())
	 * @param bool $allowHTML (Deprecated: use setAllowHTML())
	 * @param Form $form
	 */",
 "/**
	 * Returns a label containing the title, and an HTML class if given.
	 */",
 "/**
 * Simple label tag. This can be used to add extra text in your forms.
 * Consider using a {@link ReadonlyField} if you need to display a label
 * AND a value.
 * 
 * @package forms
 * @subpackage fields-dataless
 */",
 "/**
     * Constructor
     *
     * @param  array $options Associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Set a specific life time
     *
     * @param  int $specificLifetime
     * @return void
     */",
 "/**
     * Set the priority (used by some particular backends)
     *
     * @param int $priority integer between 0 (very low priority) and 10 (maximum priority)
     */",
 "/**
     * Public frontend to set an option
     *
     * Just a wrapper to get a specific behaviour for cached_entity
     *
     * @param  string $name  Name of the option
     * @param  mixed  $value Value of the option
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Specific method to set the cachedEntity
     *
     * if set to a class name, we will cache an abstract class and will use only static calls
     * if set to an object, we will cache this object methods
     *
     * @param mixed $cachedEntity
     */",
 "/**
     * Set the cache array
     *
     * @param  array $tags
     * @return void
     */",
 "/**
     * Main method : call the specified method or get the result from cache
     *
     * @param  string $name       Method name
     * @param  array  $parameters Method parameters
     * @return mixed Result
     */",
 "/**
     * Make a cache id from the method name and parameters
     *
     * @param  string $name       Method name
     * @param  array  $parameters Method parameters
     * @return string Cache id
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Frontend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Either turns on (boolean true) or off (boolean false) the progress indicators.
	 * @see StaticPublisher::$echo_progress
	 */",
 "/**
	 * Called after a page is published.
	 */",
 "/**
	 * Called after link assets have been renamed, and the live site has been updated, without
	 * an actual publish event.
	 * 
	 * Only called if the published content exists and has been modified.
	 */",
 "/**
	 * On after unpublish, get changes and hook into underlying
	 * functionality
	 */",
 "/**
	 * Get all external references to CSS, JS, 
	 */",
 "/**
 * @package cms
 * @subpackage publishers
 */",
 "/**
	 * Constructor
	 *
	 * @param Controller $controller The parent controller, necessary to
	 *                               create the appropriate form action tag.
	 * @param string $name The method on the controller that will return this
	 *                     form object.
	 * @param FieldSet|FormField $fields All of the fields in the form - a
	 *                                   {@link FieldSet} of {@link FormField}
	 *                                   objects.
	 * @param FieldSet|FormAction $actions All of the action buttons in the
	 *                                     form - a {@link FieldSet} of
	 *                                     {@link FormAction} objects
	 * @param bool $checkCurrentUser If set to TRUE, it will be checked if a
	 *                               the user is currently logged in, and if
	 *                               so, only a logout button will be rendered
	 * @param string $authenticatorClassName Name of the authenticator class that this form uses.
	 */",
 "/**
	 * Get message from session
	 */",
 "/**
	 * Login form handler method
	 *
	 * This method is called when the user clicks on \"Log in\"
	 *
	 * @param array $data Submitted data
	 */",
 "/**
	 * Log out form handler method
	 *
	 * This method is called when the user clicks on \"logout\" on the form
	 * created when the parameter <i>$checkCurrentUser</i> of the
	 * {@link __construct constructor} was set to TRUE and the user was
	 * currently logged in.
	 */",
 "/**
   * Try to authenticate the user
   *
   * @param array Submitted data
   * @return Member Returns the member object on successful authentication
   *                or NULL on failure.
   */",
 "/**
	 * Forgot password form handler method
	 *
	 * This method is called when the user clicks on \"I\'ve lost my password\"
	 *
	 * @param array $data Submitted data
	 */",
 "/**
 * Log-in form for the \"member\" authentication method
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * @param string $fullName Determines the name of the field, as well as the searched database 
	 *  column. Can contain a relation name in dot notation, which will automatically join
	 *  the necessary tables (e.g. \"Comments.Name\" to join the \"Comments\" has-many relationship and
	 *  search the \"Name\" column when applying this filter to a SiteTree class).
	 * @param mixed $value
	 */",
 "/**
	 * Called by constructor to convert a string pathname into
	 * a well defined relationship sequence.
	 *
	 * @param string $name
	 */",
 "/**
	 * Set the root model class to be selected by this
	 * search query.
	 *
	 * @param string $className
	 */",
 "/**
	 * Set the current value to be filtered on.
	 *
	 * @param string $value
	 */",
 "/**
	 * Accessor for the current value to be filtered on.
	 * Caution: Data is not escaped.
	 *
	 * @return string
	 */",
 "/**
	 * The original name of the field.
	 *
	 * @return string
	 */",
 "/**
	 * The full name passed to the constructor,
	 * including any (optional) relations in dot notation.
	 * 
	 * @return string
	 */",
 "/**
	 * Normalizes the field name to table mapping.
	 * 
	 * @return string
	 */",
 "/**
	 * Return the value of the field as processed by the DBField class
	 *
	 * @return string
	 */",
 "/**
						 * add join clause to the component\'s ancestry classes so that the search filter could search on its 
						 * ancester fields.
						 */",
 "/**
						 * add join clause to the component\'s ancestry classes so that the search filter could search on its 
						 * ancestor fields.
						 */",
 "/**
	 * Traverse the relationship fields, and add the table
	 * mappings to the query object state. This has to be called
	 * in any overloaded {@link SearchFilter->apply()} methods manually.
	 * 
	 * @todo try to make this implicitly triggered so it doesn\'t have to be manually called in child filters
	 * @param SQLQuery $query
	 * @return SQLQuery
	 */",
 "/**
	 * Apply filter criteria to a SQL query.
	 *
	 * @param SQLQuery $query
	 * @return SQLQuery
	 */",
 "/**
	 * Determines if a field has a value,
	 * and that the filter should be applied.
	 * Relies on the field being populated with
	 * {@link setValue()}
	 * 
	 * @return boolean
	 */",
 "/**
 * Base class for filtering implementations,
 * which work together with {@link SearchContext}
 * to create or amend a query for {@link DataObject} instances.
 * See {@link SearchContext} for more information.
 *
 * @package sapphire
 * @subpackage search
 */",
 "/**
    * Executes statements before the actual array building starts
    *
    * This method should be overwritten in a filter if you want to do
    * something before the parsing process starts. This can be useful to
    * allow certain short alternative tags which then can be converted into
    * proper tags with preg_replace() calls.
    * The main class walks through all the filters and and calls this
    * method if it exists. The filters should modify their private $_text
    * variable.
    *
    * @return   none
    * @access   private
    * @see      $_text
    * @author   Stijn de Reede  <sjr@gmx.co.uk>
    */",
 "/**
 * @package  sapphire
 * @subpackage misc
 */",
 "/**
 * Imports {@link Group} records by CSV upload, as defined in
 * {@link GroupCsvBulkLoader}.
 * 
 * @package cms
 * @subpackage batchactions
 */",
 "/**
	 * Create a new Decimal field.
	 */",
 "/**
	 * Return an encoding of the given value suitable for inclusion in a SQL statement.
	 * If necessary, this should include quotes.
	 */",
 "/**
 * Represents a Decimal field.
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Checkboxes use the RightLabelledFieldHolder template, to put the field on the left
	 * and the label on the right.  See {@link FormField::FieldHolder} for more information about
	 * how FieldHolder works. 
	 */",
 "/**
	 * Returns a restricted field holder used within things like FieldGroups
	 */",
 "/**
	 * Returns a readonly version of this field
	 */",
 "/**
 * Single checkbox field.
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
 * Readonly version of a checkbox field - \"Yes\" or \"No\".
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
	 * Returns a single checkbox field - used by templates.
	 */",
 "/**
 * Single checkbox field, disabled
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
   * Parses YAML to array.
   * @param string $string YAML string.
   * @return array
   */",
 "/**
   * Parses YAML to array.
   * @param string $file Path to YAML file.
   * @return array
   */",
 "/**
 * Load a valid YAML string to Spyc.
 * @param string $input
 * @return array
 */",
 "/**
 * Load a valid YAML file to Spyc.
 * @param string $file
 * @return array
 */",
 "/**
     * Load YAML into a PHP array statically
     *
     * The load method, when supplied with a YAML stream (string or file),
     * will do its best to convert YAML in a file into a PHP array.  Pretty
     * simple.
     *  Usage:
     *  <code>
     *   $array = Spyc::YAMLLoad(\'lucky.yaml\');
     *   print_r($array);
     *  </code>
     * @access public
     * @return array
     * @param string $input Path of YAML file or string containing YAML
     */",
 "/**
     * Load a string of YAML into a PHP array statically
     *
     * The load method, when supplied with a YAML string, will do its best 
     * to convert YAML in a string into a PHP array.  Pretty simple.
     *
     * Note: use this function if you don\'t want files from the file system
     * loaded and processed as YAML.  This is of interest to people concerned
     * about security whose input is from a string.
     *
     *  Usage:
     *  <code>
     *   $array = Spyc::YAMLLoadString(\"---\n0: hello world\n\");
     *   print_r($array);
     *  </code>
     * @access public
     * @return array
     * @param string $input String containing YAML
     */",
 "/**
     * Dump YAML from PHP array statically
     *
     * The dump method, when supplied with an array, will do its best
     * to convert the array into friendly YAML.  Pretty simple.  Feel free to
     * save the returned string as nothing.yaml and pass it around.
     *
     * Oh, and you can decide how big the indent is and what the wordwrap
     * for folding is.  Pretty cool -- just pass in \'false\' for either if
     * you want to use the default.
     *
     * Indent\'s default is 2 spaces, wordwrap\'s default is 40 characters.  And
     * you can turn off wordwrap by passing in 0.
     *
     * @access public
     * @return string
     * @param array $array PHP array
     * @param int $indent Pass in false to use the default, which is 2
     * @param int $wordwrap Pass in 0 for no wordwrap, false for default (40)
     */",
 "/**
     * Dump PHP array to YAML
     *
     * The dump method, when supplied with an array, will do its best
     * to convert the array into friendly YAML.  Pretty simple.  Feel free to
     * save the returned string as tasteful.yaml and pass it around.
     *
     * Oh, and you can decide how big the indent is and what the wordwrap
     * for folding is.  Pretty cool -- just pass in \'false\' for either if
     * you want to use the default.
     *
     * Indent\'s default is 2 spaces, wordwrap\'s default is 40 characters.  And
     * you can turn off wordwrap by passing in 0.
     *
     * @access public
     * @return string
     * @param array $array PHP array
     * @param int $indent Pass in false to use the default, which is 2
     * @param int $wordwrap Pass in 0 for no wordwrap, false for default (40)
     */",
 "/**
     * Attempts to convert a key / value array item to YAML
     * @access private
     * @return string
     * @param $key The name of the key
     * @param $value The value of the item
     * @param $indent The indent of the current node
     */",
 "/**
     * Attempts to convert an array to YAML
     * @access private
     * @return string
     * @param $array The array you want to convert
     * @param $indent The indent of the current level
     */",
 "/**
     * Returns YAML from a key and a value
     * @access private
     * @return string
     * @param $key The name of the key
     * @param $value The value of the item
     * @param $indent The indent of the current node
     */",
 "/**
     * Creates a literal block for dumping
     * @access private
     * @return string
     * @param $value
     * @param $indent int The value of the indent
     */",
 "/**
     * Folds a string of text, if necessary
     * @access private
     * @return string
     * @param $value The string you wish to fold
     */",
 "/**
     * Parses YAML code and returns an array for a node
     * @access private
     * @return array
     * @param string $line A line from the YAML file
     */",
 "/**
     * Finds the type of the passed value, returns the value as the new type.
     * @access private
     * @param string $value
     * @return mixed
     */",
 "/**
     * Used in inlines to check for more inlines or quoted strings
     * @access private
     * @return array
     */",
 "/**
   * The Simple PHP YAML Class.
   *
   * This class can be used to read a YAML file and convert its contents
   * into a PHP array.  It currently supports a very limited subsection of
   * the YAML spec.
   *
   * Usage:
   * <code>
   *   $Spyc  = new Spyc;
   *   $array = $Spyc->load($file);
   * </code>
   * or:
   * <code>
   *   $array = Spyc::YAMLLoad($file);
   * </code>
   * or:
   * <code>
   *   $array = spyc_load_file($file);
   * </code>
   * @package Spyc
   */",
 "/**
 * @package  sapphire
 * @subpackage misc
 */",
 "/**
 * Interface that is implemented by controllers that are designed to hand control over to another controller.  
 * ModelAsController, which selects up a SiteTree object and passes control over to a suitable subclass of ContentController, is a good
 * example of this.
 * @package sapphire
 * @subpackage control
 */",
 "/**
    * Executes statements before the actual array building starts
    *
    * This method should be overwritten in a filter if you want to do
    * something before the parsing process starts. This can be useful to
    * allow certain short alternative tags which then can be converted into
    * proper tags with preg_replace() calls.
    * The main class walks through all the filters and and calls this
    * method if it exists. The filters should modify their private $_text
    * variable.
    *
    * @return   none
    * @access   private
    * @see      $_text
    * @author   Stijn de Reede  <sjr@gmx.co.uk>
    */",
 "/**
 * @package  sapphire
 * @subpackage misc
 */",
 "/**
     * Constructor
     *
     * @param  array $options associative array of options
     * @throws Zend_Cache_Exception
     */",
 "/**
     * Store data
     *
     * @var mixed  $data        Object to store
     * @var string $id          Cache id
     * @var int    $timeToLive  Time to live in seconds
     *
     */",
 "/**
     * Fetch data
     *
     * @var mixed  $data        Object to store
     * @var string $id          Cache id
     * @var int    $timeToLive  Time to live in seconds
     */",
 "/**
     * Unset data
     *
     * @var string $id          Cache id
     * @return boolean true if no problem
     */",
 "/**
     * Clear cache
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * Transformation that will make a form printable.
 * Builds on readonly forms with different behaviour for tabsets.
 * @package forms
 * @subpackage transformations
 */",
 "/**
 * Class representing printable tabsets
 * @package forms
 * @subpackage transformations
 */",
 "/**
 * Utility class for proxying math function to bcmath functions, if present,
 * otherwise to PHP builtin math operators, with limited detection of overflow conditions.
 * Sampling of PHP environments and platforms suggests that at least 80% to 90% support bcmath.
 * This file should only be loaded for the 10% to 20% lacking access to the bcmath extension.
 *
 * @category   Zend
 * @package    Zend_Locale
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * Classes that must be run hourly extend this class
 * 
 * Please note: Subclasses of this task aren\'t extecuted automatically,
 * they need to be triggered by an external automation tool like unix cron.
 * See {@link ScheduledTask} for details.
 * 
 * @package sapphire
 * @subpackage cron
 */",
 "/**
	 * Get the {@link ShortcodeParser} instance that is attached to a particular identifier.
	 *
	 * @param string $identifier Defaults to \"default\".
	 * @return ShortcodeParser
	 */",
 "/**
	 * Get the currently active/default {@link ShortcodeParser} instance.
	 *
	 * @return ShortcodeParser
	 */",
 "/**
	 * Set the identifier to use for the current active/default {@link ShortcodeParser} instance.
	 *
	 * @param string $identifier
	 */",
 "/**
	 * Register a shortcode, and attach it to a PHP callback.
	 *
	 * The callback for a shortcode will have the following arguments passed to it:
	 *   - Any parameters attached to the shortcode as an associative array (keys are lower-case).
	 *   - Any content enclosed within the shortcode (if it is an enclosing shortcode). Note that any content within
	 *     this will not have been parsed, and can optionally be fed back into the parser.
	 *   - The {@link ShortcodeParser} instance used to parse the content.
	 *   - The shortcode tag name that was matched within the parsed content.
	 *
	 * @param string $shortcode The shortcode tag to map to the callback - normally in lowercase_underscore format.
	 * @param callback $callback The callback to replace the shortcode with.
	 */",
 "/**
	 * Check if a shortcode has been registered.
	 *
	 * @param string $shortcode
	 * @return bool
	 */",
 "/**
	 * Remove a specific registered shortcode.
	 *
	 * @param string $shortcode
	 */",
 "/**
	 * Remove all registered shortcodes.
	 */",
 "/**
	 * Parse a string, and replace any registered shortcodes within it with the result of the mapped callback.
	 *
	 * @param string $content
	 * @return string
	 */",
 "/**
	 * @ignore
	 */",
 "/**
 * A simple parser that allows you to map BBCode-like \"shortcodes\" to an arbitrary callback.
 *
 * * The Shortcode API (new in 2.4) is a simple regex based parser that allows you to replace simple bbcode-like tags within a HTMLText or HTMLVarchar field when rendered into a template. It is inspired by and very similar to the [Wordpress implementation](http://codex.wordpress.org/Shortcode_API) of shortcodes. Examples of shortcode tags are:
 * 
 * <code>
 *     [shortcode]
 *     [shortcode /]
 *     [shortcode parameter=\"value\"]
 *     [shortcode parameter=\"value\"]Enclosed Content[/shortcode]
 * </code>
 * 
 * <b>Defining Custom Shortcodes</b>
 * 
 * All you need to do to define a shortcode is to register a callback with the parser that will be called whenever a shortcode is encountered. This callback will return a string to replace the shortcode with.
 * 
 * To register a shortcode you call:
 *
 * <code>
 *     ShortcodeParser::get(\'default\')->register(\'shortcode_tag_name\', \'callback\');
 * </code> 
 * 
 * These parameters are passed to the callback:
 * *  Any parameters attached to the shortcode as an associative array (keys are lower-case).
 * *  Any content enclosed within the shortcode (if it is an enclosing shortcode). Note that any content within this will not have been parsed, and can optionally be fed back into the parser.
 * *  The ShortcodeParser instance used to parse the content.
 * *  The shortcode tag name that was matched within the parsed content.
 * 
 * <b>Inbuilt Shortcodes</b>
 * 
 * From 2.4 onwards links inserted via the CMS into a content field are in the form \'\'<a href=\"[sitetree_link id=n]\">\'\'. At runtime this is replaced by a plain link to the page with the ID in question.
 * 
 * <b>Limitations</b>
 * 
 * Since the shortcode parser is based on a simple regular expression it cannot properly handle nested shortcodes. For example the below code will not work as expected:
 * 
 * <code>
 *     [shortcode]
 *     [shortcode][/shortcode]
 *     [/shortcode]
 * </code>
 * 
 * The parser will recognise this as:
 * 
 * <code>
 *     [shortcode]
 *     [shortcode]
 *     [/shortcode]
 * </code>
 *
 * @package sapphire
 * @subpackage misc
 */",
 "/**
     * Formats data into a single line to be written by the writer.
     *
     * @param  array    $event    event data
     * @return string             formatted line to write to the log
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Formatter
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Interface.php 8064 2008-02-16 10:58:39Z thomas $
 */",
 "/**
	 * @param $group Group
	 */",
 "/**
	 * @return Group
	 */",
 "/**
 * Imports {@link Member} records by CSV upload, as defined in
 * {@link MemberCsvBulkLoader}.
 * 
 * @package cms
 * @subpackage batchactions
 */",
 "/**
     * Constructor
     *
     * @param  array $options associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * WARNING $doNotTestCacheValidity=true is unsupported by the Xcache backend
     *
     * @param  string  $id                     cache id
     * @param  boolean $doNotTestCacheValidity if set to true, the cache validity won\'t be tested
     * @return string cached datas (or false)
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param  string $id cache id
     * @return mixed false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param string $data datas to cache
     * @param string $id cache id
     * @param array $tags array of strings, the cache record will be tagged by each string entry
     * @param int $specificLifetime if != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @return boolean true if no problem
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id cache id
     * @return boolean true if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * \'all\' (default)  => remove all cache entries ($tags is not used)
     * \'old\'            => unsupported
     * \'matchingTag\'    => unsupported
     * \'notMatchingTag\' => unsupported
     * \'matchingAnyTag\' => unsupported
     *
     * @param  string $mode clean mode
     * @param  array  $tags array of tags
     * @throws Zend_Cache_Exception
     * @return boolean true if no problem
     */",
 "/**
     * Return true if the automatic cleaning is available for the backend
     *
     * @return boolean
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * Incomplete.
 * 
 * @todo add to tests
 * 
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Determines if unit tests are currently run (via {@link TestRunner}).
	 * This is used as a cheap replacement for fully mockable state
	 * in certain contiditions (e.g. access checks).
	 * Caution: When set to FALSE, certain controllers might bypass
	 * access checks, so this is a very security sensitive setting.
	 * 
	 * @return boolean
	 */",
 "/**
	 * Called once per test case ({@link SapphireTest} subclass).
	 * This is different to {@link setUp()}, which gets called once
	 * per method. Useful to initialize expensive operations which
	 * don\'t change state for any called method inside the test,
	 * e.g. dynamically adding an extension. See {@link tearDownOnce()}
	 * for tearing down the state again.
	 */",
 "/**
	 * tearDown method that\'s called once per test class rather once per test method.
	 */",
 "/**
	 * Get the ID of an object from the fixture.
	 * @param $className The data class, as specified in your fixture file.  Parent classes won\'t work
	 * @param $identifier The identifier string, as provided in your fixture file
	 * @return int
	 */",
 "/**
	 * Return all of the IDs in the fixture of a particular class name.
	 * Will collate all IDs form all fixtures if multiple fixtures are provided.
	 * 
	 * @param string $className
	 * @return A map of fixture-identifier => object-id
	 */",
 "/**
	 * Get an object from the fixture.
	 * @param $className The data class, as specified in your fixture file.  Parent classes won\'t work
	 * @param $identifier The identifier string, as provided in your fixture file
	 */",
 "/**
	 * Load a YAML fixture file into the database.
	 * Once loaded, you can use idFromFixture() and objFromFixture() to get items from the fixture.
	 * Doesn\'t clear existing fixtures.
	 *
	 * @param $fixtureFile The location of the .yml fixture file, relative to the site base dir
	 */",
 "/**
	 * Clear all fixtures which were previously loaded through
	 * {@link loadFixture()}.
	 */",
 "/**
	 * Clear the log of emails sent
	 */",
 "/**
	 * Search for an email that was sent.
	 * All of the parameters can either be a string, or, if they start with \"/\", a PREG-compatible regular expression.
	 * @param $to
	 * @param $from
	 * @param $subject
	 * @param $content
	 * @return An array containing the keys: \'type\',\'to\',\'from\',\'subject\',\'content\', \'plainContent\',\'attachedFiles\',\'customHeaders\',\'htmlContent\',inlineImages\'
	 */",
 "/**
	 * Assert that the matching email was sent since the last call to clearEmails()
	 * All of the parameters can either be a string, or, if they start with \"/\", a PREG-compatible regular expression.
	 * @param $to
	 * @param $from
	 * @param $subject
	 * @param $content
	 * @return An array containing the keys: \'type\',\'to\',\'from\',\'subject\',\'content\', \'plainContent\',\'attachedFiles\',\'customHeaders\',\'htmlContent\',inlineImages\'
	 */",
 "/**
	 * Assert that the given {@link DataObjectSet} includes DataObjects matching the given key-value
	 * pairs.  Each match must correspond to 1 distinct record.
	 * 
	 * @param $matches The patterns to match.  Each pattern is a map of key-value pairs.  You can
	 * either pass a single pattern or an array of patterns.
	 * @param $dataObjectSet The {@link DataObjectSet} to test.
	 *
	 * Examples
	 * --------
	 * Check that $members includes an entry with Email = sam@example.com:
	 *      $this->assertDOSContains(array(\'Email\' => \'...@example.com\'), $members); 
	 * 
	 * Check that $members includes entries with Email = sam@example.com and with 
	 * Email = ingo@example.com:
	 *      $this->assertDOSContains(array( 
	 *         array(\'Email\' => \'...@example.com\'), 
	 *         array(\'Email\' => \'i...@example.com\'), 
	 *      ), $members); 
	 */",
 "/**
	 * Assert that the given {@link DataObjectSet} includes only DataObjects matching the given 
	 * key-value pairs.  Each match must correspond to 1 distinct record.
	 * 
	 * @param $matches The patterns to match.  Each pattern is a map of key-value pairs.  You can
	 * either pass a single pattern or an array of patterns.
	 * @param $dataObjectSet The {@link DataObjectSet} to test.
	 *
	 * Example
	 * --------
	 * Check that *only* the entries Sam Minnee and Ingo Schommer exist in $members.  Order doesn\'t 
	 * matter:
	 *     $this->assertDOSEquals(array( 
	 *        array(\'FirstName\' =>\'Sam\', \'Surname\' => \'Minnee\'), 
	 *        array(\'FirstName\' => \'Ingo\', \'Surname\' => \'Schommer\'), 
	 *      ), $members); 
	 */",
 "/**
	 * Assert that the every record in the given {@link DataObjectSet} matches the given key-value
	 * pairs.
	 * 
	 * @param $match The pattern to match.  The pattern is a map of key-value pairs.
	 * @param $dataObjectSet The {@link DataObjectSet} to test.
	 *
	 * Example
	 * --------
	 * Check that every entry in $members has a Status of \'Active\':
	 *     $this->assertDOSAllMatch(array(\'Status\' => \'Active\'), $members); 
	 */",
 "/**
	 * Backported from PHPUnit 3.4 in order to maintain backwards
	 * compatibility: assertType() is deprecated in PHPUnit 3.5 (with PHP 5.2.7+),
	 * but as SilverStripe 2.3 and 2.4 support PHP 5.1 we can\'t require it.
	 */",
 "/**
	 * Helper function for the DOS matchers
	 */",
 "/**
	 * Helper function for the DOS matchers
	 */",
 "/**
	 * Returns true if we are currently using a temporary database
	 */",
 "/**
	 * @todo Make this db agnostic
	 */",
 "/**
	 * Remove all content from the temporary database.
	 */",
 "/**
	 * @todo Make this db agnostic
	 */",
 "/**
	 * Reset the testing database\'s schema.
	 * @param $includeExtraDataObjects If true, the extraDataObjects tables will also be included
	 */",
 "/**
	 * Create a member and group with the given permission code, and log in with it.
	 * Returns the member ID.
	 */",
 "/**
 * Test case class for the Sapphire framework.
 * Sapphire unit testing is based on PHPUnit, but provides a number of hooks into our data model that make it easier to work with.
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
 * Special field type for selecting and configuring widgets on a page.
 * @package cms
 * @subpackage content
 */",
 "/**
 * Simple wrapper to allow access to the live site via REST
 * 
 * @package sapphire
 * @subpackage integration
 */",
 "/** Build & cache the cache object */",
 "/** Clear the aggregate cache for a given type, or pass nothing to clear all aggregate caches */",
 "/**
	 * Constructor
	 * 
	 * @param string $type The DataObject type we are building an aggregate for
	 * @param string $filter (optional) An SQL filter to apply to the selected rows before calculating the aggregate
	 */",
 "/**
	 * Build the SQLQuery to calculate the aggregate
	 * This is a seperate function so that subtypes of Aggregate can change just this bit
	 * @param string $attr - the SQL field statement for selection (i.e. \"MAX(LastUpdated)\")
	 * @return SQLQuery
	 */",
 "/**
	 * Entry point for being called from a template.
	 * 
	 * This gets the aggregate function 
	 * 
	 */",
 "/**
	 * Entry point for being called from PHP.
	 */",
 "/**
 * Calculate an Aggregate on a particular field of a particular DataObject type (possibly with
 * an additional filter before the aggregate)
 * 
 * Implemented as a class to provide a semi-DSL method of calculating Aggregates. DataObject has a function
 * that will create & return an instance of this class with the DataObject type and filter set,
 * but at that point we don\'t yet know the aggregate function or field
 * 
 * This class captures any XML_val or unknown call, and uses that to get the field & aggregate function &
 * then return the result
 * 
 * Two ways of calling
 * 
 * $aggregate->XML_val(aggregate_function, array(field))     - For templates
 * $aggregate->aggregate_function(field)                     - For PHP
 * 
 * Aggregate functions are uppercased by this class, but are otherwise assumed to be valid SQL functions. Some
 * examples: Min, Max, Avg
 * 
 * Aggregates are often used as portions of a cacheblock key. They are therefore cached themselves, in the \'aggregate\'
 * cache, although the invalidation logic prefers speed over keeping valid data. 
 * The aggregate cache is cleared through {@link DataObject::flushCache()}, which in turn is called on
 * {@link DataObject->write()} and other write operations. 
 * This means most write operations to the database will invalidate the cache correctly.
 * Use {@link Aggregate::flushCache()} to manually clear.
 * 
 * NOTE: The cache logic uses tags, and so a backend that supports tags is required. Currently only the File
 * backend (and the two-level backend with the File backend as the slow store) meets this requirement
 * 
 * @author hfried
 * @package sapphire
 * @subpackage core
 */",
 "/**
	 * Constructor
	 * 
	 * @param DataObject $object The object that has_many somethings that we\'re calculating the aggregate for 
	 * @param string $relationship The name of the relationship
	 * @param string $filter (optional) An SQL filter to apply to the relationship rows before calculating the aggregate
	 */",
 "/**
 * A subclass of Aggregate that calculates aggregates for the result of a has_many query.
 * 
 * @author hfried
 * @package sapphire
 * @subpackage core
 */",
 "/**
     * Constructor
     *
     * @param  array   $options                Associative array of options
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Specific setter for the \'default_options\' option (with some additional tests)
     *
     * @param  array $options Associative array
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Set the deprecated contentTypeMemorization option
     *
     * @param boolean $value value
     * @return void
     * @deprecated
     */",
 "/**
     * Specific setter for the \'regexps\' option (with some additional tests)
     *
     * @param  array $options Associative array
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Start the cache
     *
     * @param  string  $id       (optional) A cache id (if you set a value here, maybe you have to use Output frontend instead)
     * @param  boolean $doNotDie For unit testing only !
     * @return boolean True if the cache is hit (false else)
     */",
 "/**
     * Cancel the current caching process
     */",
 "/**
     * callback for output buffering
     * (shouldn\'t really be called manually)
     *
     * @param  string $data Buffered output
     * @return string Data to send to browser
     */",
 "/**
     * Make an id depending on REQUEST_URI and superglobal arrays (depending on options)
     *
     * @return mixed|false a cache id (string), false if the cache should have not to be used
     */",
 "/**
     * Make a partial id depending on options
     *
     * @param  string $arrayName Superglobal array name
     * @param  bool   $bool1     If true, cache is still on even if there are some variables in the superglobal array
     * @param  bool   $bool2     If true, we have to use the content of the superglobal array to make a partial id
     * @return mixed|false Partial id (string) or false if the cache should have not to be used
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Frontend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Main BBCode parser method. This takes plain jane content and
	 * runs it through so many filters 
	 *
	 * @return Text
	 */",
 "/**
 * BBCode parser object.
 * Use on a text field in a template with $Content.Parse(BBCodeParser).
 * @package sapphire
 * @subpackage misc
 */",
 "/**
 * Classes that must be run daily extend this class.
 * 
 * Please note: Subclasses of this task aren\'t extecuted automatically,
 * they need to be triggered by an external automation tool like unix cron.
 * See {@link ScheduledTask} for details.
 * 
 * @todo Improve documentation
 * @package sapphire
 * @subpackage cron
 */",
 "/**
	 * Write the log message to the file path set
	 * in this writer.
	 */",
 "/**
 * Writes an error message to a file.
 * 
 * Note: You need to make sure your web server is able
 * to write to the file path that you specify to write
 * logs to.
 * 
 * @uses error_log() built-in PHP function.
 * @see SS_Log for more information on using writers.
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * @param String Classname
	 * @return boolean
	 */",
 "/**
 * Necessary to call setUpOnce() and tearDownOnce() on {@link SapphireTest}
 * classes. This feature doesn\'t exist in PHPUnit in the same way
 * (setUpBeforeClass() and tearDownAfterClass() are just called statically).
 * 
 * @see http://www.phpunit.de/manual/3.5/en/extending-phpunit.html#extending-phpunit.PHPUnit_Framework_TestListener
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
     * Class constructor
     *
     * @param  null|string  $format  Format specifier for log messages
     * @throws Zend_Log_Exception
     */",
 "/**
     * Formats data into a single line to be written by the writer.
     *
     * @param  array    $event    event data
     * @return string             formatted line to write to the log
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Formatter
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Simple.php 13208 2008-12-13 22:33:12Z thomas $
 */",
 "/**
	 * Return an Archive object for the given file.
	 */",
 "/**
 * Class for handling archives.
 * To implement a specific archive system, create a subclass of this abstract class, and amend the implementation of Archive::open().
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
     * Constructor
     *
     * @param  array $options Associative array of options
     * @throws Zend_Cache_Exception
     * @return void
     */",
 "/**
     * Test if a cache is available or not (for the given id)
     *
     * @param  string $id cache id
     * @return mixed|false (a cache is not available) or \"last modified\" timestamp (int) of the available cache record
     */",
 "/**
     * Save some string datas into a cache record
     *
     * Note : $data is always \"string\" (serialization is done by the
     * core not by the backend)
     *
     * @param  string $data            Datas to cache
     * @param  string $id              Cache id
     * @param  array $tags             Array of strings, the cache record will be tagged by each string entry
     * @param  int   $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @param  int   $priority         integer between 0 (very low priority) and 10 (maximum priority) used by some particular backends
     * @return boolean true if no problem
     */",
 "/**
     * Test if a cache is available for the given id and (if yes) return it (false else)
     *
     * Note : return value is always \"string\" (unserialization is done by the core not by the backend)
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @return string|false cached datas
     */",
 "/**
     * Remove a cache record
     *
     * @param  string $id Cache id
     * @return boolean True if no problem
     */",
 "/**
     * Clean some cache records
     *
     * Available modes are :
     * Zend_Cache::CLEANING_MODE_ALL (default)    => remove all cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_OLD              => remove too old cache entries ($tags is not used)
     * Zend_Cache::CLEANING_MODE_MATCHING_TAG     => remove cache entries matching all given tags
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_NOT_MATCHING_TAG => remove cache entries not {matching one of the given tags}
     *                                               ($tags can be an array of strings or a single string)
     * Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG => remove cache entries matching any given tags
     *                                               ($tags can be an array of strings or a single string)
     *
     * @param  string $mode Clean mode
     * @param  array  $tags Array of tags
     * @throws Zend_Cache_Exception
     * @return boolean true if no problem
     */",
 "/**
     * Return an array of stored cache ids
     *
     * @return array array of stored cache ids (string)
     */",
 "/**
     * Return an array of stored tags
     *
     * @return array array of stored tags (string)
     */",
 "/**
     * Return an array of stored cache ids which match given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which don\'t match given tags
     *
     * In case of multiple tags, a logical OR is made between tags
     *
     * @param array $tags array of tags
     * @return array array of not matching cache ids (string)
     */",
 "/**
     * Return an array of stored cache ids which match any given tags
     *
     * In case of multiple tags, a logical AND is made between tags
     *
     * @param array $tags array of tags
     * @return array array of any matching cache ids (string)
     */",
 "/**
     * Return the filling percentage of the backend storage
     *
     * @return int integer between 0 and 100
     */",
 "/**
     * Return an array of metadatas for the given cache id
     *
     * The array must include these keys :
     * - expire : the expire timestamp
     * - tags : a string array of tags
     * - mtime : timestamp of last modification time
     *
     * @param string $id cache id
     * @return array array of metadatas (false if the cache id is not found)
     */",
 "/**
     * Give (if possible) an extra lifetime to the given cache id
     *
     * @param string $id cache id
     * @param int $extraLifetime
     * @return boolean true if ok
     */",
 "/**
     * Return an associative array of capabilities (booleans) of the backend
     *
     * The array must include these keys :
     * - automatic_cleaning (is automating cleaning necessary)
     * - tags (are tags supported)
     * - expired_read (is it possible to read expired cache records
     *                 (for doNotTestCacheValidity option for example))
     * - priority does the backend deal with priority when saving
     * - infinite_lifetime (is infinite lifetime can work with this backend)
     * - get_list (is it possible to get the list of cache ids and the complete list of tags)
     *
     * @return array associative of with capabilities
     */",
 "/**
     * Prepare a serialized array to store datas and metadatas informations
     *
     * @param string $data data to store
     * @param int $lifetime original lifetime
     * @param int $priority priority
     * @return string serialize array to store into cache
     */",
 "/**
     * Compute and return the lifetime for the fast backend
     *
     * @param int $lifetime original lifetime
     * @param int $priority priority
     * @param int $maxLifetime maximum lifetime
     * @return int lifetime for the fast backend
     */",
 "/**
     * PUBLIC METHOD FOR UNIT TESTING ONLY !
     *
     * Force a cache record to expire
     *
     * @param string $id cache id
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Backend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Load the extra static definitions for the given extension
	 * class name, called by {@link Object::add_extension()}
	 * 
	 * @param string $class Class name of the owner class (or owner base class)
	 * @param string $extension Class name of the extension class
	 */",
 "/**
	 * Edit the given query object to support queries for this extension
	 *
	 * @param SQLQuery $query Query to augment.
	 */",
 "/**
	 * Update the database schema as required by this extension.
	 */",
 "/**
	 * Augment a write-record request.
	 *
	 * @param SQLQuery $manipulation Query to augment.
	 */",
 "/**
	 * Define extra database fields
	 *
	 * Return a map where the keys are db, has_one, etc, and the values are
	 * additional fields/relations to be defined.
	 *
	 * @return array Returns a map where the keys are db, has_one, etc, and
	 *               the values are additional fields/relations to be defined.
	 */",
 "/**
	 * This function is used to provide modifications to the form in the CMS
	 * by the decorator. By default, no changes are made. {@link DataObject->getCMSFields()}.
	 * 
	 * Please consider using {@link updateFormFields()} to globally add
	 * formfields to the record. The method {@link updateCMSFields()}
	 * should just be used to add or modify tabs, or fields which
	 * are specific to the CMS-context.
	 *
	 * Caution: Use {@link FieldSet->addFieldToTab()} to add fields.
	 *
	 * @param FieldSet $fields FieldSet with a contained TabSet
	 */",
 "/**
	 * This function is used to provide modifications to the form used
	 * for front end forms. {@link DataObject->getFrontEndFields()}
	 * 
	 * Caution: Use {@link FieldSet->push()} to add fields.
	 *
	 * @param FieldSet $fields FieldSet without TabSet nesting
	 */",
 "/**
	 * This is used to provide modifications to the form actions
	 * used in the CMS. {@link DataObject->getCMSActions()}.
	 *
	 * @param FieldSet $actions FieldSet
	 */",
 "/**
	 * this function is used to provide modifications to the summary fields in CMS
	 * by the decorator
	 * By default, the summaryField() of its owner will merge more fields defined in the decorator\'s
	 * $extra_fields[\'summary_fields\']
	 */",
 "/**
	 * this function is used to provide modifications to the fields labels in CMS
	 * by the decorator
	 * By default, the fieldLabels() of its owner will merge more fields defined in the decorator\'s
	 * $extra_fields[\'field_labels\']
	 */",
 "/**
	 * Clear any internal caches.
	 */",
 "/**
 * Plug-ins for additional functionality in your DataObjects.
 * 
 * Note: DataObjectDecorators are not actually Decorators in the GoF Design Patterns sense of the
 * word.  A better name for this class would be DataExtension.  However, in the interests of
 * backward compatibility we haven\'t renamed the class.
 *
 * @package sapphire
 * @subpackage model
 */",
 "/**
     *    Constructor. Parses URL into sections.
     *    @param string $url        Incoming URL.
     *    @access public
     */",
 "/**
     *    Extracts the X, Y coordinate pair from an image map.
     *    @param string $url   URL so far. The coordinates will be
     *                         removed.
     *    @return array        X, Y as a pair of integers.
     *    @access private
     */",
 "/**
     *    Extracts the scheme part of an incoming URL.
     *    @param string $url   URL so far. The scheme will be
     *                         removed.
     *    @return string       Scheme part or false.
     *    @access private
     */",
 "/**
     *    Extracts the username and password from the
     *    incoming URL. The // prefix will be reattached
     *    to the URL after the doublet is extracted.
     *    @param string $url    URL so far. The username and
     *                          password are removed.
     *    @return array         Two item list of username and
     *                          password. Will urldecode() them.
     *    @access private
     */",
 "/**
     *    Extracts the host part of an incoming URL.
     *    Includes the port number part. Will extract
     *    the host if it starts with // or it has
     *    a top level domain or it has at least two
     *    dots.
     *    @param string $url    URL so far. The host will be
     *                          removed.
     *    @return string        Host part guess or false.
     *    @access private
     */",
 "/**
     *    Extracts the path information from the incoming
     *    URL. Strips this path from the URL.
     *    @param string $url     URL so far. The host will be
     *                           removed.
     *    @return string         Path part or \'/\'.
     *    @access private
     */",
 "/**
     *    Strips off the request data.
     *    @param string $url  URL so far. The request will be
     *                        removed.
     *    @return string      Raw request part.
     *    @access private
     */",
 "/**
     *    Breaks the request down into an object.
     *    @param string $raw           Raw request.
     *    @return SimpleFormEncoding    Parsed data.
     *    @access private
     */",
 "/**
     *    Accessor for protocol part.
     *    @param string $default    Value to use if not present.
     *    @return string            Scheme name, e.g \"http\".
     *    @access public
     */",
 "/**
     *    Accessor for user name.
     *    @return string    Username preceding host.
     *    @access public
     */",
 "/**
     *    Accessor for password.
     *    @return string    Password preceding host.
     *    @access public
     */",
 "/**
     *    Accessor for hostname and port.
     *    @param string $default    Value to use if not present.
     *    @return string            Hostname only.
     *    @access public
     */",
 "/**
     *    Accessor for top level domain.
     *    @return string       Last part of host.
     *    @access public
     */",
 "/**
     *    Accessor for port number.
     *    @return integer    TCP/IP port number.
     *    @access public
     */",
 "/**
     *    Accessor for path.
     *    @return string    Full path including leading slash if implied.
     *    @access public
     */",
 "/**
     *    Accessor for page if any. This may be a
     *    directory name if ambiguious.
     *    @return            Page name.
     *    @access public
     */",
 "/**
     *    Gets the path to the page.
     *    @return string       Path less the page.
     *    @access public
     */",
 "/**
     *    Accessor for fragment at end of URL after the \"#\".
     *    @return string    Part after \"#\".
     *    @access public
     */",
 "/**
     *    Sets image coordinates. Set to false to clear
     *    them.
     *    @param integer $x    Horizontal position.
     *    @param integer $y    Vertical position.
     *    @access public
     */",
 "/**
     *    Accessor for horizontal image coordinate.
     *    @return integer        X value.
     *    @access public
     */",
 "/**
     *    Accessor for vertical image coordinate.
     *    @return integer        Y value.
     *    @access public
     */",
 "/**
     *    Accessor for current request parameters
     *    in URL string form. Will return teh original request
     *    if at all possible even if it doesn\'t make much
     *    sense.
     *    @return string   Form is string \"?a=1&b=2\", etc.
     *    @access public
     */",
 "/**
     *    Adds an additional parameter to the request.
     *    @param string $key            Name of parameter.
     *    @param string $value          Value as string.
     *    @access public
     */",
 "/**
     *    Adds additional parameters to the request.
     *    @param hash/SimpleFormEncoding $parameters   Additional
     *                                                parameters.
     *    @access public
     */",
 "/**
     *    Clears down all parameters.
     *    @access public
     */",
 "/**
     *    Gets the frame target if present. Although
     *    not strictly part of the URL specification it
     *    acts as similarily to the browser.
     *    @return boolean/string    Frame name or false if none.
     *    @access public
     */",
 "/**
     *    Attaches a frame target.
     *    @param string $frame        Name of frame.
     *    @access public
     */",
 "/**
     *    Renders the URL back into a string.
     *    @return string        URL in canonical form.
     *    @access public
     */",
 "/**
     *    Replaces unknown sections to turn a relative
     *    URL into an absolute one. The base URL can
     *    be either a string or a SimpleUrl object.
     *    @param string/SimpleUrl $base       Base URL.
     *    @access public
     */",
 "/**
     *    Replaces unknown sections of the path with base parts
     *    to return a complete absolute one.
     *    @param string/SimpleUrl $base       Base URL.
     *    @param string                       Absolute path.
     *    @access private
     */",
 "/**
     *    Simple test to see if a path part is relative.
     *    @param string $path        Path to test.
     *    @return boolean            True if starts with a \"/\".
     *    @access private
     */",
 "/**
     *    Extracts the username and password for use in rendering
     *    a URL.
     *    @return string/boolean    Form of username:password or false.
     *    @access public
     */",
 "/**
     *    Replaces . and .. sections of the path.
     *    @param string $path    Unoptimised path.
     *    @return string         Path with dots removed if possible.
     *    @access public
     */",
 "/**
     *    A pipe seperated list of all TLDs that result in two part
     *    domain names.
     *    @return string        Pipe separated list.
     *    @access public
     *    @static
     */",
 "/**
 *    URL parser to replace parse_url() PHP function which
 *    got broken in PHP 4.3.0. Adds some browser specific
 *    functionality such as expandomatics.
 *    Guesses a bit trying to separate the host from
 *    the path and tries to keep a raw, possibly unparsable,
 *    request string as long as possible.
 *    @package SimpleTest
 *    @subpackage WebTester
 */",
 "/**
     * Constructor
     *
     * @param  array $options Associative array of options
     * @return void
     */",
 "/**
     * Start the cache
     *
     * @param  string  $id                     Cache id
     * @param  boolean $doNotTestCacheValidity If set to true, the cache validity won\'t be tested
     * @param  boolean $echoData               If set to true, datas are sent to the browser if the cache is hit (simpy returned else)
     * @return mixed True if the cache is hit (false else) with $echoData=true (default) ; string else (datas)
     */",
 "/**
     * Stop the cache
     *
     * @param  array   $tags             Tags array
     * @param  int     $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @param  string  $forcedDatas      If not null, force written datas with this
     * @param  boolean $echoData         If set to true, datas are sent to the browser
     * @param  int     $priority         integer between 0 (very low priority) and 10 (maximum priority) used by some particular backends
     * @return void
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Frontend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Create a new data object, not yet in the database.  To load an object into the database, a null object should be constructed,
	 * its fields set, and the write() method called.
	 */",
 "/**
	 * Perform a search query on this data source
	 *
	 * @param $filter A filter expression of some kind, in SQL format.
	 * @param $sort A sort expression, in SQL format.
	 * @param $join A join expression.  May or may not be relevant.
	 * @param $limit A limit expression, either \"(count)\", or \"(start), (count)\"
	 */",
 "/**
	 * Retrieve a single record from this data source
	 *
	 * @param $filter A filter expression of some kind, in SQL format.
	 * @param $sort A sort expression, in SQL format.
	 * @param $join A join expression.  May or may not be relevant.
	 * @param $limit A limit expression, either \"(count)\", or \"(start), (count)\"
	 */",
 "/**
	 * Write the current object back to the database.  It should know whether this is a new object, in which case this would
	 * be an insert command, or if this is an existing object queried from the database, in which case thes would be 
	 */",
 "/**
	 * Remove this object from the database.  Doesn\'t do anything if this object isn\'t in the database.
	 */",
 "/**
	 * Get the named field.
	 * This function is sometimes called explicitly by the form system, so you need to define it, even if you use the
	 * default field system.
	 */",
 "/**
	 * Save content from a form into a field on this data object.
	 * Since the data comes straight from a form it can\'t be trusted and will need to be validated / escaped.\'
	 */",
 "/** 
 * DataObjectInterface is an interface that other data systems in your application can implement in order to behave in a manner
 * similar to DataObject.
 *
 * In addition to the methods defined below, the data of the object should be directly accessible as fields.
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * CreditCard field, contains validation and formspec for creditcard fields.
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * Finish the \"pre\" block in method content.
	 * Will remove whitespace and empty \"pre\" blocks
	 */",
 "/**
	 * Render the given token as HTML
	 */",
 "/**
 * Allows human reading of a test in a format suitable for agile documentation
 * 
 * @package sapphire
 * @subpackage tools
 */",
 "/**
	 * Constructor.
	 *
	 * @param $config Configuration name/value array.
	 */",
 "/**
	 * Simple loopback function everything that gets in will be send back.
	 *
	 * @param $args.. Arguments.
	 * @return {Array} Array of all input arguments. 
	 */",
 "/**
	 * Spellchecks an array of words.
	 *
	 * @param {String} $lang Language code like sv or en.
	 * @param {Array} $words Array of words to spellcheck.
	 * @return {Array} Array of misspelled words.
	 */",
 "/**
	 * Returns suggestions of for a specific word.
	 *
	 * @param {String} $lang Language code like sv or en.
	 * @param {String} $word Specific word to get suggestions for.
	 * @return {Array} Array of suggestions for the specified word.
	 */",
 "/**
	 * Throws an error message back to the user. This will stop all execution.
	 *
	 * @param {String} $str Message to send back to user.
	 */",
 "/**
 * $Id: editor_plugin_src.js 201 2007-02-12 15:56:56Z spocke $
 *
 * @author Moxiecode
 * @copyright Copyright ? 2004-2007, Moxiecode Systems AB, All rights reserved.
 */",
 "/**
	 * Pass each field to be validated as a seperate argument
	 * to the constructor of this object. (an array of elements are ok)
	 */",
 "/**
	 * Clears all the validation from this object.
	 */",
 "/**
	 * Debug helper
	 */",
 "/**
	* Allows validation of fields via specification of a php function for validation which is executed after
	* the form is submitted
	*/",
 "/**
	 * Add\'s a single required field to requiredfields stack
	 */",
 "/**
	 * allows you too add more required fields to this object after construction.
	 */",
 "/**
	 * Returns true if the named field is \"required\".
	 * Used by FormField to return a value for FormField::Required(), to do things like show *s on the form template.
	 */",
 "/**
	 * getter function for append
	 */",
 "/**
 * Required Fields allows you to set which fields
 * need to be present before submitting the form
 * Submit an array of arguments or each field as a
 * seperate argument. Validation is performed on a name by
 * name basis.
 *
 * @package forms
 * @subpackage validators
 */",
 "/**
	 * @return $query
	 */",
 "/**
 * Selects numerical/date content greater than the input
 *
 * @todo documentation
 * 
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Newlines for tokens defined in $newline_before_tokens.
	 * Case-sensitive, only applies to uppercase SQL to avoid
	 * messing with possible content fragments in the query.
	 */",
 "/**
 * Format a SQL Query for better readable output in HTML or Plaintext.
 * Its a simple string parser, not a full tokenizer - so formatting
 * is not aware of the SQL syntax. This means we have to be conservative
 * with modifying the SQL string.
 *
 * @package sapphire
 * @subpackage parsers
 * @author Ingo Schommer, Silverstripe Ltd. (<firstname>@silverstripe.com)
 */",
 "/**
 * Filters by full-text matching on the given field.
 *
 * Full-text indexes are only available with MyISAM tables. The following column types are
 * supported:
 *   - Char
 *   - Varchar
 *   - Text
 *
 * To enable full-text matching on fields, you also need to add an index to the
 * database table, using the {$indexes} hash in your DataObject subclass:
 * 
 * <code>
 *   static $indexes = array(
 *      \'SearchFields\' => \'fulltext(Name, Title, Description)\'
 *   );
 * </code>
 *
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Ensure that the database function for connectivity is available.
	 * If it is, we assume the PHP module for this database has been setup correctly.
	 * 
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return boolean
	 */",
 "/**
	 * Ensure that the database server exists.
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return array Result - e.g. array(\'success\' => true, \'error\' => \'details of error\')
	 */",
 "/**
	 * Get the database version for the MySQL connection, given the
	 * database parameters.
	 * @return mixed string Version number as string | boolean FALSE on failure
	 */",
 "/**
	 * Ensure that the MySQL server version is at least 5.0.
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return array Result - e.g. array(\'success\' => true, \'error\' => \'details of error\')
	 */",
 "/**
	 * Ensure a database connection is possible using credentials provided.
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return array Result - e.g. array(\'success\' => true, \'error\' => \'details of error\')
	 */",
 "/**
	 * Ensure that the database connection is able to use an existing database,
	 * or be able to create one if it doesn\'t exist.
	 * 
	 * @param array $databaseConfig Associative array of db configuration, e.g. \"server\", \"username\" etc
	 * @return array Result - e.g. array(\'success\' => true, \'alreadyExists\' => \'true\')
	 */",
 "/**
 * This is a helper class for the SS installer.
 * 
 * It does all the specific checking for MySQLDatabase
 * to ensure that the configuration is setup correctly.
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Returns an input field, class=\"text\" and type=\"text\" with an optional maxlength
	 */",
 "/**
	 * @param Int $length
	 */",
 "/**
	 * @return Int
	 */",
 "/**
 * Text input field.
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
	 * Returns all the sub-fields, suitable for <% control FieldSet %>
	 */",
 "/**
	 * Accessor method for $this->children
	 * @return FieldSet
	 */",
 "/**
	 * @param FieldSet $children
	 */",
 "/**
	 * Returns the fields nested inside another DIV
	 */",
 "/**
	 * Returns the fields in the restricted field holder inside a DIV.
	 */",
 "/**
	 * Add all of the non-composite fields contained within this field to the list.
	 * Sequentialisation is used when connecting the form to its data source
	 */",
 "/**
	 * Add a new child field to the end of the set.
	 */",
 "/**
	 * @uses FieldSet->insertBefore()
	 */",
 "/**
	 * Remove a field from this CompositeField by Name.
	 * The field could also be inside a CompositeField.
	 * 
	 * @param string $fieldName The name of the field
	 * @param boolean $dataFieldOnly If this is true, then a field will only
	 * be removed if it\'s a data field.  Dataless fields, such as tabs, will
	 * be left as-is.
	 */",
 "/**
	 * Return a readonly version of this field.  Keeps the composition but returns readonly
	 * versions of all the children
	 */",
 "/**
	 * Return a readonly version of this field.  Keeps the composition but returns readonly
	 * versions of all the children
	 */",
 "/**
	 * Find the numerical position of a field within
	 * the children collection. Doesn\'t work recursively.
	 * 
	 * @param string|FormField
	 * @return Position in children collection (first position starts with 0). Returns FALSE if the field can\'t be found.
	 */",
 "/**
	 * Transform the named field into a readonly feld.
	 * 
	 * @param string|FormField
	 */",
 "/**
 * Base class for all fields that contain other fields.
 * Implements sequentialisation - so that when we\'re saving / loading data, we can populate
 * a tabbed form properly.  All of the children are stored in $this->children
 * @package forms
 * @subpackage fields-structural
 */",
 "/**
 * Light wrapper around {@link PHPUnit_Framework_TestSuite}
 * which allows to have {@link setUp()} and {@link tearDown()}
 * methods which are called just once per suite, not once per
 * test method in each suite/case.
 * 
 * @package sapphire
 * @subpackage testing
 */",
 "/**
	 * Render HTML header for development views
	 */",
 "/**
	 * Render HTML footer for development views
	 */",
 "/**
	 * Write information about the error to the screen
	 */",
 "/**
	 * Write a fragment of the a source file
	 * @param $lines An array of file lines; the keys should be the original line numbers
	 */",
 "/**
	 * Write a backtrace
	 */",
 "/**
	 * Render the information header for the view
	 * 
	 * @param string $title
	 * @param string $title
	 */",
 "/**
 * A basic HTML wrapper for stylish rendering of a developement info view.
 * Used to output error messages, and test results.
 * 
 * @package sapphire
 * @subpackage dev
 * 
 * @todo Perhaps DebugView should be an interface / ABC, implemented by HTMLDebugView and CliDebugView?
 */",
 "/**
 * Action that clears all fields on a form.
 * Inserts an input tag with type=reset.
 * @package forms
 * @subpackage actions
 */",
 "/**
	 * Send a plain-text email.
	 * TestMailer will merely record that the email was asked to be sent, without sending anything.
	 */",
 "/**
	 * Send a multi-part HTML email
	 * TestMailer will merely record that the email was asked to be sent, without sending anything.
	 */",
 "/**
	 * Clear the log of emails sent
	 */",
 "/**
	 * Search for an email that was sent.
	 * All of the parameters can either be a string, or, if they start with \"/\", a PREG-compatible regular expression.
	 * @param $to
	 * @param $from
	 * @param $subject
	 * @param $content
	 * @return An array containing the keys: \'type\',\'to\',\'from\',\'subject\',\'content\', \'plainContent\',\'attachedFiles\',\'customHeaders\',\'htmlContent\',inlineImages\'
	 */",
 "/**
 * @package sapphire
 * @subpackage email
 */",
 "/**
	 * Set the owner of this decorator.
	 * @param Object $owner The owner object,
	 * @param string $ownerBaseClass The base class that the extension is applied to; this may be
	 * the class of owner, or it may be a parent.  For example, if Versioned was applied to SiteTree,
	 * and then a Page object was instantiated, $owner would be a Page object, but $ownerBaseClass
	 * would be \'SiteTree\'.
	 */",
 "/**
	 * Returns the owner of this decorator
	 *
	 * @return Object
	 */",
 "/**
	 * Helper method to strip eval\'ed arguments from a string
	 * thats passed to {@link DataObject::$extensions} or 
	 * {@link Object::add_extension()}.
	 * 
	 * @param string $extensionStr E.g. \"Versioned(\'Stage\',\'Live\')\"
	 * @return string Extension classname, e.g. \"Versioned\"
	 */",
 "/**
 * Add extension that can be added to an object with {@link Object::add_extension()}.
 * For {@link DataObject} extensions, use {@link DataObjectDecorator}.
 * Each extension instance has an \"owner\" instance, accessible through
 * {@link getOwner()}.
 * Every object instance gets its own set of extension instances,
 * meaning you can set parameters specific to the \"owner instance\"
 * in new Extension instances.
 *
 * @package sapphire
 * @subpackage core
 */",
 "/**
 * Formats SS error emails with a basic layout.
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
     * Factory
     *
     * @param mixed  $frontend        frontend name (string) or Zend_Cache_Frontend_ object
     * @param mixed  $backend         backend name (string) or Zend_Cache_Backend_ object
     * @param array  $frontendOptions associative array of options for the corresponding frontend constructor
     * @param array  $backendOptions  associative array of options for the corresponding backend constructor
     * @param boolean $customFrontendNaming if true, the frontend argument is used as a complete class name ; if false, the frontend argument is used as the end of \"Zend_Cache_Frontend_[...]\" class name
     * @param boolean $customBackendNaming if true, the backend argument is used as a complete class name ; if false, the backend argument is used as the end of \"Zend_Cache_Backend_[...]\" class name
     * @param boolean $autoload if true, there will no require_once for backend and frontend (usefull only for custom backends/frontends)
     * @throws Zend_Cache_Exception
     * @return Zend_Cache_Core|Zend_Cache_Frontend
     */",
 "/**
     * Frontend Constructor
     *
     * @param string  $backend
     * @param array   $backendOptions
     * @param boolean $customBackendNaming
     * @param boolean $autoload
     * @return Zend_Cache_Backend
     */",
 "/**
     * Backend Constructor
     *
     * @param string  $frontend
     * @param array   $frontendOptions
     * @param boolean $customFrontendNaming
     * @param boolean $autoload
     * @return Zend_Cache_Core|Zend_Cache_Frontend
     */",
 "/**
     * Throw an exception
     *
     * Note : for perf reasons, the \"load\" of Zend/Cache/Exception is dynamic
     * @param  string $msg  Message for the exception
     * @throws Zend_Cache_Exception
     */",
 "/**
     * Normalize frontend and backend names to allow multiple words TitleCased
     *
     * @param  string $name  Name to normalize
     * @return string
     */",
 "/**
     * Returns TRUE if the $filename is readable, or FALSE otherwise.
     * This function uses the PHP include_path, where PHP\'s is_readable()
     * does not.
     *
     * Note : this method comes from Zend_Loader (see #ZF-2891 for details)
     *
     * @param string   $filename
     * @return boolean
     */",
 "/**
 * @package    Zend_Cache
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Set the default image quality.
	 * @param quality int A number from 0 to 100, 100 being the best quality.
	 */",
 "/**
	 * Set the image quality, used when saving JPEGs.
	 */",
 "/**
	 * Resize an image to cover the given width/height completely, and crop off any overhanging edges.
	 */",
 "/**
	 * Resizes the image to fit within the given region.
	 * Behaves similarly to paddedResize but without the padding.
	 * @todo This method isn\'t very efficent
	 */",
 "/**
	 * Resize an image, skewing it as necessary.
	 */",
 "/**
	 * Rotates image by given angle.
	 * 
	 * @param angle 
	 *
	 * @return GD 
	*/",
 "/**
     * Rotates image by given angle. It\'s slow because makes it pixel by pixel rather than
     * using built-in function. Used when imagerotate function is not available(i.e. Ubuntu)
     * 
     * @param angle 
     *
     * @return GD 
    */",
 "/**
	 * Crop\'s part of image.
	 * 
	 * @param top y position of left upper corner of crop rectangle 
	 * @param left x position of left upper corner of crop rectangle
	 * @param width rectangle width
	 * @param height rectangle height
	 *
	 * @return GD  
	*/",
 "/**
	 * Method return width of image.
	 *
	 * @return integer width.
	*/",
 "/**
	 * Method return height of image.
	 *
	 * @return integer height 
	*/",
 "/**
	 * Resize an image by width. Preserves aspect ratio.
	 */",
 "/**
	 * Resize an image by height. Preserves aspect ratio
	 */",
 "/**
	 * Resize the image by preserving aspect ratio. By default, it will keep the image inside the maxWidth and maxHeight
	 * Passing useAsMinimum will make the smaller dimension equal to the maximum corresponding dimension
	 */",
 "/**
	 * Resize to fit fully within the given box, without resizing.  Extra space left around
	 * the image will be padded with the background color.
     * @param width
     * @param height
     * @param backgroundColour
	 */",
 "/**
	 * Make the image greyscale
	 * $rv = red value, defaults to 38
	 * $gv = green value, defaults to 36
	 * $bv = blue value, defaults to 26
	 * Based (more or less entirely, with changes for readability) on code from http://www.teckis.com/scriptix/thumbnails/teck.html
	 */",
 "/**
 * A wrapper class for GD-based images, with lots of manipulation functions.
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
 * A PermissionRoleCode represents a single permission code assigned to a {@link PermissionRole}.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**

*









*




*/",
 "/**

*



*/",
 "/**

*


*/",
 "/**

*


*/",
 "/**

*



*/",
 "/**

*







*




*/",
 "/**

*



*


*






*/",
 "/**
     * Builds a tag from the input string
     *
     * This method builds a tag array based on the string it got as an
     * argument. If the tag is invalid, <false> is returned. The tag
     * attributes are extracted from the string and stored in the tag
     * array as an associative array.
     *
     * @param    string          string to build tag from
     * @return   array           tag in array format
     * @access   private
     * @see      _buildTagArray()
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Validates the tag array, regarding the allowed tags
     *
     * While looping through the tag array, two following text tags are
     * joined, and it is checked that the tag is allowed inside the
     * last opened tag.
     * By remembering what tags have been opened it is checked that
     * there is correct (xml compliant) nesting.
     * In the end all still opened tags are closed.
     *
     * @return   none
     * @access   private
     * @see      _isAllowed()
     * @see      $_tagArray
     * @author   Stijn de Reede  <sjr@gmx.co.uk>, Seth Price <seth@pricepages.org>
     */",
 "/**
     * Checks to see if a parent is needed
     *
     * Checks to see if the current $in tag has an appropriate parent. If it
     * does, then it returns false. If a parent is needed, then it returns the
     * first tag in the list to add to the stack.
     *
     * @param    array           tag that is on the outside
     * @param    array           tag that is on the inside
     * @return   boolean         false if not needed, tag if needed, true if out
     *                           of  our minds
     * @access   private
     * @see      _validateTagArray()
     * @author   Seth Price <seth@pricepages.org>
     */",
 "/**
     * Checks to see if a child is needed
     *
     * Checks to see if the current $out tag has an appropriate child. If it
     * does, then it returns false. If a child is needed, then it returns the
     * first tag in the list to add to the stack.
     *
     * @param    array           tag that is on the outside
     * @param    array           tag that is on the inside
     * @return   boolean         false if not needed, tag if needed, true if out
     *                           of our minds
     * @access   private
     * @see      _validateTagArray()
     * @author   Seth Price <seth@pricepages.org>
     */",
 "/**
     * Checks to see if a tag is allowed inside another tag
     *
     * The allowed tags are extracted from the private _definedTags array.
     *
     * @param    array           tag that is on the outside
     * @param    array           tag that is on the inside
     * @return   boolean         return true if the tag is allowed, false
     *                           otherwise
     * @access   private
     * @see      _validateTagArray()
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Builds a parsed string based on the tag array
     *
     * The correct html and attribute values are extracted from the private
     * _definedTags array.
     *
     * @return   none
     * @access   private
     * @see      $_tagArray
     * @see      $_parsed
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Sets text in the object to be parsed
     *
     * @param    string          the text to set in the object
     * @return   none
     * @access   public
     * @see      getText()
     * @see      $_text
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Gets the unparsed text from the object
     *
     * @return   string          the text set in the object
     * @access   public
     * @see      setText()
     * @see      $_text
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Gets the preparsed text from the object
     *
     * @return   string          the text set in the object
     * @access   public
     * @see      _preparse()
     * @see      $_preparsed
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Gets the parsed text from the object
     *
     * @return   string          the parsed text set in the object
     * @access   public
     * @see      parse()
     * @see      $_parsed
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Parses the text set in the object
     *
     * @return   none
     * @access   public
     * @see      _preparse()
     * @see      _buildTagArray()
     * @see      _validateTagArray()
     * @see      _buildParsedString()
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Quick method to do setText(), parse() and getParsed at once
     *
     * @return   none
     * @access   public
     * @see      parse()
     * @see      $_text
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
     * Quick static method to do setText(), parse() and getParsed at once
     *
     * @return   none
     * @access   public
     * @see      parse()
     * @see      $_text
     * @author   Stijn de Reede  <sjr@gmx.co.uk>
     */",
 "/**
 * @package  sapphire
 * @subpackage misc
 * @author   Stijn de Reede  <sjr@gmx.co.uk> , SilverStripe
 *
 *
 * This is a parser to replace UBB style tags with their html equivalents. It
 * does not simply do some regex calls, but is complete stack based
 * parse engine. This ensures that all tags are properly nested, if not,
 * extra tags are added to maintain the nesting. This parser should only produce
 * xhtml 1.0 compliant code. All tags are validated and so are all their attributes.
 * It should be easy to extend this parser with your own tags, see the _definedTags
 * format description below.
 *
 *
 * Usage:
 * $parser = new SSHTMLBBCodeParser();
 * $parser->setText(\'normal [b]bold[/b] and normal again\');
 * $parser->parse();
 * echo $parser->getParsed();
 * or:
 * $parser = new SSHTMLBBCodeParser();
 * echo $parser->qparse(\'normal [b]bold[/b] and normal again\');
 * or:
 * echo SSHTMLBBCodeParser::staticQparse(\'normal [b]bold[/b] and normal again\');
 *
 *
 * Setting the options from the ini file:
 * $config = parse_ini_file(\'BBCodeParser.ini\', true);
 *  $options = &PEAR::getStaticProperty(\'SSHTMLBBCodeParser\', \'_options\');
 * $options = $config[\'SSHTMLBBCodeParser\'];
 * unset($options);
 */",
 "/**
	 * @return FieldSet
	 */",
 "/**
	 * @see SecurityAdmin_MemberImportForm
	 * 
	 * @return Form
	 */",
 "/**
	 * @see SecurityAdmin_MemberImportForm
	 * 
	 * @return Form
	 */",
 "/**
	 * Ajax autocompletion
	 */",
 "/**
	 * Return the entire site tree as a nested set of ULs.
	 * @return string Unordered list HTML
	 */",
 "/**
	 * The permissions represented in the $codes will not appearing in the form
	 * containing {@link PermissionCheckboxSetField} so as not to be checked / unchecked.
	 * 
	 * @param $codes String|Array
	 */",
 "/**
	 * @param $codes String|Array
	 */",
 "/**
	 * @return Array
	 */",
 "/**
	 * Clear all permissions previously hidden with {@link add_hidden_permission}
	 */",
 "/**
 * Security section of the CMS
 * @package cms
 * @subpackage security
 */",
 "/**
	 * Send an email to the email address set in
	 * this writer.
	 */",
 "/**
 * Sends an error message to an email.
 * 
 * @see SS_Log for more information on using writers.
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Returns the name (ID) for the element.
	 * In some cases the FieldGroup doesn\'t have a title, but we still want 
	 * the ID / name to be set. This code, generates the ID from the nested children
	 */",
 "/**
	 * Returns a set of <span class=\"subfield\"> tags, each containing a sub-field.
	 * You can also use <% control FieldSet %>, if you\'d like more control over the generated HTML
	 * 
	 * @todo Shouldn\'t use SmallFieldHolder() (very difficult to style), 
	 * it is easier to overwrite the <div class=\"field\"> behaviour in a more specific class
	 */",
 "/**
	 * Set an odd/even class
	 */",
 "/**
	 * This allows fields within this fieldgroup to still allow them to get valuated.
	 */",
 "/**
 * Lets you include a nested group of fields inside a template.
 * This control gives you more flexibility over form layout.
 * 
 * Note: the child fields within a field group aren\'t rendered using FieldHolder().  Instead,
 * SmallFieldHolder() is called, which just prefixes $Field with a <label> tag, if the Title is set.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * new FieldGroup(
 * 	new FieldGroup(
 * 		new HeaderField(\'FieldGroup 1\'),
 * 		new TextField(\'Firstname\')
 * 	),
 * 	new FieldGroup(
 * 		new HeaderField(\'FieldGroup 2\'),
 * 		new TextField(\'Surname\')
 * 	)
 * )
 * </code>
 * 
 * <b>Adding to existing FieldGroup instances</b>
 * 
 * <code>
 * function getCMSFields() {
 * 	$fields = parent::getCMSFields();
 * 	
 * 	$fields->addFieldToTab(
 * 		\'Root.Content.Main\', 
 * 		new FieldGroup(
 * 			new TimeField(\"StartTime\",\"What\'s the start time?\"),
 * 			new TimeField(\"EndTime\",\"What\'s the end time?\")
 * 		),
 * 		\'Content\'
 * 	);	
 * 	
 * 	return $fields;
 * 		
 * }
 * </code>
 * 
 * @package forms
 * @subpackage fields-structural
 */",
 "/**
 * XML Class handles parsing xml data within SilverStripe. For reading a RESTFul Service such as flickr or last.fm you should use RestfulService which provides a nicer interface to managing external RSS Feeds. 
 * 
 * 
 * <b>Building XML parsers with the XML class</b>
 * 
 * To use the XML parser, you need to create a subclass.  Then you define process_XXX functions to process different tags.  The parser walks sequentially through the file and calls the process_XXX functions when it hits different tags.
 * 
 *   * **process_(tagname):** This will be called when the parser finds the start tag.  It will be passed the attributes of the tag.
 *   * **process_(tagname)_end:** This will be called when the parser finds the closng tag.  It will be passed the attributes and the content of the tag.
 *   
 *   * **process_tag :** This will be called if it is implemented and a method has not been created already for the tag being parsed. It is passed the tag name and attributes of the tag.
 * 
 *   * **process_tag_end:** This will be called if it is implemented and a method has not been created already for the tag being parsed. It is passed the tag name, the content of the tag and the attributes of the tag.
 * 
 * 
 * The idea is that within this function, you build up $this->result with a useful representation of the XML data.  It could be an array structure, an object, or something else.
 * 
 * There are a couple of methods on the XML object that will help with 
 * 
 *   * **$this->inContext(\'(tag)\', \'(tag).(class)\'):** This will return true if the current tag has the specified tags as ancestors, in the order that you\'ve specified.
 * 
 * Finally, there are public methods that can be called on an instantiated XML subclass.  This is how you will make use of your new parser.
 * 
 *   * **$parser->tidyXHTML($content):** This will run \"tidy -asxhtml\" on your content.  This is useful if you\'re wanting to use the XML parser to parse HTML that may or may not be XML compliant.
 *   * **$parser->parse($content):** This will call the parser on the given XML content, and return the $this->result object that gets built.
 * 
 * <b>Example</b>
 * 
 * <code>
 * class DeliciousHtmlParser extends XML {
 * 	protected $currentItem = 0;
 * 	
 * 	function process_li($attributes) {
 * 		if($attributes[\'class\'] == \"post\") {
 * 			$this->currentItem = sizeof($this->parsed);
 * 		}
 * 	}
 * 	
 * 	function process_a_end($content, $attributes) {
 * 		if($this->inContext(\'li.post\',\'h4.desc\')) {
 * 			$this->parsed[$this->currentItem][link] = $attributes[href];
 * 			$this->parsed[$this->currentItem][title] = $content;
 * 		
 * 		} else if($this->inContext(\'li.post\',\'div.meta\') && $attributes[\'class\'] == \'tag\') {
 * 			$this->parsed[$this->currentItem][tags][] = $content;
 * 		}
 * 	}
 * }
 * 
 * $html = file_get_contents(\"http://del.icio.us/$user/?setcount=100\");
 * $parser = new DeliciousHtmlParser();
 * $tidyHtml = $parser->tidyXHTML($html);
 * $result = $parser->parse($tidyHtml);
 * </code>
 * 
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * Passed $content, return HTML that has been tidied.
	 * @return string $content HTML, tidied
	 */",
 "/**
 * Base class for HTML cleaning classes.
 * 
 * @package sapphire
 * @subpackage misc
 */",
 "/**
 * Matches on rows where the field is not equal to the given value.
 * 
 * @package sapphire
 * @subpackage search
 */",
 "/**
 * Rewrites plain internal HTML links into shortcode form, using existing link tracking information.
 *
 * @package sapphire
 * @subpackage tasks
 */",
 "/**
	 *
	 * @param boolean $includerelations a boolean value to indicate if the labels returned include relation fields
	 * 
	 */",
 "/**
 * Record all login attempts through the {@link LoginForm} object.
 * This behaviour is disabled by default.
 *
 * Enable through a setting in your _config.php:
 * <code>
 * Security::set_login_recording(true);
 * </code>
 * 
 * Caution: Please make sure that enabling logging
 * complies with your privacy standards. We\'re logging
 * username and IP.
 * 
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Spellchecks an array of words.
	 *
	 * @param String $lang Selected language code (like en_US or de_DE). Shortcodes like \"en\" and \"de\" work with enchant >= 1.4.1
	 * @param Array $words Array of words to check.
	 * @return Array of misspelled words.
	 */",
 "/**
	 * Returns suggestions for a specific word.
	 *
	 * @param String $lang Selected language code (like en_US or de_DE). Shortcodes like \"en\" and \"de\" work with enchant >= 1.4.1
	 * @param String $word Specific word to get suggestions for.
	 * @return Array of suggestions for the specified word.
	 */",
 "/**
 * $Id: editor_plugin_src.js 201 2007-02-12 15:56:56Z spocke $
 *
 * This class was contributed by Michel Weimerskirch.
 *
 * @author Moxiecode
 * @copyright Copyright ? 2004-2007, Moxiecode Systems AB, All rights reserved.
 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @param string $name - Name of field
	 * @return FormField
	 */",
 "/**
	 * 30/06/2009 - Enhancement: 
	 * SaveInto checks if set-methods are available and use them 
	 * instead of setting the values in the money class directly. saveInto
	 * initiates a new Money class object to pass through the values to the setter
	 * method.
	 *
	 * (see @link MoneyFieldTest_CustomSetter_Object for more information)
	 */",
 "/**
	 * Returns a readonly version of this field.
	 */",
 "/**
	 * @todo Implement removal of readonly state with $bool=false
	 * @todo Set readonly state whenever field is recreated, e.g. in setAllowedCurrencies()
	 */",
 "/**
	 * @param array $arr
	 */",
 "/**
	 * @return array
	 */",
 "/**
 * @author Ingo Schommer, SilverStripe Ltd. (<firstname>@silverstripe.com)
 * 
 * @package sapphire
 * @subpackage fields-formattedinput
 */",
 "/**
	 * Add content inside a button field.
	 */",
 "/**
	 * Create a new action button.
	 * @param action The method to call when the button is clicked
	 * @param title The label on the button
	 * @param form The parent form, auto-set when the field is placed inside a form 
	 * @param extraData A piece of extra data that can be extracted with $this->extraData.  Useful for
	 *                  calling $form->buttonClicked()->extraData()
	 * @param extraClass A CSS class to apply to the button in addition to \'action\'
	 */",
 "/**
	 * Set the full action name, including action_
	 * This provides an opportunity to replace it with something else
	 */",
 "/**
	 * Create a submit input, or button tag
	 * using {@link FormField->createTag()} functionality.
	 * 
	 * @return HTML code for the input OR button element
	 */",
 "/**
	 * Does not transform to readonly by purpose.
	 * Globally disabled buttons would break the CMS.
	 */",
 "/**
 * Single action button.
 * The action buttons are <input type=\"submit\"> tags.
 * 
 * <b>Usage</b>
 * 
 * Upon clicking the button below will redirect the user to doAction under the current controller.
 * 
 * <code>
 * new FormAction (
 *    // doAction has to be a defined controller member
 *    $action = \"doAction\",
 *    $title = \"Submit button\"
 * )
 * </code>
 * 
 * <b>Labels</b>
 * 
 * By default, FormAction will use the title as the label for the left margin.  This can look redundant on the form.  If you\'d rather have just the button alone with as pictured above try using {@link FormAction_WithoutLabel} instead.
 * 
 * @package forms
 * @subpackage actions
 */",
 "/**
 * @package forms
 * @subpackage actions
 */",
 "/**
 * Identify the cli-script.php file and change to its container directory, so that require_once() works
 */",
 "/**
	 * @param string $name
	 * @param DataOject $object The object that this is primary key for (should have a relation with $name)
	 */",
 "/**
 * A special type Int field used for primary keys.
 * 
 * @todo Allow for custom limiting/filtering of scaffoldFormField dropdown
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Send a plain-text email.
	 *  
	 * @param string $to
	 * @param string $from
	 * @param string ??subject
	 * @param string $plainContent
	 * @param bool $attachedFiles
	 * @param array $customheaders
	 * @return bool
	 */",
 "/**
	 * Send a multi-part HTML email.
	 * 
	 * @return bool
	 */",
 "/**
 * Mailer objects are responsible for actually sending emails.
 * The default Mailer class will use PHP\'s mail() function.
 * 
 * @package sapphire
 * @subpackage email
 */",
 "/**
 * Encode the contents of a file for emailing, including headers
 * 
 * $file can be an array, in which case it expects these members:
 *   \'filename\'        - the filename of the file
 *   \'contents\'        - the raw binary contents of the file as a string
 *  and can optionally include these members:
 *   \'mimetype\'        - the mimetype of the file (calculated from filename if missing)
 *   \'contentLocation\' - the \'Content-Location\' header value for the file
 *   
 * $file can also be a string, in which case it is assumed to be the filename
 * 
 * h5. contentLocation
 * 
 * Content Location is one of the two methods allowed for embedding images into an html email. It\'s also the simplest, and best supported
 * 
 * Assume we have an email with this in the body:
 * 
 *   <img src=\"http://example.com/image.gif\" />
 * 
 * To display the image, an email viewer would have to download the image from the web every time it is displayed. Due to privacy issues, most
 * viewers will not display any images unless the user clicks \'Show images in this email\'. Not optimal.
 * 
 * However, we can also include a copy of this image as an attached file in the email. By giving it a contentLocation of \"http://example.com/image.gif\"
 * most email viewers will use this attached copy instead of downloading it. Better, most viewers will show it without a \'Show images in this email\'
 * conformation.
 * 
 * Here is an example of passing this information through Email.php:
 * 
 *   $email = new Email();
 *   $email->attachments[] = array(
 *     \'filename\' => BASE_PATH . \"/themes/mytheme/images/header.gif\",
 *     \'contents\' => file_get_contents(BASE_PATH . \"/themes/mytheme/images/header.gif\"),
 *     \'mimetype\' => \'image/gif\',
 *     \'contentLocation\' => Director::absoluteBaseURL() . \"/themes/mytheme/images/header.gif\"
 *   );
 * 
 */",
 "/**
	 * Create a new action button.
	 * @param action The method to call when the button is clicked
	 * @param title The label on the button
	 * @param extraClass A CSS class to apply to the button in addition to \'action\'
	 */",
 "/**
	 * Optionally disable the default javascript include (sapphire/javascript/InlineFormAction.js),
	 * which routes to an \"admin-custom\"-URL.
	 * 
	 * @param $bool boolean
	 */",
 "/**
 * Render a button that will submit the form its contained in through ajax.
 * If you want to add custom behaviour, please set {@link inlcudeDefaultJS()} to FALSE and work with behaviour.js.
 * 
 * @see sapphire/javascript/InlineFormAction.js
 * 
 * @package forms
 * @subpackage actions
 */",
 "/**
 * Readonly version of {@link InlineFormAction}.
 * @package forms
 * @subpackage actions
 */",
 "/**
	 * Get the logger currently in use, or create a new
	 * one if it doesn\'t exist.
	 * 
	 * @return object
	 */",
 "/**
	 * Get all writers in use by the logger.
	 * @return array Collection of Zend_Log_Writer_Abstract instances
	 */",
 "/**
	 * Remove all writers currently in use.
	 */",
 "/**
	 * Remove a writer instance from the logger.
	 * @param object $writer Zend_Log_Writer_Abstract instance
	 */",
 "/**
	 * Add a writer instance to the logger.
	 * @param object $writer Zend_Log_Writer_Abstract instance
	 * @param const $priority Priority. Possible values: SS_Log::ERR, SS_Log::WARN or SS_Log::NOTICE
	 * @param $comparison Priority comparison operator.  Acts on the integer values of the error
	 * levels, where more serious errors are lower numbers.  By default this is \"=\", which means only
	 * the given priority will be logged.  Set to \"<=\" if you want to track errors of *at least* 
	 * the given priority.
	 */",
 "/**
	 * Dispatch a message by priority level.
	 * 
	 * The message parameter can be either a string (a simple error
	 * message), or an array of variables. The latter is useful for passing
	 * along a list of debug information for the writer to handle, such as
	 * error code, error line, error context (backtrace).
	 * 
	 * @param mixed $message Exception object or array of error context variables
	 * @param const $priority Priority. Possible values: SS_Log::ERR, SS_Log::WARN or SS_Log::NOTICE
	 */",
 "/**
 * Wrapper class for a logging handler like {@link Zend_Log}
 * which takes a message (or a map of context variables) and
 * sends it to one or more {@link Zend_Log_Writer_Abstract}
 * subclasses for output.
 * 
 * These priorities are currently supported:
 *  - SS_Log::ERR
 *  - SS_Log::WARN
 *  - SS_Log::NOTICE
 * 
 * You can add an error writer by calling {@link SS_Log::add_writer()}
 * 
 * Example usage of logging errors by email notification:
 * <code>
 * SS_Log::add_writer(new SS_LogEmailWriter(\'my@email.com\'), SS_Log::ERR);
 * </code>
 * 
 * Example usage of logging errors by file:
 * <code>
 *	SS_Log::add_writer(new SS_LogFileWriter(\'/var/log/silverstripe/errors.log\'), SS_Log::ERR);
 * </code>
 *
 * Example usage of logging at warnings and errors by setting the priority to \'<=\':
 * <code>
 * SS_Log::add_writer(new SS_LogEmailWriter(\'my@email.com\'), SS_Log::WARN, \'<=\');
 * </code>
 *	
 * Each writer object can be assigned a formatter. The formatter is
 * responsible for formatting the message before giving it to the writer.
 * {@link SS_LogErrorEmailFormatter} is such an example that formats errors
 * into HTML for human readability in an email client.
 * 
 * Formatters are added to writers like this:
 * <code>
 * $logEmailWriter = new SS_LogEmailWriter(\'my@email.com\');
 * $myEmailFormatter = new MyLogEmailFormatter();
 * $logEmailWriter->setFormatter($myEmailFormatter);
 * </code>
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
     * Constructor
     *
     * @param  array $options Associative array of options
     * @return void
     */",
 "/**
     * Main method : call the specified function or get the result from cache
     *
     * @param  string $name             Function name
     * @param  array  $parameters       Function parameters
     * @param  array  $tags             Cache tags
     * @param  int    $specificLifetime If != false, set a specific lifetime for this cache record (null => infinite lifetime)
     * @param  int   $priority         integer between 0 (very low priority) and 10 (maximum priority) used by some particular backends             
     * @return mixed Result
     */",
 "/**
     * Make a cache id from the function name and parameters
     *
     * @param  string $name       Function name
     * @param  array  $parameters Function parameters
     * @throws Zend_Cache_Exception
     * @return string Cache id
     */",
 "/**
 * @package    Zend_Cache
 * @subpackage Zend_Cache_Frontend
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/** 
	 * Initialise the wrapper class.
	 */",
 "/**
	 * Overwrites beforeRunTests. Initiates coverage-report generation if 
	 * $coverage has been set to true (@see setCoverageStatus).
	 */",
 "/**
	 * Overwrites aferRunTests. Creates coverage report and clover report 
	 * if required.
	 */",
 "/**
* @package sapphire
* @subpackage dev
*/",
 "/**
	 * Creates a new dropdown field.
	 * 
	 * @param string $name The field name
	 * @param string $title The field title
	 * @param array $source An map of the dropdown items
	 * @param string|array $value You can pass an array of values or a single value like a drop down to be selected
	 * @param int $size Optional size of the select element
	 * @param form The parent form
	 */",
 "/**
	 * Returns a <select> tag containing all the appropriate <option> tags
	 */",
 "/** 
	 * Sets the size of this dropdown in rows.
	 * @param int $size The height in rows (e.g. 3)
	 */",
 "/** 
	 * Sets this field to have a muliple select attribute
	 * @param boolean $bool
	 */",
 "/**
 * Multi-line listbox field, created from a <select> tag.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * new ListboxField(
 *    $name = \"pickanumber\",
 *    $title = \"Pick a number\",
 *    $source = array(
 *       \"1\" => \"one\",
 *       \"2\" => \"two\",
 *       \"3\" => \"three\"
 *    ),
 *    $value = 1
 * )
 * </code> 
 * 
 * @see DropdownField for a simple <select> field with a single element.
 * @see CheckboxSetField for multiple selections through checkboxes.
 * @see OptionsetField for single selections via radiobuttons.
 * @see TreeDropdownField for a rich and customizeable UI that can visualize a tree of selectable elements
 * 
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
	 * Returns this page if the redirect is external, otherwise
	 * returns the target page.
	 * @return SiteTree
	 */",
 "/**
	 * Return the the link that should be used for this redirector page, in navigation, etc.
	 * If the redirectorpage has been appropriately configured, then it will return the redirection
	 * destination, to prevent unnecessary 30x redirections.  However, if it\'s misconfigured, then
	 * it will return a link to itself, which will then display an error message. 
	 */",
 "/**
	 * Return the normal link directly to this page.  Once you visit this link, a 30x redirection
	 * will take you to your final destination.
	 */",
 "/**
	 * Return the link that we should redirect to.
	 * Only return a value if there is a legal redirection destination.
	 */",
 "/**
 * A redirector page redirects when the page is visited.
 *
 * @package cms
 * @subpackage content
 */",
 "/**
	 * If we ever get this far, it means that the redirection failed.
	 */",
 "/**
 * Controller for the {@link RedirectorPage}.
 * @package cms
 * @subpackage content
 */",
 "/**
 	 * Construct a new short text field
 	 * 
 	 * @param $name string The name of the field
 	 * @param $size int The maximum size of the field, in terms of characters
 	 * @param $options array Optional parameters, e.g. array(\"nullifyEmpty\"=>false). See {@link StringField::setOptions()} for information on the available options
 	 * @return unknown_type
 	 */",
 "/**
 	 * (non-PHPdoc)
 	 * @see DBField::requireField()
 	 */",
 "/**
	 * Return the first letter of the string followed by a .
	 */",
 "/**
	 * Ensure that the given value is an absolute URL.
	 */",
 "/**
	 * Return the value of the field in rich text format
	 * @return string
	 */",
 "/**
	 * Returns the value of the string, limited to the specified number of characters
	 * @param $limit int Character limit
	 * @param $add string Extra string to add to the end of the limited string
	 * @return string
	 */",
 "/**
	 * (non-PHPdoc)
	 * @see DBField::scaffoldFormField()
	 */",
 "/**
 * Class Varchar represents a variable-length string of up to 255 characters, designed to store raw text
 * 
 * @see HTMLText
 * @see HTMLVarchar
 * @see Text
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Sets the content of this field to a new value
	 * @param string $content
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Synonym of {@link setContent()} so that LiteralField is more compatible with other field types.
	 */",
 "/**
 * This field lets you put an arbitrary piece of HTML into your forms.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * new LiteralField (
 *    $name = \"literalfield\",
 *    $content = \'<b>some bold text</b> and <a href=\"http://silverstripe.com\">a link</a>\'
 * )
 * </code>
 * 
 * @package forms
 * @subpackage fields-dataless
 */",
 "/**
     * Class constructor
     */",
 "/**
     * Enable or disable the log writer.
     * 
     * @param boolean $enabled Set to TRUE to enable the log writer 
     * @return boolean The previous value.
     */",
 "/**
     * Determine if the log writer is enabled.
     * 
     * @return boolean Returns TRUE if the log writer is enabled.
     */",
 "/**
     * Set the default display style for user-defined priorities
     * 
     * @param string $style The default log display style
     * @return string Returns previous default log display style
     */",
 "/**
     * Get the default display style for user-defined priorities
     * 
     * @return string Returns the default log display style
     */",
 "/**
     * Set a display style for a logging priority
     * 
     * @param int $priority The logging priority
     * @param string $style The logging display style
     * @return string|boolean The previous logging display style if defined or TRUE otherwise
     */",
 "/**
     * Get a display style for a logging priority
     * 
     * @param int $priority The logging priority
     * @return string|boolean The logging display style if defined or FALSE otherwise
     */",
 "/**
     * Log a message to the Firebug Console.
     *
     * @param array $event The event data
     * @return void
     */",
 "/**
 * Writes log messages to the Firebug Console via FirePHP.
 * 
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Writer
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Spellchecks an array of words.
	 *
	 * @param {String} $lang Language code like sv or en.
	 * @param {Array} $words Array of words to spellcheck.
	 * @return {Array} Array of misspelled words.
	 */",
 "/**
	 * Returns suggestions of for a specific word.
	 *
	 * @param {String} $lang Language code like sv or en.
	 * @param {String} $word Specific word to get suggestions for.
	 * @return {Array} Array of suggestions for the specified word.
	 */",
 "/**
 * $Id: editor_plugin_src.js 201 2007-02-12 15:56:56Z spocke $
 *
 * @author Moxiecode
 * @copyright Copyright ? 2004-2007, Moxiecode Systems AB, All rights reserved.
 */",
 "/**
     * Read the content from locale
     *
     * Can be called like:
     * <ldml>
     *     <delimiter>test</delimiter>
     *     <second type=\'myone\'>content</second>
     *     <second type=\'mysecond\'>content2</second>
     *     <third type=\'mythird\' />
     * </ldml>
     *
     * Case 1: _readFile(\'ar\',\'/ldml/delimiter\')             -> returns [] = test
     * Case 1: _readFile(\'ar\',\'/ldml/second[@type=myone]\')   -> returns [] = content
     * Case 2: _readFile(\'ar\',\'/ldml/second\',\'type\')         -> returns [myone] = content; [mysecond] = content2
     * Case 3: _readFile(\'ar\',\'/ldml/delimiter\',,\'right\')    -> returns [right] = test
     * Case 4: _readFile(\'ar\',\'/ldml/third\',\'type\',\'myone\')  -> returns [myone] = mythird
     *
     * @param  string $locale
     * @param  string $path
     * @param  string $attribute
     * @param  string $value
     * @access private
     * @return array
     */",
 "/**
     * Find possible routing to other path or locale
     *
     * @param  string $locale
     * @param  string $path
     * @param  string $attribute
     * @param  string $value
     * @param  array  $temp
     * @throws Zend_Locale_Exception
     * @access private
     */",
 "/**
     * Read the right LDML file
     *
     * @param  string $locale
     * @param  string $path
     * @param  string $attribute
     * @param  string $value
     * @access private
     */",
 "/**
     * Find the details for supplemental calendar datas
     *
     * @param  string $locale Locale for Detaildata
     * @param  array  $list   List to search
     * @return string         Key for Detaildata
     */",
 "/**
     * Internal function for checking the locale
     *
     * @param string|Zend_Locale $locale Locale to check
     * @return string
     */",
 "/**
     * Read the LDML file, get a array of multipath defined value
     *
     * @param  string $locale
     * @param  string $path
     * @param  string $value
     * @return array
     * @access public
     */",
 "/**
     * Read the LDML file, get a single path defined value
     *
     * @param  string $locale
     * @param  string $path
     * @param  string $value
     * @return string
     * @access public
     */",
 "/**
     * Returns the set cache
     *
     * @return Zend_Cache_Core The set cache
     */",
 "/**
     * Set a cache for Zend_Locale_Data
     *
     * @param Zend_Cache_Core $cache A cache frontend
     */",
 "/**
     * Returns true when a cache is set
     *
     * @return boolean
     */",
 "/**
     * Removes any set cache
     *
     * @return void
     */",
 "/**
     * Clears all set cache data
     *
     * @return void
     */",
 "/**
 * Locale data reader, handles the CLDR
 *
 * @category   Zend
 * @package    Zend_Locale
 * @subpackage Data
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Initialisation function that is run before any action on the controller is called.
	 * 
	 * @uses BasicAuth::requireLogin()
	 */",
 "/**
	 * Executes this controller, and return an {@link SS_HTTPResponse} object with the result.
	 * 
	 * This method first does a few set-up activities:
	 *  - Push this controller ont to the controller stack - 
	 *    see {@link Controller::curr()} for information about this.
	 *  - Call {@link init()}
	 *  - Defer to {@link RequestHandler->handleRequest()} to determine which action
	 *    should be executed
	 * 
	 * Note: $requestParams[\'executeForm\'] support was removed, 
	 * make the following change in your URLs: 
	 * \"/?executeForm=FooBar\" -> \"/FooBar\" 
	 * Also make sure \"FooBar\" is in the $allowed_actions of your controller class.
	 * 
	 * Note: You should rarely need to overload run() - 
	 * this kind of change is only really appropriate for things like nested
	 * controllers - {@link ModelAsController} and {@link RootURLController} 
	 * are two examples here.  If you want to make more
	 * orthodox functionality, it\'s better to overload {@link init()} or {@link index()}.
	 * 
	 * Important: If you are going to overload handleRequest, 
	 * make sure that you start the method with $this->pushCurrent()
	 * and end the method with $this->popCurrent().  
	 * Failure to do this will create weird session errors.
	 * 
	 * @param $request The {@link SS_HTTPRequest} object that is responsible 
	 *  for distributing request parsing.
	 * @return SS_HTTPResponse The response that this controller produces, 
	 *  including HTTP headers such as redirection info
	 */",
 "/**
	 * Controller\'s default action handler.  It will call the method named in $Action, if that method exists.
	 * If $Action isn\'t given, it will use \"index\" as a default.
	 */",
 "/**
	 * @return array The parameters extracted from the URL by the {@link Director}.
	 */",
 "/**
	 * Returns the SS_HTTPResponse object that this controller is building up.
	 * Can be used to set the status code and headers
	 */",
 "/**
	 * Get the request with which this controller was called (if any).
	 * Usually set in {@link handleRequest()}.
	 *
	 * @return SS_HTTPRequest
	 */",
 "/**
	 * Return the object that is going to own a form that\'s being processed, and handle its execution.
	 * Note that the result needn\'t be an actual controller object.
	 */",
 "/**
	 * This is the default action handler used if a method doesn\'t exist.
	 * It will process the controller object with the template returned by {@link getViewer()}
	 */",
 "/**
	 * Returns the action that is being executed on this controller.
	 */",
 "/**
	 * Return an SSViewer object to process the data
	 * @return SSViewer The viewer identified being the default handler for this Controller/Action combination
	 */",
 "/**
	 * Returns TRUE if this controller has a template that is specifically designed to handle a specific action.
	 *
	 * @param string $action
	 * @return bool
	 */",
 "/**
	 * Render the current controller with the templates determined
	 * by {@link getViewer()}.
	 * 
	 * @param array $params Key-value array for custom template variables (Optional)
	 * @return string Parsed template content 
	 */",
 "/**
	 * Call this to disable site-wide basic authentication for a specific contoller.
	 * This must be called before Controller::init().  That is, you must call it in your controller\'s
	 * init method before it calls parent::init().
	 */",
 "/**
	 * Returns the current controller
	 * @returns Controller
	 */",
 "/**
	 * Tests whether we have a currently active controller or not
	 * @return boolean True if there is at least 1 controller in the stack.
	 */",
 "/**
	 * Returns true if the member is allowed to do the given action.
	 * @param perm The permission to be checked, such as \'View\'.
	 * @param member The member whose permissions need checking.  Defaults to the currently logged
	 * in user.
	 * @return boolean
	 */",
 "/**
	 * returns a date object for use within a template
	 * Usage: $Now.Year - Returns 2006
	 * @return Date The current date
	 */",
 "/**
	 * Returns the currently logged in user
	 */",
 "/**
	 * Returns true if the visitor has been here before
	 * @return boolean
	 */",
 "/**
	 * Return true if the visitor has signed up for a login account before
	 * @return boolean
	 */",
 "/**
	 * Pushes this controller onto the stack of current controllers.
	 * This means that any redirection, session setting, or other things that rely on Controller::curr() will now write to this
	 * controller object.
	 */",
 "/**
	 * Pop this controller off the top of the stack.
	 */",
 "/**
	 * Redirct to the given URL.
	 * It is generally recommended to call Director::redirect() rather than calling this function directly.
	 */",
 "/**
	 * Redirect back. Uses either the HTTP_REFERER or a manually set request-variable called
	 * _REDIRECT_BACK_URL.
	 * This variable is needed in scenarios where not HTTP-Referer is sent (
	 * e.g when calling a page by location.href in IE).
	 * If none of the two variables is available, it will redirect to the base
	 * URL (see {@link Director::baseURL()}).
	 * @uses redirect()
	 */",
 "/**
	 * Tests whether a redirection has been requested.
	 * @return string If redirect() has been called, it will return the URL redirected to.  Otherwise, it will return null;
	 */",
 "/**
	 * Get the Session object representing this Controller\'s session
	 * @return Session
	 */",
 "/**
	 * Set the Session object.
	 */",
 "/**
	 * Returns true if this controller is processing an ajax request
	 * @return boolean True if this controller is processing an ajax request
	 */",
 "/**
	 * Joins two or more link segments together, putting a slash between them if necessary.
	 * Use this for building the results of {@link Link()} methods.
	 * If either of the links have query strings, 
	 * then they will be combined and put at the end of the resulting url.
	 * 
	 * Caution: All parameters are expected to be URI-encoded already.
	 * 
	 * @param String 
	 * @return String
	 */",
 "/**
 * Base controller class.
 * Controllers are the cornerstone of all site functionality in Sapphire.  The {@link Director}
 * selects a controller to pass control to, and then calls {@link run()}.  This method will execute
 * the appropriate action - either by calling the action method, or displaying the action\'s template.
 *
 * See {@link getTemplate()} for information on how the template is chosen.
 * @package sapphire
 * @subpackage control
 */",
 "/**
	 * Cookie domain, for example \'www.php.net\'.
	 * 
	 * To make cookies visible on all subdomains then the domain
	 * must be prefixed with a dot like \'.php.net\'.
	 * 
	 * @param string $domain The domain to set
	 */",
 "/**
	 * Get the cookie domain.
	 * @return string
	 */",
 "/**
	 * Path to set on the domain where the session cookie will work.
	 * Use a single slash (\'/\') for all paths on the domain.
	 *
	 * @param string $path The path to set
	 */",
 "/**
	 * Get the path on the domain where the session cookie will work.
	 * @return string
	 */",
 "/**
	 * Secure cookie, tells the browser to only send it over SSL.
	 * @param boolean $secure
	 */",
 "/**
	 * Get if the cookie is secure
	 * @return boolean
	 */",
 "/**
	 * Create a new session object, with the given starting data
	 *
	 * @param $data Can be an array of data (such as $_SESSION) or another Session object to clone.
	 */",
 "/**
	 * Provide an <code>array</code> of rules specifing timeouts for IPv4 address ranges or
	 * individual IPv4 addresses. The key is an IP address or range and the value is the time
	 * until the session expires in seconds. For example:
	 * 
	 * Session::set_timeout_ips(array(
	 * 		\'127.0.0.1\' => 36000	
	 * ));
	 * 
	 * Any user connecting from 127.0.0.1 (localhost) will have their session expired after 10 hours.
	 *
	 * Session::set_timeout is used to set the timeout value for any users whose address is not in the given IP range.
	 * 
	 * @param array $session_ips Array of IPv4 rules.
	 */",
 "/**
	 * @deprecated 2.5 Use Session::add_to_array($name, $val) instead
	 */",
 "/**
	 * Add a value to a specific key in the session array
	 */",
 "/**
	 * Set a key/value pair in the session
	 *
	 * @param string $name Key
	 * @param string $val Value
	 */",
 "/**
	 * Return a specific value by session key
	 *
	 * @param string $name Key to lookup
	 */",
 "/**
	 * Return all the values in session
	 *
	 * @return Array
	 */",
 "/**
	 * @deprecated 2.5 Use Session::get_all()
	 */",
 "/**
	 * Clear a given session key, value pair.
	 *
	 * @param string $name Key to lookup
	 */",
 "/**
	 * Clear all the values
	 */",
 "/**
	 * @deprecated 2.5 Use Session::clear_all()
	 */",
 "/**
	 * Save all the values in our session to $_SESSION
	 */",
 "/**
	 * Save data to session
	 * Only save the changes, so that anyone manipulating $_SESSION directly doesn\'t get burned.
	 */",
 "/**
	 * Recursively apply the changes represented in $data to $dest.
	 * Used to update $_SESSION
	 */",
 "/**
	* Sets the appropriate form message in session, with type. This will be shown once,
	* for the form specified.
	*
	* @param formname the form name you wish to use ( usually $form->FormName() )
	* @param messsage the message you wish to add to it
	* @param type the type of message
	*/",
 "/**
	 * Initialize session.
	 *
	 * @param string $sid Start the session with a specific ID
	 */",
 "/**
	 * Destroy the active session.
	 *
	 * @param bool $removeCookie If set to TRUE, removes the user\'s cookie, FALSE does not remove
	 */",
 "/**
	 * Use the Session::$session_ips array to set timeouts based on IP address or IP address
	 * range.
	 * 
	 * Note: The use of _sessions.php is deprecated.
	 */",
 "/**
	 * Set the timeout of a Session value
	 *
	 * @param int $timeout Time until a session expires in seconds. Defaults to expire when browser is closed.
	 */",
 "/**
 * Handles all manipulation of the session.
 * 
 * The static methods are used to manipulate the currently active controller\'s session.
 * The instance methods are used to manipulate a particular session.  There can be more than one of these created.
 * 
 * In order to support things like testing, the session is associated with a particular Controller.  In normal usage, this is loaded from
 * and saved to the regular PHP session, but for things like static-page-generation and unit-testing, you can create multiple Controllers,
 * each with their own session.
 * 
 * The instance object is basically just a way of manipulating a set of nested maps, and isn\'t specific to session data.
 * 
 * <b>Saving Data</b>
 * 
 * You can write a value to a users session from your PHP code using the static function {@link Session::set()}. You can add this line in any function or file you wish to save the value.
 * 
 * <code>
 * 	Session::set(\'MyValue\', 6);
 * </code>
 * 
 * Saves the value of \"6\" to the MyValue session data. You can also save arrays or serialized objects in session (but note there may be size restrictions as to how much you can save)
 * 
 * <code>
 * 	// save a variable
 * 	$var = 1;
 * 	Session::set(\'MyVar\', $var);
 * 
 * 	// saves an array
 * 	Session::set(\'MyArrayOfValues\', array(\'1\',\'2\',\'3\'));
 * 
 * 	// saves an object (you\'ll have to unserialize it back)
 * 	$object = new Object();
 * 
 * 	Session::set(\'MyObject\', serialize($object));
 * </code>
 * 
 * <b>Accessing Data</b>
 * 
 * Once you have saved a value to the Session you can access it by using the {@link Session::get()} function. 
 * Like the {@link Session::set()} function you can use this anywhere in your PHP files.
 * 
 * The values in the comments are the values stored from the previous example.
 * 
 * <code>
 * function bar() {
 * 	$value = Session::get(\'MyValue\'); // $value = 6
 * 	$var   = Session::get(\'MyVar\'); // $var = 1 
 * 	$array = Session::get(\'MyArrayOfValues\'); // $array = array(1,2,3)
 * 	$object = Session::get(\'MyObject\', unserialize($object)); // $object = Object()
 * }
 * </code>
 * 
 * You can also get all the values in the session at once. This is useful for debugging.
 * 
 * <code>
 * Session::getAll(); // returns an array of all the session values.
 * </code>
 * 
 * <b>Clearing Data</b>
 * 
 * Once you have accessed a value from the Session it doesn\'t automatically wipe the value from the Session, you have to specifically remove it. To clear a value you can either delete 1 session value by the name that you saved it
 * 
 * <code>
 * Session::clear(\'MyValue\'); // myvalue is no longer 6.
 * </code>
 * 
 * Or you can clear every single value in the session at once. Note SilverStripe stores some of its own session data including form and page comment information. None of this is vital but clear_all will clear everything.
 * 
 * <code>
 * 	Session::clearAll();
 * </code>
 * 
 * @see Cookie
 * @todo This class is currently really basic and could do with a more well-thought-out implementation.
 *
 * @package sapphire
 * @subpackage control
 */",
 "/**
	 * Check that the current member has the given permission.
	 * 
	 * @param string $code Code of the permission to check (case-sensitive)
	 * @param string $arg Optional argument (e.g. a permissions for a specific page)
	 * @param int|Member $member Optional member instance or ID. If set to NULL, the permssion
	 *  will be checked for the current user
	 * @param bool $strict Use \"strict\" checking (which means a permission
	 *  will be granted if the key does not exist at all)?
	 * @return int|bool The ID of the permission record if the permission
	 *  exists; FALSE otherwise. If \"strict\" checking is
	 *  disabled, TRUE will be returned if the permission does not exist at all.
	 */",
 "/**
	 * Flush the permission cache, for example if you have edited group membership or a permission record.
	 * @todo Call this whenever Group_Members is added to or removed from
	 */",
 "/**
	 * Check that the given member has the given permission.
	 * 
	 * @param int|Member memberID The ID of the member to check. Leave blank for the current member. 
	 *  Alternatively you can use a member object.
	 * @param string|array $code Code of the permission to check (case-sensitive)
	 * @param string $arg Optional argument (e.g. a permissions for a specific page)
	 * @param bool $strict Use \"strict\" checking (which means a permission
	 *  will be granted if the key does not exist at all)?
	 * @return int|bool The ID of the permission record if the permission
	 *  exists; FALSE otherwise. If \"strict\" checking is
	 *  disabled, TRUE will be returned if the permission does not exist at all.
	 */",
 "/**
	 * Get all the \'any\' permission codes available to the given member.
	 * @return array();
	 */",
 "/**
	 * Get the list of groups that the given member belongs to.
	 *
	 * Call without an argument to get the groups that the current member
	 * belongs to. In this case, the results will be session-cached.
	 *
	 * @param int $memberID The ID of the member. Leave blank for the current
	 *                      member.
	 * @return array Returns a list of group IDs to which the member belongs
	 *               to or NULL.
	 */",
 "/**
	 * Grant the given permission code/arg to the given group
	 *
	 * @param int $groupID The ID of the group
	 * @param string $code The permission code
	 * @param string Optional: The permission argument (e.g. a page ID).
	 * @returns Permission Returns the new permission object.
	 */",
 "/**
	 * Deny the given permission code/arg to the given group
	 *
	 * @param int $groupID The ID of the group
	 * @param string $code The permission code
	 * @param string Optional: The permission argument (e.g. a page ID).
	 * @returns Permission Returns the new permission object.
	 */",
 "/**
	 * Returns all members for a specific permission.
	 * 
	 * @param $code String|array Either a single permission code, or a list of permission codes
	 * @return DataObjectSet Returns a set of member that have the specified
	 *                       permission.
	 */",
 "/**
	 * Return all of the groups that have one of the given permission codes
	 * @param $codes array|string Either a single permission code, or an array of permission codes
	 * @return DataObjectSet The matching group objects
	 */",
 "/**
	 * Get a list of all available permission codes, both defined through the
	 * {@link PermissionProvider} interface, and all not explicitly defined codes existing
	 * as a {@link Permission} database record. By default, the results are
	 * grouped as denoted by {@link Permission_Group}.
	 *
	 * @param bool $grouped Group results into an array of permission groups.
	 * @return array Returns an array of all available permission codes. The
	 *  array indicies are the permission codes as used in
	 *  {@link Permission::check()}. The value is a description
	 *  suitable for using in an interface.
	 */",
 "/**
	 * Sort permissions based on their sort value, or name
	 *
	 */",
 "/**
	 * add a permission represented by the $code to the {@link slef::$hidden_permissions} list
	 *
	 * @param $code string - the permissions code
	 * @return void
	 */",
 "/**
	 * remove a permission represented by the $code from the {@link slef::$hidden_permissions} list
	 *
	 * @param $code string - the permissions code
	 * @return void
	 */",
 "/**
	 * Declare an array of permissions for the system.
	 *
	 * Permissions can be grouped by nesting arrays. Scalar values are always
	 * treated as permissions.
	 *
	 * @param array $permArray A (possibly nested) array of permissions to
	 *                         declare for the system.
	 */",
 "/**
	 * Get a linear list of the permissions in the system.
	 *
	 * @return array Linear list of declared permissions in the system.
	 */",
 "/**
	 * Look up the human-readable title for the permission as defined by <code>Permission::declare_permissions</code>
	 * 
	 * @param $perm Permission code
	 * @return Label for the given permission, or the permission itself if the label doesn\'t exist
	 */",
 "/**
	 * Recursively traverse the nested list of declared permissions and create
	 * a linear list.
	 *
	 * @param aeeay $declared Nested structure of permissions.
	 * @param $list List of permissions in the structure. The result will be
	 *              written to this array.
	 */",
 "/**
 * Represents a permission assigned to a group.
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Constructor
	 *
	 * @param string $name Text that could be used as label used in an
	 *                     interface
	 * @param array $permissions Associative array of permissions in this
	 *                           permission group. The array indicies are the
	 *                           permission codes as used in
	 *                           {@link Permission::check()}. The value is
	 *                           suitable for using in an interface.
	 */",
 "/**
	 * Get the name of the permission group
	 *
	 * @return string Name (label) of the permission group
	 */",
 "/**
	 * Get permissions
	 *
	 * @return array Associative array of permissions in this permission
	 *               group. The array indicies are the permission codes as
	 *               used in {@link Permission::check()}. The value is
	 *               suitable for using in an interface.
	 */",
 "/**
 * Permission_Group class
 *
 * This class is used to group permissions together for showing on an
 * interface.
 * @package sapphire
 * @subpackage security
 */",
 "/**
     * Write a message to the log.
     *
     * @param  array  $event  event data
     * @return void
     */",
 "/**
     * Record shutdown
     *
     * @return void
     */",
 "/**
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Writer
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Null.php 3980 2007-03-15 21:38:38Z mike $
 */",
 "/**
	 * Try to determine the DataObject that this field is built on top of
	 */",
 "/**
	 * Get the IDs of the selected items, in a has_many or many_many relation
	 */",
 "/**
 * ComplexTableField designed to edit a has_many join.
 * 
 * This field allows you to show a 1-to-many relation with a group of DataObjects as a (readonly) tabular list. Its most useful when you want to manage the relationship itself thanks the **check boxes** present on each line of the table.
 * 
 * Moreover, you can not do any mistake anymore in the relation by checking a DataObject already linked with another of the parent class.
 * 
 * See {@link ComplexTableField} for more documentation on the base-class.
 * 
 * <b>Usage</b>
 * 
 * <code>
 * $tablefield = new HasManyComplexTableField(
 *     $this,
 *     \'MyFruits\',
 *     \'Fruit\',
 *     array(
 * 	\'Name\' => \'Name\',
 * 	\'Color\' => \'Color\'
 *     ),
 *     \'getCMSFields_forPopup\'
 * );
 * </code>
 * 
 * Notice: You still have different ways to customize the popup window as in the parent-class {@link ComplexTableField}.
 * 
 * @see http://doc.silverstripe.org/tutorial/5-dataobject-relationship-management
 * 
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
 * Single record of a {@link HasManyComplexTableField} field.
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * Reset static configuration variables to their default values
	 */",
 "/**
	 * Construct a new Versioned object.
	 * @var array $stages The different stages the versioned object can be.
	 * The first stage is consiedered the \'default\' stage, the last stage is
	 * considered the \'live\' stage.
	 */",
 "/**
	 * Called by {@link SapphireTest} when the database is reset.
	 * @todo Reduce the coupling between this and SapphireTest, somehow.
	 */",
 "/**
	 * Create a temporary table mapping each database record to its version on the given date.
	 * This is used by the versioning system to return database content on that date.
	 * @param string $baseTable The base table.
	 * @param string $date The date.  If omitted, then the latest version of each page will be returned.
	 * @todo Ensure that this is DB abstracted
	 */",
 "/**
	 * Augment a write-record request.
	 * @param SQLQuery $manipulation Query to augment.
	 */",
 "/**
	 * If a write was skipped, then we need to ensure that we don\'t leave a migrateVersion()
	 * value lying around for the next write.
	 */",
 "/**
	 * Determine if a table is supporting the Versioned extensions (e.g. $table_versions does exists)
	 *
	 * @param string $table Table name
	 * @return boolean
	 */",
 "/**
	 * Check if a certain table has the \'Version\' field
	 *
	 * @param string $table Table name
	 * @return boolean Returns false if the field isn\'t in the table, true otherwise
	 */",
 "/**
	 * Get the latest published DataObject.
	 * @return DataObject
	 */",
 "/**
	 * Move a database record from one stage to the other.
	 * @param fromStage Place to copy from.  Can be either a stage name or a version number.
	 * @param toStage Place to copy to.  Must be a stage name.
	 * @param createNewVersion Set this to true to create a new version number.  By default, the existing version number will be copied over.
	 */",
 "/**
	 * Set the migrating version.
	 * @param string $version The version.
	 */",
 "/**
	 * Compare two stages to see if they\'re different.
	 * Only checks the version numbers, not the actual content.
	 * @param string $stage1 The first stage to check.
	 * @param string $stage2
	 */",
 "/**
	 * Return a list of all the versions available.
	 * @param string $filter
	 */",
 "/**
	 * Compare two version, and return the diff between them.
	 * @param string $from The version to compare from.
	 * @param string $to The version to compare to.
	 * @return DataObject
	 */",
 "/**
	 * Return the base table - the class that directly extends DataObject.
	 * @return string
	 */",
 "/**
	 * Choose the stage the site is currently on.
	 * If $_GET[\'stage\'] is set, then it will use that stage, and store it in the session.
	 * if $_GET[\'archiveDate\'] is set, it will use that date, and store it in the session.
	 * If neither of these are set, it checks the session, otherwise the stage is set to \'Live\'.
	 */",
 "/**
	 * Set the current reading mode.
	 */",
 "/**
	 * Get the current reading mode.
	 * @return string
	 */",
 "/**
	 * Get the name of the \'live\' stage.
	 * @return string
	 */",
 "/**
	 * Get the current reading stage.
	 * @return string
	 */",
 "/**
	 * Get the current archive date.
	 * @return string
	 */",
 "/**
	 * Set the reading stage.
	 * @param string $stage New reading stage.
	 */",
 "/**
	 * Set the reading archive date.
	 * @param string $date New reading archived date.
	 */",
 "/**
	 * Get a singleton instance of a class in the given stage.
	 * 
	 * @param string $class The name of the class.
	 * @param string $stage The name of the stage.
	 * @param string $filter A filter to be inserted into the WHERE clause.
	 * @param boolean $cache Use caching.
	 * @param string $orderby A sort expression to be inserted into the ORDER BY clause.
	 * @return DataObject
	 */",
 "/**
	 * Gets the current version number of a specific record.
	 * 
	 * @param string $class
	 * @param string $stage
	 * @param int $id
	 * @param boolean $cache
	 * @return int
	 */",
 "/**
	 * Pre-populate the cache for Versioned::get_versionnumber_by_stage() for a list of record IDs,
	 * for more efficient database querying.  If $idList is null, then every page will be pre-cached.
	 */",
 "/**
	 * Get a set of class instances by the given stage.
	 * 
	 * @param string $class The name of the class.
	 * @param string $stage The name of the stage.
	 * @param string $filter A filter to be inserted into the WHERE clause.
	 * @param string $sort A sort expression to be inserted into the ORDER BY clause.
	 * @param string $join A join expression, such as LEFT JOIN or INNER JOIN
	 * @param int $limit A limit on the number of records returned from the database.
	 * @param string $containerClass The container class for the result set (default is DataObjectSet)
	 * @return DataObjectSet
	 */",
 "/**
	 * Build a SQL query to get data from the _version table.
	 * This function is similar in style to {@link DataObject::buildSQL}
	 */",
 "/**
	 * Return the latest version of the given page.
	 * 
	 * @return DataObject
	 */",
 "/**
	 * Return the equivalent of a DataObject::get() call, querying the latest
	 * version of each page stored in the (class)_versions tables.
	 *
	 * In particular, this will query deleted records as well as active ones.
	 */",
 "/**
	 * Return the query for the equivalent of a DataObject::get() call, querying the latest
	 * version of each page stored in the (class)_versions tables.
	 *
	 * In particular, this will query deleted records as well as active ones.
	 */",
 "/**
	 * @return DataObject
	 */",
 "/**
	 * @return DataObject
	 */",
 "/**
	 * Return a piece of text to keep DataObject cache keys appropriately specific
	 */",
 "/**
 * The Versioned decorator allows your DataObjects to have several versions, allowing
 * you to rollback changes and view history. An example of this is the pages used in the CMS.
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * Represents a single version of a record.
 * @package sapphire
 * @subpackage model
 * @see Versioned
 */",
 "/**
	 * Raise an event that requires notification.
	 * @param eventType A string used to identify different event types.  You can refer back to the events
	 * raised by this eventType.
	 * @param item An object related to the notification, such as a database record.
	 * @param notifyMemberID A person to notify via email about the event.  Events won\'t be notified by
	 * email until you call {@link notifyByEmail()}
	 */",
 "/**
	 * Notify the appropriate parties about all instances of this event, by email.
	 * @param eventType A string, this should match the eventType passed to {@link event()}
	 * @param emailTemplateClass The class-name of the email template to use.
	 */",
 "/**
	 * Get all the items that were passed with this event type.
	 * @param eventType A string, this should match the eventType passed to {@link event()}
	 */",
 "/**
 * The Notifications class allows you to create email notifications for various events.
 * It lets your scripts generate a number of notifications, and delay sending of the emails until
 * the end of execution, so that multiple notifications can collated together
 * @package cms
 */",
 "/**
	 * Get the appropriate {@link ContentController} for handling a {@link SiteTree} object, link it to the object and
	 * return it.
	 *
	 * @param SiteTree $sitetree
	 * @param string $action
	 * @return ContentController
	 */",
 "/**
	 * @uses ModelAsController::getNestedController()
	 * @return SS_HTTPResponse
	 */",
 "/**
	 * @return ContentController
	 */",
 "/**
	 * @param string $URLSegment A subset of the url. i.e in /home/contact/ home and contact are URLSegment.
	 * @param int $parentID The ID of the parent of the page the URLSegment belongs to. 
	 * @return SiteTree
	 */",
 "/**
 * ModelAsController deals with mapping the initial request to the first {@link SiteTree}/{@link ContentController}
 * pair, which are then used to handle the request.
 *
 * @package sapphire
 * @subpackage control
 */",
 "/**
	 * Does the parent permission checks, but also
	 * makes sure that instantiatable subclasses of
	 * {@link Report} exist. By default, the CMS doesn\'t
	 * include any Reports, so there\'s no point in showing
	 * 
	 * @param Member $member
	 * @return boolean
	 */",
 "/**
	 * Return a DataObjectSet of SS_Report subclasses
	 * that are available for use.
	 *
	 * @return DataObjectSet
	 */",
 "/**
	 * Show a report based on the URL query string.
	 *
	 * @param SS_HTTPRequest $request The HTTP request object
	 */",
 "/**
	 * @TODO What does this do?
	 *
	 * @param unknown_type $params
	 * @param unknown_type $editForm
	 * @return unknown
	 */",
 "/**
	 * For the current report that the user is viewing,
	 * return a Form instance with the fields for that
	 * report.
	 *
	 * @return Form
	 */",
 "/**
	 * Get the current report
	 *
	 * @return SS_Report
	 */",
 "/**
	 * Return a Form instance with fields for the
	 * particular report currently viewed.
	 * 
	 * @TODO Dealing with multiple data types for the
	 * $id parameter is confusing. Ideally, it should
	 * deal with only one.
	 *
	 * @param id|string $id The ID of the report, or class name
	 * @return Form
	 */",
 "/**
	 * Determine if we have reports and need
	 * to display the \"Reports\" main menu item
	 * in the CMS.
	 * 
	 * The test for an existance of a report
	 * is done by checking for a subclass of
	 * \"SS_Report\" that exists.
	 *
	 * @return boolean
	 */",
 "/**
 * Reports section of the CMS.
 * 
 * All reports that should show in the ReportAdmin section
 * of the CMS need to subclass {@link SS_Report}, and implement
 * the appropriate methods and variables that are required.
 * 
 * @see SS_Report
 * 
 * @package cms
 * @subpackage reports
 */",
 "/**
 * A simple extension to dropdown field, pre-configured to list countries.
 * It will default to the country of the current visiotr.
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * Used in template instead of {@link Widgets()}
	 * to wrap each widget in its controller, making
	 * it easier to access and process form logic
	 * and actions stored in {@link Widget_Controller}.
	 * 
	 * @return DataObjectSet Collection of {@link Widget_Controller}
	 */",
 "/**
 * Represents a set of widgets shown on a page.
 * @package sapphire
 * @subpackage widgets
 */",
 "/**
	 * @return array Array of associative arrays for each task (Keys: \'class\', \'title\', \'description\')
	 */",
 "/**
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Returns true if the current STDOUT supports the use of colour control codes.
	 */",
 "/**
	 * Return text encoded for CLI output, optionally coloured
	 * @param string $fgColour The foreground colour - black, red, green, yellow, blue, magenta, cyan, white.  Null is default.
	 * @param string $bgColour The foreground colour - black, red, green, yellow, blue, magenta, cyan, white.  Null is default.
	 * @param string $bold A boolean variable - bold or not.
	 */",
 "/**
	 * Send control codes for changing text to the given colour
	 * @param string $fgColour The foreground colour - black, red, green, yellow, blue, magenta, cyan, white.  Null is default.
	 * @param string $bgColour The foreground colour - black, red, green, yellow, blue, magenta, cyan, white.  Null is default.
	 * @param string $bold A boolean variable - bold or not.
	 */",
 "/**
	 * Send control codes for returning to normal colour
	 */",
 "/**
 * Class to facilitate command-line output.
 * Support less-trivial output stuff such as colours (on xterm-color)
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Generate an XML representation of the given {@link DataObject}.
	 * 
	 * @param DataObject $obj
	 * @param $includeHeader Include <?xml ...?> header (Default: true)
	 * @return String XML
	 */",
 "/**
	 * Generate an XML representation of the given {@link DataObjectSet}.
	 * 
	 * @param DataObjectSet $set
	 * @return String XML
	 */",
 "/**
 * @package sapphire
 * @subpackage formatters
 */",
 "/**
	 * Returns the value to be set in the database to blank this field.
	 * Usually it\'s a choice between null, 0, and \'\'
	 */",
 "/**
	 * Return an encoding of the given value suitable for inclusion in a SQL statement.
	 * If necessary, this should include quotes.
	 */",
 "/**
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Set whether HTML comments indicating the source .SS file used to render this page should be
	 * included in the output.  This is enabled by default
	 *
	 * @param boolean $val
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Create a template from a string instead of a .ss file
	 * 
	 * @return SSViewer
	 */",
 "/**
	 * @param string $theme The \"base theme\" name (without underscores). 
	 */",
 "/**
	 * @return string 
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @param string|array $templateList If passed as a string with .ss extension, used as the \"main\" template.
	 *  If passed as an array, it can be used for template inheritance (first found template \"wins\").
	 *  Usually the array values are PHP class names, which directly correlate to template names.
	 *  <code>
	 *  array(\'MySpecificPage\', \'MyPage\', \'Page\')
	 *  </code>
	 */",
 "/**
	 * Returns true if at least one of the listed templates exists
	 */",
 "/**
	 * Set a global rendering option.
	 * The following options are available:
	 *  - rewriteHashlinks: If true (the default), <a href=\"#...\"> will be rewritten to contain the 
	 *    current URL.  This lets it play nicely with our <base> tag.
	 *  - If rewriteHashlinks = \'php\' then, a piece of PHP script will be inserted before the hash 
	 *    links: \"<?php echo $_SERVER[\'REQUEST_URI\']; ?>\".  This is useful if you\'re generating a 
	 *    page that will be saved to a .php file and may be accessed from different URLs.
	 */",
 "/**
	 * @param String
	 * @return Mixed
	 */",
 "/**
	 * Call this to disable rewriting of <a href=\"#xxx\"> links.  This is useful in Ajax applications.
	 * It returns the SSViewer objects, so that you can call new SSViewer(\"X\")->dontRewriteHashlinks()->process();
	 */",
 "/**
	 * Searches for a template name in the current theme:
	 * - themes/mytheme/templates
	 * - themes/mytheme/templates/Includes
	 * Falls back to unthemed template files.
	 * 
	 * Caution: Doesn\'t search in any /Layout folders.
	 * 
	 * @param string $identifier A template name without \'.ss\' extension or path.
	 * @return string Full system path to a template file
	 */",
 "/**
	 * @param string $identifier A template name without \'.ss\' extension or path
	 * @param string $type The template type, either \"main\", \"Includes\" or \"Layout\"
	 * @return string Full system path to a template file
	 */",
 "/**
	 * Used by <% include Identifier %> statements to get the full
	 * unparsed content of a template file.
	 * 
	 * @uses getTemplateFile()
	 * @param string $identifier A template name without \'.ss\' extension or path.
	 * @return string content of template
	 */",
 "/**
	 * Clears all parsed template files in the cache folder.
	 *
	 * Can only be called once per request (there may be multiple SSViewer instances).
	 */",
 "/**
	 * The process() method handles the \"meat\" of the template processing.
	 * It takes care of caching the output (via {@link SS_Cache}),
	 * as well as replacing the special \"$Content\" and \"$Layout\"
	 * placeholders with their respective subtemplates.
	 * The method injects extra HTML in the header via {@link Requirements::includeInHTML()}.
	 * 
	 * Note: You can call this method indirectly by {@link ViewableData->renderWith()}.
	 * 
	 * @param ViewableData $item
	 * @param SS_Cache $cache Optional cache backend
	 * @return String Parsed template output.
	 */",
 "/**
	 * Returns the filenames of the template that will be rendered.  It is a map that may contain
	 * \'Content\' & \'Layout\', and will have to contain \'main\'
	 */",
 "/**
	 * @param string $type \"Layout\" or \"main\"
	 * @param string $file Full system path to the template file
	 */",
 "/**
	 * Return an appropriate base tag for the given template.
	 * It will be closed on an XHTML document, and unclosed on an HTML document.
	 * 
	 * @param $contentGeneratedSoFar The content of the template generated so far; it should contain
	 * the DOCTYPE declaration.
	 */",
 "/**
 * Parses a template file with an *.ss file extension.
 * 
 * In addition to a full template in the templates/ folder, a template in 
 * templates/Content or templates/Layout will be rendered into $Content and
 * $Layout, respectively.
 * 
 * A single template can be parsed by multiple nested {@link SSViewer} instances
 * through $Layout/$Content placeholders, as well as <% include MyTemplateFile %> template commands.
 * 
 * <b>Themes</b>
 * 
 * See http://doc.silverstripe.org/themes and http://doc.silverstripe.org/themes:developing
 * 
 * <b>Caching</b>
 *
 * Compiled templates are cached via {@link SS_Cache}, usually on the filesystem.  
 * If you put ?flush=all on your URL, it will force the template to be recompiled.  
 * 
 * <b>Manifest File and Structure</b>
 * 
 * Works with the global $_TEMPLATE_MANIFEST which is compiled by {@link ManifestBuilder->getTemplateManifest()}.
 * This associative array lists all template filepaths by \"identifier\", meaning the name
 * of the template without its path or extension.
 * 
 * Example:
 * <code>
 * array(
 *  \'LeftAndMain\' => 
 *  array (
 * 	\'main\' => \'/my/system/path/cms/templates/LeftAndMain.ss\',
 *  ),
 * \'CMSMain_left\' => 
 *   array (
 *     \'Includes\' => \'/my/system/path/cms/templates/Includes/CMSMain_left.ss\',
 *   ),
 * \'Page\' => 
 *   array (
 *     \'themes\' => 
 *     array (
 *       \'blackcandy\' => 
 *       array (
 *         \'Layout\' => \'/my/system/path/themes/blackcandy/templates/Layout/Page.ss\',
 *         \'main\' => \'/my/system/path/themes/blackcandy/templates/Page.ss\',
 *       ),
 *       \'blue\' => 
 *       array (
 *         \'Layout\' => \'/my/system/path/themes/mysite/templates/Layout/Page.ss\',
 *         \'main\' => \'/my/system/path/themes/mysite/templates/Page.ss\',
 *       ),
 *     ),
 *   ),
 *   // ...
 * )
 * </code>
 *
 * @see http://doc.silverstripe.org/themes
 * @see http://doc.silverstripe.org/themes:developing
 * 
 * @package sapphire
 * @subpackage view
 */",
 "/**
 * Special SSViewer that will process a template passed as a string, rather than a filename.
 * @package sapphire
 * @subpackage view
 */",
 "/**
 * Handle the parsing for cacheblock tags.
 * 
 * Needs to be handled differently from the other tags, because cacheblock can take any number of arguments
 * 
 * This shouldn\'t be used as an example of how to add functionality to SSViewer - the eventual plan is to re-write
 * SSViewer using a proper parser (probably http://github.com/hafriedlander/php-peg), so that extra functionality
 * can be added without relying on ad-hoc parsers like this.
 * 
 * @package sapphire
 * @subpackage view
 */",
 "/**
 * @package sapphire
 * @subpackage view
 */",
 "/**
 * Implementation of .tar, .tar.gz, and .tar.bz2 archive handler.
 * @package sapphire
 * @subpackage filesystem
 */",
 "/**
	 * Model classes
	 */",
 "/**
	 * Model classes, grouped by Module
	 */",
 "/**
 * Gives you a nice way of viewing your data model.
 * Access at dev/viewmodel.
 *
 * Requirements: http://graphviz.org/
 * 
 * @package sapphire
 * @subpackage tools
 */",
 "/**
	 * ModelViewer can be optionally constructed to restrict its output to a specific module
	 */",
 "/**
 * @package sapphire
 * @subpackage tools
 */",
 "/**
 * Represents a single model in the model viewer 
 * 
 * @package sapphire
 * @subpackage tools
 */",
 "/**
 * @package sapphire
 * @subpackage tools
 */",
 "/**
 * @package sapphire
 * @subpackage tools
 */",
 "/**
	 * Return a {@link CheckboxSetField} suitable for editing this field 
	 */",
 "/**
 * Represents an multi-select enumeration field.
 * @package sapphire
 * @subpackage model
 */",
 "/**
	 * Inverses the first and second level keys of an associative
	 * array, keying the result by the second level, and combines
	 * all first level entries within them.
	 * 
	 * Before:
	 * <example>
	 * array(
	 * 	\'row1\' => array(
	 * 		\'col1\' =>\'val1\',
	 * 		\'col2\' => \'val2\'
	 * 	),
	 * 	\'row2\' => array(
	 * 		\'col1\' => \'val3\',
	 * 		\'col2\' => \'val4\'
	 * 	)
	 * )
	 * </example>
	 * 
	 * After:
	 * <example>
	 * array(
	 * 	\'col1\' => array(
	 * 		\'row1\' => \'val1\',
	 * 		\'row2\' => \'val3\',
	 * 	),
	 * 	\'col2\' => array(
	 * 		\'row1\' => \'val2\',
	 * 		\'row2\' => \'val4\',
	 * 	),
	 * )
	 * </example>
	 * 
	 * @param array $arr
	 * @return array
	 */",
 "/**
	 * Return an array where the keys are all equal to the values
	 * 
	 * @param $arr array
	 * @return array
	 */",
 "/**
	 * @todo Improve documentation
	 */",
 "/**
	 * Filter an array by keys (useful for only allowing certain form-input to be saved).
	 * 
	 * @param $arr array
	 * @param $keys array
	 * @return array
	 */",
 "/**
	 * Determines if an array is associative by checking
	 * for existing keys via array_key_exists().
	 * @see http://nz.php.net/manual/en/function.is-array.php#76188
	 *
	 * @param array $arr
	 * @return boolean
	 */",
 "/**
	 * Recursively searches an array $haystack for the value(s) $needle.
	 * Assumes that all values in $needle (if $needle is an array) are at 
	 * the SAME level, not spread across multiple dimensions of the $haystack.
	 *
	 * @param mixed $needle
	 * @param array $haystack
	 * @param boolean $strict
	 * @return boolean
	 */",
 "/**
 * Library of static methods for manipulating arrays.
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * Spellchecks an array of words.
	 *
	 * @param {String} $lang Language code like sv or en.
	 * @param {Array} $words Array of words to spellcheck.
	 * @return {Array} Array of misspelled words.
	 */",
 "/**
	 * Returns suggestions of for a specific word.
	 *
	 * @param {String} $lang Language code like sv or en.
	 * @param {String} $word Specific word to get suggestions for.
	 * @return {Array} Array of suggestions for the specified word.
	 */",
 "/**
	 * Opens a link for pspell.
	 */",
 "/**
 * $Id: editor_plugin_src.js 201 2007-02-12 15:56:56Z spocke $
 *
 * @author Moxiecode
 * @copyright Copyright ? 2004-2007, Moxiecode Systems AB, All rights reserved.
 */",
 "/**
	 * @param string $name
	 * @param string $title The label itslef
	 * @param string $class An HTML class to apply to the label (Deprecated: use addExtraClass())
	 * @param boolean $allowHTML Determine if the tag content needs to be escaped (Deprecated: use setAllowHTML())
	 * @param Form $form
	 */",
 "/**
	 * Function that returns whether this field contains data.
	 * Always returns false. 
	 */",
 "/**
	 * Returns the field\'s representation in the form.
	 * For dataless fields, this defaults to $Field.
	 */",
 "/**
	 * Returns the field\'s representation in a field group.
	 * For dataless fields, this defaults to $Field.
	 */",
 "/**
	 * Returns a readonly version of this field
	 */",
 "/**
	 * @param bool $bool
	 */",
 "/**
	 * @return bool
	 */",
 "/**
 * Abstract class for all fields without data.
 * Labels, headings and the like should extend from this.
 * 
 * @package forms
 * @subpackage fields-dataless
 */",
 "/**
	 * @return SimpleImageField_Disabled
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Adds the filter, so the dropdown displays only images and folders.
	 *
	 * @return Form
	 */",
 "/**
 * A field that allows you to attach an image to a record from within a iframe - designed for use in AJAX forms where it
 * is not possible to use {@link SimpleImageField}.
 * 
 * <b>Usage</b>
 * 
 * If you want to upload all assets from this field to a given folder you can define the folder in 2 ways. Either in the constructor or as a method on the field
 * 
 * <code>
 * $myField = new ImageField(\"myName\", \"Upload image below\", null, null, null, \"myFolder\");
 * </code>
 * 
 * Will upload images into the assets/myFolder folder. If that folder does not exist it will create it for you. You can also define it as a method
 * 
 * <code>
 * $myField = new ImageField(\"myName\");
 * $myField->setFolderName(\'myFolder\');
 * </code>
 *
 * @package forms
 * @subpackage fields-files
 */",
 "/**
 * @package cms
 * @subpackage tasks
 */",
 "/**
	 * Set a cookie variable
	 * 
	 * @param string $name The variable name
	 * @param string $value The variable value.  May be an array or object if you wish.
	 * @param int $expiryDays The expiry time, in days.  Defaults to 90.
	 * @param string $path See http://php.net/set_session
	 * @param string $domain See http://php.net/set_session
	 * @param boolean $secure See http://php.net/set_session
	 * @param boolean $httpOnly See http://php.net/set_session (PHP 5.2+ only)
	 */",
 "/**
	 * Get a cookie variable
	 */",
 "/**
 * A set of static methods for manipulating cookies.
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * Represent the given form in a tabular style
	 * @param form The form to decorate.
	 */",
 "/**
 * This is a form decorator that lets you place a form inside another form.
 * The actions will be appropriately rewritten so that the nested form gets called, rather than the parent form.
 * 
 * @package sapphire
 * @subpackage forms
 */",
 "/**
	 * 
	 * @param Controller $controller
	 * @param string $name The name of the form (used in URL addressing)
	 * @param FieldSet $fields Optional, defaults to a single field named \"Search\". Search logic needs to be customized
	 *  if fields are added to the form.
	 * @param FieldSet $actions Optional, defaults to a single field named \"Go\".
	 */",
 "/**
	 * Set the classes to search.
	 * Currently you can only choose from \"SiteTree\" and \"File\", but a future version might improve this. 
 	 */",
 "/**
	 * Get the classes to search
	 *
	 * @return array
	 */",
 "/**
	 * Return dataObjectSet of the results using $_REQUEST to get info from form.
	 * Wraps around {@link searchEngine()}.
	 * 
	 * @param int $pageLength DEPRECATED 2.3 Use SearchForm->pageLength
	 * @param array $data Request data as an associative array. Should contain at least a key \'Search\' with all searched keywords.
	 * @return DataObjectSet
	 */",
 "/**
	 * Get the search query for display in a \"You searched for ...\" sentence.
	 * 
	 * @param array $data
	 * @return string
	 */",
 "/**
	 * Set the maximum number of records shown on each page.
	 * 
	 * @param int $length
	 */",
 "/**
	 * @return int
	 */",
 "/**
 * Standard basic search form which conducts a fulltext search on all {@link SiteTree}
 * objects. 
 *
 * If multilingual content is enabled through the {@link Translatable} extension,
 * only pages the currently set language on the holder for this searchform are found.
 * The language is set through a hidden field in the form, which is prepoluated
 * with {@link Translatable::get_current_locale()} when then form is constructed.
 * 
 * @see Use ModelController and SearchContext for a more generic search implementation based around DataObject
 * @package sapphire
 * @subpackage search
 */",
 "/**
     * Generates a locale object
     * If no locale is given a automatic search is done
     * Then the most probable locale will be automatically set
     * Search order is
     *  1. Given Locale
     *  2. HTTP Client
     *  3. Server Environment
     *  4. Framework Standard
     *
     * @param  string|Zend_Locale $locale (Optional) Locale for parsing input
     * @throws Zend_Locale_Exception When autodetection has been failed
     */",
 "/**
     * Serialization Interface
     *
     * @return string
     */",
 "/**
     * Returns a string representation of the object
     *
     * @return string
     */",
 "/**
     * Returns a string representation of the object
     * Alias for toString
     *
     * @return string
     */",
 "/**
     * Return the default locale
     *
     * @return array Returns an array of all locale string
     */",
 "/**
     * Sets a new default locale
     * If provided you can set a quality between 0 and 1 (or 2 and 100)
     * which represents the percent of quality the browser
     * requested within HTTP
     *
     * @param  string|Zend_Locale $locale  Locale to set
     * @param  float              $quality The quality to set from 0 to 1
     * @throws Zend_Locale_Exception When a autolocale was given
     * @throws Zend_Locale_Exception When a unknown locale was given
     * @return void
     */",
 "/**
     * Expects the Systems standard locale
     *
     * For Windows:
     * f.e.: LC_COLLATE=C;LC_CTYPE=German_Austria.1252;LC_MONETARY=C
     * would be recognised as de_AT
     *
     * @return array
     */",
 "/**
     * Return an array of all accepted languages of the client
     * Expects RFC compilant Header !!
     *
     * The notation can be :
     * de,en-UK-US;q=0.5,fr-FR;q=0.2
     *
     * @return array - list of accepted languages including quality
     */",
 "/**
     * Sets a new locale
     *
     * @param  string|Zend_Locale $locale (Optional) New locale to set
     * @return void
     */",
 "/**
     * Returns the language part of the locale
     *
     * @return language
     */",
 "/**
     * Returns the region part of the locale if available
     *
     * @return string|false - Regionstring
     */",
 "/**
     * Return the accepted charset of the client
     *
     * @return string
     */",
 "/**
     * Returns true if both locales are equal
     *
     * @param  Zend_Locale $object Locale to check for equality
     * @return boolean
     */",
 "/**
     * Returns localized informations as array, supported are several
     * types of informations.
     * For detailed information about the types look into the documentation
     *
     * @param  string             $path   (Optional) Type of information to return
     * @param  string|Zend_Locale $locale (Optional) Locale|Language for which this informations should be returned
     * @param  string             $value  (Optional) Value for detail list
     * @return array Array with the wished information in the given language
     */",
 "/**
     * Returns an array with the name of all languages translated to the given language
     *
     * @param  string|Zend_Locale $locale (Optional) Locale for language translation
     * @return array
     */",
 "/**
     * Returns an array with the name of all scripts translated to the given language
     *
     * @param  string|Zend_Locale $locale (Optional) Locale for script translation
     * @return array
     */",
 "/**
     * Returns an array with the name of all countries translated to the given language
     *
     * @param  string|Zend_Locale $locale (Optional) Locale for country translation
     * @return array
     */",
 "/**
     * Returns an array with the name of all territories translated to the given language
     * All territories contains other countries.
     *
     * @param  string|Zend_Locale $locale (Optional) Locale for territory translation
     * @return array
     */",
 "/**
     * Returns a localized information string, supported are several types of informations.
     * For detailed information about the types look into the documentation
     *
     * @param  string             $value  Name to get detailed information about
     * @param  string             $path   (Optional) Type of information to return
     * @param  string|Zend_Locale $locale (Optional) Locale|Language for which this informations should be returned
     * @return string|false The wished information in the given language
     */",
 "/**
     * Returns the localized language name
     *
     * @param  string $value  Name to get detailed information about
     * @param  string $locale (Optional) Locale for language translation
     * @return array
     */",
 "/**
     * Returns the localized script name
     *
     * @param  string $value  Name to get detailed information about
     * @param  string $locale (Optional) locale for script translation
     * @return array
     */",
 "/**
     * Returns the localized country name
     *
     * @param  string             $value  Name to get detailed information about
     * @param  string|Zend_Locale $locale (Optional) Locale for country translation
     * @return array
     */",
 "/**
     * Returns the localized territory name
     * All territories contains other countries.
     *
     * @param  string             $value  Name to get detailed information about
     * @param  string|Zend_Locale $locale (Optional) Locale for territory translation
     * @return array
     */",
 "/**
     * Returns an array with translated yes strings
     *
     * @param  string|Zend_Locale $locale (Optional) Locale for language translation (defaults to $this locale)
     * @return array
     */",
 "/**
     * Internal function for preparing the returned question regex string
     *
     * @param  string $input Regex to parse
     * @return string
     */",
 "/**
     * Checks if a locale identifier is a real locale or not
     * Examples:
     * \"en_XX\" refers to \"en\", which returns true
     * \"XX_yy\" refers to \"root\", which returns false
     *
     * @param  string|Zend_Locale $locale     Locale to check for
     * @param  boolean            $strict     (Optional) If true, no rerouting will be done when checking
     * @param  boolean            $compatible (DEPRECIATED) Only for internal usage, brakes compatibility mode
     * @return boolean If the locale is known dependend on the settings
     */",
 "/**
     * Finds the proper locale based on the input
     * Checks if it exists, degrades it when necessary
     * Detects registry locale and when all fails tries to detect a automatic locale
     * Returns the found locale as string
     *
     * @param string $locale
     * @throws Zend_Locale_Exception When the given locale is no locale or the autodetection fails
     * @return string
     */",
 "/**
     * Returns a list of all known locales where the locale is the key
     * Only real locales are returned, the internal locales \'root\', \'auto\', \'browser\'
     * and \'environment\' are suppressed
     *
     * @return array List of all Locales
     */",
 "/**
     * Returns the set cache
     *
     * @return Zend_Cache_Core The set cache
     */",
 "/**
     * Sets a cache
     *
     * @param  Zend_Cache_Core $cache Cache to set
     * @return void
     */",
 "/**
     * Returns true when a cache is set
     *
     * @return boolean
     */",
 "/**
     * Removes any set cache
     *
     * @return void
     */",
 "/**
     * Clears all set cache data
     *
     * @return void
     */",
 "/**
     * Internal function, returns a single locale on detection
     *
     * @param  string|Zend_Locale $locale (Optional) Locale to work on
     * @param  boolean            $strict (Optional) Strict preparation
     * @throws Zend_Locale_Exception When no locale is set which is only possible when the class was wrong extended
     * @return string
     */",
 "/**
     * Search the locale automatically and return all used locales
     * ordered by quality
     *
     * Standard Searchorder is Browser, Environment, Default
     *
     * @param  string  $searchorder (Optional) Searchorder
     * @return array Returns an array of all detected locales
     */",
 "/**
 * Base class for localization
 *
 * @category  Zend
 * @package   Zend_Locale
 * @copyright Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Returns a list of default options that can
	 * be used to populate a select box, or compare against
	 * input values. Starts by default at the current year,
	 * and counts back to 1900.
	 *
	 * @param int $start starting date to count down from
	 * @param int $end end date to count down to
	 * @return array
	 */",
 "/**
 * Represents a single year field.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
    * Initialise the timer. with the current micro time
    */",
 "/**
    *   Start an individual timer
    *   This will pause the running timer and place it on a stack.
    *   @param string $name name of the timer
    *   @param string optional $desc description of the timer
    */",
 "/**
    *   Stop an individual timer
    *   Restart the timer that was running before this one
    *   @param string $name name of the timer
    */",
 "/**
    *   measure the elapsed time of a timer without stoping the timer if
    *   it is still running
    */",
 "/**
    *   Measure the elapsed time since the profile class was initialised
    *
    */",
 "/**
    *   print out a log of all the timers that were registered
    *
    */",
 "/**
    * Get the current time as accuratly as possible
    *
    */",
 "/**
    * resume  an individual timer
    *
    */",
 "/**
    *   suspend  an individual timer
    *
    */",
 "/**
 * Execution time profiler.
 * 
 * @package sapphire
 * @subpackage misc
 */",
 "/**
	 * The the text to show in the dropdown for this action
	 */",
 "/**
	 * Get text to be shown while the action is being processed, of the form
	 * \"publishing pages\".
	 */",
 "/**
	 * Run this action for the given set of pages.
	 * Return a set of status-updated JavaScript to return to the CMS.
	 */",
 "/**
	 * Helper method for processing batch actions.
	 * Returns a set of status-updating JavaScript to return to the CMS.
	 *
	 * @param $pages The DataObjectSet of SiteTree objects to perform this batch action
	 * on.
	 * @param $helperMethod The method to call on each of those objects.
	 */",
 "/**
	 * Helper method for applicablePages() methods.  Acts as a skeleton implementation.
	 * 
	 * @param $ids The IDs passed to applicablePages
	 * @param $methodName The canXXX() method to call on each page to check if the action is applicable
	 * @param $checkStagePages Set to true if you want to check stage pages
	 * @param $checkLivePages Set to true if you want to check live pages (e.g, for deleted-from-draft)
	 */",
 "/**
	 * If you wish to restrict the batch action to some users, overload this function.
	 */",
 "/**
 * A class representing back actions 
 * 
 * <code>
 * CMSMain::register_batch_action(\'publishitems\', new CMSBatchAction(\'doPublish\', 
 * 	_t(\'CMSBatchActions.PUBLISHED_PAGES\', \'published %d pages\')));
 * </code>
 * 
 * @package cms
 * @subpackage batchaction
 */",
 "/**
 * Publish items batch action.
 * 
 * @package cms
 * @subpackage batchaction
 */",
 "/**
 * Delete items batch action.
 * 
 * @package cms
 * @subpackage batchaction
 */",
 "/**
 * Unpublish (delete from live site) items batch action.
 * 
 * @package cms
 * @subpackage batchaction
 */",
 "/**
	 * Used to emulate RESTful GET requests with XML data.
	 * 
	 * @param string $class
	 * @param Number $id
	 * @param string $relation Relation name
	 * @return string
	 */",
 "/**
	 * Used to emulate RESTful GET requests with JSON data.
	 * 
	 * @param string $class
	 * @param Number $id
	 * @param string $relation Relation name
	 * @param string $username
	 * @param string $password
	 * @return string
	 */",
 "/**
	 * Used to emulate RESTful POST and PUT requests with XML data.
	 * 
	 * @param string $class
	 * @param Number $id
	 * @param string $relation Relation name
	 * @param array $data 
 	 * @param string $username
	 * @param string $password
	 * @return string
	 */",
 "/**
	 * Used to emulate RESTful POST and PUT requests with JSON data.
	 * 
	 * @param string $class
	 * @param Number $id
	 * @param string $relation Relation name
	 * @param array $data
	 * @param string $username
	 * @param string $password
	 * @return string
	 */",
 "/**
	 * Used to emulate RESTful DELETE requests.
	 *
	 * @param string $class
	 * @param Number $id
	 * @param string $relation Relation name
	 * @param string $username
	 * @param string $password
	 * @return string
	 */",
 "/**
	 * Used to emulate RESTful DELETE requests.
	 *
	 * @param string $class
	 * @param Number $id
	 * @param string $relation Relation name
	 * @param string $username
	 * @param string $password
	 * @return string
	 */",
 "/**
	 * Faking an HTTP Basicauth login in the PHP environment
	 * that RestfulServer can pick up. 
	 *
	 * @param string $username Username
	 * @param string $password Plaintext password
	 */",
 "/**
	 * @param string $class
	 * @param Number $id
	 * @param string $relation
	 * @param string $extension
	 * @return string
	 */",
 "/**
	 * @param SS_HTTPResponse $response
	 * @return string XML string containing the HTTP error message
	 */",
 "/**
 * Basic SOAP Server to access and modify DataObject instances.
 * You can enable SOAP access on a DataObject by setting {@link DataObject::$api_access} to true.
 * This means that you\'ll also enable a RESTful API through {@link RestfulServer}.
 * 
 * Usage - Getting a record:
 * <code>
 * $c = new SoapClient(\'http://mysite.com/soap/v1/wsdl\');
 * echo $c->getXML(\"MyClassName\", 99); // gets record #99 as xml
 * </code>
 *
 * Usage - Updating a record:
 * <code>
 * $c = new SoapClient(\'http://mysite.com/soap/v1/wsdl\');
 * $data = array(\'MyProperty\' => \'MyUpdatedValue\');
 * echo $c->putXML(\"MyClassName\", 99, null, $data);
 * </code>
 * 
 * Usage - Creating a record:
 * <code>
 * $c = new SoapClient(\'http://mysite.com/soap/v1/wsdl\');
 * $data = array(\'MyProperty\' => \'MyValue\');
 * echo $c->putXML(\"MyClassName\", null, null, $data);
 * </code>
 *
 * Usage - Creating a record:
 * <code>
 * $c = new SoapClient(\'http://mysite.com/soap/v1/wsdl\');
 * echo $c->deleteXML(\"MyClassName\");
 * </code>
 *
 * @todo Test relation methods
 * 
 * @package sapphire
 * @subpackage api
 */",
 "/**
 * Field that generates a heading tag.
 * This can be used to add extra text in your forms.
 * @package forms
 * @subpackage fields-dataless
 */",
 "/**
	 * CAVEAT: for search to work properly $labelField must be a database field, or you need to setSearchFunction.
	 *
	 * @param string $name the field name
	 * @param string $title the field label
	 * @param sourceObject The object-type to list in the tree.  Must be a \'hierachy\' object.  Alternatively,
	 * you can set this to an array of key/value pairs, like a dropdown source.  In this case, the field
	 * will act like show a flat list of tree items, without any hierachy.   This is most useful in
	 * conjunction with TreeMultiselectField, for presenting a set of checkboxes in a compact view.
	 * @param string $keyField to field on the source class to save as the field value (default ID).
	 * @param string $labelField the field name to show as the human-readable value on the tree (default Title).
	 * @param string $showSearch enable the ability to search the tree by entering the text in the input field.
	 */",
 "/**
	 * Set the ID of the root node of the tree. This defaults to 0 - i.e. displays the whole tree.
	 *
	 * @param int $ID
	 */",
 "/**
	 * Set a callback used to filter the values of the tree before displaying to the user.
	 *
	 * @param callback $callback
	 */",
 "/**
	 * Set a callback used to search the hierarchy globally, even before applying the filter.
	 *
	 * @param callback $callback
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Get the whole tree of a part of the tree via an AJAX request.
	 *
	 * @param SS_HTTPRequest $request
	 * @return string
	 */",
 "/**
	 * Marking function for the tree, which combines different filters sensibly. If a filter function has been set,
	 * that will be called. If the source is a folder, automatically filter folder. And if search text is set, filter on that
	 * too. Return true if all applicable conditions are true, false otherwise.
	 * @param $node
	 * @return unknown_type
	 */",
 "/**
	 * Populate $this->searchIds with the IDs of the pages matching the searched parameter and their parents.
	 * Reverse-constructs the tree starting from the leaves. Initially taken from CMSSiteTreeFilter, but modified
	 * with pluggable search function.
	 */",
 "/**
	 * Get the object where the $keyField is equal to a certain value
	 *
	 * @param string|int $key
	 * @return DataObject
	 */",
 "/**
	 * Changes this field to the readonly field.
	 */",
 "/**
 * Dropdown-like field that allows you to select an item from a hierachical AJAX-expandable tree.
 * 
 * Creates a field which opens a dropdown (actually a div via javascript included for you) which contains a tree with the ability to select a singular item for the value of the field. This field has the ability to store one-to-one joins related to hierarchy or a hierarchy based filter.
 * 
 * **Note:** your source object must use an implementation of hierarchy for this field to generate the tree correctly, e.g. groups, sitetree etc.
 * 
 * All operations are carried out through behaviour and javascript.
 * 
 * <b>Usage</b>.
 * 
 * treedropdownfield is used on {@link VirtualPage} a class which creates another instance of a page, with exactly the same fields that can be represented on another part of the site. The code below is taken from an example of this.
 * 
 * <code>
 * // Put this at the top of the class that defines your model (e.g. the class that extends DataObject).
 * static $has_one = array(
 *   \'RightContent\' => \'SiteTree\'
 * );
 * 
 * // Setup the linking to the original page. (Put this in your getCMSFields() method or similar)
 * $treedropdownfield = new TreeDropdownField(\"RightContentID\", \"Choose a page to show on the right:\", \"SiteTree\");
 * </code>
 * 
 * This will generate a tree allowing the user to expand and contract subsections to find the appropriate page to save to the field.
 * 
 * @see TreeMultiselectField for the same implementation allowing multiple selections
 * @see DropdownField for a simple <select> field with a single element.
 * @see CheckboxSetField for multiple selections through checkboxes.
 * @see OptionsetField for single selections via radiobuttons.
 *
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
	 * Create a new selection group.
	 * @param name The field name of the selection group.
	 * @param items The list of items to show.  This should be a map.  The keys will be the radio
	 * button option names, and the values should be the associated field to display.  If you want,
	 * you can make this field a composite field.
	 * 
	 * If you want to a have a title that is different from the value of the key, you can express it
	 * as \"InternalVal//This is the Title\"
	 */",
 "/**
	 * Return a readonly version of this field.  Keeps the composition but returns readonly
	 * versions of all the children
	 */",
 "/**
 * SelectionGroup represents a number of fields that are selectable by a radio button that appears at
 * the beginning of each item.  Using CSS, you can configure the field to only display its contents if
 * the corresponding radio button is selected.
 * @package forms
 * @subpackage fields-structural
 */",
 "/**
	 * Creates a new dropdown field.
	 * @param $name The field name
	 * @param $title The field title
	 * @param $source An map of the dropdown items
	 * @param $value The current value
	 * @param $form The parent form
	 * @param $emptyString mixed Add an empty selection on to of the {@link $source}-Array 
	 * 	(can also be boolean, which results in an empty string)
	 *  Argument is deprecated in 2.3, please use {@link setHasEmptyDefault()} and {@link setEmptyString()} instead.
	 */",
 "/**
	 * Returns a <select> tag containing all the appropriate <option> tags.
	 * Makes use of {@link FormField->createTag()} to generate the <select>
	 * tag and option elements inside is as the content of the <select>.
	 * 
	 * @return string HTML tag for this dropdown field
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Gets the source array including any empty default values.
	 * 
	 * @return array
	 */",
 "/**
	 * @param array $source
	 */",
 "/**
	 * @param boolean $bool
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Set the default selection label, e.g. \"select...\".
	 * Defaults to an empty string. Automatically sets
	 * {@link $hasEmptyDefault} to true.
	 * 
	 * @param string $str
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Set form being disabled
	 */",
 "/**
 * Dropdown field, created from a <select> tag.
 * 
 * <b>Setting a $has_one relation</b>
 * 
 * Using here an example of an art gallery, with Exhibition pages, 
 * each of which has a Gallery they belong to.  The Gallery class is also user-defined.
 * <code>
 * 	static $has_one = array(
 * 		\'Gallery\' => \'Gallery\',
 * 	);
 * 
 * 	public function getCMSFields() {
 * 		$fields = parent::getCMSFields();
 * 		$galleries = DataObject::get(\'Gallery\');
 * 		if ($galleries) {
 * 			$galleries = $galleries->toDropdownMap(\'ID\', \'Title\', \'(Select one)\', true);
 * 		}
 * 		$fields->addFieldToTab(\'Root.Content.Main\', new DropdownField(\'GalleryID\', \'Gallery\', $galleries), \'Content\');
 * </code>
 * 
 * As you see, you need to put \"GalleryID\", rather than \"Gallery\" here.
 * 
 * <b>Populate with Array</b>
 * 
 * Example model defintion:
 * <code>
 * class MyObject extends DataObject {
 *   static $db = array(
 *     \'Country\' => \"Varchar(100)\"
 *   );
 * }			
 * </code>
 * 
 * Exampe instantiation:
 * <code>
 * new DropdownField(
 *   \'Country\',
 *   \'Country\',
 *   array(
 *     \'NZ\' => \'New Zealand\',
 *     \'US\' => \'United States\'
 *     \'GEM\'=> \'Germany\'
 *   )
 * );
 * </code>
 * 
 * <b>Populate with Enum-Values</b>
 * 
 * You can automatically create a map of possible values from an {@link Enum} database column.
 * 
 * Example model definition:
 * <code>
 * class MyObject extends DataObject {
 *   static $db = array(
 *     \'Country\' => \"Enum(\'New Zealand,United States,Germany\',\'New Zealand\')\"
 *   );
 * }			
 * </code>
 * 
 * Field construction:
 * <code>
 * new DropdownField(
 *   \'Country\',
 *   \'Country\',
 *   singleton(\'MyObject\')->dbObject(\'Country\')->enumValues()
 * );
 * </code>
 * 
 * @see CheckboxSetField for multiple selections through checkboxes instead.
 * @see ListboxField for a single <select> box (with single or multiple selections).
 * @see TreeDropdownField for a rich and customizeable UI that can visualize a tree of selectable elements
 * 
 * @package forms
 * @subpackage fields-basic
 */",
 "/**
	 * allows the value to be set ( not including $ signs and number format...)
	 */",
 "/**
	 * Overwrite the datavalue before saving to the db ;-)
	 */",
 "/**
	 * Create a new class for this field
	 */",
 "/**
	 * @see http://regexlib.com/REDetails.aspx?regexp_id=126
	 */",
 "/**
 * Currency field.
 * 
 * @todo Add localization support, see http://open.silverstripe.com/ticket/2931 
 *
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * overloaded to display the correctly formated value for this datatype 
	 */",
 "/**
	 * This already is a readonly field.
	 */",
 "/**
 * Readonly version of a {@link CurrencyField}.
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * overloaded to display the correctly formated value for this datatype 
	 */",
 "/**
 * Readonly version of a {@link CurrencyField}.
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * Site search form
	 */",
 "/**
	 * Process and render search results.
	 *
	 * @param array $data The raw request data submitted by user
	 * @param SearchForm $form The form instance that was submitted
	 * @param SS_HTTPRequest $request Request generated for this action
	 */",
 "/**
 * Extension to provide a search interface when applied to ContentController
 *
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Handle a generic action passed in by the URL mapping.
	 *
	 * @param SS_HTTPRequest $request
	 */",
 "/**
	 * Action to render results for an autocomplete filter.
	 *
	 * @param SS_HTTPRequest $request
	 * @return void
	 */",
 "/**
	 * Action to populate edit box with a single data object via Ajax query
	 */",
 "/**
 * Used by ModelAdmin scaffolding, to manage many-many relationships. 
 *
 * @package forms
 * @subpackage fields-relational
 */",
 "/**
 * Checks if a value is in a given set.
 * SQL syntax used: Column IN (\'val1\',\'val2\')
 * 
 * @todo Add negation (NOT IN)6
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Creates the question from random variables, which are also saved to the session.
	 * @return String
	 */",
 "/**
	 * Checks the given answer if it matches the addition of the saved session variables. Users can answer using words or digits.
	 */",
 "/**
	 * Helper method for converting digits to their equivelant english words
	 */",
 "/**
 * Tools for adding an optional Maths protection question to a form.
 * 
 * @package cms
 * @subpackage comments
 */",
 "/**
	 * Includes the JavaScript neccesary for this field to work using the {@link Requirements} system.
	 */",
 "/**
	 * @see TextareaField::__construct()
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * @return HtmlEditorField_Readonly
	 */",
 "/**
 * A TinyMCE-powered WYSIWYG HTML editor field with image and link insertion and tracking capabilities. Editor fields
 * are created from <textarea> tags, which are then converted with JavaScript.
 *
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
 * Readonly version of an {@link HTMLEditorField}.
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
	 * Searches the SiteTree for display in the dropdown
	 *  
	 * @return callback
	 */",
 "/**
	 * Return a {@link Form} instance allowing a user to
	 * add links in the TinyMCE content editor.
	 *  
	 * @return Form
	 */",
 "/**
	 * Return a {@link Form} instance allowing a user to
	 * add images to the TinyMCE content editor.
	 *  
	 * @return Form
	 */",
 "/**
 * External toolbar for the HtmlEditorField.
 * This is used by the CMS
 * @package forms
 * @subpackage fields-formattedinput
 */",
 "/**
 * A FormField showing a list of files
 * @package cms
 * @subpackage assets
 */",
 "/**
	 * Minimum password length
	 */",
 "/**
	 * Check the character strength of the password.
	 *
	 * Eg: $this->characterStrength(3, array(\"lowercase\", \"uppercase\", \"digits\", \"punctuation\"))
	 * 
	 * @param $minScore The minimum number of character tests that must pass
	 * @param $testNames The names of the tests to perform
	 */",
 "/**
	 * Check a number of previous passwords that the user has used, and don\'t let them change to that.
	 */",
 "/**
	 * @param String $password
	 * @param Member $member
	 * @return ValidationResult
	 */",
 "/**
 * This class represents a validator for member passwords.
 * 
 * <code>
 * $pwdVal = new PasswordValidator();
 * $pwdValidator->minLength(7);
 * $pwdValidator->checkHistoricalPasswords(6);
 * $pwdValidator->characterStrength(\'lowercase\',\'uppercase\',\'digits\',\'punctuation\');
 * 
 * Member::set_password_validator($pwdValidator);
 * </code>
 *
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * setter for ThumbnailStripField::use_legacy_image_search
	 * @param boolean $enable
	 */",
 "/**
	 * getter for ThumbnailStripField::use_legacy_image_search
	 * @return boolean
	 */",
 "/**
	 * Populate the Thumbnail strip field, by looking for a folder, 
	 * and the descendants of this folder.
	 *
	 * @see ThumbnailStripField::use_legacy_image_search
	 */",
 "/**
 * Provides a strip of thumbnails showing all of the images in the system.
 * It will be tied to a \'parent field\' that will provide it with a filter by which to reduce the number
 * of thumbnails displayed.
 * @package cms
 * @subpackage assets
 */",
 "/**
	 * Save the results into the form
	 */",
 "/**
	 * Return the site tree
	 */",
 "/**
 * @deprecated Use {@link TreeDropdownField} or {@link TreeMultiselectField}
 * @package forms
 * @subpackage fields-relational
 */",
 "/** 
	 * Generates the array of fields required for the page type.
	 */",
 "/**
	 * We can only publish the page if there is a published source page
	 */",
 "/**
	 * Return true if we can delete this page from the live site, which is different from can
	 * we publish it.
	 */",
 "/**
	 * Returns true if is page is publishable by anyone at all
	 * Return false if the source page isn\'t published yet.
	 * 
	 * Note that isPublishable doesn\'t affect ete from live, only publish.
	 */",
 "/**
	 * Generate the CMS fields from the fields from the original page.
	 */",
 "/** 
	 * We have to change it to copy all the content from the original page first.
	 */",
 "/**
	 * Ensure we have an up-to-date version of everything.
	 */",
 "/**
	 * Allow attributes on the master page to pass
	 * through to the virtual page
	 *
	 * @param string $field 
	 * @return mixed
	 */",
 "/**
	 * Pass unrecognized method calls on to the original data object
	 *
	 * @param string $method 
	 * @param string $args 
	 */",
 "/**
	 * Overwrite to also check for method on the original data object
	 *
	 * @param string $method 
	 * @return bool 
	 */",
 "/**
* Virtual Page creates an instance of a  page, with the same fields that the original page had, but readonly.
* This allows you can have a page in mulitple places in the site structure, with different children without duplicating the content
* Note: This Only duplicates $db fields and not the $has_one etc.. 
* @package cms
*/",
 "/**
	 * Reloads the content if the version is different ;-)
	 */",
 "/**
	 * When the virtualpage is loaded, check to see if the versions are the same
	 * if not, reload the content.
	 * NOTE: Virtual page must have a container object of subclass of sitetree.
	 * We can\'t load the content without an ID or record to copy it from.
	 */",
 "/**
	 * Also check the original object\'s original controller for the method
	 *
	 * @param string $method 
	 * @return bool 
	 */",
 "/**
	 * Pass unrecognized method calls on to the original controller
	 *
	 * @param string $method 
	 * @param string $args 
	 */",
 "/**
 * Controller for the virtual page.
 * @package cms
 */",
 "/**
	 * Note: Overloaded in {@link Widget_Controller}.
	 * 
	 * @return string HTML
	 */",
 "/**
	 * Renders the widget content in a custom template with the same name as the current class.
	 * This should be the main point of output customization.
	 * 
	 * Invoked from within WidgetHolder.ss, which contains
	 * the \"framing\" around the custom content, like a title.
	 * 
	 * Note: Overloaded in {@link Widget_Controller}.
	 * 
	 * @return string HTML
	 */",
 "/**
	 * @see Widget_Controller->editablesegment()
	 */",
 "/**
 * Widgets let CMS authors drag and drop small pieces of functionality into 
 * defined areas of their websites.
 * 
 * ## Forms
 * You can use forms in widgets by implementing a {@link Widget_Controller}.
 * See {@link Widget_Controller} for more information.
 * 
 * @package sapphire
 * @subpackage widgets
 */",
 "/**
	 * @return Widget
	 */",
 "/**
	 * Overloaded from {@link Widget->Content()}
	 * to allow for controller/form linking.
	 * 
	 * @return string HTML
	 */",
 "/**
	 * Overloaded from {@link Widget->WidgetHolder()}
	 * to allow for controller/form linking.
	 * 
	 * @return string HTML
	 */",
 "/**
	 * Uses the `WidgetEditor.ss` template and {@link Widget->editablesegment()}
	 * to render a administrator-view of the widget. It is assumed that this
	 * view contains form elements which are submitted and saved through {@link WidgetAreaEditor}
	 * within the CMS interface.
	 * 
	 * @return string HTML
	 */",
 "/**
 * Optional controller for every widget which has its own logic,
 * e.g. in forms. It always handles a single widget, usually passed
 * in as a database identifier through the controller URL.
 * Needs to be constructed as a nested controller
 * within a {@link ContentController}.
 * 
 * ## Forms
 * You can add forms like in any other sapphire controller.
 * If you need access to the widget from within a form,
 * you can use `$this->controller->getWidget()` inside the form logic.
 * Note: Widget controllers currently only work on {@link Page} objects,
 * because the logic is implemented in {@link ContentController->handleWidget()}.
 * Copy this logic and the URL rules to enable it for other controllers.
 * 
 * @package sapphire
 * @subpackage widgets
 */",
 "/**
 * @package sapphire
 * @subpackage widgets
 */",
 "/**
	 * Converts a field spec into an object creator. For example: \"Int\" becomes \"new Int($fieldName);\" and \"Varchar(50)\"
	 * becomes \"new Varchar($fieldName, 50);\".
	 *
	 * @param string $fieldSchema The field spec
	 * @return string
	 */",
 "/**
	 * Convert a field schema (e.g. \"Varchar(50)\") into a casting object creator array that contains both a className
	 * and castingHelper constructor code. See {@link castingObjectCreator} for more information about the constructor.
	 *
	 * @param string $fieldSchema
	 * @return array
	 */",
 "/**
	 * Check if a field exists on this object or its failover.
	 *
	 * @param string $property
	 * @return bool
	 */",
 "/**
	 * Get the value of a property/field on this object. This will check if a method called get{$property} exists, then
	 * check if a field is available using {@link ViewableData::getField()}, then fall back on a failover object.
	 *
	 * @param string $property
	 * @return mixed
	 */",
 "/**
	 * Set a property/field on this object. This will check for the existence of a method called set{$property}, then
	 * use the {@link ViewableData::setField()} method.
	 *
	 * @param string $property
	 * @param mixed $value
	 */",
 "/**
	 * Check if a field exists on this object. This should be overloaded in child classes.
	 *
	 * @param string $field
	 * @return bool
	 */",
 "/**
	 * Get the value of a field on this object. This should be overloaded in child classes.
	 *
	 * @param string $field
	 * @return mixed
	 */",
 "/**
	 * Set a field on this object. This should be overloaded in child classes.
	 *
	 * @param string $field
	 * @param mixed $value
	 */",
 "/**
	 * Add methods from the {@link ViewableData::$failover} object, as well as wrapping any methods prefixed with an
	 * underscore into a {@link ViewableData::cachedCall()}.
	 */",
 "/**
	 * Merge some arbitrary data in with this object. This method returns a {@link ViewableData_Customised} instance
	 * with references to both this and the new custom data.
	 *
	 * Note that any fields you specify will take precedence over the fields on this object.
	 *
	 * @param array|ViewableData $data
	 * @return ViewableData_Customised
	 */",
 "/**
	 * @param ViewableData $object
	 */",
 "/**
	 * Get the class a field on this object would be casted to, as well as the casting helper for casting a field to
	 * an object (see {@link ViewableData::castingHelper()} for information on casting helpers).
	 *
	 * The returned array contains two keys:
	 *  - className: the class the field would be casted to (e.g. \"Varchar\")
	 *  - castingHelper: the casting helper for casting the field (e.g. \"return new Varchar($fieldName)\")
	 *
	 * @param string $field
	 * @return array
	 */",
 "/**
	 * Return the \"casting helper\" (a piece of PHP code that when evaluated creates a casted value object) for a field
	 * on this object.
	 *
	 * @param string $field
	 * @return string
	 */",
 "/**
	 * Get the class name a field on this object will be casted to
	 *
	 * @param string $field
	 * @return string
	 */",
 "/**
	 * Return the string-format type for the given field.
	 *
	 * @param string $field
	 * @return string \'xml\'|\'raw\'
	 */",
 "/**
	 * Save the casting cache for this object (including data from any failovers) into a variable
	 *
	 * @param reference $cache
	 */",
 "/**
	 * Render this object into the template, and get the result as a string. You can pass one of the following as the
	 * $template parameter:
	 *  - a template name (e.g. Page)
	 *  - an array of possible template names - the first valid one will be used
	 *  - an SSViewer instance
	 *
	 * @param string|array|SSViewer $template the template to render into
	 * @param array $customFields fields to customise() the object with before rendering
	 * @return string
	 */",
 "/**
	 * Get the value of a field on this object, automatically inserting the value into any available casting objects
	 * that have been specified.
	 *
	 * @param string $fieldName
	 * @param array $arguments
	 * @param bool $forceReturnedObject if TRUE, the value will ALWAYS be casted to an object before being returned,
	 *        even if there is no explicit casting information
	 * @param string $cacheName a custom cache name
	 */",
 "/**
	 * A simple wrapper around {@link ViewableData::obj()} that automatically caches the result so it can be used again
	 * without re-running the method.
	 *
	 * @param string $field
	 * @param array $arguments
	 * @param string $identifier an optional custom cache identifier
	 */",
 "/**
	 * Checks if a given method/field has a valid value. If the result is an object, this will return the result of the
	 * exists method, otherwise will check if the result is not just an empty paragraph tag.
	 *
	 * @param string $field
	 * @param array $arguments
	 * @param bool $cache
	 * @return bool
	 */",
 "/**
	 * Get the string value of a field on this object that has been suitable escaped to be inserted directly into a
	 * template.
	 */",
 "/**
	 * Return the value of the field without any escaping being applied.
	 */",
 "/**
	 * Return the value of a field in an SQL-safe format.
	 */",
 "/**
	 * Return the value of a field in a JavaScript-save format.
	 */",
 "/**
	 * Return the value of a field escaped suitable to be inserted into an XML node attribute.
	 */",
 "/**
	 * Get an array of XML-escaped values by field name
	 *
	 * @param array $elements an array of field names
	 * @return array
	 */",
 "/**
	 * Return a single-item iterator so you can iterate over the fields of a single record.
	 *
	 * This is useful so you can use a single record inside a <% control %> block in a template - and then use
	 * to access individual fields on this object.
	 *
	 * @return ArrayIterator
	 */",
 "/** 
	 * Set the current iterator properties - where we are on the iterator.
	 *
	 * @param int $pos position in iterator
	 * @param int $totalItems total number of items
	 */",
 "/**
	 * Returns true if this object is the first in a set.
	 *
	 * @return bool
	 */",
 "/**
	 * Returns true if this object is the last in a set.
	 *
	 * @return bool
	 */",
 "/**
	 * Returns \'first\' or \'last\' if this is the first or last object in the set.
	 *
	 * @return string|null
	 */",
 "/**
	 * Return true if this object is between the first & last objects.
	 *
	 * @return bool
	 */",
 "/**
	 * Return \'middle\' if this object is between the first & last objects.
	 *
	 * @return string|null
	 */",
 "/**
	 * Return true if this object is an even item in the set.
	 *
	 * @return bool
	 */",
 "/**
	 * Return true if this is an odd item in the set.
	 *
	 * @return bool
	 */",
 "/**
	 * Return \'even\' or \'odd\' if this object is in an even or odd position in the set respectively.
	 *
	 * @return string
	 */",
 "/**
	 * Return the numerical position of this object in the container set. The count starts at $startIndex.
	 *
	 * @param int $startIndex Number to start count from.
	 * @return int
	 */",
 "/**
	 * Return the total number of \"sibling\" items in the dataset.
	 *
	 * @return int
	 */",
 "/**
	 * Returns the modulus of the numerical position of the item in the data set.
	 * The count starts from $startIndex, which defaults to 1.
	 * @param int $Mod The number to perform Mod operation to.
	 * @param int $startIndex Number to start count from.
	 * @return int
	 */",
 "/**
	 * When rendering some objects it is necessary to iterate over the object being rendered, to do this, you need
	 * access to itself.
	 *
	 * @return ViewableData
	 */",
 "/**
	 * Return the directory if the current active theme (relative to the site root).
	 *
	 * This method is useful for things such as accessing theme images from your template without hardcoding the theme
	 * page - e.g. <img src=\"$ThemeDir/images/something.gif\">.
	 *
	 * This method should only be used when a theme is currently active. However, it will fall over to the current
	 * project directory.
	 *
	 * @param string $subtheme the subtheme path to get
	 * @return string
	 */",
 "/**
	 * Get part of the current classes ancestry to be used as a CSS class.
	 *
	 * This method returns an escaped string of CSS classes representing the current classes ancestry until it hits a
	 * stop point - e.g. \"Page DataObject ViewableData\".
	 *
	 * @param string $stopAtClass the class to stop at (default: ViewableData)
	 * @return string
	 * @uses ClassInfo
	 */",
 "/**
	 * @see Member::currentUser()
	 */",
 "/**
	 * Return a CSRF-preventing ID to insert into a form.
	 *
	 * @return string
	 */",
 "/**
	 * @see Permission::check()
	 */",
 "/**
	 * @see Director::absoluteBaseURL()
	 */",
 "/**
	 * @see Director::is_ajax()
	 */",
 "/**
	 * @see i18n::get_locale()
	 */",
 "/**
	 * Return debug information about this object that can be rendered into a template
	 *
	 * @return ViewableData_Debugger
	 */",
 "/**
	 * @see Controller::curr()
	 */",
 "/**
	 * @see SSViewer::topLevel()
	 */",
 "/**
 * A ViewableData object is any object that can be rendered into a template/view.
 *
 * A view interrogates the object being currently rendered in order to get data to render into the template. This data
 * is provided and automatically escaped by ViewableData. Any class that needs to be available to a view (controllers,
 * {@link DataObject}s, page controls) should inherit from this class.
 *
 * @package sapphire
 * @subpackage view
 */",
 "/**
	 * Instantiate a new customised ViewableData object
	 *
	 * @param ViewableData $originalObject
	 * @param ViewableData $customisedObject
	 */",
 "/**
 * @package sapphire
 * @subpackage view
 */",
 "/**
	 * @param ViewableData $object
	 */",
 "/**
	 * Return debugging information, as XHTML. If a field name is passed, it will show debugging information on that
	 * field, otherwise it will show information on all methods and fields.
	 *
	 * @param string $field the field name
	 * @return string
	 */",
 "/**
 * Allows you to render debug information about a {@link ViewableData} object into a template.
 *
 * @package sapphire
 * @subpackage view
 */",
 "/**
	 * Applies an exact match (equals) on a field value.
	 *
	 * @return unknown
	 */",
 "/**
 * Selects textual content with an exact match between columnname and keyword.
 *
 * @todo case sensitivity switch
 * @todo documentation
 * 
 * @package sapphire
 * @subpackage search
 */",
 "/**
	 * Generate CMS main menu items by collecting valid 
	 * subclasses of {@link LeftAndMain}
	 */",
 "/**
	 * Add Director rules for all of the CMS controllers.
	 */",
 "/**
	 * Add a LeftAndMain controller to the CMS menu.
	 *
	 * @param string $controllerClass The class name of the controller
	 * @return The result of the operation
	 * @todo A director rule is added when a controller link is added, but it won\'t be removed
	 *			when the item is removed. Functionality needed in {@link Director}.
	 */",
 "/**
	 * Return a CMSMenuItem to add the given controller to the CMSMenu
	 */",
 "/**
	 * Add the appropriate Director rules for the given controller.
	 */",
 "/**
	 * Add an arbitrary URL to the CMS menu.
	 *
	 * @param string $code A unique identifier (used to create a CSS ID and as it\'s key in {@link $menu_items}
	 * @param string $menuTitle The link\'s title in the CMS menu
	 * @param string $url The url of the link
	 * @param integer $priority The menu priority (sorting order) of the menu item.  Higher priorities will be further left.
	 * @return boolean The result of the operation.
	 */",
 "/**
	 * Add a navigation item to the main administration menu showing in the top bar.
	 *
	 * uses {@link CMSMenu::$menu_items}
	 *
	 * @param string $code Unique identifier for this menu item (e.g. used by {@link replace_menu_item()} and
	 * 					{@link remove_menu_item}. Also used as a CSS-class for icon customization.
	 * @param string $menuTitle Localized title showing in the menu bar 
	 * @param string $url A relative URL that will be linked in the menu bar.
	 * @param string $controllerClass The controller class for this menu, used to check permisssions.  
	 * 					If blank, it\'s assumed that this is public, and always shown to users who 
	 * 					have the rights to access some other part of the admin area.
	 * @return boolean Success
	 */",
 "/**
	 * Get a single menu item by its code value.
	 *
	 * @param string $code
	 * @return array
	 */",
 "/**
	 * Get all menu entries.
	 *
	 * @return array
	 */",
 "/**
	 * Get all menu items that the passed member can view.
	 * Defaults to {@link Member::currentUser()}.
	 * 
	 * @param Member $member
	 * @return array
	 */",
 "/**
	 * Removes an existing item from the menu.
	 *
	 * @param string $code Unique identifier for this menu item
	 */",
 "/**
	 * Clears the entire menu
	 */",
 "/**
	 * Replace a navigation item to the main administration menu showing in the top bar.
	 *
	 * @param string $code Unique identifier for this menu item (e.g. used by {@link replace_menu_item()} and
	 * 					{@link remove_menu_item}. Also used as a CSS-class for icon customization.
	 * @param string $menuTitle Localized title showing in the menu bar 
	 * @param string $url A relative URL that will be linked in the menu bar.
	 * 					Make sure to add a matching route via {@link Director::addRules()} to this url.
	 * @param string $controllerClass The controller class for this menu, used to check permisssions.  
	 * 					If blank, it\'s assumed that this is public, and always shown to users who 
	 * 					have the rights to access some other part of the admin area.
	 * @return boolean Success
	 */",
 "/**
	 * Add a previously built menuitem object to the menu
	 */",
 "/**
	 * A utility funciton to retrieve subclasses of a given class that
	 * are instantiable (ie, not abstract) and have a valid menu title.
	 *
	 * @todo A variation of this function could probably be moved to {@link ClassInfo}
	 * @param string $root The root class to begin finding subclasses
	 * @param boolean $recursive Look for subclasses recursively?
	 * @return array Valid, unique subclasses
	 */",
 "/**
	 * IteratorAggregate Interface Method.  Iterates over the menu items.
	 */",
 "/**
	 * Provide menu titles to the i18n entity provider
	 */",
 "/**
 * The object manages the main CMS menu. See {@link LeftAndMain::init()} for example usage.
 * 
 * The menu will be automatically populated with menu items for subclasses of {@link LeftAndMain}. 
 * That is, for each class in the CMS that creates an administration panel, a CMS menu item will be created. 
 * The default configuration will also include a \'help\' link to the SilverStripe user documentation.
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
	 * Returns the children of this DataObject as an XHTML UL. This will be called recursively on each child,
	 * so if they have children they will be displayed as a UL inside a LI.
	 * @param string $attributes Attributes to add to the UL.
	 * @param string $titleEval PHP code to evaluate to start each child - this should include \'<li>\'
	 * @param string $extraArg Extra arguments that will be passed on to children, for if they overload this function.
	 * @param boolean $limitToMarked Display only marked children.
	 * @param string $childrenMethod The name of the method used to get children from each object
	 * @param boolean $rootCall Set to true for this first call, and then to false for calls inside the recursion. You should not change this.
	 * @param int $minNodeCount
	 * @return string
	 */",
 "/**
	 * Mark a segment of the tree, by calling mark().
	 * The method performs a breadth-first traversal until the number of nodes is more than minCount.
	 * This is used to get a limited number of tree nodes to show in the CMS initially.
	 * 
	 * This method returns the number of nodes marked.  After this method is called other methods 
	 * can check isExpanded() and isMarked() on individual nodes.
	 * 
	 * @param int $minNodeCount The minimum amount of nodes to mark.
	 * @return int The actual number of nodes marked.
	 */",
 "/**
	 * Filter the marking to only those object with $node->$parameterName = $parameterValue
	 * @param string $parameterName The parameter on each node to check when marking.
	 * @param mixed $parameterValue The value the parameter must be to be marked.
	 */",
 "/**
	 * Filter the marking to only those where the function returns true.
	 * The node in question will be passed to the function.
	 * @param string $funcName The function name.
	 */",
 "/**
	 * Returns true if the marking filter matches on the given node.
	 * @param DataObject $node Node to check.
	 * @return boolean
	 */",
 "/**
	 * Mark all children of the given node that match the marking filter.
	 * @param DataObject $node Parent node.
	 */",
 "/**
	 * Ensure marked nodes that have children are also marked expanded.
	 * Call this after marking but before iterating over the tree.
	 */",
 "/**
	 * Return CSS classes of \'unexpanded\', \'closed\', both, or neither, depending on
	 * the marking of this DataObject.
	 */",
 "/**
	 * Mark the children of the DataObject with the given ID.
	 * @param int $id ID of parent node.
	 * @param boolean $open If this is true, mark the parent node as opened.
	 */",
 "/**
	 * Expose the given object in the tree, by marking this page and all it ancestors.
	 * @param DataObject $childObj 
	 */",
 "/**
	 * Return the IDs of all the marked nodes
	 */",
 "/**
	 * Return an array of this page and its ancestors, ordered item -> root.
	 * @return array
	 */",
 "/**
	 * Mark this DataObject as expanded.
	 */",
 "/**
	 * Mark this DataObject as unexpanded.
	 */",
 "/**
	 * Mark this DataObject\'s tree as opened.
	 */",
 "/**
	 * Check if this DataObject is marked.
	 * @return boolean
	 */",
 "/**
	 * Check if this DataObject is expanded.
	 * @return boolean
	 */",
 "/**
	 * Check if this DataObject\'s tree is opened.
	 */",
 "/**
	 * Return a partial tree as an HTML UL.
	 */",
 "/**
	 * Get a list of this DataObject\'s and all it\'s descendants IDs.
	 * @return int
	 */",
 "/**
	 * Get a list of this DataObject\'s and all it\'s descendants ID, and put it in $idList.
	 * @var array $idList Array to put results in.
	 */",
 "/**
	 * Get the children for this DataObject.
	 * @return DataObjectSet
	 */",
 "/**
	 * Return all children, including those \'not in menus\'.
	 * @return DataObjectSet
	 */",
 "/**
	 * Return all children, including those that have been deleted but are still in live.
	 * Deleted children will be marked as \"DeletedFromStage\"
	 * Added children will be marked as \"AddedToStage\"
	 * Modified children will be marked as \"ModifiedOnStage\"
	 * Everything else has \"SameOnStage\" set, as an indicator that this information has been looked up.
	 * @return DataObjectSet
	 */",
 "/**
	 * @see AllChildrenIncludingDeleted
	 *
	 * @param unknown_type $context
	 * @return DataObjectSet
	 */",
 "/**
	 * Return all the children that this page had, including pages that were deleted
	 * from both stage & live.
	 */",
 "/**
	 * Return the number of children that this page ever had, including pages that were deleted
	 */",
 "/**
	 * Return the number of direct children.
	 * By default, values are cached after the first invocation.
	 * Can be augumented by {@link augmentNumChildrenCountQuery()}.
	 * 
	 * @param Boolean $cache
	 * @return int
	 */",
 "/**
	 * Return children from the stage site
	 * 
	 * @param showAll Inlcude all of the elements, even those not shown in the menus.
	 *   (only applicable when extension is applied to {@link SiteTree}).
	 * @return DataObjectSet
	 */",
 "/**
	 * Return children from the live site, if it exists.
	 * 
	 * @param boolean $showAll Include all of the elements, even those not shown in the menus.
	 *   (only applicable when extension is applied to {@link SiteTree}).
	 * @param boolean $onlyDeletedFromStage Only return items that have been deleted from stage
	 * @return DataObjectSet
	 */",
 "/**
	 * Get the parent of this class.
	 * @return DataObject
	 */",
 "/**
	 * Return all the parents of this class in a set ordered from the lowest to highest parent.
	 *
	 * @return DataObjectSet
	 */",
 "/**
	 * Get the next node in the tree of the type. If there is no instance of the className descended from this node,
	 * then search the parents.
	 * 
	 * @todo Write!
	 */",
 "/**
	 * Get the next node in the tree of the type. If there is no instance of the className descended from this node,
	 * then search the parents.
	 * @param string $className Class name of the node to find.
	 * @param string|int $root ID/ClassName of the node to limit the search to
	 * @param DataObject afterNode Used for recursive calls to this function
	 * @return DataObject
	 */",
 "/**
 * DataObjects that use the Hierachy decorator can be be organised as a hierachy, with children and parents.
 * The most obvious example of this is SiteTree.
 * @package sapphire
 * @subpackage model
 */",
 "/**
     * Retrieves the default registry instance.
     *
     * @return Zend_Registry
     */",
 "/**
     * Set the default registry instance to a specified instance.
     *
     * @param Zend_Registry $registry An object instance of type Zend_Registry,
     *   or a subclass.
     * @return void
     * @throws Zend_Exception if registry is already initialized.
     */",
 "/**
     * Initialize the default registry instance.
     *
     * @return void
     */",
 "/**
     * Set the class name to use for the default registry instance.
     * Does not affect the currently initialized instance, it only applies
     * for the next time you instantiate.
     *
     * @param string $registryClassName
     * @return void
     * @throws Zend_Exception if the registry is initialized or if the
     *   class name is not valid.
     */",
 "/**
     * Unset the default registry instance.
     * Primarily used in tearDown() in unit tests.
     * @returns void
     */",
 "/**
     * getter method, basically same as offsetGet().
     *
     * This method can be called from an object of type Zend_Registry, or it
     * can be called statically.  In the latter case, it uses the default
     * static instance stored in the class.
     *
     * @param string $index - get the value associated with $index
     * @return mixed
     * @throws Zend_Exception if no entry is registerd for $index.
     */",
 "/**
     * setter method, basically same as offsetSet().
     *
     * This method can be called from an object of type Zend_Registry, or it
     * can be called statically.  In the latter case, it uses the default
     * static instance stored in the class.
     *
     * @param string $index The location in the ArrayObject in which to store
     *   the value.
     * @param mixed $value The object to store in the ArrayObject.
     * @return void
     */",
 "/**
     * Returns TRUE if the $index is a named value in the registry,
     * or FALSE if $index was not found in the registry.
     *
     * @param  string $index
     * @return boolean
     */",
 "/**
     * Constructs a parent ArrayObject with default
     * ARRAY_AS_PROPS to allow acces as an object
     *
     * @param array $array data array
     * @param integer $flags ArrayObject flags
     */",
 "/**
     * @param string $index
     * @returns mixed
     *
     * Workaround for http://bugs.php.net/bug.php?id=40442 (ZF-960).
     */",
 "/**
 * Generic storage class helps to manage global data.
 *
 * @category   Zend
 * @package    Zend_Registry
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
 * Renderer for showing SideReports in CMSMain
 * 
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
 * A report wrapper that makes it easier to define slightly different behaviour for side-reports.
 * 
 * This report wrapper will use sideReportColumns() for the report columns, instead of columns().
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
 * Content side-report listing empty pages
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
 * Content side-report listing recently editing pages.
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
 * Content side-report listing pages with broken links
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
 * Content side-report listing pages with broken files
 * or asset links
 * 
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
 * @package cms
 * @subpackage content
 */",
 "/**
 * @category   Zend
 * @package    Zend_Locale
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */",
 "/**
	 * Get location of word list file
	 */",
 "/**
	 * Set location of word list file
	 * 
	 * @param string $wordListFile Location of word list file
	 */",
 "/**
	 * Set the default message set used in permissions failures.
	 *
	 * @param string|array $messageSet
	 */",
 "/**
	 * Register that we\'ve had a permission failure trying to view the given page
	 *
	 * This will redirect to a login page.
	 * If you don\'t provide a messageSet, a default will be used.
	 *
	 * @param Controller $controller The controller that you were on to cause the permission
	 *              failure.
	 * @param string|array $messageSet The message to show to the user. This
	 *                                  can be a string, or a map of different
	 *                                  messages for different contexts.
	 *                                  If you pass an array, you can use the
	 *                                  following keys:
	 *                                    - default: The default message
	 *                                    - logInAgain: The message to show
	 *                                                  if the user has just
	 *                                                  logged out and the
	 *                                    - alreadyLoggedIn: The message to
	 *                                                       show if the user
	 *                                                       is already logged
	 *                                                       in and lacks the
	 *                                                       permission to
	 *                                                       access the item.
	 *
	 * The alreadyLoggedIn value can contain a \'%s\' placeholder that will be replaced with a link
	 * to log in.
	 */",
 "/**
	 * Get the login form to process according to the submitted data
	 */",
 "/**
	 * Get the login forms for all available authentication methods
	 *
	 * @return array Returns an array of available login forms (array of Form
	 *               objects).
	 *
	 * @todo Check how to activate/deactivate authentication methods
	 */",
 "/**
	 * Get a link to a security action
	 *
	 * @param string $action Name of the action
	 * @return string Returns the link to the given action
	 */",
 "/**
	 * Log the currently logged in user out
	 *
	 * @param bool $redirect Redirect the user back to where they came.
	 *                         - If it\'s false, the code calling logout() is
	 *                           responsible for sending the user where-ever
	 *                           they should go.
	 */",
 "/**
	 * Show the \"login\" page
	 *
	 * @return string Returns the \"login\" page as HTML code.
	 */",
 "/**
	 * Show the \"lost password\" page
	 *
	 * @return string Returns the \"lost password\" page as HTML code.
	 */",
 "/**
	 * Factory method for the lost password form
	 *
	 * @return Form Returns the lost password form
	 */",
 "/**
	 * Show the \"password sent\" page, after a user has requested
	 * to reset their password.
	 *
	 * @param SS_HTTPRequest $request The SS_HTTPRequest for this action. 
	 * @return string Returns the \"password sent\" page as HTML code.
	 */",
 "/**
	 * Create a link to the password reset form
	 *
	 * @param string $autoLoginHash The auto login hash
	 */",
 "/**
	 * Show the \"change password\" page.
	 * This page can either be called directly by logged-in users
	 * (in which case they need to provide their old password),
	 * or through a link emailed through {@link lostpassword()}.
	 * In this case no old password is required, authentication is ensured
	 * through the Member.AutoLoginHash property.
	 * 
	 * @see ChangePasswordForm
	 *
	 * @return string Returns the \"change password\" page as HTML code.
	 */",
 "/**
	 * Security/ping can be visited with ajax to keep a session alive.
	 * This is used in the CMS.
	 */",
 "/**
	 * Factory method for the lost password form
	 *
	 * @return Form Returns the lost password form
	 */",
 "/**
	 * Authenticate using the given email and password, returning the
	 * appropriate member object if
	 *
	 * @return bool|Member Returns FALSE if authentication fails, otherwise
	 *                     the member object
	 * @see setDefaultAdmin()
	 */",
 "/**
	 * Return an existing member with administrator privileges, or create one of necessary.
	 * 
	 * Will create a default \'Administrators\' group if no group is found
	 * with an ADMIN permission. Will create a new \'Admin\' member with administrative permissions
	 * if no existing Member with these permissions is found. 
	 * 
	 * Important: Any newly created administrator accounts will NOT have valid
	 * login credentials (Email/Password properties), which means they can\'t be used for login
	 * purposes outside of any default credentials set through {@link Security::setDefaultAdmin()}.
	 * 
	 * @return Member 
	 */",
 "/**
	 * Set a default admin in dev-mode
	 * 
	 * This will set a static default-admin which is not existing
	 * as a database-record. By this workaround we can test pages in dev-mode
	 * with a unified login. Submitted login-credentials are first checked
	 * against this static information in {@link Security::authenticate()}.
	 *
	 * @param string $username The user name
	 * @param string $password The password (in cleartext)
	 */",
 "/**
	 * Checks if the passed credentials are matching the default-admin.
	 * Compares cleartext-password set through Security::setDefaultAdmin().
	 * 
	 * @param string $username
	 * @param string $password 
	 * @return bool
	 */",
 "/**
	 * Check that the default admin account has been set.
	 */",
 "/**
	 * Set strict path checking
	 *
	 * This prevents sharing of the session across several sites in the
	 * domain.
	 *
	 * @param boolean $strictPathChecking To enable or disable strict patch
	 *                                    checking.
	 */",
 "/**
	 * Get strict path checking
	 *
	 * @return boolean Status of strict path checking
	 */",
 "/**
	 * Set if passwords should be encrypted or not
	 *
	 * @deprecated 2.4 Use PasswordEncryptor_None instead.
	 * 
	 * @param bool $encrypt Set to TRUE if you want that all (new) passwords
	 *                      will be stored encrypted, FALSE if you want to
	 *                      store the passwords in clear text.
	 */",
 "/**
	 * Get a list of all available encryption algorithms.
	 * Note: These are arbitrary codes, and not callable methods.
	 * 
	 * @deprecated 2.4 Use PasswordEncryptor::get_encryptors()
	 *
	 * @return array Returns an array of strings containing all supported encryption algorithms.
	 */",
 "/**
	 * Set the password encryption algorithm
	 *
	 * @param string $algorithm One of the available password encryption
	 *  algorithms determined by {@link Security::get_encryption_algorithms()}
	 * @return bool Returns TRUE if the passed algorithm was valid, otherwise FALSE.
	 */",
 "/**
	 * @return String
	 */",
 "/**
	 * Encrypt a password according to the current password encryption settings.
	 * If the settings are so that passwords shouldn\'t be encrypted, the
	 * result is simple the clear text password with an empty salt except when
	 * a custom algorithm ($algorithm parameter) was passed.
	 *
	 * @param string $password The password to encrypt
	 * @param string $salt Optional: The salt to use. If it is not passed, but
	 *  needed, the method will automatically create a
	 *  random salt that will then be returned as return value.
	 * @param string $algorithm Optional: Use another algorithm to encrypt the
	 *  password (so that the encryption algorithm can be changed over the time).
	 * @param Member $member Optional
	 * @return mixed Returns an associative array containing the encrypted
	 *  password and the used salt in the form:
	 * <code>
	 * 	array(
	 * 	\'password\' => string, 
	 * 	\'salt\' => string, 
	 * 	\'algorithm\' => string,
	 * 	\'encryptor\' => PasswordEncryptor instance
	 * 	)
	 * </code>
	 * If the passed algorithm is invalid, FALSE will be returned.
	 *
	 * @see encrypt_passwords()
	 * @see set_password_encryption_algorithm()
	 */",
 "/**
	 * Checks the database is in a state to perform security checks.
	 * See {@link DatabaseAdmin->init()} for more information.
	 * 
	 * @return bool
	 */",
 "/**
	 * Enable or disable recording of login attempts
	 * through the {@link LoginRecord} object.
	 * 
	 * @param boolean $bool
	 */",
 "/**
	 * @return boolean
	 */",
 "/**
	 * Set the default login dest
	 * This is the URL that users will be redirected to after they log in,
	 * if they haven\'t logged in en route to access a secured page.
	 * 
	 * By default, this is set to the homepage
	 */",
 "/**
	 * Get the default login dest
	 */",
 "/**
 * Implements a basic security model
 * @package sapphire
 * @subpackage security
 */",
 "/**
	 * Saves this field to the given data object.
	 */",
 "/**
	 * Return an encoding of the given value suitable for inclusion in a SQL statement.
	 * If necessary, this should include quotes.
	 */",
 "/**
 * Represents a boolean field.
 * 
 * @package sapphire
 * @subpackage model
 */",
 "/**
 * This {@link PasswordValidator} implements the NZ E-Government Guidelines for passwords
 * @package sapphire
 * @subpackage security
 */",
 "/**
     * Class constructor.
     *
     * Constructs the mail writer; requires a Zend_Mail instance, and takes an
     * optional Zend_Layout instance.  If Zend_Layout is being used,
     * $this->_layout->events will be set for use in the layout template.
     *
     * @param  Zend_Mail $mail Mail instance
     * @param  Zend_Layout $layout Layout instance; optional
     * @return void
     */",
 "/**
     * Places event line into array of lines to be used as message body.
     *
     * Handles the formatting of both plaintext entries, as well as those
     * rendered with Zend_Layout.
     *
     * @param  array $event Event data
     * @return void
     */",
 "/**
     * Gets instance of Zend_Log_Formatter_Instance used for formatting a
     * message using Zend_Layout, if applicable.
     *
     * @return Zend_Log_Formatter_Interface|null The formatter, or null.
     */",
 "/**
     * Sets a specific formatter for use with Zend_Layout events.
     *
     * Allows use of a second formatter on lines that will be rendered with
     * Zend_Layout.  In the event that Zend_Layout is not being used, this
     * formatter cannot be set, so an exception will be thrown.
     *
     * @param  Zend_Log_Formatter_Interface $formatter
     * @return Zend_Log_Writer_Mail
     * @throws Zend_Log_Exception
     */",
 "/**
     * Allows caller to have the mail subject dynamically set to contain the
     * entry counts per-priority level.
     *
     * Sets the text for use in the subject, with entry counts per-priority
     * level appended to the end.  Since a Zend_Mail subject can only be set
     * once, this method cannot be used if the Zend_Mail object already has a
     * subject set.
     *
     * @param  string $subject Subject prepend text.
     * @return Zend_Log_Writer_Mail
     */",
 "/**
     * Sends mail to recipient(s) if log entries are present.  Note that both
     * plaintext and HTML portions of email are handled here.
     *
     * @return void
     */",
 "/**
     * Gets a string of number of entries per-priority level that occurred, or
     * an emptry string if none occurred.
     *
     * @return string
     */",
 "/**
 * Class used for writing log messages to email via Zend_Mail.
 *
 * Allows for emailing log messages at and above a certain level via a
 * Zend_Mail object.  Note that this class only sends the email upon
 * completion, so any log entries accumulated are sent in a single email.
 *
 * @category   Zend
 * @package    Zend_Log
 * @subpackage Writer
 * @copyright  Copyright (c) 2005-2008 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id: Mail.php 13626 2009-01-14 18:24:57Z matthew $
 */",
 "/**
 * This class handles JSON stuff.
 *
 * @package MCManager.utils
 */",
 "/**
	 * Get all writers in this logger.
	 * @return array of Zend_Log_Writer_Abstract instances
	 */",
 "/**
	 * Remove a writer instance that exists in this logger.
	 * @param object Zend_Log_Writer_Abstract instance
	 */",
 "/**
	 * Clear all writers in this logger.
	 */",
 "/**
 * Extensions to Zend_Log to make it work nicer
 * with {@link SS_Log}.
 * 
 * Please refer to {@link SS_Log} for information on
 * setting up logging for your projects.
 * 
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * This can be used to provide a mailer class other than the default, e.g. for testing.
	 * 
	 * @param Mailer $mailer
	 */",
 "/**
	 * Get the mailer.
	 * 
	 * @return Mailer
	 */",
 "/**
	 * Create a new email.
	 */",
 "/**
	 * Set the \"Reply-To\" header with an email address.
	 * @param string $email The email address of the \"Reply-To\" header
	 */",
 "/**
	 * Add a custom header to this value.
	 * Useful for implementing all those cool features that we didn\'t think of.
	 * 
	 * @param string $headerName
	 * @param string $headerValue
	 */",
 "/**
	 * Debugging help
	 */",
 "/**
	 * Set template name (without *.ss extension).
	 * 
	 * @param string $template
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Used by {@link SSViewer} templates to detect if we\'re rendering an email template rather than a page template
	 */",
 "/**
	 * Populate this email template with values.
	 * This may be called many times.
	 */",
 "/**
	 * Load all the template variables into the internal variables, including
	 * the template into body.	Called before send() or debugSend()
	 * $isPlain=true will cause the template to be ignored, otherwise the GenericEmail template will be used
	 * and it won\'t be plain email :) 
	 */",
 "/**
	 * @desc Validates the email address. Returns true of false
	 */",
 "/**
	 * Send the email in plaintext.
	 * 
	 * @see send() for sending emails with HTML content.
	 * @uses Mailer->sendPlain()
	 * 
	 * @param string $messageID Optional message ID so the message can be identified in bounces etc.
	 * @return bool Success of the sending operation from an MTA perspective. 
	 * Doesn\'t actually give any indication if the mail has been delivered to the recipient properly)
	 */",
 "/**
	 * Send an email with HTML content.
	 *
	 * @see sendPlain() for sending plaintext emails only.
	 * @uses Mailer->sendHTML()
	 * 
	 * @param string $messageID Optional message ID so the message can be identified in bounces etc.
	 * @return bool Success of the sending operation from an MTA perspective. 
	 * Doesn\'t actually give any indication if the mail has been delivered to the recipient properly)
	 */",
 "/**
	 * Used as a default sender address in the {@link Email} class
	 * unless overwritten. Also shown to users on live environments
	 * as a contact address on system error pages.
	 * 
	 * Used by {@link Email->send()}, {@link Email->sendPlain()}, {@link Debug->friendlyError()}.
	 * 
	 * @param string $newEmail
	 */",
 "/**
	 * @return string
	 */",
 "/**
	 * Send every email generated by the Email class to the given address.
	 * It will also add \" [addressed to (email), cc to (email), bcc to (email)]\" to the end of the subject line
	 * This can be used when testing, by putting a command like this in your _config.php file
	 * 
	 * if(!Director::isLive()) Email::send_all_emails_to(\"someone@example.com\")
	 */",
 "/**
	 * CC every email generated by the Email class to the given address.
	 * It won\'t affect the original delivery in the same way that send_all_emails_to does.	It just adds a CC header 
	 * with the given email address.	Note that you can only call this once - subsequent calls will overwrite the configuration
	 * variable.
	 *
	 * This can be used when you have a system that relies heavily on email and you want someone to be checking all correspondence.
	 * 
	 * if(Director::isLive()) Email::cc_all_emails_to(\"supportperson@example.com\")
	 */",
 "/**
	 * BCC every email generated by the Email class to the given address.
	 * It won\'t affect the original delivery in the same way that send_all_emails_to does.	It just adds a BCC header 
	 * with the given email address.	Note that you can only call this once - subsequent calls will overwrite the configuration
	 * variable.
	 *
	 * This can be used when you have a system that relies heavily on email and you want someone to be checking all correspondence.
	 * 
	 * if(Director::isLive()) Email::cc_all_emails_to(\"supportperson@example.com\")
	 */",
 "/**
	 * Checks for RFC822-valid email format.
	 * 
	 * @param string $str
	 * @return boolean
	 * 
	 * @see http://code.iamcal.com/php/rfc822/rfc822.phps
	 * @copyright Cal Henderson <cal@iamcal.com> 
	 * 	This code is licensed under a Creative Commons Attribution-ShareAlike 2.5 License 
	 * 	http://creativecommons.org/licenses/by-sa/2.5/
	 */",
 "/**
	 * Encode an email-address to protect it from spambots.
	 * At the moment only simple string substitutions,
	 * which are not 100% safe from email harvesting.
	 * 
	 * @todo Integrate javascript-based solution
	 * 
	 * @param string $email Email-address
	 * @param string $method Method for obfuscating/encoding the address
	 *	- \'direction\': Reverse the text and then use CSS to put the text direction back to normal
	 *	- \'visible\': Simple string substitution (\'@\' to \'[at]\', \'.\' to \'[dot], \'-\' to [dash])
	 *	- \'hex\': Hexadecimal URL-Encoding - useful for mailto: links
	 * @return string
	 */",
 "/**
 * Class to support sending emails.
 * @package sapphire
 * @subpackage email
 */",
 "/**
 * Base class that email bounce handlers extend
 * @package sapphire
 * @subpackage email
 */",
 "/** 
	* a record of Email_BounceRecord can\'t be created manually. Instead, it should be	
	* created though system. 
	*/",
 "/**
 * Database record for recording a bounced email
 * @package sapphire
 * @subpackage email
 */",
 "/**
	 * Build the default data, calling requireDefaultRecords on all
	 * DataObject classes
	 * Should match the $url_handlers rule:
	 *		\'build/defaults\' => \'buildDefaults\',
	 */",
 "/**
 * Base class for URL access to development tools. Currently supports the
 * ; and TaskRunner.
 *
 * @todo documentation for how to add new unit tests and tasks
 * @package sapphire
 * @subpackage dev
 */",
 "/**
	 * Check the database configuration. These are done one after another
	 * starting with checking the database function exists in PHP, and
	 * continuing onto more difficult checks like database permissions.
	 */",
 "/**
	 * Check if the web server is IIS.
	 * @return boolean
	 */",
 "/**
	 * Find the webserver software running on the PHP host.
	 * @return string|boolean Server software or boolean FALSE
	 */",
 "/**
	 * Check everything except the database
	 */",
 "/**
	 * Require that the given class doesn\'t exist
	 */",
 "/**
	 * The same as {@link requireFile()} but does additional checks
	 * to ensure the module directory is intact.
	 */",
 "/**
	 * Determines if the web server has any rewriting capability.
	 * @return boolean
	 */",
 "/**
	 * Get an instance of a helper class for the specific database.
	 * @param string $databaseClass e.g. MySQLDatabase or MSSQLDatabase
	 */",
 "/**
 * This class checks requirements
 * Each of the requireXXX functions takes an argument which gives a user description of the test.
 * It\'s an array of 3 parts:
 *  $description[0] - The test catetgory
 *  $description[1] - The test title
 *  $description[2] - The test error to show, if it goes wrong
 */",
 "/**
	 * Writes basic configuration to the web.config for IIS
	 * so that rewriting capability can be use.
	 */",
 "/**
	 * Show an installation status message.
	 */"
]
