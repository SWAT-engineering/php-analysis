 ["/**
     * Constructor.
     *
     * @param NodeInterface $selector The XPath selector
     * @param string $namespace The namespace
     * @param string $attrib The attribute
     * @param string $operator The operator
     * @param string $value The value
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Returns the XPath Attribute
     *
     * @return string The XPath attribute
     */",
 "/**
     * Returns a formatted attribute
     *
     * @return string The formatted attribute
     */",
 "/**
 * AttribNode represents a \"selector[namespace|attrib operator value]\" node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/** @override */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Initializes a related collection.
     *
     * @param object $entity The entity to which the collection belongs.
     * @param string $name The name of the field on the entity that holds the collection.
     */",
 "/**
     * Gets an entity instance.
     *
     * @param $data The instance data.
     * @param $dqlAlias The DQL alias of the entity\'s class.
     * @return object The entity.
     */",
 "/**
     * Gets a ClassMetadata instance from the local cache.
     * If the instance is not yet in the local cache, it is loaded into the
     * local cache.
     *
     * @param string $className The name of the class.
     * @return ClassMetadata
     */",
 "/**
     * Hydrates a single row in an SQL result set.
     *
     * @internal
     * First, the data of the row is split into chunks where each chunk contains data
     * that belongs to a particular component/class. Afterwards, all these chunks
     * are processed, one after the other. For each chunk of class data only one of the
     * following code paths is executed:
     *
     * Path A: The data chunk belongs to a joined/associated object and the association
     *         is collection-valued.
     * Path B: The data chunk belongs to a joined/associated object and the association
     *         is single-valued.
     * Path C: The data chunk belongs to a root result element/object that appears in the topmost
     *         level of the hydrated result. A typical example are the objects of the type
     *         specified by the FROM clause in a DQL query.
     *
     * @param array $data The data of the row to process.
     * @param array $cache The cache to use.
     * @param array $result The result array to fill.
     */",
 "/**
 * The ObjectHydrator constructs an object graph out of an SQL result set.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 * @internal Highly performance-sensitive code.
 */",
 "/**
*Constructsametadataforthegivenclass
*
*@paramstring$class
*/",
 "/**
*Returnsthepropertiestobeserialized
*
*@returnarray
*/",
 "/**
*Returnsthefullyqualifiednameoftheclass
*
*@returnstringThefullyqualifiedclassname
*/",
 "/**
*Returnsthenameofthedefaultgroupforthisclass
*
*Foreachclass,thegroup\"Default\" is an alias for the group
     * \"<ClassName>\", where <ClassName> is the non-namespaced name of the
     * class. All constraints implicitly or explicitly assigned to group
     * \"Default\" belong to both of these groups, unless the class defines
     * a group sequence.
     *
     * If a class defines a group sequence, validating the class in \"Default\"
     * will validate the group sequence. The constraints assigned to \"Default\"
     * can still be validated by validating the class in \"<ClassName>\".
     *
     * @return string  The name of the default group
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Adds a constraint to the given property.
     *
     * @param string     $property   The name of the property
     * @param Constraint $constraint The constraint
     *
     * @return ClassMetadata           This object
     */",
 "/**
     * Adds a constraint to the getter of the given property.
     *
     * The name of the getter is assumed to be the name of the property with an
     * uppercased first letter and either the prefix \"get\" or \"is\".
     *
     * @param string     $property   The name of the property
     * @param Constraint $constraint The constraint
     *
     * @return ClassMetadata This object
     */",
 "/**
     * Merges the constraints of the given metadata into this object.
     *
     * @param ClassMetadata $source The source metadata
     */",
 "/**
     * Adds a member metadata
     *
     * @param MemberMetadata $metadata
     */",
 "/**
     * Returns true if metadatas of members is present for the given property.
     *
     * @param string $property The name of the property
     *
     * @return Boolean
     */",
 "/**
     * Returns all metadatas of members describing the given property
     *
     * @param string $property The name of the property
     *
     * @return array An array of MemberMetadata
     */",
 "/**
     * Returns all properties for which constraints are defined.
     *
     * @return array An array of property names
     */",
 "/**
     * Sets the default group sequence for this class.
     *
     * @param array $groups An array of group names
     */",
 "/**
     * Returns whether this class has an overridden default group sequence.
     *
     * @return Boolean
     */",
 "/**
     * Returns the default group sequence for this class.
     *
     * @return array An array of group names
     */",
 "/**
     * Returns a ReflectionClass instance for this class.
     *
     * @return ReflectionClass
     */",
 "/**
 * Represents all the configured constraints on a given class.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new RedirectingPlugin.
   * @param int $recipient
   */",
 "/**
   * Set the recipient of all messages.
   * @param int $threshold
   */",
 "/**
   * Get the recipient of all messages.
   * @return int
   */",
 "/**
   * Invoked immediately before the Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Invoked immediately after the Message is sent.
   * 
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
 * Redirects all email to a single recipient.
 * @package Swift
 * @subpackage Plugins
 * @author Fabien Potencier
 */",
 "/**
 * HttpBasicFactory creates services for HTTP basic authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns a unique identifier for this domain object.
     *
     * @return string
     */",
 "/**
 * This method can be implemented by domain objects which you want to store
 * ACLs for if they do not have a getId() method, or getId() does not return
 * a unique identifier.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Returns the country names for a locale
     *
     * @param  string $locale            The locale to use for the country names
     *
     * @return array                     The country names with their codes as keys
     *
     * @throws InvalidArgumentException  When the locale is different than \'en\'
     */",
 "/**
     * Returns all available country codes
     *
     * @return array  The country codes
     */",
 "/**
     * Returns the language names for a locale
     *
     * @param  string $locale            The locale to use for the language names
     *
     * @return array                     The language names with their codes as keys
     *
     * @throws InvalidArgumentException  When the locale is different than \'en\'
     */",
 "/**
     * Returns all available language codes
     *
     * @return array  The language codes
     */",
 "/**
     * Returns the locale names for a locale
     *
     * @param  string $locale            The locale to use for the locale names
     *
     * @return array                     The locale names with their codes as keys
     *
     * @throws InvalidArgumentException  When the locale is different than \'en\'
     */",
 "/**
     * Returns all available locale codes
     *
     * @return array  The locale codes
     */",
 "/**
     * Returns the currencies data
     *
     * @param string $locale
     *
     * @return array  The currencies data
     */",
 "/**
     *  Returns the currencies names for a locale
     *
     * @param  string $locale            The locale to use for the currencies names
     *
     * @return array                     The currencies names with their codes as keys
     *
     * @throws InvalidArgumentException  When the locale is different than \'en\'
     */",
 "/**
     * Returns all available currencies codes
     *
     * @return array  The currencies codes
     */",
 "/**
     * Returns the best available locale based on HTTP \"Accept-Language\" header according to RFC 2616
     *
     * @param  string $header     The string containing the \"Accept-Language\" header value
     *
     * @return string             The corresponding locale code
     *
     * @see    http://www.php.net/manual/en/locale.acceptfromhttp.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns a correctly ordered and delimited locale code
     *
     * @param  array   $subtags   A keyed array where the keys identify the particular locale code subtag
     *
     * @return string             The corresponding locale code
     *
     * @see    http://www.php.net/manual/en/locale.composelocale.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Checks if a language tag filter matches with locale
     *
     * @param  string  $langtag      The language tag to check
     * @param  string  $locale       The language range to check against
     * @param  Boolean $canonicalize
     *
     * @return string             The corresponding locale code
     *
     * @see    http://www.php.net/manual/en/locale.filtermatches.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the variants for the input locale
     *
     * @param  string   $locale   The locale to extract the variants from
     *
     * @return array              The locale variants
     *
     * @see    http://www.php.net/manual/en/locale.getallvariants.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the default locale
     *
     * @return string             The default locale code. Always returns \'en\'
     *
     * @see    http://www.php.net/manual/en/locale.getdefault.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the localized display name for the locale language
     *
     * @param  string  $locale    The locale code to return the display language from
     * @param  string  $inLocale  Optional format locale code to use to display the language name
     *
     * @return string             The localized language display name
     *
     * @see    http://www.php.net/manual/en/locale.getdisplaylanguage.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the localized display name for the locale
     *
     * @param  string  $locale    The locale code to return the display locale name from
     * @param  string  $inLocale  Optional format locale code to use to display the locale name
     *
     * @return string             The localized locale display name
     *
     * @see    http://www.php.net/manual/en/locale.getdisplayname.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the localized display name for the locale region
     *
     * @param  string  $locale    The locale code to return the display region from
     * @param  string  $inLocale  Optional format locale code to use to display the region name
     *
     * @return string             The localized region display name
     *
     * @see    http://www.php.net/manual/en/locale.getdisplayregion.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the localized display name for the locale script
     *
     * @param  string  $locale    The locale code to return the display script from
     * @param  string  $inLocale  Optional format locale code to use to display the script name
     *
     * @return string             The localized script display name
     *
     * @see    http://www.php.net/manual/en/locale.getdisplayscript.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the localized display name for the locale variant
     *
     * @param  string  $locale    The locale code to return the display variant from
     * @param  string  $inLocale  Optional format locale code to use to display the variant name
     *
     * @return string             The localized variant display name
     *
     * @see    http://www.php.net/manual/en/locale.getdisplayvariant.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the keywords for the locale
     *
     * @param  string  $locale    The locale code to extract the keywords from
     *
     * @return array              Associative array with the extracted variants
     *
     * @see    http://www.php.net/manual/en/locale.getkeywords.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the primary language for the locale
     *
     * @param  string  $locale    The locale code to extract the language code from
     *
     * @return string|null        The extracted language code or null in case of error
     *
     * @see    http://www.php.net/manual/en/locale.getprimarylanguage.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the region for the locale
     *
     * @param  string  $locale    The locale code to extract the region code from
     *
     * @return string|null        The extracted region code or null if not present
     *
     * @see    http://www.php.net/manual/en/locale.getregion.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the script for the locale
     *
     * @param  string  $locale    The locale code to extract the script code from
     *
     * @return string|null        The extracted script code or null if not present
     *
     * @see    http://www.php.net/manual/en/locale.getscript.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the closest language tag for the locale
     *
     * @param  array   $langtag       A list of the language tags to compare to locale
     * @param  string  $locale        The locale to use as the language range when matching
     * @param  Boolean $canonicalize  If true, the arguments will be converted to canonical form before matching
     * @param  string  $default       The locale to use if no match is found
     *
     * @see    http://www.php.net/manual/en/locale.lookup.php
     *
     * @throws RuntimeException       When the intl extension is not loaded
     */",
 "/**
     * Returns an associative array of locale identifier subtags
     *
     * @param  string  $locale    The locale code to extract the subtag array from
     *
     * @return array              Associative array with the extracted subtags
     *
     * @see    http://www.php.net/manual/en/locale.parselocale.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Sets the default runtime locale
     *
     * @param  string  $locale    The locale code
     *
     * @return Boolean            true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/locale.parselocale.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns the stub ICU data
     *
     * @param  string  $locale           The locale code
     * @param  string  $cacheVariable    The name of a static attribute to cache the data to
     * @param  string  $stubDataDir      The stub data directory name
     *
     * @return array
     *
     * @throws InvalidArgumentException  When the locale is different than \'en\'
     */",
 "/**
 * Provides a stub Locale for the \'en\' locale.
 *
 * @author Eriksen Costa <eriksen.costa@infranology.com.br>
 */",
 "/**
     * Parses YAML into a PHP array.
     *
     * The parse method, when supplied with a YAML stream (string or file),
     * will do its best to convert YAML in a file into a PHP array.
     *
     *  Usage:
     *  <code>
     *   $array = Yaml::parse(\'config.yml\');
     *   print_r($array);
     *  </code>
     *
     * @param string $input Path to a YAML file or a string containing YAML
     *
     * @return array The YAML converted to a PHP array
     *
     * @throws \InvalidArgumentException If the YAML is not valid
     *
     * @api
     */",
 "/**
     * Dumps a PHP array to a YAML string.
     *
     * The dump method, when supplied with an array, will do its best
     * to convert the array into friendly YAML.
     *
     * @param array   $array PHP array
     * @param integer $inline The level where you switch to inline YAML
     *
     * @return string A YAML string representing the original PHP array
     *
     * @api
     */",
 "/**
 * Yaml offers convenience methods to load and dump YAML.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Initializes a new instance of a class derived from <tt>AbstractHydrator</tt>.
     *
     * @param \Doctrine\ORM\EntityManager $em The EntityManager to use.
     */",
 "/**
     * Initiates a row-by-row hydration.
     *
     * @param object $stmt
     * @param object $resultSetMapping
     * @return IterableResult
     */",
 "/**
     * Hydrates all rows returned by the passed statement instance at once.
     *
     * @param object $stmt
     * @param object $resultSetMapping
     * @return mixed
     */",
 "/**
     * Hydrates a single row returned by the current statement instance during
     * row-by-row hydration with {@link iterate()}.
     *
     * @return mixed
     */",
 "/**
     * Excutes one-time preparation tasks, once each time hydration is started
     * through {@link hydrateAll} or {@link iterate()}.
     */",
 "/**
     * Excutes one-time cleanup tasks at the end of a hydration that was initiated
     * through {@link hydrateAll} or {@link iterate()}.
     */",
 "/**
     * Hydrates a single row from the current statement instance.
     *
     * Template method.
     *
     * @param array $data The row data.
     * @param array $cache The cache to use.
     * @param mixed $result The result to fill.
     */",
 "/**
     * Hydrates all rows from the current statement instance at once.
     */",
 "/**
     * Processes a row of the result set.
     * Used for identity-based hydration (HYDRATE_OBJECT and HYDRATE_ARRAY).
     * Puts the elements of a result row into a new array, grouped by the class
     * they belong to. The column names in the result set are mapped to their
     * field names during this procedure as well as any necessary conversions on
     * the values applied.
     *
     * @param array $data SQL Result Row
     * @param array &$cache Cache for column to field result information
     * @param array &$id Dql-Alias => ID-Hash
     * @param array &$nonemptyComponents Does this DQL-Alias has at least one non NULL value?
     *
     * @return array  An array with all the fields (name => value) of the data row,
     *                grouped by their component alias.
     */",
 "/**
     * Processes a row of the result set.
     * Used for HYDRATE_SCALAR. This is a variant of _gatherRowData() that
     * simply converts column names to field names and properly converts the
     * values according to their types. The resulting row has the same number
     * of elements as before.
     *
     * @param array $data
     * @param array $cache
     * @return array The processed row.
     */",
 "/**
 * Base class for all hydrators. A hydrator is a class that provides some form
 * of transformation of an SQL result set into another structure.
 *
 * @since       2.0
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the grammar as an object or as a string.
     *
     * @return string|Twig_Extensions_Grammar A Twig_Extensions_Grammar instance or a string
     */",
 "/**
     * Gets the nodes based on the parsed values.
     *
     * @param array   $values An array of values
     * @param integer $line   The parser line
     */",
 "/**
     * Constructor.
     *
     * @param string $user        The username (like a nickname, email address, etc.)
     * @param string $credentials This usually is the password of the user
     * @param string $providerKey The provider key
     * @param array  $roles       An array of roles
     *
     * @throws \InvalidArgumentException
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * UsernamePasswordToken implements a username and password token.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * A very general exception which can be thrown whenever non of the more specific
 * exceptions is suitable.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Allows the reader to be used in-place of Doctrine\'s reader.
 *
 * This can be removed once the BC layer is in place.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Loads formulae from Symfony2 PHP templates.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Type that maps an SQL INT to a PHP integer.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Unescapes a single quoted string.
     *
     * @param string $value A single quoted string.
     *
     * @return string The unescaped string.
     */",
 "/**
     * Unescapes a double quoted string.
     *
     * @param string $value A double quoted string.
     *
     * @return string The unescaped string.
     */",
 "/**
*Unescapesacharacterthatwasfoundinadouble-quotedstring
*
*@paramstring$valueAnescapedcharacter
*
*@returnstringTheunescapedcharacter
*/",
 "/**
*Convertastringfromoneencodingtoanother.
*
*@paramstring$valueThestringtoconvert
*@paramstring$toTheinputencoding
*@paramstring$fromTheoutputencoding
*
*@returnstringThestringwiththenewencoding
*
*@throws\RuntimeExceptionifnosuitableencodingfunctionisfound(iconvormbstring)
*/",
 "/**
*Unescaperencapsulatesunescapingrulesforsingleanddouble-quoted
*YAMLstrings.
*
*@authorMatthewLewinski<matthew@lewinski.org>
*/",
 "/**
     * Processes the ContainerBuilder to validate References.
     *
     * @param ContainerBuilder $container
     */",
 "/**
     * Validates an array of References.
     *
     * @param array $arguments An array of Reference objects
     *
     * @throws \RuntimeException when there is a reference to an abstract definition.
     */",
 "/**
     * Validates the scope of a single Reference.
     *
     * @param Reference  $reference
     * @param Definition $definition
     *
     * @throws \RuntimeException when there is an issue with the Reference scope
     */",
 "/**
     * Returns the Definition given an id.
     *
     * @param string $id Definition identifier
     *
     * @return Definition
     */",
 "/**
 * Checks the validity of references
 *
 * The following checks are performed by this pass:
 * - target definitions are not abstract
 * - target definitions are of equal or wider scope
 * - target definitions are in the same scope hierarchy
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
*{@inheritdoc}
*/",
 "/**
*{@inheritdoc}
*/",
 "/**
*RequestrepresentsanHTTPrequestfromanApacheserver.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * This is basic permission map complements the masks which have been defined
 * on the standard implementation of the MaskBuilder.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Returns the names of the properties that should be serialized.
     *
     * @return array
     */",
 "/**
     * Clones this object.
     */",
 "/**
     * Adds a constraint to this element.
     *
     * @param Constraint $constraint
     */",
 "/**
     * Returns all constraints of this element.
     *
     * @return array  An array of Constraint instances
     */",
 "/**
     * Returns whether this element has any constraints.
     *
     * @return Boolean
     */",
 "/**
     * Returns the constraints of the given group and global ones (* group).
     *
     * @param string $group The group name
     *
     * @return array An array with all Constraint instances belonging to the group
     */",
 "/**
     * Initializes console output formatter.
     *
     * @param   Boolean $decorated  Whether this formatter should actually decorate strings
     * @param   array   $styles     Array of \"name => FormatterStyle\" instances
     *
     * @api
     */",
 "/**
     * Sets the decorated flag.
     *
     * @param Boolean $decorated Whether to decorate the messages or not
     *
     * @api
     */",
 "/**
     * Gets the decorated flag.
     *
     * @return Boolean true if the output will decorate messages, false otherwise
     *
     * @api
     */",
 "/**
     * Sets a new style.
     *
     * @param string                        $name  The style name
     * @param OutputFormatterStyleInterface $style The style instance
     *
     * @api
     */",
 "/**
     * Checks if output formatter has style with specified name.
     *
     * @param   string  $name
     *
     * @return  Boolean
     *
     * @api
     */",
 "/**
     * Gets style options from style with specified name.
     *
     * @param   string  $name
     *
     * @return  OutputFormatterStyleInterface
     *
     * @throws  \InvalidArgumentException When style isn\'t defined
     *
     * @api
     */",
 "/**
     * Formats a message according to the given styles.
     *
     * @param  string $message The message to style
     *
     * @return string The styled message
     *
     * @api
     */",
 "/**
     * Replaces style of the output.
     *
     * @param array $match
     *
     * @return string The replaced style
     */",
 "/**
     * Tries to create new style instance from string.
     *
     * @param   string  $string
     *
     * @return  Symfony\Component\Console\Format\FormatterStyle|Boolean false if string is not format string
     */",
 "/**
 * Formatter class for console output.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Zend Data Cache cache driver.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Ralph Schindler <ralph.schindler@zend.com>
 */",
 "/**
   * Create a new StringReplacementFilter with $search and $replace.
   * @param string|array $search
   * @param string|array $replace
   */",
 "/**
   * Returns true if based on the buffer passed more bytes should be buffered.
   * @param string $buffer
   * @return boolean
   */",
 "/**
   * Perform the actual replacements on $buffer and return the result.
   * @param string $buffer
   * @return string
   */",
 "/**
 * Processes bytes as they pass through a buffer and replaces sequences in it.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * Builds the form.
     *
     * This method gets called after the extended type has built the form to
     * further modify it.
     *
     * @see FormTypeInterface::buildForm()
     *
     * @param FormBuilder   $builder The form builder
     * @param array         $options The options
     */",
 "/**
     * Builds the view.
     *
     * This method gets called after the extended type has built the view to
     * further modify it.
     *
     * @see FormTypeInterface::buildView()
     *
     * @param FormView      $view The view
     * @param FormInterface $form The form
     */",
 "/**
     * Builds the view.
     *
     * This method gets called after the extended type has built the view to
     * further modify it.
     *
     * @see FormTypeInterface::buildViewBottomUp()
     *
     * @param FormView      $view The view
     * @param FormInterface $form The form
     */",
 "/**
     * Overrides the default options form the extended type.
     *
     * @param array $options
     *
     * @return array
     */",
 "/**
     * Returns the allowed option values for each option (if any).
     *
     * @param array $options
     *
     * @return array The allowed option values
     */",
 "/**
     * Returns the name of the type being extended
     *
     * @return string The name of the type being extended
     */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents an import node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new DateHeader with $name and $timestamp.
   * Example:
   * <code>
   * <?php
   * $header = new Swift_Mime_Headers_DateHeader(\'Date\', time());
   * ?>
   * </code>
   * @param string $name of Header
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Get the type of Header that this instance represents.
   * @return int
   * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   * @see TYPE_DATE, TYPE_ID, TYPE_PATH
   */",
 "/**
   * Set the model for the field body.
   * This method takes a UNIX timestamp.
   * @param int $model
   */",
 "/**
   * Get the model for the field body.
   * This method returns a UNIX timestamp.
   * @return mixed
   */",
 "/**
   * Get the UNIX timestamp of the Date in this Header.
   * @return int
   */",
 "/**
   * Set the UNIX timestamp of the Date in this Header.
   * @param int $timestamp
   */",
 "/**
   * Get the string value of the body in this Header.
   * This is not necessarily RFC 2822 compliant since folding white space will
   * not be added at this stage (see {@link toString()} for that).
   * @return string
   * @see toString()
   */",
 "/**
 * A Date MIME Header for Swift Mailer.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Returns the password encoder to use for the given account.
     *
     * @param UserInterface $user
     *
     * @return PasswordEncoderInterface never null
     */",
 "/**
 * EncoderFactoryInterface to support different encoders for different accounts.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Get the name of the AUTH mechanism this Authenticator handles.
   * @return string
   */",
 "/**
   * Try to authenticate the user with $username and $password.
   * @param Swift_Transport_SmtpAgent $agent
   * @param string $username
   * @param string $password
   * @return boolean
   */",
 "/**
 * Handles LOGIN authentication.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Initializes the provider with a secret value
     *
     * A recommended value for the secret is a generated value with at least
     * 32 characters and mixed letters, digits and special characters.
     *
     * @param string $secret  A secret value included in the CSRF token
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Returns the ID of the user session
     *
     * Automatically starts the session if necessary.
     *
     * @return string  The session ID
     */",
 "/**
 * Default implementation of CsrfProviderInterface
 *
 * This provider uses the session ID returned by session_id() as well as a
 * user-defined secret value to secure the CSRF token.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param LoggerInterface $logger A LoggerInterface instance
     */",
 "/**
     * Logs a message.
     *
     * @param string $message A message to log
     */",
 "/**
 * Binds the Symfony templating loader debugger to the Symfony logger.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new Header.
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Set the character set used in this Header.
   * @param string $charset
   */",
 "/**
   * Get the character set used in this Header.
   * @return string
   */",
 "/**
   * Set the language used in this Header.
   * For example, for US English, \'en-us\'.
   * This can be unspecified.
   * @param string $lang
   */",
 "/**
   * Get the language used in this Header.
   * @return string
   */",
 "/**
   * Set the encoder used for encoding the header.
   * @param Swift_Mime_HeaderEncoder $encoder
   */",
 "/**
   * Get the encoder used for encoding this Header.
   * @return Swift_Mime_HeaderEncoder
   */",
 "/**
   * Set the grammar used for the header.
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Get the grammar used for this Header.
   * @return Swift_Mime_Grammar
   */",
 "/**
   * Get the name of this header (e.g. charset).
   * @return string
   */",
 "/**
   * Set the maximum length of lines in the header (excluding EOL).
   * @param int $lineLength
   */",
 "/**
   * Get the maximum permitted length of lines in this Header.
   * @return int
   */",
 "/**
   * Get this Header rendered as a RFC 2822 compliant string.
   * @return string
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Returns a string representation of this object.
   *
   * @return string
   *
   * @see toString()
   */",
 "/**
   * Set the name of this Header field.
   * @param string $name
   * @access protected
   */",
 "/**
   * Produces a compliant, formatted RFC 2822 \'phrase\' based on the string given.
   * @param Swift_Mime_Header $header
   * @param string $string as displayed
   * @param string $charset of the text
   * @param Swift_Mime_HeaderEncoder $encoder
   * @param boolean $shorten the first line to make remove for header name
   * @return string
   */",
 "/**
   * Encode needed word tokens within a string of input.
   * @param string $input
   * @param string $usedLength, optional
   * @return string
   */",
 "/**
   * Test if a token needs to be encoded or not.
   * @param string $token
   * @return boolean
   */",
 "/**
   * Splits a string into tokens in blocks of words which can be encoded quickly.
   * @param string $string
   * @return string[]
   */",
 "/**
   * Get a token as an encoded word for safe insertion into headers.
   * @param string $token to encode
   * @param int $firstLineOffset, optional
   * @return string
   */",
 "/**
   * Generates tokens from the given string which include CRLF as individual tokens.
   * @param string $token
   * @return string[]
   * @access protected
   */",
 "/**
   * Set a value into the cache.
   * @param string $value
   * @access protected
   */",
 "/**
   * Get the value in the cache.
   * @return string
   * @access protected
   */",
 "/**
   * Clear the cached value if $condition is met.
   * @param boolean $condition
   * @access protected
   */",
 "/**
   * Generate a list of all tokens in the final header.
   * @param string $string input, optional
   * @return string[]
   * @access private
   */",
 "/**
   * Takes an array of tokens which appear in the header and turns them into
   * an RFC 2822 compliant string, adding FWSP where needed.
   * @param string[] $tokens
   * @return string
   * @access private
   */",
 "/**
 * An abstract base MIME Header.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
 * X509 authentication listener.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Checks if the given class implements the NormalizableInterface.
     *
     * @param mixed   $data   Data to normalize.
     * @param string  $format The format being (de-)serialized from or into.
     * @return Boolean
     */",
 "/**
     * Checks if the given class implements the NormalizableInterface.
     *
     * @param mixed   $data   Data to denormalize from.
     * @param string  $type   The class to which the data should be denormalized.
     * @param string  $format The format being deserialized from.
     * @return Boolean
     */",
 "/**
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Checks if security is enabled.
     *
     * @return Boolean true if security is enabled, false otherwise
     */",
 "/**
     * Gets the user.
     *
     * @return string The user
     */",
 "/**
     * Gets the roles of the user.
     *
     * @return array The roles
     */",
 "/**
     * Checks if the user is authenticated or not.
     *
     * @return Boolean true if the user is authenticated, false otherwise
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * SecurityDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Base class for method metadata.
 *
 * This class is intended to be extended to add your application specific
 * properties, and flags.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Filter for the Google Closure Compiler API.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
   * Create a new SendEvent for $source and $message.
   * @param Swift_Transport $source
   * @param Swift_Mime_Message $message
   */",
 "/**
   * Get the Transport used to send the Message.
   * @return Swift_Transport
   */",
 "/**
   * Get the Message being sent.
   * @return Swift_Mime_Message
   */",
 "/**
   * Set the array of addresses that failed in sending.
   * @param array $recipients
   */",
 "/**
   * Get an recipient addresses which were not accepted for delivery.
   * @return string[]
   */",
 "/**
   * Set the result of sending.
   * @return int
   */",
 "/**
   * Get the result of this Event.
   * The return value is a bitmask from
   * {@link RESULT_PENDING, RESULT_SUCCESS, RESULT_TENTATIVE, RESULT_FAILED}
   * @return int
   */",
 "/**
 * Generated when a message is being sent.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param UserProviderInterface $userProvider An UserProviderInterface instance
     * @param UserCheckerInterface  $userChecker  An UserCheckerInterface instance
     * @param string                $providerKey  The provider key
     */",
 "/**
      * {@inheritdoc}
      */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Processes a pre-authenticated authentication request.
 *
 * This authentication provider will not perform any checks on authentication
 * requests, as they should already be pre-authenticated. However, the
 * UserProviderInterface implementation may still throw a
 * UsernameNotFoundException, for example.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks whether the given record will be handled by this handler.
     *
     * This is mostly done for performance reasons, to avoid calling processors for nothing.
     *
     * @return Boolean
     */",
 "/**
     * Handles a record.
     *
     * The return value of this function controls the bubbling process of the handler stack.
     *
     * @param array $record The record to handle
     * @return Boolean True means that this handler handled the record, and that bubbling is not permitted.
     *                 False means the record was either not processed or that this handler allows bubbling.
     */",
 "/**
     * Handles a set of records at once.
     *
     * @param array $records The records to handle (an array of record arrays)
     */",
 "/**
     * Adds a processor in the stack.
     *
     * @param callable $callback
     */",
 "/**
     * Removes the processor on top of the stack and returns it.
     *
     * @return callable
     */",
 "/**
     * Sets the formatter.
     *
     * @param FormatterInterface $formatter
     */",
 "/**
     * Gets the formatter.
     *
     * @return FormatterInterface
     */",
 "/**
 * Interface that all Monolog Handlers must implement
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Create a new Column
     * 
     * @param string $columnName
     * @param Doctrine\DBAL\Types\Type $type
     * @param int $length
     * @param bool $notNull
     * @param mixed $default
     * @param bool $unsigned
     * @param bool $fixed
     * @param int $precision
     * @param int $scale
     * @param array $platformOptions
     */",
 "/**
     * @param array $options
     * @return Column
     */",
 "/**
     * @param Type $type
     * @return Column
     */",
 "/**
     * @param int $length
     * @return Column
     */",
 "/**
     * @param int $precision
     * @return Column
     */",
 "/**
     * @param  int $scale
     * @return Column
     */",
 "/**
     *
     * @param  bool $unsigned
     * @return Column
     */",
 "/**
     *
     * @param  bool $fixed
     * @return Column
     */",
 "/**
     * @param  bool $notnull
     * @return Column
     */",
 "/**
     *
     * @param  mixed $default
     * @return Column
     */",
 "/**
     *
     * @param array $platformOptions
     * @return Column
     */",
 "/**
     *
     * @param  string $name
     * @param  mixed $value
     * @return Column
     */",
 "/**
     *
     * @param  string
     * @return Column
     */",
 "/**
     * @param Visitor $visitor
     */",
 "/**
     * @return array
     */",
 "/**
 * Object representation of a database column
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * SecurityFactoryInterface is the interface for all security authentication listener.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Responds to the app.config configuration parameter.
     *
     * @param array            $configs
     * @param ContainerBuilder $container
     */",
 "/**
     * Loads Form configuration.
     *
     * @param array            $config    A configuration array
     * @param ContainerBuilder $container A ContainerBuilder instance
     * @param XmlFileLoader    $loader    An XmlFileLoader instance
     */",
 "/**
     * Loads the ESI configuration.
     *
     * @param array         $config An ESI configuration array
     * @param XmlFileLoader $loader An XmlFileLoader instance
     */",
 "/**
     * Loads the profiler configuration.
     *
     * @param array            $config    A profiler configuration array
     * @param ContainerBuilder $container A ContainerBuilder instance
     * @param XmlFileLoader    $loader    An XmlFileLoader instance
     */",
 "/**
     * Loads the router configuration.
     *
     * @param array            $config    A router configuration array
     * @param ContainerBuilder $container A ContainerBuilder instance
     * @param XmlFileLoader    $loader    An XmlFileLoader instance
     */",
 "/**
     * Loads the session configuration.
     *
     * @param array            $config    A session configuration array
     * @param ContainerBuilder $container A ContainerBuilder instance
     * @param XmlFileLoader    $loader    An XmlFileLoader instance
     */",
 "/**
     * Loads the templating configuration.
     *
     * @param array            $config    A templating configuration array
     * @param string           $ide
     * @param ContainerBuilder $container A ContainerBuilder instance
     * @param XmlFileLoader    $loader    An XmlFileLoader instance
     */",
 "/**
     * Returns a definition for an asset package.
     */",
 "/**
     * Loads the translator configuration.
     *
     * @param array            $config    A translator configuration array
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Loads the validator configuration.
     *
     * @param array            $config    A validation configuration array
     * @param ContainerBuilder $container A ContainerBuilder instance
     * @param XmlFileLoader    $loader    An XmlFileLoader instance
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
 * FrameworkExtension.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jeremy Mikola <jmikola@gmail.com>
 */",
 "/**
 * BasicAuthenticationEntryPoint starts an HTTP Basic authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Uses the given value transformers to transform values
     *
     * @param array $transformers
     */",
 "/**
     * Passes the value through the transform() method of all nested transformers
     *
     * The transformers receive the value in the same order as they were passed
     * to the constructor. Each transformer receives the result of the previous
     * transformer as input. The output of the last transformer is returned
     * by this method.
     *
     * @param  mixed $value  The original value
     *
     * @return mixed         The transformed value
     *
     * @throws Symfony\Component\Form\Exception\TransformationFailedException
     * @throws Symfony\Component\Form\Exception\\UnexpectedTypeException
     */",
 "/**
     * Passes the value through the reverseTransform() method of all nested
     * transformers
     *
     * The transformers receive the value in the reverse order as they were passed
     * to the constructor. Each transformer receives the result of the previous
     * transformer as input. The output of the last transformer is returned
     * by this method.
     *
     * @param  mixed $value  The transformed value
     *
     * @return mixed         The reverse-transformed value
     *
     * @throws Symfony\Component\Form\Exception\TransformationFailedException
     * @throws Symfony\Component\Form\Exception\\UnexpectedTypeException
     */",
 "/**
 * Passes a value through multiple value transformers
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param SecurityContextInterface $context A SecurityContext instance
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     */",
 "/**
 * SecurityHelper provides read-only access to the security context.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns a cache key for the current asset.
     *
     * The key is composed of everything but an asset\'s content:
     *
     *  * source root
     *  * source path
     *  * target url
     *  * last modified
     *  * filters
     *
     * @param AssetInterface  $asset            The asset
     * @param FilterInterface $additionalFilter Any additional filter being applied
     * @param string          $salt             Salt for the key
     *
     * @return string A key for identifying the current asset
     */",
 "/**
 * Caches an asset to avoid the cost of loading and dumping.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * Sets the session on the request.
 *
 * This will also start the session if it was already started during a previous
 * request.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/** @Annotation */",
 "/**
     * @param string $seqName The name of the sequence to pass to lastInsertId()
     *                        to obtain the last generated identifier within the current
     *                        database session/connection, if any.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Id generator that obtains IDs from special \"identity\" columns. These are columns
 * that automatically get a database-generated, auto-incremented identifier on INSERT.
 * This generator obtains the last insert id after such an insert.
 */",
 "/**
 * Registers our custom compiler pass
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Sets a cookie.
     *
     * @param Cookie $cookie A Cookie instance
     *
     * @api
     */",
 "/**
     * Gets a cookie by name.
     *
     * @param string $name The cookie name
     *
     * @return Cookie|null A Cookie instance or null if the cookie does not exist
     *
     * @api
     */",
 "/**
     * Removes a cookie by name.
     *
     * @param string $name The cookie name
     *
     * @api
     */",
 "/**
     * Removes all the cookies from the jar.
     *
     * @api
     */",
 "/**
     * Updates the cookie jar from a Response object.
     *
     * @param Response $response A Response object
     * @param string   $uri    The base URL
     */",
 "/**
     * Returns not yet expired cookies.
     *
     * @return array An array of cookies
     */",
 "/**
     * Returns not yet expired cookie values for the given URI.
     *
     * @param string  $uri A URI
     * @param Boolean $returnsRawValue Returns raw value or urldecoded value
     *
     * @return array An array of cookie values
     */",
 "/**
     * Returns not yet expired raw cookie values for the given URI.
     *
     * @param string $uri A URI
     *
     * @return array An array of cookie values
     */",
 "/**
     * Removes all expired cookies.
     */",
 "/**
 * CookieJar.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Sets the parser associated with this token parser
     *
     * @param $parser A Twig_Parser instance
     */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Interface implemented by token parsers.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for AM/PM markers format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
 * Checks if a number is odd.
 *
 * <pre>
 *  {{ var is odd }}
 * </pre>
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     *
     * @param string $tableName
     * @param array $columns
     * @param array $indexes
     * @param array $fkConstraints
     * @param int $idGeneratorType
     * @param array $options
     */",
 "/**
     * @param SchemaConfig $schemaConfig
     */",
 "/**
     * @return int
     */",
 "/**
     * Set Primary Key
     *
     * @param array $columns
     * @param string $indexName
     * @return Table
     */",
 "/**
     * @param array $columnNames
     * @param string $indexName
     * @return Table
     */",
 "/**
     *
     * @param array $columnNames
     * @param string $indexName
     * @return Table
     */",
 "/**
     * Check if an index begins in the order of the given columns.
     *
     * @param  array $columnsNames
     * @return bool
     */",
 "/**
     *
     * @param array $columnNames
     * @param string $indexName
     * @param bool $isUnique
     * @param bool $isPrimary
     * @return Table
     */",
 "/**
     * @param string $columnName
     * @param string $columnType
     * @param array $options
     * @return Column
     */",
 "/**
     * Rename Column
     *
     * @param string $oldColumnName
     * @param string $newColumnName
     * @return Table
     */",
 "/**
     * Change Column Details
     *
     * @param string $columnName
     * @param array $options
     * @return Table
     */",
 "/**
     * Drop Column from Table
     *
     * @param string $columnName
     * @return Table
     */",
 "/**
     * Add a foreign key constraint
     *
     * Name is inferred from the local columns
     *
     * @param Table $foreignTable
     * @param array $localColumns
     * @param array $foreignColumns
     * @param array $options
     * @param string $constraintName
     * @return Table
     */",
 "/**
     * Add a foreign key constraint
     *
     * Name is to be generated by the database itsself.
     *
     * @deprecated Use {@link addForeignKeyConstraint}
     * @param Table $foreignTable
     * @param array $localColumns
     * @param array $foreignColumns
     * @param array $options
     * @return Table
     */",
 "/**
     * Add a foreign key constraint with a given name
     *
     * @deprecated Use {@link addForeignKeyConstraint}
     * @param string $name
     * @param Table $foreignTable
     * @param array $localColumns
     * @param array $foreignColumns
     * @param array $options
     * @return Table
     */",
 "/**
     * @param string $name
     * @param string $value
     * @return Table
     */",
 "/**
     * @param Column $column
     */",
 "/**
     * Add index to table
     *
     * @param Index $indexCandidate
     * @return Table
     */",
 "/**
     * @param ForeignKeyConstraint $constraint
     */",
 "/**
     * Does Table have a foreign key constraint with the given name?
     *      *
     * @param  string $constraintName
     * @return bool
     */",
 "/**
     * @param string $constraintName
     * @return ForeignKeyConstraint
     */",
 "/**
     * @return Column[]
     */",
 "/**
     * Does this table have a column with the given name?
     *
     * @param  string $columnName
     * @return bool
     */",
 "/**
     * Get a column instance
     *
     * @param  string $columnName
     * @return Column
     */",
 "/**
     * @return Index|null
     */",
 "/**
     * Check if this table has a primary key.
     *
     * @return bool
     */",
 "/**
     * @param  string $indexName
     * @return bool
     */",
 "/**
     * @param  string $indexName
     * @return Index
     */",
 "/**
     * @return array
     */",
 "/**
     * Get Constraints
     *
     * @return array
     */",
 "/**
     * @param Visitor $visitor
     */",
 "/**
     * Clone of a Table triggers a deep clone of all affected assets
     */",
 "/**
 * Object Representation of a table
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to generate entity classes and method stubs from your mapping information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * LogicException
 *
 * @author Lukas Kahwe Smith <smith@pooteeweet.org>
 */",
 "/**
     * Constructor.
     *
     * @param array $guessers Guessers as instances of FormTypeGuesserInterface
     *
     * @throws UnexpectedTypeException if any guesser does not implement FormTypeGuesserInterface
     */",
 "/**
     * Executes a closure for each guesser and returns the best guess from the
     * return values
     *
     * @param  \Closure $closure  The closure to execute. Accepts a guesser
     *                            as argument and should return a Guess instance
     *
     * @return FieldFactoryGuess  The guess with the highest confidence
     */",
 "/**
 * Convert Doctrine ORM metadata mapping information between the various supported
 * formats.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Transforms a normalized format into a localized money string.
     *
     * @param  number $value  Normalized number
     *
     * @return string         Localized money string.
     *
     * @throws UnexpectedTypeException if the given value is not numeric
     * @throws TransformationFailedException if the value can not be transformed
     */",
 "/**
     * Transforms a localized money string into a normalized format.
     *
     * @param string $value Localized money string
     *
     * @return number Normalized number
     *
     * @throws UnexpectedTypeException if the given value is not a string
     * @throws TransformationFailedException if the value can not be transformed
     */",
 "/**
 * Transforms between a normalized format and a localized money string.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 */",
 "/**
 * Represents a @SecureReturn annotation.
 *
 * @Annotation
 * @Target(\"METHOD\")
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Get the level at which this entity shall be nested in final document.
   * The lower the value, the more outermost the entity will be nested.
   * @return int
   * @see LEVEL_TOP, LEVEL_MIXED, LEVEL_RELATED, LEVEL_ALTERNATIVE
   */",
 "/**
   * Get the qualified content-type of this mime entity.
   * @return string
   */",
 "/**
   * Returns a unique ID for this entity.
   * For most entities this will likely be the Content-ID, though it has
   * no explicit semantic meaning and can be considered an identifier for
   * programming logic purposes.
   * If a Content-ID header is present, this value SHOULD match the value of
   * the header.
   * @return string
   */",
 "/**
   * Get all children nested inside this entity.
   * These are not just the immediate children, but all children.
   * @return Swift_Mime_MimeEntity[]
   */",
 "/**
   * Set all children nested inside this entity.
   * This includes grandchildren.
   * @param Swift_Mime_MimeEntity[] $children
   */",
 "/**
   * Get the collection of Headers in this Mime entity.
   * @return Swift_Mime_Header[]
   */",
 "/**
   * Get the body content of this entity as a string.
   * Returns NULL if no body has been set.
   * @return string
   */",
 "/**
   * Set the body content of this entity as a string.
   * @param string $body
   * @param string $contentType optional
   */",
 "/**
   * Get this entire entity in its string form.
   * @return string
   */",
 "/**
   * Get this entire entity as a ByteStream.
   * @param Swift_InputByteStream $is to write to
   */",
 "/**
 * A MIME entity, such as an attachment.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
 * This exception is thrown when the csrf token is invalid.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @param string $format The format of the message
     * @param string $dateFormat The format of the timestamp: one supported by DateTime::format
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Formats incoming records into a one-line string
 *
 * This is especially useful for logging to files
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
 * Tags either the closure JAR or API filter for the filter manager.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Returns the content of the template.
     *
     * @return string The template content
     *
     * @api
     */",
 "/**
 * StringStorage represents a template stored in a string.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Loads the user for the given username.
     *
     * This method must throw UsernameNotFoundException if the user is not
     * found.
     *
     * @param string $username The username
     *
     * @return UserInterface
     *
     * @see UsernameNotFoundException
     *
     * @throws UsernameNotFoundException if the user is not found
     *
     */",
 "/**
     * Refreshes the user for the account interface.
     *
     * It is up to the implementation to decide if the user data should be
     * totally reloaded (e.g. from the database), or if the UserInterface
     * object can just be merged into some internal array of users / identity
     * map.
     * @param UserInterface $user
     *
     * @return UserInterface
     *
     * @throws UnsupportedUserException if the account is not supported
     */",
 "/**
     * Whether this provider supports the given user class
     *
     * @param string $class
     *
     * @return Boolean
     */",
 "/**
 * Represents a class that loads UserInterface objects from some source for the authentication system.
 *
 * In a typical authentication configuration, a username (i.e. some unique
 * user identifier) credential enters the system (via form login, or any
 * method). The user provider that is configured with that authentication
 * method is asked to load the UserInterface object for the given username
 * (via loadUserByUsername) so that the rest of the process can continue.
 *
 * Internally, a user provider can load users from any source (databases,
 * configuration, web service). This is totally independent of how the authentication
 * information is submitted or what the UserInterface object looks like.
 *
 * @see UserInterface
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new LoadBalancedTransport with $transports.
   * @param array $transports
   */",
 "/**
   * Create a new LoadBalancedTransport instance.
   * @param string $transports
   * @return Swift_LoadBalancedTransport
   */",
 "/**
 * Redudantly and rotationally uses several Transport implementations when sending.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
   * Constructor should not be used.
   * Use {@link getInstance()} instead.
   */",
 "/**
   * Returns a singleton of the DependencyContainer.
   * @return Swift_DependencyContainer
   */",
 "/**
   * List the names of all items stored in the Container.
   * @return array
   */",
 "/**
   * Test if an item is registered in this container with the given name.
   * @param string $itemName
   * @return boolean
   * @see register()
   */",
 "/**
   * Lookup the item with the given $itemName.
   * @param string $itemName
   * @return mixed
   * @throws Swift_DependencyException If the dependency is not found
   * @see register()
   */",
 "/**
   * Create an array of arguments passed to the constructor of $itemName.
   * @param string $itemName
   * @return array
   */",
 "/**
   * Register a new dependency with $itemName.
   * This method returns the current DependencyContainer instance because it
   * requires the use of the fluid interface to set the specific details for the
   * dependency.
   *
   * @param string $itemName
   * @return Swift_DependencyContainer
   * @see asNewInstanceOf(), asSharedInstanceOf(), asValue()
   */",
 "/**
   * Specify the previously registered item as a literal value.
   * {@link register()} must be called before this will work.
   *
   * @param mixed $value
   * @return Swift_DependencyContainer
   */",
 "/**
   * Specify the previously registered item as an alias of another item.
   * @param string $lookup
   * @return Swift_DependencyContainer
   */",
 "/**
   * Specify the previously registered item as a new instance of $className.
   * {@link register()} must be called before this will work.
   * Any arguments can be set with {@link withDependencies()},
   * {@link addConstructorValue()} or {@link addConstructorLookup()}.
   *
   * @param string $className
   * @return Swift_DependencyContainer
   * @see withDependencies(), addConstructorValue(), addConstructorLookup()
   */",
 "/**
   * Specify the previously registered item as a shared instance of $className.
   * {@link register()} must be called before this will work.
   * @param string $className
   * @return Swift_DependencyContainer
   */",
 "/**
   * Specify a list of injected dependencies for the previously registered item.
   * This method takes an array of lookup names.
   * 
   * @param array $lookups
   * @return Swift_DependencyContainer
   * @see addConstructorValue(), addConstructorLookup()
   */",
 "/**
   * Specify a literal (non looked up) value for the constructor of the
   * previously registered item.
   * 
   * @param mixed $value
   * @return Swift_DependencyContainer
   * @see withDependencies(), addConstructorLookup()
   */",
 "/**
   * Specify a dependency lookup for the constructor of the previously
   * registered item.
   * 
   * @param string $lookup
   * @return Swift_DependencyContainer
   * @see withDependencies(), addConstructorValue()
   */",
 "/** Get the literal value with $itemName */",
 "/** Resolve an alias to another item */",
 "/** Create a fresh instance of $itemName */",
 "/** Create and register a shared instance of $itemName */",
 "/** Get the current endpoint in the store */",
 "/** Get an argument list with dependencies resolved */",
 "/** Resolve a single dependency with an collections */",
 "/**
 * Dependency Injection container.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * Returns an array of all reachable roles.
     *
     * Reachable roles are the roles directly assigned but also all roles that
     * are transitively reachable from them in the role hierarchy.
     *
     * @param array $roles An array of directly assigned roles
     *
     * @return array An array of all reachable roles
     */",
 "/**
 * RoleHierarchyInterface is the interface for a role hierarchy.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string  $inputTimezone    The input timezone
     * @param string  $outputTimezone   The output timezone
     * @param array   $fields           The date fields
     * @param Boolean $pad              Whether to use padding
     *
     * @throws UnexpectedTypeException if a timezone is not a string
     */",
 "/**
     * Transforms a normalized date into a localized date.
     *
     * @param  DateTime $dateTime  Normalized date.
     *
     * @return array               Localized date.
     *
     * @throws UnexpectedTypeException if the given value is not an instance of \DateTime
     * @throws TransformationFailedException if the output timezone is not supported
     */",
 "/**
     * Transforms a localized date into a normalized date.
     *
     * @param  array $value  Localized date
     *
     * @return DateTime      Normalized date
     *
     * @throws UnexpectedTypeException if the given value is not an array
     * @throws TransformationFailedException if the value could not bet transformed
     * @throws TransformationFailedException if the input timezone is not supported
     */",
 "/**
 * Transforms between a normalized time and a localized time string/array.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 */",
 "/**
     * Constructor
     *
     * @param string $message  The exception message. A note to install the intl extension is appended to this string
     */",
 "/**
 * Base exception class for not implemented behaviors of the intl extension in the Locale component.
 *
 * @author Eriksen Costa <eriksen.costa@infranology.com.br>
 */",
 "/**
   * Create a new MailTransport, optionally specifying $extraParams.
   * @param string $extraParams
   */",
 "/**
   * Create a new MailTransport instance.
   * @param string $extraParams To be passed to mail()
   * @return Swift_MailTransport
   */",
 "/**
 * Sends Messages using the mail() function.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param string  $baseUrl   The base URL
     * @param string  $method    The HTTP method
     * @param string  $host      The HTTP host name
     * @param string  $scheme    The HTTP scheme
     * @param integer $httpPort  The HTTP port
     * @param integer $httpsPort The HTTPS port
     *
     * @api
     */",
 "/**
     * Gets the base URL.
     *
     * @return string The base URL
     */",
 "/**
     * Sets the base URL.
     *
     * @param string $baseUrl The base URL
     *
     * @api
     */",
 "/**
     * Gets the HTTP method.
     *
     * The method is always an uppercased string.
     *
     * @return string The HTTP method
     */",
 "/**
     * Sets the HTTP method.
     *
     * @param string $method The HTTP method
     *
     * @api
     */",
 "/**
     * Gets the HTTP host.
     *
     * @return string The HTTP host
     */",
 "/**
     * Sets the HTTP host.
     *
     * @param string $host The HTTP host
     *
     * @api
     */",
 "/**
     * Gets the HTTP scheme.
     *
     * @return string The HTTP scheme
     */",
 "/**
     * Sets the HTTP scheme.
     *
     * @param string $scheme The HTTP scheme
     *
     * @api
     */",
 "/**
     * Gets the HTTP port.
     *
     * @return string The HTTP port
     */",
 "/**
     * Sets the HTTP port.
     *
     * @param string $httpPort The HTTP port
     *
     * @api
     */",
 "/**
     * Gets the HTTPS port.
     *
     * @return string The HTTPS port
     */",
 "/**
     * Sets the HTTPS port.
     *
     * @param string $httpsPort The HTTPS port
     *
     * @api
     */",
 "/**
     * Returns the parameters.
     *
     * @return array The parameters
     */",
 "/**
     * Sets the parameters.
     *
     * This method implements a fluent interface.
     *
     * @param array $parameters The parameters
     *
     * @return Route The current Route instance
     */",
 "/**
     * Gets a parameter value.
     *
     * @param string $name A parameter name
     *
     * @return mixed The parameter value
     */",
 "/**
     * Checks if a parameter value is set for the given parameter.
     *
     * @param string $name A parameter name
     *
     * @return Boolean true if the parameter value is set, false otherwise
     */",
 "/**
     * Sets a parameter value.
     *
     * @param string $name    A parameter name
     * @param mixed  $parameter The parameter value
     *
     * @api
     */",
 "/**
 * Holds information about the current request.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * A configured resource.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param Boolean $debug Whether to use the debug mode
     */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * FrameworkExtension configuration structure.
 *
 * @author Jeremy Mikola <jmikola@gmail.com>
 */",
 "/**
 * DeleteClause ::= \"DELETE\" [\"FROM\"] AbstractSchemaName [[\"AS\"] AliasIdentificationVariable]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor
     *
     * @param  string  $locale   The locale code
     * @param  int     $style    Style of the formatting, one of the format style constants
     * @param  string  $pattern  A pattern string in case $style is NumberFormat::PATTERN_DECIMAL or
     *                           NumberFormat::PATTERN_RULEBASED. It must conform to  the syntax
     *                           described in the ICU DecimalFormat or ICU RuleBasedNumberFormat documentation
     *
     * @see    http://www.php.net/manual/en/numberformatter.create.php
     * @see    http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details
     * @see    http://www.icu-project.org/apiref/icu4c/classRuleBasedNumberFormat.html#_details
     *
     * @throws MethodArgumentValueNotImplementedException  When $locale different than \'en\' is passed
     * @throws MethodArgumentValueNotImplementedException  When the $style is not supported
     * @throws MethodArgumentNotImplementedException       When the pattern value is different than null
     */",
 "/**
     * Static constructor
     *
     * @param  string  $locale   The locale code
     * @param  int     $style    Style of the formatting, one of the format style constants
     * @param  string  $pattern  A pattern string in case $style is NumberFormat::PATTERN_DECIMAL or
     *                           NumberFormat::PATTERN_RULEBASED. It must conform to  the syntax
     *                           described in the ICU DecimalFormat or ICU RuleBasedNumberFormat documentation
     *
     * @see    http://www.php.net/manual/en/numberformatter.create.php
     * @see    http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details
     * @see    http://www.icu-project.org/apiref/icu4c/classRuleBasedNumberFormat.html#_details
     *
     * @throws MethodArgumentValueNotImplementedException  When $locale different than \'en\' is passed
     * @throws MethodArgumentValueNotImplementedException  When the $style is not supported
     * @throws MethodArgumentNotImplementedException       When the pattern value is different than null
     */",
 "/**
     * Format a currency value
     *
     * @param  float   $value     The numeric currency value
     * @param  string  $currency  The 3-letter ISO 4217 currency code indicating the currency to use
     *
     * @return string             The formatted currency value
     *
     * @see    http://www.php.net/manual/en/numberformatter.formatcurrency.php
     * @see    http://www.iso.org/iso/support/faqs/faqs_widely_used_standards/widely_used_standards_other/currency_codes/currency_codes_list-1.htm
     */",
 "/**
     * Format a number
     *
     * @param  number      $value                     The value to format
     * @param  int         $type                      Type of the formatting, one of the format type constants
     *
     * @return Boolean|string                         The formatted value or false on error
     *
     * @see    http://www.php.net/manual/en/numberformatter.format.php
     *
     * @throws RuntimeException                       If the method is called with the class $style \'CURRENCY\'
     * @throws MethodArgumentNotImplementedException  If the $type is different than TYPE_DEFAULT
     */",
 "/**
     * Returns an attribute value
     *
     * @param  int       $attr   An attribute specifier, one of the numeric attribute constants
     *
     * @return Boolean|int       The attribute value on success or false on error
     *
     * @see    http://www.php.net/manual/en/numberformatter.getattribute.php
     */",
 "/**
     * Returns formatter\'s last error code. Always returns the U_ZERO_ERROR class constant value
     *
     * @return int  The error code from last formatter call
     *
     * @see    http://www.php.net/manual/en/numberformatter.geterrorcode.php
     */",
 "/**
     * Returns formatter\'s last error message. Always returns the U_ZERO_ERROR_MESSAGE class constant value
     *
     * @return string  The error message from last formatter call
     *
     * @see    http://www.php.net/manual/en/numberformatter.geterrormessage.php
     */",
 "/**
     * Returns the formatter\'s locale
     *
     * @param  int      $type     The locale name type to return between valid or actual (StubLocale::VALID_LOCALE or StubLocale::ACTUAL_LOCALE, respectively)
     *
     * @return string             The locale name used to create the formatter
     *
     * @see    http://www.php.net/manual/en/numberformatter.getlocale.php
     */",
 "/**
     * Returns the formatter\'s pattern
     *
     * @return Boolean|string     The pattern string used by the formatter or false on error
     *
     * @see    http://www.php.net/manual/en/numberformatter.getpattern.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns a formatter symbol value
     *
     * @param  int           $attr   A symbol specifier, one of the format symbol constants
     *
     * @return Boolean|string        The symbol value or false on error
     *
     * @see    http://www.php.net/manual/en/numberformatter.getsymbol.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns a formatter text attribute value
     *
     * @param  int           $attr   An attribute specifier, one of the text attribute constants
     *
     * @return Boolean|string        The attribute value or false on error
     *
     * @see    http://www.php.net/manual/en/numberformatter.gettextattribute.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Parse a currency number
     *
     * @param  string       $value      The value to parse
     * @param  string       $currency   Parameter to receive the currency name (reference)
     * @param  int          $position   Offset to begin the parsing on return this value will hold the offset at which the parsing ended
     *
     * @return Boolean|string           The parsed numeric value of false on error
     *
     * @see    http://www.php.net/manual/en/numberformatter.parsecurrency.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Parse a number
     *
     * @param  string       $value                          The value to parse
     * @param  string       $type                           Type of the formatting, one of the format type constants. NumberFormatter::TYPE_DOUBLE by default
     * @param  int          $position                       Offset to begin the parsing on return this value will hold the offset at which the parsing ended
     *
     * @return Boolean|string                               The parsed value of false on error
     *
     * @see    http://www.php.net/manual/en/numberformatter.parse.php
     *
     * @throws MethodArgumentNotImplementedException        When $position different than null, behavior not implemented
     */",
 "/**
     * Set an attribute
     *
     * @param  int   $attr                                 An attribute specifier, one of the numeric attribute constants
     * @param  int   $value                                The attribute value
     *
     * @return Boolean                                     true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/numberformatter.setattribute.php
     *
     * @throws MethodArgumentValueNotImplementedException  When the $attr is not supported
     * @throws MethodArgumentValueNotImplementedException  When the $value is not supported
     */",
 "/**
     * Set the formatter\'s pattern
     *
     * @param  string  $pattern   A pattern string in conformance with the ICU DecimalFormat documentation
     *
     * @return Boolean            true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/numberformatter.setpattern.php
     * @see    http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Set the formatter\'s symbol
     *
     * @param  int      $attr    A symbol specifier, one of the format symbol constants
     * @param  string   $value   The value for the symbol
     *
     * @return Boolean           true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/numberformatter.setsymbol.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Set a text attribute
     *
     * @param  int   $attr       An attribute specifier, one of the text attribute constants
     * @param  int   $value      The attribute value
     *
     * @return Boolean           true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/numberformatter.settextattribute.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Rounds a currency value, applying increment rounding if applicable
     *
     * When a currency have a rounding increment, an extra round is made after the first one. The rounding factor is
     * determined in the ICU data and is explained as of:
     *
     * \"the rounding increment is given in units of 10^(-fraction_digits)\"
     *
     * The only actual rounding data as of this writing, is CHF.
     *
     * @param  float   $value     The numeric currency value
     * @param  string  $currency  The 3-letter ISO 4217 currency code indicating the currency to use
     *
     * @return string             The rounded numeric currency value
     *
     * @see    http://en.wikipedia.org/wiki/Swedish_rounding
     * @see    http://www.docjar.com/html/api/com/ibm/icu/util/Currency.java.html#1007
     */",
 "/**
     * Returns the currency symbol
     *
     * @param  string   $currency   The 3-letter ISO 4217 currency code indicating the currency to use
     *
     * @return string               The currency symbol
     */",
 "/**
     * Returns the fraction digits of a currency
     *
     * @param  string   $currency   The 3-letter ISO 4217 currency code indicating the currency to use
     *
     * @return string               The fraction digits of a currency
     */",
 "/**
     * Returns the rounding increment of a currency
     *
     * @param  string   $currency   The 3-letter ISO 4217 currency code indicating the currency to use
     *
     * @return string               The rounding increment of a currency
     */",
 "/**
     * Rounds a value.
     *
     * @param  numeric   $value      The value to round
     * @param  int       $precision  The number of decimal digits to round to
     *
     * @return numeric               The rounded value
     */",
 "/**
     * Formats a number.
     *
     * @param  numeric   $value      The numeric value to format
     * @param  int       $precision  The number of decimal digits to use
     *
     * @return string                The formatted number
     */",
 "/**
     * Returns the precision value if the the DECIMAL style is being used and the FRACTION_DIGITS attribute is unitialized.
     *
     * @param  numeric  $value      The value to get the precision from if the FRACTION_DIGITS attribute is unitialized
     * @param  int      $precision  The precision value to returns if the FRACTION_DIGITS attribute is initialized
     *
     * @return int                  The precision value
     */",
 "/**
     * Check if the attribute is initialized (value set by client code).
     *
     * @param  string  $attr   The attribute name
     *
     * @return Boolean         true if the value was set by client, false otherwise
     */",
 "/**
     * Returns the numeric value using the $type to convert to the right data type.
     *
     * @param  mixed    $value   The value to be converted
     * @param  int      $type    The type to convert. Can be TYPE_DOUBLE (float) or TYPE_INT32 (int)
     *
     * @return numeric           The converted value
     */",
 "/**
     * Convert the value data type to int or returns false if the value is out of the integer value range.
     *
     * @param  mixed  $value   The value to be converted
     *
     * @return int             The converted value
     */",
 "/**
     * Convert the value data type to int or returns false if the value is out of the integer value range.
     *
     * @param  mixed  $value   The value to be converted
     *
     * @return int|float       The converted value
     */",
 "/**
     * Check if the rounding mode is invalid.
     *
     * @param  int    $value  The rounding mode value to check
     *
     * @return Boolean        true if the rounding mode is invalid, false otherwise
     */",
 "/**
     * Returns the normalized value for the GROUPING_USED attribute. Any value that can be converted to int will be
     * cast to Boolean and then to int again. This way, negative values are converted to 1 and string values to 0.
     *
     * @param  mixed  $value   The value to be normalized
     *
     * @return int             The normalized value for the attribute (0 or 1)
     */",
 "/**
     * Returns the normalized value for the FRACTION_DIGITS attribute. The value is converted to int and if negative,
     * the returned value will be 0.
     *
     * @param  mixed  $value   The value to be normalized
     *
     * @return int             The normalized value for the attribute
     */",
 "/**
 * Provides a stub NumberFormatter for the \'en\' locale.
 *
 * @author Eriksen Costa <eriksen.costa@infranology.com.br>
 */",
 "/**
     * @see Command
     */",
 "/**
     * @see Command
     */",
 "/**
 * RouterApacheDumperCommand.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
*ImportDoctrineORMmetadatamappinginformationfromanexistingdatabase.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorJonathanH.Wage<jonwage@gmail.com>
*/",
 "/**
     * Loads a list of classes and caches them in one big file.
     *
     * @param array   $classes    An array of classes to load
     * @param string  $cacheDir   A cache directory
     * @param string  $name       The cache name prefix
     * @param Boolean $autoReload Whether to flush the cache when the cache is stale or not
     * @param Boolean $adaptive   Whether to remove already declared classes or not
     * @param string  $extension  File extension of the resulting file
     *
     * @throws \InvalidArgumentException When class can\'t be loaded
     */",
 "/**
     * Adds brackets around each namespace if it\'s not already the case.
     *
     * @param string $source Namespace string
     *
     * @return string Namespaces with brackets
     */",
 "/**
     * Writes a cache file.
     *
     * @param string $file Filename
     * @param string $content Temporary file content
     *
     * @throws \RuntimeException when a cache file cannot be written
     */",
 "/**
     * Removes comments from a PHP source string.
     *
     * We don\'t use the PHP php_strip_whitespace() function
     * as we want the content to be readable and well-formatted.
     *
     * @param string $source A PHP string
     *
     * @return string The PHP string with the comments removed
     */",
 "/**
 * ClassCollectionLoader.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param integer $optimizers The optimizer mode
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Optimizes print nodes.
     *
     * It replaces:
     *
     *   * \"echo $this->render(Parent)Block()\" with \"$this->display(Parent)Block()\"
     *
     * @param Twig_NodeInterface $node A Node
     * @param Twig_Environment   $env  The current Twig environment
     */",
 "/**
     * Removes \"raw\" filters.
     *
     * @param Twig_NodeInterface $node A Node
     * @param Twig_Environment   $env  The current Twig environment
     */",
 "/**
     * Optimizes \"for\" tag by removing the \"loop\" variable creation whenever possible.
     *
     * @param Twig_NodeInterface $node A Node
     * @param Twig_Environment   $env  The current Twig environment
     */",
 "/**
     * Optimizes \"for\" tag by removing the \"loop\" variable creation whenever possible.
     *
     * @param Twig_NodeInterface $node A Node
     * @param Twig_Environment   $env  The current Twig environment
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Twig_NodeVisitor_Optimizer tries to optimizes the AST.
 *
 * This visitor is always the last registered one.
 *
 * You can configure which optimizations you want to activate via the
 * optimizer mode.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets a TokenParser suitable for a tag.
     *
     * @param  string $tag A tag name
     *
     * @return null|Twig_TokenParserInterface A Twig_TokenParserInterface or null if no suitable TokenParser was found
     */",
 "/**
     * Calls Twig_TokenParserInterface::setParser on all parsers the implementation knows of.
     *
     * @param Twig_ParserInterface $parser A Twig_ParserInterface interface
     */",
 "/**
     * Gets the Twig_ParserInterface.
     *
     * @return null|Twig_ParserInterface A Twig_ParserInterface instance of null
     */",
 "/**
 * Interface implemented by token parser brokers.
 *
 * Token parser brokers allows to implement custom logic in the process of resolving a token parser for a given tag name.
 *
 * @package twig
 * @author  Arnaud Le Blanc <arnaud.lb@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param EntityManager         $em           An EntityManager instance
     * @param string                $class        The class name
     * @param string                $property     The property name
     * @param QueryBuilder|\Closure $queryBuilder An optional query builder
     * @param array|\Closure        $choices      An array of choices or a function returning an array
     */",
 "/**
     * Initializes the choices and returns them.
     *
     * If the entities were passed in the \"choices\" option, this method
     * does not have any significant overhead. Otherwise, if a query builder
     * was passed in the \"query_builder\" option, this builder is now used
     * to construct a query which is executed. In the last case, all entities
     * for the underlying class are fetched from the repository.
     *
     * @return array  An array of choices
     */",
 "/**
     * Converts entities into choices with support for groups.
     *
     * The choices are generated from the entities. If the entities have a
     * composite identifier, the choices are indexed using ascending integers.
     * Otherwise the identifiers are used as indices.
     *
     * If the option \"property\" was passed, the property path in that option
     * is used as option values. Otherwise this method tries to convert
     * objects to strings using __toString().
     *
     * @param array  $entities An array of entities
     * @param string $group    A group name
     */",
 "/**
     * Returns the fields of which the identifier of the underlying class consists.
     *
     * @return array
     */",
 "/**
     * Returns the according entities for the choices.
     *
     * If the choices were not initialized, they are initialized now. This
     * is an expensive operation, except if the entities were passed in the
     * \"choices\" option.
     *
     * @return array  An array of entities
     */",
 "/**
     * Returns the entity for the given key.
     *
     * If the underlying entities have composite identifiers, the choices
     * are initialized. The key is expected to be the index in the choices
     * array in this case.
     *
     * If they have single identifiers, they are either fetched from the
     * internal entity cache (if filled) or loaded from the database.
     *
     * @param  string $key The choice key (for entities with composite
     *                     identifiers) or entity ID (for entities with single
     *                     identifiers)
     *
     * @return object      The matching entity
     */",
 "/**
     * Returns the \ReflectionProperty instance for a property of the underlying class.
     *
     * @param  string $property    The name of the property
     *
     * @return \ReflectionProperty The reflection instance
     */",
 "/**
     * Returns the values of the identifier fields of an entity.
     *
     * Doctrine must know about this entity, that is, the entity must already
     * be persisted or added to the identity map before. Otherwise an
     * exception is thrown.
     *
     * @param  object $entity The entity for which to get the identifier
     *
     * @return array          The identifier values
     *
     * @throws FormException  If the entity does not exist in Doctrine\'s identity map
     */",
 "/**
     * Compiles the node to PHP.
     *
     * @param \Twig_Compiler $compiler A Twig_Compiler instance
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param array $options the names for tables
     * @return void
     */",
 "/**
     * Adds the class table to the schema
     *
     * @return void
     */",
 "/**
     * Adds the entry table to the schema
     *
     * @return void
     */",
 "/**
     * Adds the object identity table to the schema
     *
     * @return void
     */",
 "/**
     * Adds the object identity relation table to the schema
     *
     * @return void
     */",
 "/**
     * Adds the security identity table to the schema
     *
     * @return void
     */",
 "/**
 * The schema used for the ACL system.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * This must be declared on classes which inherit from classes that have
 * requested method invocation securing capabilities.
 *
 * It indicates to the analyzer that the developer is aware of these security
 * restrictions, and has applied them to the root class in an appropriate
 * fashion.
 *
 * We cannot do this automatically without properly analyzing the control flow,
 * and in some cases it is not possible at all. See the following example:
 *
 * <code>
 *     // child class
 *     public function editComment($commentId)
 *     {
 *         // retrieve comment from database
 *         $comment = $this->entityManager->find($commentId);
 *
 *         return parent::editComment($comment);
 *     }
 *
 *     // base class which is inherited from
 *     /**
 *      * @SecureParam(name=\"comment\", permissions=\"EDIT\")
 *      *\/
 *     public function editComment(Comment $comment)
 *     {
 *        // do some supposedly secure action
 *     }
 * <code>
 *
 * The above example can be rewritten so that we can apply security checks
 * automatically:
 *
 * <code>
 * 		 // child class
 *     public function editComment($commentId)
 *     {
 *         // retrieve comment from database
 *         $comment = $this->entityManager->find($commentId);
 *
 *         return $this->doEditComment($comment);
 *     }
 *
 *     // base class which is inherited from
 *     /**
 *      * @SecureParam(name=\"comment\", permissions=\"EDIT\")
 *      *\/
 *     protected function doEditComment(Comment $comment)
 *     {
 *        // do some secure action
 *     }
 * </code>
 *
 * @Annotation
 * @Target(\"METHOD\")
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Tests session attributes persist.
     *
     * @dataProvider getConfigs
     */",
 "/**
     * Tests flash messages work in practice.
     *
     * @dataProvider getConfigs
     */",
 "/**
     * See if two separate insulated clients can run without
     * polluting eachother\'s session data.
     *
     * @dataProvider getConfigs
     */",
 "/**
 * @group functional
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Parses a collection of YAML nodes
     *
     * @param array $nodes The YAML nodes
     *
     * @return array An array of values or Constraint instances
     */",
 "/**
     * Replaces all regular UniversalClassLoader instances by a DebugUniversalClassLoader ones.
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Checks that the class is actually declared in the included file.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Renders a view and returns a Response.
     *
     * @param string   $view       The view name
     * @param array    $parameters An array of parameters to pass to the view
     * @param Response $response   A Response instance
     *
     * @return Response A Response instance
     */",
 "/**
 * EngineInterface is the interface each engine must implement.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * \"DATE_ADD(date1, interval, unit)\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Convert word in to the format for a Doctrine table name. Converts \'ModelName\' to \'model_name\'
     *
     * @param  string $word  Word to tableize
     * @return string $word  Tableized word
     */",
 "/**
     * Convert a word in to the format for a Doctrine class name. Converts \'table_name\' to \'TableName\'
     *
     * @param string  $word  Word to classify
     * @return string $word  Classified word
     */",
 "/**
     * Camelize a word. This uses the classify() method and turns the first character to lowercase
     *
     * @param string $word
     * @return string $word
     */",
 "/**
 * Doctrine inflector has static methods for inflecting text
 * 
 * The methods in these classes are from several different sources collected
 * across several different php projects and several different authors. The 
 * original author names and emails are not known
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       1.0
 * @version     $Revision: 3189 $
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Finds profiler tokens for the given criteria.
     *
     * @param string $ip    The IP
     * @param string $url   The URL
     * @param string $limit The maximum number of tokens to return
     *
     * @return array An array of tokens
     */",
 "/**
     * Reads data associated with the given token.
     *
     * The method returns false if the token does not exists in the storage.
     *
     * @param string $token A token
     *
     * @return Profile The profile associated with token
     */",
 "/**
     * Write data associated with the given token.
     *
     * @param Profile $profile A Profile instance
     *
     * @return Boolean Write operation successful
     */",
 "/**
     * Purges all data from the database.
     */",
 "/**
 * ProfilerStorageInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor passes the directory or array of directories
     * to convert the Doctrine 1 schema files from
     *
     * @param array $from
     * @author Jonathan Wage
     */",
 "/**
     * Get an array of ClassMetadataInfo instances from the passed
     * Doctrine 1 schema
     *
     * @return array $metadatas  An array of ClassMetadataInfo instances
     */",
 "/**
 * Class to help with converting Doctrine 1 schema files to Doctrine 2 mapping files
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Expression class for DQL math statements
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param NodeInterface $element The NodeInterface element
     * @param string $type Node type
     * @param string $ident The ident
     *
     * @throws ParseException When incorrect PseudoNode type is given
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     * @throws ParseException When unsupported or unknown pseudo-class is found
     */",
 "/**
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified XPath expression
     */",
 "/**
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified XPath expression
     *
     * @throws ParseException If this element is the root element
     */",
 "/**
     * Marks this XPath expression as the first child.
     *
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified expression
     */",
 "/**
     * Sets the XPath  to be the last child.
     *
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified expression
     */",
 "/**
     * Sets the XPath expression to be the first of type.
     *
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified expression
     */",
 "/**
     * Sets the XPath expression to be the last of type.
     *
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified expression
     *
     * @throws ParseException Because *:last-of-type is not implemented
     */",
 "/**
     * Sets the XPath expression to be the only child.
     *
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified expression
     */",
 "/**
     * Sets the XPath expression to be only of type.
     *
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified expression
     *
     * @throws ParseException Because *:only-of-type is not implemented
     */",
 "/**
     * undocumented function
     *
     * @param XPathExpr $xpath The XPath expression
     *
     * @return XPathExpr The modified expression
     */",
 "/**
 * PseudoNode represents a \"selector:ident\" node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param string                $name   The name of the node
     * @param NodeParentInterface   $parent The parent
     */",
 "/**
     * Sets the parent node
     *
     * @param NodeParentInterface $parent The parent
     */",
 "/**
     * Returns the parent node.
     *
     * @return NodeParentInterface The builder of the parent node
     */",
 "/**
     * Creates the node.
     *
     * @param Boolean $forceRootNode Whether to force this node as the root node
     *
     * @return NodeInterface
     */",
 "/**
     * Sets the default value.
     *
     * @param mixed $value The default value
     *
     * @return NodeDefinition
     */",
 "/**
     * Sets the node as required.
     *
     * @return NodeDefinition
     */",
 "/**
     * Sets the equivalent value used when the node contains null.
     *
     * @param mixed $value
     *
     * @return NodeDefinition
     */",
 "/**
     * Sets the equivalent value used when the node contains true.
     *
     * @param mixed $value
     *
     * @return NodeDefinition
     */",
 "/**
     * Sets the equivalent value used when the node contains false.
     *
     * @param mixed $value
     *
     * @return NodeDefinition
     */",
 "/**
     * Sets null as the default value.
     *
     * @return NodeDefinition
     */",
 "/**
     * Sets true as the default value.
     *
     * @return NodeDefinition
     */",
 "/**
     * Sets false as the default value.
     *
     * @return NodeDefinition
     */",
 "/**
     * Gets the builder for normalization rules.
     *
     * @return NormalizationBuilder
     */",
 "/**
     * Sets an expression to run before the normalization.
     *
     * @return ExprBuilder
     */",
 "/**
     * Denies the node value being empty.
     *
     * @return NodeDefinition
     */",
 "/**
     * Gets the builder for validation rules.
     *
     * @return ValidationBuilder
     */",
 "/**
     * Sets an expression to run for the validation.
     *
     * The expression receives the value of the node and must return it. It can
     * modify it.
     * An exception should be thrown when the node is not valid.
     *
     * @return ExprBuilder
     */",
 "/**
     * Gets the builder for merging rules.
     *
     * @return MergeBuilder
     */",
 "/**
     * Sets whether the node can be overwritten.
     *
     * @param Boolean $deny Whether the overwriting is forbidden or not
     *
     * @return NodeDefinition
     */",
 "/**
     * Instantiate and configure the node according to this definition
     *
     * @return NodeInterface $node The node instance
     */",
 "/**
 * This class provides a fluent interface for defining a node.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Sets the debugger to use for this loader.
     *
     * @param DebuggerInterface $debugger A debugger instance
     */",
 "/**
 * Loader is the base class for all template loader classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * We don\'t inject the message logger and mailer here
     * to avoid the creation of these objects when no emails are sent.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     * @param Boolean            $isSpool
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * MessageDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Cl??ment JOBEILI <clement.jobeili@gmail.com>
 */",
 "/**
 * Command to execute the SQL needed to generate the database schema for
 * a given entity manager.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Returns the singleton instance
     *
     * @return MimeTypeGuesser
     */",
 "/**
     * Registers all natively provided mime type guessers
     */",
 "/**
     * Registers a new mime type guesser
     *
     * When guessing, this guesser is preferred over previously registered ones.
     *
     * @param MimeTypeGuesserInterface $guesser
     */",
 "/**
     * Tries to guess the mime type of the given file
     *
     * The file is passed to each registered mime type guesser in reverse order
     * of their registration (last registered is queried first). Once a guesser
     * returns a value that is not NULL, this method terminates and returns the
     * value.
     *
     * @param  string $path   The path to the file
     *
     * @return string         The mime type or NULL, if none could be guessed
     *
     * @throws FileException  If the file does not exist
     */",
 "/**
 * A singleton mime type guesser.
 *
 * By default, all mime type guessers provided by the framework are installed
 * (if available on the current OS/PHP setup). You can register custom
 * guessers by calling the register() method on the singleton instance.
 *
 * <code>
 * $guesser = MimeTypeGuesser::getInstance();
 * $guesser->register(new MyCustomMimeTypeGuesser());
 * </code>
 *
 * The last registered guesser is preferred over previously registered ones.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * A simple filesystem cache.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param \Iterator $iterator    The Iterator to filter
     * @param array     $directories An array of directories to exclude
     */",
 "/**
*Filterstheiteratorvalues.
*
*@returnBooleantrueifthevalueshouldbekept,falseotherwise
*/",
 "/**
*ExcludeDirectoryFilterIteratorfiltersoutdirectories.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Remove whitespaces between HTML tags.
 *
 * <pre>
 * {% spaceless %}
 *      <div>
 *          <strong>foo</strong>
 *      </div>
 * {% endspaceless %}
 *
 * {# output will be <div><strong>foo</strong></div> #}
 * </pre>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Sets the root node name
     * @param string $name root node name
     */",
 "/**
     * Returns the root node name
     * @return string
     */",
 "/**
     * @param DOMNode $node
     * @param string $val
     *
     * @return Boolean
     */",
 "/**
     * @param DOMNode $node
     * @param string $val
     *
     * @return Boolean
     */",
 "/**
     * @param DOMNode $node
     * @param string $val
     *
     * @return Boolean
     */",
 "/**
     * @param DOMNode $node
     * @param DOMDocumentFragment $fragment
     *
     * @return Boolean
     */",
 "/**
     * Checks the name is a valid xml element name
     *
     * @param string $name
     *
     * @return Boolean
     */",
 "/**
     * Parse the input SimpleXmlElement into an array.
     *
     * @param SimpleXmlElement $node xml to parse
     *
     * @return array
     */",
 "/**
     * Parse the data and convert it to DOMElements
     *
     * @param DOMNode $parentNode
     * @param array|object $data data
     *
     * @return Boolean
     */",
 "/**
     * Selects the type of node to create and appends it to the parent.
     *
     * @param DOMNode      $parentNode
     * @param array|object $data
     * @param string       $nodeName
     * @param string       $key
     *
     * @return Boolean
     */",
 "/**
     * Tests the value being passed and decide what sort of element to create
     *
     * @param DOMNode $node
     * @param mixed $val
     *
     * @return Boolean
     */",
 "/**
 * Encodes XML data
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @author John Wards <jwards@whiteoctober.co.uk>
 * @author Fabian Vogler <fabian@equivalence.ch>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Includes executed SQLs in a Debug Stack
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * Dumps the service container as a PHP class.
     *
     * Available options:
     *
     *  * class:      The class name
     *  * base_class: The base class name
     *
     * @param  array  $options An array of options
     *
     * @return string A PHP class representing of the service container
     *
     * @api
     */",
 "/**
     * Generates Service local temp variables.
     *
     * @param string $cId
     * @param string $definition
     *
     * @return string
     */",
 "/**
     * Generates the require_once statement for service includes.
     *
     * @param string $id The service id
     * @param Definition $definition
     *
     * @return string
     */",
 "/**
*Generatestheinlinedefinitionofaservice.
*
*@paramstring$id
*@paramDefinition$definition
*
*@returnstring
*/",
 "/**
*Addstheservicereturnstatement.
*
*@paramstring$idServiceid
*@paramDefinition$definition
*
*@returnstring
*/",
 "/**
*Generatestheserviceinstance.
*
*@paramstring$id
*@paramDefinition$definition
*
*@returnstring
*
*@throws\InvalidArgumentException
*@throws\RuntimeException
*/",
 "/**
*Checksifthedefinitionisasimpleinstance.
*
*@paramstring$id
*@paramDefinition$definition
*
*@returnBoolean
*/",
 "/**
*Addsmethodcallstoaservicedefinition.
*
*@paramstring$id
*@paramDefinition$definition
*@paramstring$variableName
*
*@returnstring
*/",
 "/**
*Generatestheinlinedefinitionsetup.
*
*@paramstring$id
*@paramDefinition$definition
*@returnstring
*/",
 "/**
*Addsconfiguratordefinition
*
*@paramstring$id
*@paramDefinition$definition
*@paramstring$variableName
*
*@returnstring
*/",
 "/**
     * Adds a service
     *
     * @param string $id
     * @param Definition $definition
     *
     * @return string
     */",
 "/**
     * Adds a service alias.
     *
     * @param string $alias
     * @param string $id
     *
     * @return string
     */",
 "/**
     * Adds multiple services
     *
     * @return string
     */",
 "/**
     * Adds the class headers.
     *
     * @param string $class Class name
     * @param string $baseClass The name of the base class
     *
     * @return string
     */",
 "/**
     * Adds the constructor.
     *
     * @return string
     */",
 "/**
     * Adds the constructor for a frozen container.
     *
     * @return string
     */",
 "/**
     * Adds default parameters method.
     *
     * @return string
     */",
 "/**
     * Exports parameters.
     *
     * @param array $parameters
     * @param string $path
     * @param integer $indent
     *
     * @return string
     */",
 "/**
     * Ends the class definition.
     *
     * @return string
     */",
 "/**
     * Wraps the service conditionals.
     *
     * @param string $value
     * @param string $code
     *
     * @return string
     */",
 "/**
     * Builds service calls from arguments
     *
     * @param array  $arguments
     * @param string &$calls    By reference
     * @param string &$behavior By reference
     *
     * @return void
     */",
 "/**
     * Returns the inline definition
     *
     * @param Definition $definition
     *
     * @return array
     */",
 "/**
     * Gets the definition from arguments
     *
     * @param array $arguments
     *
     * @return array
     */",
 "/**
     * Checks if a service id has a reference
     *
     * @param string $id
     * @param array $arguments
     *
     * @return Boolean
     */",
 "/**
*Dumpsvalues.
*
*@paramarray$value
*@paramBoolean$interpolate
*
*@returnstring
*/",
 "/**
*Dumpsaparameter
*
*@paramstring$name
*
*@returnstring
*/",
 "/**
*Getsaservicecall
*
*@paramstring$id
*@paramReference$reference
*
*@returnstring
*/",
 "/**
*Returnsthenextnametouse
*
*@returnstring
*/",
 "/**
*PhpDumperdumpsaservicecontainerasaPHPclass.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*
*@api
*/",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface $container The DI container
     * @param array              $engineIds An array of engine Ids
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Renders a view and returns a Response.
     *
     * @param string   $view       The view name
     * @param array    $parameters An array of parameters to pass to the view
     * @param Response $response   A Response instance
     *
     * @return Response A Response instance
     */",
 "/**
 * DelegatingEngine selects an engine for a given template.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Loads a Yaml file.
     *
     * @param mixed  $file The resource
     * @param string $type The resource type
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean true if this class supports the given resource, false otherwise
     */",
 "/**
     * Parses all imports
     *
     * @param array $content
     * @param string $file
     *
     * @return void
     */",
 "/**
     * Parses definitions
     *
     * @param array $content
     * @param string $file
     *
     * @return void
     */",
 "/**
     * Parses a definition.
     *
     * @param string $id
     * @param array $service
     * @param string $file
     *
     * @return void
     */",
 "/**
     * Loads a YAML file.
     *
     * @param string $file
     *
     * @return array The file content
     */",
 "/**
     * Validates a YAML file.
     *
     * @param mixed $content
     * @param string $file
     *
     * @return array
     *
     * @throws \InvalidArgumentException When service file is not valid
     */",
 "/**
     * Resolves services.
     *
     * @param string $value
     *
     * @return Reference
     */",
 "/**
     * Loads from Extensions
     *
     * @param array $content
     *
     * @return void
     */",
 "/**
 * YamlFileLoader loads YAML files service definitions.
 *
 * The YAML format does not support anonymous services (cf. the XML loader).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Type that maps an SQL DECIMAL to a PHP double.
 *
 * @since 2.0
 */",
 "/**
 * @group integration
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for quarter format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Returns the expiration date for the Expires header field.
     *
     * @return string
     */",
 "/**
     * Sets the expiration date for the Expires header field.
     *
     * @param string $expires A valid php date
     */",
 "/**
     * Sets the number of seconds for the max-age cache-control header field.
     *
     * @param integer $maxage A number of seconds
     */",
 "/**
     * Returns the number of seconds the response is considered fresh by a
     * private cache.
     *
     * @return integer
     */",
 "/**
     * Sets the number of seconds for the s-maxage cache-control header field.
     *
     * @param integer $smaxage A number of seconds
     */",
 "/**
     * Returns the number of seconds the response is considered fresh by a
     * public cache.
     *
     * @return integer
     */",
 "/**
     * Returns whether or not a response is public.
     *
     * @return Boolean
     */",
 "/**
     * Sets a response public.
     *
     * @param Boolean $public A boolean value
     */",
 "/**
     * Returns the annotation alias name.
     *
     * @return string
     * @see ConfigurationInterface
     */",
 "/**
 * The Cache class handles the @Cache annotation parts.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @Annotation
 */",
 "/**
   * Creates a new GenericFixedWidthReader using $width bytes per character.
   * @param int $width
   */",
 "/**
   * Returns the complete charactermap
   *
   * @param string $string
   * @param int $startOffset
   * @param array $currentMap
   * @param mixed $ignoredChars
   * @return $int
   */",
 "/**
   * Returns mapType
   * @int mapType
   */",
 "/**
   * Returns an integer which specifies how many more bytes to read.
   * A positive integer indicates the number of more bytes to fetch before invoking
   * this method again.
   * A value of zero means this is already a valid character.
   * A value of -1 means this cannot possibly be a valid character.
   * @param string $bytes
   * @return int
   */",
 "/**
   * Returns the number of bytes which should be read to start each character.
   * @return int
   */",
 "/**
 * Provides fixed-width byte sizes for reading fixed-width character sets.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 * @author Xavier De Cock <xdecock@gmail.com>
 */",
 "/**
     * Loads formulae from a resource.
     *
     * Formulae should be loaded the same regardless of the current debug
     * mode. Debug considerations should happen downstream.
     *
     * @param ResourceInterface $resource A resource
     *
     * @return array An array of formulae
     */",
 "/**
 * Loads formulae.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Applies all converters to the passed configurations and stops when a 
     * converter is applied it will move on to the next configuration and so on.
     *
     * @param Request $request
     * @param array|object $configurations
     */",
 "/**
    * Adds a parameter converter.
    *
    * @param ParamConverterInterface $converter A ParamConverterInterface instance
    * @param integer                 $priority  The priority (between -10 and 10)
    */",
 "/**
    * Returns all registered param converters.
    *
    * @return array An array of param converters
    */",
 "/**
 * Managers converters. 
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Henrik Bjornskov <henrik@bjrnskov.dk>
 */",
 "/**
   * Create a new SendmailTransport with $buf for I/O.
   * @param Swift_Transport_IoBuffer $buf
   * @param Swift_Events_EventDispatcher $dispatcher
   */",
 "/**
   * Start the standalone SMTP session if running in -bs mode.
   */",
 "/**
   * Set the command to invoke.
   * If using -t mode you are strongly advised to include -oi or -i in the
   * flags. For example: /usr/sbin/sendmail -oi -t
   * Swift will append a -f<sender> flag if one is not present.
   * The recommended mode is \"-bs\" since it is interactive and failure notifications
   * are hence possible.
   * @param string $command
   * @return Swift_Transport_SendmailTransport
   */",
 "/**
   * Get the sendmail command which will be invoked.
   * @return string
   */",
 "/**
   * Send the given Message.
   * Recipient/sender data will be retrieved from the Message API.
   * The return value is the number of recipients who were accepted for delivery.
   * NOTE: If using \'sendmail -t\' you will not be aware of any failures until
   * they bounce (i.e. send() will always return 100% success).
   * @param Swift_Mime_Message $message
   * @param string[] &$failedRecipients to collect failures by-reference
   * @return int
   */",
 "/** Get the params to initialize the buffer */",
 "/**
 * SendmailTransport for sending mail through a sendmail/postfix (etc..) binary.
 * 
 * Supported modes are -bs and -t, with any additional flags desired.
 * It is advised to use -bs mode since error reporting with -t mode is not
 * possible.
 * 
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Loops over each item of a sequence.
 *
 * <pre>
 * <ul>
 *  {% for user in users %}
 *    <li>{{ user.username|e }}</li>
 *  {% endfor %}
 * </ul>
 * </pre>
 */",
 "/**
     * Validates the form and its domain object.
     *
     * @param FormInterface $form A FormInterface instance
     */",
 "/**
     * Validates the data of a form
     *
     * This method is called automatically during the validation process.
     *
     * @param FormInterface    $form    The validated form
     * @param ExecutionContext $context The current validation context
     */",
 "/**
 * App Test Kernel for functional tests.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     * 
     * @param string $type Instance type of composite expression
     * @param array $parts Composition of expressions to be joined on composite expression
     */",
 "/**
     * Adds multiple parts to composite expression.
     * 
     * @param array $args
     * 
     * @return CompositeExpression
     */",
 "/**
     * Adds an expression to composite expression.
     * 
     * @param mixed $part
     * @return CompositeExpression 
     */",
 "/**
     * Retrieves the amount of expressions on composite expression.
     * 
     * @return integer 
     */",
 "/**
     * Retrieve the string representation of this composite expression.
     * 
     * @return string
     */",
 "/**
     * Return type of this composite expression (AND/OR)
     * 
     * @return string
     */",
 "/**
 * Composite expression is responsible to build a group of similar expression.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.1
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @dataProvider getTimestampsAndExpected
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"UPPER\" \"(\" StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @param RegistryInterface $registry
     */",
 "/**
     * @param object $entity
     * @param Constraint $constraint
     *
     * @return bool
     */",
 "/**
 * Unique Entity Validator checks if one or a set of fields contain unique values.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Encodes whatever record data is passed to it as json
 *
 * This can be useful to log to databases or remote APIs
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Attempts to create a connection with the database.
     *
     * @param array $params All connection parameters passed by the user.
     * @param string $username The username to use when connecting.
     * @param string $password The password to use when connecting.
     * @param array $driverOptions The driver options to use when connecting.
     * @return Doctrine\DBAL\Driver\Connection The database connection.
     */",
 "/**
     * Gets the DatabasePlatform instance that provides all the metadata about
     * the platform this driver connects to.
     *
     * @return Doctrine\DBAL\Platforms\AbstractPlatform The database platform.
     */",
 "/**
     * Gets the SchemaManager that can be used to inspect and change the underlying
     * database schema of the platform this driver connects to.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return Doctrine\DBAL\SchemaManager
     */",
 "/**
     * Gets the name of the driver.
     *
     * @return string The name of the driver.
     */",
 "/**
     * Get the name of the database connected to for this driver.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return string $database
     */",
 "/**
 * Driver interface.
 * Interface that all DBAL drivers must implement.
 *
 * @since 2.0
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Transforms an array of choices to a format appropriate for the nested
     * checkboxes/radio buttons.
     *
     * The result is an array with the options as keys and true/false as values,
     * depending on whether a given option is selected. If this field is rendered
     * as select tag, the value is not modified.
     *
     * @param  mixed $array  An array
     *
     * @return mixed         An array
     *
     * @throws UnexpectedTypeException if the given value is not an array
     * @throws TransformationFailedException if the choices can not be retrieved
     */",
 "/**
     * Transforms a checkbox/radio button array to an array of choices.
     *
     * The input value is an array with the choices as keys and true/false as
     * values, depending on whether a given choice is selected. The output
     * is an array with the selected choices.
     *
     * @param  mixed $value  An array
     *
     * @return mixed $value  An array
     *
     * @throws UnexpectedTypeException if the given value is not an array
     */",
 "/**
     * Constructor.
     *
     * @param RouterHelper $routerHelper The router helper
     * @param AssetFactory $factory      The asset factory
     */",
 "/**
 * The dynamic \"assetic\" templating helper.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @dataProvider getDebugModes
     */",
 "/**
     * @dataProvider getDebugModes
     */",
 "/**
     * @expectedException \InvalidArgumentException
     */",
 "/**
     * Creates a Container with a Session-containing Request service.
     *
     * @return Container
     */",
 "/**
 * This exception is thrown when you try to create a service of an inactive scope.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array           $argv An array of parameters from the CLI (in the argv format)
     * @param InputDefinition $definition A InputDefinition instance
     *
     * @api
     */",
 "/**
     * Processes command line arguments.
     */",
 "/**
     * Parses a short option.
     *
     * @param string $token The current token.
     */",
 "/**
     * Parses a short option set.
     *
     * @param string $name The current token
     *
     * @throws \RuntimeException When option given doesn\'t exist
     */",
 "/**
     * Parses a long option.
     *
     * @param string $token The current token
     */",
 "/**
     * Parses an argument.
     *
     * @param string $token The current token
     *
     * @throws \RuntimeException When too many arguments are given
     */",
 "/**
     * Adds a short option value.
     *
     * @param string $shortcut The short option key
     * @param mixed  $value    The value for the option
     *
     * @throws \RuntimeException When option given doesn\'t exist
     */",
 "/**
     * Adds a long option value.
     *
     * @param string $name  The long option key
     * @param mixed  $value The value for the option
     *
     * @throws \RuntimeException When option given doesn\'t exist
     */",
 "/**
     * Returns the first argument from the raw parameters (not parsed).
     *
     * @return string The value of the first argument or null otherwise
     */",
 "/**
     * Returns true if the raw parameters (not parsed) contain a value.
     *
     * This method is to be used to introspect the input parameters
     * before they have been validated. It must be used carefully.
     *
     * @param string|array $values The value(s) to look for in the raw parameters (can be an array)
     *
     * @return Boolean true if the value is contained in the raw parameters
     */",
 "/**
     * Returns the value of a raw option (not parsed).
     *
     * This method is to be used to introspect the input parameters
     * before they have been validated. It must be used carefully.
     *
     * @param string|array $values The value(s) to look for in the raw parameters (can be an array)
     * @param mixed $default The default value to return if no result is found
     *
     * @return mixed The option value
     */",
 "/**
 * ArgvInput represents an input coming from the CLI arguments.
 *
 * Usage:
 *
 *     $input = new ArgvInput();
 *
 * By default, the `$_SERVER[\'argv\']` array is used for the input values.
 *
 * This can be overridden by explicitly passing the input values in the constructor:
 *
 *     $input = new ArgvInput($_SERVER[\'argv\']);
 *
 * If you pass it yourself, don\'t forget that the first element of the array
 * is the name of the running application.
 *
 * When passing an argument to the constructor, be sure that it respects
 * the same rules as the argv one. It\'s almost always better to use the
 * `StringInput` when you want to provide your own input.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @see    http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
 * @see    http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02
 *
 * @api
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Sets the classes to compile in the cache for the container.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Converts an Exception to a Response.
     *
     * @param FlattenException     $exception A FlattenException instance
     * @param DebugLoggerInterface $logger    A DebugLoggerInterface instance
     * @param string               $format    The format to use for rendering (html, xml, ...)
     *
     * @throws \InvalidArgumentException When the exception template does not exist
     */",
 "/**
 * ExceptionController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Validate the given object.
     *
     * @param object $object The object to validate
     * @param array|null $groups The validator groups to use for validating
     *
     * @return ConstraintViolationList
     *
     * @api
     */",
 "/**
     * Validate a single property of an object against its current value.
     *
     * @param object $object The object to validate
     * @param string $property The name of the property to validate
     * @param array|null $groups The validator groups to use for validating
     *
     * @return ConstraintViolationList
     *
     * @api
     */",
 "/**
     * Validate a single property of an object against the given value.
     *
     * @param string     $class    The class on which the property belongs
     * @param string     $property The name of the property to validate
     * @param string     $value
     * @param array|null $groups   The validator groups to use for validating
     *
     * @return ConstraintViolationList
     *
     * @api
     */",
 "/**
     * Validates a given value against a specific Constraint.
     *
     * @param mixed $value The value to validate
     * @param Constraint $constraint The constraint to validate against
     * @param array|null $groups The validator groups to use for validating
     *
     * @return ConstraintViolationList
     *
     * @api
     */",
 "/**
     * Returns the factory for ClassMetadata instances
     *
     * @return Mapping\ClassMetadataFactoryInterface
     *
     * @api
     */",
 "/**
 * Validates a given value.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Warms up the cache.
     *
     * @param string $cacheDir The cache directory
     */",
 "/**
     * Checks whether this warmer is optional or not.
     *
     * Optional warmers can be ignored on certain conditions.
     *
     * A warmer should return true if the cache can be
     * generated incrementally and on-demand.
     *
     * @return Boolean true if the warmer is optional, false otherwise
     */",
 "/**
 * Interface for classes able to warm up the cache.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Represents a template function as a node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param integer $type   The type of the token
     * @param string  $value  The token value
     * @param integer $lineno The line position in the source
     */",
 "/**
     * Returns a string representation of the token.
     *
     * @return string A string representation of the token
     */",
 "/**
     * Tests the current token for a type and/or a value.
     *
     * Parameters may be:
     * * just type
     * * type and value (or array of possible values)
     * * just value (or array of possible values) (NAME_TYPE is used as type)
     *
     * @param array|integer     $type   The type to test
     * @param array|string|null $values The token value
     *
     * @return Boolean
     */",
 "/**
     * Gets the line.
     *
     * @return integer The source line
     */",
 "/**
     * Gets the token type.
     *
     * @return integer The token type
     */",
 "/**
     * Gets the token value.
     *
     * @return string The token value
     */",
 "/**
     * Returns the constant representation (internal) of a given type.
     *
     * @param integer $type  The type as an integer
     * @param Boolean $short Whether to return a short representation or not
     * @param integer $line  The code line
     *
     * @return string The string representation
     */",
 "/**
     * Returns the english representation of a given type.
     *
     * @param integer $type The type as an integer
     * @param integer $line The code line
     *
     * @return string The string representation
     */",
 "/**
 * Represents a Token.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * JMSSecurityExtraExtension.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Serializes a log message according to Wildfire\'s header requirements
 *
 * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>
 * @author Christophe Coevoet <stof@notk.org>
 * @author Kirill chEbba Chebunin <iam@chebba.org>
 */",
 "/**
     * Tests that collectors that specify a template but no \"id\" will throw
     * an exception (both are needed if the template is specified). Thus,
     * a fully-valid tag looks something like this:
     *
     *     <tag name=\"data_collector\" template=\"YourBundle:Collector:templatename\" id=\"your_collector_name\" />
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the called listeners.
     *
     * @return array An array of called listeners
     *
     * @see TraceableEventDispatcherInterface
     */",
 "/**
     * Gets the not called listeners.
     *
     * @return array An array of not called listeners
     *
     * @see TraceableEventDispatcherInterface
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * EventDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param MessageSelector $selector The message selector for pluralization
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
 * IdentityTranslator does not translate anything.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Send mail via the mail() function.
   * 
   * This method takes the same arguments as PHP mail().
   * 
   * @param string $to
   * @param string $subject
   * @param string $body
   * @param string $headers
   * @param string $extraParams
   * 
   * @return boolean
   */",
 "/**
 * This interface intercepts calls to the mail() function.
 * 
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Returns the content of the template.
     *
     * @return string The template content
     *
     * @api
     */",
 "/**
 * FileStorage represents a template stored on the filesystem.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param VoterInterface[] $voters                             An array of VoterInterface instances
     * @param string           $strategy                           The vote strategy
     * @param Boolean          $allowIfAllAbstainDecisions         Whether to grant access if all voters abstained or not
     * @param Boolean          $allowIfEqualGrantedDeniedDecisions Whether to grant access if result are equals
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Grants access if any voter returns an affirmative response.
     *
     * If all voters abstained from voting, the decision will be based on the
     * allowIfAllAbstainDecisions property value (defaults to false).
     */",
 "/**
     * Grants access if there is consensus of granted against denied responses.
     *
     * Consensus means majority-rule (ignoring abstains) rather than unanimous
     * agreement (ignoring abstains). If you require unanimity, see
     * UnanimousBased.
     *
     * If there were an equal number of grant and deny votes, the decision will
     * be based on the allowIfEqualGrantedDeniedDecisions property value
     * (defaults to true).
     *
     * If all voters abstained from voting, the decision will be based on the
     * allowIfAllAbstainDecisions property value (defaults to false).
     */",
 "/**
     * Grants access if only grant (or abstain) votes were received.
     *
     * If all voters abstained from voting, the decision will be based on the
     * allowIfAllAbstainDecisions property value (defaults to false).
     */",
 "/**
 * AccessDecisionManager is the base class for all access decision managers
 * that use decision voters.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param LoaderInterface   $loader   The templating loader
     * @param string            $bundle   The current bundle name
     * @param string            $path     The directory
     * @param RecursiveIterator $iterator The inner iterator
     */",
 "/**
     * Constructor.
     *
     * @param FileLocatorInterface $locator A FileLocatorInterface instance
     */",
 "/**
     * Loads a template.
     *
     * @param TemplateReferenceInterface $template A template
     *
     * @return Storage|Boolean false if the template cannot be loaded, a Storage instance otherwise
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param TemplateReferenceInterface $template The template name as an array
     * @param integer                    $time     The last modification time of the cached template (timestamp)
     */",
 "/**
 * FilesystemLoader is a loader that read templates from the filesystem.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Parses expressions.
 *
 * This parser implements a \"Precedence climbing\" algorithm.
 *
 * @see http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm
 * @see http://en.wikipedia.org/wiki/Operator-precedence_parser
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $class    The name of the class this member is defined on
     * @param string $name     The name of the member
     * @param string $property The property the member belongs to
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Returns the names of the properties that should be serialized
     *
     * @return array
     */",
 "/**
     * Returns the name of the member
     *
     * @return string
     */",
 "/**
     * Returns the class this member is defined on
     *
     * @return string
     */",
 "/**
     * Returns the name of the property this member belongs to
     *
     * @return string The property name
     */",
 "/**
     * Returns whether this member is public
     *
     * @return Boolean
     */",
 "/**
     * Returns whether this member is protected
     *
     * @return Boolean
     */",
 "/**
     * Returns whether this member is private
     *
     * @return Boolean
     */",
 "/**
     * Returns whether objects stored in this member should be validated
     *
     * @return Boolean
     */",
 "/**
     * Returns whether arrays or traversable objects stored in this member
     * should be traversed and validated in each entry
     *
     * @return Boolean
     */",
 "/**
     * Returns the value of this property in the given object
     *
     * @param object $object The object
     *
     * @return mixed The property value
     */",
 "/**
     * Returns the Reflection instance of the member
     *
     * @return object
     */",
 "/**
     * Creates a new Reflection instance for the member
     *
     * @return object
     */",
 "/**
     * Removes an ACL from the cache
     *
     * @param string $primaryKey a serialized primary key
     * @return void
     */",
 "/**
     * Removes an ACL from the cache
     *
     * The ACL which is returned, must reference the passed object identity.
     *
     * @param ObjectIdentityInterface $oid
     * @return void
     */",
 "/**
     * Retrieves an ACL for the given object identity primary key from the cache
     *
     * @param integer $primaryKey
     * @return AclInterface
     */",
 "/**
     * Retrieves an ACL for the given object identity from the cache
     *
     * @param ObjectIdentityInterface $oid
     * @return AclInterface
     */",
 "/**
     * Stores a new ACL in the cache
     *
     * @param AclInterface $acl
     * @return void
     */",
 "/**
     * Removes all ACLs from the cache
     *
     * @return void
     */",
 "/**
 * AclCache Interface
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Adds an entity result to this ResultSetMapping.
     *
     * @param string $class The class name of the entity.
     * @param string $alias The alias for the class. The alias must be unique among all entity
     *                      results or joined entity results within this ResultSetMapping.
     * @todo Rename: addRootEntity
     */",
 "/**
     * Sets a discriminator column for an entity result or joined entity result.
     * The discriminator column will be used to determine the concrete class name to
     * instantiate.
     *
     * @param string $alias The alias of the entity result or joined entity result the discriminator
     *                      column should be used for.
     * @param string $discrColumn The name of the discriminator column in the SQL result set.
     * @todo Rename: addDiscriminatorColumn
     */",
 "/**
     * Sets a field to use for indexing an entity result or joined entity result.
     *
     * @param string $alias The alias of an entity result or joined entity result.
     * @param string $fieldName The name of the field to use for indexing.
     */",
 "/**
     * Checks whether an entity result or joined entity result with a given alias has
     * a field set for indexing.
     *
     * @param string $alias
     * @return boolean
     * @todo Rename: isIndexed($alias)
     */",
 "/**
     * Checks whether the column with the given name is mapped as a field result
     * as part of an entity result or joined entity result.
     *
     * @param string $columnName The name of the column in the SQL result set.
     * @return boolean
     * @todo Rename: isField
     */",
 "/**
     * Adds a field to the result that belongs to an entity or joined entity.
     *
     * @param string $alias The alias of the root entity or joined entity to which the field belongs.
     * @param string $columnName The name of the column in the SQL result set.
     * @param string $fieldName The name of the field on the declaring class.
     * @param string $declaringClass The name of the class that declares/owns the specified field.
     *                               When $alias refers to a superclass in a mapped hierarchy but
     *                               the field $fieldName is defined on a subclass, specify that here.
     *                               If not specified, the field is assumed to belong to the class
     *                               designated by $alias.
     * @todo Rename: addField
     */",
 "/**
     * Adds a joined entity result.
     *
     * @param string $class The class name of the joined entity.
     * @param string $alias The unique alias to use for the joined entity.
     * @param string $parentAlias The alias of the entity result that is the parent of this joined result.
     * @param object $relation The association field that connects the parent entity result with the joined entity result.
     * @todo Rename: addJoinedEntity
     */",
 "/**
     * Adds a scalar result mapping.
     *
     * @param string $columnName The name of the column in the SQL result set.
     * @param string $alias The result alias with which the scalar result should be placed in the result structure.
     * @todo Rename: addScalar
     */",
 "/**
     * Checks whether a column with a given name is mapped as a scalar result.
     * 
     * @param string $columName The name of the column in the SQL result set.
     * @return boolean
     * @todo Rename: isScalar
     */",
 "/**
     * Gets the name of the class of an entity result or joined entity result,
     * identified by the given unique alias.
     *
     * @param string $alias
     * @return string
     */",
 "/**
     * Gets the field alias for a column that is mapped as a scalar value.
     *
     * @param string $columnName The name of the column in the SQL result set.
     * @return string
     */",
 "/**
     * Gets the name of the class that owns a field mapping for the specified column.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     *
     * @param string $alias
     * @return AssociationMapping
     */",
 "/**
     *
     * @param string $alias
     * @return boolean
     */",
 "/**
     * Gets the alias of the class that owns a field mapping for the specified column.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     * Gets the parent alias of the given alias.
     *
     * @param string $alias
     * @return string
     */",
 "/**
     * Checks whether the given alias has a parent alias.
     *
     * @param string $alias
     * @return boolean
     */",
 "/**
     * Gets the field name for a column name.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     *
     * @return array
     */",
 "/**
     * Gets the number of different entities that appear in the mapped result.
     *
     * @return integer
     */",
 "/**
     * Checks whether this ResultSetMapping defines a mixed result.
     * Mixed results can only occur in object and array (graph) hydration. In such a
     * case a mixed result means that scalar values are mixed with objects/array in
     * the result.
     *
     * @return boolean
     */",
 "/**
     * Adds a meta column (foreign key or discriminator column) to the result set.
     * 
     * @param string $alias
     * @param string $columnName
     * @param string $fieldName
     * @param bool
     */",
 "/**
 * A ResultSetMapping describes how a result set of an SQL query maps to a Doctrine result.
 *
 * IMPORTANT NOTE:
 * The properties of this class are only public for fast internal READ access and to (drastically)
 * reduce the size of serialized instances for more effective caching due to better (un-)serialization
 * performance.
 * 
 * <b>Users should use the public methods.</b>
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 * @todo Think about whether the number of lookup maps can be reduced.
 */",
 "/**
     * Returns a full path for a given file name.
     *
     * @param mixed   $name        The file name to locate
     * @param string  $currentPath The current path
     * @param Boolean $first       Whether to return the first occurrence or an array of filenames
     *
     * @return string|array The full path to the file|An array of file paths
     *
     * @throws \InvalidArgumentException When file is not found
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Adds expiration to a cache backend.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array  $tokens   An array of tokens
     * @param string $filename The name of the filename which tokens are associated with
     */",
 "/**
     * Returns a string representation of the token stream.
     *
     * @return string
     */",
 "/**
     * Sets the pointer to the next token and returns the old one.
     *
     * @return Twig_Token
     */",
 "/**
     * Tests a token and returns it or throws a syntax error.
     *
     * @return Twig_Token
     */",
 "/**
     * Looks at the next token.
     *
     * @param integer $number
     *
     * @return Twig_Token
     */",
 "/**
     * Tests the current token
     *
     * @return bool
     */",
 "/**
     * Checks if end of stream was reached
     *
     * @return bool
     */",
 "/**
     * Gets the current token
     *
     * @return Twig_Token
     */",
 "/**
     * Gets the filename associated with this stream
     *
     * @return string
     */",
 "/**
 * Represents a token stream.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Initializes a new AnnotationDriver that uses the given AnnotationReader for reading
     * docblock annotations.
     *
     * @param AnnotationReader $reader The AnnotationReader to use, duck-typed.
     * @param string|array $paths One or multiple paths where mapping classes can be found.
     */",
 "/**
     * Append lookup paths to metadata driver.
     *
     * @param array $paths
     */",
 "/**
     * Retrieve the defined metadata lookup paths.
     *
     * @return array
     */",
 "/**
     * Get the file extension used to look for mapping files under
     *
     * @return void
     */",
 "/**
     * Set the file extension used to look for mapping files under
     *
     * @param string $fileExtension The file extension to set
     * @return void
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Whether the class with the specified name is transient. Only non-transient
     * classes, that is entities and mapped superclasses, should have their metadata loaded.
     * A class is non-transient if it is annotated with either @Entity or
     * @MappedSuperclass in the class doc block.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
*{@inheritDoc}
*/",
 "/**
*FactorymethodfortheAnnotationDriver
*
*@paramarray|string$paths
*@paramAnnotationReader$reader
*@returnAnnotationDriver
*/",
 "/**
*TheAnnotationDriverreadsthemappingmetadatafromdocblockannotations.
*
*@since2.0
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanH.Wage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
 * Expression class for DQL from
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Returns a CharacterReader suitable for the charset applied.
   * @param string $charset
   * @return Swift_CharacterReader
   */",
 "/**
 * A factory for creating CharacterReaders.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 */",
 "/**
     * Proxy all methods to the delegate.
     * 
     * @param type $method
     * @param type $args
     * @return type 
     */",
 "/**
 * Allows the reader to be used in-place of Doctrine\'s reader.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @return ContainerInterface
     */",
 "/**
     * @see ContainerAwareInterface::setContainer()
     */",
 "/**
 * Command.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Handles an access denied failure.
     *
     * @param Request                      $request
     * @param AccessDeniedException        $accessDeniedException
     *
     * @return Response may return null
     */",
 "/**
 * This is used by the ExceptionListener to translate an AccessDeniedException
 * to a Response object.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param ParameterBagInterface $parameterBag A ParameterBagInterface instance
     *
     * @api
     */",
 "/**
     * Compiles the container.
     *
     * This method does two things:
     *
     *  * Parameter values are resolved;
     *  * The parameter bag is frozen.
     *
     * @api
     */",
 "/**
     * Returns true if the container parameter bag are frozen.
     *
     * @return Boolean true if the container parameter bag are frozen, false otherwise
     *
     * @api
     */",
 "/**
     * Gets the service container parameter bag.
     *
     * @return ParameterBagInterface A ParameterBagInterface instance
     *
     * @api
     */",
 "/**
     * Gets a parameter.
     *
     * @param  string $name The parameter name
     *
     * @return mixed  The parameter value
     *
     * @throws  \InvalidArgumentException if the parameter is not defined
     *
     * @api
     */",
 "/**
     * Checks if a parameter exists.
     *
     * @param  string $name The parameter name
     *
     * @return Boolean The presence of parameter in container
     *
     * @api
     */",
 "/**
     * Sets a parameter.
     *
     * @param string $name  The parameter name
     * @param mixed  $value The parameter value
     *
     * @api
     */",
 "/**
     * Sets a service.
     *
     * @param string $id      The service identifier
     * @param object $service The service instance
     * @param string $scope   The scope of the service
     *
     * @api
     */",
 "/**
     * Returns true if the given service is defined.
     *
     * @param  string  $id      The service identifier
     *
     * @return Boolean true if the service is defined, false otherwise
     *
     * @api
     */",
 "/**
     * Gets a service.
     *
     * If a service is both defined through a set() method and
     * with a set*Service() method, the former has always precedence.
     *
     * @param  string  $id              The service identifier
     * @param  integer $invalidBehavior The behavior when the service does not exist
     *
     * @return object The associated service
     *
     * @throws \InvalidArgumentException if the service is not defined
     *
     * @see Reference
     *
     * @api
     */",
 "/**
     * Gets all service ids.
     *
     * @return array An array of all defined service ids
     */",
 "/**
     * This is called when you enter a scope
     *
     * @param string $name
     *
     * @return void
     *
     * @api
     */",
 "/**
     * This is called to leave the current scope, and move back to the parent
     * scope.
     *
     * @param string $name The name of the scope to leave
     *
     * @return void
     *
     * @throws \InvalidArgumentException if the scope is not active
     *
     * @api
     */",
 "/**
     * Adds a scope to the container.
     *
     * @param ScopeInterface $scope
     *
     * @return void
     *
     * @api
     */",
 "/**
     * Returns whether this container has a certain scope
     *
     * @param string $name The name of the scope
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Returns whether this scope is currently active
     *
     * This does not actually check if the passed scope actually exists.
     *
     * @param string $name
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Camelizes a string.
     *
     * @param string $id A string to camelize
     *
     * @return string The camelized string
     */",
 "/**
     * A string to underscore.
     *
     * @param string $id The string to underscore
     *
     * @return string The underscored string
     */",
 "/**
 * Container is a dependency injection container.
 *
 * It gives access to object instances (services).
 *
 * Services and parameters are simple key/pair stores.
 *
 * Parameter and service keys are case insensitive.
 *
 * A service id can contain lowercased letters, digits, underscores, and dots.
 * Underscores are used to separate words, and dots to group services
 * under namespaces:
 *
 * <ul>
 *   <li>request</li>
 *   <li>mysql_session_storage</li>
 *   <li>symfony.mysql_session_storage</li>
 * </ul>
 *
 * A service can also be defined by creating a method named
 * getXXXService(), where XXX is the camelized version of the id:
 *
 * <ul>
 *   <li>request -> getRequestService()</li>
 *   <li>mysql_session_storage -> getMysqlSessionStorageService()</li>
 *   <li>symfony.mysql_session_storage -> getSymfony_MysqlSessionStorageService()</li>
 * </ul>
 *
 * The container can have three possible behaviors when a service does not exist:
 *
 *  * EXCEPTION_ON_INVALID_REFERENCE: Throws an exception (the default)
 *  * NULL_ON_INVALID_REFERENCE:      Returns null
 *  * IGNORE_ON_INVALID_REFERENCE:    Ignores the wrapping command asking for the reference
 *                                    (for instance, ignore a setter if the service does not exist)
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
     * Constructor
     *
     * @param integer                   $id
     * @param AclInterface              $acl
     * @param SecurityIdentityInterface $sid
     * @param string                    $strategy
     * @param integer                   $mask
     * @param Boolean                   $granting
     * @param Boolean                   $auditFailure
     * @param Boolean                   $auditSuccess
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Turns on/off auditing on permissions denials.
     *
     * Do never call this method directly. Use the respective methods on the
     * AclInterface instead.
     *
     * @param Boolean $boolean
     * @return void
     */",
 "/**
     * Turns on/off auditing on permission grants.
     *
     * Do never call this method directly. Use the respective methods on the
     * AclInterface instead.
     *
     * @param Boolean $boolean
     * @return void
     */",
 "/**
     * Sets the permission mask
     *
     * Do never call this method directly. Use the respective methods on the
     * AclInterface instead.
     *
     * @param integer $mask
     * @return void
     */",
 "/**
     * Sets the mask comparison strategy
     *
     * Do never call this method directly. Use the respective methods on the
     * AclInterface instead.
     *
     * @param string $strategy
     * @return void
     */",
 "/**
     * Implementation of \Serializable
     *
     * @return string
     */",
 "/**
     * Implementation of \Serializable
     *
     * @param string $serialized
     * @return void
     */",
 "/**
 * Auditable ACE implementation
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * ChoiceValidator validates that the value is one of the expected values.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Initializes a new ArrayCollection.
     *
     * @param array $elements
     */",
 "/**
     * Gets the PHP array representation of this collection.
     *
     * @return array The PHP array representation of this collection.
     */",
 "/**
     * Sets the internal iterator to the first element in the collection and
     * returns this element.
     *
     * @return mixed
     */",
 "/**
     * Sets the internal iterator to the last element in the collection and
     * returns this element.
     *
     * @return mixed
     */",
 "/**
     * Gets the current key/index at the current internal iterator position.
     *
     * @return mixed
     */",
 "/**
     * Moves the internal iterator position to the next element.
     *
     * @return mixed
     */",
 "/**
     * Gets the element of the collection at the current internal iterator position.
     *
     * @return mixed
     */",
 "/**
     * Removes an element with a specific key/index from the collection.
     *
     * @param mixed $key
     * @return mixed The removed element or NULL, if no element exists for the given key.
     */",
 "/**
     * Removes the specified element from the collection, if it is found.
     *
     * @param mixed $element The element to remove.
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */",
 "/**
     * ArrayAccess implementation of offsetExists()
     *
     * @see containsKey()
     */",
 "/**
     * ArrayAccess implementation of offsetGet()
     *
     * @see get()
     */",
 "/**
     * ArrayAccess implementation of offsetGet()
     *
     * @see add()
     * @see set()
     */",
 "/**
     * ArrayAccess implementation of offsetUnset()
     *
     * @see remove()
     */",
 "/**
     * Checks whether the collection contains a specific key/index.
     *
     * @param mixed $key The key to check for.
     * @return boolean TRUE if the given key/index exists, FALSE otherwise.
     */",
 "/**
     * Checks whether the given element is contained in the collection.
     * Only element values are compared, not keys. The comparison of two elements
     * is strict, that means not only the value but also the type must match.
     * For objects this means reference equality.
     *
     * @param mixed $element
     * @return boolean TRUE if the given element is contained in the collection,
     *          FALSE otherwise.
     */",
 "/**
     * Tests for the existance of an element that satisfies the given predicate.
     *
     * @param Closure $p The predicate.
     * @return boolean TRUE if the predicate is TRUE for at least one element, FALSE otherwise.
     */",
 "/**
     * Searches for a given element and, if found, returns the corresponding key/index
     * of that element. The comparison of two elements is strict, that means not
     * only the value but also the type must match.
     * For objects this means reference equality.
     *
     * @param mixed $element The element to search for.
     * @return mixed The key/index of the element or FALSE if the element was not found.
     */",
 "/**
     * Gets the element with the given key/index.
     *
     * @param mixed $key The key.
     * @return mixed The element or NULL, if no element exists for the given key.
     */",
 "/**
     * Gets all keys/indexes of the collection elements.
     *
     * @return array
     */",
 "/**
     * Gets all elements.
     *
     * @return array
     */",
 "/**
     * Returns the number of elements in the collection.
     *
     * Implementation of the Countable interface.
     *
     * @return integer The number of elements in the collection.
     */",
 "/**
     * Adds/sets an element in the collection at the index / with the specified key.
     *
     * When the collection is a Map this is like put(key,value)/add(key,value).
     * When the collection is a List this is like add(position,value).
     *
     * @param mixed $key
     * @param mixed $value
     */",
 "/**
     * Adds an element to the collection.
     *
     * @param mixed $value
     * @return boolean Always TRUE.
     */",
 "/**
     * Checks whether the collection is empty.
     * 
     * Note: This is preferrable over count() == 0.
     *
     * @return boolean TRUE if the collection is empty, FALSE otherwise.
     */",
 "/**
     * Gets an iterator for iterating over the elements in the collection.
     *
     * @return ArrayIterator
     */",
 "/**
     * Applies the given function to each element in the collection and returns
     * a new collection with the elements returned by the function.
     *
     * @param Closure $func
     * @return Collection
     */",
 "/**
     * Returns all the elements of this collection that satisfy the predicate p.
     * The order of the elements is preserved.
     *
     * @param Closure $p The predicate used for filtering.
     * @return Collection A collection with the results of the filter operation.
     */",
 "/**
     * Applies the given predicate p to all elements of this collection,
     * returning true, if the predicate yields true for all elements.
     *
     * @param Closure $p The predicate.
     * @return boolean TRUE, if the predicate yields TRUE for all elements, FALSE otherwise.
     */",
 "/**
     * Partitions this collection in two collections according to a predicate.
     * Keys are preserved in the resulting collections.
     *
     * @param Closure $p The predicate on which to partition.
     * @return array An array with two elements. The first element contains the collection
     *               of elements where the predicate returned TRUE, the second element
     *               contains the collection of elements where the predicate returned FALSE.
     */",
 "/**
     * Returns a string representation of this object.
     *
     * @return string
     */",
 "/**
     * Clears the collection.
     */",
 "/**
     * Extract a slice of $length elements starting at position $offset from the Collection.
     *
     * If $length is null it returns all elements from $offset to the end of the Collection.
     * Keys have to be preserved by this method. Calling this method will only return the
     * selected slice and NOT change the elements contained in the collection slice is called on.
     *
     * @param int $offset
     * @param int $length
     * @return array
     */",
 "/**
 * An ArrayCollection is a Collection implementation that wraps a regular PHP array.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Compiles a test.
     *
     * @return string The PHP code for the test
     */",
 "/**
 * Represents a template test.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Exception thrown when a security error occurs at runtime.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
 * Scope Interface.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
 * Checks that a variable is null.
 *
 * <pre>
 *  {{ var is none }}
 * </pre>
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * This method is called whenever access is granted, or denied, and
     * administrative mode is turned off.
     *
     * @param Boolean $granted
     * @param EntryInterface $ace
     * @return void
     */",
 "/**
 * Interface for audit loggers
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Removes private aliases from the ContainerBuilder
     *
     * @param ContainerBuilder $container
     */",
 "/**
 * Remove private aliases from the container. They were only used to establish
 * dependencies between services, and these dependencies have been resolved in
 * one of the previous passes.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Create a new DecoratorPlugin with $replacements.
   * 
   * The $replacements can either be an associative array, or an implementation
   * of {@link Swift_Plugins_Decorator_Replacements}.
   * 
   * When using an array, it should be of the form:
   * <code>
   * $replacements = array(
   *  \"address1@domain.tld\" => array(\"{a}\" => \"b\", \"{c}\" => \"d\"),
   *  \"address2@domain.tld\" => array(\"{a}\" => \"x\", \"{c}\" => \"y\")
   * )
   * </code>
   * 
   * When using an instance of {@link Swift_Plugins_Decorator_Replacements},
   * the object should return just the array of replacements for the address
   * given to {@link Swift_Plugins_Decorator_Replacements::getReplacementsFor()}.
   * 
   * @param mixed $replacements
   */",
 "/**
   * Invoked immediately before the Message is sent.
   * 
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Find a map of replacements for the address.
   * 
   * If this plugin was provided with a delegate instance of
   * {@link Swift_Plugins_Decorator_Replacements} then the call will be
   * delegated to it.  Otherwise, it will attempt to find the replacements
   * from the array provided in the constructor.
   * 
   * If no replacements can be found, an empty value (NULL) is returned.
   * 
   * @param string $address
   * 
   * @return array
   */",
 "/**
   * Invoked immediately after the Message is sent.
   * 
   * @param Swift_Events_SendEvent $evt
   */",
 "/** Restore a changed message back to its original state */",
 "/**
 * Allows customization of Messages on-the-fly.
 * 
 * @package Swift
 * @subpackage Plugins
 * 
 * @author Chris Corbyn
 * @author Fabien Potencier
 */",
 "/**
 * Interface for annotation readers.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string                    $name       The name of the cookie
     * @param string                    $value      The value of the cookie
     * @param integer|string|\DateTime  $expire     The time the cookie expires
     * @param string                    $path       The path on the server in which the cookie will be available on
     * @param string                    $domain     The domain that the cookie is available to
     * @param Boolean                   $secure     Whether the cookie should only be transmitted over a secure HTTPS connection from the client
     * @param Boolean                   $httpOnly   Whether the cookie will be made accessible only through the HTTP protocol
     *
     * @api
     */",
 "/**
     * Gets the name of the cookie.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Gets the value of the cookie.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Gets the domain that the cookie is available to.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Gets the time the cookie expires.
     *
     * @return integer
     *
     * @api
     */",
 "/**
     * Gets the path on the server in which the cookie will be available on.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Checks whether the cookie should only be transmitted over a secure HTTPS connection from the client.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Checks whether the cookie will be made accessible only through the HTTP protocol.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Whether this cookie is about to be cleared
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
 * Represents a cookie
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string  $name    The name of the application
     * @param string  $version The version of the application
     *
     * @api
     */",
 "/**
     * Runs the current application.
     *
     * @param InputInterface  $input  An Input instance
     * @param OutputInterface $output An Output instance
     *
     * @return integer 0 if everything went fine, or an error code
     *
     * @throws \Exception When doRun returns Exception
     *
     * @api
     */",
 "/**
     * Runs the current application.
     *
     * @param InputInterface  $input  An Input instance
     * @param OutputInterface $output An Output instance
     *
     * @return integer 0 if everything went fine, or an error code
     */",
 "/**
     * Set a helper set to be used with the command.
     *
     * @param HelperSet $helperSet The helper set
     *
     * @api
     */",
 "/**
     * Get the helper set associated with the command.
     *
     * @return HelperSet The HelperSet instance associated with this command
     *
     * @api
     */",
 "/**
     * Gets the InputDefinition related to this Application.
     *
     * @return InputDefinition The InputDefinition instance
     */",
 "/**
     * Gets the help message.
     *
     * @return string A help message.
     */",
 "/**
     * Sets whether to catch exceptions or not during commands execution.
     *
     * @param Boolean $boolean Whether to catch exceptions or not during commands execution
     *
     * @api
     */",
 "/**
     * Sets whether to automatically exit after a command execution or not.
     *
     * @param Boolean $boolean Whether to automatically exit after a command execution or not
     *
     * @api
     */",
 "/**
     * Gets the name of the application.
     *
     * @return string The application name
     *
     * @api
     */",
 "/**
     * Sets the application name.
     *
     * @param string $name The application name
     *
     * @api
     */",
 "/**
     * Gets the application version.
     *
     * @return string The application version
     *
     * @api
     */",
 "/**
     * Sets the application version.
     *
     * @param string $version The application version
     *
     * @api
     */",
 "/**
     * Returns the long version of the application.
     *
     * @return string The long application version
     *
     * @api
     */",
 "/**
     * Registers a new command.
     *
     * @param string $name The command name
     *
     * @return Command The newly created command
     *
     * @api
     */",
 "/**
     * Adds an array of command objects.
     *
     * @param Command[] $commands An array of commands
     *
     * @api
     */",
 "/**
     * Adds a command object.
     *
     * If a command with the same name already exists, it will be overridden.
     *
     * @param Command $command A Command object
     *
     * @return Command The registered command
     *
     * @api
     */",
 "/**
     * Returns a registered command by name or alias.
     *
     * @param string $name The command name or alias
     *
     * @return Command A Command object
     *
     * @throws \InvalidArgumentException When command name given does not exist
     *
     * @api
     */",
 "/**
     * Returns true if the command exists, false otherwise.
     *
     * @param string $name The command name or alias
     *
     * @return Boolean true if the command exists, false otherwise
     *
     * @api
     */",
 "/**
     * Returns an array of all unique namespaces used by currently registered commands.
     *
     * It does not returns the global namespace which always exists.
     *
     * @return array An array of namespaces
     */",
 "/**
     * Finds a registered namespace by a name or an abbreviation.
     *
     * @param string $namespace A namespace or abbreviation to search for
     *
     * @return string A registered namespace
     *
     * @throws \InvalidArgumentException When namespace is incorrect or ambiguous
     */",
 "/**
     * Finds a command by name or alias.
     *
     * Contrary to get, this command tries to find the best
     * match if you give it an abbreviation of a name or alias.
     *
     * @param  string $name A command name or a command alias
     *
     * @return Command A Command instance
     *
     * @throws \InvalidArgumentException When command name is incorrect or ambiguous
     *
     * @api
     */",
 "/**
     * Gets the commands (registered in the given namespace if provided).
     *
     * The array keys are the full names and the values the command instances.
     *
     * @param  string  $namespace A namespace name
     *
     * @return array An array of Command instances
     *
     * @api
     */",
 "/**
     * Returns an array of possible abbreviations given a set of names.
     *
     * @param array $names An array of names
     *
     * @return array An array of abbreviations
     */",
 "/**
     * Returns a text representation of the Application.
     *
     * @param string $namespace An optional namespace name
     *
     * @return string A string representing the Application
     */",
 "/**
     * Returns an XML representation of the Application.
     *
     * @param string  $namespace An optional namespace name
     * @param Boolean $asDom     Whether to return a DOM or an XML string
     *
     * @return string|DOMDocument An XML string representing the Application
     */",
 "/**
     * Renders a catched exception.
     *
     * @param Exception       $e      An exception instance
     * @param OutputInterface $output An OutputInterface instance
     */",
 "/**
     * Gets the name of the command based on input.
     *
     * @param InputInterface $input The input interface
     *
     * @return string The command name
     */",
 "/**
     * Sorts commands in alphabetical order.
     *
     * @param array $commands An associative array of commands to sort
     *
     * @return array A sorted array of commands
     */",
 "/**
     * Returns abbreviated suggestions in string format.
     *
     * @param array $abbrevs Abbreviated suggestions to convert
     *
     * @return string A formatted string of abbreviated suggestions
     */",
 "/**
     * Returns the namespace part of the command name.
     *
     * @param string $name  The full name of the command
     * @param string $limit The maximum number of parts of the namespace
     *
     * @return string The namespace of the command
     */",
 "/**
 * An Application is the container for a collection of commands.
 *
 * It is the main entry point of a Console application.
 *
 * This class is optimized for a standard CLI environment.
 *
 * Usage:
 *
 *     $app = new Application(\'myapp\', \'1.0 (stable)\');
 *     $app->add(new SimpleCommand());
 *     $app->run();
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Gets the called listeners.
     *
     * @return array An array of called listeners
     */",
 "/**
     * Gets the not called listeners.
     *
     * @return array An array of not called listeners
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a for node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Creates a new persistent collection.
     *
     * @param EntityManager $em The EntityManager the collection will be associated with.
     * @param ClassMetadata $class The class descriptor of the entity type of this collection.
     * @param array The collection elements.
     */",
 "/**
     * INTERNAL:
     * Sets the collection\'s owning entity together with the AssociationMapping that
     * describes the association between the owner and the elements of the collection.
     *
     * @param object $entity
     * @param AssociationMapping $assoc
     */",
 "/**
     * INTERNAL:
     * Gets the collection owner.
     *
     * @return object
     */",
 "/**
     * INTERNAL:
     * Adds an element to a collection during hydration. This will automatically
     * complete bidirectional associations in the case of a one-to-many association.
     *
     * @param mixed $element The element to add.
     */",
 "/**
     * INTERNAL:
     * Sets a keyed element in the collection during hydration.
     *
     * @param mixed $key The key to set.
     * $param mixed $value The element to set.
     */",
 "/**
     * Initializes the collection by loading its contents from the database
     * if the collection is not yet initialized.
     */",
 "/**
     * INTERNAL:
     * Tells this collection to take a snapshot of its current state.
     */",
 "/**
     * INTERNAL:
     * Returns the last snapshot of the elements in the collection.
     *
     * @return array The last snapshot of the elements.
     */",
 "/**
     * INTERNAL:
     * getDeleteDiff
     *
     * @return array
     */",
 "/**
     * INTERNAL:
     * getInsertDiff
     *
     * @return array
     */",
 "/**
     * INTERNAL: Gets the association mapping of the collection.
     *
     * @return \Doctrine\ORM\Mapping\AssociationMapping
     */",
 "/**
     * Marks this collection as changed/dirty.
     */",
 "/**
     * Gets a boolean flag indicating whether this collection is dirty which means
     * its state needs to be synchronized with the database.
     *
     * @return boolean TRUE if the collection is dirty, FALSE otherwise.
     */",
 "/**
     * Sets a boolean flag, indicating whether this collection is dirty.
     *
     * @param boolean $dirty Whether the collection should be marked dirty or not.
     */",
 "/**
     * Sets the initialized flag of the collection, forcing it into that state.
     *
     * @param boolean $bool
     */",
 "/**
     * Checks whether this collection has been initialized.
     *
     * @return boolean
     */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Called by PHP when this collection is serialized. Ensures that only the
     * elements are properly serialized.
     *
     * @internal Tried to implement Serializable first but that did not work well
     *           with circular references. This solution seems simpler and works well.
     */",
 "/**
     * @see containsKey()
     */",
 "/**
     * @see get()
     */",
 "/**
     * @see add()
     * @see set()
     */",
 "/**
     * @see remove()
     */",
 "/**
     * Gets the element of the collection at the current iterator position.
     */",
 "/**
     * Moves the internal iterator position to the next element.
     */",
 "/**
     * Retrieves the wrapped Collection instance.
     */",
 "/**
     * Extract a slice of $length elements starting at position $offset from the Collection.
     *
     * If $length is null it returns all elements from $offset to the end of the Collection.
     * Keys have to be preserved by this method. Calling this method will only return the
     * selected slice and NOT change the elements contained in the collection slice is called on.
     *
     * @param int $offset
     * @param int $length
     * @return array
     */",
 "/**
 * A PersistentCollection represents a collection of elements that have persistent state.
 *
 * Collections of entities represent only the associations (links) to those entities.
 * That means, if the collection is part of a many-many mapping and you remove
 * entities from the collection, only the links in the relation table are removed (on flush).
 * Similarly, if you remove entities from a collection that is part of a one-many
 * mapping this will only result in the nulling out of the foreign keys on flush.
 *
 * @since     2.0
 * @author    Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author    Roman Borschel <roman@code-factory.org>
 * @author    Giorgio Sironi <piccoloprincipeazzurro@gmail.com>
 * @todo Design for inheritance to allow custom implementations?
 */",
 "/**
     * Compiles a filter.
     *
     * @return string The PHP code for the filter
     */",
 "/**
 * Represents a template filter.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Represents a method template test.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param \DOMNode $node The node associated with this field
     */",
 "/**
     * Returns the name of the field.
     *
     * @return string The name of the field
     */",
 "/**
     * Gets the value of the field.
     *
     * @return string|array The value of the field
     */",
 "/**
     * Sets the value of the field.
     *
     * @param string $value The value of the field
     *
     * @api
     */",
 "/**
     * Returns true if the field should be included in the submitted values.
     *
     * @return Boolean true if the field should be included in the submitted values, false otherwise
     */",
 "/**
     * Initializes the form field.
     */",
 "/**
 * FormField is the abstract class for all form fields.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to generate repository classes for mapping information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Checks if an email matches the current grammars
   * @param string $email
   */",
 "/**
 * Utility Class allowing users to simply check expressions again Swift Grammar
 * @package Swift
 * @author Xavier De Cock <xdecock@gmail.com>
 */",
 "/**
   * Creates a new QpHeaderEncoder for the given CharacterStream.
   * @param Swift_CharacterStream $charStream to use for reading characters
   */",
 "/**
   * Get the name of this encoding scheme.
   * Returns the string \'Q\'.
   * @return string
   */",
 "/**
   * Takes an unencoded string and produces a Q encoded string from it.
   * @param string $string to encode
   * @param int $firstLineOffset, optional
   * @param int $maxLineLength, optional, 0 indicates the default of 76 chars
   * @return string
   */",
 "/**
 * Handles Quoted Printable (Q) Header Encoding in Swift Mailer.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
 * Represents a module node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Join ::= [\"LEFT\" [\"OUTER\"] | \"INNER\"] \"JOIN\" JoinAssociationPathExpression
 *          [\"AS\"] AliasIdentificationVariable [(\"ON\" | \"WITH\") ConditionalExpression]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @dataProvider getLogicalNameToTemplateProvider
     */",
 "/**
     * @dataProvider      getInvalidLogicalNameProvider
     * @expectedException \InvalidArgumentException
     */",
 "/**
     * @dataProvider getFilenameToTemplateProvider
     */",
 "/**
     * @dataProvider getMethodAndRetVal
     */",
 "/**
     * Use this method to register all autoloaders for a setup where Doctrine is checked out from
     * its github repository at {@link http://github.com/doctrine/doctrine2}
     * 
     * @param string $gitCheckoutRootPath 
     * @return void
     */",
 "/**
     * Use this method to register all autoloaders for a setup where Doctrine is installed
     * though {@link http://pear.doctrine-project.org}.
     * 
     * @return void
     */",
 "/**
     * Use this method to register all autoloads for a downloaded Doctrine library.
     * Pick the directory the library was uncompressed into.
     * 
     * @param string $directory 
     */",
 "/**
     * Create a configuration with an annotation metadata driver.
     * 
     * @param array $paths
     * @param boolean $isDevMode
     * @param string $proxyDir
     * @param Cache $cache
     * @return Configuration
     */",
 "/**
     * Create a configuration with an annotation metadata driver.
     * 
     * @param array $paths
     * @param boolean $isDevMode
     * @param string $proxyDir
     * @param Cache $cache
     * @return Configuration
     */",
 "/**
     * Create a configuration with an annotation metadata driver.
     * 
     * @param array $paths
     * @param boolean $isDevMode
     * @param string $proxyDir
     * @param Cache $cache
     * @return Configuration
     */",
 "/**
     * Create a configuration without a metadata driver.
     * 
     * @param bool $isDevMode
     * @param string $proxyDir
     * @param Cache $cache
     * @return Configuration 
     */",
 "/**
 * Convenience class for setting up Doctrine from different installations and configurations.
 * 
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
   * Invoked as a TransportException is thrown in the Transport system.
   * @param Swift_Events_TransportExceptionEvent $evt
   */",
 "/**
 * Listens for Exceptions thrown from within the Transport system.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
   * Create a new RfcComplianceException with $message.
   * @param string $message
   */",
 "/**
 * RFC Compliance Exception class.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
   * Create a new StreamFilter to replace $search with $replace in a string.
   * @param string $search
   * @param string $replace
   * @return Swift_StreamFilter
   */",
 "/**
 * Creates filters for replacing needles in a string buffer.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param TemplateFinderInterface   $finder  A template finder
     * @param TemplateLocator           $locator The template locator
     */",
 "/**
     * Warms up the cache.
     *
     * @param string $cacheDir The cache directory
     */",
 "/**
     * Checks whether this warmer is optional or not.
     *
     * @return Boolean always true
     */",
 "/**
 * Computes the association between template names and their paths on the disk.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @see UrlMatcher::match()
     *
     * @api
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Finds an object by its primary key / identifier.
     *
     * @param $id The identifier.
     * @return object The object.
     */",
 "/**
     * Finds all objects in the repository.
     *
     * @return mixed The objects.
     */",
 "/**
     * Finds objects by a set of criteria.
     *
     * Optionally sorting and limiting details can be passed. An implementation may throw
     * an UnexpectedValueException if certain values of the sorting or limiting details are
     * not supported.
     *
     * @throws UnexpectedValueException
     * @param array $criteria
     * @param array|null $orderBy
     * @param int|null $limit
     * @param int|null $offset
     * @return mixed The objects.
     */",
 "/**
     * Finds a single object by a set of criteria.
     *
     * @param array $criteria
     * @return object The object.
     */",
 "/**
 * Contract for a Doctrine persistence layer ObjectRepository class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the first argument from the raw parameters (not parsed).
     *
     * @return string The value of the first argument or null otherwise
     */",
 "/**
     * Returns true if the raw parameters (not parsed) contain a value.
     *
     * This method is to be used to introspect the input parameters
     * before they have been validated. It must be used carefully.
     *
     * @param string|array $values The values to look for in the raw parameters (can be an array)
     *
     * @return Boolean true if the value is contained in the raw parameters
     */",
 "/**
     * Returns the value of a raw option (not parsed).
     *
     * This method is to be used to introspect the input parameters
     * before they have been validated. It must be used carefully.
     *
     * @param string|array $values The value(s) to look for in the raw parameters (can be an array)
     * @param mixed $default The default value to return if no result is found
     *
     * @return mixed The option value
     */",
 "/**
     * Binds the current Input instance with the given arguments and options.
     *
     * @param InputDefinition $definition A InputDefinition instance
     */",
 "/**
     * Validates if arguments given are correct.
     *
     * Throws an exception when not enough arguments are given.
     *
     * @throws \RuntimeException
     */",
 "/**
     * Returns all the given arguments merged with the default values.
     *
     * @return array
     */",
 "/**
     * Gets argument by name.
     *
     * @param string $name The name of the argument
     *
     * @return mixed
     */",
 "/**
     * Returns all the given options merged with the default values.
     *
     * @return array
     */",
 "/**
     * Gets an option by name.
     *
     * @param string $name The name of the option
     *
     * @return mixed
     */",
 "/**
     * Is this input means interactive?
     *
     * @return Boolean
     */",
 "/**
 * InputInterface is the interface implemented by all input classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $path  The path to the accessed file
     */",
 "/**
 * Thrown when the access on a file was denied.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * Initializes the global Assetic object.
 *
 * @param AssetFactory $factory The asset factory
 */",
 "/**
 * Returns an array of javascript URLs.
 *
 * @param array|string $inputs  Input strings
 * @param array|string $filters Filter names
 * @param array        $options An array of options
 *
 * @return array An array of javascript URLs
 */",
 "/**
 * Returns an array of stylesheet URLs.
 *
 * @param array|string $inputs  Input strings
 * @param array|string $filters Filter names
 * @param array        $options An array of options
 *
 * @return array An array of stylesheet URLs
 */",
 "/**
 * Returns an image URL.
 *
 * @param string       $input   An input
 * @param array|string $filters Filter names
 * @param array        $options An array of options
 *
 * @return string An image URL
 */",
 "/**
 * Returns an array of asset urls.
 *
 * @param array|string $inputs  Input strings
 * @param array|string $filters Filter names
 * @param array        $options An array of options
 *
 * @return array An array of URLs
 */",
 "/**
 * \"DATE_ADD(date1, interval, unit)\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param string  $name        The argument name
     * @param integer $mode        The argument mode: self::REQUIRED or self::OPTIONAL
     * @param string  $description A description text
     * @param mixed   $default     The default value (for self::OPTIONAL mode only)
     *
     * @throws \InvalidArgumentException When argument mode is not valid
     *
     * @api
     */",
 "/**
     * Returns the argument name.
     *
     * @return string The argument name
     */",
 "/**
     * Returns true if the argument is required.
     *
     * @return Boolean true if parameter mode is self::REQUIRED, false otherwise
     */",
 "/**
     * Returns true if the argument can take multiple values.
     *
     * @return Boolean true if mode is self::IS_ARRAY, false otherwise
     */",
 "/**
     * Sets the default value.
     *
     * @param mixed $default The default value
     *
     * @throws \LogicException When incorrect default value is given
     */",
 "/**
     * Returns the default value.
     *
     * @return mixed The default value
     */",
 "/**
     * Returns the description text.
     *
     * @return string The description text
     */",
 "/**
 * Represents a command line argument.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string|array $globs   A single glob path or array of paths
     * @param array        $filters An array of filters
     * @param string       $root    The root directory
     */",
 "/**
     * Initializes the collection based on the glob(s) passed in.
     */",
 "/**
 * A collection of assets loaded by glob.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * FormLoginFactory creates services for form login authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Get the message list
   *
   * @return array
   */",
 "/**
   * Get the message count
   *
   * @return int count
   */",
 "/**
   * Empty the message list
   *
   */",
 "/**
   * Invoked immediately before the Message is sent.
   *
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Invoked immediately after the Message is sent.
   *
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
 * Stores all sent emails for further usage.
 * @package Swift
 * @subpackage Plugins
 * @author Fabien Potencier
 */",
 "/**
 * Id generator that uses a single-row database table and a hi/lo algorithm.
 *
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param mixed $serverData array or object w/ ArrayAccess that provides access to the $_SERVER data
     */",
 "/**
     * @param array $record
     * @return array
     */",
 "/**
 * Injects url/method and remote IP of the current web request in all records
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
 * Database tool allows you to easily drop and create your configured databases.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/** @override */",
 "/**
 * Hydrator that hydrates a single scalar value from the result set.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"TRIM\" \"(\" [[\"LEADING\" | \"TRAILING\" | \"BOTH\"] [char] \"FROM\"] StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the request time.
     *
     * @return integer The time
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * TimerDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param RegistryInterface $registry A RegistryInterface instance
     */",
 "/**
     * This cache warmer is not optional, without proxies fatal error occurs!
     *
     * @return false
     */",
 "/**
 * The proxy generator cache warmer generates all entity proxies.
 *
 * In the process of generating proxies the cache for all the metadata is primed also,
 * since this information is necessary to build the proxies in the first place.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Creates a new ACL for the given object identity.
     *
     * @throws AclAlreadyExistsException when there already is an ACL for the given
     *                                   object identity
     * @param ObjectIdentityInterface $oid
     * @return MutableAclInterface
     */",
 "/**
     * Deletes the ACL for a given object identity.
     *
     * This will automatically trigger a delete for any child ACLs. If you don\'t
     * want child ACLs to be deleted, you will have to set their parent ACL to null.
     *
     * @param ObjectIdentityInterface $oid
     * @return void
     */",
 "/**
     * Persists any changes which were made to the ACL, or any associated
     * access control entries.
     *
     * Changes to parent ACLs are not persisted.
     *
     * @param MutableAclInterface $acl
     * @return void
     */",
 "/**
 * Provides support for creating and storing ACL instances.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Initializes a new SchemaTool instance that uses the connection of the
     * provided EntityManager.
     *
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Creates the database schema for the given array of ClassMetadata instances.
     *
     * @param array $classes
     */",
 "/**
     * Gets the list of DDL statements that are required to create the database schema for
     * the given list of ClassMetadata instances.
     *
     * @param array $classes
     * @return array $sql The SQL statements needed to create the schema for the classes.
     */",
 "/**
     * Some instances of ClassMetadata don\'t need to be processed in the SchemaTool context. This method detects them.
     * 
     * @param ClassMetadata $class
     * @param array $processedClasses
     * @return bool
     */",
 "/**
     * From a given set of metadata classes this method creates a Schema instance.
     *
     * @param array $classes
     * @return Schema
     */",
 "/**
     * Gets a portable column definition as required by the DBAL for the discriminator
     * column of a class.
     *
     * @param ClassMetadata $class
     * @return array The portable column definition of the discriminator column as required by
     *              the DBAL.
     */",
 "/**
     * Gathers the column definitions as required by the DBAL of all field mappings
     * found in the given class.
     *
     * @param ClassMetadata $class
     * @param Table $table
     * @return array The list of portable column definitions as required by the DBAL.
     */",
 "/**
     * Creates a column definition as required by the DBAL from an ORM field mapping definition.
     *
     * @param ClassMetadata $class The class that owns the field mapping.
     * @param array $mapping The field mapping.
     * @param Table $table
     * @return array The portable column definition as required by the DBAL.
     */",
 "/**
     * Gathers the SQL for properly setting up the relations of the given class.
     * This includes the SQL for foreign key constraints and join tables.
     *
     * @param ClassMetadata $class
     * @param \Doctrine\DBAL\Schema\Table $table
     * @param \Doctrine\DBAL\Schema\Schema $schema
     * @return void
     */",
 "/**
     * Get the class metadata that is responsible for the definition of the referenced column name.
     *
     * Previously this was a simple task, but with DDC-117 this problem is actually recursive. If its
     * not a simple field, go through all identifier field names that are associations recursivly and
     * find that referenced column name.
     *
     * TODO: Is there any way to make this code more pleasing?
     *
     * @param ClassMetadata $class
     * @param string $referencedColumnName
     * @return array(ClassMetadata, referencedFieldName)
     */",
 "/**
     * Gather columns and fk constraints that are required for one part of relationship.
     *
     * @param array $joinColumns
     * @param \Doctrine\DBAL\Schema\Table $theJoinTable
     * @param ClassMetadata $class
     * @param array $mapping
     * @param array $primaryKeyColumns
     * @param array $uniqueConstraints
     */",
 "/**
     * Drops the database schema for the given classes.
     *
     * In any way when an exception is thrown it is supressed since drop was
     * issued for all classes of the schema and some probably just don\'t exist.
     *
     * @param array $classes
     * @return void
     */",
 "/**
     * Drops all elements in the database of the current connection.
     *
     * @return void
     */",
 "/**
     * Gets the SQL needed to drop the database schema for the connections database.
     *
     * @return array
     */",
 "/**
     * Get SQL to drop the tables defined by the passed classes.
     * 
     * @param array $classes
     * @return array
     */",
 "/**
     * Updates the database schema of the given classes by comparing the ClassMetadata
     * instances to the current database schema that is inspected. If $saveMode is set
     * to true the command is executed in the Database, else SQL is returned.
     *
     * @param array $classes
     * @param boolean $saveMode
     * @return void
     */",
 "/**
     * Gets the sequence of SQL statements that need to be performed in order
     * to bring the given class mappings in-synch with the relational schema.
     * If $saveMode is set to true the command is executed in the Database, 
     * else SQL is returned.
     *
     * @param array $classes The classes to consider.
     * @param boolean $saveMode True for writing to DB, false for SQL string
     * @return array The sequence of SQL statements.
     */",
 "/**
 * The SchemaTool is a tool to create/drop/update database schemas based on
 * <tt>ClassMetadata</tt> class descriptors.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Handles anonymous authentication.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
 * AnonymousAuthenticationListener automatically adds a Token if none is
 * already present.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $jpegoptimBin Path to the jpegoptim binary
     */",
 "/**
 * Runs assets through Jpegoptim.
 *
 * @link   http://www.kokkonen.net/tjko/projects.html
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
   * Create a new SwiftException with $message.
   * @param string $message
   */",
 "/**
 * Base Exception class.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
 * InvalidArgumentException
 *
 * @author Bulat Shakirzyanov <bulat@theopenskyproject.com>
 */",
 "/**
 * Command to clear the result cache of the various cache drivers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
 * Abtract Function Node.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Returns a form.
     *
     * @see createBuilder()
     *
     * @param string|FormTypeInterface  $type       The type of the form
     * @param mixed                     $data       The initial data
     * @param array                     $options    The options
     *
     * @return Form The form named after the type
     *
     * @throws FormException if any given option is not applicable to the given type
     */",
 "/**
     * Returns a form.
     *
     * @param string|FormTypeInterface  $type       The type of the form
     * @param string                    $name       The name of the form
     * @param mixed                     $data       The initial data
     * @param array                     $options    The options
     *
     * @return Form The form
     *
     * @throws FormException if any given option is not applicable to the given type
     */",
 "/**
     * Returns a form for a property of a class.
     *
     * @param string $class     The fully qualified class name
     * @param string $property  The name of the property to guess for
     * @param mixed  $data      The initial data
     * @param array  $options   The options for the builder
     *
     * @return Form The form named after the property
     *
     * @throws FormException if any given option is not applicable to the form type
     */",
 "/**
     * Returns a form builder
     *
     * @param string|FormTypeInterface  $type       The type of the form
     * @param mixed                     $data       The initial data
     * @param array                     $options    The options
     *
     * @return FormBuilder The form builder
     *
     * @throws FormException if any given option is not applicable to the given type
     */",
 "/**
     * Returns a form builder.
     *
     * @param string|FormTypeInterface  $type       The type of the form
     * @param string                    $name       The name of the form
     * @param mixed                     $data       The initial data
     * @param array                     $options    The options
     *
     * @return FormBuilder The form builder
     *
     * @throws FormException if any given option is not applicable to the given type
     */",
 "/**
     * Returns a form builder for a property of a class.
     *
     * If any of the \'max_length\', \'required\' and type options can be guessed,
     * and are not provided in the options argument, the guessed value is used.
     *
     * @param string $class     The fully qualified class name
     * @param string $property  The name of the property to guess for
     * @param mixed  $data      The initial data
     * @param array  $options   The options for the builder
     *
     * @return FormBuilder The form builder named after the property
     *
     * @throws FormException if any given option is not applicable to the form type
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Called before child nodes are visited.
     *
     * @param Twig_NodeInterface $node The node to visit
     * @param Twig_Environment   $env  The Twig environment instance
     *
     * @return Twig_NodeInterface The modified node
     */",
 "/**
     * Called after child nodes are visited.
     *
     * @param Twig_NodeInterface $node The node to visit
     * @param Twig_Environment   $env  The Twig environment instance
     *
     * @return Twig_NodeInterface The modified node
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Twig_NodeVisitor_Sandbox implements sandboxing.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new LoadBalancedTransport.
   */",
 "/**
   * Set $transports to delegate to.
   * 
   * @param array $transports Swift_Transport
   */",
 "/**
   * Get $transports to delegate to.
   * 
   * @return array Swift_Transport
   */",
 "/**
   * Test if this Transport mechanism has started.
   * 
   * @return boolean
   */",
 "/**
   * Start this Transport mechanism.
   */",
 "/**
   * Stop this Transport mechanism.
   */",
 "/**
   * Send the given Message.
   * 
   * Recipient/sender data will be retrieved from the Message API.
   * The return value is the number of recipients who were accepted for delivery.
   * 
   * @param Swift_Mime_Message $message
   * @param string[] &$failedRecipients to collect failures by-reference
   * @return int
   */",
 "/**
   * Register a plugin.
   * 
   * @param Swift_Events_EventListener $plugin
   */",
 "/**
   * Rotates the transport list around and returns the first instance.
   * 
   * @return Swift_Transport
   * @access protected
   */",
 "/**
   * Tag the currently used (top of stack) transport as dead/useless.
   * 
   * @access protected
   */",
 "/**
 * Redudantly and rotationally uses several Transports when sending.
 * 
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a sandbox node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param FileLocatorInterface $locator  A FileLocatorInterface instance
     * @param string               $cacheDir The cache path
     */",
 "/**
     * Returns a full path for a given file.
     *
     * @param TemplateReferenceInterface $template     A template
     * @param string                     $currentPath  Unused
     * @param Boolean                    $first        Unused
     *
     * @return string The full path for the file
     *
     * @throws \InvalidArgumentException When the template is not an instance of TemplateReferenceInterface
     * @throws \InvalidArgumentException When the template file can not be found
     */",
 "/**
 * TemplateLocator locates templates in bundles.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $id Alias identifier
     * @param Boolean $public If this alias is public
     *
     * @api
     */",
 "/**
     * Checks if this DI Alias should be public or not.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Sets if this Alias is public.
     *
     * @param Boolean $boolean If this Alias should be public
     *
     * @api
     */",
 "/**
     * Returns the Id of this alias.
     *
     * @return string The alias id
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Sets the token.
     *
     * @param string $token The token
     */",
 "/**
     * Gets the token.
     *
     * @return string The token
     */",
 "/**
     * Sets the parent token
     *
     * @param Profile $parent The parent Profile
     */",
 "/**
     * Returns the parent token.
     *
     * @return Profile The parent profile
     */",
 "/**
     * Returns the IP.
     *
     * @return string The IP
     */",
 "/**
     * Returns the URL.
     *
     * @return string The URL
     */",
 "/**
     * Returns the time.
     *
     * @return string The time
     */",
 "/**
     * Finds children profilers.
     *
     * @return array An array of Profile
     */",
 "/**
 * Profile.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Notify this observer that the observed entity\'s ContentEncoder has changed.
   * @param Swift_Mime_ContentEncoder $encoder
   */",
 "/**
 * Observes changes for a Mime entity\'s ContentEncoder.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
*Returnsthecompletecharactermap
*
*@paramstring$string
*@paramint$startOffset
*@paramarray$currentMap
*@parammixed$ignoredChars
*/",
 "/**
*ReturnsmapType
*@intmapType
*/",
 "/**
*Returnsanintegerwhichspecifieshowmanymorebytestoread.
*Apositiveintegerindicatesthenumberofmorebytestofetchbeforeinvoking
*thismethodagain.
*Avalueofzeromeansthisisalreadyavalidcharacter.
*Avalueof-1meansthiscannotpossiblybeavalidcharacter.
*@paramstring$bytes
*@returnint
*/",
 "/**
*Returnsthenumberofbyteswhichshouldbereadtostarteachcharacter.
*@returnint
*/",
 "/**
*AnalyzesUTF-8characters.
*@packageSwift
*@subpackageEncoder
*@authorChrisCorbyn
*@authorXavierDeCock<xdecock@gmail.com>
*/",
 "/**
     * Returns whether this guesser is supported on the current OS
     *
     * @return Boolean
     */",
 "/**
     * Guesses the mime type of the file with the given path
     *
     * @see MimeTypeGuesserInterface::guess()
     */",
 "/**
 * Guesses the mime type with the binary \"file\" (only available on *nix)
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Processes the ContainerBuilder to resolve parameter placeholders.
     *
     * @param ContainerBuilder $container
     */",
 "/**
 * Resolves all parameter placeholders \"%somevalue%\" to their real values.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Returns the guess most likely to be correct from a list of guesses
     *
     * If there are multiple guesses with the same, highest confidence, the
     * returned guess is any of them.
     *
     * @param  array $guesses     A list of guesses
     *
     * @return Guess  The guess with the highest confidence
     */",
 "/**
     * Constructor
     *
     * @param integer $confidence   The confidence
     */",
 "/**
     * Returns the confidence that the guessed value is correct
     *
     * @return integer  One of the constants HIGH_CONFIDENCE, MEDIUM_CONFIDENCE
     *                  and LOW_CONFIDENCE
     */",
 "/**
 * Base class for guesses made by TypeGuesserInterface implementation
 *
 * Each instance contains a confidence value about the correctness of the guess.
 * Thus an instance with confidence HIGH_CONFIDENCE is more likely to be
 * correct than an instance with confidence LOW_CONFIDENCE.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * AccountExpiredException is thrown when the user account has expired.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Get an array of the placeholders in an sql statements as keys and their positions in the query string.
     * 
     * Returns an integer => integer pair (indexed from zero) for a positional statement
     * and a string => int[] pair for a named statement.
     * 
     * @param string $statement
     * @param bool $isPositional
     * @return array
     */",
 "/**
     * For a positional query this method can rewrite the sql statement with regard to array parameters.
     * 
     * @param string $query
     * @param array $params
     * @param array $types 
     */",
 "/**
 * Utility class that parses sql statements with regard to types and parameters.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param LoaderInterface $loader A Loader instance
     * @param string          $dir    The directory where to store the cache files
     */",
 "/**
     * Loads a template.
     *
     * @param TemplateReferenceInterface $template A template
     *
     * @return Storage|Boolean false if the template cannot be loaded, a Storage instance otherwise
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param TemplateReferenceInterface $template A template
     * @param integer                    $time     The last modification time of the cached template (timestamp)
     */",
 "/**
 * CacheLoader is a loader that caches other loaders responses
 * on the filesystem.
 *
 * This cache only caches on disk to allow PHP accelerators to cache the opcodes.
 * All other mechanism would imply the use of `eval()`.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Updates auditing for class-based ACE
     *
     * @param integer $index
     * @param Boolean $auditSuccess
     * @param Boolean $auditFailure
     * @return void
     */",
 "/**
     * Updates auditing for class-field-based ACE
     *
     * @param integer $index
     * @param string $field
     * @param Boolean $auditSuccess
     * @param Boolean $auditFailure
     * @return void
     */",
 "/**
     * Updates auditing for object-based ACE
     *
     * @param integer $index
     * @param Boolean $auditSuccess
     * @param Boolean $auditFailure
     * @return void
     */",
 "/**
     * Updates auditing for object-field-based ACE
     *
     * @param integer $index
     * @param string $field
     * @param Boolean $auditSuccess
     * @param Boolean $auditFailure
     * @return void
     */",
 "/**
 * This interface adds auditing capabilities to the ACL.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Loads assets from the supplied node.
     *
     * @return array An array of asset formulae indexed by name
     */",
 "/**
 * Loads asset formulae from Twig templates.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"CONCAT\" \"(\" StringPrimary \",\" StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Represents a template filter.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Get the source object of this event.
   * @return object
   */",
 "/**
   * Prevent this Event from bubbling any further up the stack.
   * @param boolean $cancel, optional
   */",
 "/**
   * Returns true if this Event will not bubble any further up the stack.
   * @return boolean
   */",
 "/**
 * The minimum interface for an Event.
 * 
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Creates a new query parser object.
     *
     * @param Query $query The Query to parse.
     */",
 "/**
     * Sets a custom tree walker that produces output.
     * This tree walker will be run last over the AST, after any other walkers.
     *
     * @param string $className
     */",
 "/**
     * Adds a custom tree walker for modifying the AST.
     *
     * @param string $className
     */",
 "/**
     * Gets the lexer used by the parser.
     *
     * @return \Doctrine\ORM\Query\Lexer
     */",
 "/**
     * Gets the ParserResult that is being filled with information during parsing.
     *
     * @return \Doctrine\ORM\Query\ParserResult
     */",
 "/**
     * Gets the EntityManager used by the parser.
     *
     * @return EntityManager
     */",
 "/**
     * Parse and build AST for the given Query.
     *
     * @return \Doctrine\ORM\Query\AST\SelectStatement |
     *         \Doctrine\ORM\Query\AST\\UpdateStatement |
     *         \Doctrine\ORM\Query\AST\DeleteStatement
     */",
 "/**
     * Attempts to match the given token with the current lookahead token.
     *
     * If they match, updates the lookahead token; otherwise raises a syntax
     * error.
     *
     * @param int token type
     * @return void
     * @throws QueryException If the tokens dont match.
     */",
 "/**
     * Free this parser enabling it to be reused
     *
     * @param boolean $deep     Whether to clean peek and reset errors
     * @param integer $position Position to reset
     */",
 "/**
     * Parses a query string.
     *
     * @return ParserResult
     */",
 "/**
     * Fix order of identification variables.
     * 
     * They have to appear in the select clause in the same order as the
     * declarations (from ... x join ... y join ... z ...) appear in the query
     * as the hydration process relies on that order for proper operation.
     * 
     * @param AST\SelectStatement|AST\DeleteStatement|AST\\UpdateStatement $AST
     * @return void
     */",
 "/**
     * Generates a new syntax error.
     *
     * @param string $expected Expected string.
     * @param array $token Got token.
     *
     * @throws \Doctrine\ORM\Query\QueryException
     */",
 "/**
     * Generates a new semantical error.
     *
     * @param string $message Optional message.
     * @param array $token Optional token.
     *
     * @throws \Doctrine\ORM\Query\QueryException
     */",
 "/**
     * Peeks beyond the specified token and returns the first token after that one.
     *
     * @param array $token
     * @return array
     */",
 "/**
     * Peek beyond the matched closing parenthesis and return the first token after that one.
     *
     * @return array
     */",
 "/**
     * Checks if the given token indicates a mathematical operator.
     *
     * @return boolean TRUE if the token is a mathematical operator, FALSE otherwise.
     */",
 "/**
     * Checks if the next-next (after lookahead) token starts a function.
     *
     * @return boolean TRUE if the next-next tokens start a function, FALSE otherwise.
     */",
 "/**
     * Checks whether the given token type indicates an aggregate function.
     *
     * @return boolean TRUE if the token type is an aggregate function, FALSE otherwise.
     */",
 "/**
     * Checks whether the current lookahead token of the lexer has the type
     * T_ALL, T_ANY or T_SOME.
     *
     * @return boolean
     */",
 "/**
     * Checks whether the next 2 tokens start a subselect.
     *
     * @return boolean TRUE if the next 2 tokens start a subselect, FALSE otherwise.
     */",
 "/**
     * Validates that the given <tt>IdentificationVariable</tt> is semantically correct.
     * It must exist in query components list.
     *
     * @return void
     */",
 "/**
     * Validates that the given <tt>PartialObjectExpression</tt> is semantically correct.
     * It must exist in query components list.
     *
     * @return void
     */",
 "/**
     * Validates that the given <tt>ResultVariable</tt> is semantically correct.
     * It must exist in query components list.
     *
     * @return void
     */",
 "/**
     * Validates that the given <tt>PathExpression</tt> is semantically correct for grammar rules:
     *
     * AssociationPathExpression             ::= CollectionValuedPathExpression | SingleValuedAssociationPathExpression
     * SingleValuedPathExpression            ::= StateFieldPathExpression | SingleValuedAssociationPathExpression
     * StateFieldPathExpression              ::= IdentificationVariable \".\" StateField
     * SingleValuedAssociationPathExpression ::= IdentificationVariable \".\" SingleValuedAssociationField
     * CollectionValuedPathExpression        ::= IdentificationVariable \".\" CollectionValuedAssociationField
     *
     * @param array $deferredItem
     * @param mixed $AST
     */",
 "/**
     * QueryLanguage ::= SelectStatement | UpdateStatement | DeleteStatement
     *
     * @return \Doctrine\ORM\Query\AST\SelectStatement |
     *         \Doctrine\ORM\Query\AST\\UpdateStatement |
     *         \Doctrine\ORM\Query\AST\DeleteStatement
     */",
 "/**
     * SelectStatement ::= SelectClause FromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]
     *
     * @return \Doctrine\ORM\Query\AST\SelectStatement
     */",
 "/**
     * UpdateStatement ::= UpdateClause [WhereClause]
     *
     * @return \Doctrine\ORM\Query\AST\\UpdateStatement
     */",
 "/**
     * DeleteStatement ::= DeleteClause [WhereClause]
     *
     * @return \Doctrine\ORM\Query\AST\DeleteStatement
     */",
 "/**
     * IdentificationVariable ::= identifier
     *
     * @return string
     */",
 "/**
     * AliasIdentificationVariable = identifier
     *
     * @return string
     */",
 "/**
*AbstractSchemaName::=identifier
*
*@returnstring
*/",
 "/**
*AliasResultVariable::=identifier
*
*@returnstring
*/",
 "/**
*ResultVariable::=identifier
*
*@returnstring
*/",
 "/**
*JoinAssociationPathExpression::=IdentificationVariable\".\" (CollectionValuedAssociationField | SingleValuedAssociationField)
     *
     * @return \Doctrine\ORM\Query\AST\JoinAssociationPathExpression
     */",
 "/**
     * Parses an arbitrary path expression and defers semantical validation
     * based on expected types.
     *
     * PathExpression ::= IdentificationVariable \".\" identifier
     *
     * @param integer $expectedTypes
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * AssociationPathExpression ::= CollectionValuedPathExpression | SingleValuedAssociationPathExpression
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * SingleValuedPathExpression ::= StateFieldPathExpression | SingleValuedAssociationPathExpression
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * StateFieldPathExpression ::= IdentificationVariable \".\" StateField
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * SingleValuedAssociationPathExpression ::= IdentificationVariable \".\" SingleValuedAssociationField
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * CollectionValuedPathExpression ::= IdentificationVariable \".\" CollectionValuedAssociationField
     *
     * @return \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * SelectClause ::= \"SELECT\" [\"DISTINCT\"] SelectExpression {\",\" SelectExpression}
     *
     * @return \Doctrine\ORM\Query\AST\SelectClause
     */",
 "/**
     * SimpleSelectClause ::= \"SELECT\" [\"DISTINCT\"] SimpleSelectExpression
     *
     * @return \Doctrine\ORM\Query\AST\SimpleSelectClause
     */",
 "/**
     * UpdateClause ::= \"UPDATE\" AbstractSchemaName [\"AS\"] AliasIdentificationVariable \"SET\" UpdateItem {\",\" UpdateItem}*
     *
     * @return \Doctrine\ORM\Query\AST\\UpdateClause
     */",
 "/**
     * DeleteClause ::= \"DELETE\" [\"FROM\"] AbstractSchemaName [\"AS\"] AliasIdentificationVariable
     *
     * @return \Doctrine\ORM\Query\AST\DeleteClause
     */",
 "/**
     * FromClause ::= \"FROM\" IdentificationVariableDeclaration {\",\" IdentificationVariableDeclaration}*
     *
     * @return \Doctrine\ORM\Query\AST\FromClause
     */",
 "/**
     * SubselectFromClause ::= \"FROM\" SubselectIdentificationVariableDeclaration {\",\" SubselectIdentificationVariableDeclaration}*
     *
     * @return \Doctrine\ORM\Query\AST\SubselectFromClause
     */",
 "/**
     * WhereClause ::= \"WHERE\" ConditionalExpression
     *
     * @return \Doctrine\ORM\Query\AST\WhereClause
     */",
 "/**
     * HavingClause ::= \"HAVING\" ConditionalExpression
     *
     * @return \Doctrine\ORM\Query\AST\HavingClause
     */",
 "/**
     * GroupByClause ::= \"GROUP\" \"BY\" GroupByItem {\",\" GroupByItem}*
     *
     * @return \Doctrine\ORM\Query\AST\GroupByClause
     */",
 "/**
     * OrderByClause ::= \"ORDER\" \"BY\" OrderByItem {\",\" OrderByItem}*
     *
     * @return \Doctrine\ORM\Query\AST\OrderByClause
     */",
 "/**
     * Subselect ::= SimpleSelectClause SubselectFromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]
     *
     * @return \Doctrine\ORM\Query\AST\Subselect
     */",
 "/**
     * UpdateItem ::= SingleValuedPathExpression \"=\" NewValue
     *
     * @return \Doctrine\ORM\Query\AST\\UpdateItem
     */",
 "/**
     * GroupByItem ::= IdentificationVariable | SingleValuedPathExpression
     *
     * @return string | \Doctrine\ORM\Query\AST\PathExpression
     */",
 "/**
     * OrderByItem ::= (ResultVariable | StateFieldPathExpression) [\"ASC\" | \"DESC\"]
     *
     * @todo Post 2.0 release. Support general SingleValuedPathExpression instead
     * of only StateFieldPathExpression.
     *
     * @return \Doctrine\ORM\Query\AST\OrderByItem
     */",
 "/**
     * NewValue ::= SimpleArithmeticExpression | StringPrimary | DatetimePrimary | BooleanPrimary |
     *      EnumPrimary | SimpleEntityExpression | \"NULL\"
     *
     * NOTE: Since it is not possible to correctly recognize individual types, here is the full
     * grammar that needs to be supported:
     *
     * NewValue ::= SimpleArithmeticExpression | \"NULL\"
     *
     * SimpleArithmeticExpression covers all *Primary grammar rules and also SimplEntityExpression
     */",
 "/**
     * IdentificationVariableDeclaration ::= RangeVariableDeclaration [IndexBy] {JoinVariableDeclaration}*
     *
     * @return \Doctrine\ORM\Query\AST\IdentificationVariableDeclaration
     */",
 "/**
     * SubselectIdentificationVariableDeclaration ::= IdentificationVariableDeclaration | (AssociationPathExpression [\"AS\"] AliasIdentificationVariable)
     *
     * @return \Doctrine\ORM\Query\AST\SubselectIdentificationVariableDeclaration |
     *         \Doctrine\ORM\Query\AST\IdentificationVariableDeclaration
     */",
 "/**
     * JoinVariableDeclaration ::= Join [IndexBy]
     *
     * @return \Doctrine\ORM\Query\AST\JoinVariableDeclaration
     */",
 "/**
     * RangeVariableDeclaration ::= AbstractSchemaName [\"AS\"] AliasIdentificationVariable
     *
     * @return \Doctrine\ORM\Query\AST\RangeVariableDeclaration
     */",
 "/**
     * PartialObjectExpression ::= \"PARTIAL\" IdentificationVariable \".\" PartialFieldSet
     * PartialFieldSet ::= \"{\" SimpleStateField {\",\" SimpleStateField}* \"}\"
     *
     * @return array
     */",
 "/**
     * Join ::= [\"LEFT\" [\"OUTER\"] | \"INNER\"] \"JOIN\" JoinAssociationPathExpression
     *          [\"AS\"] AliasIdentificationVariable [\"WITH\" ConditionalExpression]
     *
     * @return \Doctrine\ORM\Query\AST\Join
     */",
 "/**
     * IndexBy ::= \"INDEX\" \"BY\" StateFieldPathExpression
     *
     * @return \Doctrine\ORM\Query\AST\IndexBy
     */",
 "/**
     * ScalarExpression ::= SimpleArithmeticExpression | StringPrimary | DateTimePrimary |
     *                      StateFieldPathExpression | BooleanPrimary | CaseExpression |
     *                      EntityTypeExpression
     *
     * @return mixed One of the possible expressions or subexpressions.
     */",
 "/**
     * CoalesceExpression ::= \"COALESCE\" \"(\" ScalarExpression {\",\" ScalarExpression}* \")\"
     * 
     * @return \Doctrine\ORM\Query\AST\CoalesceExpression
     */",
 "/**
     * NullIfExpression ::= \"NULLIF\" \"(\" ScalarExpression \",\" ScalarExpression \")\"
     * 
     * @return \Doctrine\ORM\Query\AST\ExistsExpression
     */",
 "/**
     * SelectExpression ::=
     *      IdentificationVariable | StateFieldPathExpression |
     *      (AggregateExpression | \"(\" Subselect \")\" | ScalarExpression) [[\"AS\"] AliasResultVariable]
     *
     * @return \Doctrine\ORM\Query\AST\SelectExpression
     */",
 "/**
     * SimpleSelectExpression ::=
     *      StateFieldPathExpression | IdentificationVariable |
     *      ((AggregateExpression | \"(\" Subselect \")\" | ScalarExpression) [[\"AS\"] AliasResultVariable])
     *
     * @return \Doctrine\ORM\Query\AST\SimpleSelectExpression
     */",
 "/**
     * ConditionalExpression ::= ConditionalTerm {\"OR\" ConditionalTerm}*
     *
     * @return \Doctrine\ORM\Query\AST\ConditionalExpression
     */",
 "/**
     * ConditionalTerm ::= ConditionalFactor {\"AND\" ConditionalFactor}*
     *
     * @return \Doctrine\ORM\Query\AST\ConditionalTerm
     */",
 "/**
     * ConditionalFactor ::= [\"NOT\"] ConditionalPrimary
     *
     * @return \Doctrine\ORM\Query\AST\ConditionalFactor
     */",
 "/**
     * ConditionalPrimary ::= SimpleConditionalExpression | \"(\" ConditionalExpression \")\"
     *
     * @return \Doctrine\ORM\Query\AST\ConditionalPrimary
     */",
 "/**
     * SimpleConditionalExpression ::=
     *      ComparisonExpression | BetweenExpression | LikeExpression |
     *      InExpression | NullComparisonExpression | ExistsExpression |
     *      EmptyCollectionComparisonExpression | CollectionMemberExpression |
     *      InstanceOfExpression
     */",
 "/**
     * EmptyCollectionComparisonExpression ::= CollectionValuedPathExpression \"IS\" [\"NOT\"] \"EMPTY\"
     *
     * @return \Doctrine\ORM\Query\AST\EmptyCollectionComparisonExpression
     */",
 "/**
     * CollectionMemberExpression ::= EntityExpression [\"NOT\"] \"MEMBER\" [\"OF\"] CollectionValuedPathExpression
     *
     * EntityExpression ::= SingleValuedAssociationPathExpression | SimpleEntityExpression
     * SimpleEntityExpression ::= IdentificationVariable | InputParameter
     *
     * @return \Doctrine\ORM\Query\AST\CollectionMemberExpression
     */",
 "/**
     * Literal ::= string | char | integer | float | boolean
     *
     * @return string
     */",
 "/**
     * InParameter ::= Literal | InputParameter
     *
     * @return string | \Doctrine\ORM\Query\AST\InputParameter
     */",
 "/**
     * InputParameter ::= PositionalParameter | NamedParameter
     *
     * @return \Doctrine\ORM\Query\AST\InputParameter
     */",
 "/**
     * ArithmeticExpression ::= SimpleArithmeticExpression | \"(\" Subselect \")\"
     *
     * @return \Doctrine\ORM\Query\AST\ArithmeticExpression
     */",
 "/**
     * SimpleArithmeticExpression ::= ArithmeticTerm {(\"+\" | \"-\") ArithmeticTerm}*
     *
     * @return \Doctrine\ORM\Query\AST\SimpleArithmeticExpression
     */",
 "/**
     * ArithmeticTerm ::= ArithmeticFactor {(\"*\" | \"/\") ArithmeticFactor}*
     *
     * @return \Doctrine\ORM\Query\AST\ArithmeticTerm
     */",
 "/**
     * ArithmeticFactor ::= [(\"+\" | \"-\")] ArithmeticPrimary
     *
     * @return \Doctrine\ORM\Query\AST\ArithmeticFactor
     */",
 "/**
     * ArithmeticPrimary ::= SingleValuedPathExpression | Literal | \"(\" SimpleArithmeticExpression \")\"
     *          | FunctionsReturningNumerics | AggregateExpression | FunctionsReturningStrings
     *          | FunctionsReturningDatetime | IdentificationVariable | ResultVariable 
     */",
 "/**
     * StringExpression ::= StringPrimary | \"(\" Subselect \")\"
     *
     * @return \Doctrine\ORM\Query\AST\StringPrimary |
     *         \Doctrine]ORM\Query\AST\Subselect
     */",
 "/**
     * StringPrimary ::= StateFieldPathExpression | string | InputParameter | FunctionsReturningStrings | AggregateExpression
     */",
 "/**
     * EntityExpression ::= SingleValuedAssociationPathExpression | SimpleEntityExpression
     *
     * @return \Doctrine\ORM\Query\AST\SingleValuedAssociationPathExpression |
     *         \Doctrine\ORM\Query\AST\SimpleEntityExpression
     */",
 "/**
     * SimpleEntityExpression ::= IdentificationVariable | InputParameter
     *
     * @return string | \Doctrine\ORM\Query\AST\InputParameter
     */",
 "/**
     * AggregateExpression ::=
     *  (\"AVG\" | \"MAX\" | \"MIN\" | \"SUM\") \"(\" [\"DISTINCT\"] StateFieldPathExpression \")\" |
     *  \"COUNT\" \"(\" [\"DISTINCT\"] (IdentificationVariable | SingleValuedPathExpression) \")\"
     *
     * @return \Doctrine\ORM\Query\AST\AggregateExpression
     */",
 "/**
     * QuantifiedExpression ::= (\"ALL\" | \"ANY\" | \"SOME\") \"(\" Subselect \")\"
     *
     * @return \Doctrine\ORM\Query\AST\QuantifiedExpression
     */",
 "/**
     * BetweenExpression ::= ArithmeticExpression [\"NOT\"] \"BETWEEN\" ArithmeticExpression \"AND\" ArithmeticExpression
     *
     * @return \Doctrine\ORM\Query\AST\BetweenExpression
     */",
 "/**
     * ComparisonExpression ::= ArithmeticExpression ComparisonOperator ( QuantifiedExpression | ArithmeticExpression )
     *
     * @return \Doctrine\ORM\Query\AST\ComparisonExpression
     */",
 "/**
     * InExpression ::= SingleValuedPathExpression [\"NOT\"] \"IN\" \"(\" (InParameter {\",\" InParameter}* | Subselect) \")\"
     *
     * @return \Doctrine\ORM\Query\AST\InExpression
     */",
 "/**
     * InstanceOfExpression ::= IdentificationVariable [\"NOT\"] \"INSTANCE\" [\"OF\"] (AbstractSchemaName | InputParameter)
     *
     * @return \Doctrine\ORM\Query\AST\InstanceOfExpression
     */",
 "/**
     * LikeExpression ::= StringExpression [\"NOT\"] \"LIKE\" (string | input_parameter) [\"ESCAPE\" char]
     *
     * @return \Doctrine\ORM\Query\AST\LikeExpression
     */",
 "/**
     * NullComparisonExpression ::= (SingleValuedPathExpression | InputParameter) \"IS\" [\"NOT\"] \"NULL\"
     *
     * @return \Doctrine\ORM\Query\AST\NullComparisonExpression
     */",
 "/**
     * ExistsExpression ::= [\"NOT\"] \"EXISTS\" \"(\" Subselect \")\"
     *
     * @return \Doctrine\ORM\Query\AST\ExistsExpression
     */",
 "/**
     * ComparisonOperator ::= \"=\" | \"<\" | \"<=\" | \"<>\" | \">\" | \">=\" | \"!=\"
     *
     * @return string
     */",
 "/**
     * FunctionDeclaration ::= FunctionsReturningStrings | FunctionsReturningNumerics | FunctionsReturningDatetime
     */",
 "/**
     * FunctionsReturningNumerics ::=
     *      \"LENGTH\" \"(\" StringPrimary \")\" |
     *      \"LOCATE\" \"(\" StringPrimary \",\" StringPrimary [\",\" SimpleArithmeticExpression]\")\" |
     *      \"ABS\" \"(\" SimpleArithmeticExpression \")\" |
     *      \"SQRT\" \"(\" SimpleArithmeticExpression \")\" |
     *      \"MOD\" \"(\" SimpleArithmeticExpression \",\" SimpleArithmeticExpression \")\" |
     *      \"SIZE\" \"(\" CollectionValuedPathExpression \")\"
     */",
 "/**
     * FunctionsReturningDateTime ::= \"CURRENT_DATE\" | \"CURRENT_TIME\" | \"CURRENT_TIMESTAMP\"
     */",
 "/**
     * FunctionsReturningStrings ::=
     *   \"CONCAT\" \"(\" StringPrimary \",\" StringPrimary \")\" |
     *   \"SUBSTRING\" \"(\" StringPrimary \",\" SimpleArithmeticExpression \",\" SimpleArithmeticExpression \")\" |
     *   \"TRIM\" \"(\" [[\"LEADING\" | \"TRAILING\" | \"BOTH\"] [char] \"FROM\"] StringPrimary \")\" |
     *   \"LOWER\" \"(\" StringPrimary \")\" |
     *   \"UPPER\" \"(\" StringPrimary \")\"
     */",
 "/**
 * An LL(*) recursive-descent parser for the context-free grammar of the Doctrine Query Language.
 * Parses a DQL query, reports any errors in it, and generates an AST.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Janne Vanhala <jpvanhal@cc.hut.fi>
 */",
 "/**
     * Check if the given word is a keyword of this dialect/vendor platform.
     * 
     * @param  string $word
     * @return bool 
     */",
 "/**
     * Name of this keyword list.
     * 
     * @return string
     */",
 "/**
 * Abstract interface for a SQL reserved keyword dictionary.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Wraps <tt>Statement</tt> and applies portability measures
     *
     * @param Doctrine\DBAL\Driver\Statement $stmt
     * @param Doctrine\DBAL\Connection $conn
     */",
 "/**
 * Portability Wrapper for a Statement
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Returns whether the error code indicates a failure
     *
     * @param  integer $errorCode The error code returned by StubIntl::getErrorCode()
     *
     * @return Boolean
     */",
 "/**
     * Returns the error code of the last operation
     *
     * Returns StubIntl::U_ZERO_ERROR if no error occurred.
     *
     * @return integer
     */",
 "/**
     * Returns the error message of the last operation
     *
     * Returns \"U_ZERO_ERROR\" if no error occurred.
     *
     * @return string
     */",
 "/**
     * Sets the current error code
     *
     * @param  integer $code  One of the error constants in this class
     *
     * @throws \InvalidArgumentException If the code is not one of the error constants in this class
     */",
 "/**
 * Provides fake static versions of the global functions in the intl extension
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * ServerBag is a container for HTTP headers from the $_SERVER variable.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 */",
 "/**
     * Sets the helper set associated with this helper.
     *
     * @param HelperSet $helperSet A HelperSet instance
     */",
 "/**
     * Gets the helper set associated with this helper.
     *
     * @return HelperSet A HelperSet instance
     */",
 "/**
 * Helper is the base class for all helper classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets the source code of a template, given its name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The template source code
     *
     * @throws Twig_Error_Loader When $name is not found
     */",
 "/**
     * Gets the cache key to use for the cache for a given template name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The cache key
     *
     * @throws Twig_Error_Loader When $name is not found
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param string    $name The template name
     * @param timestamp $time The last modification time of the cached template
     *
     * @return Boolean true if the template is fresh, false otherwise
     *
     * @throws Twig_Error_Loader When $name is not found
     */",
 "/**
 * Interface all loaders must implement.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param CoreAssetsHelper $assetsHelper The assets helper
     * @param AssetFactory     $factory      The asset factory
     */",
 "/**
 * The static \"assetic\" templating helper.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Expression class for building DQL Order By parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param AssetFactory $factory The asset factory
     * @param array        $loaders An array of loaders indexed by alias
     */",
 "/**
     * Adds a loader to the asset manager.
     *
     * @param string                 $alias  An alias for the loader
     * @param FormulaLoaderInterface $loader A loader
     */",
 "/**
     * Adds a resource to the asset manager.
     *
     * @param ResourceInterface $resource A resource
     * @param string            $loader   The loader alias for this resource
     */",
 "/**
     * Returns an array of resources.
     *
     * @return array An array of resources
     */",
 "/**
     * Checks for an asset formula.
     *
     * @param string $name An asset name
     *
     * @return Boolean If there is a formula
     */",
 "/**
     * Returns an asset\'s formula.
     *
     * @param string $name An asset name
     *
     * @return array The formula
     *
     * @throws InvalidArgumentException If there is no formula by that name
     */",
 "/**
     * Sets a formula on the asset manager.
     *
     * @param string $name    An asset name
     * @param array  $formula A formula
     */",
 "/**
     * Loads formulae from resources.
     *
     * @throws LogicException If a resource has been added to an invalid loader
     */",
 "/**
 * A lazy asset manager is a composition of a factory and many formula loaders.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Gets the configured namespaces.
     *
     * @return array A hash with namespaces as keys and directories as values
     */",
 "/**
     * Gets the configured class prefixes.
     *
     * @return array A hash with class prefixes as keys and directories as values
     */",
 "/**
     * Gets the directory(ies) to use as a fallback for namespaces.
     *
     * @return array An array of directories
     */",
 "/**
     * Gets the directory(ies) to use as a fallback for class prefixes.
     *
     * @return array An array of directories
     */",
 "/**
     * Registers the directory to use as a fallback for namespaces.
     *
     * @param array $dirs An array of directories
     *
     * @api
     */",
 "/**
     * Registers the directory to use as a fallback for class prefixes.
     *
     * @param array $dirs An array of directories
     *
     * @api
     */",
 "/**
     * Registers an array of namespaces
     *
     * @param array $namespaces An array of namespaces (namespaces as keys and locations as values)
     *
     * @api
     */",
 "/**
     * Registers a namespace.
     *
     * @param string       $namespace The namespace
     * @param array|string $paths     The location(s) of the namespace
     *
     * @api
     */",
 "/**
     * Registers an array of classes using the PEAR naming convention.
     *
     * @param array $classes An array of classes (prefixes as keys and locations as values)
     *
     * @api
     */",
 "/**
     * Registers a set of classes using the PEAR naming convention.
     *
     * @param string       $prefix  The classes prefix
     * @param array|string $paths   The location(s) of the classes
     *
     * @api
     */",
 "/**
     * Registers this instance as an autoloader.
     *
     * @param Boolean $prepend Whether to prepend the autoloader or not
     *
     * @api
     */",
 "/**
     * Loads the given class or interface.
     *
     * @param string $class The name of the class
     */",
 "/**
*Findsthepathtothefilewheretheclassisdefined.
*
*@paramstring$classThenameoftheclass
*
*@returnstring|nullThepath,iffound
*/",
 "/**
*UniversalClassLoaderimplementsa\"universal\" autoloader for PHP 5.3.
 *
 * It is able to load classes that use either:
 *
 *  * The technical interoperability standards for PHP 5.3 namespaces and
 *    class names (https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md);
 *
 *  * The PEAR naming convention for classes (http://pear.php.net/).
 *
 * Classes from a sub-namespace or a sub-hierarchy of PEAR classes can be
 * looked for in a list of locations to ease the vendoring of a sub-set of
 * classes for large projects.
 *
 * Example usage:
 *
 *     $loader = new UniversalClassLoader();
 *
 *     // register classes with namespaces
 *     $loader->registerNamespaces(array(
 *         \'Symfony\Component\' => __DIR__.\'/component\',
 *         \'Symfony\'           => __DIR__.\'/framework\',
 *         \'Sensio\'            => array(__DIR__.\'/src\', __DIR__.\'/vendor\'),
 *     ));
 *
 *     // register a library using the PEAR naming convention
 *     $loader->registerPrefixes(array(
 *         \'Swift_\' => __DIR__.\'/Swift\',
 *     ));
 *
 *     // activate the autoloader
 *     $loader->register();
 *
 * In this example, if you try to use a class in the Symfony\Component
 * namespace or one of its children (Symfony\Component\Console for instance),
 * the autoloader will first look for the class under the component/
 * directory, and it will then fallback to the framework/ directory if not
 * found before giving up.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns the asset package version.
     *
     * @return string The version string
     */",
 "/**
     * Returns an absolute or root-relative public path.
     *
     * @param string $path A path
     *
     * @return string The public path
     */",
 "/**
 * Asset package interface.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param array  $items  The items in the expression.
     * @param string $prefix Optional prefix for the expression.
     */",
 "/**
     * Gets a string representation of this |\'d expression.
     *
     * @return string
     */",
 "/**
 * XPathExprOr represents XPath |\'d expressions.
 *
 * Note that unfortunately it isn\'t the union, it\'s the sum, so duplicate elements will appear.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Guesses the mime type of the file with the given path.
     *
     * @param  string $path   The path to the file
     *
     * @return string         The mime type or NULL, if none could be guessed
     *
     * @throws FileNotFoundException  If the file does not exist
     * @throws AccessDeniedException  If the file could not be read
     */",
 "/**
 * Guesses the mime type of a file
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * @param AbstractPlatform $platform
     */",
 "/**
     * @param Schema $schema
     */",
 "/**
     * Generate DDL Statements to create the accepted table with all its dependencies.
     *
     * @param Table $table
     */",
 "/**
     * @param Table $localTable
     * @param ForeignKeyConstraint $fkConstraint
     */",
 "/**
     * @param Table $table
     * @param Index $index
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
     * @return array
     */",
 "/**
     * Get all queries collected so far.
     *
     * @return array
     */",
 "/**
 * Marker interface for contraints
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param NodeInterface $selector The NodeInterface object
     * @param string $id The ID
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * HashNode represents a \"selector#id\" node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Normalizes an object into a set of arrays/scalars
     *
     * @param object $object object to normalize
     * @param string $format format name, present to give the option to normalizers to act differently based on formats
     * @return array|scalar
     */",
 "/**
     * Denormalizes data back into an object of the given class
     *
     * @param mixed $data data to restore
     * @param string $class the expected class to instantiate
     * @param string $format format name, present to give the option to normalizers to act differently based on formats
     * @return object
     */",
 "/**
     * Check if normalizer cache or normalizers supports provided object, which will then be cached
     *
     * @param object $object Object to test for normalization support
     * @param string $format Format name, needed for normalizers to pivot on
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Serializer serializes and deserializes data
 *
 * objects are turned into arrays by normalizers
 * arrays are turned into various output formats by encoders
 *
 * $serializer->serialize($obj, \'xml\')
 * $serializer->decode($data, \'xml\')
 * $serializer->denormalize($data, \'Class\', \'xml\')
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 * @author Lukas Kahwe Smith <smith@pooteeweet.org>
 */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Initializes a new <tt>QueryBuilder</tt> that uses the given <tt>EntityManager</tt>.
     * 
     * @param EntityManager $em The EntityManager to use.
     */",
 "/**
     * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
     * This producer method is intended for convenient inline usage. Example:
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->where($qb->expr()->eq(\'u.id\', 1));
     * </code>
     *
     * For more complex expression construction, consider storing the expression
     * builder object in a local variable.
     *
     * @return Query\Expr
     */",
 "/**
     * Get the type of the currently built query.
     *
     * @return integer
     */",
 "/**
     * Get the associated EntityManager for this query builder.
     *
     * @return EntityManager
     */",
 "/**
     * Get the state of this query builder instance.
     *
     * @return integer Either QueryBuilder::STATE_DIRTY or QueryBuilder::STATE_CLEAN.
     */",
 "/**
     * Get the complete DQL string formed by the current specifications of this QueryBuilder.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *     echo $qb->getDql(); // SELECT u FROM User u
     * </code>
     *
     * @return string The DQL query string.
     */",
 "/**
     * Constructs a Query instance from the current specifications of the builder.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\');
     *     $q = $qb->getQuery();
     *     $results = $q->execute();
     * </code>
     *
     * @return Query
     */",
 "/**
     * Gets the FIRST root alias of the query. This is the first entity alias involved
     * in the construction of the query.
     *
     * <code>
     * $qb = $em->createQueryBuilder()
     * ->select(\'u\')
     * ->from(\'User\', \'u\');
     *
     * echo $qb->getRootAlias(); // u
     * </code>
     *
     * @deprecated Please use $qb->getRootAliases() instead.
     * @return string $rootAlias
     */",
 "/**
     * Gets the root aliases of the query. This is the entity aliases involved
     * in the construction of the query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\');
     *
     *     $qb->getRootAliases(); // array(\'u\')
     * </code>
     *
     * @return array $rootAliases
     */",
 "/**
     * Gets the root entities of the query. This is the entity aliases involved
     * in the construction of the query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\');
     *
     *     $qb->getRootEntities(); // array(\'User\')
     * </code>
     *
     * @return array $rootEntities
     */",
 "/**
     * Sets a query parameter for the query being constructed.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->where(\'u.id = :user_id\')
     *         ->setParameter(\':user_id\', 1);
     * </code>
     *
     * @param string|integer $key The parameter position or name.
     * @param mixed $value The parameter value.
     * @param string|null $type PDO::PARAM_* or \Doctrine\DBAL\Types\Type::* constant
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Sets a collection of query parameters for the query being constructed.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->where(\'u.id = :user_id1 OR u.id = :user_id2\')
     *         ->setParameters(array(
     *             \'user_id1\' => 1,
     *             \'user_id2\' => 2
     *         ));
     * </code>
     *
     * @param array $params The query parameters to set.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets all defined query parameters for the query being constructed.
     *
     * @return array The currently defined query parameters.
     */",
 "/**
     * Gets a (previously set) query parameter of the query being constructed.
     * 
     * @param mixed $key The key (index or name) of the bound parameter.
     * @return mixed The value of the bound parameter.
     */",
 "/**
     * Sets the position of the first result to retrieve (the \"offset\").
     *
     * @param integer $firstResult The first result to return.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets the position of the first result the query object was set to retrieve (the \"offset\").
     * Returns NULL if {@link setFirstResult} was not applied to this QueryBuilder.
     * 
     * @return integer The position of the first result.
     */",
 "/**
     * Sets the maximum number of results to retrieve (the \"limit\").
     * 
     * @param integer $maxResults The maximum number of results to retrieve.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets the maximum number of results the query object was set to retrieve (the \"limit\").
     * Returns NULL if {@link setMaxResults} was not applied to this query builder.
     * 
     * @return integer Maximum number of results.
     */",
 "/**
     * Either appends to or replaces a single, generic query part.
     *
     * The available parts are: \'select\', \'from\', \'join\', \'set\', \'where\',
     * \'groupBy\', \'having\' and \'orderBy\'.
     *
     * @param string $dqlPartName 
     * @param string $dqlPart 
     * @param string $append 
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies an item that is to be returned in the query result.
     * Replaces any previously specified selections, if any.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\', \'p\')
     *         ->from(\'User\', \'u\')
     *         ->leftJoin(\'u.Phonenumbers\', \'p\');
     * </code>
     *
     * @param mixed $select The selection expressions.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Add a DISTINCT flag to this query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->distinct()
     *         ->from(\'User\', \'u\');
     * </code>
     *
     * @param bool
     * @return QueryBuilder
     */",
 "/**
     * Adds an item that is to be returned in the query result.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->addSelect(\'p\')
     *         ->from(\'User\', \'u\')
     *         ->leftJoin(\'u.Phonenumbers\', \'p\');
     * </code>
     *
     * @param mixed $select The selection expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Turns the query being built into a bulk delete query that ranges over
     * a certain entity type.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->delete(\'User\', \'u\')
     *         ->where(\'u.id = :user_id\');
     *         ->setParameter(\':user_id\', 1);
     * </code>
     *
     * @param string $delete The class/type whose instances are subject to the deletion.
     * @param string $alias The class/type alias used in the constructed query.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Turns the query being built into a bulk update query that ranges over
     * a certain entity type.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->update(\'User\', \'u\')
     *         ->set(\'u.password\', md5(\'password\'))
     *         ->where(\'u.id = ?\');
     * </code>
     *
     * @param string $update The class/type whose instances are subject to the update.
     * @param string $alias The class/type alias used in the constructed query.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Create and add a query root corresponding to the entity identified by the given alias,
     * forming a cartesian product with any existing query roots.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     * </code>
     *
     * @param string $from   The class name.
     * @param string $alias  The alias of the class.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a join over an entity association to the query.
     *
     * The entities in the joined association will be fetched as part of the query
     * result if the alias used for the joined association is placed in the select
     * expressions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->join(\'u.Phonenumbers\', \'p\', Expr\Join::WITH, \'p.is_primary = 1\');
     * </code>
     *
     * @param string $join The relationship to join
     * @param string $alias The alias of the join
     * @param string $conditionType The condition type constant. Either ON or WITH.
     * @param string $condition The condition for the join
     * @param string $indexBy The index for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a join over an entity association to the query.
     * 
     * The entities in the joined association will be fetched as part of the query
     * result if the alias used for the joined association is placed in the select
     * expressions.
     *
     *     [php]
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->innerJoin(\'u.Phonenumbers\', \'p\', Expr\Join::WITH, \'p.is_primary = 1\');
     *
     * @param string $join The relationship to join
     * @param string $alias The alias of the join
     * @param string $conditionType The condition type constant. Either ON or WITH.
     * @param string $condition The condition for the join
     * @param string $indexBy The index for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a left join over an entity association to the query.
     *
     * The entities in the joined association will be fetched as part of the query
     * result if the alias used for the joined association is placed in the select
     * expressions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->leftJoin(\'u.Phonenumbers\', \'p\', Expr\Join::WITH, \'p.is_primary = 1\');
     * </code>
     *
     * @param string $join The relationship to join
     * @param string $alias The alias of the join
     * @param string $conditionType The condition type constant. Either ON or WITH.
     * @param string $condition The condition for the join
     * @param string $indexBy The index for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Sets a new value for a field in a bulk update query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->update(\'User\', \'u\')
     *         ->set(\'u.password\', md5(\'password\'))
     *         ->where(\'u.id = ?\');
     * </code>
     *
     * @param string $key The key/field to set.
     * @param string $value The value, expression, placeholder, etc.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies one or more restrictions to the query result.
     * Replaces any previously specified restrictions, if any.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->where(\'u.id = ?\');
     *
     *     // You can optionally programatically build and/or expressions
     *     $qb = $em->createQueryBuilder();
     *
     *     $or = $qb->expr()->orx();
     *     $or->add($qb->expr()->eq(\'u.id\', 1));
     *     $or->add($qb->expr()->eq(\'u.id\', 2));
     *
     *     $qb->update(\'User\', \'u\')
     *         ->set(\'u.password\', md5(\'password\'))
     *         ->where($or);
     * </code>
     *
     * @param mixed $predicates The restriction predicates.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds one or more restrictions to the query results, forming a logical
     * conjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->where(\'u.username LIKE ?\')
     *         ->andWhere(\'u.is_active = 1\');
     * </code>
     *
     * @param mixed $where The query restrictions.
     * @return QueryBuilder This QueryBuilder instance.
     * @see where()
     */",
 "/**
     * Adds one or more restrictions to the query results, forming a logical
     * disjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->where(\'u.id = 1\')
     *         ->orWhere(\'u.id = 2\');
     * </code>
     *
     * @param mixed $where The WHERE statement
     * @return QueryBuilder $qb
     * @see where()
     */",
 "/**
     * Specifies a grouping over the results of the query.
     * Replaces any previously specified groupings, if any.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->groupBy(\'u.id\');
     * </code>
     *
     * @param string $groupBy The grouping expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a grouping expression to the query.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *         ->groupBy(\'u.lastLogin\');
     *         ->addGroupBy(\'u.createdAt\')
     * </code>
     *
     * @param string $groupBy The grouping expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies a restriction over the groups of the query.
     * Replaces any previous having restrictions, if any.
     *
     * @param mixed $having The restriction over the groups.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a restriction over the groups of the query, forming a logical
     * conjunction with any existing having restrictions.
     *
     * @param mixed $having The restriction to append.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a restriction over the groups of the query, forming a logical
     * disjunction with any existing having restrictions.
     *
     * @param mixed $having The restriction to add.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies an ordering for the query results.
     * Replaces any previously specified orderings, if any.
     *
     * @param string $sort The ordering expression.
     * @param string $order The ordering direction.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds an ordering to the query results.
     *
     * @param string $sort The ordering expression.
     * @param string $order The ordering direction.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Get a query part by its name.
     *
     * @param string $queryPartName
     * @return mixed $queryPart
     * @todo Rename: getQueryPart (or remove?)
     */",
 "/**
     * Get all query parts.
     *
     * @return array $dqlParts
     * @todo Rename: getQueryParts (or remove?)
     */",
 "/**
     * Reset DQL parts
     *
     * @param array $parts
     * @return QueryBuilder
     */",
 "/**
     * Reset single DQL part
     *
     * @param string $part
     * @return QueryBuilder;
     */",
 "/**
     * Gets a string representation of this QueryBuilder which corresponds to
     * the final DQL query being constructed.
     *
     * @return string The string representation of this QueryBuilder.
     */",
 "/**
     * Deep clone of all expression objects in the DQL parts.
     *
     * @return void
     */",
 "/**
 * This class is responsible for building DQL query strings via an object oriented
 * PHP interface.
 *
 * @since 2.0
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Writes the record down to the log of the implementing handler
     *
     * @param array $record
     * @return void
     */",
 "/**
     * Processes a record.
     *
     * @param array $record
     * @return array
     */",
 "/**
 * Base Handler class providing the Handler structure
 *
 * Classes extending it should (in most cases) only implement write($record)
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Loads the Monolog configuration.
     *
     * @param array            $configs   An array of configuration settings
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
 * MonologExtension is an extension for the Monolog library.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
 * Doctrine\DBAL\ConnectionException
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.0
 * @version     $Revision: 4628 $
 * @author      Jonathan H. Wage <jonwage@gmail.com
 */",
 "/**
 * Assetic node.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Initializes a new instance of a class derived from AbstractCollectionPersister.
     *
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Deletes the persistent state represented by the given collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL statement for deleting the given collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to delete
     * the given collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Updates the given collection, synchronizing it\'s state with the database
     * by inserting, updating and deleting individual elements.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL statement used for deleting a row from the collection.
     * 
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to delete the given
     * element from the given collection.
     *
     * @param PersistentCollection $coll
     * @param mixed $element
     */",
 "/**
     * Gets the SQL statement used for updating a row in the collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL statement used for inserting a row in the collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to insert the given
     * element of the given collection into the database.
     *
     * @param PersistentCollection $coll
     * @param mixed $element
     */",
 "/**
 * Base class for all collection persisters.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string       $basePath      The base path
     * @param string|array $baseUrls      Base asset URLs
     * @param string       $version       The asset version
     * @param string       $format        The version format
     * @param array        $namedPackages Additional packages
     */",
 "/**
 * AssetsHelper helps manage asset URLs.
 *
 * Usage:
 *
 * <code>
 *   <img src=\"<?php echo $view[\'assets\']->getUrl(\'foo.png\') ?>\" />
 * </code>
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Represents a body node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * A Twig template resource.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Returns the authentication listeners, and the exception listener to use
     * for the given request.
     *
     * If there are no authentication listeners, the first inner are must be
     * empty.
     *
     * If there is no exception listener, the second element of the outer array
     * must be null.
     *
     * @param Request $request
     *
     * @return array of the format array(array(AuthenticationListener), ExceptionListener)
     */",
 "/**
 * This interface must be implemented by firewall maps.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for day format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to clear the query cache of the various cache drivers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor of Twig Extension to provide functions for code formatting
     *
     * @param ContainerInterface $container A ContainerInterface instance
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Twig extension for Symfony code helper
 *
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * This is a wrapper around the actual firewall configuration which allows us
 * to lazy load the context for one specific firewall only when we need it.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */",
 "/**
     * Returns the parameters.
     *
     * @return array An array of parameters
     *
     * @api
     */",
 "/**
     * Returns the parameter keys.
     *
     * @return array An array of parameter keys
     *
     * @api
     */",
 "/**
     * Replaces the current parameters by a new set.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */",
 "/**
     * Adds parameters.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */",
 "/**
     * Returns a parameter by name.
     *
     * @param string  $path    The key
     * @param mixed   $default The default value if the parameter key does not exist
     * @param boolean $deep If true, a path like foo[bar] will find deeper items
     *
     * @api
     */",
 "/**
     * Sets a parameter by name.
     *
     * @param string $key   The key
     * @param mixed  $value The value
     *
     * @api
     */",
 "/**
     * Returns true if the parameter is defined.
     *
     * @param string $key The key
     *
     * @return Boolean true if the parameter exists, false otherwise
     *
     * @api
     */",
 "/**
     * Removes a parameter.
     *
     * @param string $key The key
     *
     * @api
     */",
 "/**
     * Returns the alphabetic characters of the parameter value.
     *
     * @param string  $key     The parameter key
     * @param mixed   $default The default value if the parameter key does not exist
     * @param boolean $deep If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */",
 "/**
     * Returns the alphabetic characters and digits of the parameter value.
     *
     * @param string  $key     The parameter key
     * @param mixed   $default The default value if the parameter key does not exist
     * @param boolean $deep If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */",
 "/**
     * Returns the digits of the parameter value.
     *
     * @param string  $key     The parameter key
     * @param mixed   $default The default value if the parameter key does not exist
     * @param boolean $deep If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */",
 "/**
     * Returns the parameter value converted to integer.
     *
     * @param string  $key     The parameter key
     * @param mixed   $default The default value if the parameter key does not exist
     * @param boolean $deep If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */",
 "/**
 * ParameterBag is a container for key/value pairs.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Expression class for building DQL and parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param string $value
     */",
 "/**
 * Description of InputParameter
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a flush node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to ensure that Doctrine is properly configured for a production environment.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Run console with the given helperset.
     * 
     * @param \Symfony\Component\Console\Helper\HelperSet $helperSet
     * @return void
     */",
 "/**
     * @param Application $cli
     */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param \DOMNode $node       A \DOMNode instance
     * @param string   $currentUri The URI of the page where the form is embedded
     * @param string   $method     The method to use for the link (if null, it defaults to the method defined by the form)
     *
     * @throws \LogicException if the node is not a button inside a form tag
     *
     * @api
     */",
 "/**
     * Gets the form node associated with this form.
     *
     * @return \DOMNode A \DOMNode instance
     */",
 "/**
     * Sets the value of the fields.
     *
     * @param array $values An array of field values
     *
     * @api
     */",
 "/**
     * Gets the field values.
     *
     * The returned array does not include file fields (@see getFiles).
     *
     * @return array An array of field values.
     *
     * @api
     */",
 "/**
     * Gets the file field values.
     *
     * @return array An array of file field values.
     *
     * @api
     */",
 "/**
     * Gets the field values as PHP.
     *
     * This method converts fields with th array notation
     * (like foo[bar] to arrays) like PHP does.
     *
     * @return array An array of field values.
     *
     * @api
     */",
 "/**
     * Gets the file field values as PHP.
     *
     * This method converts fields with th array notation
     * (like foo[bar] to arrays) like PHP does.
     *
     * @return array An array of field values.
     *
     * @api
     */",
 "/**
     * Gets the URI of the form.
     *
     * The returned URI is not the same as the form \"action\" attribute.
     * This method merges the value if the method is GET to mimics
     * browser behavior.
     *
     * @return string The URI
     *
     * @api
     */",
 "/**
     * Gets the form method.
     *
     * If no method is defined in the form, GET is returned.
     *
     * @return string The method
     *
     * @api
     */",
 "/**
     * Returns true if the named field exists.
     *
     * @param string $name The field name
     *
     * @return Boolean true if the field exists, false otherwise
     *
     * @api
     */",
 "/**
     * Removes a field from the form.
     *
     * @param string $name The field name
     *
     * @api
     */",
 "/**
     * Gets a named field.
     *
     * @param string $name The field name
     *
     * @return FormField The field instance
     *
     * @throws \InvalidArgumentException When field is not present in this form
     *
     * @api
     */",
 "/**
     * Sets a named field.
     *
     * @param Field\FormField $field The field
     *
     * @return FormField The field instance
     *
     * @api
     */",
 "/**
     * Gets all fields.
     *
     * @return array An array of fields
     *
     * @api
     */",
 "/**
     * Returns true if the named field exists.
     *
     * @param string $name The field name
     *
     * @return Boolean true if the field exists, false otherwise
     */",
 "/**
     * Gets the value of a field.
     *
     * @param string $name The field name
     *
     * @return FormField The associated Field instance
     *
     * @throws \InvalidArgumentException if the field does not exist
     */",
 "/**
     * Sets the value of a field.
     *
     * @param string       $name  The field name
     * @param string|array $value The value of the field
     *
     * @throws \InvalidArgumentException if the field does not exist
     */",
 "/**
     * Removes a field from the form.
     *
     * @param string $name The field name
     */",
 "/**
 * Form represents an HTML form.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Checks that the current collection contains the supplied filter.
     *
     * If the supplied filter is another filter collection, each of its
     * filters will be checked.
     */",
 "/**
 * A collection of filters.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $engines An array of EngineInterface instances to add
     *
     * @api
     */",
 "/**
     * Renders a template.
     *
     * @param mixed $name       A template name or a TemplateReferenceInterface instance
     * @param array $parameters An array of parameters to pass to the template
     *
     * @return string The evaluated template as a string
     *
     * @throws \InvalidArgumentException if the template does not exist
     * @throws \RuntimeException         if the template cannot be rendered
     *
     * @api
     */",
 "/**
     * Returns true if the template exists.
     *
     * @param mixed $name A template name or a TemplateReferenceInterface instance
     *
     * @return Boolean true if the template exists, false otherwise
     *
     * @api
     */",
 "/**
     * Adds an engine.
     *
     * @param EngineInterface $engine An EngineInterface instance
     *
     * @api
     */",
 "/**
     * Returns true if this class is able to render the given template.
     *
     * @param mixed $name A template name or a TemplateReferenceInterface instance
     *
     * @return Boolean true if this class supports the given template, false otherwise
     *
     * @api
     */",
 "/**
     * Get an engine able to render the given template.
     *
     * @param mixed $name A template name or a TemplateReferenceInterface instance
     *
     * @return EngineInterface The engine
     *
     * @throws \RuntimeException if no engine able to work with the template is found
     *
     * @api
     */",
 "/**
 * DelegatingEngine selects an engine for a given template.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param RegistryInterface $registry A RegistryInterface instance
     */",
 "/**
     * Gets the metadata of all classes of a bundle.
     *
     * @param BundleInterface $bundle A BundleInterface instance
     *
     * @return ClassMetadataCollection A ClassMetadataCollection instance
     */",
 "/**
     * Gets the metadata of a class.
     *
     * @param string $class A class name
     * @param string $path  The path where the class is stored (if known)
     *
     * @return ClassMetadataCollection A ClassMetadataCollection instance
     */",
 "/**
     * Gets the metadata of all classes of a namespace.
     *
     * @param string $namespace A namespace name
     * @param string $path      The path where the class is stored (if known)
     *
     * @return ClassMetadataCollection A ClassMetadataCollection instance
     */",
 "/**
 * This class provides methods to access Doctrine entity class metadata for a
 * given bundle, namespace or entity class.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $template The template name
     *
     * @api
     */",
 "/**
     * Returns the object string representation.
     *
     * @return string The template name
     */",
 "/**
     * Returns the content of the template.
     *
     * @return string The template content
     *
     * @api
     */",
 "/**
 * Storage is the base class for all storage classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Loads an XML file.
     *
     * @param mixed  $file The resource
     * @param string $type The resource type
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean true if this class supports the given resource, false otherwise
     */",
 "/**
     * Parses parameters
     *
     * @param SimpleXMLElement $xml
     * @param string $file
     *
     * @return void
     */",
 "/**
     * Parses imports
     *
     * @param SimpleXMLElement $xml
     * @param string $file
     *
     * @return void
     */",
 "/**
     * Parses multiple definitions
     *
     * @param SimpleXMLElement $xml
     * @param string $file
     *
     * @return void
     */",
 "/**
     * Parses an individual Definition
     *
     * @param string $id
     * @param SimpleXMLElement $service
     * @param string $file
     *
     * @return void
     */",
 "/**
     * Parses a XML file.
     *
     * @param string $file Path to a file
     *
     * @throws \InvalidArgumentException When loading of XML file returns error
     */",
 "/**
     * Processes anonymous services
     *
     * @param SimpleXMLElement $xml
     * @param string $file
     *
     * @return array An array of anonymous services
     */",
 "/**
     * Validates an XML document.
     *
     * @param DOMDocument $dom
     * @param string $file
     */",
 "/**
     * Validates a documents XML schema.
     *
     * @param \DOMDocument $dom
     * @param string $file
     *
     * @return void
     *
     * @throws \RuntimeException         When extension references a non-existent XSD file
     * @throws \InvalidArgumentException When xml doesn\'t validate its xsd schema
     */",
 "/**
     * Validates an extension.
     *
     * @param \DOMDocument $dom
     * @param string $file
     *
     * @return void
     *
     * @throws  \InvalidArgumentException When non valid tag are found or no extension are found
     */",
 "/**
     * Returns an array of XML errors.
     *
     * @return array
     */",
 "/**
     * Loads from an extension.
     *
     * @param SimpleXMLElement $xml
     *
     * @return void
     */",
 "/**
     * Converts a \DomElement object to a PHP array.
     *
     * The following rules applies during the conversion:
     *
     *  * Each tag is converted to a key value or an array
     *    if there is more than one \"value\"
     *
     *  * The content of a tag is set under a \"value\" key (<foo>bar</foo>)
     *    if the tag also has some nested tags
     *
     *  * The attributes are converted to keys (<foo foo=\"bar\"/>)
     *
     *  * The nested-tags are converted to keys (<foo><foo>bar</foo></foo>)
     *
     * @param \DomElement $element A \DomElement instance
     *
     * @return array A PHP array
     */",
 "/**
 * XmlFileLoader loads XML files service definitions.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Reads $length bytes from the stream into a string and moves the pointer
   * through the stream by $length. If less bytes exist than are requested the
   * remaining bytes are given instead. If no bytes are remaining at all, boolean
   * false is returned.
   * @param int $length
   * @return string
   * @throws Swift_IoException
   */",
 "/**
   * Move the internal read pointer to $byteOffset in the stream.
   * @param int $byteOffset
   * @return boolean
   * @throws Swift_IoException
   */",
 "/**
 * An abstract means of reading data.
 * Classes implementing this interface may use a subsystem which requires less
 * memory than working with large strings of data.
 * @package Swift
 * @subpackage ByteStream
 * @author Chris Corbyn
 */",
 "/**
 * Represents a template test as a Node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new ParameterizedHeader with $name.
   * @param string $name
   * @param Swift_Mime_HeaderEncoder $encoder
   * @param Swift_Encoder $paramEncoder, optional
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Get the type of Header that this instance represents.
   * @return int
   * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   * @see TYPE_DATE, TYPE_ID, TYPE_PATH
   */",
 "/**
   * Set the character set used in this Header.
   * @param string $charset
   */",
 "/**
   * Set the value of $parameter.
   * @param string $parameter
   * @param string $value
   */",
 "/**
   * Get the value of $parameter.
   * @return string
   */",
 "/**
   * Set an associative array of parameter names mapped to values.
   * @param string[]
   */",
 "/**
   * Returns an associative array of parameter names mapped to values.
   * @return string[]
   */",
 "/**
   * Get the value of this header prepared for rendering.
   * @return string
   */",
 "/**
   * Generate a list of all tokens in the final header.
   * This doesn\'t need to be overridden in theory, but it is for implementation
   * reasons to prevent potential breakage of attributes.
   * @return string[]
   * @access protected
   */",
 "/**
   * Render a RFC 2047 compliant header parameter from the $name and $value.
   * @param string $name
   * @param string $value
   * @return string
   * @access private
   */",
 "/**
   * Returns the parameter value from the \"=\" and beyond.
   * @param string $value to append
   * @param boolean $encoded
   * @param boolean $firstLine
   * @return string
   * @access private
   */",
 "/**
 * An abstract base MIME Header.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Constructor
     *
     * @param  string  $locale   The locale code
     * @param  int     $datetype Type of date formatting, one of the format type constants
     * @param  int     $timetype Type of time formatting, one of the format type constants
     * @param  string  $timezone Timezone identifier
     * @param  int     $calendar Calendar to use for formatting or parsing; default is Gregorian.
     *                           One of the calendar constants.
     * @param  string  $pattern  Optional pattern to use when formatting
     *
     * @see    http://www.php.net/manual/en/intldateformatter.create.php
     * @see    http://userguide.icu-project.org/formatparse/datetime
     *
     * @throws MethodArgumentValueNotImplementedException  When $locale different than \'en\' is passed
     * @throws MethodArgumentValueNotImplementedException  When $calendar different than GREGORIAN is passed
     */",
 "/**
     * Static constructor
     *
     * @param  string  $locale   The locale code
     * @param  int     $datetype Type of date formatting, one of the format type constants
     * @param  int     $timetype Type of time formatting, one of the format type constants
     * @param  string  $timezone Timezone identifier
     * @param  int     $calendar Calendar to use for formatting or parsing; default is Gregorian.
     *                           One of the calendar constants.
     * @param  string  $pattern  Optional pattern to use when formatting
     *
     * @see    http://www.php.net/manual/en/intldateformatter.create.php
     * @see    http://userguide.icu-project.org/formatparse/datetime
     *
     * @throws MethodArgumentValueNotImplementedException  When $locale different than \'en\' is passed
     */",
 "/**
     * Format the date/time value (timestamp) as a string
     *
     * @param  mixed         $timestamp   Unix timestamp to format
     *
     * @return string                     The formatted value
     *
     * @see    http://www.php.net/manual/en/intldateformatter.format.php
     *
     * @throws NotImplementedException    If one of the formatting characters is not implemented
     */",
 "/**
     * Returns the formatter\'s calendar
     *
     * @return int   The calendar being used by the formatter
     *
     * @see    http://www.php.net/manual/en/intldateformatter.getcalendar.php
     */",
 "/**
     * Returns the formatter\'s datetype
     *
     * @return int   The current value of the formatter
     *
     * @see    http://www.php.net/manual/en/intldateformatter.getdatetype.php
     */",
 "/**
     * Returns formatter\'s last error code. Always returns the U_ZERO_ERROR class constant value
     *
     * @return int   The error code from last formatter call
     *
     * @see    http://www.php.net/manual/en/intldateformatter.geterrorcode.php
     */",
 "/**
     * Returns formatter\'s last error message. Always returns the U_ZERO_ERROR_MESSAGE class constant value
     *
     * @return string  The error message from last formatter call
     *
     * @see    http://www.php.net/manual/en/intldateformatter.geterrormessage.php
     */",
 "/**
     * Returns the formatter\'s locale
     *
     * @param  int      $type   The locale name type to return between valid or actual (StubLocale::VALID_LOCALE or StubLocale::ACTUAL_LOCALE, respectively)
     *
     * @return string           The locale name used to create the formatter
     *
     * @see    http://www.php.net/manual/en/intldateformatter.getlocale.php
     */",
 "/**
     * Returns the formatter\'s pattern
     *
     * @return string   The pattern string used by the formatter
     *
     * @see    http://www.php.net/manual/en/intldateformatter.getpattern.php
     */",
 "/**
     * Returns the formatter\'s time type
     *
     * @return string   The time type used by the formatter
     *
     * @see    http://www.php.net/manual/en/intldateformatter.gettimetype.php
     */",
 "/**
     * Returns the formatter\'s timezone identifier
     *
     * @return string   The timezone identifier used by the formatter
     *
     * @see    http://www.php.net/manual/en/intldateformatter.gettimezoneid.php
     */",
 "/**
     * Returns whether the formatter is lenient
     *
     * @return string   The timezone identifier used by the formatter
     *
     * @see    http://www.php.net/manual/en/intldateformatter.islenient.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Parse string to a field-based time value
     *
     * @param  string   $value      String to convert to a time value
     * @param  int      $position   Position at which to start the parsing in $value (zero-based).
     *                              If no error occurs before $value is consumed, $parse_pos will
     *                              contain -1 otherwise it will contain the position at which parsing
     *                              ended. If $parse_pos > strlen($value), the parse fails immediately.
     *
     * @return string               Localtime compatible array of integers: contains 24 hour clock value in tm_hour field
     *
     * @see    http://www.php.net/manual/en/intldateformatter.localtime.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Parse string to a timestamp value
     *
     * @param  string   $value      String to convert to a time value
     * @param  int      $position   Position at which to start the parsing in $value (zero-based).
     *                              If no error occurs before $value is consumed, $parse_pos will
     *                              contain -1 otherwise it will contain the position at which parsing
     *                              ended. If $parse_pos > strlen($value), the parse fails immediately.
     *
     * @return string               Parsed value as a timestamp
     *
     * @see    http://www.php.net/manual/en/intldateformatter.parse.php
     *
     * @throws MethodArgumentNotImplementedException  When $position different than null, behavior not implemented
     */",
 "/**
     * Set the formatter\'s calendar
     *
     * @param  string  $calendar  The calendar to use. Default is IntlDateFormatter::GREGORIAN.
     *
     * @return Boolean            true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/intldateformatter.setcalendar.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Set the leniency of the parser
     *
     * Define if the parser is strict or lenient in interpreting inputs that do not match the pattern
     * exactly. Enabling lenient parsing allows the parser to accept otherwise flawed date or time
     * patterns, parsing as much as possible to obtain a value. Extra space, unrecognized tokens, or
     * invalid values (\"February 30th\") are not accepted.
     *
     * @param  Boolean $lenient   Sets whether the parser is lenient or not, default is false (strict)
     *
     * @return Boolean            true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/intldateformatter.setlenient.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Set the formatter\'s pattern
     *
     * @param  string  $pattern   A pattern string in conformance with the ICU IntlDateFormatter documentation
     *
     * @return Boolean            true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/intldateformatter.setpattern.php
     * @see    http://userguide.icu-project.org/formatparse/datetime
     */",
 "/**
     * Set the formatter\'s timezone identifier
     *
     * @param  string  $timeZoneId   The time zone ID string of the time zone to use.
     *                               If NULL or the empty string, the default time zone for the
     *                               runtime is used.
     *
     * @return Boolean               true on success or false on failure
     *
     * @see    http://www.php.net/manual/en/intldateformatter.settimezoneid.php
     */",
 "/**
     * Create and returns a DateTime object with the specified timestamp and with the
     * current time zone
     *
     * @param  int  $timestamp
     *
     * @return DateTime
     */",
 "/**
     * Returns a pattern string based in the datetype and timetype values
     *
     * @return string
     */",
 "/**
 * Provides a stub IntlDateFormatter for the \'en\' locale.
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Add a namespace with one or many directories to look for files or null for the include path.
     * 
     * Loading of this namespaces will be done with a PSR-0 namespace loading algorithm.
     * 
     * @param string $namespace
     * @param string|array|null $dirs 
     */",
 "/**
     * Register multiple namespaces
     * 
     * Loading of this namespaces will be done with a PSR-0 namespace loading algorithm.
     * 
     * @param array $namespaces
     */",
 "/**
     * Register an autoloading callabale for annotations, much like spl_autoload_register().
     * 
     * NOTE: These class loaders HAVE to be silent when a class was not found!
     * IMPORTANT: Loaders have to return true if they loaded a class that could contain the searched annotation class.
     * 
     * @param callabale $callabale 
     */",
 "/**
*Autoloadanannotationclasssilently.
*
*@paramstring$class
*@returnvoid
*/",
 "/**
 * Represents a @Secure annotation.
 *
 * @Annotation
 * @Target(\"METHOD\")
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param KernelInterface $kernel A KernelInterface instance
     */",
 "/**
     * Adds a bundle at the end of the existing ones.
     *
     * @param string $bundle The bundle class name
     *
     * @return Boolean true if it worked, false otherwise
     *
     * @throws \RuntimeException If bundle is already defined
     */",
 "/**
 * Changes the PHP code of a Kernel.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param array  $query      The GET parameters
     * @param array  $request    The POST parameters
     * @param array  $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
     * @param array  $cookies    The COOKIE parameters
     * @param array  $files      The FILES parameters
     * @param array  $server     The SERVER parameters
     * @param string $content    The raw body data
     *
     * @api
     */",
 "/**
     * Sets the parameters for this request.
     *
     * This method also re-initializes all properties.
     *
     * @param array  $query      The GET parameters
     * @param array  $request    The POST parameters
     * @param array  $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
     * @param array  $cookies    The COOKIE parameters
     * @param array  $files      The FILES parameters
     * @param array  $server     The SERVER parameters
     * @param string $content    The raw body data
     *
     * @api
     */",
 "/**
     * Creates a new request with values from PHP\'s super globals.
     *
     * @return Request A new request
     *
     * @api
     */",
 "/**
     * Creates a Request based on a given URI and configuration.
     *
     * @param string $uri        The URI
     * @param string $method     The HTTP method
     * @param array  $parameters The request (GET) or query (POST) parameters
     * @param array  $cookies    The request cookies ($_COOKIE)
     * @param array  $files      The request files ($_FILES)
     * @param array  $server     The server parameters ($_SERVER)
     * @param string $content    The raw body data
     *
     * @return Request A Request instance
     *
     * @api
     */",
 "/**
     * Clones a request and overrides some of its parameters.
     *
     * @param array $query      The GET parameters
     * @param array $request    The POST parameters
     * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
     * @param array $cookies    The COOKIE parameters
     * @param array $files      The FILES parameters
     * @param array $server     The SERVER parameters
     *
     * @api
     */",
 "/**
     * Clones the current request.
     *
     * Note that the session is not cloned as duplicated requests
     * are most of the time sub-requests of the main one.
     */",
 "/**
     * Returns the request as a string.
     *
     * @return string The request
     */",
 "/**
     * Overrides the PHP global variables according to this request instance.
     *
     * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE, and $_FILES.
     *
     * @api
     */",
 "/**
     * Trusts $_SERVER entries coming from proxies.
     *
     * You should only call this method if your application
     * is hosted behind a reverse proxy that you manage.
     *
     * @api
     */",
 "/**
     * Gets a \"parameter\" value.
     *
     * This method is mainly useful for libraries that want to provide some flexibility.
     *
     * Order of precedence: GET, PATH, POST, COOKIE
     * Avoid using this method in controllers:
     *  * slow
     *  * prefer to get from a \"named\" source
     *
     * @param string    $key        the key
     * @param mixed     $default    the default value
     * @param type      $deep       is parameter deep in multidimensional array
     *
     * @return mixed
     */",
 "/**
     * Gets the Session.
     *
     * @return Session|null The session
     *
     * @api
     */",
 "/**
     * Whether the request contains a Session which was started in one of the
     * previous requests.
     *
     * @return boolean
     *
     * @api
     */",
 "/**
     * Whether the request contains a Session object.
     *
     * @return boolean
     *
     * @api
     */",
 "/**
     * Sets the Session.
     *
     * @param Session $session The Session
     *
     * @api
     */",
 "/**
     * Returns the client IP address.
     *
     * @param  Boolean $proxy Whether the current request has been made behind a proxy or not
     *
     * @return string The client IP address
     *
     * @api
     */",
 "/**
     * Returns current script name.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Returns the path being requested relative to the executed script.
     *
     * The path info always starts with a /.
     *
     * Suppose this request is instantiated from /mysite on localhost:
     *
     *  * http://localhost/mysite              returns an empty string
     *  * http://localhost/mysite/about        returns \'/about\'
     *  * http://localhost/mysite/about?var=1  returns \'/about\'
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Returns the root path from which this request is executed.
     *
     * Suppose that an index.php file instantiates this request object:
     *
     *  * http://localhost/index.php        returns an empty string
     *  * http://localhost/index.php/page   returns an empty string
     *  * http://localhost/web/index.php    return \'/web\'
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Returns the root url from which this request is executed.
     *
     * The base URL never ends with a /.
     *
     * This is similar to getBasePath(), except that it also includes the
     * script filename (e.g. index.php) if one exists.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Gets the request\'s scheme.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Returns the port on which the request is made.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Returns the HTTP host being requested.
     *
     * The port name will be appended to the host if it\'s non-standard.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Returns the requested URI.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Generates a normalized URI for the Request.
     *
     * @return string A normalized URI for the Request
     *
     * @see getQueryString()
     *
     * @api
     */",
 "/**
     * Generates a normalized URI for the given path.
     *
     * @param string $path A path to use instead of the current one
     *
     * @return string The normalized URI for the path
     *
     * @api
     */",
 "/**
     * Generates the normalized query string for the Request.
     *
     * It builds a normalized query string, where keys/value pairs are alphabetized
     * and have consistent escaping.
     *
     * @return string|null A normalized query string for the Request
     *
     * @api
     */",
 "/**
     * Checks whether the request is secure or not.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Returns the host name.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Sets the request method.
     *
     * @param string $method
     *
     * @api
     */",
 "/**
     * Gets the request method.
     *
     * The method is always an uppercased string.
     *
     * @return string The request method
     *
     * @api
     */",
 "/**
     * Gets the mime type associated with the format.
     *
     * @param  string $format  The format
     *
     * @return string The associated mime type (null if not found)
     *
     * @api
     */",
 "/**
     * Gets the format associated with the mime type.
     *
     * @param  string $mimeType  The associated mime type
     *
     * @return string The format (null if not found)
     *
     * @api
     */",
 "/**
     * Associates a format with mime types.
     *
     * @param string       $format     The format
     * @param string|array $mimeTypes  The associated mime types (the preferred one must be the first as it will be used as the content type)
     *
     * @api
     */",
 "/**
     * Gets the request format.
     *
     * Here is the process to determine the format:
     *
     *  * format defined by the user (with setRequestFormat())
     *  * _format request parameter
     *  * $default
     *
     * @param string  $default     The default format
     *
     * @return string The request format
     *
     * @api
     */",
 "/**
     * Sets the request format.
     *
     * @param string $format The request format.
     *
     * @api
     */",
 "/**
     * Checks whether the method is safe or not.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Returns the request body content.
     *
     * @param  Boolean $asResource If true, a resource will be returned
     *
     * @return string|resource The request body content or a resource to read the body stream.
     */",
 "/**
     * Gets the Etags.
     *
     * @return array The entity tags
     */",
 "/**
     * Returns the preferred language.
     *
     * @param  array  $locales  An array of ordered available locales
     *
     * @return string|null The preferred locale
     *
     * @api
     */",
 "/**
     * Gets a list of languages acceptable by the client browser.
     *
     * @return array Languages ordered in the user browser preferences
     *
     * @api
     */",
 "/**
     * Gets a list of charsets acceptable by the client browser.
     *
     * @return array List of charsets in preferable order
     *
     * @api
     */",
 "/**
     * Gets a list of content types acceptable by the client browser
     *
     * @return array List of content types in preferable order
     *
     * @api
     */",
 "/**
     * Returns true if the request is a XMLHttpRequest.
     *
     * It works if your JavaScript library set an X-Requested-With HTTP header.
     * It is known to work with Prototype, Mootools, jQuery.
     *
     * @return Boolean true if the request is an XMLHttpRequest, false otherwise
     *
     * @api
     */",
 "/**
     * Splits an Accept-* HTTP header.
     *
     * @param string $header  Header to split
     *
     * @return array Array indexed by the values of the Accept-* header in preferred order
     */",
 "/**
*Preparesbasepath.
*
*@returnstringbasepath
*/",
 "/**
*Preparespathinfo.
*
*@returnstringpathinfo
*/",
 "/**
*InitializesHTTPrequestformats.
*/",
 "/**
*RequestrepresentsanHTTPrequest.
*
*@authorFabienPotencier<fabien@symfony.com>
*
*@api
*/",
 "/**
     * This is called when an interactive authentication attempt succeeds. This
     * is called by authentication listeners inheriting from
     * AbstractAuthenticationListener.
     *
     * @param Request        $request
     * @param TokenInterface $token
     *
     * @return Response the response to return
     */",
 "/**
 * Interface for a custom authentication success handler
 *
 * If you want to customize the success handling process, instead of
 * overwriting the respective listener globally, you can set a custom success
 * handler which implements this interface.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Called if a required option was not found but is required
     *
     * @param string $field which field cannot be processed?
     * @param string $expectedOption which option is required
     * @param string $hint  Can optionally be used to supply a tip for common mistakes,
     *                      e.g. \"Did you think of the plural s?\"
     * @return MappingException
     */",
 "/**
     * Generic exception for invalid mappings.
     *
     * @param string $fieldName
     */",
 "/**
     * Exception for reflection exceptions - adds the entity name,
     * because there might be long classnames that will be shortened
     * within the stacktrace
     *
     * @param string $entity The entity\'s name
     * @param \ReflectionException $previousException
     */",
 "/**
     *
     * @param string $entity The entity\'s name
     * @param string $fieldName The name of the field that was already declared
     */",
 "/**
     * Throws an exception that indicates that a class used in a discriminator map does not exist.
     * An example would be an outdated (maybe renamed) classname.
     *
     * @param string $className The class that could not be found
     * @param string $owningClass The class that declares the discriminator map.
     * @return self
     */",
 "/**
     * @param  string $className
     * @param  string $columnName
     * @return self
     */",
 "/**
     * @param string $className
     * @param string $targetEntity
     * @param string $targetField
     * @return self
     */",
 "/**
 * A MappingException indicates that something is wrong with the mapping setup.
 *
 * @since 2.0
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Returns the status code.
     *
     * @return integer An HTTP response status code
     */",
 "/**
     * Returns response headers.
     *
     * @return array Response headers
     */",
 "/**
 * Interface for HTTP error exceptions.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * SelectClause = \"SELECT\" [\"DISTINCT\"] SelectExpression {\",\" SelectExpression}
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * This node represents a Boolean value in the config tree.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
   * Set the KeyCache to wrap.
   * @param Swift_KeyCache $keyCache
   */",
 "/**
   * Specify a stream to write through for each write().
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Writes $bytes to the end of the stream.
   * @param string $bytes
   * @param Swift_InputByteStream $is, optional
   */",
 "/**
   * Not used.
   */",
 "/**
   * Not used.
   */",
 "/**
   * Not used.
   */",
 "/**
   * Flush the contents of the stream (empty it) and set the internal pointer
   * to the beginning.
   */",
 "/**
   * Set the nsKey which will be written to.
   * @param string $nsKey
   */",
 "/**
   * Set the itemKey which will be written to.
   * @param string $itemKey
   */",
 "/**
   * Any implementation should be cloneable, allowing the clone to access a
   * separate $nsKey and $itemKey.
   */",
 "/**
 * Writes data to a KeyCache using a stream.
 * @package Swift
 * @subpackage KeyCache
 * @author Chris Corbyn
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @param string The tag name
     */",
 "/**
     * Returns the current controller
     *
     * @return callable
     *
     * @api
     */",
 "/**
     * Sets a new controller
     *
     * @param callable $controller
     *
     * @api
     */",
 "/**
 * Allows filtering of a controller callable
 *
 * You can call getController() to retrieve the current controller. With
 * setController() you can set a new controller that is used in the processing
 * of the request.
 *
 * Controllers should be callables.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents an autoescape node.
 *
 * The value is the escaping strategy (can be html, js, ...)
 *
 * The true value is equivalent to html.
 *
 * If autoescaping is disabled, then the value is false.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Adds tagged twig.extension services to twig service
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Adds a few formats to each request.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Description of HavingClause
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Get the complete path to the file.
   * @return string
   */",
 "/**
 * An OutputByteStream which specifically reads from a file.
 * @package Swift
 * @subpackage ByteStream
 * @author Chris Corbyn
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * DoctrineDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Checks that the location of the CssEmbed JAR has been configured.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param FormFactoryInterface  $factory   The form factory
     * @param string                $name      A name for the CSRF field
     * @param string                $intention The intention string
     * @param CsrfProviderInterface $provider  The CSRF provider
     */",
 "/**
     * Ensures a root form has a CSRF field.
     *
     * This method should be connected to both form.pre_set_data and form.pre_bind.
     */",
 "/**
 * Ensures the CSRF field.
 *
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $sourceUrl The source URL
     * @param array  $filters   An array of filters
     *
     * @throws InvalidArgumentException If the first argument is not an URL
     */",
 "/**
 * Represents an asset loaded via an HTTP request.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the current security token.
     *
     * @return TokenInterface|null A TokenInterface instance or null if no authentication information is available
     */",
 "/**
     * Sets the authentication token.
     *
     * @param TokenInterface $token
     *
     * @return void
     */",
 "/**
     * Checks if the attributes are granted against the current authentication token and optionally supplied object.
     *
     * @param array $attributes
     * @param mixed $object
     *
     * @return Boolean
     */",
 "/**
 * The SecurityContextInterface.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param Boolean $onlyConstructorArguments Sets this Service Reference pass to ignore method calls
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Processes a ContainerBuilder object to populate the service reference graph.
     *
     * @param ContainerBuilder $container
     */",
 "/**
     * Processes service definitions for arguments to find relationships for the service graph.
     *
     * @param array $arguments An array of Reference or Definition objects relating to service definitions
     */",
 "/**
     * Returns a service definition given the full name or an alias.
     *
     * @param string $id A full id or alias for a service definition.
     *
     * @return Definition The definition related to the supplied id
     */",
 "/**
 * Run this pass before passes that need to know more about the relation of
 * your services.
 *
 * This class will populate the ServiceReferenceGraph with information. You can
 * retrieve the graph in other passes from the compiler.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaPgsqlReader.html
     * @param  array $tableIndexes
     * @param  string $tableName
     * @return array
     */",
 "/**
 * Oracle Schema Manager
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @version     $Revision$
 * @since       2.0
 */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * This class contains the configuration information for the bundle
 *
 * This information is solely responsible for how the different configuration
 * sections are normalized, and merged.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param Router $router A Router instance
     */",
 "/**
     * Warms up the cache.
     *
     * @param string $cacheDir The cache directory
     */",
 "/**
     * Checks whether this warmer is optional or not.
     *
     * @return Boolean always true
     */",
 "/**
 * Generates the router matcher and generator classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * Available attributes:
     *
     *  * debug:    The debug mode
     *  * combine:  Whether to combine assets
     *  * var_name: The name of the variable to expose to the body node
     *
     * @param AssetInterface     $asset      The asset
     * @param Twig_NodeInterface $body       The body node
     * @param array              $inputs     An array of input strings
     * @param array              $filters    An array of filter strings
     * @param string             $name       The name of the asset
     * @param array              $attributes An array of attributes
     * @param integer            $lineno     The line number
     * @param string             $tag        The tag name
     */",
 "/**
     * Parses the given property path
     *
     * @param string $propertyPath
     */",
 "/**
     * Returns the string representation of the property path
     *
     * @return string
     */",
 "/**
     * Returns a new iterator for this path
     *
     * @return PropertyPathIterator
     */",
 "/**
     * Returns the elements of the property path as array
     *
     * @return array   An array of property/index names
     */",
 "/**
     * Returns the element at the given index in the property path
     *
     * @param integer $index The index key
     *
     * @return string  A property or index name
     */",
 "/**
     * Returns whether the element at the given index is a property
     *
     * @param  integer $index  The index in the property path
     *
     * @return Boolean         Whether the element at this index is a property
     */",
 "/**
     * Returns whether the element at the given index is an array index
     *
     * @param  integer $index  The index in the property path
     *
     * @return Boolean         Whether the element at this index is an array index
     */",
 "/**
     * Returns the value at the end of the property path of the object
     *
     * Example:
     * <code>
     * $path = new PropertyPath(\'child.name\');
     *
     * echo $path->getValue($object);
     * // equals echo $object->getChild()->getName();
     * </code>
     *
     * This method first tries to find a public getter for each property in the
     * path. The name of the getter must be the camel-cased property name
     * prefixed with \"get\" or \"is\".
     *
     * If the getter does not exist, this method tries to find a public
     * property. The value of the property is then returned.
     *
     * If neither is found, an exception is thrown.
     *
     * @param  object|array $objectOrArray   The object or array to traverse
     *
     * @return mixed                         The value at the end of the property path
     *
     * @throws InvalidPropertyException      If the property/getter does not exist
     * @throws PropertyAccessDeniedException If the property/getter exists but is not public
     */",
 "/**
     * Sets the value at the end of the property path of the object
     *
     * Example:
     * <code>
     * $path = new PropertyPath(\'child.name\');
     *
     * echo $path->setValue($object, \'Fabien\');
     * // equals echo $object->getChild()->setName(\'Fabien\');
     * </code>
     *
     * This method first tries to find a public setter for each property in the
     * path. The name of the setter must be the camel-cased property name
     * prefixed with \"set\".
     *
     * If the setter does not exist, this method tries to find a public
     * property. The value of the property is then changed.
     *
     * If neither is found, an exception is thrown.
     *
     * @param  object|array $objectOrArray    The object or array to traverse
     * @param  mixed        $value            The value at the end of the property path
     *
     * @throws InvalidPropertyException       If the property/setter does not exist
     * @throws PropertyAccessDeniedException  If the property/setter exists but is not public
     */",
 "/**
     * Reads the value of the property at the given index in the path
     *
     * @param  object $object         The object to read from
     * @param  integer $currentIndex  The index of the read property in the path
     *
     * @return mixed                  The value of the property
     */",
 "/**
     * Sets the value of the property at the given index in the path
     *
     * @param object  $objectOrArray The object or array to traverse
     * @param integer $currentIndex  The index of the modified property in the path
     * @param mixed $value           The value to set
     */",
 "/**
 * Allows easy traversing of a property path
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Converts an attribute as a php type.
     *
     * @param string $name
     *
     * @return mixed
     */",
 "/**
     * Returns arguments as valid php types.
     *
     * @param string  $name
     * @param Boolean $lowercase
     *
     * @return mixed
     */",
 "/**
     * Converts an xml value to a php type.
     *
     * @param mixed $value
     *
     * @return mixed
     */",
 "/**
 * SimpleXMLElement class.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns an array of bitmasks.
     *
     * The security identity must have been granted access to at least one of
     * these bitmasks.
     *
     * @param string $permission
     * @param object $object
     * @return array may return null if permission/object combination is not supported
     */",
 "/**
     * Whether this map contains the given permission
     *
     * @param string $permission
     * @return Boolean
     */",
 "/**
 * This is the interface that must be implemented by permission maps.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"MOD\" \"(\" SimpleArithmeticExpression \",\" SimpleArithmeticExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     */",
 "/**
     * Clears the history.
     */",
 "/**
     * Adds a Request to the history.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Returns true if the history is empty.
     *
     * @return Boolean true if the history is empty, false otherwise
     */",
 "/**
     * Goes back in the history.
     *
     * @return Request A Request instance
     *
     * @throws \LogicException if the stack is already on the first page
     */",
 "/**
     * Goes forward in the history.
     *
     * @return Request A Request instance
     *
     * @throws \LogicException if the stack is already on the last page
     */",
 "/**
     * Returns the current element in the history.
     *
     * @return Request A Request instance
     *
     * @throws \LogicException if the stack is empty
     */",
 "/**
 * History.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * Validates whether a value is a valid country code
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
 * Converts annotations to method metadata
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string  $root   The default root directory
     * @param string  $output The default output string
     * @param Boolean $debug  Filters prefixed with a \"?\" will be omitted in debug mode
     */",
 "/**
     * Sets debug mode for the current factory.
     *
     * @param Boolean $debug Debug mode
     */",
 "/**
     * Checks if the factory is in debug mode.
     *
     * @return Boolean Debug mode
     */",
 "/**
     * Sets the default output string.
     *
     * @param string $output The default output string
     */",
 "/**
     * Adds a factory worker.
     *
     * @param WorkerInterface $worker A worker
     */",
 "/**
     * Returns the current asset manager.
     *
     * @return AssetManager|null The asset manager
     */",
 "/**
     * Sets the asset manager to use when creating asset references.
     *
     * @param AssetManager $am The asset manager
     */",
 "/**
     * Returns the current filter manager.
     *
     * @return FilterManager|null The filter manager
     */",
 "/**
     * Sets the filter manager to use when adding filters.
     *
     * @param FilterManager $fm The filter manager
     */",
 "/**
     * Creates a new asset.
     *
     * Prefixing a filter name with a question mark will cause it to be
     * omitted when the factory is in debug mode.
     *
     * Available options:
     *
     *  * output: An output string
     *  * name:   An asset name for interpolation in output patterns
     *  * debug:  Forces debug mode on or off for this asset
     *  * root:   An array or string of more root directories
     *
     * @param array|string $inputs  An array of input strings
     * @param array|string $filters An array of filter names
     * @param array        $options An array of options
     *
     * @return AssetCollection An asset collection
     */",
 "/**
     * Parses an input string string into an asset.
     *
     * The input string can be one of the following:
     *
     *  * A reference:     If the string starts with an \"at\" sign it will be interpreted as a reference to an asset in the asset manager
     *  * An absolute URL: If the string contains \"://\" or starts with \"//\" it will be interpreted as an HTTP asset
     *  * A glob:          If the string contains a \"*\" it will be interpreted as a glob
     *  * A path:          Otherwise the string is interpreted as a filesystem path
     *
     * Both globs and paths will be absolutized using the current root directory.
     *
     * @param string $input   An input string
     * @param array  $options An array of options
     *
     * @return AssetInterface An asset
     */",
 "/**
     * Filters an asset through the factory workers.
     *
     * Each leaf asset will be processed first if the asset is traversable,
     * followed by the asset itself.
     *
     * @param AssetInterface $asset An asset
     */",
 "/**
*Loopsthroughtherootdirectoriesandreturnsthefirstmatch.
*
*@paramstring$pathAnabsolutepath
*@paramarray$rootsAnarrayofrootdirectories
*
*@returnstring|nullThematchingrootdirectory,iffound
*/",
 "/**
*Theassetfactorycreatesassetobjects.
*
*@authorKrisWallsmith<kris.wallsmith@gmail.com>
*/",
 "/**
     * Gets the single, empty and immutable EventArgs instance.
     *
     * This instance will be used when events are dispatched without any parameter,
     * like this: EventManager::dispatchEvent(\'eventname\');
     *
     * The benefit from this is that only one empty instance is instantiated and shared
     * (otherwise there would be instances for every dispatched in the abovementioned form)
     *
     * @see EventManager::dispatchEvent
     * @link http://msdn.microsoft.com/en-us/library/system.eventargs.aspx
     * @static
     * @return EventArgs
     */",
 "/**
 * EventArgs is the base class for classes containing event data.
 *
 * This class contains no event data. It is used by events that do not pass state
 * information to an event handler when an event is raised. The single empty EventArgs
 * instance can be obtained through {@link getEmptyInstance}.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor
     *
     * @param mixed $role a Role instance, or its string representation
     * @return void
     */",
 "/**
     * Returns the role name
     *
     * @return string
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Returns a textual representation of this security identity.
     *
     * This is solely used for debugging purposes, not to make an equality decision.
     *
     * @return string
     */",
 "/**
 * A SecurityIdentity implementation for roles
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @dataProvider getTemplateToPathProvider
     */",
 "/**
     * @dataProvider getTemplateToPathProvider
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Loads multiple yaml mapping files
 *
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 *
 * @see    Symfony\Component\Validator\Mapping\Loader\FilesLoader
 */",
 "/**
     * Loads a Yaml file.
     *
     * @param string $file A Yaml file path
     * @param string $type The resource type
     *
     * @return RouteCollection A RouteCollection instance
     *
     * @throws \InvalidArgumentException When route can\'t be parsed
     *
     * @api
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean True if this class supports the given resource, false otherwise
     *
     * @api
     */",
 "/**
     * Parses a route and adds it to the RouteCollection.
     *
     * @param RouteCollection $collection A RouteCollection instance
     * @param string          $name       Route name
     * @param array           $config     Route definition
     * @param string          $file       A Yaml file path
     *
     * @throws \InvalidArgumentException When config pattern is not defined for the given route
     */",
 "/**
     * Normalize route configuration.
     *
     * @param array  $config A resource config
     *
     * @return array
     *
     * @throws InvalidArgumentException if one of the provided config keys is not supported
     */",
 "/**
 * YamlFileLoader loads Yaml routing files.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * The constructor
   *
   * @param Swift_CharacterReaderFactory $factory
   * @param unknown_type $charset
   */",
 "/**
   * Set the character set used in this CharacterStream.
   * @param string $charset
   */",
 "/**
   * Set the CharacterReaderFactory for multi charset support.
   * @param Swift_CharacterReaderFactory $factory
   */",
 "/**
   * @see Swift_CharacterStream::flushContents()
   *
   */",
 "/**
   * @see Swift_CharacterStream::importByteStream()
   *
   * @param Swift_OutputByteStream $os
   */",
 "/**
   * @see Swift_CharacterStream::importString()
   *
   * @param string $string
   */",
 "/**
   * @see Swift_CharacterStream::read()
   *
   * @param int $length
   * @return string
   */",
 "/**
   * @see Swift_CharacterStream::readBytes()
   *
   * @param int $length
   * @return int[]
   */",
 "/**
   * @see Swift_CharacterStream::setPointer()
   *
   * @param int $charOffset
   */",
 "/**
   * @see Swift_CharacterStream::write()
   *
   * @param string $chars
   */",
 "/**
 * A CharacterStream implementation which stores characters in an internal array.
 * @package Swift
 * @subpackage CharacterStream
 * @author Xavier De Cock <xdecock@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * Available options:
     *
     *  * debug: When set to `true`, the generated templates have a __toString()
     *           method that you can use to display the generated nodes (default to
     *           false).
     *
     *  * charset: The charset used by the templates (default to utf-8).
     *
     *  * base_template_class: The base template class to use for generated
     *                         templates (default to Twig_Template).
     *
     *  * cache: An absolute path where to store the compiled templates, or
     *           false to disable compilation cache (default)
     *
     *  * auto_reload: Whether to reload the template is the original source changed.
     *                 If you don\'t provide the auto_reload option, it will be
     *                 determined automatically base on the debug value.
     *
     *  * strict_variables: Whether to ignore invalid variables in templates
     *                      (default to false).
     *
     *  * autoescape: Whether to enable auto-escaping (default to true);
     *
     *  * optimizations: A flag that indicates which optimizations to apply
     *                   (default to -1 which means that all optimizations are enabled;
     *                   set it to 0 to disable)
     *
     * @param Twig_LoaderInterface   $loader  A Twig_LoaderInterface instance
     * @param array                  $options An array of options
     */",
 "/**
     * Gets the base template class for compiled templates.
     *
     * @return string The base template class name
     */",
 "/**
     * Sets the base template class for compiled templates.
     *
     * @param string $class The base template class name
     */",
 "/**
     * Enables debugging mode.
     */",
 "/**
     * Disables debugging mode.
     */",
 "/**
     * Checks if debug mode is enabled.
     *
     * @return Boolean true if debug mode is enabled, false otherwise
     */",
 "/**
     * Enables the auto_reload option.
     */",
 "/**
     * Disables the auto_reload option.
     */",
 "/**
     * Checks if the auto_reload option is enabled.
     *
     * @return Boolean true if auto_reload is enabled, false otherwise
     */",
 "/**
     * Enables the strict_variables option.
     */",
 "/**
     * Disables the strict_variables option.
     */",
 "/**
     * Checks if the strict_variables option is enabled.
     *
     * @return Boolean true if strict_variables is enabled, false otherwise
     */",
 "/**
     * Gets the cache directory or false if cache is disabled.
     *
     * @return string|false
     */",
 "/**
      * Sets the cache directory or false if cache is disabled.
      *
      * @param string|false $cache The absolute path to the compiled templates,
      *                            or false to disable cache
      */",
 "/**
     * Gets the cache filename for a given template.
     *
     * @param string $name The template name
     *
     * @return string The cache file name
     */",
 "/**
     * Gets the template class associated with the given string.
     *
     * @param string $name The name for which to calculate the template class name
     *
     * @return string The template class name
     */",
 "/**
     * Gets the template class prefix.
     *
     * @return string The template class prefix
     */",
 "/**
     * Renders a template.
     *
     * @param string $name    The template name
     * @param array  $context An array of parameters to pass to the template
     *
     * @return string The rendered template
     */",
 "/**
     * Displays a template.
     *
     * @param string $name    The template name
     * @param array  $context An array of parameters to pass to the template
     */",
 "/**
     * Loads a template by name.
     *
     * @param  string  $name  The template name
     *
     * @return Twig_TemplateInterface A template instance representing the given template name
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * Besides checking the loader for freshness information,
     * this method also checks if the enabled extensions have
     * not changed.
     *
     * @param string    $name The template name
     * @param timestamp $time The last modification time of the cached template
     *
     * @return Boolean true if the template is fresh, false otherwise
     */",
 "/**
     * Clears the internal template cache.
     */",
 "/**
     * Clears the template cache files on the filesystem.
     */",
 "/**
     * Gets the Lexer instance.
     *
     * @return Twig_LexerInterface A Twig_LexerInterface instance
     */",
 "/**
     * Sets the Lexer instance.
     *
     * @param Twig_LexerInterface A Twig_LexerInterface instance
     */",
 "/**
     * Tokenizes a source code.
     *
     * @param string $source The template source code
     * @param string $name   The template name
     *
     * @return Twig_TokenStream A Twig_TokenStream instance
     */",
 "/**
     * Gets the Parser instance.
     *
     * @return Twig_ParserInterface A Twig_ParserInterface instance
     */",
 "/**
     * Sets the Parser instance.
     *
     * @param Twig_ParserInterface A Twig_ParserInterface instance
     */",
 "/**
     * Parses a token stream.
     *
     * @param Twig_TokenStream $tokens A Twig_TokenStream instance
     *
     * @return Twig_Node_Module A Node tree
     */",
 "/**
     * Gets the Compiler instance.
     *
     * @return Twig_CompilerInterface A Twig_CompilerInterface instance
     */",
 "/**
     * Sets the Compiler instance.
     *
     * @param Twig_CompilerInterface $compiler A Twig_CompilerInterface instance
     */",
 "/**
     * Compiles a Node.
     *
     * @param Twig_NodeInterface $node A Twig_NodeInterface instance
     *
     * @return string The compiled PHP source code
     */",
 "/**
     * Compiles a template source code.
     *
     * @param string $source The template source code
     * @param string $name   The template name
     *
     * @return string The compiled PHP source code
     */",
 "/**
     * Sets the Loader instance.
     *
     * @param Twig_LoaderInterface $loader A Twig_LoaderInterface instance
     */",
 "/**
     * Gets the Loader instance.
     *
     * @return Twig_LoaderInterface A Twig_LoaderInterface instance
     */",
 "/**
     * Sets the default template charset.
     *
     * @param string $charset The default charset
     */",
 "/**
     * Gets the default template charset.
     *
     * @return string The default charset
     */",
 "/**
     * Initializes the runtime environment.
     */",
 "/**
     * Returns true if the given extension is registered.
     *
     * @param string $name The extension name
     *
     * @return Boolean Whether the extension is registered or not
     */",
 "/**
     * Gets an extension by name.
     *
     * @param string $name The extension name
     *
     * @return Twig_ExtensionInterface A Twig_ExtensionInterface instance
     */",
 "/**
     * Registers an extension.
     *
     * @param Twig_ExtensionInterface $extension A Twig_ExtensionInterface instance
     */",
 "/**
     * Removes an extension by name.
     *
     * @param string $name The extension name
     */",
 "/**
     * Registers an array of extensions.
     *
     * @param array $extensions An array of extensions
     */",
 "/**
     * Returns all registered extensions.
     *
     * @return array An array of extensions
     */",
 "/**
     * Registers a Token Parser.
     *
     * @param Twig_TokenParserInterface $parser A Twig_TokenParserInterface instance
     */",
 "/**
     * Gets the registered Token Parsers.
     *
     * @return Twig_TokenParserBrokerInterface A broker containing token parsers
     */",
 "/**
     * Gets registered tags.
     *
     * Be warned that this method cannot return tags defined by Twig_TokenParserBrokerInterface classes.
     *
     * @return Twig_TokenParserInterface[] An array of Twig_TokenParserInterface instances
     */",
 "/**
     * Registers a Node Visitor.
     *
     * @param Twig_NodeVisitorInterface $visitor A Twig_NodeVisitorInterface instance
     */",
 "/**
     * Gets the registered Node Visitors.
     *
     * @return Twig_NodeVisitorInterface[] An array of Twig_NodeVisitorInterface instances
     */",
 "/**
     * Registers a Filter.
     *
     * @param string               $name   The filter name
     * @param Twig_FilterInterface $filter A Twig_FilterInterface instance
     */",
 "/**
     * Get a filter by name.
     *
     * Subclasses may override this method and load filters differently;
     * so no list of filters is available.
     *
     * @param string $name The filter name
     *
     * @return Twig_Filter|false A Twig_Filter instance or false if the filter does not exists
     */",
 "/**
     * Gets the registered Filters.
     *
     * Be warned that this method cannot return filters defined with registerUndefinedFunctionCallback.
     *
     * @return Twig_FilterInterface[] An array of Twig_FilterInterface instances
     *
     * @see registerUndefinedFilterCallback
     */",
 "/**
     * Registers a Test.
     *
     * @param string             $name The test name
     * @param Twig_TestInterface $test A Twig_TestInterface instance
     */",
 "/**
     * Gets the registered Tests.
     *
     * @return Twig_TestInterface[] An array of Twig_TestInterface instances
     */",
 "/**
     * Registers a Function.
     *
     * @param string                 $name     The function name
     * @param Twig_FunctionInterface $function A Twig_FunctionInterface instance
     */",
 "/**
     * Get a function by name.
     *
     * Subclasses may override this method and load functions differently;
     * so no list of functions is available.
     *
     * @param string $name function name
     *
     * @return Twig_Function|false A Twig_Function instance or false if the function does not exists
     */",
 "/**
     * Gets registered functions.
     *
     * Be warned that this method cannot return functions defined with registerUndefinedFunctionCallback.
     *
     * @return Twig_FunctionInterface[] An array of Twig_FunctionInterface instances
     *
     * @see registerUndefinedFunctionCallback
     */",
 "/**
     * Registers a Global.
     *
     * @param string $name  The global name
     * @param mixed  $value The global value
     */",
 "/**
     * Gets the registered Globals.
     *
     * @return array An array of globals
     */",
 "/**
     * Gets the registered unary Operators.
     *
     * @return array An array of unary operators
     */",
 "/**
     * Gets the registered binary Operators.
     *
     * @return array An array of binary operators
     */",
 "/**
 * Stores the Twig configuration.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Formats a log record.
     *
     * @param array $record A record to format
     * @return mixed The formatted record
     */",
 "/**
     * Formats a set of log records.
     *
     * @param array $records A set of records to format
     * @return mixed The formatted set of records
     */",
 "/**
 * Interface for formatters
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
*GeneratesaformclassbasedonaDoctrineentity.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorJonathanH.Wage<jonwage@gmail.com>
*/",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
 * Used to format logging messages during the compilation.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Generates a valid Message-ID and switches to it.
   * 
   * @return string
   */",
 "/**
   * Set the subject of the message.
   * 
   * @param string $subject
   */",
 "/**
   * Get the subject of the message.
   * 
   * @return string
   */",
 "/**
   * Set the origination date of the message as a UNIX timestamp.
   * 
   * @param int $date
   */",
 "/**
   * Get the origination date of the message as a UNIX timestamp.
   * 
   * @return int
   */",
 "/**
   * Set the return-path (bounce-detect) address.
   * 
   * @param string $address
   */",
 "/**
   * Get the return-path (bounce-detect) address.
   * 
   * @return string
   */",
 "/**
   * Set the sender of this message.
   * 
   * If multiple addresses are present in the From field, this SHOULD be set.
   * 
   * According to RFC 2822 it is a requirement when there are multiple From
   * addresses, but Swift itself does not require it directly.
   * 
   * An associative array (with one element!) can be used to provide a display-
   * name: i.e. array(\'email@address\' => \'Real Name\').
   * 
   * If the second parameter is provided and the first is a string, then $name
   * is associated with the address.
   * 
   * @param mixed $address
   * @param string $name optional
   */",
 "/**
   * Get the sender address for this message.
   * 
   * This has a higher significance than the From address.
   * 
   * @return string
   */",
 "/**
   * Set the From address of this message.
   * 
   * It is permissible for multiple From addresses to be set using an array.
   * 
   * If multiple From addresses are used, you SHOULD set the Sender address and
   * according to RFC 2822, MUST set the sender address.
   * 
   * An array can be used if display names are to be provided: i.e.
   * array(\'email@address.com\' => \'Real Name\').
   * 
   * If the second parameter is provided and the first is a string, then $name
   * is associated with the address.
   *
   * @param mixed $addresses
   * @param string $name optional
   */",
 "/**
   * Get the From address(es) of this message.
   * 
   * This method always returns an associative array where the keys are the
   * addresses.
   * 
   * @return string[]
   */",
 "/**
   * Set the Reply-To address(es).
   * 
   * Any replies from the receiver will be sent to this address.
   * 
   * It is permissible for multiple reply-to addresses to be set using an array.
   * 
   * This method has the same synopsis as {@link setFrom()} and {@link setTo()}.
   * 
   * If the second parameter is provided and the first is a string, then $name
   * is associated with the address.
   * 
   * @param mixed $addresses
   * @param string $name optional
   */",
 "/**
   * Get the Reply-To addresses for this message.
   * 
   * This method always returns an associative array where the keys provide the
   * email addresses.
   * 
   * @return string[]
   */",
 "/**
   * Set the To address(es).
   * 
   * Recipients set in this field will receive a copy of this message.
   * 
   * This method has the same synopsis as {@link setFrom()} and {@link setCc()}.
   * 
   * If the second parameter is provided and the first is a string, then $name
   * is associated with the address.
   * 
   * @param mixed $addresses
   * @param string $name optional
   */",
 "/**
   * Get the To addresses for this message.
   * 
   * This method always returns an associative array, whereby the keys provide
   * the actual email addresses.
   * 
   * @return string[]
   */",
 "/**
   * Set the Cc address(es).
   * 
   * Recipients set in this field will receive a \'carbon-copy\' of this message.
   * 
   * This method has the same synopsis as {@link setFrom()} and {@link setTo()}.
   * 
   * @param mixed $addresses
   * @param string $name optional
   */",
 "/**
   * Get the Cc addresses for this message.
   * 
   * This method always returns an associative array, whereby the keys provide
   * the actual email addresses.
   * 
   * @return string[]
   */",
 "/**
   * Set the Bcc address(es).
   * 
   * Recipients set in this field will receive a \'blind-carbon-copy\' of this
   * message.
   * 
   * In other words, they will get the message, but any other recipients of the
   * message will have no such knowledge of their receipt of it.
   * 
   * This method has the same synopsis as {@link setFrom()} and {@link setTo()}.
   * 
   * @param mixed $addresses
   * @param string $name optional
   */",
 "/**
   * Get the Bcc addresses for this message.
   * 
   * This method always returns an associative array, whereby the keys provide
   * the actual email addresses.
   * 
   * @return string[]
   */",
 "/**
 * A Message (RFC 2822) object.
 * 
 * @package Swift
 * @subpackage Mime
 * 
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param Twig_Environment $env A Twig_Environment instance
     */",
 "/**
     * Returns the template name.
     *
     * @return string The template name
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the parent template.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * @return Twig_TemplateInterface|false The parent template or false if there is no parent
     */",
 "/**
     * Displays a parent block.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * @param string $name    The block name to display from the parent
     * @param array  $context The context
     * @param array  $blocks  The current set of blocks
     */",
 "/**
     * Displays a block.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * @param string $name    The block name to display
     * @param array  $context The context
     * @param array  $blocks  The current set of blocks
     */",
 "/**
     * Renders a parent block.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * @param string $name    The block name to render from the parent
     * @param array  $context The context
     * @param array  $blocks  The current set of blocks
     *
     * @return string The rendered block
     */",
 "/**
     * Renders a block.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * @param string $name    The block name to render
     * @param array  $context The context
     * @param array  $blocks  The current set of blocks
     *
     * @return string The rendered block
     */",
 "/**
     * Returns whether a block exists or not.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * This method does only return blocks defined in the current template
     * or defined in \"used\" traits.
     *
     * It does not return blocks from parent templates as the parent
     * template name can be dynamic, which is only known based on the
     * current context.
     *
     * @param string $name The block name
     *
     * @return Boolean true if the block exists, false otherwise
     */",
 "/**
     * Returns all block names.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * @return array An array of block names
     *
     * @see hasBlock
     */",
 "/**
     * Returns all blocks.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * @return array An array of blocks
     *
     * @see hasBlock
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Auto-generated method to display the template with the given context.
     *
     * @param array $context An array of parameters to pass to the template
     * @param array $blocks  An array of blocks to pass to the template
     */",
 "/**
     * Returns a variable from the context.
     *
     * This method is for internal use only and should never be called
     * directly.
     *
     * This method should not be overriden in a sub-class as this is an
     * implementation detail that has been introduced to optimize variable
     * access for versions of PHP before 5.4. This is not a way to override
     * the way to get a variable value.
     *
     * @param array   $context           The context
     * @param string  $item              The variable to return from the context
     * @param Boolean $ignoreStrictCheck Whether to ignore the strict variable check or not
     *
     * @return The content of the context variable
     *
     * @throws Twig_Error_Runtime if the variable does not exist and Twig is running in strict mode
     */",
 "/**
     * Returns the attribute value for a given array/object.
     *
     * @param mixed   $object            The object or array from where to get the item
     * @param mixed   $item              The item to get from the array or object
     * @param array   $arguments         An array of arguments to pass if the item is an object method
     * @param string  $type              The type of attribute (@see Twig_TemplateInterface)
     * @param Boolean $isDefinedTest     Whether this is only a defined check
     * @param Boolean $ignoreStrictCheck Whether to ignore the strict attribute check or not
     *
     * @return mixed The attribute value, or a Boolean when $isDefinedTest is true, or null when the attribute is not set and $ignoreStrictCheck is true
     *
     * @throws Twig_Error_Runtime if the attribute does not exist and Twig is running in strict mode and $isDefinedTest is false
     */",
 "/**
     * This method is only useful when testing Twig. Do not use it.
     */",
 "/**
 * Default base class for compiled templates.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Defines the interface of encoders that will normalize data themselves
 *
 * Implementing this interface essentially just tells the Serializer that the
 * data should not be pre-normalized before being passed to this Encoder.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Constructor
     *
     * @param NodeDefinition $node The related node
     */",
 "/**
     * Sets whether the node can be unset.
     *
     * @param Boolean $allow
     *
     * @return MergeBuilder
     */",
 "/**
     * Sets whether the node can be overwritten.
     *
     * @param Boolean $deny Whether the overwriting is forbidden or not
     *
     * @return MergeBuilder
     */",
 "/**
     * Returns the related node.
     *
     * @return NodeDefinition
     */",
 "/**
 * This class builds merge conditions.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Boots the Bundle.
     */",
 "/**
     * Shutdowns the Bundle.
     */",
 "/**
     * Builds the bundle.
     *
     * It is only ever called once when the cache is empty.
     *
     * This method can be overridden to register compilation passes,
     * other extensions, ...
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Returns the bundle\'s container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @api
     */",
 "/**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */",
 "/**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */",
 "/**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */",
 "/**
*Returnsthebundlename(theclassshortname).
*
*@returnstringTheBundlename
*
*@api
*/",
 "/**
*FindsandregistersCommands.
*
*Overridethismethodifyourbundlecommandsdonotfollowtheconventions:
*
**Commandsareinthe\'Command\'sub-directory
**CommandsextendSymfony\Component\Console\Command\Command
*
*@paramApplication$applicationAnApplicationinstance
*/",
 "/**
*AnimplementationofBundleInterfacethataddsafewconventions
*forDependencyInjectionextensionsandConsolecommands.
*
*@authorFabienPotencier<fabien@symfony.com>
*
*@api
*/",
 "/**
 * Adds remember-me cookies to the Response.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Tests if the given number is in the math interval.
     *
     * @param integer $number   A number
     * @param string  $interval An interval
     */",
 "/**
     * Returns a Regexp that matches valid intervals.
     *
     * @return string A Regexp (without the delimiters)
     */",
 "/**
 * Tests if a given number belongs to a given math interval.
 *
 * An interval can represent a finite set of numbers:
 *
 *  {1,2,3,4}
 *
 * An interval can represent numbers between two numbers:
 *
 *  [1, +Inf]
 *  ]-1,2[
 *
 * The left delimiter can be [ (inclusive) or ] (exclusive).
 * The right delimiter can be [ (exclusive) or ] (inclusive).
 * Beside numbers, you can use -Inf and +Inf for the infinite.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @see    http://en.wikipedia.org/wiki/Interval_%28mathematics%29#The_ISO_notation
 */",
 "/**
 * Resize a collection form element based on the data sent from the client.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 */",
 "/**
 * Represents a method template filter.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param EntityManager $em
     */",
 "/**
     * Checks the internal consistency of mapping files.
     *
     * There are several checks that can\'t be done at runtime or are too expensive, which can be verified
     * with this command. For example:
     *
     * 1. Check if a relation with \"mappedBy\" is actually connected to that specified field.
     * 2. Check if \"mappedBy\" and \"inversedBy\" are consistent to each other.
     * 3. Check if \"referencedColumnName\" attributes are really pointing to primary key columns.
     * 4. Check if there are public properties that might cause problems with lazy loading.
     *
     * @return array
     */",
 "/**
     * Check if the Database Schema is in sync with the current metadata state.
     *
     * @return bool
     */",
 "/**
 * Performs strict validation of the mapping schema
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Checks that xcache.admin.enable_auth is Off
     *
     * @throws \BadMethodCallException When xcache.admin.enable_auth is On
     * @return void
     */",
 "/**
 * Xcache cache driver.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
   * Create a new AuthHandler with $authenticators for support.
   * @param Swift_Transport_Esmtp_Authenticator[] $authenticators
   */",
 "/**
   * Set the Authenticators which can process a login request.
   * @param Swift_Transport_Esmtp_Authenticator[] $authenticators
   */",
 "/**
   * Get the Authenticators which can process a login request.
   * @return Swift_Transport_Esmtp_Authenticator[]
   */",
 "/**
   * Set the username to authenticate with.
   * @param string $username
   */",
 "/**
   * Get the username to authenticate with.
   * @return string
   */",
 "/**
   * Set the password to authenticate with.
   * @param string $password
   */",
 "/**
   * Get the password to authenticate with.
   * @return string
   */",
 "/**
   * Set the auth mode to use to authenticate.
   * @param string $mode
   */",
 "/**
   * Get the auth mode to use to authenticate.
   * @return string
   */",
 "/**
   * Get the name of the ESMTP extension this handles.
   * @return boolean
   */",
 "/**
   * Set the parameters which the EHLO greeting indicated.
   * @param string[] $parameters
   */",
 "/**
   * Runs immediately after a EHLO has been issued.
   * @param Swift_Transport_SmtpAgent $agent to read/write
   */",
 "/**
   * Not used.
   */",
 "/**
   * Not used.
   */",
 "/**
   * Not used.
   */",
 "/**
   * Returns +1, -1 or 0 according to the rules for usort().
   * This method is called to ensure extensions can be execute in an appropriate order.
   * @param string $esmtpKeyword to compare with
   * @return int
   */",
 "/**
   * Returns an array of method names which are exposed to the Esmtp class.
   * @return string[]
   */",
 "/**
   * Not used.
   */",
 "/**
   * Returns the authenticator list for the given agent.
   * @param  Swift_Transport_SmtpAgent $agent
   * @return array
   * @access protected
   */",
 "/**
 * An ESMTP handler for AUTH support.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
 * Expression class for generating DQL functions
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns a string representation of the object.
     *
     * @return string The string representation
     */",
 "/**
     * @return XPathExpr The XPath expression
     *
     * @throws ParseException When unknown operator is found
     */",
 "/**
 * ClassNode represents a \"selector.className\" node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Connection interface.
 * Driver connections must implement this interface.
 *
 * This resembles (a subset of) the PDO interface.
 * 
 * @since 2.0
 */",
 "/**
     * Constructs the Oracle DSN.
     *
     * @return string The DSN.
     */",
 "/**
 * A Doctrine DBAL driver for the Oracle OCI8 PHP extensions.
 * 
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * Attributes can be added to the tag by passing names as the options
     * array. These values, if found, will be passed to the factory and node.
     *
     * @param AssetFactory $factory    The asset factory
     * @param string       $tag        The tag name
     * @param string       $output     The default output string
     * @param Boolean      $single     Whether to force a single asset
     * @param array        $extensions Additional attribute names to look for
     */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $object     The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * Validator for Callback constraint
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
 * Doctrine Form Type.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets a portable column definition.
     *
     * The database type is mapped to a corresponding Doctrine mapping type.
     *
     * @param $tableColumn
     * @return array
     */",
 "/**
 * Schema manager for the MySql RDBMS.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Roman Borschel <roman@code-factory.org>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @version     $Revision$
 * @since       2.0
 */",
 "/**
     * Register the alias for this mapping driver.
     *
     * Aliases can be used in the Query languages of all the Doctrine object managers to simplify writing tasks.
     *
     * @param array $mappingConfig
     * @param string $mappingName
     * @return void
     */",
 "/**
     * Register the mapping driver configuration for later use with the object managers metadata driver chain.
     *
     * @param array  $mappingConfig
     * @param string $mappingName
     * @return void
     */",
 "/**
*Ifthisisabundlecontrolledmappingallthemissinginformationcanbeautodetectedbythismethod.
*
*Returnsfalsewhenautodetectionfailed,anarrayofthecompletedinformationotherwise.
*
*@paramarray$bundleConfig
*@param\ReflectionClass$bundle
*@paramContainerBuilder$containerAContainerBuilderinstance
*
*@returnarray|false
*/",
 "/**
*Registerallthecollectedmappinginformationwiththeobjectmanagerbyregisteringtheappropriatemappingdrivers.
*
*@paramarray$objectManager
*@paramContainerBuilder$containerAContainerBuilderinstance
*/",
 "/**
     * Assertion if the specified mapping information is valid.
     *
     * @param array  $mappingConfig
     * @param string $objectManagerName
     */",
 "/**
     * Detects what metadata driver to use for the supplied directory.
     *
     * @param string           $dir       A directory path
     * @param ContainerBuilder $container A ContainerBuilder instance
     *
     * @return string|null A metadata driver short name, if one can be detected
     */",
 "/**
     * Prefixes the relative dependency injection container path with the object manager prefix.
     *
     * @example $name is \'entity_manager\' then the result would be \'doctrine.orm.entity_manager\'
     *
     * @param string $name
     * @return string
     */",
 "/**
     * Noun that describes the mapped objects such as Entity or Document.
     *
     * Will be used for autodetection of persistent objects directory.
     *
     * @return string
     */",
 "/**
     * Relative path from the bundle root to the directory where mapping files reside.
     *
     * @return string
     */",
 "/**
     * Extension used by the mapping files.
     *
     * @return string
     */",
 "/**
 * This abstract classes groups common code that Doctrine Object Manager extensions (ORM, MongoDB, CouchDB) need.
 */",
 "/**
     * Test that the main tree is OK to be passed a factory or factories
     * key, without throwing any validation errors.
     */",
 "/** Return an array of params for the Buffer */",
 "/**
   * Creates a new EsmtpTransport using the given I/O buffer.
   * 
   * @param Swift_Transport_IoBuffer $buf
   * @param Swift_Events_EventDispatcher $dispatcher
   */",
 "/**
   * Set the name of the local domain which Swift will identify itself as.
   * This should be a fully-qualified domain name and should be truly the domain
   * you\'re using.  If your server doesn\'t have a domain name, use the IP in square
   * brackets (i.e. [127.0.0.1]).
   * 
   * @param string $domain
   * @return Swift_Transport_AbstractSmtpTransport
   */",
 "/**
   * Get the name of the domain Swift will identify as.
   * 
   * @return string
   */",
 "/**
   * Sets the sourceIp
   * @param string $source
   */",
 "/**
   * Returns the ip used to connect to the destination
   * @return string
   */",
 "/**
   * Start the SMTP connection.
   */",
 "/**
   * Test if an SMTP connection has been established.
   * 
   * @return boolean
   */",
 "/**
   * Send the given Message.
   * 
   * Recipient/sender data will be retrieved from the Message API.
   * The return value is the number of recipients who were accepted for delivery.
   * 
   * @param Swift_Mime_Message $message
   * @param string[] &$failedRecipients to collect failures by-reference
   * @return int
   */",
 "/**
   * Stop the SMTP connection.
   */",
 "/**
   * Register a plugin.
   * 
   * @param Swift_Events_EventListener $plugin
   */",
 "/**
   * Reset the current mail transaction.
   */",
 "/**
   * Get the IoBuffer where read/writes are occurring.
   * 
   * @return Swift_Transport_IoBuffer
   */",
 "/**
   * Run a command against the buffer, expecting the given response codes.
   * 
   * If no response codes are given, the response will not be validated.
   * If codes are given, an exception will be thrown on an invalid response.
   * 
   * @param string $command
   * @param int[] $codes
   * @param string[] &$failures
   * @return string
   */",
 "/** Read the opening SMTP greeting */",
 "/** Send the HELO welcome */",
 "/** Send the MAIL FROM command */",
 "/** Send the RCPT TO command */",
 "/** Send the DATA command */",
 "/** Stream the contents of the message over the buffer */",
 "/** Determine the best-use reverse path for this message */",
 "/** Throw a TransportException, first sending it to any listeners */",
 "/** Throws an Exception if a response code is incorrect */",
 "/** Get an entire multi-line response using its sequence number */",
 "/** Send an email to the given recipients from the given reverse path */",
 "/** Send a message to the given To: recipients */",
 "/** Send a message to the given Cc: recipients */",
 "/** Send a message to all Bcc: recipients */",
 "/** Try to determine the hostname of the server this is run on */",
 "/** Determine is the $hostname is a fully-qualified name */",
 "/**
   * Destructor.
   */",
 "/**
 * Sends Messages over SMTP.
 * 
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Returns the token parser instances to add to the existing list.
     *
     * @return array An array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances
     */",
 "/**
     * Returns the node visitor instances to add to the existing list.
     *
     * @return array An array of Twig_NodeVisitorInterface instances
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
     * @param array $array
     *
     * @return array
     *
     * @throws UnexpectedTypeException if the given value is not an array
     */",
 "/**
     * @param array $array
     *
     * @return array
     *
     * @throws UnexpectedTypeException if the given value is not an array
     */",
 "/**
   * Get the type of Header that this instance represents.
   * @return int
   * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   * @see TYPE_DATE, TYPE_ID, TYPE_PATH
   */",
 "/**
   * Set the model for the field body.
   * The actual types needed will vary depending upon the type of Header.
   * @param mixed $model
   */",
 "/**
   * Set the charset used when rendering the Header.
   * @param string $charset
   */",
 "/**
   * Get the model for the field body.
   * The return type depends on the specifics of the Header.
   * @return mixed
   */",
 "/**
   * Get the name of this header (e.g. Subject).
   * The name is an identifier and as such will be immutable.
   * @return string
   */",
 "/**
   * Get the field body, prepared for folding into a final header value.
   * @return string
   */",
 "/**
   * Get this Header rendered as a compliant string.
   * @return string
   */",
 "/**
 * A MIME Header.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Checks that a name is valid.
     *
     * @param string $name An asset name candidate
     *
     * @throws InvalidArgumentException If the asset name is invalid
     */",
 "/**
 * Manages the available filters.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor
     *
     * @param  string  $methodName         The method name that raised the exception
     * @param  string  $argName            The argument name
     * @param  string  $argValue           The argument value that is not implemented
     * @param  string  $additionalMessage  An optional additional message to append to the exception message
     */",
 "/**
 * @author Eriksen Costa <eriksen.costa@infranology.com.br>
 */",
 "/**
     * Asks a question to the user.
     *
     * @param OutputInterface $output   An Output instance
     * @param string|array    $question The question to ask
     * @param string          $default  The default answer if none is given by the user
     *
     * @return string The user answer
     *
     * @throws \RuntimeException If there is no data to read in the input stream
     */",
 "/**
     * Asks a confirmation to the user.
     *
     * The question will be asked until the user answers by nothing, yes, or no.
     *
     * @param OutputInterface $output   An Output instance
     * @param string|array    $question The question to ask
     * @param Boolean         $default  The default answer if the user enters nothing
     *
     * @return Boolean true if the user has confirmed, false otherwise
     */",
 "/**
     * Asks for a value and validates the response.
     *
     * The validator receives the data to validate. It must return the
     * validated data when the data is valid and throw an exception
     * otherwise.
     *
     * @param OutputInterface $output    An Output instance
     * @param string|array    $question  The question to ask
     * @param callback        $validator A PHP callback
     * @param integer         $attempts  Max number of times to ask before giving up (false by default, which means infinite)
     * @param string          $default  The default answer if none is given by the user
     *
     * @return mixed
     *
     * @throws \Exception When any of the validators return an error
     */",
 "/**
     * Sets the input stream to read from when interacting with the user.
     *
     * This is mainly useful for testing purpose.
     *
     * @param resource $stream The input stream
     */",
 "/**
     * Returns the helper\'s canonical name.
     */",
 "/**
 * The Dialog class provides helpers to interact with the user.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Exception thrown when an ORM query unexpectedly does not return any results.
 * 
 * @author robo
 * @since 2.0
 */",
 "/**
     * @return Response A Response instance
     */",
 "/**
 * ConfiguratorController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @see EventDispatcherInterface::dispatch
     *
     * @api
     */",
 "/**
     * @see EventDispatcherInterface::getListeners
     */",
 "/**
     * @see EventDispatcherInterface::hasListeners
     */",
 "/**
     * @see EventDispatcherInterface::addListener
     *
     * @api
     */",
 "/**
     * @see EventDispatcherInterface::removeListener
     */",
 "/**
     * @see EventDispatcherInterface::addSubscriber
     *
     * @api
     */",
 "/**
     * @see EventDispatcherInterface::removeSubscriber
     */",
 "/**
     * Triggers the listeners of an event.
     *
     * This method can be overridden to add functionality that is executed
     * for each listener.
     *
     * @param array[callback] $listeners The event listeners.
     * @param string $eventName The name of the event to dispatch.
     * @param Event $event The event object to pass to the event handlers/listeners.
     */",
 "/**
     * Sorts the internal list of listeners for the given event by priority.
     *
     * @param string $eventName The name of the event.
     */",
 "/**
 * The EventDispatcherInterface is the central point of Symfony\'s event listener system.
 *
 * Listeners are registered on the manager and events are dispatched through the
 * manager.
 *
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Bernhard Schussek <bschussek@gmail.com>
 * @author  Fabien Potencier <fabien@symfony.com>
 * @author  Jordi Boggiano <j.boggiano@seld.be>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string $jpegtranBin Path to the jpegtran binary
     */",
 "/**
 * Runs assets through jpegtran.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Handles a Request to convert it to a Response.
     *
     * When $catch is true, the implementation must catch all exceptions
     * and do its best to convert them to a Response instance.
     *
     * @param  Request $request A Request instance
     * @param  integer $type    The type of the request
     *                          (one of HttpKernelInterface::MASTER_REQUEST or HttpKernelInterface::SUB_REQUEST)
     * @param  Boolean $catch   Whether to catch exceptions or not
     *
     * @return Response A Response instance
     *
     * @throws \Exception When an Exception occurs during processing
     *
     * @api
     */",
 "/**
 * HttpKernelInterface handles a Request to convert it to a Response.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor
     *
     * @param SecurityContext                $securityContext
     * @param RememberMeServicesInterface    $rememberMeServices
     * @param AuthenticationManagerInterface $authenticationManager
     * @param LoggerInterface                $logger
     * @param EventDispatcherInterface       $dispatcher
     */",
 "/**
     * Handles remember-me cookie based authentication.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
 * RememberMeListener implements authentication capabilities via a cookie
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param TemplateNameParserInterface $parser    A TemplateNameParserInterface instance
     * @param ContainerInterface          $container The DI container
     * @param LoaderInterface             $loader    A loader instance
     * @param GlobalVariables|null        $globals   A GlobalVariables instance or null
     */",
 "/**
     * @throws \InvalidArgumentException When the helper is not defined
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Renders a view and returns a Response.
     *
     * @param string   $view       The view name
     * @param array    $parameters An array of parameters to pass to the view
     * @param Response $response   A Response instance
     *
     * @return Response A Response instance
     */",
 "/**
 * This engine knows how to render Symfony templates.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param string $filename
     * @param integer $maxFiles The maximal amount of files to keep (0 means unlimited)
     * @param integer $level The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Rotates the files.
     */",
 "/**
 * Stores logs to files that are rotated every day and a limited number of files are kept.
 *
 * This rotation is only intended to be used as a workaround. Using logrotate to
 * handle the rotation is strongly encouraged when you can use it.
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Initializes a new instance of the Connection class.
     *
     * @param array $params  The connection parameters.
     * @param Driver $driver
     * @param Configuration $config
     * @param EventManager $eventManager
     */",
 "/**
     * Gets the parameters used during instantiation.
     *
     * @return array $params
     */",
 "/**
     * Gets the name of the database this Connection is connected to.
     *
     * @return string $database
     */",
 "/**
     * Gets the hostname of the currently connected database.
     * 
     * @return string
     */",
 "/**
     * Gets the port of the currently connected database.
     * 
     * @return mixed
     */",
 "/**
     * Gets the username used by this connection.
     * 
     * @return string
     */",
 "/**
     * Gets the password used by this connection.
     * 
     * @return string
     */",
 "/**
     * Gets the DBAL driver instance.
     *
     * @return \Doctrine\DBAL\Driver
     */",
 "/**
     * Gets the Configuration used by the Connection.
     *
     * @return \Doctrine\DBAL\Configuration
     */",
 "/**
     * Gets the EventManager used by the Connection.
     *
     * @return \Doctrine\Common\EventManager
     */",
 "/**
     * Gets the DatabasePlatform for the connection.
     *
     * @return \Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * Gets the ExpressionBuilder for the connection.
     *
     * @return \Doctrine\DBAL\Query\ExpressionBuilder
     */",
 "/**
     * Establishes the connection with the database.
     *
     * @return boolean TRUE if the connection was successfully established, FALSE if
     *                 the connection is already open.
     */",
 "/**
     * Prepares and executes an SQL query and returns the first row of the result
     * as an associative array.
     * 
     * @param string $statement The SQL query.
     * @param array $params The query parameters.
     * @return array
     */",
 "/**
     * Prepares and executes an SQL query and returns the first row of the result
     * as a numerically indexed array.
     *
     * @param string $statement         sql query to be executed
     * @param array $params             prepared statement params
     * @return array
     */",
 "/**
     * Prepares and executes an SQL query and returns the value of a single column
     * of the first row of the result.
     * 
     * @param string $statement         sql query to be executed
     * @param array $params             prepared statement params
     * @param int $colnum               0-indexed column number to retrieve
     * @return mixed
     */",
 "/**
     * Whether an actual connection to the database is established.
     *
     * @return boolean
     */",
 "/**
     * Checks whether a transaction is currently active.
     * 
     * @return boolean TRUE if a transaction is currently active, FALSE otherwise.
     */",
 "/**
     * Executes an SQL DELETE statement on a table.
     *
     * @param string $table The name of the table on which to delete.
     * @param array $identifier The deletion criteria. An associateve array containing column-value pairs.
     * @return integer The number of affected rows.
     */",
 "/**
     * Closes the connection.
     *
     * @return void
     */",
 "/**
     * Sets the transaction isolation level.
     *
     * @param integer $level The level to set.
     */",
 "/**
     * Gets the currently active transaction isolation level.
     *
     * @return integer The current transaction isolation level.
     */",
 "/**
     * Executes an SQL UPDATE statement on a table.
     *
     * @param string $table The name of the table to update.
     * @param array $identifier The update criteria. An associative array containing column-value pairs.
     * @return integer The number of affected rows.
     */",
 "/**
     * Inserts a table row with specified data.
     *
     * @param string $table The name of the table to insert data into.
     * @param array $data An associative array containing column-value pairs.
     * @return integer The number of affected rows.
     */",
 "/**
     * Sets the given charset on the current connection.
     *
     * @param string $charset The charset to set.
     */",
 "/**
     * Quote a string so it can be safely used as a table or column name, even if
     * it is a reserved name.
     *
     * Delimiting style depends on the underlying database platform that is being used.
     *
     * NOTE: Just because you CAN use quoted identifiers does not mean
     * you SHOULD use them. In general, they end up causing way more
     * problems than they solve.
     *
     * @param string $str The name to be quoted.
     * @return string The quoted name.
     */",
 "/**
     * Quotes a given input parameter.
     *
     * @param mixed $input Parameter to be quoted.
     * @param string $type Type of the parameter.
     * @return string The quoted parameter.
     */",
 "/**
     * Prepares and executes an SQL query and returns the result as an associative array.
     *
     * @param string $sql The SQL query.
     * @param array $params The query parameters.
     * @return array
     */",
 "/**
     * Prepares an SQL statement.
     *
     * @param string $statement The SQL statement to prepare.
     * @return Doctrine\DBAL\Driver\Statement The prepared statement.
     */",
 "/**
     * Executes an, optionally parameterized, SQL query.
     *
     * If the query is parameterized, a prepared statement is used.
     * If an SQLLogger is configured, the execution is logged.
     *
     * @param string $query The SQL query to execute.
     * @param array $params The parameters to bind to the query, if any.
     * @return Doctrine\DBAL\Driver\Statement The executed statement.
     * @internal PERF: Directly prepares a driver statement, not a wrapper.
     */",
 "/**
     * Executes an, optionally parameterized, SQL query and returns the result,
     * applying a given projection/transformation function on each row of the result.
     *
     * @param string $query The SQL query to execute.
     * @param array $params The parameters, if any.
     * @param Closure $mapper The transformation function that is applied on each row.
     *                        The function receives a single paramater, an array, that
     *                        represents a row of the result set.
     * @return mixed The projected result of the query.
     */",
 "/**
     * Executes an SQL statement, returning a result set as a Statement object.
     * 
     * @param string $statement
     * @param integer $fetchType
     * @return Doctrine\DBAL\Driver\Statement
     */",
 "/**
     * Executes an SQL INSERT/UPDATE/DELETE query with the given parameters
     * and returns the number of affected rows.
     * 
     * This method supports PDO binding types as well as DBAL mapping types.
     *
     * @param string $query The SQL query.
     * @param array $params The query parameters.
     * @param array $types The parameter types.
     * @return integer The number of affected rows.
     * @internal PERF: Directly prepares a driver statement, not a wrapper.
     */",
 "/**
     * Execute an SQL statement and return the number of affected rows.
     * 
     * @param string $statement
     * @return integer The number of affected rows.
     */",
 "/**
     * Returns the current transaction nesting level.
     *
     * @return integer The nesting level. A value of 0 means there\'s no active transaction.
     */",
 "/**
     * Fetch the SQLSTATE associated with the last database operation.
     *
     * @return integer The last error code.
     */",
 "/**
     * Fetch extended error information associated with the last database operation.
     *
     * @return array The last error information.
     */",
 "/**
     * Returns the ID of the last inserted row, or the last value from a sequence object,
     * depending on the underlying driver.
     *
     * Note: This method may not return a meaningful or consistent result across different drivers,
     * because the underlying database may not even support the notion of AUTO_INCREMENT/IDENTITY
     * columns or sequences.
     *
     * @param string $seqName Name of the sequence object from which the ID should be returned.
     * @return string A string representation of the last inserted ID.
     */",
 "/**
     * Executes a function in a transaction.
     *
     * The function gets passed this Connection instance as an (optional) parameter.
     *
     * If an exception occurs during execution of the function or transaction commit,
     * the transaction is rolled back and the exception re-thrown.
     *
     * @param Closure $func The function to execute transactionally.
     */",
 "/**
     * Set if nested transactions should use savepoints
     *
     * @param boolean
     * @return void
     */",
 "/**
     * Get if nested transactions should use savepoints
     *
     * @return boolean
     */",
 "/**
     * Returns the savepoint name to use for nested transactions are false if they are not supported
     * \"savepointFormat\" parameter is not set
     *
     * @return mixed a string with the savepoint name or false
     */",
 "/**
     * Starts a transaction by suspending auto-commit mode.
     *
     * @return void
     */",
 "/**
     * Commits the current transaction.
     *
     * @return void
     * @throws ConnectionException If the commit failed due to no active transaction or
     *                             because the transaction was marked for rollback only.
     */",
 "/**
     * Cancel any database changes done during the current transaction.
     *
     * this method can be listened with onPreTransactionRollback and onTransactionRollback
     * eventlistener methods
     *
     * @throws ConnectionException If the rollback operation failed.
     */",
 "/**
     * createSavepoint
     * creates a new savepoint
     *
     * @param string $savepoint     name of a savepoint to set
     * @return void
     */",
 "/**
     * releaseSavePoint
     * releases given savepoint
     *
     * @param string $savepoint     name of a savepoint to release
     * @return void
     */",
 "/**
     * rollbackSavePoint
     * releases given savepoint
     *
     * @param string $savepoint     name of a savepoint to rollback to
     * @return void
     */",
 "/**
     * Gets the wrapped driver connection.
     *
     * @return Doctrine\DBAL\Driver\Connection
     */",
 "/**
     * Gets the SchemaManager that can be used to inspect or change the
     * database schema through the connection.
     *
     * @return Doctrine\DBAL\Schema\SchemaManager
     */",
 "/**
     * Marks the current transaction so that the only possible
     * outcome for the transaction to be rolled back.
     * 
     * @throws ConnectionException If no transaction is active.
     */",
 "/**
     * Check whether the current transaction is marked for rollback only.
     * 
     * @return boolean
     * @throws ConnectionException If no transaction is active.
     */",
 "/**
     * Converts a given value to its database representation according to the conversion
     * rules of a specific DBAL mapping type.
     * 
     * @param mixed $value The value to convert.
     * @param string $type The name of the DBAL mapping type.
     * @return mixed The converted value.
     */",
 "/**
     * Converts a given value to its PHP representation according to the conversion
     * rules of a specific DBAL mapping type.
     * 
     * @param mixed $value The value to convert.
     * @param string $type The name of the DBAL mapping type.
     * @return mixed The converted type.
     */",
 "/**
     * Binds a set of parameters, some or all of which are typed with a PDO binding type
     * or DBAL mapping type, to a given statement.
     * 
     * @param $stmt The statement to bind the values to.
     * @param array $params The map/list of named/positional parameters.
     * @param array $types The parameter types (PDO binding types or DBAL mapping types).
     * @internal Duck-typing used on the $stmt parameter to support driver statements as well as
     *           raw PDOStatement instances.
     */",
 "/**
     * Create a new instance of a SQL query builder.
     * 
     * @return Query\QueryBuilder 
     */",
 "/**
 * A wrapper around a Doctrine\DBAL\Driver\Connection that adds features like
 * events, transaction isolation levels, configuration, emulated transaction nesting,
 * lazy connecting and more.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author  Lukas Smith <smith@pooteeweet.org> (MDB2 library)
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Returns the security context service.
     *
     * @return Symfony\Component\Security\Core\SecurityContext|void The security context
     */",
 "/**
     * Returns the current user.
     *
     * @return mixed|void
     *
     * @see Symfony\Component\Security\Core\Authentication\Token\TokenInterface::getUser()
     */",
 "/**
     * Returns the current request.
     *
     * @return Symfony\Component\HttpFoundation\Request|void The http request object
     */",
 "/**
     * Returns the current session.
     *
     * @return Symfony\Component\HttpFoundation\Session|void The session
     */",
 "/**
     * Returns the current app environment.
     *
     * @return string The current environment string (e.g \'dev\')
     */",
 "/**
     * Returns the current app debug mode.
     *
     * @return Boolean The current debug mode
     */",
 "/**
 * GlobalVariables is the entry point for Symfony global variables in Twig templates.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Handles basic authentication.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
 * BasicAuthenticationListener implements Basic HTTP authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * RouterInterface is the interface that all Router classes must implements.
 *
 * This interface is the concatenation of UrlMatcherInterface and UrlGeneratorInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Creates a Response object to send upon a successful logout.
     *
     * @param Request $request
     *
     * @return Response never null
     */",
 "/**
 * LogoutSuccesshandlerInterface.
 *
 * In contrast to the LogoutHandlerInterface, this interface can return a response
 * which is then used instead of the default behavior.
 *
 * If you want to only perform some logout related clean-up task, use the
 * LogoutHandlerInterface instead.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Base exception class for package Doctrine\Common
 * @author heinrich
 *
 */",
 "/**
     * Write dot language output to a file. This should usually be a *.dot file.
     *
     * You have to convert the output into a viewable format. For example use \"neato\" on linux systems
     * and execute:
     *
     *  neato -Tpng -o er.png er.dot
     *
     * @param string $filename
     * @return void
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Constructs a joinColumn mapping array based on the information
     * found in the given SimpleXMLElement.
     *
     * @param $joinColumnElement The XML element.
     * @return array The mapping array.
     */",
 "/**
     * Gathers a list of cascade options found in the given cascade element.
     *
     * @param $cascadeElement The cascade element.
     * @return array The list of cascade options.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * XmlDriver is a metadata driver that enables mapping through XML files.
 *
 * @license 	http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    	www.doctrine-project.org
 * @since   	2.0
 * @version     $Revision$
 * @author		Benjamin Eberlei <kontakt@beberlei.de>
 * @author		Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Reads the SecurityContext from the session.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
     * Writes the SecurityContext to the session.
     *
     * @param FilterResponseEvent $event A FilterResponseEvent instance
     */",
 "/**
     * Refreshes the user by reloading it from the user provider
     *
     * @param TokenInterface $token
     *
     * @return TokenInterface|null
     */",
 "/**
 * ContextListener manages the SecurityContext persistence through a session.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Handles access authorization.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
 * AccessListener enforces access control rules.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * TokenNotFoundException is thrown if a Token cannot be found.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param LoaderInterface[] $loaders An array of loaders
     */",
 "/**
     * Returns a loader able to load the resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return LoaderInterface|false A LoaderInterface instance
     */",
 "/**
     * Adds a loader.
     *
     * @param LoaderInterface $loader A LoaderInterface instance
     */",
 "/**
     * Returns the registered loaders.
     *
     * @return LoaderInterface[] An array of LoaderInterface instances
     */",
 "/**
 * LoaderResolver selects a loader for a given resource.
 *
 * A resource can be anything (e.g. a full path to a config file or a Closure).
 * Each loader determines whether it can load a resource and how.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @group integration
 */",
 "/**
     * Returns the identifier assigned to the given entity.
     *
     * @param object $entity
     * @return mixed
     * @override
     */",
 "/**
 * Special generator for application-assigned identifiers (doesnt really generate anything).
 *
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string  $id              The service identifier
     * @param int     $invalidBehavior The behavior when the service does not exist
     * @param Boolean $strict          Sets how this reference is validated
     *
     * @see Container
     */",
 "/**
     * __toString.
     *
     * @return string The service identifier
     */",
 "/**
     * Returns the behavior to be used when the service does not exist.
     *
     * @return int
     */",
 "/**
     * Returns true when this Reference is strict
     *
     * @return Boolean
     */",
 "/**
 * Reference represents a service reference.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Set a string into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param string $string
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_OutputByteStream $os
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Provides a ByteStream which when written to, writes data to $itemKey.
   * NOTE: The stream will always write in append mode.
   * @param string $nsKey
   * @param string $itemKey
   * @return Swift_InputByteStream
   */",
 "/**
   * Get data back out of the cache as a string.
   * @param string $nsKey
   * @param string $itemKey
   * @return string
   */",
 "/**
   * Get data back out of the cache as a ByteStream.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_InputByteStream $is to write the data to
   */",
 "/**
   * Check if the given $itemKey exists in the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @return boolean
   */",
 "/**
   * Clear data for $itemKey in the namespace $nsKey if it exists.
   * @param string $nsKey
   * @param string $itemKey
   */",
 "/**
   * Clear all data in the namespace $nsKey if it exists.
   * @param string $nsKey
   */",
 "/**
 * A basic KeyCache backed by an array.
 * @package Swift
 * @subpackage KeyCache
 * @author Xavier De Cock <xdecock@gmail.com>
 */",
 "/**
 * X509Factory creates services for X509 certificate authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Filters a single asset.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string $identifier
     * @param string $type
     * @return void
     */",
 "/**
     * Constructs an ObjectIdentity for the given domain object
     *
     * @param object $domainObject
     * @throws \InvalidArgumentException
     * @return ObjectIdentity
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Returns a textual representation of this object identity
     *
     * @return string
     */",
 "/**
 * ObjectIdentity implementation
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
 * LoggerInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param \Iterator $iterator The Iterator to filter
     * @param integer   $mode     The mode (self::ONLY_FILES or self::ONLY_DIRECTORIES)
     */",
 "/**
     * Filters the iterator values.
     *
     * @return Boolean true if the value should be kept, false otherwise
     */",
 "/**
 * FileTypeFilterIterator only keeps files, directories, or both.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Encode a given string to produce an encoded string.
   * @param string $string
   * @param int $firstLineOffset if first line needs to be shorter
   * @param int $maxLineLength - 0 indicates the default length for this encoding
   * @return string
   */",
 "/**
 * Interface for all Encoder schemes.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * The nodes are automatically made available as properties ($this->node).
     * The attributes are automatically made available as array items ($this[\'name\']).
     *
     * @param array   $nodes      An array of named nodes
     * @param array   $attributes An array of attributes (should not be nodes)
     * @param integer $lineno     The line number
     * @param string  $tag        The tag name associated with the Node
     */",
 "/**
     * Returns true if the attribute is defined.
     *
     * @param  string  The attribute name
     *
     * @return Boolean true if the attribute is defined, false otherwise
     */",
 "/**
     * Gets an attribute.
     *
     * @param  string The attribute name
     *
     * @return mixed  The attribute value
     */",
 "/**
     * Sets an attribute.
     *
     * @param string The attribute name
     * @param mixed  The attribute value
     */",
 "/**
     * Removes an attribute.
     *
     * @param string The attribute name
     */",
 "/**
     * Returns true if the node with the given identifier exists.
     *
     * @param  string  The node name
     *
     * @return Boolean true if the node with the given name exists, false otherwise
     */",
 "/**
     * Gets a node by name.
     *
     * @param  string The node name
     *
     * @return Twig_Node A Twig_Node instance
     */",
 "/**
     * Sets a node.
     *
     * @param string    The node name
     * @param Twig_Node A Twig_Node instance
     */",
 "/**
     * Removes a node by name.
     *
     * @param string The node name
     */",
 "/**
 * Represents a node in the AST.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * Validates whether a value is a valid IP address
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Joseph Bielawski <stloyd@gmail.com>
 *
 * @api
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for day of week format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Warms up the cache.
     *
     * @param string $cacheDir The cache directory
     */",
 "/**
     * Checks whether this warmer is optional or not.
     *
     * @return Boolean always true
     */",
 "/**
 * Aggregates several cache warmers into a single one.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * OrderByItem ::= (ResultVariable | StateFieldPathExpression) [\"ASC\" | \"DESC\"]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * @param ClassMetadataInfo $metadata 
     * @return string $exported
     */",
 "/**
*ClassMetadataexporterforPHPclasseswithannotations
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.org
*@since2.0
*@version$Revision$
*@authorJonathanWage<jonwage@gmail.com>
*/",
 "/**
   * Notifies this ReportNotifier that $address failed or succeeded.
   * @param Swift_Mime_Message $message
   * @param string $address
   * @param int $result from {@link RESULT_PASS, RESULT_FAIL}
   */",
 "/**
   * Get an array of addresses for which delivery failed.
   * @return array
   */",
 "/**
   * Clear the buffer (empty the list).
   */",
 "/**
 * A reporter which \"collects\" failures for the Reporter plugin.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
     * Dumps a set of routes to a PHP class.
     *
     * Available options:
     *
     *  * class:      The class name
     *  * base_class: The base class name
     *
     * @param  array  $options An array of options
     *
     * @return string A PHP class representing the generator class
     *
     * @api
     */",
 "/**
 * PhpGeneratorDumper creates a PHP class able to generate URLs for a given set of routes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Exception class for when a circular reference is detected when importing resources.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new SimpleMessage with $headers, $encoder and $cache.
   * @param Swift_Mime_HeaderSet $headers
   * @param Swift_Mime_ContentEncoder $encoder
   * @param Swift_KeyCache $cache
   * @param Swift_Mime_Grammar $grammar
   * @param string $charset
   */",
 "/**
   * Always returns {@link LEVEL_TOP} for a message instance.
   * @return int
   */",
 "/**
   * Set the subject of this message.
   * @param string $subject
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the subject of this message.
   * @return string
   */",
 "/**
   * Set the date at which this message was created.
   * @param int $date
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the date at which this message was created.
   * @return int
   */",
 "/**
   * Set the return-path (the bounce address) of this message.
   * @param string $address
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the return-path (bounce address) of this message.
   * @return string
   */",
 "/**
   * Set the sender of this message.
   * This does not override the From field, but it has a higher significance.
   * @param string $sender
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the sender of this message.
   * @return string
   */",
 "/**
   * Add a From: address to this message.
   * 
   * If $name is passed this name will be associated with the address.
   * 
   * @param string $address
   * @param string $name optional
   */",
 "/**
   * Set the from address of this message.
   * 
   * You may pass an array of addresses if this message is from multiple people.
   * 
   * If $name is passed and the first parameter is a string, this name will be
   * associated with the address.
   * 
   * @param string $addresses
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the from address of this message.
   * 
   * @return string
   */",
 "/**
   * Add a Reply-To: address to this message.
   * 
   * If $name is passed this name will be associated with the address.
   * 
   * @param string $address
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Set the reply-to address of this message.
   * 
   * You may pass an array of addresses if replies will go to multiple people.
   * 
   * If $name is passed and the first parameter is a string, this name will be
   * associated with the address.
   *
   * @param string $addresses
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the reply-to address of this message.
   * 
   * @return string
   */",
 "/**
   * Add a To: address to this message.
   * 
   * If $name is passed this name will be associated with the address.
   * 
   * @param string $address
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Set the to addresses of this message.
   * 
   * If multiple recipients will receive the message and array should be used.
   * 
   * If $name is passed and the first parameter is a string, this name will be
   * associated with the address.
   * 
   * @param array $addresses
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the To addresses of this message.
   * 
   * @return array
   */",
 "/**
   * Add a Cc: address to this message.
   * 
   * If $name is passed this name will be associated with the address.
   * 
   * @param string $address
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Set the Cc addresses of this message.
   * 
   * If $name is passed and the first parameter is a string, this name will be
   * associated with the address.
   *
   * @param array $addresses
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the Cc address of this message.
   * 
   * @return array
   */",
 "/**
   * Add a Bcc: address to this message.
   * 
   * If $name is passed this name will be associated with the address.
   * 
   * @param string $address
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Set the Bcc addresses of this message.
   * 
   * If $name is passed and the first parameter is a string, this name will be
   * associated with the address.
   * 
   * @param array $addresses
   * @param string $name optional
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the Bcc addresses of this message.
   * 
   * @return array
   */",
 "/**
   * Set the priority of this message.
   * The value is an integer where 1 is the highest priority and 5 is the lowest.
   * @param int $priority
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the priority of this message.
   * The returned value is an integer where 1 is the highest priority and 5
   * is the lowest.
   * @return int
   */",
 "/**
   * Ask for a delivery receipt from the recipient to be sent to $addresses
   * @param array $addresses
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Get the addresses to which a read-receipt will be sent.
   * @return string
   */",
 "/**
   * Attach a {@link Swift_Mime_MimeEntity} such as an Attachment or MimePart.
   * @param Swift_Mime_MimeEntity $entity
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Remove an already attached entity.
   * @param Swift_Mime_MimeEntity $entity
   * @return Swift_Mime_SimpleMessage
   */",
 "/**
   * Attach a {@link Swift_Mime_MimeEntity} and return it\'s CID source.
   * This method should be used when embedding images or other data in a message.
   * @param Swift_Mime_MimeEntity $entity
   * @return string
   */",
 "/**
   * Get this message as a complete string.
   * @return string
   */",
 "/**
   * Returns a string representation of this object.
   *
   * @return string
   *
   * @see toString()
   */",
 "/**
   * Write this message to a {@link Swift_InputByteStream}.
   * @param Swift_InputByteStream $is
   */",
 "/** @see Swift_Mime_SimpleMimeEntity::_getIdField() */",
 "/** Turn the body of this message into a child of itself if needed */",
 "/** Get the highest nesting level nested inside this message */",
 "/**
 * The default email message class.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * @param ClassMetadataInfo $metadata 
     * @return mixed $exported
     */",
 "/**
     * @param \SimpleXMLElement $simpleXml
     * @return string $xml
     */",
 "/**
 * ClassMetadata exporter for Doctrine XML mapping files
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array|Traversable $parsers A Traversable of Twig_TokenParserInterface instances
     * @param array|Traversable $brokers A Traversable of Twig_TokenParserBrokerInterface instances
     */",
 "/**
     * Adds a TokenParser.
     *
     * @param Twig_TokenParserInterface $parser A Twig_TokenParserInterface instance
     */",
 "/**
     * Adds a TokenParserBroker.
     *
     * @param Twig_TokenParserBroker $broker A Twig_TokenParserBroker instance
     */",
 "/**
     * Gets a suitable TokenParser for a tag.
     *
     * First looks in parsers, then in brokers.
     *
     * @param string $tag A tag name
     *
     * @return null|Twig_TokenParserInterface A Twig_TokenParserInterface or null if no suitable TokenParser was found
     */",
 "/**
 * Default implementation of a token parser broker.
 *
 * @package twig
 * @author  Arnaud Le Blanc <arnaud.lb@gmail.com>
 */",
 "/**
     * Initializes a new instance of the <tt>ParserResult</tt> class.
     * The new instance is initialized with an empty <tt>ResultSetMapping</tt>.
     */",
 "/**
     * Gets the ResultSetMapping for the parsed query.
     * 
     * @return ResultSetMapping The result set mapping of the parsed query or NULL
     *                          if the query is not a SELECT query.
     */",
 "/**
     * Sets the ResultSetMapping of the parsed query.
     *
     * @param ResultSetMapping $rsm
     */",
 "/**
     * Sets the SQL executor that should be used for this ParserResult.
     * 
     * @param \Doctrine\ORM\Query\Exec\AbstractSqlExecutor $executor
     */",
 "/**
     * Gets the SQL executor used by this ParserResult.
     * 
     * @return \Doctrine\ORM\Query\Exec\AbstractSqlExecutor
     */",
 "/**
     * Adds a DQL to SQL parameter mapping. One DQL parameter name/position can map to
     * several SQL parameter positions.
     *
     * @param string|integer $dqlPosition
     * @param integer $sqlPosition
     */",
 "/**
     * Gets all DQL to SQL parameter mappings.
     * 
     * @return array The parameter mappings.
     */",
 "/**
     * Gets the SQL parameter positions for a DQL parameter name/position.
     *
     * @param string|integer $dqlPosition The name or position of the DQL parameter.
     * @return array The positions of the corresponding SQL parameters.
     */",
 "/**
 * Encapsulates the resulting components from a DQL query parsing process that
 * can be serialized.
 *
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Janne Vanhala <jpvanhal@cc.hut.fi>
 * @author		Roman Borschel <roman@code-factory.org>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        http://www.doctrine-project.org
 * @since       2.0
 * @version     $Revision$
 */",
 "/**
     *
     * @param object $entity
     * @param EntityManager $em
     * @param array $changeSet
     */",
 "/**
     * Field has a changeset?
     *
     * @return bool
     */",
 "/**
     * Get the old value of the changeset of the changed field.
     * 
     * @param  string $field
     * @return mixed
     */",
 "/**
     * Get the new value of the changeset of the changed field.
     *
     * @param  string $field
     * @return mixed
     */",
 "/**
     * Set the new value of this field.
     * 
     * @param string $field
     * @param mixed $value
     */",
 "/**
 * Class that holds event arguments for a preInsert/preUpdate event.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * @api
     */",
 "/**
     * @return ConstraintViolationList
     *
     * @api
     */",
 "/**
     * @return GraphWalker
     */",
 "/**
     * @return ClassMetadataFactoryInterface
     */",
 "/**
 * The central object representing a single validation process.
 *
 * This object is used by the GraphWalker to initialize validation of different
 * items and keep track of the violations.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
 * InvalidArgumentException
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Used for testing purposes.
 *
 * It records all records and gives you access to them for verification.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Constructor.
     *
     * @param UserInterface $user
     * @param string        $providerKey
     * @param string        $key
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Authentication Token for \"Remember-Me\".
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Dispatches an event to all registered listeners.
     *
     * @param string $eventName The name of the event to dispatch. The name of
     *                          the event is the name of the method that is
     *                          invoked on listeners.
     * @param Event  $event     The event to pass to the event handlers/listeners.
     *                          If not supplied, an empty Event instance is created.
     *
     * @api
     */",
 "/**
     * Adds an event listener that listens on the specified events.
     *
     * @param string   $eventName The event to listen on
     * @param callable $listener  The listener
     * @param integer  $priority  The higher this value, the earlier an event
     *                            listener will be triggered in the chain (defaults to 0)
     *
     * @api
     */",
 "/**
     * Adds an event subscriber.
     *
     * The subscriber is asked for all the events he is
     * interested in and added as a listener for these events.
     *
     * @param EventSubscriberInterface $subscriber The subscriber.
     *
     * @api
     */",
 "/**
     * Removes an event listener from the specified events.
     *
     * @param string|array $eventName The event(s) to remove a listener from
     * @param callable     $listener  The listener to remove
     */",
 "/**
     * Removes an event subscriber.
     *
     * @param EventSubscriberInterface $subscriber The subscriber
     */",
 "/**
     * Gets the listeners of a specific event or all listeners.
     *
     * @param string $eventName The name of the event
     *
     * @return array The event listeners for the specified event, or all event listeners by event name
     */",
 "/**
     * Checks whether an event has any registered listeners.
     *
     * @param string $eventName The name of the event
     *
     * @return Boolean true if the specified event has any listeners, false otherwise
     */",
 "/**
 * The EventDispatcherInterface is the central point of Symfony\'s event listener system.
 * Listeners are registered on the manager and events are dispatched through the
 * manager.
 *
 * @author Bernhard Schussek <bschussek@gmail.com>
 *
 * @api
 */",
 "/**
     * @param ClassMetadataInfo $classMetadata
     * @param EntityManager $em
     */",
 "/**
     * @return ClassMetadataInfo
     */",
 "/**
     * @return EntityManager
     */",
 "/**
 * Class that holds event arguments for a loadMetadata event.
 *
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @since 2.0
 */",
 "/**
     * Constructor
     *
     * @param integer $offset The offset of YAML document (used for line numbers in error messages)
     */",
 "/**
     * Parses a YAML string to a PHP value.
     *
     * @param  string $value A YAML string
     *
     * @return mixed  A PHP value
     *
     * @throws ParseException If the YAML is not valid
     */",
 "/**
     * Returns the current line number (takes the offset into account).
     *
     * @return integer The current line number
     */",
 "/**
     * Returns the current line indentation.
     *
     * @return integer The current line indentation
     */",
 "/**
     * Returns the next embed block of YAML.
     *
     * @param integer $indentation The indent level at which the block is to be read, or null for default
     *
     * @return string A YAML string
     *
     * @throws ParseException When indentation problem are detected
     */",
 "/**
     * Moves the parser to the next line.
     *
     * @return Boolean
     */",
 "/**
     * Moves the parser to the previous line.
     */",
 "/**
     * Parses a YAML value.
     *
     * @param  string $value A YAML value
     *
     * @return mixed  A PHP value
     *
     * @throws ParseException When reference does not exist
     */",
 "/**
     * Parses a folded scalar.
     *
     * @param  string  $separator   The separator that was used to begin this folded scalar (| or >)
     * @param  string  $indicator   The indicator that was used to begin this folded scalar (+ or -)
     * @param  integer $indentation The indentation that was used to begin this folded scalar
     *
     * @return string  The text value
     */",
 "/**
     * Returns true if the next line is indented.
     *
     * @return Boolean Returns true if the next line is indented, false otherwise
     */",
 "/**
     * Returns true if the current line is blank or if it is a comment line.
     *
     * @return Boolean Returns true if the current line is empty or if it is a comment line, false otherwise
     */",
 "/**
     * Returns true if the current line is blank.
     *
     * @return Boolean Returns true if the current line is blank, false otherwise
     */",
 "/**
     * Returns true if the current line is a comment line.
     *
     * @return Boolean Returns true if the current line is a comment line, false otherwise
     */",
 "/**
     * Cleanups a YAML string to be parsed.
     *
     * @param  string $value The input YAML string
     *
     * @return string A cleaned up YAML string
     */",
 "/**
 * Parser parses YAML strings to convert them to PHP arrays.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * SimpleArithmeticExpression ::= ArithmeticTerm {(\"+\" | \"-\") ArithmeticTerm}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Get the Encoder that provides 7-bit encoding.
   * 
   * @return Swift_Mime_ContentEncoder
   */",
 "/**
   * Get the Encoder that provides 8-bit encoding.
   * 
   * @return Swift_Mime_ContentEncoder
   */",
 "/**
   * Get the Encoder that provides Quoted-Printable (QP) encoding.
   * 
   * @return Swift_Mime_ContentEncoder
   */",
 "/**
   * Get the Encoder that provides Base64 encoding.
   * 
   * @return Swift_Mime_ContentEncoder
   */",
 "/**
 * Provides quick access to each encoding type.
 * 
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 */",
 "/**
     * Checks the ContainerBuilder object for circular references.
     *
     * @param ContainerBuilder $container The ContainerBuilder instances
     */",
 "/**
     * Checks for circular references.
     *
     * @param array $edges An array of Nodes
     *
     * @throws \RuntimeException When a circular reference is found.
     */",
 "/**
 * Checks your services for circular references
 *
 * References from method calls are ignored since we might be able to resolve
 * these references depending on the order in which services are called.
 *
 * Circular reference from method calls will only be detected at run-time.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Accepts a list of LoaderInterface instances
     *
     * @param array $loaders An array of LoaderInterface instances
     *
     * @throws MappingException If any of the loaders does not implement LoaderInterface
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Calls multiple LoaderInterface instances in a chain
 *
 * This class accepts multiple instances of LoaderInterface to be passed to the
 * constructor. When loadClassMetadata() is called, the same method is called
 * in <em>all</em> of these loaders, regardless of whether any of them was
 * successful or not.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Create a Connection to an Oracle Database using oci8 extension.
     * 
     * @param string $username
     * @param string $password
     * @param string $db
     */",
 "/**
     * Create a non-executed prepared statement.
     * 
     * @param  string $prepareString
     * @return OCI8Statement
     */",
 "/**
     * @param string $sql
     * @return OCI8Statement
     */",
 "/**
     * Quote input value.
     *
     * @param mixed $input
     * @param int $type PDO::PARAM* 
     * @return mixed
     */",
 "/**
     *
     * @param  string $statement
     * @return int
     */",
 "/**
     * Start a transactiom
     *
     * Oracle has to explicitly set the autocommit mode off. That means
     * after connection, a commit or rollback there is always automatically
     * opened a new transaction.
     *
     * @return bool
     */",
 "/**
     * @throws OCI8Exception
     * @return bool
     */",
 "/**
     * @throws OCI8Exception
     * @return bool
     */",
 "/**
 * OCI8 implementation of the Connection interface.
 *
 * @since 2.0
 */",
 "/**
     * @param AbstractPlatform $platform
     */",
 "/**
     * @param Schema $schema
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @param Column $column
     */",
 "/**
     * @param Table $localTable
     * @param ForeignKeyConstraint $fkConstraint
     */",
 "/**
     * @param Table $table
     * @param Index $index
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
     * @return void
     */",
 "/**
     * @return array
     */",
 "/**
 * Gather SQL statements that allow to completly drop the current schema.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * This class is used for testing purposes, and is not really suited for production.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Thrown when an error occurred during file upload
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * @expectedException InvalidArgumentException
     */",
 "/**
     * @expectedException Symfony\Component\Config\Definition\Exception\InvalidConfigurationException
     */",
 "/**
     * @expectedException Symfony\Component\Config\Definition\Exception\InvalidConfigurationException
     */",
 "/**
     * @expectedException Symfony\Component\Config\Definition\Exception\InvalidConfigurationException
     */",
 "/**
     * @expectedException Symfony\Component\Config\Definition\Exception\InvalidConfigurationException
     */",
 "/**
     * Assertion on the Class of a DIC Service Definition.
     *
     * @param \Symfony\Component\DependencyInjection\Definition $definition
     * @param string $expectedClass
     */",
 "/**
     * Constructor.
     *
     * @param ContainerBuilder $container The service container to dump
     *
     * @api
     */",
 "/**
 * Dumper is the abstract class for all built-in dumpers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns an array of event names this subscriber wants to listen to.
     *
     * The array keys are event names and the value can be:
     *
     *  * The method name to call (priority defaults to 0)
     *  * An array composed of the method name to call and the priority
     *
     * For instance:
     *
     *  * array(\'eventName\' => \'methodName\')
     *  * array(\'eventName\' => array(\'methodName\', $priority))
     *
     * @return array The event names to listen to
     *
     * @api
     */",
 "/**
 * An EventSubscriber knows himself what events he is interested in.
 * If an EventSubscriber is added to an EventDispatcherInterface, the manager invokes
 * {@link getSubscribedEvents} and registers the subscriber as a listener for all
 * returned events.
 *
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Bernhard Schussek <bschussek@gmail.com>
 *
 * @api
 */",
 "/**
 * Represents the main form extension, which loads the core functionality.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * JoinAssociationPathExpression ::= IdentificationVariable \".\" (SingleValuedAssociationField | CollectionValuedAssociationField)
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Create a new Mailbox Header with a list of $addresses.
   * @param string $name
   * @param array|string $addresses
   * @return Swift_Mime_Header
   */",
 "/**
   * Create a new Date header using $timestamp (UNIX time).
   * @param string $name
   * @param int $timestamp
   * @return Swift_Mime_Header
   */",
 "/**
   * Create a new basic text header with $name and $value.
   * @param string $name
   * @param string $value
   * @return Swift_Mime_Header
   */",
 "/**
   * Create a new ParameterizedHeader with $name, $value and $params.
   * @param string $name
   * @param string $value
   * @param array $params
   * @return Swift_Mime_ParameterizedHeader
   */",
 "/**
   * Create a new ID header for Message-ID or Content-ID.
   * @param string $name
   * @param string|array $ids
   * @return Swift_Mime_Header
   */",
 "/**
   * Create a new Path header with an address (path) in it.
   * @param string $name
   * @param string $path
   * @return Swift_Mime_Header
   */",
 "/**
 * Creates MIME headers.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
 * This exception is usually not encountered by the end-user, but only used
 * internally to signal the parent scope to unset a key.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * We specifically require this method so we can check for object equality
     * explicitly, and do not have to rely on referencial equality instead.
     *
     * Though in most cases, both checks should result in the same outcome.
     *
     * Referential Equality: $object1 === $object2
     * Example for Object Equality: $object1->getId() === $object2->getId()
     *
     * @param ObjectIdentityInterface $identity
     * @return Boolean
     */",
 "/**
     * Obtains a unique identifier for this object. The identifier must not be
     * re-used for other objects with the same type.
     *
     * @return string cannot return null
     */",
 "/**
     * Returns a type for the domain object. Typically, this is the PHP class name.
     *
     * @return string cannot return null
     */",
 "/**
 * Represents the identity of an individual domain object instance.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Attempts to establish a connection with the underlying driver.
     *
     * @param array $params
     * @param string $username
     * @param string $password
     * @param array $driverOptions
     * @return Doctrine\DBAL\Driver\Connection
     */",
 "/**
     * Constructs the MySql PDO DSN.
     *
     * @return string  The DSN.
     */",
 "/**
     * Gets the DatabasePlatform instance that provides all the metadata about
     * the platform this driver connects to.
     *
     * @return Doctrine\DBAL\Platforms\AbstractPlatform The database platform.
     */",
 "/**
     * Gets the SchemaManager that can be used to inspect and change the underlying
     * database schema of the platform this driver connects to.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return Doctrine\DBAL\SchemaManager
     */",
 "/**
     * Gets the name of the driver.
     *
     * @return string The name of the driver.
     */",
 "/**
     * Get the name of the database connected to for this driver.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return string $database
     */",
 "/**
 * Driver for the PDO IBM extension
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string $pngoutBin Path to the pngout binary
     */",
 "/**
 * Runs assets through pngout.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for year format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * @expectedException \RuntimeException
     * @expectedMessage You have overridden a secured method \"differentMethodSignature\" in \"SubService\". Please copy over the applicable security metadata, and also add @SatisfiesParentSecurityPolicy.
     */",
 "/**
   * Create a new DependencyException with $message.
   * @param string $message
   */",
 "/**
 * DependencyException thrown when a requested dependeny is missing.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * The ACL this ACE is associated with.
     *
     * @return AclInterface
     */",
 "/**
     * The primary key of this ACE
     *
     * @return integer
     */",
 "/**
     * The permission mask of this ACE
     *
     * @return integer
     */",
 "/**
     * The security identity associated with this ACE
     *
     * @return SecurityIdentityInterface
     */",
 "/**
     * The strategy for comparing masks
     *
     * @return string
     */",
 "/**
     * Returns whether this ACE is granting, or denying
     *
     * @return Boolean
     */",
 "/**
 * This class represents an individual entry in the ACL list.
 *
 * Instances MUST be immutable, as they are returned by the ACL and should not
 * allow client modification.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * The available options are:
     *
     *   * debug:                 If true, the traces are added as a HTTP header to ease debugging
     *
     *   * default_ttl            The number of seconds that a cache entry should be considered
     *                            fresh when no explicit freshness information is provided in
     *                            a response. Explicit Cache-Control or Expires headers
     *                            override this value. (default: 0)
     *
     *   * private_headers        Set of request headers that trigger \"private\" cache-control behavior
     *                            on responses that don\'t explicitly state whether the response is
     *                            public or private via a Cache-Control directive. (default: Authorization and Cookie)
     *
     *   * allow_reload           Specifies whether the client can force a cache reload by including a
     *                            Cache-Control \"no-cache\" directive in the request. Set it to ``true``
     *                            for compliance with RFC 2616. (default: false)
     *
     *   * allow_revalidate       Specifies whether the client can force a cache revalidate by including
     *                            a Cache-Control \"max-age=0\" directive in the request. Set it to ``true``
     *                            for compliance with RFC 2616. (default: false)
     *
     *   * stale_while_revalidate Specifies the default number of seconds (the granularity is the second as the
     *                            Response TTL precision is a second) during which the cache can immediately return
     *                            a stale response while it revalidates it in the background (default: 2).
     *                            This setting is overridden by the stale-while-revalidate HTTP Cache-Control
     *                            extension (see RFC 5861).
     *
     *   * stale_if_error         Specifies the default number of seconds (the granularity is the second) during which
     *                            the cache can serve a stale response when an error is encountered (default: 60).
     *                            This setting is overridden by the stale-if-error HTTP Cache-Control extension
     *                            (see RFC 5861).
     *
     * @param HttpKernelInterface $kernel  An HttpKernelInterface instance
     * @param StoreInterface      $store   A Store instance
     * @param Esi                 $esi     An Esi instance
     * @param array               $options An array of options
     */",
 "/**
     * Gets the current store.
     *
     * @return StoreInterface $store A StoreInterface instance
     */",
 "/**
     * Returns an array of events that took place during processing of the last request.
     *
     * @return array An array of events
     */",
 "/**
     * Returns a log message for the events of the last request processing.
     *
     * @return string A log message
     */",
 "/**
     * Gets the Request instance associated with the master request.
     *
     * @return Symfony\Component\HttpFoundation\Request A Request instance
     */",
 "/**
     * Gets the Kernel instance
     *
     * @return Symfony\Component\HttpKernel\HttpKernelInterface An HttpKernelInterface instance
     */",
 "/**
     * Gets the Esi instance
     *
     * @return Symfony\Component\HttpKernel\HttpCache\Esi An Esi instance
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * Forwards the Request to the backend without storing the Response in the cache.
     *
     * @param Request $request A Request instance
     * @param Boolean $catch   Whether to process exceptions
     *
     * @return Response A Response instance
     */",
 "/**
     * Invalidates non-safe methods (like POST, PUT, and DELETE).
     *
     * @param Request $request A Request instance
     * @param Boolean $catch   Whether to process exceptions
     *
     * @return Response A Response instance
     *
     * @see RFC2616 13.10
     */",
 "/**
     * Lookups a Response from the cache for the given Request.
     *
     * When a matching cache entry is found and is fresh, it uses it as the
     * response without forwarding any request to the backend. When a matching
     * cache entry is found but is stale, it attempts to \"validate\" the entry with
     * the backend using conditional GET. When no matching cache entry is found,
     * it triggers \"miss\" processing.
     *
     * @param Request $request A Request instance
     * @param Boolean $catch   whether to process exceptions
     *
     * @return Response A Response instance
     */",
 "/**
     * Validates that a cache entry is fresh.
     *
     * The original request is used as a template for a conditional
     * GET request with the backend.
     *
     * @param Request  $request A Request instance
     * @param Response $entry   A Response instance to validate
     * @param Boolean  $catch   Whether to process exceptions
     *
     * @return Response A Response instance
     */",
 "/**
     * Forwards the Request to the backend and determines whether the response should be stored.
     *
     * This methods is triggered when the cache missed or a reload is required.
     *
     * @param Request $request A Request instance
     * @param Boolean $catch   whether to process exceptions
     *
     * @return Response A Response instance
     */",
 "/**
     * Forwards the Request to the backend and returns the Response.
     *
     * @param Request  $request A Request instance
     * @param Boolean  $catch   Whether to catch exceptions or not
     * @param Response $entry   A Response instance (the stale entry if present, null otherwise)
     *
     * @return Response A Response instance
     */",
 "/**
     * Checks whether the cache entry is \"fresh enough\" to satisfy the Request.
     *
     * @param Request  $request A Request instance
     * @param Response $entry   A Response instance
     *
     * @return Boolean true if the cache entry if fresh enough, false otherwise
     */",
 "/**
     * Locks a Request during the call to the backend.
     *
     * @param Request  $request A Request instance
     * @param Response $entry   A Response instance
     *
     * @return Boolean true if the cache entry can be returned even if it is staled, false otherwise
     */",
 "/**
     * Writes the Response to the cache.
     *
     * @param Request  $request  A Request instance
     * @param Response $response A Response instance
     */",
 "/**
     * Restores the Response body.
     *
     * @param Request  $request  A Request instance
     * @param Response $response A Response instance
     *
     * @return Response A Response instance
     */",
 "/**
     * Checks if the Request includes authorization or other sensitive information
     * that should cause the Response to be considered private by default.
     *
     * @param Request $request A Request instance
     *
     * @return Boolean true if the Request is private, false otherwise
     */",
 "/**
     * Records that an event took place.
     *
     * @param Request $request A Request instance
     * @param string  $event The event name
     */",
 "/**
 * Cache provides HTTP caching.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Evaluates an expression, disgarding the returned value.
 */",
 "/**
     * Loads a specific configuration.
     *
     * @param array            $config    An array of configuration values
     * @param ContainerBuilder $container A ContainerBuilder instance
     *
     * @throws \InvalidArgumentException When provided tag is not defined in this extension
     *
     * @api
     */",
 "/**
     * Returns the namespace to be used for this extension (XML namespace).
     *
     * @return string The XML namespace
     *
     * @api
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     *
     * @api
     */",
 "/**
     * Returns the recommended alias to use in XML.
     *
     * This alias is also the mandatory prefix to use when using YAML.
     *
     * @return string The alias
     *
     * @api
     */",
 "/**
 * ExtensionInterface is the interface implemented by container extension classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Fetches an entry from the cache.
     * 
     * @param string $id cache id The id of the cache entry to fetch.
     * @return string The cached data or FALSE, if no cache entry exists for the given id.
     */",
 "/**
     * Test if an entry exists in the cache.
     *
     * @param string $id cache id The cache id of the entry to check for.
     * @return boolean TRUE if a cache entry exists for the given cache id, FALSE otherwise.
     */",
 "/**
     * Puts data into the cache.
     *
     * @param string $id The cache id.
     * @param string $data The cache entry/data.
     * @param int $lifeTime The lifetime. If != 0, sets a specific lifetime for this cache entry (0 => infinite lifeTime).
     * @return boolean TRUE if the entry was successfully stored in the cache, FALSE otherwise.
     */",
 "/**
     * Deletes a cache entry.
     * 
     * @param string $id cache id
     * @return boolean TRUE if the cache entry was successfully deleted, FALSE otherwise.
     */",
 "/**
 * Interface for cache drivers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Create a new ReporterPlugin using $reporter.
   * @param Swift_Plugins_Reporter $reporter
   */",
 "/**
   * Not used.
   */",
 "/**
   * Invoked immediately after the Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
 * Does real time reporting of pass/fail for each recipient.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
     * @return string
     */",
 "/**
 * Representation of a Database View
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param string $name The name of the node
     * @param NodeInterface $parent The parent of this node
     *
     * @throws \InvalidArgumentException if the name contains a period.
     */",
 "/**
     * Adds an equivalent value.
     *
     * @param mixed $originalValue
     * @param mixed $equivalentValue
     */",
 "/**
     * Set this node as required.
     *
     * @param Boolean $boolean Required node
     */",
 "/**
     * Sets if this node can be overridden.
     *
     * @param Boolean $allow
     */",
 "/**
     * Sets the closures used for normalization.
     *
     * @param array $closures An array of Closures used for normalization
     */",
 "/**
     * Sets the closures used for final validation.
     *
     * @param array $closures An array of Closures used for final validation
     */",
 "/**
     * Checks if this node is required.
     *
     * @return Boolean
     */",
 "/**
     * Returns the name of this node
     *
     * @return string The Node\'s name.
     */",
 "/**
     * Retrieves the path of this node.
     *
     * @return string The Node\'s path
     */",
 "/**
     * Merges two values together.
     *
     * @param mixed $leftSide
     * @param mixed $rightSide
     *
     * @return mixed The merged value
     *
     * @throws ForbiddenOverwriteException
     */",
 "/**
     * Normalizes a value, applying all normalization closures.
     *
     * @param mixed $value Value to normalize.
     *
     * @return mixed The normalized value.
     */",
 "/**
     * Finalizes a value, applying all finalization closures.
     *
     * @param mixed $value The value to finalize
     *
     * @return mixed The finalized value
     */",
 "/**
     * Validates the type of a Node.
     *
     * @param mixed $value The value to validate
     *
     * @throws InvalidTypeException when the value is invalid
     */",
 "/**
     * Normalizes the value.
     *
     * @param mixed $value The value to normalize.
     *
     * @return mixed The normalized value
     */",
 "/**
     * Merges two values together.
     *
     * @param mixed $leftSide
     * @param mixed $rightSide
     *
     * @return mixed The merged value
     */",
 "/**
     * Finalizes a value.
     *
     * @param mixed $value The value to finalize
     *
     * @return mixed The finalized value
     */",
 "/**
 * The base node class
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @dataProvider provideUrls
     */",
 "/**
     * @dataProvider provideMultipleUrls
     */",
 "/**
 * Loads SASS files.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * TwigExtension configuration structure.
 *
 * @author Jeremy Mikola <jmikola@gmail.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a trans node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 */",
 "/**
     * Duplicates the given value through the array.
     *
     * @param mixed $value The value
     *
     * @return array The array
     */",
 "/**
     * Extracts the duplicated value from an array.
     *
     * @param array $array
     *
     * @return mixed The value
     *
     * @throws UnexpectedTypeException if the given value is not an array
     * @throws TransformationFailedException if the given array can not be transformed
     */",
 "/**
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 */",
 "/**
     * Constructor
     *
     * @param Cache                               $cache
     * @param PermissionGrantingStrategyInterface $permissionGrantingStrategy
     * @param string                              $prefix
     *
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Unserializes the ACL.
     *
     * @param string $serialized
     * @return AclInterface
     */",
 "/**
     * Returns the key for the object identity
     *
     * @param ObjectIdentityInterface $oid
     * @return string
     */",
 "/**
     * Returns the alias key for the object identity key
     *
     * @param string $aclId
     * @return string
     */",
 "/**
 * This class is a wrapper around the actual cache implementation.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * ExceptionListener.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
*Generatestheentityformclassifitdoesnotexist.
*
*@paramBundleInterface$bundleThebundleinwhichtocreatetheclass
*@paramstring$entityTheentityrelativeclassname
*@paramClassMetadataInfo$metadataTheentitymetadataclass
*/",
 "/**
*Returnsanarrayoffields.Fieldscanbebothcolumnfieldsand
*associationfields.
*
*@paramClassMetadataInfo$metadata
*@returnarray$fields
*/",
 "/**
*GeneratesaformclassbasedonaDoctrineentity.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorHugoHamon<hugo.hamon@sensio.com>
*/",
 "/**
 * CSSEmbed filter
 *
 * @author Maxime Thirouin <maxime.thirouin@gmail.com>
 */",
 "/**
   * Sets the maximum number of messages to send per flush.
   * @param int $limit The limit
   */",
 "/**
   * Gets the maximum number of messages to send per flush.
   * @return int The limit
   */",
 "/**
   * Sets the time limit (in seconds) per flush.
   * @param int $limit The limit
   */",
 "/**
   * Gets the time limit (in seconds) per flush.
   * @return int The limit
   */",
 "/**
 * Base class for Spools (implements time and message limits).
 * @package Swift
 * @author  Fabien Potencier
 */",
 "/**
 * ExceptionInterface
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bulat Shakirzyanov <bulat@theopenskyproject.com>
 */",
 "/**
   * Returns the complete charactermap
   *
   * @param string $string
   * @param int $startOffset
   * @param string $ignoredChars
   */",
 "/**
   * Returns mapType
   * @int mapType
   */",
 "/**
   * Returns an integer which specifies how many more bytes to read.
   * A positive integer indicates the number of more bytes to fetch before invoking
   * this method again.
   * A value of zero means this is already a valid character.
   * A value of -1 means this cannot possibly be a valid character.
   * @param string $bytes
   * @return int
   */",
 "/**
   * Returns the number of bytes which should be read to start each character.
   * @return int
   */",
 "/**
 * Analyzes US-ASCII characters.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param FileLocatorInterface        $locator A FileLocatorInterface instance
     * @param TemplateNameParserInterface $parser  A TemplateNameParserInterface instance
     */",
 "/**
     * Returns the path to the template file.
     *
     * The file locator is used to locate the template when the naming convention
     * is the symfony one (i.e. the name can be parsed).
     * Otherwise the template is located using the locator from the twig library.
     *
     * @param string|TemplateReferenceInterface $template The template
     *
     * @return string The path to the template file
     *
     * @throws \Twig_Error_Loader if the template could not be found
     */",
 "/**
 * FilesystemLoader extends the default Twig filesystem loader
 * to work with the Symfony2 paths.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param InputDefinition $definition A InputDefinition instance
     */",
 "/**
     * Binds the current Input instance with the given arguments and options.
     *
     * @param InputDefinition $definition A InputDefinition instance
     */",
 "/**
     * Processes command line arguments.
     */",
 "/**
     * Validates the input.
     *
     * @throws \RuntimeException When not enough arguments are given
     */",
 "/**
     * Checks if the input is interactive.
     *
     * @return Boolean Returns true if the input is interactive
     */",
 "/**
     * Sets the input interactivity.
     *
     * @param Boolean $interactive If the input should be interactive
     */",
 "/**
     * Returns the argument values.
     *
     * @return array An array of argument values
     */",
 "/**
     * Returns the argument value for a given argument name.
     *
     * @param string $name The argument name
     *
     * @return mixed The argument value
     *
     * @throws \InvalidArgumentException When argument given doesn\'t exist
     */",
 "/**
     * Sets an argument value by name.
     *
     * @param string $name  The argument name
     * @param string $value The argument value
     *
     * @throws \InvalidArgumentException When argument given doesn\'t exist
     */",
 "/**
     * Returns true if an InputArgument object exists by name or position.
     *
     * @param string|integer $name The InputArgument name or position
     *
     * @return Boolean true if the InputArgument object exists, false otherwise
     */",
 "/**
     * Returns the options values.
     *
     * @return array An array of option values
     */",
 "/**
     * Returns the option value for a given option name.
     *
     * @param string $name The option name
     *
     * @return mixed The option value
     *
     * @throws \InvalidArgumentException When option given doesn\'t exist
     */",
 "/**
     * Sets an option value by name.
     *
     * @param string $name  The option name
     * @param string $value The option value
     *
     * @throws \InvalidArgumentException When option given doesn\'t exist
     */",
 "/**
     * Returns true if an InputOption object exists by name.
     *
     * @param string $name The InputOption name
     *
     * @return Boolean true if the InputOption object exists, false otherwise
     */",
 "/**
 * Input is the base class for all concrete Input classes.
 *
 * Three concrete classes are provided by default:
 *
 *  * `ArgvInput`: The input comes from the CLI arguments (argv)
 *  * `StringInput`: The input is provided as a string
 *  * `ArrayInput`: The input is provided as an array
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * RoleHierarchyVoter uses a RoleHierarchy to determine the roles granted to
 * the user before voting.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Task for executing arbitrary SQL that can come from a file or directly from
 * the command line.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Adds an unescaped argument to the command string.
     *
     * @param string $argument A command argument
     */",
 "/**
 * Process builder.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
   * Create a filter to replace $search with $replace.
   * @param mixed $search
   * @param mixed $replace
   * @return Swift_StreamFilter
   */",
 "/**
 * Creates StreamFilters.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * Return an instance of SplFileInfo with support for relative paths
     *
     * @return SplFileInfo File information
     */",
 "/**
 * Extends the \RecursiveDirectoryIterator to support relative paths
 *
 * @author Victor Berchet <victor@suumit.com>
 */",
 "/**
     * Builds the form.
     *
     * This method gets called for each type in the hierarchy starting from the
     * top most type.
     * Type extensions can further modify the form.
     *
     * @see FormTypeExtensionInterface::buildForm()
     *
     * @param FormBuilder   $builder The form builder
     * @param array         $options The options
     */",
 "/**
     * Builds the form view.
     *
     * This method gets called for each type in the hierarchy starting from the
     * top most type.
     * Type extensions can further modify the view.
     *
     * @see FormTypeExtensionInterface::buildView()
     *
     * @param FormView      $view The view
     * @param FormInterface $form The form
     */",
 "/**
     * Builds the form view.
     *
     * This method gets called for each type in the hierarchy starting from the
     * top most type.
     * Type extensions can further modify the view.
     *
     * Children views have been built while this method gets called so you get
     * a chance to modify them.
     *
     * @see FormTypeExtensionInterface::buildViewBottomUp()
     *
     * @param FormView      $view The view
     * @param FormInterface $form The form
     */",
 "/**
     * Returns a builder for the current type.
     *
     * The builder is retrieved by going up in the type hierarchy when a type does
     * not provide one.
     *
     * @param string                $name       The name of the builder
     * @param FormFactoryInterface  $factory    The form factory
     * @param array                 $options    The options
     *
     * @return FormBuilder|null A form builder or null when the type does not have a builder
     */",
 "/**
     * Returns the default options for this type.
     *
     * @param array $options
     *
     * @return array The default options
     */",
 "/**
     * Returns the allowed option values for each option (if any).
     *
     * @param array $options
     *
     * @return array The allowed option values
     */",
 "/**
     * Returns the name of the parent type.
     *
     * @param array $options
     *
     * @return string|null The name of the parent type if any otherwise null
     */",
 "/**
     * Adds extensions for this type.
     *
     * @param array $extensions An array of FormTypeExtensionInterface
     *
     * @throws UnexpectedTypeException if any extension does not implement FormTypeExtensionInterface
     */",
 "/**
     * Returns the extensions associated with this type.
     *
     * @return array An array of FormTypeExtensionInterface
     */",
 "/**
 * Exception thrown when a route does not exists
 *
 * @author Alexandre Salom?? <alexandre.salome@gmail.com>
 *
 * @api
 */",
 "/**
     * Constructor
     *
     * @param string $username the username representation
     * @param string $class the user\'s fully qualified class name
     */",
 "/**
     * Creates a user security identity from a UserInterface
     *
     * @param UserInterface $user
     * @return UserSecurityIdentity
     */",
 "/**
     * Creates a user security identity from a TokenInterface
     *
     * @param TokenInterface $token
     * @return UserSecurityIdentity
     */",
 "/**
     * Returns the username
     *
     * @return string
     */",
 "/**
     * Returns the user\'s class name
     *
     * @return string
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * A textual representation of this security identity.
     *
     * This is not used for equality comparison, but only for debugging.
     *
     * @return string
     */",
 "/**
 * A SecurityIdentity implementation used for actual users
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $namespace Namespace
     * @param string $element Element
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Formats the element into a string.
     *
     * @return string Element as an XPath string
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * ElementNode represents a \"namespace|element\" node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @dataProvider getInteractiveCommandData
     */",
 "/**
     * @dataProvider getNonInteractiveCommandData
     */",
 "/**
     * Constructor
     *
     * @param NodeDefinition $node The related node
     */",
 "/**
     * Registers a closure to run as normalization or an expression builder to build it if null is provided.
     *
     * @param \Closure $closure
     *
     * @return ExprBuilder|ValidationBuilder
     */",
 "/**
 * This class builds validation conditions.
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
 * Adds tagged routing.loader services to routing.resolver service
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new IdentificationHeader with the given $name and $id.
   * @param string $name
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Get the type of Header that this instance represents.
   * @return int
   * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   * @see TYPE_DATE, TYPE_ID, TYPE_PATH
   */",
 "/**
   * Set the model for the field body.
   * This method takes a string ID, or an array of IDs
   * @param mixed $model
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Get the model for the field body.
   * This method returns an array of IDs
   * @return array
   */",
 "/**
   * Set the ID used in the value of this header.
   * @param string $id
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Get the ID used in the value of this Header.
   * If multiple IDs are set only the first is returned.
   * @return string
   */",
 "/**
   * Set a collection of IDs to use in the value of this Header.
   * @param string[] $ids
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Get the list of IDs used in this Header.
   * @return string[]
   */",
 "/**
   * Get the string value of the body in this Header.
   * This is not necessarily RFC 2822 compliant since folding white space will
   * not be added at this stage (see {@link toString()} for that).
   * @return string
   * @see toString()
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Throws an Exception if the id passed does not comply with RFC 2822.
   * @param string $id
   * @throws Swift_RfcComplianceException
   */",
 "/**
 * An ID MIME Header for something like Message-ID or Content-ID.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Loads a PHP file.
     *
     * @param mixed  $file A PHP file path
     * @param string $type The resource type
     *
     * @api
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean True if this class supports the given resource, false otherwise
     *
     * @api
     */",
 "/**
 * PhpFileLoader loads routes from a PHP file.
 *
 * The file must return a RouteCollection instance.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns a string representation of the Resource.
     *
     * @return string A string representation of the Resource
     */",
 "/**
     * Returns true if the resource has not been updated since the given timestamp.
     *
     * @param integer $timestamp The last time the resource was loaded
     *
     * @return Boolean true if the resource has not been updated, false otherwise
     */",
 "/**
     * Returns the resource tied to this Resource.
     *
     * @return mixed The resource
     */",
 "/**
 * ResourceInterface is the interface that must be implemented by all Resource classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Creates a new AnnotationException describing a Syntax error.
     *
     * @param string $message Exception message
     * @return AnnotationException
     */",
 "/**
     * Creates a new AnnotationException describing a Semantical error.
     *
     * @param string $message Exception message
     * @return AnnotationException
     */",
 "/**
 * Description of AnnotationException
 *
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Assetic integration.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param EventDispatcherInterface    $dispatcher An EventDispatcherInterface instance
     * @param ControllerResolverInterface $resolver   A ControllerResolverInterface instance
     *
     * @api
     */",
 "/**
     * Handles a Request to convert it to a Response.
     *
     * When $catch is true, the implementation must catch all exceptions
     * and do its best to convert them to a Response instance.
     *
     * @param  Request $request A Request instance
     * @param  integer $type    The type of the request
     *                          (one of HttpKernelInterface::MASTER_REQUEST or HttpKernelInterface::SUB_REQUEST)
     * @param  Boolean $catch   Whether to catch exceptions or not
     *
     * @return Response A Response instance
     *
     * @throws \Exception When an Exception occurs during processing
     *
     * @api
     */",
 "/**
     * Handles a request to convert it to a response.
     *
     * Exceptions are not caught.
     *
     * @param Request $request A Request instance
     * @param integer $type    The type of the request (one of HttpKernelInterface::MASTER_REQUEST or HttpKernelInterface::SUB_REQUEST)
     *
     * @return Response A Response instance
     *
     * @throws \LogicException If one of the listener does not behave as expected
     * @throws NotFoundHttpException When controller cannot be found
     */",
 "/**
     * Filters a response object.
     *
     * @param Response $response A Response instance
     * @param Request  $request  A error message in case the response is not a Response object
     * @param integer  $type     The type of the request (one of HttpKernelInterface::MASTER_REQUEST or HttpKernelInterface::SUB_REQUEST)
     *
     * @return Response The filtered Response instance
     *
     * @throws \RuntimeException if the passed object is not a Response instance
     */",
 "/**
     * Handles and exception by trying to convert it to a Response.
     *
     * @param  \Exception $e       An \Exception instance
     * @param  Request    $request A Request instance
     * @param  integer    $type    The type of the request
     *
     * @return Response A Response instance
     */",
 "/**
 * HttpKernel notifies events to convert a Request object to a Response one.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Encodes data into a string
     *
     * @param mixed $data    Data to encode
     * @param string $format Format to encode to
     *
     * @return string
     */",
 "/**
 * Defines the interface of encoders
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Constructor.
     *
     * @param Twig_Environment $env      A Twig_Environment instance
     * @param array            $visitors An array of Twig_NodeVisitorInterface instances
     */",
 "/**
     * Adds a visitor.
     *
     * @param Twig_NodeVisitorInterface $visitor A Twig_NodeVisitorInterface instance
     */",
 "/**
     * Traverses a node and calls the registered visitors.
     *
     * @param Twig_NodeInterface $node A Twig_NodeInterface instance
     */",
 "/**
 * Twig_NodeTraverser is a node traverser.
 *
 * It visits all nodes and their children and call the given visitor for each.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * This exception is thrown when ObjectIdentity fails to construct an object
 * identity from the passed domain object.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * xxx
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Juozas Kaziukenas <juozas@juokaz.com>
 * @version     $Revision$
 * @since       2.0
 */",
 "/**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */",
 "/**
 * A simple implementation of ContainerAwareInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * APC cache driver.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 * @todo Rename: APCCache
 */",
 "/**
 * Generates bundles.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the called events.
     *
     * @return array An array of called events
     *
     * @see TraceableEventDispatcherInterface
     */",
 "/**
     * Gets the logs.
     *
     * @return array An array of logs
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * LogDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Initializes the constraint with options.
     *
     * You should pass an associative array. The keys should be the names of
     * existing properties in this class. The values should be the value for these
     * properties.
     *
     * Alternatively you can override the method getDefaultOption() to return the
     * name of an existing property. If no associative array is passed, this
     * property is set instead.
     *
     * You can force that certain options are set by overriding
     * getRequiredOptions() to return the names of these options. If any
     * option is not set here, an exception is thrown.
     *
     * @param mixed $options The options (as associative array)
     *                       or the value for the default
     *                       option (any other type)
     *
     * @throws InvalidOptionsException       When you pass the names of non-existing
     *                                       options
     * @throws MissingOptionsException       When you don\'t pass any of the options
     *                                       returned by getRequiredOptions()
     * @throws ConstraintDefinitionException When you don\'t pass an associative
     *                                       array, but getDefaultOption() returns
     *                                       NULL
     *
     * @api
     */",
 "/**
     * Unsupported operation.
     */",
 "/**
     * Adds the given group if this constraint is in the Default group
     *
     * @param string $group
     *
     * @api
     */",
 "/**
     * Returns the name of the default option
     *
     * Override this method to define a default option.
     *
     * @return string
     * @see __construct()
     *
     * @api
     */",
 "/**
     * Returns the name of the required options
     *
     * Override this method if you want to define required options.
     *
     * @return array
     * @see __construct()
     *
     * @api
     */",
 "/**
     * Returns the name of the class that validates this constraint
     *
     * By default, this is the fully qualified name of the constraint class
     * suffixed with \"Validator\". You can override this method to change that
     * behaviour.
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Returns whether the constraint can be put onto classes, properties or
     * both
     *
     * This method should return one or more of the constants
     * Constraint::CLASS_CONSTRAINT and Constraint::PROPERTY_CONSTRAINT.
     *
     * @return string|array  One or more constant values
     *
     * @api
     */",
 "/**
 * Contains the properties of a constraint definition.
 *
 * A constraint can be defined on a class, an option or a getter method.
 * The Constraint class encapsulates all the configuration required for
 * validating this class, option or getter result successfully.
 *
 * Constraint instances are immutable and serializable.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string $class    The class the getter is defined on
     * @param string $property The property which the getter returns
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"CURRENT_TIMESTAMP\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * @param array $record
     * @return array
     */",
 "/**
 * Injects memory_get_peak_usage in all records
 *
 * @see Monolog\Processor\MemoryProcessor::__construct() for options
 * @author Rob Jensen
 */",
 "/**
 * AuthenticationException is the base class for all authentication exceptions.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Sets if this node is allowed to have an empty value.
     *
     * @param Boolean $boolean True if this entity will accept empty values.
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * This node represents a value of variable type in the config tree.
 *
 * This node is intended for values of arbitrary type.
 * Any PHP type is accepted as a value.
 *
 * @author Jeremy Mikola <jmikola@gmail.com>
 */",
 "/**
     * Initializes a new <tt>MultiTableUpdateExecutor</tt>.
     *
     * @param Node $AST The root AST node of the DQL query.
     * @param SqlWalker $sqlWalker The walker used for SQL generation from the AST.
     * @internal Any SQL construction and preparation takes place in the constructor for
     *           best performance. With a query cache the executor will be cached.
     */",
 "/**
     * Executes all SQL statements.
     *
     * @param Connection $conn The database connection that is used to execute the queries.
     * @param array $params The parameters.
     * @override
     */",
 "/**
 * Executes the SQL statements for bulk DQL UPDATE statements on classes in
 * Class Table Inheritance (JOINED).
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @dataProvider getConfigs
     */",
 "/**
     * @dataProvider getConfigs
     */",
 "/**
     * @dataProvider getConfigs
     */",
 "/**
     * Constructor.
     *
     * @param string $name The name of the command
     *
     * @throws \LogicException When the command name is empty
     *
     * @api
     */",
 "/**
     * Ignores validation errors.
     *
     * This is mainly useful for the help command.
     */",
 "/**
     * Sets the application instance for this command.
     *
     * @param Application $application An Application instance
     *
     * @api
     */",
 "/**
     * Sets the helper set.
     *
     * @param HelperSet $helperSet A HelperSet instance
     */",
 "/**
     * Gets the helper set.
     *
     * @return HelperSet A HelperSet instance
     */",
 "/**
     * Gets the application instance for this command.
     *
     * @return Application An Application instance
     *
     * @api
     */",
 "/**
     * Configures the current command.
     */",
 "/**
     * Executes the current command.
     *
     * This method is not abstract because you can use this class
     * as a concrete class. In this case, instead of defining the
     * execute() method, you set the code to execute by passing
     * a Closure to the setCode() method.
     *
     * @param InputInterface  $input  An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     *
     * @return integer 0 if everything went fine, or an error code
     *
     * @throws \LogicException When this abstract method is not implemented
     * @see    setCode()
     */",
 "/**
     * Interacts with the user.
     *
     * @param InputInterface  $input  An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     */",
 "/**
     * Initializes the command just after the input has been validated.
     *
     * This is mainly useful when a lot of commands extends one main command
     * where some things need to be initialized based on the input arguments and options.
     *
     * @param InputInterface  $input  An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     */",
 "/**
     * Runs the command.
     *
     * The code to execute is either defined directly with the
     * setCode() method or by overriding the execute() method
     * in a sub-class.
     *
     * @param InputInterface  $input  An InputInterface instance
     * @param OutputInterface $output An OutputInterface instance
     *
     * @see setCode()
     * @see execute()
     *
     * @api
     */",
 "/**
     * Sets the code to execute when running this command.
     *
     * If this method is used, it overrides the code defined
     * in the execute() method.
     *
     * @param \Closure $code A \Closure
     *
     * @return Command The current instance
     *
     * @see execute()
     *
     * @api
     */",
 "/**
     * Merges the application definition with the command definition.
     */",
 "/**
     * Sets an array of argument and option instances.
     *
     * @param array|InputDefinition $definition An array of argument and option instances or a definition instance
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Gets the InputDefinition attached to this Command.
     *
     * @return InputDefinition An InputDefinition instance
     *
     * @api
     */",
 "/**
     * Gets the InputDefinition to be used to create XML and Text representations of this Command.
     *
     * Can be overridden to provide the original command representation when it would otherwise
     * be changed by merging with the application InputDefinition.
     *
     * @return InputDefinition An InputDefinition instance
     */",
 "/**
     * Adds an argument.
     *
     * @param string  $name        The argument name
     * @param integer $mode        The argument mode: InputArgument::REQUIRED or InputArgument::OPTIONAL
     * @param string  $description A description text
     * @param mixed   $default     The default value (for InputArgument::OPTIONAL mode only)
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Adds an option.
     *
     * @param string  $name        The option name
     * @param string  $shortcut    The shortcut (can be null)
     * @param integer $mode        The option mode: One of the InputOption::VALUE_* constants
     * @param string  $description A description text
     * @param mixed   $default     The default value (must be null for InputOption::VALUE_REQUIRED or InputOption::VALUE_NONE)
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Sets the name of the command.
     *
     * This method can set both the namespace and the name if
     * you separate them by a colon (:)
     *
     *     $command->setName(\'foo:bar\');
     *
     * @param string $name The command name
     *
     * @return Command The current instance
     *
     * @throws \InvalidArgumentException When command name given is empty
     *
     * @api
     */",
 "/**
     * Returns the command name.
     *
     * @return string The command name
     *
     * @api
     */",
 "/**
     * Sets the description for the command.
     *
     * @param string $description The description for the command
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Returns the description for the command.
     *
     * @return string The description for the command
     *
     * @api
     */",
 "/**
     * Sets the help for the command.
     *
     * @param string $help The help for the command
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Returns the help for the command.
     *
     * @return string The help for the command
     *
     * @api
     */",
 "/**
     * Returns the processed help for the command replacing the %command.name% and
     * %command.full_name% patterns with the real values dynamically.
     *
     * @return string  The processed help for the command
     */",
 "/**
     * Sets the aliases for the command.
     *
     * @param array $aliases An array of aliases for the command
     *
     * @return Command The current instance
     *
     * @api
     */",
 "/**
     * Returns the aliases for the command.
     *
     * @return array An array of aliases for the command
     *
     * @api
     */",
 "/**
     * Returns the synopsis for the command.
     *
     * @return string The synopsis
     */",
 "/**
     * Gets a helper instance by name.
     *
     * @param string $name The helper name
     *
     * @return mixed The helper value
     *
     * @throws \InvalidArgumentException if the helper is not defined
     *
     * @api
     */",
 "/**
     * Returns a text representation of the command.
     *
     * @return string A string representing the command
     */",
 "/**
     * Returns an XML representation of the command.
     *
     * @param Boolean $asDom Whether to return a DOM or an XML string
     *
     * @return string|DOMDocument An XML string representing the command
     */",
 "/**
 * Base class for all commands.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * This class is a lightweight wrapper around field vote requests which does
 * not violate any interface contracts.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Starts this Spool mechanism.
   */",
 "/**
   * Stops this Spool mechanism.
   */",
 "/**
   * Tests if this Spool mechanism has started.
   *
   * @return boolean
   */",
 "/**
   * Queues a message.
   * @param Swift_Mime_Message $message The message to store
   *
   * @return boolean Whether the operation has succeeded
   */",
 "/**
   * Sends messages using the given transport instance.
   *
   * @param Swift_Transport $transport         A transport instance
   * @param string[]        &$failedRecipients An array of failures by-reference
   *
   * @return int The number of sent emails
   */",
 "/**
 * Interface for spools.
 * @package Swift
 * @author  Fabien Potencier
 */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     * @param LoggerInterface    $logger    A LoggerInterface instance
     */",
 "/**
     * {@inheritDoc}
     *
     * @throws \RuntimeException if the listener method is not callable
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Returns information about the listener
     *
     * @param object $listener  The listener
     * @param string $eventName The event name
     *
     * @return array Informations about the listener
     */",
 "/**
 * Extends the ContainerAwareEventDispatcher to add some debugging tools.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * This token is automatically generated by the RunAsManager when an invocation
 * is supposed to be run with a different Token.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param \Iterator $iterator    The Iterator to filter
     * @param array     $comparators An array of \NumberComparator instances
     */",
 "/**
     * Filters the iterator values.
     *
     * @return Boolean true if the value should be kept, false otherwise
     */",
 "/**
 * SizeRangeFilterIterator filters out files that are not in the given size range.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a text node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param string $to The receiver of the mail
     * @param string $subject The subject of the mail
     * @param string $from The sender of the mail
     * @param integer $level The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * NativeMailerHandler uses the mail() function to send the emails
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
*YamlDriverthatadditionallylooksformappinginformationinaglobalfile.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
 * DefaultController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Replaces the default logger by another one with its own channel for tagged services.
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
 * Adds a protocol to a URL if it doesn\'t already have one.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 */",
 "/**
 * Exception thrown when an error occurs at runtime.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns a normalized hour value suitable for the hour transformer type
     *
     * @param  int     $hour    The hour value
     * @param  string  $marker  An optional AM/PM marker
     *
     * @return int              The normalized hour value
     */",
 "/**
 * Base class for hour transformers
 *
 * @author Eriksen Costa <eriksen.costa@infranology.com.br>
 */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new PathHeader with the given $name.
   * @param string $name
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Get the type of Header that this instance represents.
   * @return int
   * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   * @see TYPE_DATE, TYPE_ID, TYPE_PATH
   */",
 "/**
   * Set the model for the field body.
   * This method takes a string for an address.
   * @param string $model
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Get the model for the field body.
   * This method returns a string email address.
   * @return mixed
   */",
 "/**
   * Set the Address which should appear in this Header.
   * @param string $address
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Get the address which is used in this Header (if any).
   * Null is returned if no address is set.
   * @return string
   */",
 "/**
   * Get the string value of the body in this Header.
   * This is not necessarily RFC 2822 compliant since folding white space will
   * not be added at this stage (see {@link toString()} for that).
   * @return string
   * @see toString()
   */",
 "/**
   * Throws an Exception if the address passed does not comply with RFC 2822.
   * @param string $address
   * @throws Swift_RfcComplianceException If invalid.
   * @access private
   */",
 "/**
 * A Path Header in Swift Mailer, such a Return-Path.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param Role[] $roles An array of roles
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the token attributes.
     *
     * @return array The token attributes
     */",
 "/**
     * Sets the token attributes.
     *
     * @param array $attributes The token attributes
     */",
 "/**
     * Returns true if the attribute exists.
     *
     * @param  string  $name  The attribute name
     *
     * @return Boolean true if the attribute exists, false otherwise
     */",
 "/**
     * Returns a attribute value.
     *
     * @param string $name The attribute name
     *
     * @return mixed The attribute value
     *
     * @throws \InvalidArgumentException When attribute doesn\'t exist for this token
     */",
 "/**
     * Sets a attribute.
     *
     * @param string $name  The attribute name
     * @param mixed  $value The attribute value
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Base class for Token instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor. Accepts the Connection instance to manage the schema for
     *
     * @param \Doctrine\DBAL\Connection $conn
     */",
 "/**
     * Return associated platform.
     *
     * @return \Doctrine\DBAL\Platform\AbstractPlatform
     */",
 "/**
     * Try any method on the schema manager. Normally a method throws an 
     * exception when your DBMS doesn\'t support it or if an error occurs.
     * This method allows you to try and method on your SchemaManager
     * instance and will return false if it does not work or is not supported.
     *
     * <code>
     * $result = $sm->tryMethod(\'dropView\', \'view_name\');
     * </code>
     *
     * @return mixed
     */",
 "/**
     * List the available databases for this connection
     *
     * @return array $databases
     */",
 "/**
     * List the available sequences for this connection
     *
     * @return Sequence[]
     */",
 "/**
     * List the columns for a given table.
     *
     * In contrast to other libraries and to the old version of Doctrine,
     * this column definition does try to contain the \'primary\' field for
     * the reason that it is not portable accross different RDBMS. Use
     * {@see listTableIndexes($tableName)} to retrieve the primary key
     * of a table. We\'re a RDBMS specifies more details these are held
     * in the platformDetails array.
     *
     * @param string $table The name of the table.
     * @param string $database
     * @return Column[]
     */",
 "/**
     * List the indexes for a given table returning an array of Index instances.
     *
     * Keys of the portable indexes list are all lower-cased.
     *
     * @param string $table The name of the table
     * @return Index[] $tableIndexes
     */",
 "/**
     * Return true if all the given tables exist.
     * 
     * @param array $tableNames
     * @return bool
     */",
 "/**
     * Return a list of all tables in the current database
     *
     * @return array
     */",
 "/**
     * List the tables for this connection
     *
     * @return Table[]
     */",
 "/**
     * @param  string $tableName
     * @return Table
     */",
 "/**
     * List the views this connection has
     *
     * @return View[]
     */",
 "/**
     * List the foreign keys for the given table
     *
     * @param string $table  The name of the table
     * @return ForeignKeyConstraint[]
     */",
 "/**
     * Drops a database.
     * 
     * NOTE: You can not drop the database this SchemaManager is currently connected to.
     *
     * @param string $database The name of the database to drop
     */",
 "/**
     * Drop the given table
     *
     * @param string $table The name of the table to drop
     */",
 "/**
     * Drop the index from the given table
     *
     * @param Index|string $index  The name of the index
     * @param string|Table $table The name of the table
     */",
 "/**
     * Drop the constraint from the given table
     *
     * @param Constraint $constraint
     * @param string $table   The name of the table
     */",
 "/**
     * Drops a foreign key from a table.
     *
     * @param ForeignKeyConstraint|string $table The name of the table with the foreign key.
     * @param Table|string $name  The name of the foreign key.
     * @return boolean $result
     */",
 "/**
     * Drops a sequence with a given name.
     *
     * @param string $name The name of the sequence to drop.
     */",
 "/**
     * Drop a view
     *
     * @param string $name The name of the view
     * @return boolean $result
     */",
 "/**
     * Creates a new database.
     *
     * @param string $database The name of the database to create.
     */",
 "/**
     * Create a new table.
     *
     * @param Table $table
     * @param int $createFlags
     */",
 "/**
     * Create a new sequence
     *
     * @param Sequence $sequence
     * @throws Doctrine\DBAL\ConnectionException     if something fails at database level
     */",
 "/**
     * Create a constraint on a table
     *
     * @param Constraint $constraint
     * @param string|Table $table
     */",
 "/**
     * Create a new index on a table
     *
     * @param Index     $index
     * @param string    $table         name of the table on which the index is to be created
     */",
 "/**
     * Create a new foreign key
     *
     * @param ForeignKeyConstraint  $foreignKey    ForeignKey instance
     * @param string|Table          $table         name of the table on which the foreign key is to be created
     */",
 "/**
     * Create a new view
     *
     * @param View $view
     */",
 "/**
     * Drop and create a constraint
     *
     * @param Constraint    $constraint
     * @param string        $table
     * @see dropConstraint()
     * @see createConstraint()
     */",
 "/**
     * Drop and create a new index on a table
     *
     * @param string|Table $table         name of the table on which the index is to be created
     * @param Index $index
     */",
 "/**
     * Drop and create a new foreign key
     *
     * @param ForeignKeyConstraint  $foreignKey    associative array that defines properties of the foreign key to be created.
     * @param string|Table          $table         name of the table on which the foreign key is to be created
     */",
 "/**
     * Drop and create a new sequence
     *
     * @param Sequence $sequence
     * @throws Doctrine\DBAL\ConnectionException     if something fails at database level
     */",
 "/**
     * Drop and create a new table.
     *
     * @param Table $table
     */",
 "/**
     * Drop and creates a new database.
     *
     * @param string $database The name of the database to create.
     */",
 "/**
     * Drop and create a new view
     *
     * @param View $view
     */",
 "/**
     * Alter an existing tables schema
     *
     * @param TableDiff $tableDiff
     */",
 "/**
     * Rename a given table to another name
     *
     * @param string $name     The current name of the table
     * @param string $newName  The new name of the table
     */",
 "/**
     * Methods for filtering return values of list*() methods to convert
     * the native DBMS data definition to a portable Doctrine definition
     */",
 "/**
     * @param array $sequence
     * @return Sequence
     */",
 "/**
     * Independent of the database the keys of the column list result are lowercased.
     *
     * The name of the created column instance however is kept in its case.
     *
     * @param  array $tableColumns
     * @return array
     */",
 "/**
     * Get Table Column Definition
     *
     * @param array $tableColumn
     * @return Column
     */",
 "/**
     * Aggregate and group the index results according to the required data result.
     *
     * @param  array $tableIndexRows
     * @param  string $tableName
     * @return array
     */",
 "/**
     * Create a schema instance for the current database.
     * 
     * @return Schema
     */",
 "/**
     * Create the configuration for this schema.
     *
     * @return SchemaConfig
     */",
 "/**
     * Given a table comment this method tries to extract a typehint for Doctrine Type, or returns
     * the type given as default.
     * 
     * @param  string $comment
     * @param  string $currentType
     * @return string
     */",
 "/**
 * Base class for schema managers. Schema managers are used to inspect and/or
 * modify the database schema/structure.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Roman Borschel <roman@code-factory.org>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @since       2.0
 */",
 "/**
   * Create a new DiskKeyCache with the given $stream for cloning to make
   * InputByteStreams, and the given $path to save to.
   * @param Swift_KeyCache_KeyCacheInputStream $stream
   * @param string $path to save to
   */",
 "/**
   * Set a string into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param string $string
   * @param int $mode
   * @throws Swift_IoException
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_OutputByteStream $os
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   * @throws Swift_IoException
   */",
 "/**
   * Provides a ByteStream which when written to, writes data to $itemKey.
   * NOTE: The stream will always write in append mode.
   * @param string $nsKey
   * @param string $itemKey
   * @return Swift_InputByteStream
   */",
 "/**
   * Get data back out of the cache as a string.
   * @param string $nsKey
   * @param string $itemKey
   * @return string
   * @throws Swift_IoException
   */",
 "/**
   * Get data back out of the cache as a ByteStream.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_InputByteStream $is to write the data to
   */",
 "/**
   * Check if the given $itemKey exists in the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @return boolean
   */",
 "/**
   * Clear data for $itemKey in the namespace $nsKey if it exists.
   * @param string $nsKey
   * @param string $itemKey
   */",
 "/**
   * Clear all data in the namespace $nsKey if it exists.
   * @param string $nsKey
   */",
 "/**
   * Initialize the namespace of $nsKey if needed.
   * @param string $nsKey
   * @access private
   */",
 "/**
   * Get a file handle on the cache item.
   * @param string $nsKey
   * @param string $itemKey
   * @param int $position
   * @return resource
   * @access private
   */",
 "/**
   * Destructor.
   */",
 "/**
 * A KeyCache which streams to and from disk.
 * @package Swift
 * @subpackage KeyCache
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     * @param FileLocator      $locator   A FileLocator instance
     */",
 "/**
 * FileLoader is the abstract class used by all built-in loaders that are file based.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Sets the token provider
     *
     * @param TokenProviderInterface $tokenProvider
     *
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Generates a cryptographically strong random value
     *
     * @return string
     */",
 "/**
 * Concrete implementation of the RememberMeServicesInterface which needs
 * an implementation of TokenProviderInterface for providing remember-me
 * capabilities.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Execute a Doctrine DQL query and output the results.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Called before child nodes are visited.
     *
     * @param Twig_NodeInterface $node The node to visit
     * @param Twig_Environment   $env  The Twig environment instance
     *
     * @return Twig_NodeInterface The modified node
     */",
 "/**
     * Called after child nodes are visited.
     *
     * @param Twig_NodeInterface $node The node to visit
     * @param Twig_Environment   $env  The Twig environment instance
     *
     * @return Twig_NodeInterface The modified node
     */",
 "/**
     * Returns the priority for this visitor.
     *
     * Priority should be between -10 and 10 (0 is the default).
     *
     * @return integer The priority level
     */",
 "/**
 * Twig_NodeVisitorInterface is the interface the all node visitor classes must implement.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Expression class for building DQL OR clauses
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents an include node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param RouteCollection $routes The RouteCollection to dump
     */",
 "/**
     * Gets the routes to dump.
     *
     * @return RouteCollection A RouteCollection instance
     */",
 "/**
 * MatcherDumper is the abstract class for all built-in matcher dumpers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $templatePathPatterns An array of path patterns to look for templates
     *
     * @api
     */",
 "/**
     * Loads a template.
     *
     * @param TemplateReferenceInterface $template A template
     *
     * @return Storage|Boolean false if the template cannot be loaded, a Storage instance otherwise
     *
     * @api
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param TemplateReferenceInterface $template A template
     * @param integer                    $time     The last modification time of the cached template (timestamp)
     *
     * @api
     */",
 "/**
*Returnstrueifthefileisanexistingabsolutepath.
*
*@paramstring$fileApath
*
*@returntrueifthepathexistsandisabsolute,falseotherwise
*/",
 "/**
*FilesystemLoaderisaloaderthatreadtemplatesfromthefilesystem.
*
*@authorFabienPotencier<fabien@symfony.com>
*
*@api
*/",
 "/**
     * Constructor.
     *
     * @param array $definition An array of InputArgument and InputOption instance
     *
     * @api
     */",
 "/**
     * Sets the definition of the input.
     *
     * @param array $definition The definition array
     *
     * @api
     */",
 "/**
     * Sets the InputArgument objects.
     *
     * @param array $arguments An array of InputArgument objects
     *
     * @api
     */",
 "/**
     * Adds an array of InputArgument objects.
     *
     * @param InputArgument[] $arguments An array of InputArgument objects
     *
     * @api
     */",
 "/**
     * Adds an InputArgument object.
     *
     * @param InputArgument $argument An InputArgument object
     *
     * @throws \LogicException When incorrect argument is given
     *
     * @api
     */",
 "/**
     * Returns an InputArgument by name or by position.
     *
     * @param string|integer $name The InputArgument name or position
     *
     * @return InputArgument An InputArgument object
     *
     * @throws \InvalidArgumentException When argument given doesn\'t exist
     *
     * @api
     */",
 "/**
     * Returns true if an InputArgument object exists by name or position.
     *
     * @param string|integer $name The InputArgument name or position
     *
     * @return Boolean true if the InputArgument object exists, false otherwise
     *
     * @api
     */",
 "/**
     * Gets the array of InputArgument objects.
     *
     * @return array An array of InputArgument objects
     *
     * @api
     */",
 "/**
     * Returns the number of InputArguments.
     *
     * @return integer The number of InputArguments
     */",
 "/**
     * Returns the number of required InputArguments.
     *
     * @return integer The number of required InputArguments
     */",
 "/**
     * Gets the default values.
     *
     * @return array An array of default values
     */",
 "/**
     * Sets the InputOption objects.
     *
     * @param array $options An array of InputOption objects
     *
     * @api
     */",
 "/**
     * Adds an array of InputOption objects.
     *
     * @param InputOption[] $options An array of InputOption objects
     *
     * @api
     */",
 "/**
     * Adds an InputOption object.
     *
     * @param InputOption $option An InputOption object
     *
     * @throws \LogicException When option given already exist
     *
     * @api
     */",
 "/**
     * Returns an InputOption by name.
     *
     * @param string $name The InputOption name
     *
     * @return InputOption A InputOption object
     *
     * @api
     */",
 "/**
     * Returns true if an InputOption object exists by name.
     *
     * @param string $name The InputOption name
     *
     * @return Boolean true if the InputOption object exists, false otherwise
     *
     * @api
     */",
 "/**
     * Gets the array of InputOption objects.
     *
     * @return array An array of InputOption objects
     *
     * @api
     */",
 "/**
     * Returns true if an InputOption object exists by shortcut.
     *
     * @param string $name The InputOption shortcut
     *
     * @return Boolean true if the InputOption object exists, false otherwise
     */",
 "/**
     * Gets an InputOption by shortcut.
     *
     * @param string $shortcut the Shortcut name
     *
     * @return InputOption An InputOption object
     */",
 "/**
     * Gets an array of default values.
     *
     * @return array An array of all default values
     */",
 "/**
     * Returns the InputOption name given a shortcut.
     *
     * @param string $shortcut The shortcut
     *
     * @return string The InputOption name
     *
     * @throws \InvalidArgumentException When option given does not exist
     */",
 "/**
     * Gets the synopsis.
     *
     * @return string The synopsis
     */",
 "/**
     * Returns a textual representation of the InputDefinition.
     *
     * @return string A string representing the InputDefinition
     */",
 "/**
     * Returns an XML representation of the InputDefinition.
     *
     * @param Boolean $asDom Whether to return a DOM or an XML string
     *
     * @return string|DOMDocument An XML string representing the InputDefinition
     */",
 "/**
 * A InputDefinition represents a set of valid command line arguments and options.
 *
 * Usage:
 *
 *     $definition = new InputDefinition(array(
 *       new InputArgument(\'name\', InputArgument::REQUIRED),
 *       new InputOption(\'foo\', \'f\', InputOption::VALUE_REQUIRED),
 *     ));
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Adds a check for the URL host name.
     *
     * @param string $regexp A Regexp
     */",
 "/**
     * Adds a check for the URL path info.
     *
     * @param string $regexp A Regexp
     */",
 "/**
     * Adds a check for the client IP.
     *
     * @param string $ip A specific IP address or a range specified using IP/netmask like 192.168.1.0/24
     */",
 "/**
     * Adds a check for the HTTP method.
     *
     * @param string|array $method An HTTP method or an array of HTTP methods
     */",
 "/**
     * Adds a check for request attribute.
     *
     * @param string $key    The request attribute name
     * @param string $regexp A Regexp
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * @author David Soria Parra <dsp at php dot net>
     * @see https://github.com/dsp/v6tools
     */",
 "/**
 * RequestMatcher compares a pre-defined set of checks against a Request instance.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * This exception is thrown when ACEs for an SID are requested which has not
 * been loaded from the database.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Returns the parameter name.
     *
     * @return string
     */",
 "/**
     * Sets the parameter name.
     *
     * @param string $name The parameter name
     */",
 "/**
     * Sets the parameter name.
     *
     * @param string $name The parameter name
     */",
 "/**
     * Returns the parameter class name.
     *
     * @return string $name
     */",
 "/**
     * Sets the parameter class name.
     *
     * @param string $class The parameter class name
     */",
 "/**
     * Returns an array of options.
     *
     * @return array
     */",
 "/**
     * Sets an array of options.
     *
     * @param array $options An array of options
     */",
 "/**
     * Sets whether or not the parameter is optional.
     *
     * @param Boolean $optional Wether the parameter is optional
     */",
 "/**
     * Returns whether or not the parameter is optional.
     *
     * @return Boolean
     */",
 "/**
     * Returns the annotation alias name.
     *
     * @return string
     * @see ConfigurationInterface
     */",
 "/**
 * The ParamConverter class handles the @ParamConverter annotation parts.
 *
 * @ParamConverter(\"post\", class=\"BlogBundle:Post\")
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @Annotation
 */",
 "/**
     * Constructor
     *
     * @param HttpKernelInterface $kernel
     * @param HttpUtils           $httpUtils  An HttpUtils instance
     * @param string              $loginPath  The path to the login form
     * @param Boolean             $useForward Whether to forward or redirect to the login form
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * FormAuthenticationEntryPoint starts an authentication via a login form.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Process the ContainerBuilder to resolve invalid references.
     *
     * @param ContainerBuilder $container
     */",
 "/**
     * Processes arguments to determine invalid references.
     *
     * @param array   $arguments An array of Reference objects
     * @param Boolean $inMethodCall
     */",
 "/**
 * Emulates the invalid behavior if the reference is not found within the
 * container.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @Route(\"/\", name=\"_demo\")
     * @Template()
     */",
 "/**
     * @Route(\"/hello/{name}\", name=\"_demo_hello\")
     * @Template()
     */",
 "/**
     * @Route(\"/contact\", name=\"_demo_contact\")
     * @Template()
     */",
 "/**
   * Set a string into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param string $string
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_OutputByteStream $os
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Provides a ByteStream which when written to, writes data to $itemKey.
   * NOTE: The stream will always write in append mode.
   * If the optional third parameter is passed all writes will go through $is.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_InputByteStream $is, optional
   * @return Swift_InputByteStream
   */",
 "/**
   * Get data back out of the cache as a string.
   * @param string $nsKey
   * @param string $itemKey
   * @return string
   */",
 "/**
   * Get data back out of the cache as a ByteStream.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_InputByteStream $is to write the data to
   */",
 "/**
   * Check if the given $itemKey exists in the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @return boolean
   */",
 "/**
   * Clear data for $itemKey in the namespace $nsKey if it exists.
   * @param string $nsKey
   * @param string $itemKey
   */",
 "/**
   * Clear all data in the namespace $nsKey if it exists.
   * @param string $nsKey
   */",
 "/**
 * Provides a mechanism for storing data using two keys.
 * @package Swift
 * @subpackage KeyCache
 * @author Chris Corbyn
 */",
 "/**
   * Creates a new QpEncoder for the given CharacterStream.
   * @param Swift_CharacterStream $charStream to use for reading characters
   * @param Swift_StreamFilter $filter if input should be canonicalized
   */",
 "/**
   * Takes an unencoded string and produces a QP encoded string from it.
   * QP encoded strings have a maximum line length of 76 characters.
   * If the first line needs to be shorter, indicate the difference with
   * $firstLineOffset.
   * @param string $string to encode
   * @param int $firstLineOffset, optional
   * @param int $maxLineLength, optional, 0 indicates the default of 76 chars
   * @return string
   */",
 "/**
   * Updates the charset used.
   * @param string $charset
   */",
 "/**
   * Encode the given byte array into a verbatim QP form.
   * @param int[] $bytes
   * @return string
   * @access protected
   */",
 "/**
   * Get the next sequence of bytes to read from the char stream.
   * @param int $size number of bytes to read
   * @return int[]
   * @access protected
   */",
 "/**
   * Make sure CRLF is correct and HT/SPACE are in valid places.
   * @param string $string
   * @return string
   * @access protected
   */",
 "/**
 * Handles Quoted Printable (QP) Encoding in Swift Mailer.
 * Possibly the most accurate RFC 2045 QP implementation found in PHP.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a node in the AST.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * IdentificationVariableDeclaration ::= RangeVariableDeclaration [IndexBy] {JoinVariableDeclaration}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Iterator that traverses fields of a field group
 *
 * If the iterator encounters a virtual field group, it enters the field
 * group and traverses its children as well.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param Boolean $debug The kernel.debug value
     */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * This class contains the configuration information for the bundle
 *
 * This information is solely responsible for how the different configuration
 * sections are normalized, and merged.
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param \Twig_Token $token A \Twig_Token instance
     *
     * @return \Twig_NodeInterface A \Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Token Parser for the render tag.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string  $dsn      A data source name
     * @param string  $username The username for the database
     * @param string  $password The password for the database
     * @param integer $lifetime The lifetime to use for the purge
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Build SQL criteria to fetch records by ip and url
     *
     * @param string $ip    The IP
     * @param string $url   The URL
     * @param string $limit The maximum number of tokens to return
     *
     * @return array An array with (criteria, args)
     */",
 "/**
     * Initializes the database
     *
     * @throws \RuntimeException When the requested database driver is not installed
     */",
 "/**
     * Reads the child profiles for the given token.
     *
     * @param string $token The parent token
     *
     * @return array An array of Profile instance
     */",
 "/**
 * Base PDO storage for profiling information in a PDO database.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jan Schumann <js@schumann-it.com>
 */",
 "/**
     * Constructor.
     *
     * If there is no readline support for the current PHP executable
     * a \RuntimeException exception is thrown.
     *
     * @param Application $application An application instance
     *
     * @throws \RuntimeException When Readline extension is not enabled
     */",
 "/**
     * Runs the shell.
     */",
 "/**
     * Tries to return autocompletion for the current entered text.
     *
     * @param string  $text     The last segment of the entered text
     * @param integer $position The current position
     */",
 "/**
     * Returns the shell header.
     *
     * @return string The header string
     */",
 "/**
 * A Shell wraps an Application to add shell capabilities to it.
 *
 * This class only works with a PHP compiled with readline support
 * (either --with-readline or --with-libedit)
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface $container The service container
     * @param array              $mappings  A hash of filter names to service ids
     */",
 "/**
 * Lazy filter manager.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * DefaultController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
*Findsanexecutablebyname.
*
*@paramstring$nameTheexecutablename(withouttheextension)
*@paramstring$defaultThedefaulttoreturnifnoexecutableisfound
*
*@returnstringTheexecutablepathordefaultvalue
*/",
 "/**
*Genericexecutablefinder.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*/",
 "/**
     * Initializes a new ClassMetadata instance that will hold the object-relational mapping
     * metadata of the class with the given name.
     *
     * @param string $entityName The name of the entity class the new instance is used for.
     */",
 "/**
     * Gets the ReflectionPropertys of the mapped class.
     *
     * @return array An array of ReflectionProperty instances.
     */",
 "/**
     * Gets a ReflectionProperty for a specific field of the mapped class.
     *
     * @param string $name
     * @return ReflectionProperty
     */",
 "/**
     * Gets the ReflectionProperty for the single identifier field.
     *
     * @return ReflectionProperty
     * @throws BadMethodCallException If the class has a composite identifier.
     */",
 "/**
     * Validates & completes the given field mapping.
     *
     * @param array $mapping  The field mapping to validated & complete.
     * @return array  The validated and completed field mapping.
     * 
     * @throws MappingException
     */",
 "/**
     * Extracts the identifier values of an entity of this class.
     * 
     * For composite identifiers, the identifier values are returned as an array
     * with the same order as the field order in {@link identifier}.
     *
     * @param object $entity
     * @return array
     */",
 "/**
     * Populates the entity identifier of an entity.
     *
     * @param object $entity
     * @param mixed $id
     * @todo Rename to assignIdentifier()
     */",
 "/**
     * Sets the specified field to the specified value on the given entity.
     *
     * @param object $entity
     * @param string $field
     * @param mixed $value
     */",
 "/**
     * Gets the specified field\'s value off the given entity.
     *
     * @param object $entity
     * @param string $field
     */",
 "/**
     * Stores the association mapping.
     *
     * @param AssociationMapping $assocMapping
     */",
 "/**
     * Creates a string representation of this instance.
     *
     * @return string The string representation of this instance.
     * @todo Construct meaningful string representation.
     */",
 "/**
     * Determines which fields get serialized.
     *
     * It is only serialized what is necessary for best unserialization performance.
     * That means any metadata properties that are not set or empty or simply have
     * their default value are NOT serialized.
     * 
     * Parts that are also NOT serialized because they can not be properly unserialized:
     *      - reflClass (ReflectionClass)
     *      - reflFields (ReflectionProperty array)
     * 
     * @return array The names of all the fields that should be serialized.
     */",
 "/**
     * Restores some state that can not be serialized/unserialized.
     * 
     * @return void
     */",
 "/**
     * Creates a new instance of the mapped class, without invoking the constructor.
     * 
     * @return object
     */",
 "/**
 * A <tt>ClassMetadata</tt> instance holds all the object-relational mapping metadata
 * of an entity and it\'s associations.
 * 
 * Once populated, ClassMetadata instances are usually cached in a serialized form.
 *
 * <b>IMPORTANT NOTE:</b>
 *
 * The fields of this class are only public for 2 reasons:
 * 1) To allow fast READ access.
 * 2) To drastically reduce the size of a serialized instance (private/protected members
 *    get the whole class name, namespace inclusive, prepended to every property in
 *    the serialized representation).
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @since 2.0
 */",
 "/**
     * Constructor
     *
     * @param string $methodName The name of the method
     */",
 "/**
 * @author Eriksen Costa <eriksen.costa@infranology.com.br>
 */",
 "/**
     * Add a nested driver.
     *
     * @param Driver $nestedDriver
     * @param string $namespace
     */",
 "/**
     * Get the array of nested drivers.
     *
     * @return array $drivers
     */",
 "/**
     * Loads the metadata for the specified class into the provided container.
     *
     * @param string $className
     * @param ClassMetadataInfo $metadata
     */",
 "/**
     * Gets the names of all mapped classes known to this driver.
     *
     * @return array The names of all mapped classes known to this driver.
     */",
 "/**
     * Whether the class with the specified name should have its metadata loaded.
     *
     * This is only the case for non-transient classes either mapped as an Entity or MappedSuperclass.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
 * The DriverChain allows you to add multiple other mapping drivers for
 * certain namespaces
 *
 * @since 2.0
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 * @todo Rename: MappingDriverChain or MetadataDriverChain
 */",
 "/**
     * Retrieves the available security identities for the given token
     *
     * The order in which the security identities are returned is significant.
     * Typically, security identities should be ordered from most specific to
     * least specific.
     *
     * @param TokenInterface $token
     * @return array of SecurityIdentityInterface implementations
     */",
 "/**
 * Interface for retrieving security identities from tokens
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Filters all references -- url() and \"@import\" -- through a callable.
     *
     * @param string $content  The CSS
     * @param mixed  $callback A PHP callable
     *
     * @return string The filtered CSS
     */",
 "/**
     * Filters all CSS url()\'s through a callable.
     *
     * @param string  $content  The CSS
     * @param mixed   $callback A PHP callable
     * @param integer $limit    Limit the number of replacements
     * @param integer $count    Will be populated with the count
     *
     * @return string The filtered CSS
     */",
 "/**
     * Filters all CSS imports through a callable.
     *
     * @param string  $content    The CSS
     * @param mixed   $callback   A PHP callable
     * @param integer $limit      Limit the number of replacements
     * @param integer $count      Will be populated with the count
     * @param Boolean $includeUrl Whether to include url() in the pattern
     *
     * @return string The filtered CSS
     */",
 "/**
 * An abstract filter for dealing with CSS.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string    $message    The error message
     * @param integer   $parsedLine The line where the error occurred
     * @param integer   $snippet    The snippet of code near the problem
     * @param string    $parsedFile The file name where the error occurred
     * @param Exception $previous   The previous exception
     */",
 "/**
     * Gets the snippet of code near the error.
     *
     * @return string The snippet of code
     */",
 "/**
     * Sets the snippet of code near the error.
     *
     * @param string $snippet The code snippet
     */",
 "/**
     * Gets the filename where the error occurred.
     *
     * This method returns null if a string is parsed.
     *
     * @return string The filename
     */",
 "/**
     * Sets the filename where the error occurred.
     *
     * @param string $parsedFile The filename
     */",
 "/**
     * Gets the line where the error occurred.
     *
     * @return integer The file line
     */",
 "/**
     * Sets the line where the error occurred.
     *
     * @param integer $parsedLine The file line
     */",
 "/**
 * Exception class thrown when an error occurs during parsing.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Processes an array of configurations.
     *
     * @param NodeInterface $configTree The node tree describing the configuration
     * @param array         $configs    An array of configuration items to process
     *
     * @return array The processed configuration
     */",
 "/**
     * Processes an array of configurations.
     *
     * @param ConfigurationInterface $configuration  The configuration class
     * @param array                  $configs        An array of configuration items to process
     *
     * @return array The processed configuration
     */",
 "/**
     * This method normalizes keys between the different configuration formats
     *
     * Namely, you mostly have foo_bar in YAML while you have foo-bar in XML.
     * After running this method, all keys are normalized to foo_bar.
     *
     * If you have a mixed key like foo-bar_moo, it will not be altered.
     * The key will also not be altered if the target key already exists.
     *
     * @param array $config
     *
     * @return array the config with normalized keys
     */",
 "/**
     * Normalizes a configuration entry.
     *
     * This method returns a normalize configuration array for a given key
     * to remove the differences due to the original format (YAML and XML mainly).
     *
     * Here is an example.
     *
     * The configuration is XML:
     *
     * <twig:extension id=\"twig.extension.foo\" />
     * <twig:extension id=\"twig.extension.bar\" />
     *
     * And the same configuration in YAML:
     *
     * twig.extensions: [\'twig.extension.foo\', \'twig.extension.bar\']
     *
     * @param array  $config A config array
     * @param string $key    The key to normalize
     * @param string $plural The plural form of the key if it is irregular
     *
     * @return array
     */",
 "/**
 * This class is the entry point for config normalization/merging/finalization.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * @param ClassMetadataInfo $metadata 
     * @return mixed $exported
     */",
 "/**
     * Set the array of ClassMetadataInfo instances to export
     *
     * @param array $metadata 
     * @return void
     */",
 "/**
     * Get the extension used to generated the path to a class
     *
     * @return string $extension
     */",
 "/**
     * Set the directory to output the mapping files to
     *
     *     [php]
     *     $exporter = new YamlExporter($metadata);
     *     $exporter->setOutputDir(__DIR__ . \'/yaml\');
     *     $exporter->export();
     *
     * @param string $dir 
     * @return void
     */",
 "/**
     * Export each ClassMetadata instance to a single Doctrine Mapping file
     * named after the entity
     *
     * @return void
     */",
 "/**
*GeneratethepathtowritetheclassforthegivenClassMetadataInfoinstance
*
*@paramClassMetadataInfo$metadata
*@returnstring$path
*/",
 "/**
*Setthedirectorytooutputthemappingfilesto
*
*[php]
*$exporter=newYamlExporter($metadata,__DIR__.\'/yaml\');
*$exporter->setExtension(\'.yml\');
*$exporter->export();
*
*@paramstring$extension
*@returnvoid
*/",
 "/**
*AbstractbaseclasswhichistobeusedfortheExporterdrivers
*whichcanbefoundin\Doctrine\ORM\Tools\Export\Driver
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.org
*@since2.0
*@version$Revision$
*@authorJonathanWage<jonwage@gmail.com>
*/",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for 24 hour format (0-23)
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
 * AuthenticationServiceException is thrown when an authentication request could not be processed due to a system problem.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
     * Boots the Bundle.
     *
     * @api
     */",
 "/**
     * Shutdowns the Bundle.
     *
     * @api
     */",
 "/**
     * Builds the bundle.
     *
     * It is only ever called once when the cache is empty.
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     *
     * @api
     */",
 "/**
     * Returns the container extension that should be implicitly loaded.
     *
     * @return ExtensionInterface|null The default extension or null if there is none
     *
     * @api
     */",
 "/**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */",
 "/**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */",
 "/**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */",
 "/**
     * Gets the Bundle directory path.
     *
     * The path should always be returned as a Unix path (with /).
     *
     * @return string The Bundle absolute path
     *
     * @api
     */",
 "/**
 * BundleInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Merge changes from the request to a Doctrine\Common\Collections\Collection instance.
 *
 * This works with ORM, MongoDB and CouchDB instances of the collection interface.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 *
 * @see    Doctrine\Common\Collections\Collection
 */",
 "/**
   * Internal autoloader for spl_autoload_register().
   * 
   * @param string $class
   */",
 "/**
   * Configure autoloading using Swift Mailer.
   * 
   * This is designed to play nicely with other autoloaders.
   *
   * @param string $initPath The init script to load when autoloading the first Swift class
   */",
 "/**
 * General utility class in Swift Mailer, not to be instantiated.
 * 
 * @package Swift
 * 
 * @author Chris Corbyn
 */",
 "/**
 * This exception is thrown whenever the key of an array is not unique. This can
 * only be the case if the configuration is coming from an XML file.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Send mail via the mail() function.
   * 
   * This method takes the same arguments as PHP mail().
   * 
   * @param string $to
   * @param string $subject
   * @param string $body
   * @param string $headers
   * @param string $extraParams
   * 
   * @return boolean
   */",
 "/**
 * This is the implementation class for {@link Swift_Transport_MailInvoker}.
 * 
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Writes a message to the output.
     *
     * @param string|array $messages The message as an array of lines of a single string
     * @param Boolean      $newline  Whether to add a newline or not
     * @param integer      $type     The type of output
     *
     * @throws \InvalidArgumentException When unknown output type is given
     *
     * @api
     */",
 "/**
     * Writes a message to the output and adds a newline at the end.
     *
     * @param string|array $messages The message as an array of lines of a single string
     * @param integer      $type     The type of output
     *
     * @api
     */",
 "/**
     * Sets the verbosity of the output.
     *
     * @param integer $level The level of verbosity
     *
     * @api
     */",
 "/**
     * Gets the current verbosity of the output.
     *
     * @return integer The current level of verbosity
     *
     * @api
     */",
 "/**
     * Sets the decorated flag.
     *
     * @param Boolean $decorated Whether to decorate the messages or not
     *
     * @api
     */",
 "/**
     * Gets the decorated flag.
     *
     * @return Boolean true if the output will decorate messages, false otherwise
     *
     * @api
     */",
 "/**
     * Sets output formatter.
     *
     * @param OutputFormatterInterface $formatter
     *
     * @api
     */",
 "/**
     * Returns current output formatter instance.
     *
     * @return  OutputFormatterInterface
     *
     * @api
     */",
 "/**
 * OutputInterface is the interface implemented by all Output classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * @Secure(roles=\"ROLE_USER, ROLE_ADMIN, ROLE_SUPERADMIN\")
     * @SecureParam(name=\"param\", permissions=\"VIEW\")
     */",
 "/**
     * @Secure(\"ROLE_FOO, ROLE_BAR\")
     */",
 "/**
     * @SecureParam(name=\"param\", permissions=\"OWNER\")
     * @SecureParam(name=\"anotherParam\", permissions=\"EDIT\")
     * @SecureReturn(permissions=\"MASTER\")
     */",
 "/**
     * Returns whether this guesser is supported on the current OS/PHP setup
     *
     * @return Boolean
     */",
 "/**
     * Guesses the mime type of the file with the given path
     *
     * @see MimeTypeGuesserInterface::guess()
     */",
 "/**
 * Guesses the mime type using the PHP function mime_content_type().
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Returns the response object
     *
     * @return Symfony\Component\HttpFoundation\Response
     *
     * @api
     */",
 "/**
     * Sets a response and stops event propagation
     *
     * @param Symfony\Component\HttpFoundation\Response $response
     *
     * @api
     */",
 "/**
     * Returns whether a response was set
     *
     * @return Boolean Whether a response was set
     *
     * @api
     */",
 "/**
 * Allows to create a response for a request
 *
 * Call setResponse() to set the response that will be returned for the
 * current request. The propagation of this event is stopped as soon as a
 * response is set.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/** {@inheritdoc} */",
 "/**
 * Persister for entities that participate in a hierarchy mapped with the
 * SINGLE_TABLE strategy.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 * @link http://martinfowler.com/eaaCatalog/singleTableInheritance.html
 */",
 "/**
 * This class contains metadata for the entire service
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @param SchemaTool $schemaTool
     * @param array $metadatas
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * Sets the partial result
     *
     * @param \SplObjectStorage $result
     * @return void
     */",
 "/**
     * Returns the partial result
     *
     * @return \SplObjectStorage
     */",
 "/**
 * This exception is thrown when you have requested ACLs for multiple object
 * identities, but the AclProvider implementation failed to find ACLs for all
 * identities.
 *
 * This exception contains the partial result.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $data An array of key/value parameters.
     */",
 "/**
 * Annotation class for @Route().
 *
 * @Annotation
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Command to clear the metadata cache of the various cache drivers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $hierarchy An array defining the hierarchy
     */",
 "/**
     * Returns an array of all roles reachable by the given ones.
     *
     * @param RoleInterface[] $roles An array of RoleInterface instances
     *
     * @return RoleInterface[] An array of RoleInterface instances
     */",
 "/**
 * RoleHierarchy defines a role hierarchy.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
     * @dataProvider getInteractiveCommandData
     */",
 "/**
     * @dataProvider getNonInteractiveCommandData
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Removes abstract definitions from the ContainerBuilder
     *
     * @param ContainerBuilder $container
     */",
 "/**
 * Removes abstract Definitions
 *
 */",
 "/**
     * Adds an element at the end of the collection.
     *
     * @param mixed $element The element to add.
     * @return boolean Always TRUE.
     */",
 "/**
     * Clears the collection, removing all elements.
     */",
 "/**
     * Checks whether an element is contained in the collection.
     * This is an O(n) operation, where n is the size of the collection.
     *
     * @param mixed $element The element to search for.
     * @return boolean TRUE if the collection contains the element, FALSE otherwise.
     */",
 "/**
     * Checks whether the collection is empty (contains no elements).
     *
     * @return boolean TRUE if the collection is empty, FALSE otherwise.
     */",
 "/**
     * Removes the element at the specified index from the collection.
     * 
     * @param string|integer $key The kex/index of the element to remove.
     * @return mixed The removed element or NULL, if the collection did not contain the element.
     */",
 "/**
     * Removes the specified element from the collection, if it is found.
     *
     * @param mixed $element The element to remove.
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */",
 "/**
     * Checks whether the collection contains an element with the specified key/index.
     * 
     * @param string|integer $key The key/index to check for.
     * @return boolean TRUE if the collection contains an element with the specified key/index,
     *          FALSE otherwise.
     */",
 "/**
     * Gets the element at the specified key/index.
     * 
     * @param string|integer $key The key/index of the element to retrieve.
     * @return mixed
     */",
 "/**
     * Gets all keys/indices of the collection.
     *
     * @return array The keys/indices of the collection, in the order of the corresponding
     *          elements in the collection.
     */",
 "/**
     * Gets all values of the collection. 
     * 
     * @return array The values of all elements in the collection, in the order they
     *          appear in the collection.
     */",
 "/**
     * Sets an element in the collection at the specified key/index.
     * 
     * @param string|integer $key The key/index of the element to set.
     * @param mixed $value The element to set.
     */",
 "/**
     * Gets a native PHP array representation of the collection.
     * 
     * @return array
     */",
 "/**
     * Sets the internal iterator to the first element in the collection and
     * returns this element.
     *
     * @return mixed
     */",
 "/**
     * Sets the internal iterator to the last element in the collection and
     * returns this element.
     *
     * @return mixed
     */",
 "/**
     * Gets the key/index of the element at the current iterator position.
     *
     */",
 "/**
     * Gets the element of the collection at the current iterator position.
     *
     */",
 "/**
     * Moves the internal iterator position to the next element.
     *
     */",
 "/**
     * Tests for the existence of an element that satisfies the given predicate.
     *
     * @param Closure $p The predicate.
     * @return boolean TRUE if the predicate is TRUE for at least one element, FALSE otherwise.
     */",
 "/**
     * Returns all the elements of this collection that satisfy the predicate p.
     * The order of the elements is preserved.
     *
     * @param Closure $p The predicate used for filtering.
     * @return Collection A collection with the results of the filter operation.
     */",
 "/**
     * Applies the given predicate p to all elements of this collection,
     * returning true, if the predicate yields true for all elements.
     *
     * @param Closure $p The predicate.
     * @return boolean TRUE, if the predicate yields TRUE for all elements, FALSE otherwise.
     */",
 "/**
     * Applies the given function to each element in the collection and returns
     * a new collection with the elements returned by the function.
     *
     * @param Closure $func
     * @return Collection
     */",
 "/**
     * Partitions this collection in two collections according to a predicate.
     * Keys are preserved in the resulting collections.
     *
     * @param Closure $p The predicate on which to partition.
     * @return array An array with two elements. The first element contains the collection
     *               of elements where the predicate returned TRUE, the second element
     *               contains the collection of elements where the predicate returned FALSE.
     */",
 "/**
     * Gets the index/key of a given element. The comparison of two elements is strict,
     * that means not only the value but also the type must match.
     * For objects this means reference equality.
     *
     * @param mixed $element The element to search for.
     * @return mixed The key/index of the element or FALSE if the element was not found.
     */",
 "/**
     * Extract a slice of $length elements starting at position $offset from the Collection.
     *
     * If $length is null it returns all elements from $offset to the end of the Collection.
     * Keys have to be preserved by this method. Calling this method will only return the
     * selected slice and NOT change the elements contained in the collection slice is called on.
     *
     * @param int $offset
     * @param int $length
     * @return array
     */",
 "/**
 * The missing (SPL) Collection/Array/OrderedMap interface.
 * 
 * A Collection resembles the nature of a regular PHP array. That is,
 * it is essentially an <b>ordered map</b> that can also be used
 * like a list.
 * 
 * A Collection has an internal iterator just like a PHP array. In addition,
 * a Collection can be iterated with external iterators, which is preferrable.
 * To use an external iterator simply use the foreach language construct to
 * iterate over the collection (which calls {@link getIterator()} internally) or
 * explicitly retrieve an iterator though {@link getIterator()} which can then be
 * used to iterate over the collection.
 * You can not rely on the internal iterator of the collection being at a certain
 * position unless you explicitly positioned it before. Prefer iteration with
 * external iterators.
 * 
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Ensure the Doctrine ORM is configured properly for a production environment.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string     $input An array of parameters from the CLI (in the argv format)
     * @param InputDefinition $definition A InputDefinition instance
     *
     * @api
     */",
 "/**
     * Tokenizes a string.
     *
     * @param string $input The input to tokenize
     *
     * @throws \InvalidArgumentException When unable to parse input (should never happen)
     */",
 "/**
 * StringInput represents an input provided as a string.
 *
 * Usage:
 *
 *     $input = new StringInput(\'foo --bar=\"foobar\"\');
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * @see Command
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Warmup the cache.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"LOWER\" \"(\" StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
   * Creates a new SimpleHeader with $name.
   * @param string $name
   * @param Swift_Mime_HeaderEncoder $encoder
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Get the type of Header that this instance represents.
   * @return int
   * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   * @see TYPE_DATE, TYPE_ID, TYPE_PATH
   */",
 "/**
   * Set the model for the field body.
   * This method takes a string for the field value.
   * @param string $model
   */",
 "/**
   * Get the model for the field body.
   * This method returns a string.
   * @return string
   */",
 "/**
   * Get the (unencoded) value of this header.
   * @return string
   */",
 "/**
   * Set the (unencoded) value of this header.
   * @param string $value
   */",
 "/**
   * Get the value of this header prepared for rendering.
   * @return string
   */",
 "/**
 * A Simple MIME Header.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Finds a object by its identifier.
     *
     * This is just a convenient shortcut for getRepository($className)->find($id).
     *
     * @param string
     * @param mixed
     * @return object
     */",
 "/**
     * Tells the ObjectManager to make an instance managed and persistent.
     *
     * The object will be entered into the database as a result of the flush operation.
     * 
     * NOTE: The persist operation always considers objects that are not yet known to
     * this ObjectManager as NEW. Do not pass detached objects to the persist operation.
     *
     * @param object $object The instance to make managed and persistent.
     */",
 "/**
     * Removes an object instance.
     *
     * A removed object will be removed from the database as a result of the flush operation.
     *
     * @param object $object The object instance to remove.
     */",
 "/**
     * Merges the state of a detached object into the persistence context
     * of this ObjectManager and returns the managed copy of the object.
     * The object passed to merge will not become associated/managed with this ObjectManager.
     *
     * @param object $object
     */",
 "/**
     * Detaches an object from the ObjectManager, causing a managed object to
     * become detached. Unflushed changes made to the object if any
     * (including removal of the object), will not be synchronized to the database.
     * Objects which previously referenced the detached object will continue to
     * reference it.
     *
     * @param object $object The object to detach.
     */",
 "/**
     * Refreshes the persistent state of an object from the database,
     * overriding any local changes that have not yet been persisted.
     *
     * @param object $object The object to refresh.
     */",
 "/**
     * Flushes all changes to objects that have been queued up to now to the database.
     * This effectively synchronizes the in-memory state of managed objects with the
     * database.
     */",
 "/**
     * Gets the repository for a class.
     *
     * @param string $className
     * @return \Doctrine\Common\Persistence\ObjectRepository
     */",
 "/**
     * Returns the ClassMetadata descriptor for a class.
     *
     * The class name must be the fully-qualified class name without a leading backslash
     * (as it is returned by get_class($obj)).
     *
     * @param string $className
     * @return \Doctrine\Common\Persistence\Mapping\ClassMetadata
     */",
 "/**
     * Gets the metadata factory used to gather the metadata of classes.
     *
     * @return Doctrine\Common\Persistence\Mapping\ClassMetadataFactory
     */",
 "/**
 * Contract for a Doctrine persistence layer ObjectManager class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * Returns the return value of the controller
     *
     * @return mixed The controller return value
     *
     * @api
     */",
 "/**
 * Allows to create a response for the return value of a controller
 *
 * Call setResponse() to set the response that will be returned for the
 * current request. The propagation of this event is stopped as soon as a
 * response is set.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/** Constructor not to be used */",
 "/**
   * Get a new instance of Preferences.
   * @return Swift_Preferences
   */",
 "/**
   * Set the default charset used.
   * @param string
   * @return Swift_Preferences
   */",
 "/**
   * Set the directory where temporary files can be saved.
   * @param string $dir
   * @return Swift_Preferences
   */",
 "/**
   * Set the type of cache to use (i.e. \"disk\" or \"array\").
   * @param string $type
   * @return Swift_Preferences
   */",
 "/**
   * Add the
   * @param boolean $dotEscape
   * @return Swift_Preferences
   */",
 "/**
 * Changes some global preference settings in Swift Mailer.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
 * Execute a SQL query and output the results.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
 * RuntimeException
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * DigestAuthenticationEntryPoint starts an HTTP Digest authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns the roles granted to the user.
     *
     * <code>
     * public function getRoles()
     * {
     *     return array(\'ROLE_USER\');
     * }
     * </code>
     *
     * Alternatively, the roles might be stored on a ``roles`` property,
     * and populated in any number of different ways when the user object
     * is created.
     *
     * @return Role[] The user roles
     */",
 "/**
     * Returns the password used to authenticate the user.
     *
     * This should be the encoded password. On authentication, a plain-text
     * password will be salted, encoded, and then compared to this value.
     *
     * @return string The password
     */",
 "/**
     * Returns the salt that was originally used to encode the password.
     *
     * This can return null if the password was not encoded using a salt.
     *
     * @return string The salt
     */",
 "/**
     * Returns the username used to authenticate the user.
     *
     * @return string The username
     */",
 "/**
     * Removes sensitive data from the user.
     *
     * This is important if, at any given point, sensitive information like
     * the plain-text password is stored on this object.
     *
     * @return void
     */",
 "/**
     * Returns whether or not the given user is equivalent to *this* user.
     *
     * The equality comparison should neither be done by referential equality
     * nor by comparing identities (i.e. getId() === getId()).
     *
     * However, you do not need to compare every attribute, but only those that
     * are relevant for assessing whether re-authentication is required.
     *
     * @param UserInterface $user
     *
     * @return Boolean
     */",
 "/**
 * Represents the interface that all user classes must implement.
 *
 * This interface is useful because the authentication layer can deal with
 * the object through its lifecycle, using the object to get the encoded
 * password (for checking against a submitted password), assigning roles
 * and so on.
 *
 * Regardless of how your user are loaded or where they come from (a database,
 * configuration, web service, etc), you will have a class that implements
 * this interface. Objects that implement this interface are created and
 * loaded by different objects that implement UserProviderInterface
 *
 * @see UserProviderInterface
 * @see AdvancedUserInterface
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Compass filter test case.
 *
 * @author Maxime Thirouin <dev@moox.fr>
 * @group integration
 */",
 "/**
     * Checks whether the user\'s account has expired.
     *
     * Internally, if this method returns false, the authentication system
     * will throw an AccountExpiredException and prevent login.
     *
     * @return Boolean true if the user\'s account is non expired, false otherwise
     *
     * @see AccountExpiredException
     */",
 "/**
     * Checks whether the user is locked.
     *
     * Internally, if this method returns false, the authentication system
     * will throw a LockedException and prevent login.
     *
     * @return Boolean true if the user is not locked, false otherwise
     *
     * @see LockedException
     */",
 "/**
     * Checks whether the user\'s credentials (password) has expired.
     *
     * Internally, if this method returns false, the authentication system
     * will throw a CredentialsExpiredException and prevent login.
     *
     * @return Boolean true if the user\'s credentials are non expired, false otherwise
     *
     * @see CredentialsExpiredException
     */",
 "/**
     * Checks whether the user is enabled.
     *
     * Internally, if this method returns false, the authentication system
     * will throw a DisabledException and prevent login.
     *
     * @return Boolean true if the user is enabled, false otherwise
     *
     * @see DisabledException
     */",
 "/**
 * Adds extra features to a user class related to account status flags.
 *
 * This interface can be implemented in place of UserInterface if you\'d like
 * the authentication system to consider different account status flags
 * during authentication. If any of the methods in this interface return
 * false, authentication will fail.
 *
 * If you need to perform custom logic for any of these situations, then
 * you will need to register an exception listener and watch for the specific
 * exception instances thrown in each case. All exceptions are a subclass
 * of AccountStatusException
 *
 * @see UserInterface
 * @see AccountStatusException
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * This method will be called whenever the SecurityContext does not contain
     * an TokenInterface object and the framework wishes to provide an implementation
     * with an opportunity to authenticate the request using remember-me capabilities.
     *
     * No attempt whatsoever is made to determine whether the browser has requested
     * remember-me services or presented a valid cookie. Any and all such determinations
     * are left to the implementation of this method.
     *
     * If a browser has presented an unauthorised cookie for whatever reason,
     * make sure to throw an AuthenticationException as this will consequentially
     * result in a call to loginFail() and therefore an invalidation of the cookie.
     *
     * @param Request $request
     *
     * @return TokenInterface
     */",
 "/**
     * Called whenever an interactive authentication attempt was made, but the
     * credentials supplied by the user were missing or otherwise invalid.
     *
     * This method needs to take care of invalidating the cookie.
     *
     * @param Request $request
     *
     * @return void
     */",
 "/**
     * Called whenever an interactive authentication attempt is successful
     * (e.g. a form login).
     *
     * An implementation may always set a remember-me cookie in the Response,
     * although this is not recommended.
     *
     * Instead, implementations should typically look for a request parameter
     * (such as a HTTP POST parameter) that indicates the browser has explicitly
     * requested for the authentication to be remembered.
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token
     *
     * @return void
     */",
 "/**
 * Interface that needs to be implemented by classes which provide remember-me
 * capabilities.
 *
 * We provide two implementations out-of-the-box:
 * - TokenBasedRememberMeServices (does not require a TokenProvider)
 * - PersistentTokenBasedRememberMeServices (requires a TokenProvider)
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * RequestDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Registers the cache warmers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
*LoadsCompassfiles.
*
*@authorMaximeThirouin<maxime.thirouin@gmail.com>
*/",
 "/**
     * Returns whether metadata for the given class exists in the cache
     *
     * @param string $class
     */",
 "/**
     * Returns the metadata for the given class from the cache
     *
     * @param string $class Class Name
     *
     * @return ClassMetadata|false A ClassMetadata instance or false on miss
     */",
 "/**
     * Stores a class metadata in the cache
     *
     * @param ClassMetadata $metadata A Class Metadata
     */",
 "/**
 * Persists ClassMetadata instances in a cache
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * @test
     */",
 "/**
     * @test
     */",
 "/**
     * @dataProvider getFilters
     */",
 "/**
     * The order of these two filters is only interchangeable because one acts on
     * load and the other on dump. We need a more scalable solution.
     */",
 "/**
     * Constructor.
     *
     * @param FilterInterface $importFilter Filter for each imported asset
     */",
 "/**
 * Inlines imported stylesheets.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * The AssetManagerCacheWarmer warms up the formula loader.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Sets the default charset.
     *
     * @param string $charset The charset
     *
     * @api
     */",
 "/**
     * Gets the default charset.
     *
     * @return string The default charset
     *
     * @api
     */",
 "/**
 * Helper is the base class for all helper classes.
 *
 * Most of the time, a Helper is an adapter around an existing
 * class that exposes a read-only interface for templates.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string $class     The service class
     * @param array  $arguments An array of arguments to pass to the service constructor
     *
     * @api
     */",
 "/**
     * Sets the name of the class that acts as a factory using the factory method,
     * which will be invoked statically.
     *
     * @param  string $factoryClass The factory class name
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Gets the factory class.
     *
     * @return string The factory class name
     *
     * @api
     */",
 "/**
     * Sets the factory method able to create an instance of this class.
     *
     * @param  string $factoryMethod The factory method name
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Gets the factory method.
     *
     * @return string The factory method name
     *
     * @api
     */",
 "/**
     * Sets the name of the service that acts as a factory using the factory method.
     *
     * @param string $factoryService The factory service id
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Gets the factory service id.
     *
     * @return string The factory service id
     *
     * @api
     */",
 "/**
     * Sets the service class.
     *
     * @param  string $class The service class
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Sets the service class.
     *
     * @return string The service class
     *
     * @api
     */",
 "/**
     * Sets the arguments to pass to the service constructor/factory method.
     *
     * @param  array $arguments An array of arguments
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * Adds an argument to pass to the service constructor/factory method.
     *
     * @param  mixed $argument An argument
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Sets a specific argument
     *
     * @param integer $index
     * @param mixed $argument
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Gets the arguments to pass to the service constructor/factory method.
     *
     * @return array The array of arguments
     *
     * @api
     */",
 "/**
     * Gets an argument to pass to the service constructor/factory method.
     *
     * @param integer $index
     *
     * @return mixed The argument value
     *
     * @api
     */",
 "/**
     * Sets the methods to call after service initialization.
     *
     * @param  array $calls An array of method calls
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Adds a method to call after service initialization.
     *
     * @param  string $method    The method name to call
     * @param  array  $arguments An array of arguments to pass to the method call
     *
     * @return Definition The current instance
     *
     * @throws InvalidArgumentException on empty $method param
     *
     * @api
     */",
 "/**
     * Removes a method to call after service initialization.
     *
     * @param  string $method    The method name to remove
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Check if the current definition has a given method to call after service initialization.
     *
     * @param  string $method    The method name to search for
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Gets the methods to call after service initialization.
     *
     * @return  array An array of method calls
     *
     * @api
     */",
 "/**
     * Sets tags for this definition
     *
     * @param array $tags
     *
     * @return Definition the current instance
     *
     * @api
     */",
 "/**
     * Returns all tags.
     *
     * @return array An array of tags
     *
     * @api
     */",
 "/**
     * Gets a tag by name.
     *
     * @param  string $name The tag name
     *
     * @return array An array of attributes
     *
     * @api
     */",
 "/**
     * Adds a tag for this definition.
     *
     * @param  string $name       The tag name
     * @param  array  $attributes An array of attributes
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Whether this definition has a tag with the given name
     *
     * @param string $name
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Clears the tags for this definition.
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Sets a file to require before creating the service.
     *
     * @param  string $file A full pathname to include
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Gets the file to require before creating the service.
     *
     * @return string The full pathname to include
     *
     * @api
     */",
 "/**
     * Sets the scope of the service
     *
     * @param  string $scope Whether the service must be shared or not
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Returns the scope of the service
     *
     * @return string
     *
     * @api
     */",
 "/**
     * Sets the visibility of this service.
     *
     * @param Boolean $boolean
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Whether this service is public facing
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Sets whether this definition is synthetic, that is not constructed by the
     * container, but dynamically injected.
     *
     * @param Boolean $boolean
     *
     * @return Definition the current instance
     *
     * @api
     */",
 "/**
     * Whether this definition is synthetic, that is not constructed by the
     * container, but dynamically injected.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Whether this definition is abstract, that means it merely serves as a
     * template for other definitions.
     *
     * @param Boolean $boolean
     *
     * @return Definition the current instance
     *
     * @api
     */",
 "/**
     * Whether this definition is abstract, that means it merely serves as a
     * template for other definitions.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Sets a configurator to call after the service is fully initialized.
     *
     * @param  mixed $callable A PHP callable
     *
     * @return Definition The current instance
     *
     * @api
     */",
 "/**
     * Gets the configurator to call after the service is fully initialized.
     *
     * @return mixed The PHP callable to call
     *
     * @api
     */",
 "/**
 * Definition represents a service definition.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface      $container The dependency injection container
     * @param TemplateFinderInterface $finder    The template paths cache warmer
     */",
 "/**
     * Warms up the cache.
     *
     * @param string $cacheDir The cache directory
     */",
 "/**
     * Checks whether this warmer is optional or not.
     *
     * @return Boolean always true
     */",
 "/**
 * Generates the Twig cache for all templates.
 *
 * This warmer must be registered after TemplatePathsCacheWarmer,
 * as the Twig loader will need the cache generated by it.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Type that maps an SQL DATETIME/TIMESTAMP to a PHP DateTime object.
 *
 * @since 2.0
 */",
 "/**
     * Gets an asset by name.
     *
     * @param string $name The asset name
     *
     * @return AssetInterface The asset
     *
     * @throws InvalidArgumentException If there is no asset by that name
     */",
 "/**
     * Checks if the current asset manager has a certain asset.
     *
     * @param string $name an asset name
     *
     * @return Boolean True if the asset has been set, false if not
     */",
 "/**
     * Registers an asset to the current asset manager.
     *
     * @param string         $name  The asset name
     * @param AssetInterface $asset The asset
     */",
 "/**
     * Returns an array of asset names.
     *
     * @return array An array of asset names
     */",
 "/**
 * Manages assets.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Redirects the user to another URL.
     *
     * @param string  $path   The path info to redirect to.
     * @param string  $route  The route that matched
     * @param string  $scheme The URL scheme (null to keep the current one)
     *
     * @return array An array of parameters
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets the default connection name.
     *
     * @return string The default connection name
     */",
 "/**
     * Gets the named connection.
     *
     * @param string $name The connection name (null for the default one)
     *
     * @return Connection
     */",
 "/**
     * Gets an array of all registered connections
     *
     * @return array An array of Connection instances
     */",
 "/**
     * Gets all connection names.
     *
     * @return array An array of connection names
     */",
 "/**
     * Gets the default entity manager name.
     *
     * @return string The default entity manager name
     */",
 "/**
     * Gets a named entity manager.
     *
     * @param string $name The entity manager name (null for the default one)
     *
     * @return EntityManager
     */",
 "/**
     * Gets an array of all registered entity managers
     *
     * @return array An array of EntityManager instances
     */",
 "/**
     * Resets a named entity manager.
     *
     * This method is useful when an entity manager has been closed
     * because of a rollbacked transaction AND when you think that
     * it makes sense to get a new one to replace the closed one.
     *
     * Be warned that you will get a brand new entity manager as
     * the existing one is not useable anymore. This means that any
     * other object with a dependency on this entity manager will
     * hold an obsolete reference. You can inject the registry instead
     * to avoid this problem.
     *
     * @param string $name The entity manager name (null for the default one)
     *
     * @return EntityManager
     */",
 "/**
     * Resolves a registered namespace alias to the full namespace.
     *
     * This method looks for the alias in all registered entity managers.
     *
     * @param string $alias The alias
     *
     * @return string The full namespace
     *
     * @see Configuration::getEntityNamespace
     */",
 "/**
     * Gets all connection names.
     *
     * @return array An array of connection names
     */",
 "/**
     * Gets the EntityRepository for an entity.
     *
     * @param string $entityName        The name of the entity.
     * @param string $entityManagerName The entity manager name (null for the default one)
     *
     * @return Doctrine\ORM\EntityRepository
     */",
 "/**
     * Gets the entity manager associated with a given class.
     *
     * @param string $class A Doctrine Entity class name
     *
     * @return EntityManager|null
     */",
 "/**
 * References Doctrine connections and entity managers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns service ids for a given tag.
     *
     * @param string $name The tag name
     *
     * @return array An array of tags
     *
     * @api
     */",
 "/**
 * TaggedContainerInterface is the interface implemented when a container knows how to deals with tags.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
*Modifiesthecontainer,andsetstheproxyclasseswhereneeded
*
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*/",
 "/**
     * Constructor.
     *
     * @param string $optipngBin Path to the optipng binary
     */",
 "/**
 * Runs assets through OptiPNG.
 *
 * @link   http://optipng.sourceforge.net/
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * This exception is thrown when a circular reference in a parameter is detected.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param string $value         The guessed value
     * @param integer $confidence   The confidence that the guessed class name
     *                              is correct
     */",
 "/**
     * Returns the guessed value
     *
     * @return mixed
     */",
 "/**
 * Contains a guessed value
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Given a message with different plural translations separated by a
     * pipe (|), this method returns the correct portion of the message based
     * on the given number, locale and the pluralization rules in the message
     * itself.
     *
     * The message supports two different types of pluralization rules:
     *
     * interval: {0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples
     * indexed:  There is one apple|There is %count% apples
     *
     * The indexed solution can also contain labels (e.g. one: There is one apple).
     * This is purely for making the translations more clear - it does not
     * affect the functionality.
     *
     * The two methods can also be mixed:
     *     {0} There are no apples|one: There is one apple|more: There are %count% apples
     *
     * @param  string  $message The message being translated
     * @param  integer $number  The number of items represented for the message
     * @param  string  $locale  The locale to use for choosing
     *
     * @return string
     *
     * @throws InvalidArgumentException
     *
     * @api
     */",
 "/**
 * MessageSelector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritDoc}
     * @todo Same code exists in AnnotationDriver, should we re-use it somehow or not worry about it?
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The StaticPHPDriver calls a static loadMetadata() method on your entity
 * classes where you can manually populate the ClassMetadata instance.
 *
 * @license 	http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    	www.doctrine-project.org
 * @since   	2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Fixes relative CSS urls.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a block node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param string $indexName
     * @param array $column
     * @param bool $isUnique
     * @param bool $isPrimary
     */",
 "/**
     * @param string $column
     */",
 "/**
     * @return array
     */",
 "/**
     * Is the index neither unique nor primary key?
     * 
     * @return bool
     */",
 "/**
     * @return bool
     */",
 "/**
     * @return bool
     */",
 "/**
     * @param  string $columnName
     * @param  int $pos
     * @return bool
     */",
 "/**
     * Check if this index exactly spans the given column names in the correct order.
     *
     * @param array $columnNames
     * @return boolean
     */",
 "/**
     * Check if the other index already fullfills all the indexing and constraint needs of the current one.
     *
     * @param Index $other
     * @return bool
     */",
 "/**
     * Detect if the other index is a non-unique, non primary index that can be overwritten by this one.
     *
     * @param Index $other
     * @return bool
     */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constrain for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
 * Command to clear the query cache of the various cache drivers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string  $name        The option name
     * @param string  $shortcut    The shortcut (can be null)
     * @param integer $mode        The option mode: One of the VALUE_* constants
     * @param string  $description A description text
     * @param mixed   $default     The default value (must be null for self::VALUE_REQUIRED or self::VALUE_NONE)
     *
     * @throws \InvalidArgumentException If option mode is invalid or incompatible
     *
     * @api
     */",
 "/**
     * Returns the option shortcut.
     *
     * @return string The shortcut
     */",
 "/**
     * Returns the option name.
     *
     * @return string The name
     */",
 "/**
     * Returns true if the option accepts a value.
     *
     * @return Boolean true if value mode is not self::VALUE_NONE, false otherwise
     */",
 "/**
     * Returns true if the option requires a value.
     *
     * @return Boolean true if value mode is self::VALUE_REQUIRED, false otherwise
     */",
 "/**
     * Returns true if the option takes an optional value.
     *
     * @return Boolean true if value mode is self::VALUE_OPTIONAL, false otherwise
     */",
 "/**
     * Returns true if the option can take multiple values.
     *
     * @return Boolean true if mode is self::VALUE_IS_ARRAY, false otherwise
     */",
 "/**
     * Sets the default value.
     *
     * @param mixed $default The default value
     *
     * @throws \LogicException When incorrect default value is given
     */",
 "/**
     * Returns the default value.
     *
     * @return mixed The default value
     */",
 "/**
     * Returns the description text.
     *
     * @return string The description text
     */",
 "/**
 * Represents a command line option.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns the token parser instance to add to the existing list.
     *
     * @return array An array of Twig_TokenParser instances
     */",
 "/**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
     * Loads a resource.
     *
     * @param mixed  $file     The resource
     * @param string $type     The resource type
     *
     * @throws \InvalidArgumentException When ini file is not valid
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean true if this class supports the given resource, false otherwise
     */",
 "/**
 * IniFileLoader loads parameters from INI files.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Flushes the output to the client.
 *
 * @see flush()
 */",
 "/**
     * Constructs the Oracle PDO DSN.
     *
     * @return string  The DSN.
     */",
 "/**
*@dataProvidergetTestData
*/",
 "/**
     * Loads a class metadata instance from the cache
     *
     * @param \ReflectionClass $class
     *
     * @return ClassMetadata
     */",
 "/**
     * Puts a class metadata instance into the cache
     *
     * @param ClassMetadata $metadata
     *
     * @return void
     */",
 "/**
     * Evicts the class metadata for the given class from the cache.
     *
     * @param \ReflectionClass $class
     *
     * @return void
     */",
 "/**
     * Returns the array of templates variables.
     *
     * @return array
     */",
 "/**
     * Sets the template variables
     *
     * @param array $vars The template variables
     */",
 "/**
     * Returns the engine used when guessing template names
     *
     * @return string
     */",
 "/**
     * Sets the engine used when guessing template names
     *
     * @param string
     */",
 "/**
     * Sets the template logic name.
     *
     * @param string $template The template logic name
     */",
 "/**
     * Returns the template reference.
     *
     * @return TemplateReference
     */",
 "/**
     * Sets the template reference.
     *
     * @param TemplateReference|string $template The template reference
     */",
 "/**
     * Returns the annotation alias name.
     *
     * @return string
     * @see ConfigurationInterface
     */",
 "/**
 * The Template class handles the @Template annotation parts.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @Annotation
 */",
 "/**
     * Constructor.
     *
     * @param integer                  $verbosity The verbosity level (self::VERBOSITY_QUIET, self::VERBOSITY_NORMAL, self::VERBOSITY_VERBOSE)
     * @param Boolean                  $decorated Whether to decorate messages or not (null for auto-guessing)
     * @param OutputFormatterInterface $formatter Output formatter instance
     *
     * @api
     */",
 "/**
     * Sets output formatter.
     *
     * @param OutputFormatterInterface $formatter
     *
     * @api
     */",
 "/**
     * Returns current output formatter instance.
     *
     * @return  OutputFormatterInterface
     *
     * @api
     */",
 "/**
     * Sets the decorated flag.
     *
     * @param Boolean $decorated Whether to decorate the messages or not
     *
     * @api
     */",
 "/**
     * Gets the decorated flag.
     *
     * @return Boolean true if the output will decorate messages, false otherwise
     *
     * @api
     */",
 "/**
     * Sets the verbosity of the output.
     *
     * @param integer $level The level of verbosity
     *
     * @api
     */",
 "/**
     * Gets the current verbosity of the output.
     *
     * @return integer The current level of verbosity
     *
     * @api
     */",
 "/**
     * Writes a message to the output and adds a newline at the end.
     *
     * @param string|array $messages The message as an array of lines of a single string
     * @param integer      $type     The type of output
     *
     * @api
     */",
 "/**
     * Writes a message to the output.
     *
     * @param string|array $messages The message as an array of lines of a single string
     * @param Boolean      $newline  Whether to add a newline or not
     * @param integer      $type     The type of output
     *
     * @throws \InvalidArgumentException When unknown output type is given
     *
     * @api
     */",
 "/**
     * Writes a message to the output.
     *
     * @param string  $message A message to write to the output
     * @param Boolean $newline Whether to add a newline or not
     */",
 "/**
 * Base class for output classes.
 *
 * There are three levels of verbosity:
 *
 *  * normal: no option passed (normal output - information)
 *  * verbose: -v (more output - debug)
 *  * quiet: -q (no output)
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * __construct
     *
     * @param array $parameters
     */",
 "/**
     * Returns the form used for configuration.
     *
     * @return FormTypeInterface
     */",
 "/**
     * Checks for requirements.
     *
     * @return array
     */",
 "/**
     * Checks for optional setting it could be nice to have.
     *
     * @return array
     */",
 "/**
     * Returns the template to be renderer for this step.
     *
     * @return string
     */",
 "/**
     * Updates form data parameters.
     *
     * @param array $parameters
     * @return array
     */",
 "/**
 * StepInterface.
 *
 * @author Marc Weistroff <marc.weistroff@sensio.com>
 */",
 "/**
   * Creates a new FailoverTransport with $transports.
   * @param array $transports
   */",
 "/**
   * Create a new FailoverTransport instance.
   * @param string $transports
   * @return Swift_FailoverTransport
   */",
 "/**
 * Contains a list of redundant Transports so when one fails, the next is used.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
 * Represents a security policy which need to be enforced when sandbox mode is enabled.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the route.
     *
     * @return string The route
     */",
 "/**
     * Gets the controller.
     *
     * @return string The controller as a string
     */",
 "/**
 * RequestDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Constructor.
     *
     * @param CsrfProviderInterface $csrfProvider The provider to use to generate the token
     */",
 "/**
     * Builds the CSRF field.
     *
     * A validator is added to check the token value when the CSRF field is added to
     * a root form
     *
     * @param FormBuilder $builder The form builder
     * @param array       $options The options
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Returns the name of this form.
     *
     * @return string \'csrf\'
     */",
 "/**
     * Dumps a set of routes to a PHP class.
     *
     * Available options:
     *
     *  * class:      The class name
     *  * base_class: The base class name
     *
     * @param  array  $options An array of options
     *
     * @return string A PHP class representing the matcher class
     */",
 "/**
 * PhpMatcherDumper creates a PHP class able to match URLs for a given set of routes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param HandlerInterface $handler Handler.
     * @param integer $bufferSize How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.
     * @param integer $level The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Buffers all records until closing the handler and then pass them as batch.
 *
 * This is useful for a MailHandler to send only one mail per request instead of
 * sending one per log message.
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Attempts to connect to the database and returns a driver connection on success.
     *
     * @return Doctrine\DBAL\Driver\Connection
     */",
 "/**
     * Constructs the Postgres PDO DSN.
     *
     * @return string The DSN.
     */",
 "/**
 * Driver that connects through pdo_pgsql.
 *
 * @since 2.0
 */",
 "/**
     * Called before child nodes are visited.
     *
     * @param Twig_NodeInterface $node The node to visit
     * @param Twig_Environment   $env  The Twig environment instance
     *
     * @return Twig_NodeInterface The modified node
     */",
 "/**
     * Called after child nodes are visited.
     *
     * @param Twig_NodeInterface $node The node to visit
     * @param Twig_Environment   $env  The Twig environment instance
     *
     * @return Twig_NodeInterface The modified node
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Twig_NodeVisitor_Escaper implements output escaping.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns the plural position to use for the given locale and number.
     *
     * @param  integer $number The number
     * @param  string  $locale The locale
     *
     * @return integer The plural position
     */",
 "/**
     * Overrides the default plural rule for a given locale.
     *
     * @param string $rule   A PHP callable
     * @param string $locale The locale
     *
     * @return null
     */",
 "/**
 * Returns the plural rules for a given locale.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a macro node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Sets the parent form.
     *
     * @param FormInterface $parent The parent form
     */",
 "/**
     * Returns the parent form.
     *
     * @return FormInterface The parent form
     */",
 "/**
     * Returns whether the form has a parent.
     *
     * @return Boolean
     */",
 "/**
     * Adds a child to the form.
     *
     * @param FormInterface $child The FormInterface to add as a child
     */",
 "/**
     * Returns whether a child with the given name exists.
     *
     * @param string $name
     *
     * @return Boolean
     */",
 "/**
     * Removes a child from the form.
     *
     * @param string $name The name of the child to remove
     */",
 "/**
     * Returns all children in this group.
     *
     * @return array An array of FormInterface instances
     */",
 "/**
     * Return whether the form has children.
     *
     * @return Boolean
     */",
 "/**
     * Returns all errors.
     *
     * @return array An array of FormError instances that occurred during binding
     */",
 "/**
     * Updates the field with default data.
     *
     * @param array $appData The data formatted as expected for the underlying object
     *
     * @return Form The current form
     */",
 "/**
     * Returns the data in the format needed for the underlying object.
     *
     * @return mixed
     */",
 "/**
     * Returns the normalized data of the field.
     *
     * @return mixed  When the field is not bound, the default data is returned.
     *                When the field is bound, the normalized bound data is
     *                returned if the field is valid, null otherwise.
     */",
 "/**
     * Returns the data transformed by the value transformer.
     *
     * @return string
     */",
 "/**
     * Returns the extra data.
     *
     * @return array The bound data which do not belong to a child
     */",
 "/**
     * Returns whether the field is bound.
     *
     * @return Boolean true if the form is bound to input values, false otherwise
     */",
 "/**
     * Returns the supported types.
     *
     * @return array An array of FormTypeInterface
     */",
 "/**
     * Returns the name by which the form is identified in forms.
     *
     * @return string  The name of the form.
     */",
 "/**
     * Adds an error to this form.
     *
     * @param FormError $error
     */",
 "/**
     * Returns whether the form is valid.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the form is required to be filled out.
     *
     * If the form has a parent and the parent is not required, this method
     * will always return false. Otherwise the value set with setRequired()
     * is returned.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether this form can be read only.
     *
     * The content of a read-only form is displayed, but not allowed to be
     * modified. The validation of modified read-only forms should fail.
     *
     * Fields whose parents are read-only are considered read-only regardless of
     * their own state.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the form is empty.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the data in the different formats is synchronized.
     *
     * @return Boolean
     */",
 "/**
     * Writes data into the form.
     *
     * @param mixed $data  The data
     */",
 "/**
     * Returns whether the form has an attribute with the given name.
     *
     * @param string $name The name of the attribute
     */",
 "/**
     * Returns the value of the attributes with the given name.
     *
     * @param string $name The name of the attribute
     */",
 "/**
     * Returns the root of the form tree.
     *
     * @return FormInterface  The root of the tree
     */",
 "/**
     * Returns whether the field is the root of the form tree.
     *
     * @return Boolean
     */",
 "/**
     * Creates a view.
     *
     * @param FormView $parent The parent view
     *
     * @return FormView The view
     */",
 "/**
 * A form group bundling multiple form forms
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Processes the ContainerBuilder to replace references to aliases with actual service references.
     *
     * @param ContainerBuilder $container
     */",
 "/**
     * Processes the arguments to replace aliases.
     *
     * @param array $arguments An array of References
     *
     * @return array An array of References
     */",
 "/**
     * Resolves an alias into a definition id.
     *
     * @param string $id The definition or alias id to resolve
     *
     * @return string The definition id with aliases resolved
     */",
 "/**
 * Replaces all references to aliases with references to the actual service.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Represents a template filter as a node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * Validates whether a value match or not given regexp pattern
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Joseph Bielawski <stloyd@gmail.com>
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Adds a CSRF field to the form when the CSRF protection is enabled.
     *
     * @param FormBuilder   $builder The form builder
     * @param array         $options The options
     */",
 "/**
     * Removes CSRF fields from all the form views except the root one.
     *
     * @param FormView      $view The form view
     * @param FormInterface $form The form
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"SQRT\" \"(\" SimpleArithmeticExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
   * Constructor.
   */",
 "/**
   * Tests if this Transport mechanism has started.
   *
   * @return boolean
   */",
 "/**
   * Starts this Transport mechanism.
   */",
 "/**
   * Stops this Transport mechanism.
   */",
 "/**
   * Sends the given message.
   *
   * @param Swift_Mime_Message $message
   * @param string[] &$failedRecipients to collect failures by-reference
   *
   * @return int The number of sent emails
   */",
 "/**
   * Register a plugin.
   *
   * @param Swift_Events_EventListener $plugin
   */",
 "/**
 * Pretends messages have been sent, but just ignores them.
 * @package Swift
 * @author  Fabien Potencier
 */",
 "/**
     * @throws \InvalidArgumentException When the bundle doesn\'t end with Bundle (Example: \"Bundle/MySampleBundle\")
     */",
 "/**
 * Initializes a Doctrine entity inside a bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Base header creation function used by init headers & record headers
     *
     * @param array $meta Wildfire Plugin, Protocol & Structure Indexes
     * @param string $message Log message
     * @return array Complete header string ready for the client as key and message as value
     */",
 "/**
     * Creates message header from record
     *
     * @see createHeader()
     * @param array $record
     * @return string
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Wildfire initialization headers to enable message parsing
     *
     * @see createHeader()
     * @see sendHeader()
     * @return array
     */",
 "/**
     * Send header string to the client
     *
     * @param string $header
     * @param string $content
     */",
 "/**
     * Creates & sends header for a record, ensuring init headers have been sent prior
     *
     * @see sendHeader()
     * @see sendInitHeaders()
     * @param array $record
     */",
 "/**
     * Verifies if the headers are accepted by the current user agent
     *
     * @return Boolean
     */",
 "/**
 * Simple FirePHP Handler (http://www.firephp.org/), which uses the Wildfire protocol.
 *
 * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>
 */",
 "/**
     * Constructor.
     *
     * @param string|array $paths A path or an array of paths where to look for resources
     */",
 "/**
     * Returns a full path for a given file name.
     *
     * @param mixed   $name        The file name to locate
     * @param string  $currentPath The current path
     * @param Boolean $first       Whether to return the first occurrence or an array of filenames
     *
     * @return string|array The full path to the file|An array of file paths
     *
     * @throws \InvalidArgumentException When file is not found
     */",
 "/**
*Returnswhetherthefilepathisanabsolutepath.
*
*@paramstring$fileAfilepath
*
*@returnBoolean
*/",
 "/**
*FileLocatorusesanarrayofpre-definedpathstofindfiles.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
 * A filter that wraps callables.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructs filter.
     *
     * @param string $nodeBin   The path to the node binary
     * @param array  $nodePaths An array of node paths
     */",
 "/**
     * Enable output compression.
     *
     * @param   boolean     $compress
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Loads STYL files.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 */",
 "/**
     * @override
     */",
 "/**
 * QuantifiedExpression ::= (\"ALL\" | \"ANY\" | \"SOME\") \"(\" Subselect \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns the name by which the form is identified in forms.
     *
     * @return string  The name of the form.
     */",
 "/**
     * Returns the types used by this form.
     *
     * @return array An array of FormTypeInterface
     */",
 "/**
     * Returns whether the form is required to be filled out.
     *
     * If the form has a parent and the parent is not required, this method
     * will always return false. Otherwise the value set with setRequired()
     * is returned.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether this form is read only.
     *
     * The content of a read-only form is displayed, but not allowed to be
     * modified. The validation of modified read-only forms should fail.
     *
     * Fields whose parents are read-only are considered read-only regardless of
     * their own state.
     *
     * @return Boolean
     */",
 "/**
     * Sets the parent form.
     *
     * @param FormInterface $parent The parent form
     *
     * @return Form The current form
     */",
 "/**
     * Returns the parent field.
     *
     * @return FormInterface The parent field
     */",
 "/**
     * Returns whether the form has a parent.
     *
     * @return Boolean
     */",
 "/**
     * Returns the root of the form tree.
     *
     * @return FormInterface  The root of the tree
     */",
 "/**
     * Returns whether the field is the root of the form tree.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the form has an attribute with the given name.
     *
     * @param string $name The name of the attribute
     *
     * @return Boolean
     */",
 "/**
     * Returns the value of the attributes with the given name.
     *
     * @param string $name The name of the attribute
     */",
 "/**
     * Updates the field with default data.
     *
     * @param array $appData The data formatted as expected for the underlying object
     *
     * @return Form The current form
     */",
 "/**
     * Returns the data in the format needed for the underlying object.
     *
     * @return mixed
     */",
 "/**
     * Returns the data transformed by the value transformer.
     *
     * @return string
     */",
 "/**
     * Returns the extra data.
     *
     * @return array The bound data which do not belong to a child
     */",
 "/**
     * Binds data to the field, transforms and validates it.
     *
     * @param string|array $clientData The data
     *
     * @return Form The current form
     *
     * @throws UnexpectedTypeException
     */",
 "/**
     * Binds a request to the form.
     *
     * If the request method is POST, PUT or GET, the data is bound to the form,
     * transformed and written into the form data (an object or an array).
     *
     * @param Request $request    The request to bind to the form
     *
     * @return Form This form
     *
     * @throws FormException if the method of the request is not one of GET, POST or PUT
     */",
 "/**
     * Returns the normalized data of the field.
     *
     * @return mixed  When the field is not bound, the default data is returned.
     *                When the field is bound, the normalized bound data is
     *                returned if the field is valid, null otherwise.
     */",
 "/**
     * Adds an error to this form.
     *
     * @param FormError $error
     *
     * @return Form The current form
     */",
 "/**
     * Returns whether errors bubble up to the parent.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the field is bound.
     *
     * @return Boolean true if the form is bound to input values, false otherwise
     */",
 "/**
     * Returns whether the data in the different formats is synchronized.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the form is empty.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the field is valid.
     *
     * @return Boolean
     */",
 "/**
     * Returns whether or not there are errors.
     *
     * @return Boolean  true if form is bound and not valid
     */",
 "/**
     * Returns all errors.
     *
     * @return array  An array of FormError instances that occurred during binding
     */",
 "/**
     * Returns the DataTransformers.
     *
     * @return array An array of DataTransformerInterface
     */",
 "/**
     * Returns the DataTransformers.
     *
     * @return array An array of DataTransformerInterface
     */",
 "/**
     * Returns all children in this group.
     *
     * @return array
     */",
 "/**
     * Return whether the form has children.
     *
     * @return Boolean
     */",
 "/**
     * Adds a child to the form.
     *
     * @param FormInterface $child The FormInterface to add as a child
     *
     * @return Form the current form
     */",
 "/**
     * Removes a child from the form.
     *
     * @param string $name The name of the child to remove
     *
     * @return Form the current form
     */",
 "/**
     * Returns whether a child with the given name exists.
     *
     * @param  string $name
     *
     * @return Boolean
     */",
 "/**
     * Returns the child with the given name.
     *
     * @param  string $name
     *
     * @return FormInterface
     *
     * @throws \InvalidArgumentException if the child does not exist
     */",
 "/**
     * Returns true if the child exists (implements the \ArrayAccess interface).
     *
     * @param string $name The name of the child
     *
     * @return Boolean true if the widget exists, false otherwise
     */",
 "/**
     * Returns the form child associated with the name (implements the \ArrayAccess interface).
     *
     * @param string $name The offset of the value to get
     *
     * @return FormInterface  A form instance
     */",
 "/**
     * Adds a child to the form (implements the \ArrayAccess interface).
     *
     * @param string $name Ignored. The name of the child is used.
     * @param FormInterface $child  The child to be added
     */",
 "/**
     * Removes the child with the given name from the form (implements the \ArrayAccess interface).
     *
     * @param string $name  The name of the child to be removed
     */",
 "/**
     * Returns the iterator for this group.
     *
     * @return \ArrayIterator
     */",
 "/**
     * Returns the number of form children (implements the \Countable interface).
     *
     * @return integer The number of embedded form children
     */",
 "/**
     * Creates a view.
     *
     * @param FormView $parent The parent view
     *
     * @return FormView The view
     */",
 "/**
     * Normalizes the value if a normalization transformer is set.
     *
     * @param  mixed $value  The value to transform
     *
     * @return string
     */",
 "/**
     * Reverse transforms a value if a normalization transformer is set.
     *
     * @param  string $value  The value to reverse transform
     *
     * @return mixed
     */",
 "/**
     * Transforms the value if a value transformer is set.
     *
     * @param  mixed $value  The value to transform
     *
     * @return string
     */",
 "/**
     * Reverse transforms a value if a value transformer is set.
     *
     * @param  string $value  The value to reverse transform
     *
     * @return mixed
     */",
 "/**
 * Form represents a form.
 *
 * A form is composed of a validator schema and a widget form schema.
 *
 * To implement your own form fields, you need to have a thorough understanding
 * of the data flow within a form field. A form field stores its data in three
 * different representations:
 *
 *   (1) the format required by the form\'s object
 *   (2) a normalized format for internal processing
 *   (3) the format used for display
 *
 * A date field, for example, may store a date as \"Y-m-d\" string (1) in the
 * object. To facilitate processing in the field, this value is normalized
 * to a DateTime object (2). In the HTML representation of your form, a
 * localized string (3) is presented to and modified by the user.
 *
 * In most cases, format (1) and format (2) will be the same. For example,
 * a checkbox field uses a Boolean value both for internal processing as for
 * storage in the object. In these cases you simply need to set a value
 * transformer to convert between formats (2) and (3). You can do this by
 * calling appendClientTransformer().
 *
 * In some cases though it makes sense to make format (1) configurable. To
 * demonstrate this, let\'s extend our above date field to store the value
 * either as \"Y-m-d\" string or as timestamp. Internally we still want to
 * use a DateTime object for processing. To convert the data from string/integer
 * to DateTime you can set a normalization transformer by calling
 * appendNormTransformer(). The normalized data is then
 * converted to the displayed data as described before.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * @param callback|HandlerInterface $handler Handler or factory callback($record, $fingersCrossedHandler).
     * @param int $actionLevel The minimum logging level at which this handler will be triggered
     * @param int $bufferSize How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     * @param Boolean $stopBuffering Whether the handler should stop buffering after being triggered (default true)
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Resets the state of the handler. Stops forwarding records to the wrapped handler.
     */",
 "/**
 * Buffers all records until a certain level is reached
 *
 * The advantage of this approach is that you don\'t get any clutter in your log files.
 * Only requests which actually trigger an error (or whatever your actionLevel is) will be
 * in the logs, but they will contain all records, not only those above the level threshold.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
 * Persister for collections of basic elements / value types.
 *
 * @author robo
 * @todo Implementation once support for collections of basic elements (i.e. strings) is added.
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Set a custom children builder
     *
     * @param NodeBuilder $builder A custom NodeBuilder
     */",
 "/**
     * Returns a builder to add children nodes
     *
     * @return NodeBuilder
     */",
 "/**
     * Sets a prototype for child nodes.
     *
     * @param string $type the type of node
     *
     * @return NodeDefinition
     */",
 "/**
     * Adds the default value if the node is not set in the configuration.
     *
     * @return ArrayNodeDefinition
     */",
 "/**
     * Requires the node to have at least one element.
     *
     * @return ArrayNodeDefinition
     */",
 "/**
     * Disallows adding news keys in a subsequent configuration.
     *
     * If used all keys have to be defined in the same configuration file.
     *
     * @return ArrayNodeDefinition
     */",
 "/**
     * Sets a normalization rule for XML configurations.
     *
     * @param string $singular The key to remap
     * @param string $plural   The plural of the key for irregular plurals
     *
     * @return ArrayNodeDefinition
     */",
 "/**
     * Set the attribute which value is to be used as key.
     *
     * This is useful when you have an indexed array that should be an
     * associative array. You can select an item from within the array
     * to be the key of the particular item. For example, if \"id\" is the
     * \"key\", then:
     *
     *     array(
     *         array(\'id\' => \'my_name\', \'foo\' => \'bar\'),
     *     )
     *
     * becomes
     *
     *     array(
     *         \'my_name\' => array(\'foo\' => \'bar\'),
     *     )
     *
     * If you\'d like \"\'id\' => \'my_name\'\" to still be present in the resulting
     * array, then you can set the second argument of this method to false.
     *
     * @param string  $name          The name of the key
     * @param Boolean $removeKeyItem Whether or not the key item should be removed.
     *
     * @return ArrayNodeDefinition
     */",
 "/**
     * Sets whether the node can be unset.
     *
     * @param Boolean $allow
     *
     * @return ArrayNodeDefinition
     */",
 "/**
     * Disables the deep merging of the node.
     *
     * @return ArrayNodeDefinition
     */",
 "/**
     * Allows extra config keys to be specified under an array without
     * throwing an exception.
     *
     * Those config values are simply ignored. This should be used only
     * in special cases where you want to send an entire configuration
     * array through a special tree that processes only part of the array.
     *
     * @return ArrayNodeDefinition
     */",
 "/**
     * Append a node definition.
     *
     *     $node = new ArrayNodeDefinition()
     *         ->children()
     *             ->scalarNode(\'foo\')
     *             ->scalarNode(\'baz\')
     *         ->end()
     *         ->append($this->getBarNodeDefinition())
     *     ;
     *
     * @return ArrayNodeDefinition This node
     */",
 "/**
     * Returns a node builder to be used to add children and prototype
     *
     * @return NodeBuilder The node builder
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * This class provides a fluent interface for defining an array node.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Generates an array of choices for the given values
     *
     * If the values are shorter than $padLength characters, they are padded with
     * zeros on the left side.
     *
     * @param array|\Closure $values    The available choices
     * @param integer        $padLength The length to pad the choices
     * @param string         $padString The padding character
     * @param integer        $padType   The direction of padding
     *
     * @throws UnexpectedTypeException if the type of the values parameter is not supported
     */",
 "/**
     * Initializes the list of choices.
     *
     * Each choices is padded according to the format given in the constructor
     *
     * @throws UnexpectedTypeException if the function does not return an array
     */",
 "/**
     * Constructs a new DocParser.
     */",
 "/**
     * Sets the annotation names that are ignored during the parsing process.
     *
     * The names are supposed to be the raw names as used in the class, not the
     * fully qualified class names.
     *
     * @param array $names
     */",
 "/**
     * @deprecated Will be removed in 3.0
     * @param \Closure $func
     */",
 "/**
     * Parses the given docblock string for annotations.
     *
     * @param string $input The docblock string to parse.
     * @param string $context The parsing context.
     * @return array Array of annotations. If no annotations are found, an empty array is returned.
     */",
 "/**
     * Attempts to match the given token with the current lookahead token.
     * If they match, updates the lookahead token; otherwise raises a syntax error.
     *
     * @param int Token type.
     * @return bool True if tokens match; false otherwise.
     */",
 "/**
     * Attempts to match the current lookahead token with any of the given tokens.
     *
     * If any of them matches, this method updates the lookahead token; otherwise
     * a syntax error is raised.
     *
     * @param array $tokens
     * @return bool
     */",
 "/**
     * Generates a new syntax error.
     *
     * @param string $expected Expected string.
     * @param array $token Optional token.
     * @throws SyntaxException
     */",
 "/**
     * Attempt to check if a class exists or not. This never goes through the PHP autoloading mechanism
     * but uses the {@link AnnotationRegistry} to load classes.
     *
     * @param string $fqcn
     * @return boolean
     */",
 "/**
     * Annotations ::= Annotation {[ \"*\" ]* [Annotation]}*
     *
     * @return array
     */",
 "/**
     * Annotation     ::= \"@\" AnnotationName [\"(\" [Values] \")\"]
     * AnnotationName ::= QualifiedName | SimpleName
     * QualifiedName  ::= NameSpacePart \"\" {NameSpacePart \"\"}* SimpleName
     * NameSpacePart  ::= identifier | null | false | true
     * SimpleName     ::= identifier | null | false | true
     *
     * @return mixed False if it is not a valid annotation.
     */",
 "/**
     * Verify that the found class is actually an annotation.
     *
     * This can be detected through two mechanisms:
     * 1. Class extends Doctrine\Common\Annotations\Annotation
     * 2. The class level docblock contains the string \"@Annotation\"
     *
     * @param string $name
     * @return bool
     */",
 "/**
     * Values ::= Array | Value {\",\" Value}*
     *
     * @return array
     */",
 "/**
     * Value ::= PlainValue | FieldAssignment
     *
     * @return mixed
     */",
 "/**
     * PlainValue ::= integer | string | float | boolean | Array | Annotation
     *
     * @return mixed
     */",
 "/**
     * FieldAssignment ::= FieldName \"=\" PlainValue
     * FieldName ::= identifier
     *
     * @return array
     */",
 "/**
     * Array ::= \"{\" ArrayEntry {\",\" ArrayEntry}* \"}\"
     *
     * @return array
     */",
 "/**
     * ArrayEntry ::= Value | KeyValuePair
     * KeyValuePair ::= Key \"=\" PlainValue
     * Key ::= string | integer
     *
     * @return array
     */",
 "/**
 * A parser for docblock annotations.
 *
 * It is strongly discouraged to change the default annotation parsing process.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Loads asset formulae from PHP files.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Renders a template.
     *
     * @param string $template The template name
     *
     * @return Response A Response instance
     */",
 "/**
 * TemplateController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param \RecursiveIteratorIterator $iterator    The Iterator to filter
     * @param array                      $comparators An array of \NumberComparator instances
     */",
 "/**
     * Filters the iterator values.
     *
     * @return Boolean true if the value should be kept, false otherwise
     */",
 "/**
 * DepthRangeFilterIterator limits the directory depth.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Defines a variable.
 *
 * <pre>
 *  {% set foo = \'foo\' %}
 *
 *  {% set foo = [1, 2] %}
 *
 *  {% set foo = {\'foo\': \'bar\'} %}
 *
 *  {% set foo = \'foo\' ~ \'bar\' %}
 *
 *  {% set foo, bar = \'foo\', \'bar\' %}
 *
 *  {% set foo %}Some content{% endset %}
 * </pre>
 */",
 "/**
 * DoctrineConverter.
 *
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Get the current UNIX timestamp.
   * @return int
   */",
 "/**
 * Provides timestamp data.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param string  $algorithm          The digest algorithm to use
     * @param Boolean $encodeHashAsBase64 Whether to base64 encode the password hash
     * @param integer $iterations         The number of iterations to use to stretch the password hash
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * MessageDigestPasswordEncoder uses a message digest algorithm.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new EmbeddedFile.
   * Details may be optionally provided to the constructor.
   * @param string|Swift_OutputByteStream $data
   * @param string $filename
   * @param string $contentType
   */",
 "/**
   * Create a new EmbeddedFile.
   * @param string|Swift_OutputByteStream $data
   * @param string $filename
   * @param string $contentType
   * @return Swift_Mime_EmbeddedFile
   */",
 "/**
   * Create a new EmbeddedFile from a filesystem path.
   * @param string $path
   * @return Swift_Mime_EmbeddedFile
   */",
 "/**
 * An embedded file, in a multipart message.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
 * UpdateItem ::= [IdentificationVariable \".\"] {StateField | SingleValuedAssociationField} \"=\" NewValue
 * NewValue ::= SimpleArithmeticExpression | StringPrimary | DatetimePrimary | BooleanPrimary |
 *              EnumPrimary | SimpleEntityExpression | \"NULL\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Transforms a number type into localized number.
     *
     * @param  integer|float $value  Number value.
     *
     * @return string Localized value.
     *
     * @throws UnexpectedTypeException if the given value is not numeric
     * @throws TransformationFailedException if the value can not be transformed
     */",
 "/**
     * Transforms a localized number into an integer or float
     *
     * @param string $value The localized value
     *
     * @return integer|float The numeric value
     *
     * @throws UnexpectedTypeException if the given value is not a string
     * @throws TransformationFailedException if the value can not be transformed
     */",
 "/**
     * Returns a preconfigured \NumberFormatter instance
     *
     * @return \NumberFormatter
     */",
 "/**
 * Transforms between a number type and a localized number with grouping
 * (each thousand) and comma separators.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 */",
 "/**
     * Returns a type by name.
     *
     * @param string $name The name of the type
     *
     * @return FormTypeInterface The type
     */",
 "/**
     * Returns whether the given type is supported.
     *
     * @param string $name The name of the type
     *
     * @return Boolean Whether the type is supported by this extension
     */",
 "/**
     * Returns the extensions for the given type.
     *
     * @param string $name The name of the type
     *
     * @return array An array of extensions as FormTypeExtensionInterface instances
     */",
 "/**
     * Returns whether this extension provides type extensions for the given type.
     *
     * @param string $name The name of the type
     *
     * @return Boolean Whether the given type has extensions
     */",
 "/**
     * Returns the type guesser provided by this extension.
     *
     * @return FormTypeGuesserInterface|null The type guesser
     */",
 "/**
 * Interface for extensions which provide types, type extensions and a guesser.
 */",
 "/**
     * Creates a new <tt>Statement</tt> for the given SQL and <tt>Connection</tt>.
     *
     * @param string $sql The SQL of the statement.
     * @param Doctrine\DBAL\Connection The connection on which the statement should be executed.
     */",
 "/**
     * Binds a parameter value to the statement.
     * 
     * The value can optionally be bound with a PDO binding type or a DBAL mapping type.
     * If bound with a DBAL mapping type, the binding type is derived from the mapping
     * type and the value undergoes the conversion routines of the mapping type before
     * being bound.
     * 
     * @param $name The name or position of the parameter.
     * @param $value The value of the parameter.
     * @param mixed $type Either a PDO binding type or a DBAL mapping type name or instance.
     * @return boolean TRUE on success, FALSE on failure.
     */",
 "/**
     * Binds a parameter to a value by reference.
     * 
     * Binding a parameter by reference does not support DBAL mapping types.
     * 
     * @param string $name The name or position of the parameter.
     * @param mixed $value The reference to the variable to bind
     * @param integer $type The PDO binding type.
     * @return boolean TRUE on success, FALSE on failure.
     */",
 "/**
     * Executes the statement with the currently bound parameters.
     * 
     * @return boolean TRUE on success, FALSE on failure.
     */",
 "/**
     * Closes the cursor, freeing the database resources used by this statement. 
     * 
     * @return boolean TRUE on success, FALSE on failure.
     */",
 "/**
     * Returns the number of columns in the result set.
     * 
     * @return integer
     */",
 "/**
     * Fetches the SQLSTATE associated with the last operation on the statement.
     * 
     * @return string
     */",
 "/**
     * Fetches extended error information associated with the last operation on the statement.
     * 
     * @return array
     */",
 "/**
     * Fetches the next row from a result set.
     * 
     * @param integer $fetchStyle
     * @return mixed The return value of this function on success depends on the fetch type.
     *               In all cases, FALSE is returned on failure.
     */",
 "/**
     * Returns an array containing all of the result set rows.
     * 
     * @param integer $fetchStyle
     * @param integer $columnIndex
     * @return array An array containing all of the remaining rows in the result set.
     */",
 "/**
     * Returns a single column from the next row of a result set.
     * 
     * @param integer $columnIndex
     * @return mixed A single column from the next row of a result set or FALSE if there are no more rows. 
     */",
 "/**
     * Returns the number of rows affected by the last execution of this statement.
     * 
     * @return integer The number of affected rows.
     */",
 "/**
     * Gets the wrapped driver statement.
     * 
     * @return Doctrine\DBAL\Driver\Statement
     */",
 "/**
 * A thin wrapper around a Doctrine\DBAL\Driver\Statement that adds support
 * for logging, DBAL mapping types, etc.
 * 
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
 * MySQL Keywordlist
 *
 * @license  BSD http://www.opensource.org/licenses/bsd-license.php
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      David Coallier <davidc@php.net>
 */",
 "/**
     * Constructor.
     *
     * @param FileLocatorInterface $locator A FileLocatorInterface instance
     */",
 "/**
     * Imports a resource.
     *
     * @param mixed   $resource       A Resource
     * @param string  $type           The resource type
     * @param Boolean $ignoreErrors   Whether to ignore import errors or not
     * @param string  $sourceResource The original resource importing the new resource
     *
     * @return mixed
     */",
 "/**
 * FileLoader is the abstract class used by all built-in loaders that are file based.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Add a new Mailbox Header with a list of $addresses.
   * 
   * @param string $name
   * @param array|string $addresses
   */",
 "/**
   * Add a new Date header using $timestamp (UNIX time).
   * 
   * @param string $name
   * @param int $timestamp
   */",
 "/**
   * Add a new basic text header with $name and $value.
   * 
   * @param string $name
   * @param string $value
   */",
 "/**
   * Add a new ParameterizedHeader with $name, $value and $params.
   * 
   * @param string $name
   * @param string $value
   * @param array $params
   */",
 "/**
   * Add a new ID header for Message-ID or Content-ID.
   * 
   * @param string $name
   * @param string|array $ids
   */",
 "/**
   * Add a new Path header with an address (path) in it.
   * 
   * @param string $name
   * @param string $path
   */",
 "/**
   * Returns true if at least one header with the given $name exists.
   * 
   * If multiple headers match, the actual one may be specified by $index.
   * 
   * @param string $name
   * @param int $index
   * 
   * @return boolean
   */",
 "/**
   * Set a header in the HeaderSet.
   * 
   * The header may be a previously fetched header via {@link get()} or it may
   * be one that has been created separately.
   * 
   * If $index is specified, the header will be inserted into the set at this
   * offset.
   * 
   * @param Swift_Mime_Header $header
   * @param int $index
   */",
 "/**
   * Get the header with the given $name.
   * If multiple headers match, the actual one may be specified by $index.
   * Returns NULL if none present.
   * 
   * @param string $name
   * @param int $index
   * 
   * @return Swift_Mime_Header
   */",
 "/**
   * Get all headers with the given $name.
   * 
   * @param string $name
   * 
   * @return array
   */",
 "/**
   * Remove the header with the given $name if it\'s set.
   * 
   * If multiple headers match, the actual one may be specified by $index.
   * 
   * @param string $name
   * @param int $index
   */",
 "/**
   * Remove all headers with the given $name.
   * 
   * @param string $name
   */",
 "/**
   * Create a new instance of this HeaderSet.
   * 
   * @return Swift_Mime_HeaderSet
   */",
 "/**
   * Define a list of Header names as an array in the correct order.
   * 
   * These Headers will be output in the given order where present.
   * 
   * @param array $sequence
   */",
 "/**
   * Set a list of header names which must always be displayed when set.
   * 
   * Usually headers without a field value won\'t be output unless set here.
   * 
   * @param array $names
   */",
 "/**
   * Returns a string with a representation of all headers.
   * 
   * @return string
   */",
 "/**
 * A collection of MIME headers.
 * 
 * @package Swift
 * @subpackage Mime
 * 
 * @author Chris Corbyn
 */",
 "/**
     * Forces the factory to load the metadata of all classes known to the underlying
     * mapping driver.
     *
     * @return array The ClassMetadata instances of all mapped classes.
     */",
 "/**
     * Gets the class metadata descriptor for a class.
     *
     * @param string $className The name of the class.
     * @return Doctrine\ODM\MongoDB\Mapping\ClassMetadata
     */",
 "/**
     * Checks whether the factory has the metadata for a class loaded already.
     *
     * @param string $className
     * @return boolean TRUE if the metadata of the class in question is already loaded, FALSE otherwise.
     */",
 "/**
     * Sets the metadata descriptor for a specific class.
     *
     * @param string $className
     * @param ClassMetadata $class
     */",
 "/**
 * Contract for a Doctrine persistence layer ClassMetadata class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * Initializes the form field.
     *
     * @throws \LogicException When node type is incorrect
     */",
 "/**
 * InputFormField represents an input form field (an HTML input tag).
 *
 * For inputs with type of file, checkbox, or radio, there are other more
 * specialized classes (cf. FileFormField and ChoiceFormField).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param HttpKernel $kernel A HttpKernel instance
     */",
 "/**
     * Returns the Response content for a given controller or URI.
     *
     * @param string $controller A controller name to execute (a string like BlogBundle:Post:index), or a relative URI
     * @param array  $attributes An array of request attributes
     * @param array  $options    An array of options
     *
     * @see Symfony\Bundle\FrameworkBundle\HttpKernel::render()
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     */",
 "/**
 * ActionsHelper manages action inclusions.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Ensures certain extensions are always loaded.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Registers Twig_Autoloader as an SPL autoloader.
     */",
 "/**
     * Handles autoloading of classes.
     *
     * @param  string  $class  A class name.
     *
     * @return boolean Returns true if the class has been loaded
     */",
 "/**
 * Autoloads Twig classes.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Notifies this ReportNotifier that $address failed or succeeded.
   * @param Swift_Mime_Message $message
   * @param string $address
   * @param int $result from {@link RESULT_PASS, RESULT_FAIL}
   */",
 "/**
 * The Reporter plugin sends pass/fail notification to a Reporter.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param LoaderInterface $loader   A LoaderInterface instance
     * @param mixed           $resource The main resource to load
     * @param array           $options  An array of options
     * @param RequestContext  $context  The context
     * @param array           $defaults The default values
     */",
 "/**
     * Sets options.
     *
     * Available options:
     *
     *   * cache_dir:     The cache directory (or null to disable caching)
     *   * debug:         Whether to enable debugging or not (false by default)
     *   * resource_type: Type hint for the main resource (optional)
     *
     * @param array $options An array of options
     *
     * @throws \InvalidArgumentException When unsupported option is provided
     */",
 "/**
     * Sets an option.
     *
     * @param string $key   The key
     * @param mixed  $value The value
     *
     * @throws \InvalidArgumentException
     */",
 "/**
     * Gets an option value.
     *
     * @param string $key The key
     *
     * @return mixed The value
     *
     * @throws \InvalidArgumentException
     */",
 "/**
     * Gets the RouteCollection instance associated with this Router.
     *
     * @return RouteCollection A RouteCollection instance
     */",
 "/**
     * Sets the request context.
     *
     * @param RequestContext $context The context
     */",
 "/**
     * Gets the request context.
     *
     * @return RequestContext The context
     */",
 "/**
     * Generates a URL from the given parameters.
     *
     * @param  string  $name       The name of the route
     * @param  mixed   $parameters An array of parameters
     * @param  Boolean $absolute   Whether to generate an absolute URL
     *
     * @return string The generated URL
     */",
 "/**
     * Tries to match a URL with a set of routes.
     *
     * Returns false if no route matches the URL.
     *
     * @param  string $url URL to be parsed
     *
     * @return array|false An array of parameters or false if no route matches
     */",
 "/**
     * Gets the UrlMatcher instance associated with this Router.
     *
     * @return UrlMatcherInterface A UrlMatcherInterface instance
     */",
 "/**
     * Gets the UrlGenerator instance associated with this Router.
     *
     * @return UrlGeneratorInterface A UrlGeneratorInterface instance
     */",
 "/**
 * The Router class is an example of the integration of all pieces of the
 * routing system for easier use.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param array $record
     * @return array
     */",
 "/**
 * Injects memory_get_usage in all records
 *
 * @see Monolog\Processor\MemoryProcessor::__construct() for options
 * @author Rob Jensen
 */",
 "/**
     * @see StepInterface
     */",
 "/**
     * @see StepInterface
     */",
 "/**
     * @see StepInterface
     */",
 "/**
     * @see StepInterface
     */",
 "/**
     * @see StepInterface
     */",
 "/**
     * @return array
     */",
 "/**
     * @return array
     */",
 "/**
 * Doctrine Step.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Strategy to be used for retrieving object identities from domain objects
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @param  string    $resource The resource that could not be imported
     * @param  string    $sourceResource The original resource importing the new resource
     * @param  integer   $code     The error code
     * @param  Exception $previous A previous exception
     */",
 "/**
 * Exception class for when a resource cannot be loaded or imported.
 *
 * @author Ryan Weaver <ryan@thatsquality.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Transforms between an integer and a localized number with grouping
 * (each thousand) and comma separators.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 */",
 "/**
 * A reference to an asset in the asset manager.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Compares a Doctrine version with the current one.
     *
     * @param string $version Doctrine version to compare.
     * @return int Returns -1 if older, 0 if it is the same, 1 if version 
     *             passed as argument is newer.
     */",
 "/**
 * Class to store and retrieve the version of Doctrine
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param string $tableName
     * @return SchemaException
     */",
 "/**
     * @param string $indexName
     * @return SchemaException
     */",
 "/**
     * @param string $indexName
     * @return SchemaException
     */",
 "/**
     * @param string $indexName
     * @return SchemaException
     */",
 "/**
     * @param string $columnName
     * @return SchemaException
     */",
 "/**
     *
     * @param  string $tableName
     * @return SchemaException
     */",
 "/**
     *
     * @param string $tableName
     * @param string $columnName
     * @return SchemaException
     */",
 "/**
     * @param string $sequenceName
     * @return SchemaException
     */",
 "/**
     * @param string $sequenceName
     * @return SchemaException
     */",
 "/**
     * @param  string $fkName
     * @return SchemaException
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Constructor.
     *
     * @param Route  $route        A original Route instance
     * @param string $staticPrefix The static prefix of the compiled route
     * @param string $regex        The regular expression to use to match this route
     * @param array  $tokens       An array of tokens to use to generate URL for this route
     * @param array  $variables    An array of variables
     */",
 "/**
     * Returns the Route instance.
     *
     * @return Route A Route instance
     */",
 "/**
     * Returns the static prefix.
     *
     * @return string The static prefix
     */",
 "/**
     * Returns the regex.
     *
     * @return string The regex
     */",
 "/**
     * Returns the tokens.
     *
     * @return array The tokens
     */",
 "/**
     * Returns the variables.
     *
     * @return array The variables
     */",
 "/**
     * Returns the pattern.
     *
     * @return string The pattern
     */",
 "/**
     * Returns the options.
     *
     * @return array The options
     */",
 "/**
     * Returns the defaults.
     *
     * @return array The defaults
     */",
 "/**
     * Returns the requirements.
     *
     * @return array The requirements
     */",
 "/**
 * CompiledRoutes are returned by the RouteCompiler class.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Sets the PHP error code associated with the field.
     *
     * @param integer $error The error code (one of UPLOAD_ERR_INI_SIZE, UPLOAD_ERR_FORM_SIZE, UPLOAD_ERR_PARTIAL, UPLOAD_ERR_NO_FILE, UPLOAD_ERR_NO_TMP_DIR, UPLOAD_ERR_CANT_WRITE, or UPLOAD_ERR_EXTENSION)
     *
     * @throws \InvalidArgumentException When error code doesn\'t exist
     */",
 "/**
     * Sets the value of the field.
     *
     * @param string $value The value of the field
     *
     * @api
     */",
 "/**
     * Sets the value of the field.
     *
     * @param string $value The value of the field
     */",
 "/**
     * Initializes the form field.
     *
     * @throws \LogicException When node type is incorrect
     */",
 "/**
 * FileFormField represents a file form field (an HTML file input tag).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * @param dataClass $data
     * @param array $forms
     *
     * @throws UnexpectedTypeException if the type of the data parameter is not supported
     */",
 "/**
     * @SecureReturn(permissions=\"VIEW\")
     */",
 "/**
     * Some comment
     */",
 "/**
   * Create a new Message.
   * Details may be optionally passed into the constructor.
   * @param string $subject
   * @param string $body
   * @param string $contentType
   * @param string $charset
   */",
 "/**
   * Create a new Message.
   * @param string $subject
   * @param string $body
   * @param string $contentType
   * @param string $charset
   * @return Swift_Mime_Message
   */",
 "/**
   * Add a MimePart to this Message.
   * @param string|Swift_OutputByteStream $body
   * @param string $contentType
   * @param string $charset
   */",
 "/**
 * The Message class for building emails.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param string $path  The path to the file that was not found
     */",
 "/**
 * Thrown when a file was not found
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * Indicates a value transformation error.
 *
 * @author     Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * HttpDigestFactory creates services for HTTP digest authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Chain User Provider.
 *
 * This provider calls several leaf providers in a chain until one is able to
 * handle the request.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Sets the code to manipulate.
     *
     * @param array   $tokens An array of PHP tokens
     * @param integer $line   The start line of the code
     */",
 "/**
     * Gets the next token.
     *
     * @param mixed A PHP token
     */",
 "/**
     * Peeks the next token.
     *
     * @param mixed A PHP token
     */",
 "/**
     * Gets the value of a token.
     *
     * @param string The token value
     */",
 "/**
 * Changes the PHP code of a Kernel.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents an if node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Compiles CoffeeScript into Javascript.
 *
 * @link http://jashkenas.github.com/coffee-script/
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
 * @group integration
 */",
 "/**
     * Generates the configuration tree.
     *
     * @return Symfony\Component\Config\Definition\NodeInterface
     */",
 "/**
 * FrameworkExtraBundle configuration structure.
 *
 * @author Henrik Bjornskov <hb@peytz.dk>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for the second format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
*XmlDriverthatadditionallylooksformappinginformationinaglobalfile.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * @return string
     *
     * @api
     */",
 "/**
     * @return array
     *
     * @api
     */",
 "/**
     * Returns the violation message.
     *
     * @return string
     *
     * @api
     */",
 "/**
 * Represents a single violation of a constraint.
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string  $prefix     Prefix for the XPath expression.
     * @param string  $path       Actual path of the expression.
     * @param string  $element    The element in the expression.
     * @param string  $condition  A condition for the expression.
     * @param Boolean $starPrefix Indicates whether to use a star prefix.
     */",
 "/**
     * Gets the prefix of this XPath expression.
     *
     * @return string
     */",
 "/**
     * Gets the path of this XPath expression.
     *
     * @return string
     */",
 "/**
     * Answers whether this XPath expression has a star prefix.
     *
     * @return Boolean
     */",
 "/**
     * Gets the element of this XPath expression.
     *
     * @return string
     */",
 "/**
     * Gets the condition of this XPath expression.
     *
     * @return string
     */",
 "/**
     * Gets a string representation for this XPath expression.
     *
     * @return string
     */",
 "/**
     * Adds a condition to this XPath expression.
     * Any pre-existent condition will be ANDed to it.
     *
     * @param string $condition The condition to add.
     */",
 "/**
     * Adds a prefix to this XPath expression.
     * It will be prepended to any pre-existent prefixes.
     *
     * @param string $prefix  The prefix to add.
     */",
 "/**
     * Adds a condition to this XPath expression using the name of the element
     * as the desired value.
     * This method resets the element to \'*\'.
     */",
 "/**
     * Adds a star prefix to this XPath expression.
     * This method will prepend a \'*\' to the path and set the star prefix flag
     * to true.
     */",
 "/**
     * Joins this XPath expression with $other (another XPath expression) using
     * $combiner to join them.
     *
     * @param string    $combiner The combiner string.
     * @param XPathExpr $other    The other XPath expression to combine with
     *                            this one.
     */",
 "/**
     * Gets an XPath literal for $s.
     *
     * @param  mixed $s Can either be a Node\ElementNode or a string.
     *
     * @return string
     */",
 "/**
 * XPathExpr represents an XPath expression.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $key       The requested parameter key
     * @param string $sourceId  The service id that references the non-existent parameter
     * @param string $sourceKey The parameter key that references the non-existent parameter
     */",
 "/**
 * This exception is thrown when a non-existent parameter is used.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Builds a validator factory with the default mapping loaders
     *
     * @param  array $mappingFiles          A list of XML or YAML file names
     *                                      where mapping information can be
     *                                      found. Can be empty.
     * @param  Boolean $annotations         Whether to use annotations for
     *                                      retrieving mapping information
     * @param  string $staticMethod         The name of the static method to
     *                                      use, if static method loading should
     *                                      be enabled
     *
     * @throws MappingException             If any of the files in $mappingFiles
     *                                      has neither the extension \".xml\" nor
     *                                      \".yml\" nor \".yaml\"
     */",
 "/**
     * Sets the given context as default context
     *
     * @param ValidatorContextInterface $defaultContext  A preconfigured context
     */",
 "/**
     * Overrides the class metadata factory of the default context and returns
     * the new context
     *
     * @param  ClassMetadataFactoryInterface $metadataFactory  The new factory instance
     *
     * @return ValidatorContextInterface                       The preconfigured form context
     */",
 "/**
     * Overrides the constraint validator factory of the default context and
     * returns the new context
     *
     * @param  ClassMetadataFactoryInterface $validatorFactory  The new factory instance
     *
     * @return ValidatorContextInterface                        The preconfigured form context
     */",
 "/**
     * Creates a new validator with the settings stored in the default context
     *
     * @return ValidatorInterface  The new validator
     */",
 "/**
 * Creates and configures new validator objects
 *
 * Usually you will use the static method buildDefault() to initialize a
 * factory with default configuration. To this method you can pass various
 * parameters that configure where the validator mapping is found. If you
 * don\'t pass a parameter, the mapping will be read from annotations.
 *
 * <code>
 * // read from annotations only
 * $factory = ValidatorFactory::buildDefault();
 *
 * // read from XML and YAML, suppress annotations
 * $factory = ValidatorFactory::buildDefault(array(
 *   \'/path/to/mapping.xml\',
 *   \'/path/to/other/mapping.yml\',
 * ), false);
 * </code>
 *
 * You then have to call getValidator() to create new validators.
 *
 * <code>
 * $validator = $factory->getValidator();
 * </code>
 *
 * When manually constructing a factory, the default configuration of the
 * validators can be passed to the constructor as a ValidatorContextInterface
 * object.
 *
 * <code>
 * $defaultContext = new ValidatorContext();
 * $defaultContext->setClassMetadataFactory($metadataFactory);
 * $defaultContext->setConstraintValidatorFactory($validatorFactory);
 * $factory = new ValidatorFactory($defaultContext);
 *
 * $form = $factory->getValidator();
 * </code>
 *
 * You can also override the default configuration by calling any of the
 * methods in this class. These methods return a ValidatorContextInterface object
 * on which you can override further settings or call getValidator() to create
 * a form.
 *
 * <code>
 * $form = $factory
 *     ->setClassMetadataFactory($customFactory);
 *     ->getValidator();
 * </code>
 *
 * ValidatorFactory instances should be cached and reused in your application.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Handles X509 authentication.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
     * Gets the user and credentials from the Request.
     *
     * @param Request $request A Request instance
     *
     * @return array An array composed of the user and the credentials
     */",
 "/**
 * AbstractPreAuthenticatedListener is the base class for all listener that
 * authenticates users based on a pre-authenticated request (like a certificate
 * for instance).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * NonceExpiredException is thrown when an authentication is rejected because
 * the digest nonce has expired.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Loads a route to serve an supplied asset.
     *
     * The fake front controller that {@link UseControllerWorker} adds to the
     * target URL will be removed before set as a route pattern.
     *
     * @param RouteCollection $routes The route collection
     * @param AssetInterface  $asset  The asset
     * @param string          $name   The name to use
     * @param integer         $pos    The leaf index
     */",
 "/**
 * Loads routes for all assets.
 *
 * Assets should only be served through the routing system for ease-of-use
 * during development.
 *
 * For example, add the following to your application\'s routing_dev.yml:
 *
 *     _assetic:
 *         resource: .
 *         type:     assetic
 *
 * In a production environment you should use the `assetic:dump` command to
 * create static asset files.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
   * Connect to the POP3 host and throw an Exception if it fails.
   * 
   * @throws Swift_Plugins_Pop_Pop3Exception
   */",
 "/**
   * Disconnect from the POP3 host and throw an Exception if it fails.
   * 
   * @throws Swift_Plugins_Pop_Pop3Exception
   */",
 "/**
 * Pop3Connection interface for connecting and disconnecting to a POP3 host.
 * 
 * @package Swift
 * @subpackage Plugins
 * 
 * @author Chris Corbyn
 */",
 "/**
     * @dataProvider getProviderTypes
     */",
 "/**
     * @dataProvider getProviderTypes
     */",
 "/**
     * Checks the user account before authentication.
     *
     * @param UserInterface $user a UserInterface instance
     */",
 "/**
     * Checks the user account after authentication.
     *
     * @param UserInterface $user a UserInterface instance
     */",
 "/**
 * UserCheckerInterface checks user account when authentication occurs.
 *
 * This should not be used to make authentication decisions.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Notify this observer that the entity\'s charset has changed.
   * @param string $charset
   */",
 "/**
 * Observes changes in an Mime entity\'s character set.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a set node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a parent node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Annotation for group sequences
 *
 * @Annotation
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
 * @group integration
 */",
 "/**
     * Returns true if the field should be included in the submitted values.
     *
     * @return Boolean true if the field should be included in the submitted values, false otherwise
     */",
 "/**
     * Check if the current selected option is disabled
     *
     * @return bool
     */",
 "/**
     * Sets the value of the field.
     *
     * @param string $value The value of the field
     *
     * @throws \InvalidArgumentException When value type provided is not correct
     *
     * @api
     */",
 "/**
     * Ticks a checkbox.
     *
     * @throws \InvalidArgumentException When value type provided is not correct
     *
     * @api
     */",
 "/**
     * Ticks a checkbox.
     *
     * @throws \InvalidArgumentException When value type provided is not correct
     *
     * @api
     */",
 "/**
     * Sets the value of the field.
     *
     * @param string $value The value of the field
     *
     * @throws \InvalidArgumentException When value type provided is not correct
     */",
 "/**
     * Adds a choice to the current ones.
     *
     * This method should only be used internally.
     *
     * @param \DOMNode $node A \DOMNode
     *
     * @throws \LogicException When choice provided is not multiple nor radio
     */",
 "/**
     * Returns the type of the choice field (radio, select, or checkbox).
     *
     * @return string The type
     */",
 "/**
     * Returns true if the field accepts multiple values.
     *
     * @return Boolean true if the field accepts multiple values, false otherwise
     */",
 "/**
     * Initializes the form field.
     *
     * @throws \LogicException When node type is incorrect
     */",
 "/**
     * Returns option value with associated disabled flag
     *
     * @param type $node
     *
     * @return array
     */",
 "/**
     * Checks whether given vale is in the existing options
     *
     * @param string $optionValue
     * @param array  $options
     *
     * @return bool
     */",
 "/**
     * Returns list of available field options
     *
     * @return array
     */",
 "/**
 * ChoiceFormField represents a choice form field.
 *
 * It is constructed from a HTML select tag, or a HTML checkbox, or radio inputs.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * This node represents a scalar value in the config tree.
 *
 * The following values are considered scalars:
 *   * booleans
 *   * strings
 *   * null
 *   * integers
 *   * floats
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * HttpException.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Deletes a class-based ACE
     *
     * @param integer $index
     * @return void
     */",
 "/**
     * Deletes a class-field-based ACE
     *
     * @param integer $index
     * @param string $field
     * @return void
     */",
 "/**
     * Deletes an object-based ACE
     *
     * @param integer $index
     * @return void
     */",
 "/**
     * Deletes an object-field-based ACE
     *
     * @param integer $index
     * @param string $field
     * @return void
     */",
 "/**
     * Returns the primary key of this ACL
     *
     * @return integer
     */",
 "/**
     * Inserts a class-based ACE
     *
     * @param SecurityIdentityInterface $sid
     * @param integer                   $mask
     * @param integer                   $index
     * @param Boolean                   $granting
     * @param string                    $strategy
     * @return void
     */",
 "/**
     * Inserts a class-field-based ACE
     *
     * @param string                    $field
     * @param SecurityIdentityInterface $sid
     * @param integer                   $mask
     * @param integer                   $index
     * @param Boolean                   $granting
     * @param string                    $strategy
     * @return void
     */",
 "/**
     * Inserts an object-based ACE
     *
     * @param SecurityIdentityInterface $sid
     * @param integer                   $mask
     * @param integer                   $index
     * @param Boolean                   $granting
     * @param string                    $strategy
     * @return void
     */",
 "/**
     * Inserts an object-field-based ACE
     *
     * @param string                    $field
     * @param SecurityIdentityInterface $sid
     * @param integer                   $mask
     * @param integer                   $index
     * @param Boolean                   $granting
     * @param string                    $strategy
     * @return void
     */",
 "/**
     * Sets whether entries are inherited
     *
     * @param Boolean $boolean
     * @return void
     */",
 "/**
     * Sets the parent ACL
     *
     * @param AclInterface $acl
     * @return void
     */",
 "/**
     * Updates a class-based ACE
     *
     * @param integer $index
     * @param integer $mask
     * @param string $strategy if null the strategy should not be changed
     * @return void
     */",
 "/**
     * Updates a class-field-based ACE
     *
     * @param integer $index
     * @param string $field
     * @param integer $mask
     * @param string $strategy if null the strategy should not be changed
     * @return void
     */",
 "/**
     * Updates an object-based ACE
     *
     * @param integer $index
     * @param integer $mask
     * @param string $strategy if null the strategy should not be changed
     * @return void
     */",
 "/**
     * Updates an object-field-based ACE
     *
     * @param integer $index
     * @param string $field
     * @param integer $mask
     * @param string $strategy if null the strategy should not be changed
     * @return void
     */",
 "/**
 * This interface adds mutators for the AclInterface.
 *
 * All changes to Access Control Entries must go through this interface. Access
 * Control Entries must never be modified directly.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Filters the Response.
     *
     * @param FilterResponseEvent $event    A FilterResponseEvent instance
     */",
 "/**
 * ResponseListener fixes the Response headers based on the Request.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets the catalogue locale.
     *
     * @return string The locale
     *
     * @api
     */",
 "/**
     * Gets the domains.
     *
     * @return array An array of domains
     *
     * @api
     */",
 "/**
     * Gets the messages within a given domain.
     *
     * If $domain is null, it returns all messages.
     *
     * @param string $domain The domain name
     *
     * @return array An array of messages
     *
     * @api
     */",
 "/**
     * Sets a message translation.
     *
     * @param string $id          The message id
     * @param string $translation The messages translation
     * @param string $domain      The domain name
     *
     * @api
     */",
 "/**
     * Checks if a message has a translation.
     *
     * @param string $id     The message id
     * @param string $domain The domain name
     *
     * @return Boolean true if the message has a translation, false otherwise
     *
     * @api
     */",
 "/**
     * Checks if a message has a translation (it does not take into account the fallback mechanism).
     *
     * @param string $id     The message id
     * @param string $domain The domain name
     *
     * @return Boolean true if the message has a translation, false otherwise
     *
     * @api
     */",
 "/**
     * Gets a message translation.
     *
     * @param string $id     The message id
     * @param string $domain The domain name
     *
     * @return string The message translation
     *
     * @api
     */",
 "/**
     * Sets translations for a given domain.
     *
     * @param string $messages An array of translations
     * @param string $domain   The domain name
     *
     * @api
     */",
 "/**
     * Adds translations for a given domain.
     *
     * @param string $messages An array of translations
     * @param string $domain   The domain name
     *
     * @api
     */",
 "/**
     * Merges translations from the given Catalogue into the current one.
     *
     * The two catalogues must have the same locale.
     *
     * @param MessageCatalogueInterface $catalogue A MessageCatalogueInterface instance
     *
     * @api
     */",
 "/**
     * Merges translations from the given Catalogue into the current one
     * only when the translation does not exist.
     *
     * This is used to provide default translations when they do not exist for the current locale.
     *
     * @param MessageCatalogueInterface $catalogue A MessageCatalogueInterface instance
     *
     * @api
     */",
 "/**
     * Returns an array of resources loaded to build this collection.
     *
     * @return ResourceInterface[] An array of resources
     *
     * @api
     */",
 "/**
     * Adds a resource for this collection.
     *
     * @param ResourceInterface $resource A resource instance
     *
     * @api
     */",
 "/**
 * MessageCatalogueInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * @Annotation
 * @Target(\"METHOD\")
 */",
 "/**
     * Constructor.
     *
     * When the loader is in debug mode it will ensure the cached formulae
     * are fresh before returning them.
     *
     * @param FormulaLoaderInterface $loader      A formula loader
     * @param ConfigCache            $configCache A config cache
     * @param Boolean                $debug       The debug mode
     */",
 "/**
 * Adds a caching layer to a loader.
 *
 * A cached formula loader is a composition of a formula loader and a cache.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * Loads configured formulae.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Type that maps a PHP array to a clob SQL type.
 *
 * @since 2.0
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
   * Invoked immediately before the Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Invoked immediately after the Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
 * Listens for Messages being sent from within the Transport system.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Loads the DBAL configuration.
     *
     * Usage example:
     *
     *      <doctrine:dbal id=\"myconn\" dbname=\"sfweb\" user=\"root\" />
     *
     * @param array            $config    An array of configuration settings
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Loads a configured DBAL connection.
     *
     * @param string           $name       The name of the connection
     * @param array            $connection A dbal connection configuration.
     * @param ContainerBuilder $container  A ContainerBuilder instance
     */",
 "/**
     * Loads the Doctrine ORM configuration.
     *
     * Usage example:
     *
     *     <doctrine:orm id=\"mydm\" connection=\"myconn\" />
     *
     * @param array            $config    An array of configuration settings
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Loads a configured ORM entity manager.
     *
     * @param array $entityManager A configured ORM entity manager.
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Loads an ORM entity managers bundle mapping information.
     *
     * There are two distinct configuration possibilities for mapping information:
     *
     * 1. Specify a bundle and optionally details where the entity and mapping information reside.
     * 2. Specify an arbitrary mapping location.
     *
     * @example
     *
     *  doctrine.orm:
     *     mappings:
     *         MyBundle1: ~
     *         MyBundle2: yml
     *         MyBundle3: { type: annotation, dir: Entities/ }
     *         MyBundle4: { type: xml, dir: Resources/config/doctrine/mapping }
     *         MyBundle5:
     *             type: yml
     *             dir: [bundle-mappings1/, bundle-mappings2/]
     *             alias: BundleAlias
     *         arbitrary_key:
     *             type: xml
     *             dir: %kernel.dir%/../src/vendor/DoctrineExtensions/lib/DoctrineExtensions/Entities
     *             prefix: DoctrineExtensions\Entities\
     *             alias: DExt
     *
     * In the case of bundles everything is really optional (which leads to autodetection for this bundle) but
     * in the mappings key everything except alias is a required argument.
     *
     * @param array            $entityManager A configured ORM entity manager
     * @param Definition       $ormConfigDef  A Definition instance
     * @param ContainerBuilder $container     A ContainerBuilder instance
     */",
 "/**
     * Loads a configured entity managers cache drivers.
     *
     * @param array            $entityManager A configured ORM entity manager.
     * @param ContainerBuilder $container     A ContainerBuilder instance
     */",
 "/**
     * Loads a configured entity managers metadata, query or result cache driver.
     *
     * @param array            $entityManager A configured ORM entity manager.
     * @param ContainerBuilder $container A ContainerBuilder instance
     * @param string           $cacheName
     */",
 "/**
     * Gets an entity manager cache driver definition for metadata, query and result caches.
     *
     * @param array            $entityManager The array configuring an entity manager.
     * @param array            $cacheDriver The cache driver configuration.
     * @param ContainerBuilder $container
     * @return Definition $cacheDef
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
     * Returns the namespace to be used for this extension (XML namespace).
     *
     * @return string The XML namespace
     */",
 "/**
 * DoctrineExtension is an extension for the Doctrine DBAL and ORM library.
 *
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Handles digest authentication.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
 * DigestAuthenticationListener implements Digest HTTP authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Represents a method template function.
 *
 * @package    twig
 * @author     Arnaud Le Blanc <arnaud.lb@gmail.com>
 */",
 "/**
     * Logs a message.
     *
     * @param string $message A message to log
     */",
 "/**
 * DebuggerInterface is the interface you need to implement
 * to debug template loader instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     *
     * @api
     */",
 "/**
     * Sets the default charset.
     *
     * @param string $charset The charset
     *
     * @api
     */",
 "/**
     * Gets the default charset.
     *
     * @return string The default charset
     *
     * @api
     */",
 "/**
 * HelperInterface is the interface all helpers must implement.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Adds tagged data_collector services to profiler service
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Creates a new OCI8Statement that uses the given connection handle and SQL statement.
     *
     * @param resource $dbh The connection handle.
     * @param string $statement The SQL statement.
     */",
 "/**
     * Convert positional (?) into named placeholders (:param<num>)
     *
     * Oracle does not support positional parameters, hence this method converts all
     * positional parameters into artificially named parameters. Note that this conversion
     * is not perfect. All question marks (?) in the original statement are treated as
     * placeholders and converted to a named parameter.
     *
     * The algorithm uses a state machine with two possible states: InLiteral and NotInLiteral.
     * Question marks inside literal strings are therefore handled correctly by this method.
     * This comes at a cost, the whole sql statement has to be looped over.
     *
     * @todo extract into utility class in Doctrine\DBAL\\Util namespace
     * @todo review and test for lost spaces. we experienced missing spaces with oci8 in some sql statements.
     * @param string $statement The SQL statement to convert.
     * @return string
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Closes the cursor, enabling the statement to be executed again.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/** 
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The OCI8 implementation of the Statement interface.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Find all the templates.
     *
     * @return array An array of templates of type TemplateReferenceInterface
     */",
 "/**
 * Interface for finding all the templates.
 *
 * @author Victor Berchet <victor@suumit.com>
 */",
 "/**
     * Constructor.
     */",
 "/**
     * Gets the SQL snippet that declares a boolean column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a 4 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares an 8 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a 2 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares common properties of an integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Lazy load Doctrine Type Mappings
     *
     * @return void
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column type.
     *
     * @param array $field
     */",
 "/**
     * Gets the SQL snippet used to declare a CLOB column type.
     *
     * @param array $field
     */",
 "/**
     * Gets the name of the platform.
     *
     * @return string
     */",
 "/**
     * Register a doctrine type to be used in conjunction with a column type of this platform.
     *
     * @param string $dbType
     * @param string $doctrineType
     */",
 "/**
     * Get the Doctrine type that is mapped for the given database column type.
     * 
     * @param  string $dbType
     * @return string
     */",
 "/**
     * Check if a database type is currently supported by this platform.
     *
     * @param string $dbType
     * @return bool
     */",
 "/**
     * Initialize the Doctrine Type comments instance variable for in_array() checks.
     *
     * @return void
     */",
 "/**
     * Is it necessary for the platform to add a parsable type comment to allow reverse engineering the given type?
     *
     * @param Type $doctrineType
     * @return bool
     */",
 "/**
     * Mark this type as to be commented in ALTER TABLE and CREATE TABLE statements.
     * 
     * @param Type $doctrineType
     * @return void
     */",
 "/**
     * Get the comment to append to a column comment that helps parsing this type in reverse engineering.
     * 
     * @param Type $doctrineType
     * @return string
     */",
 "/**
     * Return the comment of a passed column modified by potential doctrine type comment hints.
     * 
     * @param Column $column
     * @return string
     */",
 "/**
     * Gets the character used for identifier quoting.
     *
     * @return string
     */",
 "/**
     * Gets the string portion that starts an SQL comment.
     *
     * @return string
     */",
 "/**
     * Gets the string portion that ends an SQL comment.
     *
     * @return string
     */",
 "/**
     * Gets the maximum length of a varchar field.
     *
     * @return integer
     */",
 "/**
     * Gets the default length of a varchar field.
     *
     * @return integer
     */",
 "/**
     * Gets all SQL wildcard characters of the platform.
     *
     * @return array
     */",
 "/**
     * Returns the regular expression operator.
     *
     * @return string
     */",
 "/**
     * Returns the average value of a column
     *
     * @param string $column    the column to use
     * @return string           generated sql including an AVG aggregate function
     */",
 "/**
     * Returns the number of rows (without a NULL value) of a column
     *
     * If a \'*\' is used instead of a column the number of selected rows
     * is returned.
     *
     * @param string|integer $column    the column to use
     * @return string                   generated sql including a COUNT aggregate function
     */",
 "/**
     * Returns the highest value of a column
     *
     * @param string $column    the column to use
     * @return string           generated sql including a MAX aggregate function
     */",
 "/**
     * Returns the lowest value of a column
     *
     * @param string $column the column to use
     * @return string
     */",
 "/**
     * Returns the total sum of a column
     *
     * @param string $column the column to use
     * @return string
     */",
 "/**
     * Returns the md5 sum of a field.
     *
     * Note: Not SQL92, but common functionality
     *
     * @return string
     */",
 "/**
     * Returns the length of a text field.
     *
     * @param string $expression1
     * @param string $expression2
     * @return string
     */",
 "/**
     * Rounds a numeric field to the number of decimals specified.
     *
     * @param string $expression1
     * @param string $expression2
     * @return string
     */",
 "/**
     * Returns the remainder of the division operation
     * $expression1 / $expression2.
     *
     * @param string $expression1
     * @param string $expression2
     * @return string
     */",
 "/**
     * Trim a string, leading/trailing/both and with a given char which defaults to space.
     *
     * @param string $str
     * @param int $pos
     * @param string $char has to be quoted already
     * @return string
     */",
 "/**
     * rtrim
     * returns the string $str with proceeding space characters removed
     *
     * @param string $str       literal string or column name
     * @return string
     */",
 "/**
     * ltrim
     * returns the string $str with leading space characters removed
     *
     * @param string $str       literal string or column name
     * @return string
     */",
 "/**
     * upper
     * Returns the string $str with all characters changed to
     * uppercase according to the current character set mapping.
     *
     * @param string $str       literal string or column name
     * @return string
     */",
 "/**
     * lower
     * Returns the string $str with all characters changed to
     * lowercase according to the current character set mapping.
     *
     * @param string $str       literal string or column name
     * @return string
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * Returns the current system date.
     *
     * @return string
     */",
 "/**
     * return string to call a function to get a substring inside an SQL statement
     *
     * Note: Not SQL92, but common functionality.
     *
     * SQLite only supports the 2 parameter variant of this function
     *
     * @param  string $value         an sql string literal or column name/alias
     * @param  integer $from     where to start the substring portion
     * @param  integer $len       the substring portion length
     * @return string
     */",
 "/**
     * Returns a series of strings concatinated
     *
     * concat() accepts an arbitrary number of parameters. Each parameter
     * must contain an expression
     *
     * @param string $arg1, $arg2 ... $argN     strings that will be concatinated.
     * @return string
     */",
 "/**
     * Returns the SQL for a logical not.
     *
     * Example:
     * <code>
     * $q = new Doctrine_Query();
     * $e = $q->expr;
     * $q->select(\'*\')->from(\'table\')
     *   ->where($e->eq(\'id\', $e->not(\'null\'));
     * </code>
     *
     * @return string a logical expression
     */",
 "/**
     * Returns the SQL to check if a value is one in a set of
     * given values.
     *
     * in() accepts an arbitrary number of parameters. The first parameter
     * must always specify the value that should be matched against. Successive
     * must contain a logical expression or an array with logical expressions.
     * These expressions will be matched against the first parameter.
     *
     * @param string $column        the value that should be matched against
     * @param string|array(string)  values that will be matched against $column
     * @return string logical expression
     */",
 "/**
     * Returns SQL that checks if a expression is null.
     *
     * @param string $expression the expression that should be compared to null
     * @return string logical expression
     */",
 "/**
     * Returns SQL that checks if a expression is not null.
     *
     * @param string $expression the expression that should be compared to null
     * @return string logical expression
     */",
 "/**
     * Returns SQL that checks if an expression evaluates to a value between
     * two values.
     *
     * The parameter $expression is checked if it is between $value1 and $value2.
     *
     * Note: There is a slight difference in the way BETWEEN works on some databases.
     * http://www.w3schools.com/sql/sql_between.asp. If you want complete database
     * independence you should avoid using between().
     *
     * @param string $expression the value to compare to
     * @param string $value1 the lower value to compare with
     * @param string $value2 the higher value to compare with
     * @return string logical expression
     */",
 "/**
     * Calculate the difference in days between the two passed dates.
     *
     * Computes diff = date1 - date2
     *
     * @param string $date1
     * @param string $date2
     * @return string
     */",
 "/**
     * Add the number of given days to a date.
     *
     * @param string $date
     * @param int $days
     * @return string
     */",
 "/**
     * Substract the number of given days to a date.
     *
     * @param string $date
     * @param int $days
     * @return string
     */",
 "/**
     * Add the number of given months to a date.
     *
     * @param string $date
     * @param int $months
     * @return string
     */",
 "/**
     * Substract the number of given months to a date.
     *
     * @param string $date
     * @param int $months
     * @return string
     */",
 "/**
     * Honors that some SQL vendors such as MsSql use table hints for locking instead of the ANSI SQL FOR UPDATE specification.
     *
     * @param  string $fromClause
     * @param  int $lockMode
     * @return string
     */",
 "/**
     * Get the sql snippet to append to any SELECT statement which locks rows in shared read lock.
     *
     * This defaults to the ASNI SQL \"FOR UPDATE\", which is an exclusive lock (Write). Some database
     * vendors allow to lighten this constraint up to be a real read lock.
     *
     * @return string
     */",
 "/**
     * Get the SQL snippet to append to any SELECT statement which obtains an exclusive lock on the rows.
     *
     * The semantics of this lock mode should equal the SELECT .. FOR UPDATE of the ASNI SQL standard.
     *
     * @return string
     */",
 "/**
     * Drop a Table
     *
     * @throws \InvalidArgumentException
     * @param  Table|string $table
     * @return string
     */",
 "/**
     * Get SQL to safely drop a temporary table WITHOUT implicitly committing an open transaction.
     *
     * @param Table|string $table 
     * @return string
     */",
 "/**
     * Drop index from a table
     *
     * @param Index|string $name
     * @param string|Table $table
     * @return string
     */",
 "/**
     * Get drop constraint sql
     * 
     * @param  \Doctrine\DBAL\Schema\Constraint $constraint
     * @param  string|Table $table
     * @return string
     */",
 "/**
     * @param  ForeignKeyConstraint|string $foreignKey
     * @param  Table|string $table
     * @return string
     */",
 "/**
     * Gets the SQL statement(s) to create a table with the specified name, columns and constraints
     * on this platform.
     *
     * @param string $table The name of the table.
     * @param int $createFlags
     * @return array The sequence of SQL statements.
     */",
 "/**
     * @param string $tableName
     * @param array $columns
     * @param array $options
     * @return array
     */",
 "/**
     * Gets the SQL to create a sequence on this platform.
     *
     * @param \Doctrine\DBAL\Schema\Sequence $sequence
     * @throws DBALException
     */",
 "/**
     * Gets the SQL statement to change a sequence on this platform.
     * 
     * @param \Doctrine\DBAL\Schema\Sequence $sequence 
     * @return string
     */",
 "/**
     * Gets the SQL to create a constraint on a table on this platform.
     *
     * @param Constraint $constraint
     * @param string|Table $table
     * @return string
     */",
 "/**
     * Gets the SQL to create an index on a table on this platform.
     *
     * @param Index $index
     * @param string|Table $table name of the table on which the index is to be created
     * @return string
     */",
 "/**
     * Get SQL to create an unnamed primary key constraint.
     * 
     * @param Index $index
     * @param string|Table $table
     * @return string
     */",
 "/**
     * Quotes a string so that it can be safely used as a table or column name,
     * even if it is a reserved word of the platform.
     *
     * NOTE: Just because you CAN use quoted identifiers doesn\'t mean
     * you SHOULD use them.  In general, they end up causing way more
     * problems than they solve.
     *
     * @param string $str           identifier name to be quoted
     * @return string               quoted identifier string
     */",
 "/**
     * Create a new foreign key
     *
     * @param ForeignKeyConstraint  $foreignKey    ForeignKey instance
     * @param string|Table          $table         name of the table on which the foreign key is to be created
     * @return string
     */",
 "/**
     * Gets the sql statements for altering an existing table.
     *
     * The method returns an array of sql statements, since some platforms need several statements.
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * Common code for alter table statement generation that updates the changed Index and Foreign Key definitions.
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * Get declaration of a number of fields in bulk
     *
     * @param array $fields  a multidimensional associative array.
     *      The first dimension determines the field name, while the second
     *      dimension is keyed with the name of the properties
     *      of the field being declared as array indexes. Currently, the types
     *      of supported field properties are as follows:
     *
     *      length
     *          Integer value that determines the maximum length of the text
     *          field. If this argument is missing the field should be
     *          declared to have the longest length allowed by the DBMS.
     *
     *      default
     *          Text value to be used as default for this field.
     *
     *      notnull
     *          Boolean flag that indicates whether this field is constrained
     *          to not be set to null.
     *      charset
     *          Text value with the default CHARACTER SET for this field.
     *      collation
     *          Text value with the default COLLATION for this field.
     *      unique
     *          unique constraint
     *
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to declare a generic type
     * field to be used in statements like CREATE TABLE.
     *
     * @param string $name   name the field to be declared.
     * @param array  $field  associative array with the name of the properties
     *      of the field being declared as array indexes. Currently, the types
     *      of supported field properties are as follows:
     *
     *      length
     *          Integer value that determines the maximum length of the text
     *          field. If this argument is missing the field should be
     *          declared to have the longest length allowed by the DBMS.
     *
     *      default
     *          Text value to be used as default for this field.
     *
     *      notnull
     *          Boolean flag that indicates whether this field is constrained
     *          to not be set to null.
     *      charset
     *          Text value with the default CHARACTER SET for this field.
     *      collation
     *          Text value with the default COLLATION for this field.
     *      unique
     *          unique constraint
     *      check
     *          column check constraint
     *      columnDefinition
     *          a string that defines the complete column
     *
     * @return string  DBMS specific SQL code portion that should be used to declare the column.
     */",
 "/**
     * Gets the SQL snippet that declares a floating point column of arbitrary precision.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set a default value
     * declaration to be used in statements like CREATE TABLE.
     *
     * @param array $field      field definition array
     * @return string           DBMS specific SQL code portion needed to set a default value
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set a CHECK constraint
     * declaration to be used in statements like CREATE TABLE.
     *
     * @param array $definition     check definition
     * @return string               DBMS specific SQL code portion needed to set a CHECK constraint
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set a unique
     * constraint declaration to be used in statements like CREATE TABLE.
     *
     * @param string $name          name of the unique constraint
     * @param Index $index          index definition
     * @return string               DBMS specific SQL code portion needed 
     *                              to set a constraint
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set an index
     * declaration to be used in statements like CREATE TABLE.
     *
     * @param string $name          name of the index
     * @param Index $index          index definition
     * @return string               DBMS specific SQL code portion needed to set an index
     */",
 "/**
     * getCustomTypeDeclarationSql
     * Obtail SQL code portion needed to create a custom column,
     * e.g. when a field has the \"columnDefinition\" keyword.
     * Only \"AUTOINCREMENT\" and \"PRIMARY KEY\" are added if appropriate.
     *
     * @return string
     */",
 "/**
     * getIndexFieldDeclarationList
     * Obtain DBMS specific SQL code portion needed to set an index
     * declaration to be used in statements like CREATE TABLE.
     *
     * @return string
     */",
 "/**
     * A method to return the required SQL string that fits between CREATE ... TABLE
     * to create the table as a temporary table.
     *
     * Should be overridden in driver classes to return the correct string for the
     * specific database type.
     *
     * The default is to return the string \"TEMPORARY\" - this will result in a
     * SQL error for any database that does not support temporary tables, or that
     * requires a different SQL command from \"CREATE TEMPORARY TABLE\".
     *
     * @return string The string required to be placed between \"CREATE\" and \"TABLE\"
     *                to generate a temporary table, if possible.
     */",
 "/**
     * Some vendors require temporary table names to be qualified specially.
     *
     * @param  string $tableName
     * @return string
     */",
 "/**
     * Get sql query to show a list of database.
     *
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the FOREIGN KEY constraint
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param array $definition         an associative array with the following structure:
     *          name                    optional constraint name
     *
     *          local                   the local field(s)
     *
     *          foreign                 the foreign reference field(s)
     *
     *          foreignTable            the name of the foreign table
     *
     *          onDelete                referential delete action
     *
     *          onUpdate                referential update action
     *
     *          deferred                deferred constraint checking
     *
     * The onDelete and onUpdate keys accept the following values:
     *
     * CASCADE: Delete or update the row from the parent table and automatically delete or
     *          update the matching rows in the child table. Both ON DELETE CASCADE and ON UPDATE CASCADE are supported.
     *          Between two tables, you should not define several ON UPDATE CASCADE clauses that act on the same column
     *          in the parent table or in the child table.
     *
     * SET NULL: Delete or update the row from the parent table and set the foreign key column or columns in the
     *          child table to NULL. This is valid only if the foreign key columns do not have the NOT NULL qualifier
     *          specified. Both ON DELETE SET NULL and ON UPDATE SET NULL clauses are supported.
     *
     * NO ACTION: In standard SQL, NO ACTION means no action in the sense that an attempt to delete or update a primary
     *           key value is not allowed to proceed if there is a related foreign key value in the referenced table.
     *
     * RESTRICT: Rejects the delete or update operation for the parent table. NO ACTION and RESTRICT are the same as
     *           omitting the ON DELETE or ON UPDATE clause.
     *
     * SET DEFAULT
     *
     * @return string  DBMS specific SQL code portion needed to set the FOREIGN KEY constraint
     *                 of a field declaration.
     */",
 "/**
     * Return the FOREIGN KEY query section dealing with non-standard options
     * as MATCH, INITIALLY DEFERRED, ON UPDATE, ...
     *
     * @param ForeignKeyConstraint $foreignKey     foreign key definition
     * @return string
     */",
 "/**
     * returns given referential action in uppercase if valid, otherwise throws
     * an exception
     *
     * @throws Doctrine_Exception_Exception     if unknown referential action given
     * @param string $action    foreign key referential action
     * @param string            foreign key referential action in uppercase
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the FOREIGN KEY constraint
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param ForeignKeyConstraint $foreignKey
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the UNIQUE constraint
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @return string  DBMS specific SQL code portion needed to set the UNIQUE constraint
     *                 of a field declaration.
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the CHARACTER SET
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param string $charset   name of the charset
     * @return string  DBMS specific SQL code portion needed to set the CHARACTER SET
     *                 of a field declaration.
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the COLLATION
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param string $collation   name of the collation
     * @return string  DBMS specific SQL code portion needed to set the COLLATION
     *                 of a field declaration.
     */",
 "/**
     * Whether the platform prefers sequences for ID generation.
     * Subclasses should override this method to return TRUE if they prefer sequences.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform prefers identity columns (eg. autoincrement) for ID generation.
     * Subclasses should override this method to return TRUE if they prefer identity columns.
     *
     * @return boolean
     */",
 "/**
     * Some platforms need the boolean values to be converted.
     * 
     * The default conversion in this implementation converts to integers (false => 0, true => 1).
     *
     * @param mixed $item
     */",
 "/**
     * Gets the SQL statement specific for the platform to set the charset.
     *
     * This function is MySQL specific and required by
     * {@see \Doctrine\DBAL\Connection::setCharset($charset)}
     *
     * @param string $charset
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current date.
     *
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current time.
     *
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current timestamp
     *
     * @return string
     */",
 "/**
     * Get sql for transaction isolation level Connection constant
     *
     * @param integer $level
     */",
 "/**
     * Get the SQL to list all views of a database or user.
     *
     * @param string $database
     * @return string
     */",
 "/**
     * Get the list of indexes for the current database.
     * 
     * The current database parameter is optional but will always be passed
     * when using the SchemaManager API and is the database the given table is in.
     * 
     * Attention: Some platforms only support currentDatabase when they
     * are connected with that database. Cross-database information schema
     * requests may be impossible.
     * 
     * @param string $table
     * @param string $currentDatabase 
     */",
 "/**
     * Get sql to set the transaction isolation level
     *
     * @param integer $level
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create datetime fields in 
     * statements like CREATE TABLE
     *
     * @param array $fieldDeclaration 
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create datetime with timezone offset fields.
     * 
     * @param array $fieldDeclaration
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create date fields in statements
     * like CREATE TABLE.
     * 
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create time fields in statements
     * like CREATE TABLE.
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Gets the default transaction isolation level of the platform.
     *
     * @return integer The default isolation level.
     * @see Doctrine\DBAL\Connection\TRANSACTION_* constants.
     */",
 "/**
     * Whether the platform supports sequences.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports identity columns.
     * Identity columns are columns that recieve an auto-generated value from the
     * database on insert of a row.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports indexes.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports transactions.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports savepoints.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports releasing savepoints.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports primary key constraints.
     *
     * @return boolean
     */",
 "/**
     * Does the platform supports foreign key constraints?
     *
     * @return boolean
     */",
 "/**
     * Does this platform supports onUpdate in foreign key constraints?
     * 
     * @return bool
     */",
 "/**
     * Whether the platform supports database schemas.
     * 
     * @return boolean
     */",
 "/**
     * Some databases don\'t allow to create and drop databases at all or only with certain tools.
     *
     * @return bool
     */",
 "/**
     * Whether the platform supports getting the affected rows of a recent
     * update/delete type query.
     *
     * @return boolean
     */",
 "/**
     * Does this plaform support to add inline column comments as postfix.
     *
     * @return bool
     */",
 "/**
     * Does this platform support the propriortary synatx \"COMMENT ON asset\"
     * 
     * @return bool
     */",
 "/**
     * Gets the format string, as accepted by the date() function, that describes
     * the format of a stored datetime value of this platform.
     * 
     * @return string The format string.
     */",
 "/**
     * Gets the format string, as accepted by the date() function, that describes
     * the format of a stored datetime with timezone value of this platform.
     *
     * @return string The format string.
     */",
 "/**
     * Gets the format string, as accepted by the date() function, that describes
     * the format of a stored date value of this platform.
     * 
     * @return string The format string.
     */",
 "/**
     * Gets the format string, as accepted by the date() function, that describes
     * the format of a stored time value of this platform.
     * 
     * @return string The format string.
     */",
 "/**
     * Modify limit query
     * 
     * @param string $query
     * @param int $limit
     * @param int $offset
     * @return string
     */",
 "/**
     * @param string $query
     * @param int $limit
     * @param int $offset
     * @return string
     */",
 "/**
     * Gets the character casing of a column in an SQL result set of this platform.
     * 
     * @param string $column The column name for which to get the correct character casing.
     * @return string The column name in the character casing used in SQL result sets.
     */",
 "/**
     * Makes any fixes to a name of a schema element (table, sequence, ...) that are required
     * by restrictions of the platform, like a maximum length.
     * 
     * @param string $schemaName
     * @return string
     */",
 "/**
     * Maximum length of any given databse identifier, like tables or column names.
     * 
     * @return int
     */",
 "/**
     * Get the insert sql for an empty insert statement
     *
     * @param string $tableName 
     * @param string $identifierColumnName 
     * @return string $sql
     */",
 "/**
     * Generate a Truncate Table SQL statement for a given table.
     *
     * Cascade is not supported on many platforms but would optionally cascade the truncate by
     * following the foreign keys.
     *
     * @param  string $tableName
     * @param  bool $cascade
     * @return string
     */",
 "/**
     * This is for test reasons, many vendors have special requirements for dummy statements.
     * 
     * @return string
     */",
 "/**
     * Generate SQL to create a new savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Generate SQL to release a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Generate SQL to rollback a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Return the keyword list instance of this platform.
     * 
     * Throws exception if no keyword list is specified.
     * 
     * @throws DBALException
     * @return KeywordList
     */",
 "/**
     * The class name of the reserved keywords list.
     * 
     * @return string
     */",
 "/**
 * Base class for all DatabasePlatforms. The DatabasePlatforms are the central
 * point of abstraction of platform-specific behaviors, features and SQL dialects.
 * They are a passive source of information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Remove any unnecessary methods.
 */",
 "/**
 * Subselect ::= SimpleSelectClause SubselectFromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @expectedException Symfony\Component\Config\Definition\Exception\InvalidConfigurationException
     */",
 "/**
     * @expectedException Symfony\Component\Config\Definition\Exception\InvalidConfigurationException
     */",
 "/**
     * Tries to match a URL with a set of routes.
     *
     * @param  string $pathinfo The path info to be parsed
     *
     * @return array An array of parameters
     *
     * @throws ResourceNotFoundException If the resource could not be found
     * @throws MethodNotAllowedException If the resource was found but the request method is not allowed
     *
     * @api
     */",
 "/**
 * UrlMatcherInterface is the interface that all URL matcher classes must implement.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     */",
 "/**
     * Returns the PassConfig.
     *
     * @return PassConfig The PassConfig instance
     *
     * @api
     */",
 "/**
     * Returns the ServiceReferenceGraph.
     *
     * @return ServiceReferenceGraph The ServiceReferenceGraph instance
     *
     * @api
     */",
 "/**
     * Returns the logging formatter which can be used by compilation passes.
     *
     * @return LoggingFormatter
     */",
 "/**
     * Adds a pass to the PassConfig.
     *
     * @param CompilerPassInterface $pass A compiler pass
     * @param string                $type The type of the pass
     *
     * @api
     */",
 "/**
     * Adds a log message.
     *
     * @param string $string The log message
     */",
 "/**
     * Returns the log.
     *
     * @return array Log array
     */",
 "/**
     * Run the Compiler and process all Passes.
     *
     * @param ContainerBuilder $container
     *
     * @api
     */",
 "/**
 * This class is used to remove circular dependencies between individual passes.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param \Iterator $iterator        The Iterator to filter
     * @param array     $matchPatterns   An array of patterns that need to match
     * @param array     $noMatchPatterns An array of patterns that need to not match
     */",
 "/**
     * Filters the iterator values.
     *
     * @return Boolean true if the value should be kept, false otherwise
     */",
 "/**
 * FilenameFilterIterator filters files by patterns (a regexp, a glob, or a string).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param SecurityContextInterface               $securityContext       A SecurityContext instance
     * @param AuthenticationManagerInterface         $authenticationManager An AuthenticationManagerInterface instance
     * @param SessionAuthenticationStrategyInterface $sessionStrategy
     * @param HttpUtils                              $httpUtils             An HttpUtilsInterface instance
     * @param string                                 $providerKey
     * @param array                                  $options               An array of options for the processing of a
     *                                                                      successful, or failed authentication attempt
     * @param AuthenticationSuccessHandlerInterface  $successHandler
     * @param AuthenticationFailureHandlerInterface  $failureHandler
     * @param LoggerInterface                        $logger                A LoggerInterface instance
     * @param EventDispatcherInterface               $dispatcher            An EventDispatcherInterface instance
     */",
 "/**
     * Sets the RememberMeServices implementation to use
     *
     * @param RememberMeServicesInterface $rememberMeServices
     */",
 "/**
     * Handles form based authentication.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
     * Whether this request requires authentication.
     *
     * The default implementation only processed requests to a specific path,
     * but a subclass could change this to only authenticate requests where a
     * certain parameters is present.
     *
     * @param Request $request
     *
     * @return Boolean
     */",
 "/**
     * Performs authentication.
     *
     * @param  Request $request A Request instance
     *
     * @return TokenInterface The authenticated token, or null if full authentication is not possible
     *
     * @throws AuthenticationException if the authentication fails
     */",
 "/**
     * Builds the target URL according to the defined options.
     *
     * @param Request $request
     *
     * @return string
     */",
 "/**
 * The AbstractAuthenticationListener is the preferred base class for all
 * browser-/HTTP-based authentication requests.
 *
 * Subclasses likely have to implement the following:
 * - an TokenInterface to hold authentication related data
 * - an AuthenticationProvider to perform the actual authentication of the
 *   token, retrieve the UserInterface implementation from a database, and
 *   perform the specific account checks using the UserChecker
 *
 * By default, this listener only is active for a specific path, e.g.
 * /login_check. If you want to change this behavior, you can overwrite the
 * requiresAuthentication() method.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Returns the kernel in which this event was thrown
     *
     * @return Symfony\Component\HttpKernel\HttpKernelInterface
     *
     * @api
     */",
 "/**
     * Returns the request the kernel is currently processing
     *
     * @return Symfony\Component\HttpFoundation\Request
     *
     * @api
     */",
 "/**
     * Returns the request type the kernel is currently processing
     *
     * @return integer  One of HttpKernelInterface::MASTER_REQUEST and
     *                  HttpKernelInterface::SUB_REQUEST
     *
     * @api
     */",
 "/**
 * Base class for events thrown in the HttpKernel component
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * This Method has no relevant security annotations
     * @NonSecurityAnnotation
     */",
 "/**
     * @SecureParam(name=\"comment\", permissions=\"EDIT\")
     */",
 "/**
     * Allows updating with some filtered data
     *
     * @param mixed $data
     */",
 "/**
     * Constructor.
     *
     * @param \Iterator $iterator    The Iterator to filter
     * @param array     $comparators An array of \DateCompare instances
     */",
 "/**
     * Filters the iterator values.
     *
     * @return Boolean true if the value should be kept, false otherwise
     */",
 "/**
 * DateRangeFilterIterator filters out files that are not in the given date range (last modified dates).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Attempts to establish a connection with the underlying driver.
     *
     * @param array $params
     * @param string $username
     * @param string $password
     * @param array $driverOptions
     * @return Doctrine\DBAL\Driver\Connection
     */",
 "/**
     * Constructs the MySql PDO DSN.
     *
     * @return string  The DSN.
     */",
 "/**
 * PDO MySql driver.
 *
 * @since 2.0
 */",
 "/**
     * Processes the ContainerBuilder to validate the Definition.
     *
     * @param ContainerBuilder $container
     *
     * @throws \RuntimeException When the Definition is invalid
     */",
 "/**
 * This pass validates each definition individually only taking the information
 * into account which is contained in the definition itself.
 *
 * Later passes can rely on the following, and specifically do not need to
 * perform these checks themselves:
 *
 * - non synthetic, non abstract services always have a class set
 * - synthetic services are always public
 * - synthetic services are always of non-prototype scope
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Initializes a new AnnotationDriver that uses the given AnnotationReader for reading
     * docblock annotations.
     * 
     * @param AnnotationReader $reader The AnnotationReader to use.
     */",
 "/**
     * Set tables manually instead of relying on the reverse engeneering capabilities of SchemaManager.
     *
     * @param array $entityTables
     * @param array $manyToManyTables
     * @return void
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Return all the class names supported by this driver.
     *
     * IMPORTANT: This method must return an array of class not tables names.
     *
     * @return array
     */",
 "/**
     * Set class name for a table.
     *
     * @param string $tableName
     * @param string $className
     * @return void
     */",
 "/**
     * Set field name for a column on a specific table.
     *
     * @param string $tableName
     * @param string $columnName
     * @param string $fieldName
     * @return void
     */",
 "/**
     * Return the mapped class name for a table if it exists. Otherwise return \"classified\" version.
     *
     * @param string $tableName
     * @return string
     */",
 "/**
     * Return the mapped field name for a column, if it exists. Otherwise return camelized version.
     *
     * @param string $tableName
     * @param string $columnName
     * @param boolean $fk Whether the column is a foreignkey or not.
     * @return string
     */",
 "/**
     * Set the namespace for the generated entities.
     *
     * @param string $namespace
     * @return void
     */",
 "/**
 * The DatabaseDriver reverse engineers the mapping metadata from a database.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param UrlGeneratorInterface $router A Router instance
     */",
 "/**
     * Generates a URL from the given parameters.
     *
     * @param string  $name       The name of the route
     * @param mixed   $parameters An array of parameters
     * @param Boolean $absolute   Whether to generate an absolute URL
     *
     * @return string The generated URL
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     */",
 "/**
 * RouterHelper manages links between pages in a template context.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param LoggerInterface $logger A LoggerInterface instance
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Logs a message.
     *
     * @param string $message A message to log
     */",
 "/**
 * DbalLogger.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
*@inheritdoc
*/",
 "/**
*Simplelexerfordocblockannotations.
*
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*/",
 "/**
     * Loads the active token for the given series.
     *
     * @throws TokenNotFoundException if the token is not found
     *
     * @param string $series
     *
     * @return PersistentTokenInterface
     */",
 "/**
     * Deletes all tokens belonging to series.
     *
     * @param string $series
     */",
 "/**
     * Updates the token according to this data.
     *
     * @param string   $series
     * @param string   $tokenValue
     * @param DateTime $lastUsed
     */",
 "/**
     * Creates a new token.
     *
     * @param PersistentTokenInterface $token
     */",
 "/**
 * Interface for TokenProviders
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $class The class this property is defined on
     * @param string $name  The name of this property
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @api
 */",
 "/**
 * Base ACL exception
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Creates a new CharacterReaderFactory.
   */",
 "/**
   * Returns a CharacterReader suitable for the charset applied.
   * @param string $charset
   * @return Swift_CharacterReader
   */",
 "/**
 * Standard factory for creating CharacterReaders.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param FirewallMap              $map        A FirewallMap instance
     * @param EventDispatcherInterface $dispatcher An EventDispatcherInterface instance
     */",
 "/**
     * Handles security.
     *
     * @param GetResponseEvent $event An GetResponseEvent instance
     */",
 "/**
 * Firewall uses a FirewallMap to register security listeners for the given
 * request.
 *
 * It allows for different security strategies within the same application
 * (a Basic authentication for the /api, and a web based authentication for
 * everything else for instance).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Registers the Twig exception listener if Twig is registered as a templating engine.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $nodeBin   The path to the node binary
     * @param array  $nodePaths An array of node paths
     */",
 "/**
 * Loads LESS files.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * Prepends a fake front controller so the asset knows where it is-ish.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * A resource is something formulae can be loaded from.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * @group integration
 */",
 "/**
     * Sets the decorated flag.
     *
     * @param Boolean $decorated Whether to decorate the messages or not
     *
     * @api
     */",
 "/**
     * Gets the decorated flag.
     *
     * @return Boolean true if the output will decorate messages, false otherwise
     *
     * @api
     */",
 "/**
     * Sets a new style.
     *
     * @param string                        $name  The style name
     * @param OutputFormatterStyleInterface $style The style instance
     *
     * @api
     */",
 "/**
     * Checks if output formatter has style with specified name.
     *
     * @param   string  $name
     *
     * @return  Boolean
     *
     * @api
     */",
 "/**
     * Gets style options from style with specified name.
     *
     * @param   string  $name
     *
     * @return  OutputFormatterStyleInterface
     *
     * @api
     */",
 "/**
     * Formats a message according to the given styles.
     *
     * @param  string $message The message to style
     *
     * @return string The styled message
     *
     * @api
     */",
 "/**
 * Formatter interface for console output.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * @api
 */",
 "/**
     * Constructor
     *
     * @param  string  $methodName  The method name that raised the exception
     * @param  string  $argName     The argument name that is not implemented
     */",
 "/**
 * @author Eriksen Costa <eriksen.costa@infranology.com.br>
 */",
 "/**
 * Trims string data
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Processes the ContainerBuilder to remove unused definitions.
     *
     * @param ContainerBuilder $container
     *
     * @return void
     */",
 "/**
 * Removes unused service definitions from the container.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"LOCATE\" \"(\" StringPrimary \",\" StringPrimary [\",\" SimpleArithmeticExpression]\")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param array $factories
     */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * This class contains the configuration information for the following tags:
 *
 *   * security.config
 *   * security.acl
 *
 * This information is solely responsible for how the different configuration
 * sections are normalized, and merged.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Initializes output formatter style.
     *
     * @param   string  $foreground     style foreground color name
     * @param   string  $background     style background color name
     * @param   array   $options        style options
     *
     * @api
     */",
 "/**
     * Sets style foreground color.
     *
     * @param   string  $color  color name
     *
     * @throws \InvalidArgumentException When the color name isn\'t defined
     *
     * @api
     */",
 "/**
     * Sets style background color.
     *
     * @param   string  $color  color name
     *
     * @throws \InvalidArgumentException When the color name isn\'t defined
     *
     * @api
     */",
 "/**
     * Sets some specific style option.
     *
     * @param   string  $option     option name
     *
     * @throws \InvalidArgumentException When the option name isn\'t defined
     *
     * @api
     */",
 "/**
     * Unsets some specific style option.
     *
     * @param   string  $option     option name
     *
     * @throws \InvalidArgumentException When the option name isn\'t defined
     *
     */",
 "/**
     * Sets multiple style options at once.
     *
     * @param   array   $options
     */",
 "/**
     * Applies the style to a given text.
     *
     * @param string $text The text to style
     *
     * @return string
     */",
 "/**
 * Formatter style class for defining styles.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * @api
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a spaceless node.
 *
 * It removes spaces between HTML tags.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new IoException with $message.
   * @param string $message
   */",
 "/**
 * I/O Exception class.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * The constructor.
     *
     * @param NodeInterface $selector The XPath selector
     * @param string $combinator The combinator
     * @param NodeInterface $subselector The sub XPath selector
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     * @throws ParseException When unknown combinator is found
     */",
 "/**
     * Joins a NodeInterface into the XPath of this object.
     *
     * @param XPathExpr $xpath The XPath expression for this object
     * @param NodeInterface $sub The NodeInterface object to add
     */",
 "/**
     * Joins a NodeInterface as a child of this object.
     *
     * @param XPathExpr $xpath The parent XPath expression
     * @param NodeInterface $sub The NodeInterface object to add
     */",
 "/**
     * Joins an XPath expression as an adjacent of another.
     *
     * @param XPathExpr $xpath The parent XPath expression
     * @param NodeInterface $sub The adjacent XPath expression
     */",
 "/**
     * Joins an XPath expression as an indirect adjacent of another.
     *
     * @param XPathExpr $xpath The parent XPath expression
     * @param NodeInterface $sub The indirect adjacent NodeInterface object
     */",
 "/**
 * CombinedSelectorNode represents a combinator node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @dataProvider getInteractiveCommandData
     */",
 "/**
     * @dataProvider getNonInteractiveCommandData
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string $inputTimezone  The name of the input timezone
     * @param string $outputTimezone The name of the output timezone
     *
     * @throws UnexpectedTypeException if a timezone is not a string
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * Flattens an nested array of translations
     *
     * The scheme used is:
     *   \'key\' => array(\'key2\' => array(\'key3\' => \'value\'))
     * Becomes:
     *   \'key.key2.key3\' => \'value\'
     *
     * This function takes an array by reference and will modify it
     *
     * @param array  &$messages The array that will be flattened
     * @param array  $subnode   Current subnode being parsed, used internally for recursive calls
     * @param string $path      Current path being parsed, used internally for recursive calls
     */",
 "/**
 * ArrayLoader loads translations from a PHP array.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns the token parser instances to add to the existing list.
     *
     * @return array An array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances
     */",
 "/**
     * Returns the node visitor instances to add to the existing list.
     *
     * @return array An array of Twig_NodeVisitorInterface instances
     */",
 "/**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * Marks a variable as being safe.
 *
 * @param string $string A PHP variable
 */",
 "/**
 * Loads SCSS files.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * An object that can be used as either a string or array.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for day of year format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * This class contains the configuration information for the following tags:
 *
 *   * security.config
 *   * security.acl
 *
 * This information is solely responsible for how the different configuration
 * sections are normalized, and merged.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param UserCheckerInterface $userChecker                An UserCheckerInterface interface
     * @param string               $providerKey                A provider key
     * @param Boolean              $hideUserNotFoundExceptions Whether to hide user not found exception or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Retrieves the user from an implementation-specific location.
     *
     * @param string                $username The username to retrieve
     * @param UsernamePasswordToken $token    The Token
     *
     * @return array The user
     *
     * @throws AuthenticationException if the credentials could not be validated
     */",
 "/**
     * Does additional checks on the user and token (like validating the
     * credentials).
     *
     * @param UserInterface         $user  The retrieved UserInterface instance
     * @param UsernamePasswordToken $token The UsernamePasswordToken token to be authenticated
     *
     * @throws AuthenticationException if the credentials could not be validated
     */",
 "/**
 * UserProviderInterface retrieves users for UsernamePasswordToken tokens.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * The RunAsManager creates throw-away Tokens which are temporarily injected into
 * the security context for the duration of the invocation of a specific method.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Transforms a Boolean into a string.
     *
     * @param  Boolean $value   Boolean value.
     *
     * @return string           String value.
     *
     * @throws UnexpectedTypeException if the given value is not a Boolean
     */",
 "/**
     * Transforms a string into a Boolean.
     *
     * @param  string $value  String value.
     *
     * @return Boolean        Boolean value.
     *
     * @throws UnexpectedTypeException if the given value is not a string
     */",
 "/**
 * Transforms between a Boolean and a string.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 */",
 "/**
     * Generates a CSRF token for a page of your application.
     *
     * @param string $intention Some value that identifies the action intention
     *                          (i.e. \"authenticate\"). Doesn\'t have to be a secret value.
     */",
 "/**
     * Validates a CSRF token.
     *
     * @param string $intention The intention used when generating the CSRF token
     * @param string $token The token supplied by the browser
     *
     * @return Boolean Whether the token supplied by the browser is correct
     */",
 "/**
 * Marks classes able to provide CSRF protection
 *
 * You can generate a CSRF token by using the method generateCsrfToken(). To
 * this method you should pass a value that is unique to the page that should
 * be secured against CSRF attacks. This value doesn\'t necessarily have to be
 * secret. Implementations of this interface are responsible for adding more
 * secret information.
 *
 * If you want to secure a form submission against CSRF attacks, you could
 * supply an \"intention\" string. This way you make sure that the form can only
 * be bound to pages that are designed to handle the form, that is, that use
 * the same intention string to validate the CSRF token with isCsrfTokenValid().
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * Base exception for all configuration exceptions
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Based on the buffer given, this returns true if more buffering is needed.
   * @param mixed $buffer
   * @return boolean
   */",
 "/**
   * Filters $buffer and returns the changes.
   * @param mixed $buffer
   * @return mixed
   */",
 "/**
 * Processes bytes as they pass through a stream and performs filtering.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
   * Get the name of the ESMTP extension this handles.
   * @return boolean
   */",
 "/**
   * Set the parameters which the EHLO greeting indicated.
   * @param string[] $parameters
   */",
 "/**
   * Runs immediately after a EHLO has been issued.
   * @param Swift_Transport_SmtpAgent $agent to read/write
   */",
 "/**
   * Get params which are appended to MAIL FROM:<>.
   * @return string[]
   */",
 "/**
   * Get params which are appended to RCPT TO:<>.
   * @return string[]
   */",
 "/**
   * Runs when a command is due to be sent.
   * @param Swift_Transport_SmtpAgent $agent to read/write
   * @param string $command to send
   * @param int[] $codes expected in response
   * @param string[] &$failedRecipients
   * @param boolean &$stop to be set true if the command is now sent
   */",
 "/**
   * Returns +1, -1 or 0 according to the rules for usort().
   * This method is called to ensure extensions can be execute in an appropriate order.
   * @param string $esmtpKeyword to compare with
   * @return int
   */",
 "/**
   * Returns an array of method names which are exposed to the Esmtp class.
   * @return string[]
   */",
 "/**
   * Tells this handler to clear any buffers and reset its state.
   */",
 "/**
 * An ESMTP handler.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param HttpKernelInterface $kernel An HttpKernelInterface instance
     */",
 "/**
     * Forwards the Request to the backend and returns the Response.
     *
     * @param Request  $request A Request instance
     * @param Boolean  $raw     Whether to catch exceptions or not
     * @param Response $entry   A Response instance (the stale entry if present, null otherwise)
     *
     * @return Response A Response instance
     */",
 "/**
     * Returns an array of options to customize the Cache configuration.
     *
     * @return array An array of options
     */",
 "/**
 * Manages HTTP cache objects in a Container.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param array $oracleSessionVars
     */",
 "/**
     * @param ConnectionEventArgs $args
     * @return void
     */",
 "/**
 * Should be used when Oracle Server default enviroment does not match the Doctrine requirements.
 *
 * The following enviroment variables are required for the Doctrine default date format:
 *
 * NLS_TIME_FORMAT=\"HH24:MI:SS\"
 * NLS_DATE_FORMAT=\"YYYY-MM-DD\"
 * NLS_TIMESTAMP_FORMAT=\"YYYY-MM-DD HH24:MI:SS\"
 * NLS_TIMESTAMP_TZ_FORMAT=\"YYYY-MM-DD HH24:MI:SS TZH:TZM\"
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for 24 hour format (1-24)
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
   * Create a new EchoLogger.
   * 
   * @param boolean $isHtml
   */",
 "/**
   * Add a log entry.
   * @param string $entry
   */",
 "/**
   * Not implemented.
   */",
 "/**
   * Not implemented.
   */",
 "/**
 * Prints all log messages in real time.
 * 
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param ChoiceListInterface $choiceList
     */",
 "/**
     * Transforms a single choice to a format appropriate for the nested
     * checkboxes/radio buttons.
     *
     * The result is an array with the options as keys and true/false as values,
     * depending on whether a given option is selected. If this field is rendered
     * as select tag, the value is not modified.
     *
     * @param  mixed $value  An array if \"multiple\" is set to true, a scalar
     *                       value otherwise.
     *
     * @return mixed         An array
     *
     * @throws UnexpectedTypeException if the given value is not scalar
     * @throws TransformationFailedException if the choices can not be retrieved
     */",
 "/**
     * Transforms a checkbox/radio button array to a single choice.
     *
     * The input value is an array with the choices as keys and true/false as
     * values, depending on whether a given choice is selected. The output
     * is the selected choice.
     *
     * @param  array $value  An array of values
     *
     * @return mixed $value  A scalar value
     *
     * @throws new UnexpectedTypeException if the given value is not an array
     */",
 "/**
 * ExistsExpression ::= [\"NOT\"] \"EXISTS\" \"(\" Subselect \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string $resource The file path to the resource
     */",
 "/**
     * Returns a string representation of the Resource.
     *
     * @return string A string representation of the Resource
     */",
 "/**
     * Returns the resource tied to this Resource.
     *
     * @return mixed The resource
     */",
 "/**
     * Returns true if the resource has not been updated since the given timestamp.
     *
     * @param integer $timestamp The last time the resource was loaded
     *
     * @return Boolean true if the resource has not been updated, false otherwise
     */",
 "/**
 * FileResource represents a resource stored on the filesystem.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
*Generateentityclassesfrommappinginformation
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorJonathanH.Wage<jonwage@gmail.com>
*/",
 "/**
     * Constructor
     *
     * @param integer $mask optional; defaults to 0
     * @return void
     */",
 "/**
     * Adds a mask to the permission
     *
     * @param mixed $mask
     * @return PermissionBuilder
     */",
 "/**
     * Returns the mask of this permission
     *
     * @return integer
     */",
 "/**
     * Returns a human-readable representation of the permission
     *
     * @return string
     */",
 "/**
     * Removes a mask from the permission
     *
     * @param mixed $mask
     * @return PermissionBuilder
     */",
 "/**
     * Resets the PermissionBuilder
     *
     * @return PermissionBuilder
     */",
 "/**
     * Returns the code for the passed mask
     *
     * @param integer $mask
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     * @return string
     */",
 "/**
 * This class allows you to build cumulative permissions easily, or convert
 * masks to a human-readable format.
 *
 * <code>
 *       $builder = new MaskBuilder();
 *       $builder
 *           ->add(\'view\')
 *           ->add(\'create\')
 *           ->add(\'edit\')
 *       ;
 *       var_dump($builder->get());        // int(7)
 *       var_dump($builder->getPattern()); // string(32) \".............................ECV\"
 * </code>
 *
 * We have defined some commonly used base permissions which you can use:
 * - VIEW: the SID is allowed to view the domain object / field
 * - CREATE: the SID is allowed to create new instances of the domain object / fields
 * - EDIT: the SID is allowed to edit existing instances of the domain object / field
 * - DELETE: the SID is allowed to delete domain objects
 * - UNDELETE: the SID is allowed to recover domain objects from trash
 * - OPERATOR: the SID is allowed to perform any action on the domain object
 *             except for granting others permissions
 * - MASTER: the SID is allowed to perform any action on the domain object,
 *           and is allowed to grant other SIDs any permission except for
 *           MASTER and OWNER permissions
 * - OWNER: the SID is owning the domain object in question and can perform any
 *          action on the domain object as well as grant any permission
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param TranslatorInterface $translator A TranslatorInterface instance
     */",
 "/**
     * @see TranslatorInterface::trans()
     */",
 "/**
     * @see TranslatorInterface::transChoice()
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     */",
 "/**
 * TranslatorHelper.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
 * Container for all ORM events.
 *
 * This class cannot be instantiated.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Compares a Doctrine version with the current one.
     *
     * @param string $version Doctrine version to compare.
     * @return int Returns -1 if older, 0 if it is the same, 1 if version
     *             passed as argument is newer.
     */",
 "/**
 * Class to store and retrieve the version of Doctrine
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
*ValidatesandparsesthegivenfileintoaSimpleXMLElement
*
*@paramstring$file
*
*@returnSimpleXMLElement
*/",
 "/**
*ReturnstheXMLerrorsoftheinternalXMLparser
*
*@returnarrayAnarrayoferrors
*/",
 "/**
*XliffFileLoaderloadstranslationsfromXLIFFfiles.
*
*@authorFabienPotencier<fabien@symfony.com>
*
*@api
*/",
 "/**
     * @throws \RuntimeException When neither of SQLite3 or PDO_SQLite extension is enabled
     */",
 "/**
*{@inheritdoc}
*/",
 "/**
*SqliteProfilerStoragestoresprofilinginformationinaSQLitedatabase.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * Dumps a PHP value to YAML.
     *
     * @param  mixed   $input  The PHP value
     * @param  integer $inline The level where you switch to inline YAML
     * @param  integer $indent The level of indentation (used internally)
     *
     * @return string  The YAML representation of the PHP value
     */",
 "/**
 * Dumper dumps PHP variables to YAML strings.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns all class-based ACEs associated with this ACL
     *
     * @return array
     */",
 "/**
     * Returns all class-field-based ACEs associated with this ACL
     *
     * @param string $field
     * @return array
     */",
 "/**
     * Returns all object-based ACEs associated with this ACL
     *
     * @return array
     */",
 "/**
     * Returns all object-field-based ACEs associated with this ACL
     *
     * @param string $field
     * @return array
     */",
 "/**
     * Returns the object identity associated with this ACL
     *
     * @return ObjectIdentityInterface
     */",
 "/**
     * Returns the parent ACL, or null if there is none.
     *
     * @return AclInterface|null
     */",
 "/**
     * Whether this ACL is inheriting ACEs from a parent ACL.
     *
     * @return Boolean
     */",
 "/**
     * Determines whether field access is granted
     *
     * @param string  $field
     * @param array   $masks
     * @param array   $securityIdentities
     * @param Boolean $administrativeMode
     * @return Boolean
     */",
 "/**
     * Determines whether access is granted
     *
     * @throws NoAceFoundException when no ACE was applicable for this request
     * @param array   $masks
     * @param array   $securityIdentities
     * @param Boolean $administrativeMode
     * @return Boolean
     */",
 "/**
     * Whether the ACL has loaded ACEs for all of the passed security identities
     *
     * @param mixed $securityIdentities an implementation of SecurityIdentityInterface, or an array thereof
     * @return Boolean
     */",
 "/**
 * This interface represents an access control list (ACL) for a domain object.
 * Each domain object can have exactly one associated ACL.
 *
 * An ACL contains all access control entries (ACE) for a given domain object.
 * In order to avoid needing references to the domain object itself, implementations
 * use ObjectIdentity implementations as an additional level of indirection.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * PlaintextPasswordEncoder does not do any encoding.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Imports blocks defined in another template into the current template.
 *
 * <pre>
 * {% extends \"base.html\" %}
 *
 * {% use \"blocks.html\" %}
 *
 * {% block title %}{% endblock %}
 * {% block content %}{% endblock %}
 * </pre>
 *
 * @see http://www.twig-project.org/doc/templates.html#horizontal-reuse for details.
 */",
 "/**
 * Adds services tagged as filters to the filter manager.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Checks if a number is even.
 *
 * <pre>
 *  {{ var is even }}
 * </pre>
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Adds services tagged as workers to the asset factory.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * @return \Doctrine\ORM\EntityManager
     */",
 "/**
 * Provides event arguments for the onClear event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @version     $Revision$
 * @author      Roman Borschel <roman@code-factory.de>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
   * Create a new ArrayKeyCache with the given $stream for cloning to make
   * InputByteStreams.
   * @param Swift_KeyCache_KeyCacheInputStream $stream
   */",
 "/**
   * Set a string into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param string $string
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_OutputByteStream $os
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Provides a ByteStream which when written to, writes data to $itemKey.
   * NOTE: The stream will always write in append mode.
   * @param string $nsKey
   * @param string $itemKey
   * @return Swift_InputByteStream
   */",
 "/**
   * Get data back out of the cache as a string.
   * @param string $nsKey
   * @param string $itemKey
   * @return string
   */",
 "/**
   * Get data back out of the cache as a ByteStream.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_InputByteStream $is to write the data to
   */",
 "/**
   * Check if the given $itemKey exists in the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @return boolean
   */",
 "/**
   * Clear data for $itemKey in the namespace $nsKey if it exists.
   * @param string $nsKey
   * @param string $itemKey
   */",
 "/**
   * Clear all data in the namespace $nsKey if it exists.
   * @param string $nsKey
   */",
 "/**
   * Initialize the namespace of $nsKey if needed.
   * @param string $nsKey
   * @access private
   */",
 "/**
 * A basic KeyCache backed by an array.
 * @package Swift
 * @subpackage KeyCache
 * @author Chris Corbyn
 */",
 "/**
     * Configure Charset and Collation options of MySQL Client for each Connection
     *
     * @param string $charset
     * @param string $collation
     */",
 "/**
     * @param ConnectionEventArgs $args
     * @return void
     */",
 "/**
 * MySQL Session Init Event Subscriber which allows to set the Client Encoding of the Connection
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @deprecated  Use \"charset\" option to PDO MySQL Connection instead.
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to generate the SQL needed to update the database schema to match
 * the current mapping information.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Ryan Weaver <ryan@thatsquality.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $key   The key shared with the authentication provider
     * @param string $user  The user
     * @param Role[] $roles An array of roles
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the key.
     *
     * @return string The Key
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * AnonymousToken represents an anonymous token.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Initializes TreeWalker with important information about the ASTs to be walked
     *
     * @param Query $query The parsed Query.
     * @param ParserResult $parserResult The result of the parsing process.
     * @param array $queryComponents Query components (symbol table)
     */",
 "/**
     * Walks down a SelectStatement AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FromClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FunctionNode AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByClause AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByItem AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a HavingClause AST node, thereby generating the appropriate SQL.
     *
     * @param HavingClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a JoinVariableDeclaration AST node and creates the corresponding SQL.
     *
     * @param JoinVariableDeclaration $joinVarDecl
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectExpression AST node and generates the corresponding SQL.
     *
     * @param SelectExpression $selectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a QuantifiedExpression AST node, thereby generating the appropriate SQL.
     *
     * @param QuantifiedExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a Subselect AST node, thereby generating the appropriate SQL.
     *
     * @param Subselect
     * @return string The SQL.
     */",
 "/**
     * Walks down a SubselectFromClause AST node, thereby generating the appropriate SQL.
     *
     * @param SubselectFromClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an AggregateExpression AST node, thereby generating the appropriate SQL.
     *
     * @param AggregateExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByClause AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByItem AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateStatement AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteStatement AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteClause AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateClause AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateItem AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a WhereClause AST node, thereby generating the appropriate SQL.
     *
     * @param WhereClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalTerm AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalTerm
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalFactor AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalFactor
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalPrimary AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalPrimary
     * @return string The SQL.
     */",
 "/**
     * Walks down an ExistsExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ExistsExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CollectionMemberExpression AST node, thereby generating the appropriate SQL.
     *
     * @param CollectionMemberExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an EmptyCollectionComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param EmptyCollectionComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param NullComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InstanceOfExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InstanceOfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a literal that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a BetweenExpression AST node, thereby generating the appropriate SQL.
     *
     * @param BetweenExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a LikeExpression AST node, thereby generating the appropriate SQL.
     *
     * @param LikeExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a StateFieldPathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param StateFieldPathExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InputParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InputParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticTerm AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a StringPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticFactor that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an SimpleArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an PathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Gets an executor that can be used to execute the result of this walker.
     *
     * @return AbstractExecutor
     */",
 "/**
 * Interface for walkers of DQL ASTs (abstract syntax trees).
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a node that outputs an expression.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructs an SchemaDiff object.
     *
     * @param array(string=>Table)      $newTables
     * @param array(string=>TableDiff)  $changedTables
     * @param array(string=>bool)       $removedTables
     */",
 "/**
     * The to save sql mode ensures that the following things don\'t happen:
     *
     * 1. Tables are deleted
     * 2. Sequences are deleted
     * 3. Foreign Keys which reference tables that would otherwise be deleted.
     *
     * This way it is ensured that assets are deleted which might not be relevant to the metadata schema at all.
     *
     * @param AbstractPlatform $platform
     * @return array
     */",
 "/**
     * @param AbstractPlatform $platform
     * @return array
     */",
 "/**
     * @param AbstractPlatform $platform
     * @param bool $saveMode
     * @return array
     */",
 "/**
 * Schema Diff
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @copyright Copyright (C) 2005-2009 eZ Systems AS. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @return bool
     */",
 "/**
     * @param bool $flag
     */",
 "/**
     * @param int $length
     */",
 "/**
     * @return int
     */",
 "/**
 * Configuration for a Schema
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Base RuntimeException for Dependency Injection Component.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Generates an identifier for an entity.
     *
     * @param \Doctrine\ORM\Entity $entity
     * @return mixed
     */",
 "/**
     * Gets whether this generator is a post-insert generator which means that
     * {@link generate()} must be called after the entity has been inserted
     * into the database.
     * 
     * By default, this method returns FALSE. Generators that have this requirement
     * must override this method and return TRUE.
     *
     * @return boolean
     */",
 "/**
     * Process the Container to replace aliases with service definitions.
     *
     * @param ContainerBuilder $container
     */",
 "/**
     * Updates references to remove aliases.
     *
     * @param ContainerBuilder $container The container
     * @param string $currentId The alias identifier being replaced
     * @param string $newId The id of the service the alias points to
     */",
 "/**
     * Updates argument references.
     *
     * @param array $arguments An array of Arguments
     * @param string $currentId The alias identifier
     * @param string $newId The identifier the alias points to
     */",
 "/**
 * Replaces aliases with actual service definitions, effectively removing these
 * aliases.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * AfterInvocationProviderInterface
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Encodes JSON data
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Constructor.
     *
     * @param Connection                          $connection
     * @param PermissionGrantingStrategyInterface $permissionGrantingStrategy
     * @param array                               $options
     * @param AclCacheInterface                   $cache
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Constructs the query used for looking up object identities and associated
     * ACEs, and security identities.
     *
     * @param array $ancestorIds
     * @return string
     */",
 "/**
     * Constructs the SQL for retrieving child object identities for the given
     * object identities.
     *
     * @param ObjectIdentityInterface $oid
     * @param Boolean                 $directChildrenOnly
     * @return string
     */",
 "/**
     * Constructs the SQL for retrieving the primary key of the given object
     * identity.
     *
     * @param ObjectIdentityInterface $oid
     * @return string
     */",
 "/**
     * Returns the primary key of the passed object identity.
     *
     * @param ObjectIdentityInterface $oid
     * @return integer
     */",
 "/**
     * This method is called when an ACL instance is retrieved from the cache.
     *
     * @param AclInterface $acl
     * @return void
     */",
 "/**
     * Retrieves all the ids which need to be queried from the database
     * including the ids of parent ACLs.
     *
     * @param array $batch
     *
     * @return array
     */",
 "/**
     * Does either overwrite the passed ACE, or saves it in the global identity
     * map to ensure every ACE only gets instantiated once.
     *
     * @param array &$aces
     *
     * @return void
     */",
 "/**
     * This method is called for object identities which could not be retrieved
     * from the cache, and for which thus a database query is required.
     *
     * @param array $batch
     * @param array $sids
     * @param array $oidLookup
     *
     * @return \SplObjectStorage mapping object identities to ACL instances
     */",
 "/**
     * This method is called to hydrate ACLs and ACEs.
     *
     * This method was designed for performance; thus, a lot of code has been
     * inlined at the cost of readability, and maintainability.
     *
     * Keep in mind that changes to this method might severely reduce the
     * performance of the entire ACL system.
     *
     * @param Statement $stmt
     * @param array     $oidLookup
     * @param array     $sids
     * @throws \RuntimeException
     * @return \SplObjectStorage
     */",
 "/**
 * An ACL provider implementation.
 *
 * This provider assumes that all ACLs share the same PermissionGrantingStrategy.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
   * Create a new SpoolTransport.
   * @param Swift_Spool $spool
   */",
 "/**
   * Create a new SpoolTransport instance.
   * @param Swift_Spool $spool
   * @return Swift_SpoolTransport
   */",
 "/**
 * Stores Messages in a queue.
 * @package Swift
 * @author  Fabien Potencier
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to (re)generate the proxy classes used by doctrine.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @param StepInterface $step
     */",
 "/**
     * @param integer $index
     *
     * @return StepInterface
     */",
 "/**
     * @return array
     */",
 "/**
     * @return array
     */",
 "/**
     * @return integer
     */",
 "/**
     * @param array $parameters
     */",
 "/**
     * @return array
     */",
 "/**
     * @return array
     */",
 "/**
     * Renders parameters as a string.
     *
     * @return string
     */",
 "/**
     * Writes parameters to parameters.ini or temporary in the cache directory.
     *
     * @return boolean
     */",
 "/**
     * Reads parameters from file.
     *
     * @return array
     */",
 "/**
     * getCacheFilename
     *
     * @return string
     */",
 "/**
 * Configurator.
 *
 * @author Marc Weistroff <marc.weistroff@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $file The YAML routing file path
     */",
 "/**
     * Adds a routing resource at the top of the existing ones.
     *
     * @param string $bundle
     * @param string $format
     * @param string $prefix
     * @param string $path
     *
     * @return Boolean true if it worked, false otherwise
     *
     * @throws \RuntimeException If bundle is already imported
     */",
 "/**
 * Changes the PHP code of a YAML routing file.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Exception interface for all exceptions thrown by the component.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Thrown when a scope widening injection is detected.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Gets the target value.
     *
     * @return string The target value
     */",
 "/**
     * Sets the target value.
     *
     * @param string $target The target value
     */",
 "/**
     * Gets the comparison operator.
     *
     * @return string The operator
     */",
 "/**
     * Sets the comparison operator.
     *
     * @param string $operator A valid operator
     */",
 "/**
     * Tests against the target.
     *
     * @param mixed $test A test value
     */",
 "/**
 * Comparator.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns a string representation of the Token.
     *
     * This is only to be used for debugging purposes.
     *
     * @return string
     */",
 "/**
     * Returns the user roles.
     *
     * @return Role[] An array of Role instances.
     */",
 "/**
     * Returns the user credentials.
     *
     * @return mixed The user credentials
     */",
 "/**
     * Returns a user representation.
     *
     * @return mixed either returns an object which implements __toString(), or
     *                  a primitive string is returned.
     */",
 "/**
     * Sets a user.
     *
     * @param mixed $user
     */",
 "/**
     * Returns the username.
     *
     * @return string
     */",
 "/**
     * Returns whether the user is authenticated or not.
     *
     * @return Boolean true if the token has been authenticated, false otherwise
     */",
 "/**
     * Sets the authenticated flag.
     *
     * @param Boolean $isAuthenticated The authenticated flag
     */",
 "/**
     * Removes sensitive information from the token.
     */",
 "/**
     * Returns the token attributes.
     *
     * @return array The token attributes
     */",
 "/**
     * Sets the token attributes.
     *
     * @param array $attributes The token attributes
     */",
 "/**
     * Returns true if the attribute exists.
     *
     * @param  string  $name  The attribute name
     *
     * @return Boolean true if the attribute exists, false otherwise
     */",
 "/**
     * Returns an attribute value.
     *
     * @param string $name The attribute name
     *
     * @return mixed The attribute value
     *
     * @throws \InvalidArgumentException When attribute doesn\'t exist for this token
     */",
 "/**
     * Sets an attribute.
     *
     * @param string $name  The attribute name
     * @param mixed  $value The attribute value
     */",
 "/**
 * TokenInterface is the interface for the user authentication information.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Construct.
     *
     * @param string $dir The cache directory
     */",
 "/**
     * Checks of the cache has a file.
     *
     * @param string $resource A cache key
     *
     * @return Boolean True if a file exists
     */",
 "/**
     * Writes a value to a file.
     *
     * @param string $resource A cache key
     * @param mixed  $value    A value to cache
     */",
 "/**
     * Loads and returns the value for the supplied cache key.
     *
     * @param string $resource A cache key
     *
     * @return mixed The cached value
     */",
 "/**
     * Returns a timestamp for when the cache was created.
     *
     * @param string $resource A cache key
     *
     * @return integer A UNIX timestamp
     */",
 "/**
     * Returns the path where the file corresponding to the supplied cache key can be included from.
     *
     * @param string $resource A cache key
     *
     * @return string A file path
     */",
 "/**
 * A config cache stores values using var_export() and include.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * EmptyCollectionComparisonExpression ::= CollectionValuedPathExpression \"IS\" [\"NOT\"] \"EMPTY\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     * 
     * @override
     */",
 "/**
     * {@inheritdoc}
     * 
     * @override
     */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaPgsqlReader.html
     * @param  array $tableIndexes
     * @param  string $tableName
     * @return array
     */",
 "/**
 * SqliteSchemaManager
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @version     $Revision$
 * @since       2.0
 */",
 "/**
 * Adds tagged request.param_converter services to converter.manager service
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new Attachment with $headers and $encoder.
   * @param Swift_Mime_HeaderSet $headers
   * @param Swift_Mime_ContentEncoder $encoder
   * @param Swift_KeyCache $cache
   * @param Swift_Mime_Grammar $grammar
   * @param array $mimeTypes optional
   */",
 "/**
   * Get the nesting level of this EmbeddedFile.
   * Returns {@link LEVEL_RELATED}.
   * @return int
   */",
 "/**
 * An embedded file, in a multipart message.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Create a new ImpersonatePlugin to impersonate $sender.
     * 
     * @param string $sender address
     */",
 "/**
     * Invoked immediately before the Message is sent.
     * 
     * @param Swift_Events_SendEvent $evt
     */",
 "/**
     * Invoked immediately after the Message is sent.
     * 
     * @param Swift_Events_SendEvent $evt
     */",
 "/**
 * Replaces the sender of a message.
 *
 * @package Swift
 * @subpackage Plugins
 * @author Arjen Brouwer
 */",
 "/**
 * Adds all services with the tags \"form.type\" and \"form.type_guesser\" as
 * arguments of the \"form.extension\" service
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 */",
 "/**
     * Transforms entities into choice keys.
     *
     * @param  Collection|object $collection A collection of entities, a single entity or NULL
     *
     * @return mixed An array of choice keys, a single key or NULL
     */",
 "/**
     * Transforms choice keys into entities.
     *
     * @param  mixed $keys        An array of keys, a single key or NULL
     *
     * @return Collection|object  A collection of entities, a single entity or NULL
     */",
 "/**
 * Loads security annotations and converts them to metadata
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Commit the given bytes to the storage medium immediately.
   * @param string $bytes
   * @access protected
   */",
 "/**
   * Flush any buffers/content with immediate effect.
   * @access protected
   */",
 "/**
   * Add a StreamFilter to this InputByteStream.
   * @param Swift_StreamFilter $filter
   * @param string $key
   */",
 "/**
   * Remove an already present StreamFilter based on its $key.
   * @param string $key
   */",
 "/**
   * Writes $bytes to the end of the stream.
   * @param string $bytes
   * @throws Swift_IoException
   */",
 "/**
   * For any bytes that are currently buffered inside the stream, force them
   * off the buffer.
   * 
   * @throws Swift_IoException
   */",
 "/**
   * Attach $is to this stream.
   * The stream acts as an observer, receiving all data that is written.
   * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
   * 
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Remove an already bound stream.
   * If $is is not bound, no errors will be raised.
   * If the stream currently has any buffered data it will be written to $is
   * before unbinding occurs.
   * 
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Flush the contents of the stream (empty it) and set the internal pointer
   * to the beginning.
   * @throws Swift_IoException
   */",
 "/** Run $bytes through all filters */",
 "/** Just write the bytes to the stream */",
 "/**
 * Provides the base functionality for an InputStream supporting filters.
 * @package Swift
 * @subpackage ByteStream
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Returns an attribute
     *
     * @param string $name    The attribute name
     * @param mixed  $default The default value
     *
     * @return mixed
     */",
 "/**
     * Returns the locale
     *
     * @return string
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     */",
 "/**
 * SessionHelper provides read-only access to the session attributes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Binds a value to a corresponding named or positional
     * placeholder in the SQL statement that was used to prepare the statement.
     *
     * @param mixed $param          Parameter identifier. For a prepared statement using named placeholders,
     *                              this will be a parameter name of the form :name. For a prepared statement
     *                              using question mark placeholders, this will be the 1-indexed position of the parameter
     *
     * @param mixed $value          The value to bind to the parameter.
     * @param integer $type         Explicit data type for the parameter using the PDO::PARAM_* constants.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * Binds a PHP variable to a corresponding named or question mark placeholder in the
     * SQL statement that was use to prepare the statement. Unlike PDOStatement->bindValue(),
     * the variable is bound as a reference and will only be evaluated at the time
     * that PDOStatement->execute() is called.
     *
     * Most parameters are input parameters, that is, parameters that are
     * used in a read-only fashion to build up the query. Some drivers support the invocation
     * of stored procedures that return data as output parameters, and some also as input/output
     * parameters that both send in data and are updated to receive it.
     *
     * @param mixed $param          Parameter identifier. For a prepared statement using named placeholders,
     *                              this will be a parameter name of the form :name. For a prepared statement
     *                              using question mark placeholders, this will be the 1-indexed position of the parameter
     *
     * @param mixed $variable       Name of the PHP variable to bind to the SQL statement parameter.
     *
     * @param integer $type         Explicit data type for the parameter using the PDO::PARAM_* constants. To return
     *                              an INOUT parameter from a stored procedure, use the bitwise OR operator to set the
     *                              PDO::PARAM_INPUT_OUTPUT bits for the data_type parameter.
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * Closes the cursor, enabling the statement to be executed again.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * columnCount
     * Returns the number of columns in the result set
     *
     * @return integer              Returns the number of columns in the result set represented
     *                              by the PDOStatement object. If there is no result set,
     *                              this method should return 0.
     */",
 "/**
     * errorCode
     * Fetch the SQLSTATE associated with the last operation on the statement handle
     *
     * @see Doctrine_Adapter_Interface::errorCode()
     * @return string       error code string
     */",
 "/**
     * errorInfo
     * Fetch extended error information associated with the last operation on the statement handle
     *
     * @see Doctrine_Adapter_Interface::errorInfo()
     * @return array        error info array
     */",
 "/**
     * Executes a prepared statement
     *
     * If the prepared statement included parameter markers, you must either:
     * call PDOStatement->bindParam() to bind PHP variables to the parameter markers:
     * bound variables pass their value as input and receive the output value,
     * if any, of their associated parameter markers or pass an array of input-only
     * parameter values
     *
     *
     * @param array $params             An array of values with as many elements as there are
     *                                  bound parameters in the SQL statement being executed.
     * @return boolean                  Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * fetch
     *
     * @see Query::HYDRATE_* constants
     * @param integer $fetchStyle           Controls how the next row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_* constants,
     *                                      defaulting to Query::HYDRATE_BOTH
     *
     * @param integer $cursorOrientation    For a PDOStatement object representing a scrollable cursor,
     *                                      this value determines which row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_ORI_* constants, defaulting to
     *                                      Query::HYDRATE_ORI_NEXT. To request a scrollable cursor for your
     *                                      PDOStatement object,
     *                                      you must set the PDO::ATTR_CURSOR attribute to Doctrine::CURSOR_SCROLL when you
     *                                      prepare the SQL statement with Doctrine_Adapter_Interface->prepare().
     *
     * @param integer $cursorOffset         For a PDOStatement object representing a scrollable cursor for which the
     *                                      $cursorOrientation parameter is set to Query::HYDRATE_ORI_ABS, this value specifies
     *                                      the absolute number of the row in the result set that shall be fetched.
     *
     *                                      For a PDOStatement object representing a scrollable cursor for
     *                                      which the $cursorOrientation parameter is set to Query::HYDRATE_ORI_REL, this value
     *                                      specifies the row to fetch relative to the cursor position before
     *                                      PDOStatement->fetch() was called.
     *
     * @return mixed
     */",
 "/**
     * Returns an array containing all of the result set rows
     *
     * @param integer $fetchStyle           Controls how the next row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_* constants,
     *                                      defaulting to Query::HYDRATE_BOTH
     *
     * @param integer $columnIndex          Returns the indicated 0-indexed column when the value of $fetchStyle is
     *                                      Query::HYDRATE_COLUMN. Defaults to 0.
     *
     * @return array
     */",
 "/**
     * fetchColumn
     * Returns a single column from the next row of a
     * result set or FALSE if there are no more rows.
     *
     * @param integer $columnIndex          0-indexed number of the column you wish to retrieve from the row. If no
     *                                      value is supplied, PDOStatement->fetchColumn()
     *                                      fetches the first column.
     *
     * @return string                       returns a single column in the next row of a result set.
     */",
 "/**
     * rowCount
     * rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement
     * executed by the corresponding object.
     *
     * If the last SQL statement executed by the associated Statement object was a SELECT statement,
     * some databases may return the number of rows returned by that statement. However,
     * this behaviour is not guaranteed for all databases and should not be
     * relied on for portable applications.
     *
     * @return integer                      Returns the number of rows.
     */",
 "/**
     * Constructor.
     *
     * @param KernelInterface $kernel A KernelInterface instance
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the token.
     *
     * @return string The token
     */",
 "/**
     * Gets the Symfony version.
     *
     * @return string The Symfony version
     */",
 "/**
     * Gets the PHP version.
     *
     * @return string The PHP version
     */",
 "/**
     * Gets the application name.
     *
     * @return string The application name
     */",
 "/**
     * Gets the environment.
     *
     * @return string The environment
     */",
 "/**
     * Returns true if the debug is enabled.
     *
     * @return Boolean true if debug is enabled, false otherwise
     */",
 "/**
     * Returns true if the XDebug is enabled.
     *
     * @return Boolean true if XDebug is enabled, false otherwise
     */",
 "/**
     * Returns true if EAccelerator is enabled.
     *
     * @return Boolean true if EAccelerator is enabled, false otherwise
     */",
 "/**
     * Returns true if APC is enabled.
     *
     * @return Boolean true if APC is enabled, false otherwise
     */",
 "/**
     * Returns true if XCache is enabled.
     *
     * @return Boolean true if XCache is enabled, false otherwise
     */",
 "/**
     * Returns true if any accelerator is enabled.
     *
     * @return Boolean true if any accelerator is enabled, false otherwise
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * ConfigDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $content    The content of the asset
     * @param array  $filters    Filters for the asset
     * @param string $sourceRoot The source asset root directory
     * @param string $sourcePath The source asset path
     */",
 "/**
 * Represents a string asset.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * @inheritdoc
     */",
 "/**
     * Adds a tree walker to the chain.
     * 
     * @param string $walkerClass The class of the walker to instantiate.
     */",
 "/**
     * Walks down a SelectStatement AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FromClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FunctionNode AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByClause AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByItem AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a HavingClause AST node, thereby generating the appropriate SQL.
     *
     * @param HavingClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a JoinVariableDeclaration AST node and creates the corresponding SQL.
     *
     * @param JoinVariableDeclaration $joinVarDecl
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectExpression AST node and generates the corresponding SQL.
     *
     * @param SelectExpression $selectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a QuantifiedExpression AST node, thereby generating the appropriate SQL.
     *
     * @param QuantifiedExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a Subselect AST node, thereby generating the appropriate SQL.
     *
     * @param Subselect
     * @return string The SQL.
     */",
 "/**
     * Walks down a SubselectFromClause AST node, thereby generating the appropriate SQL.
     *
     * @param SubselectFromClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an AggregateExpression AST node, thereby generating the appropriate SQL.
     *
     * @param AggregateExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByClause AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByItem AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateStatement AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteStatement AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteClause AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateClause AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateItem AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a WhereClause AST node, thereby generating the appropriate SQL.
     *
     * @param WhereClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalTerm AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalTerm
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalFactor AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalFactor
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalPrimary AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalPrimary
     * @return string The SQL.
     */",
 "/**
     * Walks down an ExistsExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ExistsExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CollectionMemberExpression AST node, thereby generating the appropriate SQL.
     *
     * @param CollectionMemberExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an EmptyCollectionComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param EmptyCollectionComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param NullComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InstanceOfExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InstanceOfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a literal that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a BetweenExpression AST node, thereby generating the appropriate SQL.
     *
     * @param BetweenExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a LikeExpression AST node, thereby generating the appropriate SQL.
     *
     * @param LikeExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a StateFieldPathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param StateFieldPathExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InputParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InputParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticTerm AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a StringPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticFactor that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an SimpleArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an PathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Gets an executor that can be used to execute the result of this walker.
     * 
     * @return AbstractExecutor
     */",
 "/**
 * Represents a chain of tree walkers that modify an AST and finally emit output.
 * Only the last walker in the chain can emit output. Any previous walkers can modify
 * the AST to influence the final output produced by the last walker.
 * 
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
   * Get the name of this encoding scheme.
   * Returns the string \'B\'.
   * @return string
   */",
 "/**
 * Handles Base64 (B) Header Encoding in Swift Mailer.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
   * Create a new Mailer using $transport for delivery.
   * 
   * @param Swift_Transport $transport
   */",
 "/**
   * Create a new Mailer instance.
   * 
   * @param Swift_Transport $transport
   * @return Swift_Mailer
   */",
 "/**
   * Create a new class instance of one if the message services
   * For example \'mimepart\' would create a \'message.mimepart\' instance
   *
   * @param string $service
   * @return object
   */",
 "/**
   * Send the given Message like it would be sent in a mail client.
   * 
   * All recipients (with the exception of Bcc) will be able to see the other
   * recipients this message was sent to.
   * 
   * Recipient/sender data will be retrieved from the Message object.
   * 
   * The return value is the number of recipients who were accepted for
   * delivery.
   * 
   * @param Swift_Mime_Message $message
   * @param array &$failedRecipients, optional
   * @return int
   */",
 "/**
   * Register a plugin using a known unique key (e.g. myPlugin).
   * 
   * @param Swift_Events_EventListener $plugin
   * @param string $key
   */",
 "/**
   * The Transport used to send messages.
   * @return Swift_Transport
   */",
 "/**
 * Swift Mailer class.
 * 
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * @expectedException Symfony\Component\Security\Core\Exception\AccessDeniedException
     */",
 "/**
     * @expectedException Symfony\Component\Security\Core\Exception\AccessDeniedException
     */",
 "/**
 * An interface that must be implemented by all node parents
 *
 * @author Victor Berchet <victor@suumit.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Checks if the exception is not null.
     *
     * @return Boolean true if the exception is not null, false otherwise
     */",
 "/**
     * Gets the exception.
     *
     * @return \Exception The exception
     */",
 "/**
     * Gets the exception message.
     *
     * @return string The exception message
     */",
 "/**
     * Gets the exception code.
     *
     * @return integer The exception code
     */",
 "/**
     * Gets the status code.
     *
     * @return integer The status code
     */",
 "/**
     * Gets the exception trace.
     *
     * @return array The exception trace
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * ExceptionDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Invoked immediately following a response coming back.
   * @param Swift_Events_ResponseEvent $evt
   */",
 "/**
 * Listens for responses from a remote SMTP server.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param KernelInterface      $kernel  A KernelInterface instance
     * @param TemplateNameParser   $parser  A TemplateNameParser instance
     * @param string               $rootDir The directory where global templates can be stored
     */",
 "/**
     * Find all the templates in the bundle and in the kernel Resources folder.
     *
     * @return array An array of templates of type TemplateReferenceInterface
     */",
 "/**
     * Find templates in the given directory.
     *
     * @param string $dir The folder where to look for templates
     *
     * @return array An array of templates of type TemplateReferenceInterface
     */",
 "/**
     * Find templates in the given bundle.
     *
     * @param BundleInterface $bundle The bundle where to look for templates
     *
     * @return array An array of templates of type TemplateReferenceInterface
     */",
 "/**
 * Finds all the templates.
 *
 * @author Victor Berchet <victor@suumit.com>
 */",
 "/**
     * Loads from annotations from a directory.
     *
     * @param string $path A directory path
     * @param string $type The resource type
     *
     * @return RouteCollection A RouteCollection instance
     *
     * @throws \InvalidArgumentException When the directory does not exist or its routes cannot be parsed
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean True if this class supports the given resource, false otherwise
     */",
 "/**
 * AnnotationDirectoryLoader loads routing information from annotations set
 * on PHP classes and methods.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * SQLite Keywords
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param LoaderInterface $loader  The templating loader
     * @param string          $bundle  The current bundle name
     * @param string          $path    The directory path
     * @param string          $pattern A regex pattern for file basenames
     */",
 "/**
 * A directory resource that creates Symfony2 templating resources.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Represents a function template function.
 *
 * @package    twig
 * @author     Arnaud Le Blanc <arnaud.lb@gmail.com>
 */",
 "/**
 * @group integration
 */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     */",
 "/**
     * Adds a service as event listener
     *
     * @param string   $eventName Event for which the listener is added
     * @param array    $callback  The service ID of the listener service & the method
     *                            name that has to be called
     * @param integer  $priority  The higher this value, the earlier an event listener
     *                            will be triggered in the chain.
     *                            Defaults to 0.
     */",
 "/**
     * @see EventDispatcherInterface::hasListeners
     */",
 "/**
     * @see EventDispatcherInterface::getListeners
     */",
 "/**
     * {@inheritDoc}
     *
     * Lazily loads listeners for this event from the dependency injection
     * container.
     *
     * @throws \InvalidArgumentException if the service is not defined
     */",
 "/**
     * Lazily loads listeners for this event from the dependency injection
     * container.
     *
     * @param string $eventName The name of the event to dispatch. The name of
     *                          the event is the name of the method that is
     *                          invoked on listeners.
     */",
 "/**
 * Lazily loads listeners and subscribers from the dependency injection
 * container
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
   * Creates a new PlainContentEncoder with $name (probably 7bit or 8bit).
   * @param string $name
   * @param boolean $canonical If canonicalization transformation should be done.
   */",
 "/**
   * Encode a given string to produce an encoded string.
   * @param string $string
   * @param int $firstLineOffset, ignored
   * @param int $maxLineLength - 0 means no wrapping will occur
   * @return string
   */",
 "/**
   * Encode stream $in to stream $out.
   * @param Swift_OutputByteStream $in
   * @param Swift_InputByteStream $out
   * @param int $firstLineOffset, ignored
   * @param int $maxLineLength, optional, 0 means no wrapping will occur
   */",
 "/**
   * Get the name of this encoding scheme.
   * @return string
   */",
 "/**
   * Not used.
   */",
 "/**
   * A safer (but weaker) wordwrap for unicode.
   * @param string $string
   * @param int $length
   * @param string $le
   * @return string
   * @access private
   */",
 "/**
   * Canonicalize string input (fix CRLF).
   * @param string $string
   * @return string
   * @access private
   */",
 "/**
 * Handles binary/7/8-bit Transfer Encoding in Swift Mailer.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Loads an XML file.
     *
     * @param string $file An XML file path
     * @param string $type The resource type
     *
     * @return RouteCollection A RouteCollection instance
     *
     * @throws \InvalidArgumentException When a tag can\'t be parsed
     *
     * @api
     */",
 "/**
     * Parses a node from a loaded XML file.
     *
     * @param RouteCollection $collection the collection to associate with the node
     * @param DOMElement      $node the node to parse
     * @param string          $path the path of the XML file being processed
     * @param string          $file
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean True if this class supports the given resource, false otherwise
     *
     * @api
     */",
 "/**
     * Parses a route and adds it to the RouteCollection.
     *
     * @param RouteCollection $collection A RouteCollection instance
     * @param \DOMElement     $definition Route definition
     * @param string          $file       An XML file path
     *
     * @throws \InvalidArgumentException When the definition cannot be parsed
     */",
 "/**
     * Loads an XML file.
     *
     * @param string $file An XML file path
     *
     * @return \DOMDocument
     *
     * @throws \InvalidArgumentException When loading of XML file returns error
     */",
 "/**
     * Validates a loaded XML file.
     *
     * @param \DOMDocument $dom A loaded XML file
     *
     * @throws \InvalidArgumentException When XML doesn\'t validate its XSD schema
     */",
 "/**
     * Retrieves libxml errors and clears them.
     *
     * @return array An array of libxml error strings
     */",
 "/**
 * XmlFileLoader loads XML routing files.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param \Twig_Compiler $compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a render node.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns the arguments that were passed to the method
     *
     * @return array
     */",
 "/**
     * Returns the object the method was being invoked on
     *
     * @return object
     */",
 "/**
 * This class holds all data which is associated with the invocation of a
 * method.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param KernelInterface $kernel A KernelInterface instance
     */",
 "/**
     * Gets the Kernel associated with this Console.
     *
     * @return KernelInterface A KernelInterface instance
     */",
 "/**
     * Runs the current application.
     *
     * @param InputInterface  $input  An Input instance
     * @param OutputInterface $output An Output instance
     *
     * @return integer 0 if everything went fine, or an error code
     */",
 "/**
 * Application.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * AssociationPathExpression ::= CollectionValuedPathExpression | SingleValuedAssociationPathExpression
 * SingleValuedPathExpression ::= StateFieldPathExpression | SingleValuedAssociationPathExpression
 * StateFieldPathExpression ::= SimpleStateFieldPathExpression | SimpleStateFieldAssociationPathExpression
 * SingleValuedAssociationPathExpression ::= IdentificationVariable \".\" SingleValuedAssociationField
 * CollectionValuedPathExpression ::= IdentificationVariable \".\" CollectionValuedAssociationField
 * StateField ::= {EmbeddedClassStateField \".\"}* SimpleStateField
 * SimpleStateFieldPathExpression ::= IdentificationVariable \".\" StateField
 * 
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param \PDO  $db        A PDO instance
     * @param array $options   An associative array of session options
     * @param array $dbOptions An associative array of DB options
     *
     * @throws \InvalidArgumentException When \"db_table\" option is not provided
     *
     * @see NativeSessionStorage::__construct()
     */",
 "/**
     * Starts the session.
     */",
 "/**
     * Opens a session.
     *
     * @param  string $path  (ignored)
     * @param  string $name  (ignored)
     *
     * @return Boolean true, if the session was opened, otherwise an exception is thrown
     */",
 "/**
     * Closes a session.
     *
     * @return Boolean true, if the session was closed, otherwise false
     */",
 "/**
     * Destroys a session.
     *
     * @param  string $id  A session ID
     *
     * @return Boolean   true, if the session was destroyed, otherwise an exception is thrown
     *
     * @throws \RuntimeException If the session cannot be destroyed
     */",
 "/**
     * Cleans up old sessions.
     *
     * @param  int $lifetime  The lifetime of a session
     *
     * @return Boolean true, if old sessions have been cleaned, otherwise an exception is thrown
     *
     * @throws \RuntimeException If any old sessions cannot be cleaned
     */",
 "/**
     * Reads a session.
     *
     * @param  string $id  A session ID
     *
     * @return string      The session data if the session was read or created, otherwise an exception is thrown
     *
     * @throws \RuntimeException If the session cannot be read
     */",
 "/**
     * Writes session data.
     *
     * @param  string $id    A session ID
     * @param  string $data  A serialized chunk of session data
     *
     * @return Boolean true, if the session was written, otherwise an exception is thrown
     *
     * @throws \RuntimeException If the session data cannot be written
     */",
 "/**
     * Creates a new session with the given $id and $data
     *
     * @param string $id
     * @param string $data
     */",
 "/**
 * PdoSessionStorage.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Michael Williams <michael.williams@funsational.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $name The Node\'s name
     * @param NodeInterface $parent The node parent
     */",
 "/**
     * Sets the minimum number of elements that a prototype based node must
     * contain. By default this is zero, meaning no elements.
     *
     * @param integer $number
     */",
 "/**
     * The name of the attribute which value should be used as key.
     *
     * This is only relevant for XML configurations, and only in combination
     * with a prototype based node.
     *
     * For example, if \"id\" is the keyAttribute, then:
     *
     *     array(\'id\' => \'my_name\', \'foo\' => \'bar\')
     *
     * becomes
     *
     *     \'my_name\' => array(\'foo\' => \'bar\')
     *
     * If $remove is false, the resulting array will still have the
     * \"\'id\' => \'my_name\'\" item in it.
     *
     * @param string  $attribute The name of the attribute which value is to be used as a key
     * @param Boolean $remove Whether or not to remove the key
     */",
 "/**
     * Sets the default value of this node.
     *
     * @param string $value
     *
     * @throws \InvalidArgumentException if the default value is not an array
     */",
 "/**
     * Checks if the node has a default value.
     *
     * @return Boolean
     */",
 "/**
     * Retrieves the default value.
     *
     * @return array The default value
     */",
 "/**
     * Sets the node prototype.
     *
     * @param PrototypeNodeInterface $node
     */",
 "/**
     * Disable adding concrete children for prototyped nodes.
     *
     * @param NodeInterface $node The child node to add
     *
     * @throws \RuntimeException Prototyped array nodes can\'t have concrete children.
     */",
 "/**
     * Finalizes the value of this node.
     *
     * @param mixed $value
     *
     * @return mixed The finalised value
     *
     * @throws UnsetKeyException
     * @throws InvalidConfigurationException if the node doesn\'t have enough children
     */",
 "/**
     * Normalizes the value.
     *
     * @param mixed $value The value to normalize
     *
     * @return mixed The normalized value
     */",
 "/**
     * Merges values together.
     *
     * @param mixed $leftSide The left side to merge.
     * @param mixed $rightSide The right side to merge.
     *
     * @return mixed The merged values
     *
     * @throws InvalidConfigurationException
     * @throws \RuntimeException
     */",
 "/**
 * Represents a prototyped Array node in the config tree.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * We only perform a very lightweight control flow analysis. If we stumble upon
     * something suspicous, we will simply break, and require additional metadata
     * to resolve the situation.
     *
     * @throws \RuntimeException
     * @return void
     */",
 "/**
 * Analyzes a service class including parent classes. The gathered information
 * is then used to built a proxy class if necessary.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * DateTime type saving additional timezone information.
 *
 * Caution: Databases are not necessarily experts at storing timezone related
 * data of dates. First, of all the supported vendors only PostgreSQL and Oracle
 * support storing Timezone data. But those two don\'t save the actual timezone
 * attached to a DateTime instance (for example \"Europe/Berlin\" or \"America/Montreal\")
 * but the current offset of them related to UTC. That means depending on daylight saving times
 * or not you may get different offsets.
 *
 * This datatype makes only sense to use, if your application works with an offset, not
 * with an actual timezone that uses transitions. Otherwise your DateTime instance
 * attached with a timezone such as Europe/Berlin gets saved into the database with
 * the offset and re-created from persistence with only the offset, not the original timezone
 * attached.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param AuthenticationTrustResolverInterface $authenticationTrustResolver
     *
     * @return void
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * AuthenticatedVoter votes if an attribute like IS_AUTHENTICATED_FULLY,
 * IS_AUTHENTICATED_REMEMBERED, or IS_AUTHENTICATED_ANONYMOUSLY is present.
 *
 * This list is most restrictive to least restrictive checking.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * You can override this method when writing a voter for a specific domain
     * class.
     *
     * @param string $class The class name
     *
     * @return Boolean
     */",
 "/**
 * This voter can be used as a base class for implementing your own permissions.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Thrown when an error occurred in the component File
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Sets the SQL logger to use. Defaults to NULL which means SQL logging is disabled.
     *
     * @param SQLLogger $logger
     */",
 "/**
     * Gets the SQL logger that is used.
     * 
     * @return SQLLogger
     */",
 "/**
 * Configuration container for the Doctrine DBAL.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @internal When adding a new configuration option just write a getter/setter
 *           pair and add the option to the _attributes array with a proper default value.
 */",
 "/**
     * Sets the RepeatedPass interface.
     *
     * @param RepeatedPass $repeatedPass
     */",
 "/**
 * Interface that must be implemented by passes that are run as part of an
 * RepeatedPass.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Base configuration annotation.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * SubselectFromClause ::= \"FROM\" SubselectIdentificationVariableDeclaration {\",\" SubselectIdentificationVariableDeclaration}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Create a new MailTransport with the $log.
   * @param Swift_Transport_Log $log
   */",
 "/**
   * Not used.
   */",
 "/**
   * Not used.
   */",
 "/**
   * Not used.
   */",
 "/**
   * Set the additional parameters used on the mail() function.
   * 
   * This string is formatted for sprintf() where %s is the sender address.
   * 
   * @param string $params
   * @return Swift_Transport_MailTransport
   */",
 "/**
   * Get the additional parameters used on the mail() function.
   * 
   * This string is formatted for sprintf() where %s is the sender address.
   * 
   * @return string
   */",
 "/**
   * Send the given Message.
   * 
   * Recipient/sender data will be retrieved from the Message API.
   * The return value is the number of recipients who were accepted for delivery.
   * 
   * @param Swift_Mime_Message $message
   * @param string[] &$failedRecipients to collect failures by-reference
   * @return int
   */",
 "/**
   * Register a plugin.
   * 
   * @param Swift_Events_EventListener $plugin
   */",
 "/** Determine the best-use reverse path for this message */",
 "/**
 * Sends Messages using the mail() function.
 * 
 * It is advised that users do not use this transport if at all possible
 * since a number of plugin features cannot be used in conjunction with this
 * transport due to the internal interface in PHP itself.
 * 
 * The level of error reporting with this transport is incredibly weak, again
 * due to limitations of PHP\'s internal mail() function.  You\'ll get an
 * all-or-nothing result from sending.
 * 
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
*FindsThePHPexecutable.
*
*@returnstring|falseThePHPexecutablepathorfalseifitcannotbefound
*/",
 "/**
*AnexecutablefinderspecificallydesignedforthePHPexecutable.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*/",
 "/**
     * Construct.
     *
     * @param array $typesConfig
     */",
 "/**
     * Create a connection by name.
     *
     * @param array         $params
     * @param Configuration $config
     * @param EventManager  $eventManager
     *
     * @return Doctrine\DBAL\Connection
     */",
 "/**
 * Connection
 */",
 "/**
 * Assetic extension.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Checks if a timestamp represents the latest resource.
     *
     * @param integer $timestamp A UNIX timestamp
     *
     * @return Boolean True if the timestamp is up to date
     */",
 "/**
     * Returns the content of the resource.
     *
     * @return string The content
     */",
 "/**
     * Returns a unique string for the current resource.
     *
     * @return string A unique string to identity the current resource
     */",
 "/**
 * A resource is something formulae can be loaded from.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * AuthenticationCredentialsNotFoundException is thrown when an authentication is rejected
 * because no Token is available.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * This function finds the ClassMetadata instance in an inheritance hierarchy
     * that is responsible for enabling versioning.
     *
     * @return \Doctrine\ORM\Mapping\ClassMetadata
     */",
 "/**
     * Gets the name of the table that owns the column the given field is mapped to.
     *
     * @param string $fieldName
     * @return string
     * @override
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Get the FROM and optionally JOIN conditions to lock the entity managed by this persister.
     *
     * @return string
     */",
 "/** {@inheritdoc} */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The joined subclass persister maps a single entity instance to several tables in the
 * database as it is defined by the <tt>Class Table Inheritance</tt> strategy.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 * @see http://martinfowler.com/eaaCatalog/classTableInheritance.html
 */",
 "/**
 * DeleteStatement = DeleteClause [WhereClause]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param NodeInterface $selector The XPath expression
     * @param string $type
     * @param string $name
     * @param XPathExpr $expr
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     * @throws ParseException When unsupported or unknown pseudo-class is found
     */",
 "/**
     * undocumented function
     *
     * @param XPathExpr $xpath
     * @param mixed     $expr
     * @param Boolean   $last
     * @param Boolean   $addNameTest
     *
     * @return XPathExpr
     */",
 "/**
     * undocumented function
     *
     * @param XPathExpr $xpath
     * @param XPathExpr $expr
     *
     * @return XPathExpr
     */",
 "/**
     * undocumented function
     *
     * @param XPathExpr $xpath
     * @param XPathExpr $expr
     *
     * @return XPathExpr
     */",
 "/**
     * undocumented function
     *
     * @param XPathExpr $xpath
     * @param XPathExpr $expr
     *
     * @return XPathExpr
     */",
 "/**
     * undocumented function
     *
     * @param XPathExpr $xpath
     * @param XPathExpr $expr
     *
     * @return XPathExpr
     */",
 "/**
     * undocumented function
     *
     * @param XPathExpr $xpath
     * @param XPathExpr $expr
     *
     * @return XPathExpr
     */",
 "/**
     * Parses things like \'1n+2\', or \'an+b\' generally, returning (a, b)
     *
     * @param mixed $s
     *
     * @return array
     */",
 "/**
 * FunctionNode represents a \"selector:name(expr)\" node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a block call node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new EmbeddedFile.
   * Details may be optionally provided to the constructor.
   * @param string|Swift_OutputByteStream $data
   * @param string $filename
   * @param string $contentType
   */",
 "/**
   * Create a new Image.
   * @param string|Swift_OutputByteStream $data
   * @param string $filename
   * @param string $contentType
   * @return Swift_Mime_EmbeddedFile
   */",
 "/**
   * Create a new Image from a filesystem path.
   * @param string $path
   * @return Swift_Mime_EmbeddedFile
   */",
 "/**
 * An image, embedded in a multipart message.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
     * Binds a value to a corresponding named or positional
     * placeholder in the SQL statement that was used to prepare the statement.
     *
     * @param mixed $param          Parameter identifier. For a prepared statement using named placeholders,
     *                              this will be a parameter name of the form :name. For a prepared statement
     *                              using question mark placeholders, this will be the 1-indexed position of the parameter
     *
     * @param mixed $value          The value to bind to the parameter.
     * @param integer $type         Explicit data type for the parameter using the PDO::PARAM_* constants.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * Binds a PHP variable to a corresponding named or question mark placeholder in the 
     * SQL statement that was use to prepare the statement. Unlike PDOStatement->bindValue(),
     * the variable is bound as a reference and will only be evaluated at the time 
     * that PDOStatement->execute() is called.
     *
     * Most parameters are input parameters, that is, parameters that are 
     * used in a read-only fashion to build up the query. Some drivers support the invocation 
     * of stored procedures that return data as output parameters, and some also as input/output
     * parameters that both send in data and are updated to receive it.
     *
     * @param mixed $param          Parameter identifier. For a prepared statement using named placeholders,
     *                              this will be a parameter name of the form :name. For a prepared statement
     *                              using question mark placeholders, this will be the 1-indexed position of the parameter
     *
     * @param mixed $variable       Name of the PHP variable to bind to the SQL statement parameter.
     *
     * @param integer $type         Explicit data type for the parameter using the PDO::PARAM_* constants. To return
     *                              an INOUT parameter from a stored procedure, use the bitwise OR operator to set the
     *                              PDO::PARAM_INPUT_OUTPUT bits for the data_type parameter.
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * Closes the cursor, enabling the statement to be executed again.
     *
     * @return boolean              Returns TRUE on success or FALSE on failure.
     */",
 "/** 
     * columnCount
     * Returns the number of columns in the result set 
     *
     * @return integer              Returns the number of columns in the result set represented
     *                              by the PDOStatement object. If there is no result set,
     *                              this method should return 0.
     */",
 "/**
     * errorCode
     * Fetch the SQLSTATE associated with the last operation on the statement handle 
     *
     * @see Doctrine_Adapter_Interface::errorCode()
     * @return string       error code string
     */",
 "/**
     * errorInfo
     * Fetch extended error information associated with the last operation on the statement handle
     *
     * @see Doctrine_Adapter_Interface::errorInfo()
     * @return array        error info array
     */",
 "/**
     * Executes a prepared statement
     *
     * If the prepared statement included parameter markers, you must either:
     * call PDOStatement->bindParam() to bind PHP variables to the parameter markers:
     * bound variables pass their value as input and receive the output value,
     * if any, of their associated parameter markers or pass an array of input-only
     * parameter values
     *
     *
     * @param array $params             An array of values with as many elements as there are
     *                                  bound parameters in the SQL statement being executed.
     * @return boolean                  Returns TRUE on success or FALSE on failure.
     */",
 "/**
     * fetch
     *
     * @see Query::HYDRATE_* constants
     * @param integer $fetchStyle           Controls how the next row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_* constants,
     *                                      defaulting to Query::HYDRATE_BOTH
     *
     * @param integer $cursorOrientation    For a PDOStatement object representing a scrollable cursor, 
     *                                      this value determines which row will be returned to the caller. 
     *                                      This value must be one of the Query::HYDRATE_ORI_* constants, defaulting to
     *                                      Query::HYDRATE_ORI_NEXT. To request a scrollable cursor for your 
     *                                      PDOStatement object,
     *                                      you must set the PDO::ATTR_CURSOR attribute to Doctrine::CURSOR_SCROLL when you
     *                                      prepare the SQL statement with Doctrine_Adapter_Interface->prepare().
     *
     * @param integer $cursorOffset         For a PDOStatement object representing a scrollable cursor for which the
     *                                      $cursorOrientation parameter is set to Query::HYDRATE_ORI_ABS, this value specifies
     *                                      the absolute number of the row in the result set that shall be fetched.
     *                                      
     *                                      For a PDOStatement object representing a scrollable cursor for 
     *                                      which the $cursorOrientation parameter is set to Query::HYDRATE_ORI_REL, this value 
     *                                      specifies the row to fetch relative to the cursor position before 
     *                                      PDOStatement->fetch() was called.
     *
     * @return mixed
     */",
 "/**
     * Returns an array containing all of the result set rows
     *
     * @param integer $fetchStyle           Controls how the next row will be returned to the caller.
     *                                      This value must be one of the Query::HYDRATE_* constants,
     *                                      defaulting to Query::HYDRATE_BOTH
     *
     * @param integer $columnIndex          Returns the indicated 0-indexed column when the value of $fetchStyle is
     *                                      Query::HYDRATE_COLUMN. Defaults to 0.
     *
     * @return array
     */",
 "/**
     * fetchColumn
     * Returns a single column from the next row of a
     * result set or FALSE if there are no more rows.
     *
     * @param integer $columnIndex          0-indexed number of the column you wish to retrieve from the row. If no 
     *                                      value is supplied, PDOStatement->fetchColumn() 
     *                                      fetches the first column.
     *
     * @return string                       returns a single column in the next row of a result set.
     */",
 "/**
     * rowCount
     * rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement 
     * executed by the corresponding object.
     *
     * If the last SQL statement executed by the associated Statement object was a SELECT statement, 
     * some databases may return the number of rows returned by that statement. However, 
     * this behaviour is not guaranteed for all databases and should not be 
     * relied on for portable applications.
     *
     * @return integer                      Returns the number of rows.
     */",
 "/**
 * Statement interface.
 * Drivers must implement this interface.
 * 
 * This resembles (a subset of) the PDOStatement interface.
 * 
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Roman Borschel <roman@code-factory.org>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.org
 * @since       2.0
 * @version     $Revision$
 */",
 "/**
     * Constructor.
     *
     * @param string $path The path to a file
     */",
 "/**
 * A resource is something formulae can be loaded from.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * This interface must be implemented by firewall listeners.
     *
     * @param GetResponseEvent $event
     */",
 "/**
 * Interface that must be implemented by firewall listeners
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Transforms a DateTime object into a timestamp in the configured timezone.
     *
     * @param  DateTime $value  A DateTime object
     *
     * @return integer          A timestamp
     *
     * @throws UnexpectedTypeException if the given value is not an instance of \DateTime
     * @throws TransformationFailedException if the output timezone is not supported
     */",
 "/**
     * Transforms a timestamp in the configured timezone into a DateTime object
     *
     * @param  string $value  A timestamp
     *
     * @return \DateTime      An instance of \DateTime
     *
     * @throws UnexpectedTypeException if the given value is not a timestamp
     * @throws TransformationFailedException if the given timestamp is invalid
     */",
 "/**
 * Transforms between a timestamp and a DateTime object
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 */",
 "/**
 * This exception is thrown if an invalid type is encountered.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @return EntityGenerator
     */",
 "/**
     * @param EntityGenerator $entityGenerator
     */",
 "/**
     * @return ClassMetadataExporter
     */",
 "/**
     * @param ClassMetadataExporter $metadataExporter
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @param \Doctrine\ORM\EntityManager $em
     * @param array $fromPaths
     * @param string $destPath
     * @param string $toType
     * @param int $numSpaces
     * @param string|null $extend
     * @param Console\Output\OutputInterface $output
     */",
 "/**
 * Command to convert a Doctrine 1 schema to a Doctrine 2 mapping file.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Command to generate the SQL needed to update the database schema to match
 * the current mapping information.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Register the error handler.
     *
     * @param integer $level The level at which the conversion to Exception is done (null to use the error_reporting() value and 0 to disable)
     *
     * @return The registered error handler
     */",
 "/**
     * @throws \ErrorException When error_reporting returns error
     */",
 "/**
 * ErrorHandler.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     *
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     * @internal Order of the parameters must be the same as the order of the columns in
     *           _getDeleteRowSql.
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     * @internal Order of the parameters must be the same as the order of the columns in
     *           _getInsertRowSql.
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     * @internal Order of the parameters must be the same as the order of the columns in
     *           _getInsertRowSql.
     */",
 "/**
     * Collects the parameters for inserting/deleting on the join table in the order
     * of the join table columns as specified in ManyToManyMapping#joinTableColumns.
     *
     * @param $coll
     * @param $element
     * @return array
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @override
     * @internal Order of the parameters must be the same as the order of the columns in
     *           _getDeleteSql.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @param PersistentCollection $coll
     * @param int $offset
     * @param int $length
     * @return array
     */",
 "/**
     * @param PersistentCollection $coll
     * @param object $element
     */",
 "/**
 * Persister for many-to-many collections.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Constructor
     *
     * @param string $type          The guessed field type
     * @param array  $options       The options for creating instances of the
     *                              guessed class
     * @param integer $confidence   The confidence that the guessed class name
     *                              is correct
     */",
 "/**
     * Returns the guessed field type
     *
     * @return string
     */",
 "/**
     * Returns the guessed options for creating instances of the guessed type
     *
     * @return array
     */",
 "/**
 * Contains a guessed class name and a list of options for creating an instance
 * of that class
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * @dataProvider getPatterns
     */",
 "/**
     * @dataProvider getPatternsAndEmpty
     */",
 "/**
     * @dataProvider getPaths
     */",
 "/**
     * Constructor.
     *
     * @param array $map A map where keys are classes and values the absolute file path
     */",
 "/**
     * Registers this instance as an autoloader.
     *
     * @param Boolean $prepend Whether to prepend the autoloader or not
     */",
 "/**
*Loadsthegivenclassorinterface.
*
*@paramstring$classThenameoftheclass
*/",
 "/**
*Findsthepathtothefilewheretheclassisdefined.
*
*@paramstring$classThenameoftheclass
*
*@returnstring|nullThepath,iffound
*/",
 "/**
*Aclassloaderthatusesamappingfiletolookuppaths.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * Constructor.
     *
     * @param mixed           $stream    A stream resource
     * @param integer         $verbosity The verbosity level (self::VERBOSITY_QUIET, self::VERBOSITY_NORMAL,
     *                                   self::VERBOSITY_VERBOSE)
     * @param Boolean         $decorated Whether to decorate messages or not (null for auto-guessing)
     * @param OutputFormatter $formatter Output formatter instance
     *
     * @throws \InvalidArgumentException When first argument is not a real stream
     *
     * @api
     */",
 "/**
     * Gets the stream attached to this StreamOutput instance.
     *
     * @return resource A stream resource
     */",
 "/**
     * Writes a message to the output.
     *
     * @param string  $message A message to write to the output
     * @param Boolean $newline Whether to add a newline or not
     *
     * @throws \RuntimeException When unable to write output (should never happen)
     */",
 "/**
*Returnstrueifthestreamsupportscolorization.
*
*Colorizationisdisabledifnotsupportedbythestream:
*
*-windowswithoutansicon
*-nonttyconsoles
*
*@returnBooleantrueifthestreamsupportscolorization,falseotherwise
*/",
 "/**
*StreamOutputwritestheoutputtoagivenstream.
*
*Usage:
*
*$output=newStreamOutput(fopen(\'php://stdout\',\'w\'));
*
*As`StreamOutput`canuseanystream,youcanalsouseafile:
*
*$output=newStreamOutput(fopen(\'/path/to/output.log\',\'a\',false));
*
*@authorFabienPotencier<fabien@symfony.com>
*
*@api
*/",
 "/**
     * @expectedException Symfony\Component\Security\Core\Exception\AuthenticationCredentialsNotFoundException
     */",
 "/**
     * @expectedException Symfony\Component\Security\Core\Exception\AuthenticationException
     */",
 "/**
     * @expectedException Symfony\Component\Security\Core\Exception\AuthenticationException
     */",
 "/**
     * @expectedException Symfony\Component\Security\Core\Exception\AccessDeniedException
     */",
 "/**
     * @expectedException Symfony\Component\Security\Core\Exception\AccessDeniedException
     */",
 "/**
     * @expectedException \RuntimeException
     */",
 "/**
     * Constructor.
     *
     * @param string  $commandline The command line to run
     * @param string  $cwd         The working directory
     * @param array   $env         The environment variables
     * @param string  $stdin       The STDIN content
     * @param integer $timeout     The timeout in seconds
     * @param array   $options     An array of options for proc_open
     *
     * @throws \RuntimeException When proc_open is not installed
     *
     * @api
     */",
 "/**
     * Runs the process.
     *
     * The callback receives the type of output (out or err) and
     * some bytes from the output in real-time. It allows to have feedback
     * from the independent process during execution.
     *
     * The STDOUT and STDERR are also available after the process is finished
     * via the getOutput() and getErrorOutput() methods.
     *
     * @param Closure|string|array $callback A PHP callback to run whenever there is some
     *                                       output available on STDOUT or STDERR
     *
     * @return integer The exit status code
     *
     * @throws \RuntimeException When process can\'t be launch or is stopped
     *
     * @api
     */",
 "/**
     * Returns the output of the process (STDOUT).
     *
     * This only returns the output if you have not supplied a callback
     * to the run() method.
     *
     * @return string The process output
     *
     * @api
     */",
 "/**
     * Returns the error output of the process (STDERR).
     *
     * This only returns the error output if you have not supplied a callback
     * to the run() method.
     *
     * @return string The process error output
     *
     * @api
     */",
 "/**
     * Returns the exit code returned by the process.
     *
     * @return integer The exit status code
     *
     * @api
     */",
 "/**
     * Checks if the process ended successfully.
     *
     * @return Boolean true if the process ended successfully, false otherwise
     *
     * @api
     */",
 "/**
     * Returns true if the child process has been terminated by an uncaught signal.
     *
     * It always returns false on Windows.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Returns the number of the signal that caused the child process to terminate its execution.
     *
     * It is only meaningful if hasBeenSignaled() returns true.
     *
     * @return integer
     *
     * @api
     */",
 "/**
     * Returns true if the child process has been stopped by a signal.
     *
     * It always returns false on Windows.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Returns the number of the signal that caused the child process to stop its execution
     *
     * It is only meaningful if hasBeenStopped() returns true.
     *
     * @return integer
     *
     * @api
     */",
 "/**
 * Process is a thin wrapper around proc_* functions to ease
 * start independent PHP processes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Create a new ArrayLogger with a maximum of $size entries.
   * @var int $size
   */",
 "/**
   * Add a log entry.
   * @param string $entry
   */",
 "/**
   * Clear the log contents.
   */",
 "/**
   * Get this log as a string.
   * @return string
   */",
 "/**
 * Logs to an Array backend.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Collects data for the given Request and Response.
     *
     * @param Request    $request   A Request instance
     * @param Response   $response  A Response instance
     * @param \Exception $exception An Exception instance
     *
     * @api
     */",
 "/**
     * Returns the name of the collector.
     *
     * @return string The collector name
     *
     * @api
     */",
 "/**
 * DataCollectorInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     */",
 "/**
     * Starts the session.
     *
     * @api
     */",
 "/**
     * Returns the session ID
     *
     * @return mixed  The session ID
     *
     * @throws \RuntimeException If the session was not started yet
     *
     * @api
     */",
 "/**
     * Reads data from this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param string $key     A unique key identifying your data
     * @param string $default The default value
     *
     * @return mixed Data associated with the key
     *
     * @throws \RuntimeException If an error occurs while reading data from this storage
     *
     * @api
     */",
 "/**
     * Removes data from this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param  string $key  A unique key identifying your data
     *
     * @return mixed Data associated with the key
     *
     * @throws \RuntimeException If an error occurs while removing data from this storage
     *
     * @api
     */",
 "/**
     * Writes data to this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param  string $key   A unique key identifying your data
     * @param  mixed  $data  Data associated with your key
     *
     * @throws \RuntimeException If an error occurs while writing to this storage
     *
     * @api
     */",
 "/**
     * Regenerates id that represents this storage.
     *
     * @param  Boolean $destroy Destroy session when regenerating?
     *
     * @return Boolean True if session regenerated, false if error
     *
     * @throws \RuntimeException If an error occurs while regenerating this storage
     *
     * @api
     */",
 "/**
 * FilesystemSessionStorage simulates sessions for functional tests.
 *
 * This storage does not start the session (session_start())
 * as it is not \"available\" when running tests on the command line.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Sets the owning Serializer object
     *
     * @param SerializerInterface $serializer
     */",
 "/**
 * Defines the interface of encoders
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * This is a lazy-loading firewall map implementation
 *
 * Listeners will only be initialized if we really need them.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Sets the class metadata factory used in the new validator
     *
     * @param ClassMetadataFactoryInterface $classMetadataFactory The factory instance
     */",
 "/**
     * Sets the constraint validator factory used in the new validator
     *
     * @param ConstraintValidatorFactoryInterface $constraintValidatorFactory The factory instance
     */",
 "/**
     * Creates a new validator with the settings stored in this context
     *
     * @return ValidatorInterface   The new validator
     */",
 "/**
 * Stores settings for creating a new validator and creates validators
 *
 * The methods in this class are chainable, i.e. they return the context
 * object itself. When you have finished configuring the new validator, call
 * getValidator() to create the it.
 *
 * <code>
 * $validator = $context
 *     ->setClassMetadataFactory($customFactory)
 *     ->getValidator();
 * </code>
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Returns a list of functions to add to the existing list.
     *
     * @return array An array of functions
     */",
 "/**
     * Returns the public path of an asset.
     *
     * Absolute paths (i.e. http://...) are returned unmodified.
     *
     * @param string $path        A public path
     * @param string $packageName The name of the asset package to use
     *
     * @return string A public path which takes into account the base path and URL path
     */",
 "/**
     * Returns the version of the assets in a package.
     *
     * @param string $packageName
     *
     * @return int
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * Twig extension for Symfony assets helper
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param Connection $connection Doctrine Database Connection
     */",
 "/**
     * Retrieves Doctrine ORM EntityManager
     *
     * @return EntityManager
     */",
 "/**
     * @see Helper
     */",
 "/**
 * Doctrine CLI Connection Helper.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Checks if the cache has a value for a key.
     *
     * @param string $key A unique key
     *
     * @return Boolean Whether the cache has a value for this key
     */",
 "/**
     * Returns the value for a key.
     *
     * @param string $key A unique key
     *
     * @return string|null The value in the cache
     */",
 "/**
     * Sets a value in the cache.
     *
     * @param string $key   A unique key
     * @param string $value The value to cache
     */",
 "/**
     * Removes a value from the cache.
     *
     * @param string $key A unique key
     */",
 "/**
 * Interface for a cache backend.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Thrown when a Database to Doctrine Type Conversion fails.
     * 
     * @param  string $value
     * @param  string $toType
     * @return ConversionException
     */",
 "/**
     * Thrown when a Database to Doctrine Type Conversion fails and we can make a statement
     * about the expected format.
     * 
     * @param  string $value
     * @param  string $toType
     * @return ConversionException
     */",
 "/**
     * Initializes an object just before validation.
     *
     * @param object $object The object to validate
     *
     * @api
     */",
 "/**
 * Interface for object initializers.
 *
 * Concrete implementations of this interface are used by the GraphWalker
 * to initialize objects just before validating them/
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns a type by name.
     *
     * @param string $name The name of the type
     *
     * @return FormTypeInterface The type
     *
     * @throws FormException if the given type is not supported by this extension
     */",
 "/**
     * Returns whether the given type is supported.
     *
     * @param string $name The name of the type
     *
     * @return Boolean Whether the type is supported by this extension
     */",
 "/**
     * Returns the extensions for the given type.
     *
     * @param string $name The name of the type
     *
     * @return array An array of extensions as FormTypeExtensionInterface instances
     */",
 "/**
     * Returns whether this extension provides type extensions for the given type.
     *
     * @param string $name The name of the type
     *
     * @return Boolean Whether the given type has extensions
     */",
 "/**
     * Returns the type guesser provided by this extension.
     *
     * @return FormTypeGuesserInterface|null The type guesser
     */",
 "/**
     * Registers the types.
     *
     * @return array An array of FormTypeInterface instances
     */",
 "/**
     * Registers the type extensions.
     *
     * @return array An array of FormTypeExtensionInterface instances
     */",
 "/**
     * Registers the type guesser.
     *
     * @return FormTypeGuesserInterface|null A type guesser
     */",
 "/**
     * Initializes the types.
     *
     * @throws UnexpectedTypeException if any registered type is not an instance of FormTypeInterface
     */",
 "/**
     * Initializes the type extensions.
     *
     * @throws UnexpectedTypeException if any registered type extension is not
     *                                 an instance of FormTypeExtensionInterface
     */",
 "/**
     * Initializes the type guesser.
     *
     * @throws UnexpectedTypeException if the type guesser is not an instance of FormTypeGuesserInterface
     */",
 "/**
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Adds a Response.
     *
     * @param Response $response
     */",
 "/**
     * Updates the Response HTTP headers based on the embedded Responses.
     *
     * @param Response $response
     */",
 "/**
 * EsiResponseCacheStrategy knows how to compute the Response cache HTTP header
 * based on the different ESI response cache headers.
 *
 * This implementation changes the master response TTL to the smallest TTL received
 * or force validation if one of the ESI has validation cache strategy.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * An interface that must be implemented by nodes which can have children
 *
 * @author Victor Berchet <victor@suumit.com>
 */",
 "/**
 * Serves assets.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * @see Symfony\Component\HttpKernel\Log\DebugLoggerInterface
     */",
 "/**
     * @see Symfony\Component\HttpKernel\Log\DebugLoggerInterface
     */",
 "/**
     * Returns a DebugLoggerInterface instance if one is registered with this logger.
     *
     * @return DebugLoggerInterface A DebugLoggerInterface instance or null if none is registered
     */",
 "/**
 * Logger.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param \Twig_Environment           $environment A \Twig_Environment instance
     * @param TemplateNameParserInterface $parser      A TemplateNameParserInterface instance
     * @param GlobalVariables|null        $globals     A GlobalVariables instance or null
     */",
 "/**
     * Renders a template.
     *
     * @param mixed $name       A template name
     * @param array $parameters An array of parameters to pass to the template
     *
     * @return string The evaluated template as a string
     *
     * @throws \InvalidArgumentException if the template does not exist
     * @throws \RuntimeException         if the template cannot be rendered
     */",
 "/**
     * Returns true if the template exists.
     *
     * @param mixed $name A template name
     *
     * @return Boolean true if the template exists, false otherwise
     */",
 "/**
     * Returns true if this class is able to render the given template.
     *
     * @param string $name A template name
     *
     * @return Boolean True if this class supports the given resource, false otherwise
     */",
 "/**
     * Renders a view and returns a Response.
     *
     * @param string   $view       The view name
     * @param array    $parameters An array of parameters to pass to the view
     * @param Response $response   A Response instance
     *
     * @return Response A Response instance
     */",
 "/**
     * Loads the given template.
     *
     * @param mixed $name A template name or an instance of Twig_Template
     *
     * @return \Twig_TemplateInterface A \Twig_TemplateInterface instance
     *
     * @throws \InvalidArgumentException if the template does not exist
     */",
 "/**
 * This engine knows how to render Twig templates.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * InsufficientAuthenticationException is thrown if the user credentials are not sufficiently trusted.
 *
 * This is the case when a user is anonymous and the resource to be displayed has an access role.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @see Command
     */",
 "/**
     * @see Command
     */",
 "/**
     * Renders detailed service information about one service
     */",
 "/**
     * Loads the ContainerBuilder from the cache.
     *
     * @return ContainerBuilder
     */",
 "/**
     * Given an array of service IDs, this returns the array of corresponding
     * Definition and Alias objects that those ids represent.
     *
     * @param string $serviceId The service id to resolve
     *
     * @return \Symfony\Component\DependencyInjection\Definition|\Symfony\Component\DependencyInjection\Alias
     */",
 "/**
 * A console command for retrieving information about services
 *
 * @author Ryan Weaver <ryan@thatsquality.com>
 */",
 "/**
 * All invocations of secure methods will go through this class.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Instantiate a Node
     *
     * @return ScalarNode The node
     */",
 "/**
 * This class provides a fluent interface for defining a node.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @see Command
     */",
 "/**
     * @see Command
     */",
 "/**
 * Installs the tables required by the ACL system
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $root The path to the cache directory
     */",
 "/**
     * Cleanups storage.
     */",
 "/**
     * Locks the cache for a given Request.
     *
     * @param Request $request A Request instance
     *
     * @return Boolean|string true if the lock is acquired, the path to the current lock otherwise
     */",
 "/**
     * Releases the lock for the given Request.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Locates a cached Response for the Request provided.
     *
     * @param Request $request A Request instance
     *
     * @return Response|null A Response instance, or null if no cache entry was found
     */",
 "/**
     * Writes a cache entry to the store for the given Request and Response.
     *
     * Existing entries are read and any that match the response are removed. This
     * method calls write with the new list of cache entries.
     *
     * @param Request  $request  A Request instance
     * @param Response $response A Response instance
     *
     * @return string The key under which the response is stored
     */",
 "/**
     * Invalidates all cache entries that match the request.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Determines whether two Request HTTP header sets are non-varying based on
     * the vary response header value provided.
     *
     * @param string $vary A Response vary header
     * @param array  $env1 A Request HTTP header array
     * @param array  $env2 A Request HTTP header array
     *
     * @return Boolean true if the the two environments match, false otherwise
     */",
 "/**
     * Gets all data associated with the given key.
     *
     * Use this method only if you know what you are doing.
     *
     * @param string $key The store key
     *
     * @return array An array of data associated with the key
     */",
 "/**
     * Purges data for the given URL.
     *
     * @param string $url A URL
     *
     * @return Boolean true if the URL exists and has been purged, false otherwise
     */",
 "/**
     * Loads data for the given key.
     *
     * @param string $key  The store key
     *
     * @return string The data associated with the key
     */",
 "/**
     * Save data for the given key.
     *
     * @param string $key  The store key
     * @param string $data The data to store
     */",
 "/**
     * Returns a cache key for the given Request.
     *
     * @param Request $request A Request instance
     *
     * @return string A key for the given Request
     */",
 "/**
     * Persists the Request HTTP headers.
     *
     * @param Request $request A Request instance
     *
     * @return array An array of HTTP headers
     */",
 "/**
     * Persists the Response HTTP headers.
     *
     * @param Response $response A Response instance
     *
     * @return array An array of HTTP headers
     */",
 "/**
     * Restores a Response from the HTTP headers and body.
     *
     * @param array  $headers An array of HTTP headers for the Response
     * @param string $body    The Response body
     */",
 "/**
 * Store implements all the logic for storing cache metadata (Request and Response headers).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new TransportExceptionEvent for $transport.
   * @param Swift_Transport $transport
   * @param Swift_TransportException $ex
   */",
 "/**
   * Get the TransportException thrown.
   * @return Swift_TransportException
   */",
 "/**
 * Generated when a TransportException is thrown from the Transport system.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
 * This voter adds a special role \"IDDQD\" which effectively bypasses any,
 * and all security checks.
 *
 * Most of the time, you will want to use this rule in combination with a
 * @RunAs annotation to disable security checks for the invocation of a
 * specific method.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Create a new EventDispatcher.
   */",
 "/**
   * Create a new SendEvent for $source and $message.
   * 
   * @param Swift_Transport $source
   * @param Swift_Mime_Message
   * @return Swift_Events_SendEvent
   */",
 "/**
   * Create a new CommandEvent for $source and $command.
   * 
   * @param Swift_Transport $source
   * @param string $command That will be executed
   * @param array $successCodes That are needed
   * @return Swift_Events_CommandEvent
   */",
 "/**
   * Create a new ResponseEvent for $source and $response.
   * 
   * @param Swift_Transport $source
   * @param string $response
   * @param boolean $valid If the response is valid
   * @return Swift_Events_ResponseEvent
   */",
 "/**
   * Create a new TransportChangeEvent for $source.
   * 
   * @param Swift_Transport $source
   * @return Swift_Events_TransportChangeEvent
   */",
 "/**
   * Create a new TransportExceptionEvent for $source.
   * 
   * @param Swift_Transport $source
   * @param Swift_TransportException $ex
   * @return Swift_Events_TransportExceptionEvent
   */",
 "/**
   * Bind an event listener to this dispatcher.
   * 
   * @param Swift_Events_EventListener $listener
   */",
 "/**
   * Dispatch the given Event to all suitable listeners.
   * 
   * @param Swift_Events_EventObject $evt
   * @param string $target method
   */",
 "/** Queue listeners on a stack ready for $evt to be bubbled up it */",
 "/** Bubble $evt up the stack calling $target() on each listener */",
 "/**
 * The EventDispatcher which handles the event dispatching layer.
 * 
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Gets the template parameters.
     *
     * @return array An array of parameters
     *
     * @api
     */",
 "/**
     * Sets a template parameter.
     *
     * @param string $name   The parameter name
     * @param string $value  The parameter value
     *
     * @return TemplateReferenceInterface The TemplateReferenceInterface instance
     *
     * @throws  \InvalidArgumentException if the parameter is not defined
     *
     * @api
     */",
 "/**
     * Gets a template parameter.
     *
     * @param string $name The parameter name
     *
     * @return string The parameter value
     *
     * @throws  \InvalidArgumentException if the parameter is not defined
     *
     * @api
     */",
 "/**
     * Returns the path to the template.
     *
     * By default, it just returns the template name.
     *
     * @return string A path to the template or a resource
     *
     * @api
     */",
 "/**
     * Returns the \"logical\" template name.
     *
     * The template name acts as a unique identifier for the template.
     *
     * @return string The template name
     *
     * @api
     */",
 "/**
 * Interface to be implemented by all templates.
 *
 * @author Victor Berchet <victor@suumit.com>
 *
 * @api
 */",
 "/**
     * Dispatches an event to all registered listeners.
     *
     * @param string $eventName The name of the event to dispatch. The name of the event is
     *                          the name of the method that is invoked on listeners.
     * @param EventArgs $eventArgs The event arguments to pass to the event handlers/listeners.
     *                             If not supplied, the single empty EventArgs instance is used.
     * @return boolean
     */",
 "/**
     * Gets the listeners of a specific event or all listeners.
     *
     * @param string $event The name of the event.
     * @return array The event listeners for the specified event, or all event listeners.
     */",
 "/**
     * Checks whether an event has any registered listeners.
     *
     * @param string $event
     * @return boolean TRUE if the specified event has any listeners, FALSE otherwise.
     */",
 "/**
     * Adds an event listener that listens on the specified events.
     *
     * @param string|array $events The event(s) to listen on.
     * @param object $listener The listener object.
     */",
 "/**
     * Removes an event listener from the specified events.
     *
     * @param string|array $events
     * @param object $listener
     */",
 "/**
     * Adds an EventSubscriber. The subscriber is asked for all the events he is
     * interested in and added as a listener for these events.
     * 
     * @param Doctrine\Common\EventSubscriber $subscriber The subscriber.
     */",
 "/**
 * The EventManager is the central point of Doctrine\'s event listener system.
 * Listeners are registered on the manager and events are dispatched through the
 * manager.
 * 
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @throws ConversionException
     * @param string $value
     * @param AbstractPlatform $platform
     * @return DateTime
     */",
 "/**
 * Variable DateTime Type using date_create() instead of DateTime::createFromFormat()
 *
 * This type has performance implications as it runs twice as long as the regular
 * {@see DateTimeType}, however in certain PostgreSQL configurations with
 * TIMESTAMP(n) columns where n > 0 it is necessary to use this type.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Encode $in to $out.
   * @param Swift_OutputByteStream $os to read from
   * @param Swift_InputByteStream $is to write to
   * @param int $firstLineOffset
   * @param int $maxLineLength - 0 indicates the default length for this encoding
   */",
 "/**
   * Get the MIME name of this content encoding scheme.
   * @return string
   */",
 "/**
 * Interface for all Transfer Encoding schemes.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Initializes a new <tt>BasicEntityPersister</tt> that uses the given EntityManager
     * and persists instances of the class described by the given ClassMetadata descriptor.
     *
     * @param \Doctrine\ORM\EntityManager $em
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
     * @return \Doctrine\ORM\Mapping\ClassMetadata
     */",
 "/**
     * Adds an entity to the queued insertions.
     * The entity remains queued until {@link executeInserts} is invoked.
     *
     * @param object $entity The entity to queue for insertion.
     */",
 "/**
     * Executes all queued entity insertions and returns any generated post-insert
     * identifiers that were created as a result of the insertions.
     *
     * If no inserts are queued, invoking this method is a NOOP.
     *
     * @return array An array of any generated post-insert IDs. This will be an empty array
     *               if the entity class does not use the IDENTITY generation strategy.
     */",
 "/**
     * Retrieves the default version value which was created
     * by the preceding INSERT statement and assigns it back in to the
     * entities version field.
     *
     * @param object $entity
     * @param mixed $id
     */",
 "/**
     * Fetch the current version value of a versioned entity.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $versionedClass
     * @param mixed $id
     * @return mixed
     */",
 "/**
     * Updates a managed entity. The entity is updated according to its current changeset
     * in the running UnitOfWork. If there is no changeset, nothing is updated.
     *
     * The data to update is retrieved through {@link _prepareUpdateData}.
     * Subclasses that override this method are supposed to obtain the update data
     * in the same way, through {@link _prepareUpdateData}.
     *
     * Subclasses are also supposed to take care of versioning when overriding this method,
     * if necessary. The {@link _updateTable} method can be used to apply the data retrieved
     * from {@_prepareUpdateData} on the target tables, thereby optionally applying versioning.
     *
     * @param object $entity The entity to update.
     */",
 "/**
     * Performs an UPDATE statement for an entity on a specific table.
     * The UPDATE can optionally be versioned, which requires the entity to have a version field.
     *
     * @param object $entity The entity object being updated.
     * @param string $quotedTableName The quoted name of the table to apply the UPDATE on.
     * @param array $updateData The map of columns to update (column => value).
     * @param boolean $versioned Whether the UPDATE should be versioned.
     */",
 "/**
     * @todo Add check for platform if it supports foreign keys/cascading.
     * @param array $identifier
     * @return void
     */",
 "/**
     * Deletes a managed entity.
     *
     * The entity to delete must be managed and have a persistent identifier.
     * The deletion happens instantaneously.
     *
     * Subclasses may override this method to customize the semantics of entity deletion.
     *
     * @param object $entity The entity to delete.
     */",
 "/**
     * Prepares the changeset of an entity for database insertion (UPDATE).
     *
     * The changeset is obtained from the currently running UnitOfWork.
     *
     * During this preparation the array that is passed as the second parameter is filled with
     * <columnName> => <value> pairs, grouped by table name.
     *
     * Example:
     * <code>
     * array(
     *    \'foo_table\' => array(\'column1\' => \'value1\', \'column2\' => \'value2\', ...),
     *    \'bar_table\' => array(\'columnX\' => \'valueX\', \'columnY\' => \'valueY\', ...),
     *    ...
     * )
     * </code>
     *
     * @param object $entity The entity for which to prepare the data.
     * @return array The prepared data.
     */",
 "/**
     * Prepares the data changeset of a managed entity for database insertion (initial INSERT).
     * The changeset of the entity is obtained from the currently running UnitOfWork.
     *
     * The default insert data preparation is the same as for updates.
     *
     * @param object $entity The entity for which to prepare the data.
     * @return array The prepared data for the tables to update.
     * @see _prepareUpdateData
     */",
 "/**
     * Gets the name of the table that owns the column the given field is mapped to.
     *
     * The default implementation in BasicEntityPersister always returns the name
     * of the table the entity type of this persister is mapped to, since an entity
     * is always persisted to a single table with a BasicEntityPersister.
     *
     * @param string $fieldName The field name.
     * @return string The table name.
     */",
 "/**
     * Loads an entity by a list of field criteria.
     *
     * @param array $criteria The criteria by which to load the entity.
     * @param object $entity The entity to load the data into. If not specified,
     *        a new entity is created.
     * @param $assoc The association that connects the entity to load to another entity, if any.
     * @param array $hints Hints for entity creation.
     * @param int $lockMode
     * @return object The loaded and managed entity instance or NULL if the entity can not be found.
     * @todo Check identity map? loadById method? Try to guess whether $criteria is the id?
     */",
 "/**
     * Loads an entity of this persister\'s mapped class as part of a single-valued
     * association from another entity.
     *
     * @param array $assoc The association to load.
     * @param object $sourceEntity The entity that owns the association (not necessarily the \"owning side\").
     * @param array $identifier The identifier of the entity to load. Must be provided if
     *                          the association to load represents the owning side, otherwise
     *                          the identifier is derived from the $sourceEntity.
     * @return object The loaded and managed entity instance or NULL if the entity can not be found.
     */",
 "/**
     * Refreshes a managed entity.
     *
     * @param array $id The identifier of the entity as an associative array from
     *                  column or field names to values.
     * @param object $entity The entity to refresh.
     */",
 "/**
     * Loads a list of entities by a list of field criteria.
     *
     * @param array $criteria
     * @param array $orderBy
     * @param int $limit
     * @param int $offset
     * @return array
     */",
 "/**
     * Get (sliced or full) elements of the given collection.
     *
     * @param array $assoc
     * @param object $sourceEntity
     * @param int|null $offset
     * @param int|null $limit
     * @return array
     */",
 "/**
     * Load an array of entities from a given dbal statement.
     *
     * @param array $assoc
     * @param \Doctrine\DBAL\Statement $stmt
     * @return array
     */",
 "/**
     * Hydrate a collection from a given dbal statement.
     *
     * @param array $assoc
     * @param \Doctrine\DBAL\Statement $stmt
     * @param PersistentCollection $coll
     */",
 "/**
     * Loads a collection of entities of a many-to-many association.
     *
     * @param ManyToManyMapping $assoc The association mapping of the association being loaded.
     * @param object $sourceEntity The entity that owns the collection.
     * @param PersistentCollection $coll The collection to fill.
     * @param int|null $offset
     * @param int|null $limit
     * @return array
     */",
 "/**
     * Gets the SELECT SQL to select one or more entities by a set of field criteria.
     *
     * @param array $criteria
     * @param AssociationMapping $assoc
     * @param string $orderBy
     * @param int $lockMode
     * @param int $limit
     * @param int $offset
     * @param array $orderBy
     * @return string
     * @todo Refactor: _getSelectSQL(...)
     */",
 "/**
     * Gets the ORDER BY SQL snippet for ordered collections.
     *
     * @param array $orderBy
     * @param string $baseTableAlias
     * @return string
     */",
 "/**
     * Gets the SQL fragment with the list of columns to select when querying for
     * an entity in this persister.
     *
     * Subclasses should override this method to alter or change the select column
     * list SQL fragment. Note that in the implementation of BasicEntityPersister
     * the resulting SQL fragment is generated only once and cached in {@link _selectColumnListSql}.
     * Subclasses may or may not do the same.
     *
     * @return string The SQL fragment.
     * @todo Rename: _getSelectColumnsSQL()
     */",
 "/**
     * Gets the SQL join fragment used when selecting entities from a
     * many-to-many association.
     *
     * @param ManyToManyMapping $manyToMany
     * @return string
     */",
 "/**
     * Gets the INSERT SQL used by the persister to persist a new entity.
     *
     * @return string
     */",
 "/**
     * Gets the list of columns to put in the INSERT SQL statement.
     *
     * Subclasses should override this method to alter or change the list of
     * columns placed in the INSERT statements used by the persister.
     *
     * @return array The list of columns.
     */",
 "/**
     * Gets the SQL snippet of a qualified column name for the given field name.
     *
     * @param string $field The field name.
     * @param ClassMetadata $class The class that declares this field. The table this class is
     *                             mapped to must own the column for the given field.
     * @param string $alias
     */",
 "/**
     * Gets the SQL table alias for the given class name.
     *
     * @param string $className
     * @return string The SQL table alias.
     * @todo Reconsider. Binding table aliases to class names is not such a good idea.
     */",
 "/**
     * Lock all rows of this entity matching the given criteria with the specified pessimistic lock mode
     *
     * @param array $criteria
     * @param int $lockMode
     * @return void
     */",
 "/**
     * Get the FROM and optionally JOIN conditions to lock the entity managed by this persister.
     *
     * @return string
     */",
 "/**
     * Gets the conditional SQL fragment used in the WHERE clause when selecting
     * entities in this persister.
     *
     * Subclasses are supposed to override this method if they intend to change
     * or alter the criteria by which entities are selected.
     *
     * @param array $criteria
     * @param AssociationMapping $assoc
     * @return string
     */",
 "/**
     * Return an array with (sliced or full list) of elements in the specified collection.
     *
     * @param array $assoc
     * @param object $sourceEntity
     * @param int $offset
     * @param int $limit
     * @return array
     */",
 "/**
     * Loads a collection of entities in a one-to-many association.
     *
     * @param array $assoc
     * @param object $sourceEntity
     * @param PersistentCollection $coll The collection to load/fill.
     * @param int|null $offset
     * @param int|null $limit
     */",
 "/**
     * Build criteria and execute SQL statement to fetch the one to many entities from.
     *
     * @param array $assoc
     * @param object $sourceEntity
     * @param int|null $offset
     * @param int|null $limit
     * @return \Doctrine\DBAL\Statement
     */",
 "/**
     * Expand the parameters from the given criteria and use the correct binding types if found.
     *
     * @param  array $criteria
     * @return array
     */",
 "/**
     * Checks whether the given managed entity exists in the database.
     *
     * @param object $entity
     * @return boolean TRUE if the entity exists in the database, FALSE otherwise.
     */",
 "/**
 * A BasicEntityPersiter maps an entity to a single table in a relational database.
 *
 * A persister is always responsible for a single entity type.
 *
 * EntityPersisters are used during a UnitOfWork to apply any changes to the persistent
 * state of entities onto a relational database when the UnitOfWork is committed,
 * as well as for basic querying of entities and their associations (not DQL).
 *
 * The persisting operations that are invoked during a commit of a UnitOfWork to
 * persist the persistent entity state are:
 *
 *   - {@link addInsert} : To schedule an entity for insertion.
 *   - {@link executeInserts} : To execute all scheduled insertions.
 *   - {@link update} : To update the persistent state of an entity.
 *   - {@link delete} : To delete the persistent state of an entity.
 *
 * As can be seen from the above list, insertions are batched and executed all at once
 * for increased efficiency.
 *
 * The querying operations invoked during a UnitOfWork, either through direct find
 * requests or lazy-loading, are the following:
 *
 *   - {@link load} : Loads (the state of) a single, managed entity.
 *   - {@link loadAll} : Loads multiple, managed entities.
 *   - {@link loadOneToOneEntity} : Loads a one/many-to-one entity association (lazy-loading).
 *   - {@link loadOneToManyCollection} : Loads a one-to-many entity association (lazy-loading).
 *   - {@link loadManyToManyCollection} : Loads a many-to-many entity association (lazy-loading).
 *
 * The BasicEntityPersister implementation provides the default behavior for
 * persisting and querying entities that are mapped to a single database table.
 *
 * Subclasses can be created to provide custom persisting and querying strategies,
 * i.e. spanning multiple tables.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Giorgio Sironi <piccoloprincipeazzurro@gmail.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 */",
 "/**
   * Get the Transport.
   * @return Swift_Transport
   */",
 "/**
 * Generated when the state of a Transport is changed (i.e. stopped/started).
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Adds a listener that wants to be notified about property changes.
     *
     * @param PropertyChangedListener $listener
     */",
 "/**
 * Contract for classes that provide the service of notifying listeners of
 * changes to their properties.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param FileLocator           $locator A FileLocator instance
     * @param AnnotationClassLoader $loader  An AnnotationClassLoader instance
     * @param string|array          $paths   A path or an array of paths where to look for resources
     */",
 "/**
     * Loads from annotations from a file.
     *
     * @param string $file A PHP file path
     * @param string $type The resource type
     *
     * @return RouteCollection A RouteCollection instance
     *
     * @throws \InvalidArgumentException When the file does not exist or its routes cannot be parsed
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean True if this class supports the given resource, false otherwise
     */",
 "/**
*Returnsthefullclassnameforthefirstclassinthefile.
*
*@paramstring$fileAPHPfilepath
*
*@returnstring|falseFullclassnameiffound,falseotherwise
*/",
 "/**
*AnnotationFileLoaderloadsroutinginformationfromannotationsset
*onaPHPclassanditsmethods.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * Constructor.
     *
     * @param string          $pattern A regex for checking the asset\'s target URL
     * @param FilterInterface $filter  A filter to apply if the regex matches
     * @param integer         $flags   Flags for what to check
     */",
 "/**
 * Applies a filter to an asset based on a source and/or target path match.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 * @todo A better asset-matcher mechanism
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Compares two hashes using a constant-time algorithm to avoid (remote)
     * timing attacks.
     *
     * This is the same implementation as used in the BasePasswordEncoder.
     *
     * @param string $hash1 The first hash
     * @param string $hash2 The second hash
     *
     * @return Boolean true if the two hashes are the same, false otherwise
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Generates the cookie value.
     *
     * @param string  $class
     * @param string  $username The username
     * @param integer $expires  The unixtime when the cookie expires
     * @param string  $password The encoded password
     *
     * @throws \RuntimeException if username contains invalid chars
     *
     * @return string
     */",
 "/**
     * Generates a hash for the cookie to ensure it is not being tempered with
     *
     * @param string $class
     * @param string $username The username
     * @param integer $expires The unixtime when the cookie expires
     * @param string $password The encoded password
     *
     * @throws \RuntimeException when the private key is empty
     *
     * @return string
     */",
 "/**
 * Concrete implementation of the RememberMeServicesInterface providing
 * remember-me capabilities without requiring a TokenProvider.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param \Closure $transform           The forward transform callback
     * @param \Closure $reverseTransform    The reverse transform callback
     */",
 "/**
     * Transforms a value from the original representation to a transformed representation.
     *
     * @param  mixed $data               The value in the original representation
     *
     * @return mixed                     The value in the transformed representation
     *
     * @throws UnexpectedTypeException   when the argument is not a string
     * @throws TransformationFailedException  when the transformation fails
     */",
 "/**
     * Transforms a value from the transformed representation to its original
     * representation.
     *
     * @param  mixed $data               The value in the transformed representation
     *
     * @return mixed                     The value in the original representation
     *
     * @throws UnexpectedTypeException   when the argument is not of the expected type
     * @throws TransformationFailedException  when the transformation fails
     */",
 "/**
 * NullIfExpression ::= \"NULLIF\" \"(\" ScalarExpression \",\" ScalarExpression \")\"
 *
 * @since   2.1
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @dataProvider getPortData
     */",
 "/**
     * @param string $uri
     *
     * @return GetResponseEvent
     */",
 "/**
     * @SecureReturn(permissions=\"VIEW,UNDELETE\")
     */",
 "/**
     * @SecureParam(name=\"secure\", permissions=\"OWNER\")
     * @SecureParam(name=\"foo\", permissions=\"MASTER, EDIT\")
     */",
 "/**
     * @Secure(roles=\"ROLE_FOO, IS_AUTHENTICATED_FULLY\")
     * @SecureParam(name=\"secure\", permissions=\"FOO\")
     * @SecureReturn(permissions=\"WOW\")
     */",
 "/**
 * Type that maps a database SMALLINT to a PHP integer.
 *
 * @author robo
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Marks a section of a template as being reusable.
 *
 * <pre>
 *  {% block head %}
 *    <link rel=\"stylesheet\" href=\"style.css\" />
 *    <title>{% block title %}{% endblock %} - My Webpage</title>
 *  {% endblock %}
 * </pre>
 */",
 "/**
*DumpsasetofApachemod_rewriterules.
*
*Availableoptions:
*
**script_name:Thescriptname(app.phpbydefault)
**base_uri:ThebaseURI(\"\" by default)
     *
     * @param array $options An array of options
     *
     * @return string A string to be used as Apache rewrite rules
     */",
 "/**
 * Dumps a set of Apache mod_rewrite rules.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * @see Command
     */",
 "/**
*@seeCommand
*
*@throws\InvalidArgumentExceptionWhennamespacedoesn\'tendwithBundle
*@throws\RuntimeExceptionWhenbundlecan\'tbeexecuted
*/",
 "/**
 * Generates bundles.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Constructor.
     *
     * Available options:
     *
     *  * compiler_class: A class name able to compile this route instance (RouteCompiler by default)
     *
     * @param string $pattern       The pattern to match
     * @param array  $defaults      An array of default parameter values
     * @param array  $requirements  An array of requirements for parameters (regexes)
     * @param array  $options       An array of options
     *
     * @api
     */",
 "/**
     * Returns the pattern.
     *
     * @return string The pattern
     */",
 "/**
     * Sets the pattern.
     *
     * This method implements a fluent interface.
     *
     * @param string $pattern The pattern
     *
     * @return Route The current Route instance
     */",
 "/**
     * Returns the options.
     *
     * @return array The options
     */",
 "/**
     * Sets the options.
     *
     * This method implements a fluent interface.
     *
     * @param array $options The options
     *
     * @return Route The current Route instance
     */",
 "/**
     * Sets an option value.
     *
     * This method implements a fluent interface.
     *
     * @param string $name  An option name
     * @param mixed  $value The option value
     *
     * @return Route The current Route instance
     *
     * @api
     */",
 "/**
     * Get an option value.
     *
     * @param string $name An option name
     *
     * @return mixed The option value
     */",
 "/**
     * Returns the defaults.
     *
     * @return array The defaults
     */",
 "/**
     * Sets the defaults.
     *
     * This method implements a fluent interface.
     *
     * @param array $defaults The defaults
     *
     * @return Route The current Route instance
     */",
 "/**
     * Gets a default value.
     *
     * @param string $name A variable name
     *
     * @return mixed The default value
     */",
 "/**
     * Checks if a default value is set for the given variable.
     *
     * @param string $name A variable name
     *
     * @return Boolean true if the default value is set, false otherwise
     */",
 "/**
     * Sets a default value.
     *
     * @param string $name    A variable name
     * @param mixed  $default The default value
     *
     * @return Route The current Route instance
     *
     * @api
     */",
 "/**
     * Returns the requirements.
     *
     * @return array The requirements
     */",
 "/**
     * Sets the requirements.
     *
     * This method implements a fluent interface.
     *
     * @param array $requirements The requirements
     *
     * @return Route The current Route instance
     */",
 "/**
     * Returns the requirement for the given key.
     *
     * @param string $key The key
     *
     * @return string The regex
     */",
 "/**
     * Sets a requirement for the given key.
     *
     * @param string $key The key
     * @param string $regex The regex
     *
     * @return Route The current Route instance
     *
     * @api
     */",
 "/**
     * Compiles the route.
     *
     * @return CompiledRoute A CompiledRoute instance
     */",
 "/**
 * A Route describes a route and its parameters.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Marks a section of a template as untrusted code that must be evaluated in the sandbox mode.
 *
 * <pre>
 * {% sandbox %}
 *     {% include \'user.html\' %}
 * {% endsandbox %}
 * </pre>
 *
 * @see http://www.twig-project.org/doc/api.html#sandbox-extension for details
 */",
 "/**
     * Constructor.
     *
     * @param string          $locale   The locale
     * @param MessageSelector $selector The message selector for pluralization
     *
     * @api
     */",
 "/**
     * Adds a Loader.
     *
     * @param string          $format The name of the loader (@see addResource())
     * @param LoaderInterface $loader A LoaderInterface instance
     *
     * @api
     */",
 "/**
     * Adds a Resource.
     *
     * @param string $format   The name of the loader (@see addLoader())
     * @param mixed  $resource The resource name
     * @param string $locale   The locale
     * @param string $domain   The domain
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * Sets the fallback locale.
     *
     * @param string $locale The fallback locale
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
 * Translator.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Driver interface.
 * Interface that all DBAL drivers must implement.
 *
 * @since 2.1.4
 */",
 "/**
     * Constructor.
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Loads a Closure.
     *
     * @param \Closure $closure The resource
     * @param string   $type    The resource type
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed $resource A resource
     * @param string $type The resource type
     *
     * @return Boolean true if this class supports the given resource, false otherwise
     */",
 "/**
 * ClosureLoader loads service definitions from a PHP closure.
 *
 * The Closure has access to the container as its first argument.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string    $message  The error message
     * @param integer   $lineno   The template line where the error occurred
     * @param string    $filename The template file name where the error occurred
     * @param Exception $previous The previous exception
     */",
 "/**
     * Gets the raw message.
     *
     * @return string The raw message
     */",
 "/**
     * Gets the filename where the error occurred.
     *
     * @return string The filename
     */",
 "/**
     * Sets the filename where the error occurred.
     *
     * @param string $filename The filename
     */",
 "/**
     * Gets the template line where the error occurred.
     *
     * @return integer The template line
     */",
 "/**
     * Sets the template line where the error occurred.
     *
     * @param integer $lineno The template line
     */",
 "/**
     * For PHP < 5.3.0, provides access to the getPrevious() method.
     *
     * @param  string $method    The method name
     * @param  array  $arguments The parameters to be passed to the method
     *
     * @return Exception The previous exception or null
     */",
 "/**
 * Twig base exception.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Forwards the request to another controller.
     *
     * @param  string  $controller The controller name (a string like BlogBundle:Post:index)
     * @param  array   $attributes An array of request attributes
     * @param  array   $query      An array of request query parameters
     *
     * @return Response A Response instance
     */",
 "/**
     * Renders a Controller and returns the Response content.
     *
     * Note that this method generates an esi:include tag only when both the standalone
     * option is set to true and the request has ESI capability (@see Symfony\Component\HttpKernel\HttpCache\ESI).
     *
     * Available options:
     *
     *  * attributes: An array of request attributes (only when the first argument is a controller)
     *  * query: An array of request query parameters (only when the first argument is a controller)
     *  * ignore_errors: true to return an empty string in case of an error
     *  * alt: an alternative controller to execute in case of an error (can be a controller, a URI, or an array with the controller, the attributes, and the query arguments)
     *  * standalone: whether to generate an esi:include tag or not when ESI is supported
     *  * comment: a comment to add when returning an esi:include tag
     *
     * @param string $controller A controller name to execute (a string like BlogBundle:Post:index), or a relative URI
     * @param array  $options    An array of options
     *
     * @return string The Response content
     */",
 "/**
     * Generates an internal URI for a given controller.
     *
     * This method uses the \"_internal\" route, which should be available.
     *
     * @param string $controller A controller name to execute (a string like BlogBundle:Post:index), or a relative URI
     * @param array  $attributes An array of request attributes
     * @param array  $query      An array of request query parameters
     *
     * @return string An internal URI
     */",
 "/**
 * This HttpKernel is used to manage scope changes of the DI container.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Writes $bytes to the end of the stream.
   * 
   * Writing may not happen immediately if the stream chooses to buffer.  If
   * you want to write these bytes with immediate effect, call {@link commit()}
   * after calling write().
   * 
   * This method returns the sequence ID of the write (i.e. 1 for first, 2 for
   * second, etc etc).
   *
   * @param string $bytes
   * @return int
   * @throws Swift_IoException
   */",
 "/**
   * For any bytes that are currently buffered inside the stream, force them
   * off the buffer.
   * 
   * @throws Swift_IoException
   */",
 "/**
   * Attach $is to this stream.
   * The stream acts as an observer, receiving all data that is written.
   * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
   * 
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Remove an already bound stream.
   * If $is is not bound, no errors will be raised.
   * If the stream currently has any buffered data it will be written to $is
   * before unbinding occurs.
   * 
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Flush the contents of the stream (empty it) and set the internal pointer
   * to the beginning.
   * @throws Swift_IoException
   */",
 "/**
 * An abstract means of writing data.
 * Classes implementing this interface may use a subsystem which requires less
 * memory than working with large strings of data.
 * @package Swift
 * @subpackage ByteStream
 * @author Chris Corbyn
 */",
 "/**
*AssertionontheClassofaDICServiceDefinition.
*
*@param\Symfony\Component\DependencyInjection\Definition$definition
*@paramstring$expectedClass
*/",
 "/**
*AssertionfortheDIContainer,checkifthegivendefinitioncontainsamethodcallwiththegivenparameters.
*
*@param\Symfony\Component\DependencyInjection\Definition$definition
*@paramstring$methodName
*@paramarray$params
*@returnvoid
*/",
 "/**
     * Constructor.
     *
     * @param string $role The role name
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Role is a simple implementation of a RoleInterface where the role is a
 * string.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param string   $class
     * @param string   $username
     * @param string   $series
     * @param string   $tokenValue
     * @param DateTime $lastUsed
     */",
 "/**
     * Returns the class of the user
     *
     * @return string
     */",
 "/**
     * Returns the username
     *
     * @return string
     */",
 "/**
     * Returns the series
     *
     * @return string
     */",
 "/**
     * Returns the token value
     *
     * @return string
     */",
 "/**
     * Returns the time the token was last used
     *
     * @return DateTime
     */",
 "/**
 * This class is only used by PersistentTokenRememberMeServices internally.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string         $role   The role as a string
     * @param TokenInterface $source The original token
     */",
 "/**
     * Returns the original Token.
     *
     * @return TokenInterface The original TokenInterface instance
     */",
 "/**
 * SwitchUserRole is used when the current user temporarily impersonates
 * another one.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */",
 "/**
     * Clears all parameters.
     *
     * @api
     */",
 "/**
     * Adds parameters to the service container parameters.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */",
 "/**
     * Gets the service container parameters.
     *
     * @return array An array of parameters
     *
     * @api
     */",
 "/**
     * Gets a service container parameter.
     *
     * @param string $name The parameter name
     *
     * @return mixed  The parameter value
     *
     * @throws  ParameterNotFoundException if the parameter is not defined
     *
     * @api
     */",
 "/**
     * Sets a service container parameter.
     *
     * @param string $name  The parameter name
     * @param mixed  $value The parameter value
     *
     * @api
     */",
 "/**
     * Returns true if a parameter name is defined.
     *
     * @param  string  $name       The parameter name
     *
     * @return Boolean true if the parameter name is defined, false otherwise
     *
     * @api
     */",
 "/**
     * Replaces parameter placeholders (%name%) by their values for all parameters.
     */",
 "/**
     * Replaces parameter placeholders (%name%) by their values.
     *
     * @param mixed $value A value
     * @param array $resolving An array of keys that are being resolved (used internally to detect circular references)
     *
     * @return mixed The resolved value
     *
     * @throws ParameterNotFoundException if a placeholder references a parameter that does not exist
     * @throws ParameterCircularReferenceException if a circular reference if detected
     * @throws RuntimeException when a given parameter has a type problem.
     */",
 "/**
     * Resolves parameters inside a string
     *
     * @param string $value     The string to resolve
     * @param array  $resolving An array of keys that are being resolved (used internally to detect circular references)
     *
     * @return string The resolved string
     *
     * @throws ParameterNotFoundException if a placeholder references a parameter that does not exist
     * @throws ParameterCircularReferenceException if a circular reference if detected
     * @throws RuntimeException when a given parameter has a type problem.
     */",
 "/**
 * Holds parameters.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns an array of logs.
     *
     * A log is an array with the following mandatory keys:
     * timestamp, message, priority, and priorityName.
     * It can also have an optional context key containing an array.
     *
     * @return array An array of logs
     */",
 "/**
     * Returns the number of errors.
     *
     * @return integer The number of errors
     */",
 "/**
 * DebugLoggerInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Add a new annotation to the globally ignored annotation names with regard to exception handling.
     *
     * @param string $name
     */",
 "/**
     * Constructor. Initializes a new AnnotationReader that uses the given Cache provider.
     *
     * @param DocParser $parser The parser to use. If none is provided, the default parser is used.
     */",
 "/**
     * Ignore not imported annotations and not throw an exception.
     *
     * @param bool $bool
     */",
 "/**
     * Detect imports by parsing the use statements of affected files.
     *
     * @deprecated Will be removed in 3.0, imports will always be enabled.
     * @param bool $flag
     */",
 "/**
     * @deprecated Will be removed in 3.0, imports will always be enabled.
     * @return bool
     */",
 "/**
     * Sets the default namespace that the AnnotationReader should assume for annotations
     * with not fully qualified names.
     *
     * @deprecated This method will be removed in Doctrine Common 3.0
     * @param string $defaultNamespace
     */",
 "/**
     * Sets the custom function to use for creating new annotations on the
     * underlying parser.
     *
     * The function is supplied two arguments. The first argument is the name
     * of the annotation and the second argument an array of values for this
     * annotation. The function is assumed to return an object or NULL.
     * Whenever the function returns NULL for an annotation, the implementation falls
     * back to the default annotation creation process of the underlying parser.
     *
     * @deprecated This method will be removed in Doctrine Common 3.0
     * @param Closure $func
     */",
 "/**
     * Sets an alias for an annotation namespace.
     *
     * @param string $namespace
     * @param string $alias
     */",
 "/**
     * Gets the annotations applied to a class.
     *
     * @param string|ReflectionClass $class The name or ReflectionClass of the class from which
     * the class annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets a class annotation.
     *
     * @param ReflectionClass $class The ReflectionClass of the class from which
     *                               the class annotations should be read.
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
     * Gets the annotations applied to a property.
     *
     * @param string|ReflectionProperty $property The name or ReflectionProperty of the property
     * from which the annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets a property annotation.
     *
     * @param ReflectionProperty $property
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
     * Gets the annotations applied to a method.
     *
     * @param ReflectionMethod $property The name or ReflectionMethod of the method from which
     * the annotations should be read.
     * @return array An array of Annotations.
     */",
 "/**
     * Gets a method annotation.
     *
     * @param ReflectionMethod $method
     * @param string $annotationName The name of the annotation.
     * @return The Annotation or NULL, if the requested annotation does not exist.
     */",
 "/**
     * Returns the ignored annotations for the given class.
     *
     * @param ReflectionClass $class
     * @return array
     */",
 "/**
     * Collects parsing metadata for a given class
     *
     * @param ReflectionClass $class
     */",
 "/**
 * A reader for docblock annotations.
 *
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Container for all DBAL events.
 *
 * This class cannot be instantiated.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Given a Constrain, this returns the ConstraintValidatorInterface
     * object that should be used to verify its validity.
     *
     * @param Constraint $constraint The source constraint
     *
     * @return ConstraintValidatorInterface
     */",
 "/**
 * Specifies an object able to return the correct ConstraintValidatorInterface
 * instance given a Constrain object.
 */",
 "/**
     * Returns a list of choices
     *
     * @return array
     */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface $container The service container
     */",
 "/**
     * Returns the Response content for a given controller or URI.
     *
     * @param string $controller A controller name to execute (a string like BlogBundle:Post:index), or a relative URI
     * @param array  $attributes An array of request attributes
     * @param array  $options    An array of options
     *
     * @see Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver::render()
     */",
 "/**
     * Returns the token parser instance to add to the existing list.
     *
     * @return array An array of Twig_TokenParser instances
     */",
 "/**
 * Twig extension for Symfony actions helper
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * DefaultController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * MessageDataCollector.
 *
 * Added for forwards compatibility with Symfony2.1
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Internal node used by the for node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Modifies the response to apply HTTP expiration header fields.
     *
     * @param FilterResponseEvent $event The notified event
     */",
 "/**
 * The CacheListener class has the responsability to modify the
 * Response object when a controller uses the @Cache annotation.
 *
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * InstanceOfExpression ::= IdentificationVariable [\"NOT\"] \"INSTANCE\" [\"OF\"] (AbstractSchemaName | InputParameter)
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @see Command
     */",
 "/**
     * @see Command
     */",
 "/**
     * @throws \InvalidArgumentException When route does not exist
     */",
 "/**
 * A console command for retrieving information about routes
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $id The node identifier
     * @param mixed $value The node value
     */",
 "/**
     * Adds an in edge to this node.
     *
     * @param ServiceReferenceGraphEdge $edge
     */",
 "/**
     * Adds an out edge to this node.
     *
     * @param ServiceReferenceGraphEdge $edge
     */",
 "/**
     * Checks if the value of this node is an Alias.
     *
     * @return Boolean True if the value is an Alias instance
     */",
 "/**
     * Checks if the value of this node is a Definition.
     *
     * @return Boolean True if the value is a Definition instance
     */",
 "/**
     * Returns the identifier.
     *
     * @return string
     */",
 "/**
     * Returns the in edges.
     *
     * @return array The in ServiceReferenceGraphEdge array
     */",
 "/**
     * Returns the out edges.
     *
     * @return array The out ServiceReferenceGraphEdge array
     */",
 "/**
     * Returns the value of this Node
     *
     * @return mixed The value
     */",
 "/**
 * Represents a node in your service graph.
 *
 * Value is typically a definition, or an alias.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * ComparisonExpression ::= ArithmeticExpression ComparisonOperator ( QuantifiedExpression | ArithmeticExpression ) |
 *                          StringExpression ComparisonOperator (StringExpression | QuantifiedExpression) |
 *                          BooleanExpression (\"=\" | \"<>\" | \"!=\") (BooleanExpression | QuantifiedExpression) |
 *                          EnumExpression (\"=\" | \"<>\" | \"!=\") (EnumExpression | QuantifiedExpression) |
 *                          DatetimeExpression ComparisonOperator (DatetimeExpression | QuantifiedExpression) |
 *                          EntityExpression (\"=\" | \"<>\") (EntityExpression | QuantifiedExpression)
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/** @override */",
 "/**
     * Converts a value from its database representation to its PHP representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The PHP representation of the value.
     */",
 "/**
 * Type that maps an SQL CLOB to a PHP string.
 *
 * @since 2.0
 */",
 "/**
 * ArithmeticTerm ::= ArithmeticFactor {(\"*\" | \"/\") ArithmeticFactor}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Defines a macro.
 *
 * <pre>
 * {% macro input(name, value, type, size) %}
 *    <input type=\"{{ type|default(\'text\') }}\" name=\"{{ name }}\" value=\"{{ value|e }}\" size=\"{{ size|default(20) }}\" />
 * {% endmacro %}
 * </pre>
 */",
 "/**
     * Constructor.
     *
     * @param KernelInterface       $kernel       The kernel is used to parse bundle notation
     * @param ContainerInterface    $container    The container is used to load the managers lazily, thus avoiding a circular dependency
     * @param ParameterBagInterface $parameterBag The container parameter bag
     * @param string                $baseDir      The base directory for relative inputs
     * @param Boolean               $debug        The current debug mode
     */",
 "/**
     * Adds support for bundle notation file and glob assets and parameter placeholders.
     *
     * FIXME: This is a naive implementation of globs in that it doesn\'t
     * attempt to support bundle inheritance within the glob pattern itself.
     */",
 "/**
 * Loads asset formulae from the filesystem.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/** @override */",
 "/** @override */",
 "/** @override */",
 "/**
     * Updates the result pointer for an Entity. The result pointers point to the
     * last seen instance of each Entity type. This is used for graph construction.
     *
     * @param array $coll  The element.
     * @param boolean|integer $index  Index of the element in the collection.
     * @param string $dqlAlias
     * @param boolean $oneToOne  Whether it is a single-valued association or not.
     */",
 "/**
 * The ArrayHydrator produces a nested array \"graph\" that is often (not always)
 * interchangeable with the corresponding object graph for read-only access.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 1.0
 */",
 "/**
   * Get the MIME name of this content encoding scheme.
   * @return string
   */",
 "/**
 * Interface for all Header Encoding schemes.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaPgsqlReader.html
     * @param  array $tableIndexes
     * @param  string $tableName
     * @return array
     */",
 "/**
 * xxx
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author      Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @version     $Revision$
 * @since       2.0
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Default implementation of the ConstraintValidatorFactoryInterface.
 *
 * This enforces the convention that the validatedBy() method on any
 * Constrain will return the class name of the ConstraintValidator that
 * should validate the Constraint.
 */",
 "/**
     * Builds the form.
     *
     * This method gets called for each type in the hierarchy starting form the
     * top most type.
     * Type extensions can further modify the form.
     *
     * @see FormTypeExtensionInterface::buildForm()
     *
     * @param FormBuilder   $builder The form builder
     * @param array         $options The options
     */",
 "/**
     * Builds the form view.
     *
     * This method gets called for each type in the hierarchy starting form the
     * top most type.
     * Type extensions can further modify the view.
     *
     * @see FormTypeExtensionInterface::buildView()
     *
     * @param FormView      $view The view
     * @param FormInterface $form The form
     */",
 "/**
     * Builds the form view.
     *
     * This method gets called for each type in the hierarchy starting form the
     * top most type.
     * Type extensions can further modify the view.
     *
     * Children views have been built when this method gets called so you get
     * a chance to modify them.
     *
     * @see FormTypeExtensionInterface::buildViewBottomUp()
     *
     * @param FormView      $view The view
     * @param FormInterface $form The form
     */",
 "/**
     * Returns a builder for the current type.
     *
     * The builder is retrieved by going up in the type hierarchy when a type does
     * not provide one.
     *
     * @param string                $name       The name of the builder
     * @param FormFactoryInterface  $factory    The form factory
     * @param array                 $options    The options
     *
     * @return FormBuilder|null A form builder or null when the type does not have a builder
     */",
 "/**
     * Returns the default options for this type.
     *
     * @param array $options
     *
     * @return array The default options
     */",
 "/**
     * Returns the allowed option values for each option (if any).
     *
     * @param array $options
     *
     * @return array The allowed option values
     */",
 "/**
     * Returns the name of the parent type.
     *
     * @param array $options
     *
     * @return string|null The name of the parent type if any otherwise null
     */",
 "/**
     * Returns the name of this type.
     *
     * @return string The name of this type
     */",
 "/**
     * Adds extensions for this type.
     *
     * @param array $extensions An array of FormTypeExtensionInterface
     *
     * @throws UnexpectedTypeException if any extension does not implement FormTypeExtensionInterface
     */",
 "/**
     * Returns the extensions associated with this type.
     *
     * @return array An array of FormTypeExtensionInterface
     */",
 "/**
     * Constructor
     *
     * @param string $file             The file name
     * @param string $relativePath     The relative path
     * @param string $relativePathname The relative path name
     */",
 "/**
     * Returns the relative path
     *
     * @return string the relative path
     */",
 "/**
     * Returns the relative path name
     *
     * @return string the relative path name
     */",
 "/**
 * Extends \SplFileInfo to support relative paths
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * DefaultController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructs an TableDiff object.
     *
     * @param array(string=>Column) $addedColumns
     * @param array(string=>Column) $changedColumns
     * @param array(string=>bool)   $removedColumns
     * @param array(string=>Index)  $addedIndexes
     * @param array(string=>Index)  $changedIndexes
     * @param array(string=>bool)   $removedIndexes
     */",
 "/**
 * Table Diff
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @copyright Copyright (C) 2005-2009 eZ Systems AS. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @dataProvider getClassNameProvider
     */",
 "/**
     * @dataProvider getMethodNameProvider
     */",
 "/**
   * Create a new MimePart.
   * Details may be optionally passed into the constructor.
   * @param string $body
   * @param string $contentType
   * @param string $charset
   */",
 "/**
   * Create a new MimePart.
   * @param string $body
   * @param string $contentType
   * @param string $charset
   * @return Swift_Mime_MimePart
   */",
 "/**
 * A MIME part, in a multipart message.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * This performs any necessary changes to the session.
     *
     * This method is called before the SecurityContext is populated with a
     * Token, and only by classes inheriting from AbstractAuthenticationListener.
     *
     * @param Request        $request
     * @param TokenInterface $token
     *
     * @return void
     */",
 "/**
 * SessionAuthenticationStrategyInterface
 *
 * Implementation are responsible for updating the session after an interactive
 * authentication attempt was successful.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a module node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Get the IoBuffer where read/writes are occurring.
   * @return Swift_Transport_IoBuffer
   */",
 "/**
   * Run a command against the buffer, expecting the given response codes.
   * If no response codes are given, the response will not be validated.
   * If codes are given, an exception will be thrown on an invalid response.
   * @param string $command
   * @param int[] $codes
   * @param string[] &$failures
   */",
 "/**
 * Wraps an IoBuffer to send/receive SMTP commands/responses.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * @param string $stream
     * @param integer $level The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Stores to any stream resource
 *
 * Can be used to store into php://stderr, remote and local files, etc.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param  \Twig_Token $token A Twig_Token instance
     *
     * @return \Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Token Parser for the \'trans\' tag.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Notifies this ReportNotifier that $address failed or succeeded.
   * @param Swift_Mime_Message $message
   * @param string $address
   * @param int $result from {@link RESULT_PASS, RESULT_FAIL}
   */",
 "/**
 * A HTML output reporter for the Reporter plugin.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
     * Loads the configuration.
     *
     * @param array            $configs   An array of configuration settings
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
 * Semantic asset configuration.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * @dataProvider getHttpUrls
     */",
 "/**
     * Creates the root node.
     *
     * @param string      $name     The name of the root node
     * @param string      $type     The type of the root node
     * @param NodeBuilder $builder  A custom node builder instance
     *
     * @return ArrayNodeDefinition|NodeDefinition The root node (as an ArrayNodeDefinition when the type is \'array\')
     *
     * @throws \RuntimeException When the node type is not supported
     */",
 "/**
     * Builds the tree.
     *
     * @return NodeInterface
     */",
 "/**
 * This is the entry class for building a config tree.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Set the value of $parameter.
   * @param string $parameter
   * @param string $value
   */",
 "/**
   * Get the value of $parameter.
   * @return string
   */",
 "/**
 * A MIME Header with parameters.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param RouteCollection $routes  A RouteCollection instance
     * @param RequestContext  $context The context
     *
     * @api
     */",
 "/**
     * Sets the request context.
     *
     * @param RequestContext $context The context
     *
     * @api
     */",
 "/**
     * Gets the request context.
     *
     * @return RequestContext The context
     */",
 "/**
     * Tries to match a URL with a set of routes.
     *
     * @param  string $pathinfo The path info to be parsed
     *
     * @return array An array of parameters
     *
     * @throws ResourceNotFoundException If the resource could not be found
     * @throws MethodNotAllowedException If the resource was found but the request method is not allowed
     *
     * @api
     */",
 "/**
 * UrlMatcher matches URL based on a set of routes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Set the namespace to prefix all cache ids with.
     *
     * @param string $namespace
     * @return void
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Delete all cache entries.
     *
     * @return array $deleted  Array of the deleted cache ids
     */",
 "/**
     * Delete cache entries where the id matches a PHP regular expressions
     *
     * @param string $regex
     * @return array $deleted  Array of the deleted cache ids
     */",
 "/**
     * Delete cache entries where the id has the passed prefix
     *
     * @param string $prefix
     * @return array $deleted Array of the deleted cache ids
     */",
 "/**
     * Delete cache entries where the id has the passed suffix
     *
     * @param string $suffix
     * @return array $deleted Array of the deleted cache ids
     */",
 "/**
     * Prefix the passed id with the configured namespace value
     *
     * @param string $id  The id to namespace
     * @return string $id The namespaced id
     */",
 "/**
     * Fetches an entry from the cache.
     *
     * @param string $id cache id The id of the cache entry to fetch.
     * @return string The cached data or FALSE, if no cache entry exists for the given id.
     */",
 "/**
     * Test if an entry exists in the cache.
     *
     * @param string $id cache id The cache id of the entry to check for.
     * @return boolean TRUE if a cache entry exists for the given cache id, FALSE otherwise.
     */",
 "/**
     * Puts data into the cache.
     *
     * @param string $id The cache id.
     * @param string $data The cache entry/data.
     * @param int $lifeTime The lifetime. If != false, sets a specific lifetime for this cache entry (null => infinite lifeTime).
     * @return boolean TRUE if the entry was successfully stored in the cache, FALSE otherwise.
     */",
 "/**
     * Deletes a cache entry.
     *
     * @param string $id cache id
     * @return boolean TRUE if the cache entry was successfully deleted, FALSE otherwise.
     */",
 "/**
     * Get an array of all the cache ids stored
     *
     * @return array $ids
     */",
 "/**
 * Base class for cache driver implementations.
 *
 * @since 2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * This exception is thrown when a configuration path is overwritten from a
 * subsequent configuration file, but the entry node specifically forbids this.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Create a new EventObject originating at $source.
   * @param object $source
   */",
 "/**
   * Get the source object of this event.
   * @return object
   */",
 "/**
   * Prevent this Event from bubbling any further up the stack.
   * @param boolean $cancel, optional
   */",
 "/**
   * Returns true if this Event will not bubble any further up the stack.
   * @return boolean
   */",
 "/**
 * A base Event which all Event classes inherit from.
 * 
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
   * Constructor.
   */",
 "/**
   * Sets the spool object.
   * @param Swift_Spool $spool
   * @return Swift_Transport_SpoolTransport
   */",
 "/**
   * Get the spool object.
   * @return Swift_Spool
   */",
 "/**
   * Tests if this Transport mechanism has started.
   *
   * @return boolean
   */",
 "/**
   * Starts this Transport mechanism.
   */",
 "/**
   * Stops this Transport mechanism.
   */",
 "/**
   * Sends the given message.
   *
   * @param Swift_Mime_Message $message
   * @param string[] &$failedRecipients to collect failures by-reference
   *
   * @return int The number of sent emails
   */",
 "/**
   * Register a plugin.
   *
   * @param Swift_Events_EventListener $plugin
   */",
 "/**
 * Stores Messages in a queue.
 * @package Swift
 * @author  Fabien Potencier
 */",
 "/**
     * Sets the input data to be tokenized.
     *
     * The Lexer is immediately reset and the new input tokenized.
     * Any unprocessed tokens from any previous input are lost.
     *
     * @param string $input The input to be tokenized.
     */",
 "/**
     * Resets the lexer.
     */",
 "/**
     * Resets the peek pointer to 0.
     */",
 "/**
     * Resets the lexer position on the input to the given position.
     *
     * @param integer $position Position to place the lexical scanner
     */",
 "/**
     * Checks whether a given token matches the current lookahead.
     *
     * @param integer|string $token
     * @return boolean
     */",
 "/**
     * Checks whether any of the given tokens matches the current lookahead
     *
     * @param array $tokens
     * @return boolean
     */",
 "/**
     * Moves to the next token in the input string.
     *
     * A token is an associative array containing three items:
     *  - \'value\'    : the string value of the token in the input string
     *  - \'type\'     : the type of the token (identifier, numeric, string, input
     *                 parameter, none)
     *  - \'position\' : the position of the token in the input string
     *
     * @return array|null the next token; null if there is no more tokens left
     */",
 "/**
     * Tells the lexer to skip input tokens until it sees a token with the given value.
     *
     * @param $type The token type to skip until.
     */",
 "/**
     * Checks if given value is identical to the given token
     *
     * @param mixed $value
     * @param integer $token
     * @return boolean
     */",
 "/**
     * Moves the lookahead token forward.
     *
     * @return array | null The next token or NULL if there are no more tokens ahead.
     */",
 "/**
     * Peeks at the next token, returns it and immediately resets the peek.
     *
     * @return array|null The next token or NULL if there are no more tokens ahead.
     */",
 "/**
     * Scans the input string for tokens.
     *
     * @param string $input a query string
     */",
 "/**
     * Gets the literal for a given token.
     *
     * @param integer $token
     * @return string
     */",
 "/**
     * Lexical catchable patterns.
     *
     * @return array
     */",
 "/**
     * Lexical non-catchable patterns.
     *
     * @return array
     */",
 "/**
     * Retrieve token type. Also processes the token value if necessary.
     *
     * @param string $value
     * @return integer
     */",
 "/**
 * Base class for writing simple lexers, i.e. for creating small DSLs.
 *
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @todo Rename: AbstractLexer
 */",
 "/**
     * Generates a URL from the given parameters.
     *
     * @param string  $route      The name of the route
     * @param mixed   $parameters An array of parameters
     * @param Boolean $absolute   Whether to generate an absolute URL
     *
     * @return string The generated URL
     */",
 "/**
     * Forwards the request to another controller.
     *
     * @param  string  $controller The controller name (a string like BlogBundle:Post:index)
     * @param  array   $path       An array of path parameters
     * @param  array   $query      An array of query parameters
     *
     * @return Response A Response instance
     */",
 "/**
     * Returns a RedirectResponse to the given URL.
     *
     * @param string  $url The URL to redirect to
     * @param integer $status The status code to use for the Response
     *
     * @return RedirectResponse
     */",
 "/**
     * Returns a rendered view.
     *
     * @param string $view       The view name
     * @param array  $parameters An array of parameters to pass to the view
     *
     * @return string The renderer view
     */",
 "/**
     * Renders a view.
     *
     * @param string   $view The view name
     * @param array    $parameters An array of parameters to pass to the view
     * @param Response $response A response instance
     *
     * @return Response A Response instance
     */",
 "/**
     * Returns a NotFoundHttpException.
     *
     * This will result in a 404 response code. Usage example:
     *
     *     throw $this->createNotFoundException(\'Page not found!\');
     *
     * @return NotFoundHttpException
     */",
 "/**
     * Creates and returns a Form instance from the type of the form.
     *
     * @param string|FormTypeInterface $type    The built type of the form
     * @param mixed $data                       The initial data for the form
     * @param array $options                    Options for the form
     *
     * @return Form
     */",
 "/**
     * Creates and returns a form builder instance
     *
     * @param mixed $data               The initial data for the form
     * @param array $options            Options for the form
     *
     * @return FormBuilder
     */",
 "/**
     * Shortcut to return the request service.
     *
     * @return Request
     */",
 "/**
     * Shortcut to return the Doctrine Registry service.
     *
     * @return Registry
     *
     * @throws \LogicException If DoctrineBundle is not available
     */",
 "/**
     * Returns true if the service id is defined.
     *
     * @param  string  $id The service id
     *
     * @return Boolean true if the service id is defined, false otherwise
     */",
 "/**
     * Gets a service by id.
     *
     * @param  string $id The service id
     *
     * @return object The service
     */",
 "/**
 * Controller is a simple implementation of a Controller.
 *
 * It provides methods to common features needed in controllers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * This method is called by the LogoutListener when a user has requested
     * to be logged out. Usually, you would unset session variables, or remove
     * cookies, etc.
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token
     *
     * @return void
     */",
 "/**
 * Interface that needs to be implemented by LogoutHandlers.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Filters a section of a template by applying filters.
 *
 * <pre>
 * {% filter upper %}
 *  This text becomes uppercase
 * {% endfilter %}
 * </pre>
 */",
 "/**
     * @dataProvider getLocales
     */",
 "/**
     * @dataProvider getLocales
     */",
 "/**
     * @dataProvider getLocales
     */",
 "/**
     * Constructor.
     */",
 "/**
     * Returns all passes in order to be processed.
     *
     * @return array An array of all passes to process
     *
     * @api
     */",
 "/**
     * Adds a pass.
     *
     * @param CompilerPassInterface $pass A Compiler pass
     * @param string $type The pass type
     *
     * @throws \InvalidArgumentException when a pass type doesn\'t exist
     *
     * @api
     */",
 "/**
     * Gets all passes for the AfterRemoving pass.
     *
     * @return array An array of passes
     *
     * @api
     */",
 "/**
     * Gets all passes for the BeforeOptimization pass.
     *
     * @return array An array of passes
     *
     * @api
     */",
 "/**
     * Gets all passes for the BeforeRemoving pass.
     *
     * @return array An array of passes
     *
     * @api
     */",
 "/**
     * Gets all passes for the Optimization pass.
     *
     * @return array An array of passes
     *
     * @api
     */",
 "/**
     * Gets all passes for the Removing pass.
     *
     * @return array An array of passes
     *
     * @api
     */",
 "/**
     * Gets all passes for the Merge pass.
     *
     * @return array An array of passes
     *
     * @api
     */",
 "/**
     * Sets the Merge Pass.
     *
     * @param CompilerPassInterface $pass The merge pass
     *
     * @api
     */",
 "/**
     * Sets the AfterRemoving passes.
     *
     * @param array $passes An array of passes
     *
     * @api
     */",
 "/**
     * Sets the BeforeOptimization passes.
     *
     * @param array $passes An array of passes
     *
     * @api
     */",
 "/**
     * Sets the BeforeRemoving passes.
     *
     * @param array $passes An array of passes
     *
     * @api
     */",
 "/**
     * Sets the Optimization passes.
     *
     * @param array $passes An array of passes
     *
     * @api
     */",
 "/**
     * Sets the Removing passes.
     *
     * @param array $passes An array of passes
     *
     * @api
     */",
 "/**
 * Compiler Pass Configuration
 *
 * This class has a default configuration embedded.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @api
     */",
 "/**
     * Gets the parent RouteCollection.
     *
     * @return RouteCollection The parent RouteCollection
     */",
 "/**
     * Sets the parent RouteCollection.
     *
     * @param RouteCollection $parent The parent RouteCollection
     */",
 "/**
     * Gets the current RouteCollection as an Iterator.
     *
     * @return \ArrayIterator An \ArrayIterator interface
     */",
 "/**
     * Adds a route.
     *
     * @param string $name  The route name
     * @param Route  $route A Route instance
     *
     * @throws \InvalidArgumentException When route name contains non valid characters
     *
     * @api
     */",
 "/**
     * Returns the array of routes.
     *
     * @return array An array of routes
     */",
 "/**
     * Gets a route by name.
     *
     * @param  string $name  The route name
     *
     * @return Route  $route A Route instance
     */",
 "/**
     * Removes a route by name.
     *
     * @param string $name The route name
     */",
 "/**
     * Adds a route collection to the current set of routes (at the end of the current set).
     *
     * @param RouteCollection $collection A RouteCollection instance
     * @param string          $prefix     An optional prefix to add before each pattern of the route collection
     *
     * @api
     */",
 "/**
     * Adds a prefix to all routes in the current set.
     *
     * @param string          $prefix     An optional prefix to add before each pattern of the route collection
     *
     * @api
     */",
 "/**
     * Returns an array of resources loaded to build this collection.
     *
     * @return ResourceInterface[] An array of resources
     */",
 "/**
     * Adds a resource for this collection.
     *
     * @param ResourceInterface $resource A resource instance
     */",
 "/**
 * A RouteCollection represents a set of Route instances.
 *
 * When adding a route, it overrides existing routes with the
 * same name defined in theinstance or its children and parents.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Coalesces multiple directories together into one merged resource.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * @return EntityManager
     */",
 "/**
 * Lifecycle Events are triggered by the UnitOfWork during lifecycle transitions
 * of entities.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.de>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
   * Create a new LoggerPlugin using $logger.
   * 
   * @param Swift_Plugins_Logger $logger
   */",
 "/**
   * Add a log entry.
   * 
   * @param string $entry
   */",
 "/**
   * Clear the log contents.
   */",
 "/**
   * Get this log as a string.
   * 
   * @return string
   */",
 "/**
   * Invoked immediately following a command being sent.
   * 
   * @param Swift_Events_ResponseEvent $evt
   */",
 "/**
   * Invoked immediately following a response coming back.
   * 
   * @param Swift_Events_ResponseEvent $evt
   */",
 "/**
   * Invoked just before a Transport is started.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
   * Invoked immediately after the Transport is started.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
   * Invoked just before a Transport is stopped.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
   * Invoked immediately after the Transport is stopped.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
   * Invoked as a TransportException is thrown in the Transport system.
   * 
   * @param Swift_Events_TransportExceptionEvent $evt
   */",
 "/**
 * Does real time logging of Transport level information.
 * 
 * @package Swift
 * @subpackage Plugins
 * 
 * @author Chris Corbyn
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to execute DQL queries in a given EntityManager.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
*DeterminesifaPHPvaluewouldrequiredoublequotinginYAML.
*
*@paramstring$valueAPHPvalue
*
*@returnBooleanTrueifthevaluewouldrequiredoublequotes.
*/",
 "/**
     * Escapes and surrounds a PHP value with double quotes.
     *
     * @param string $value A PHP value
     *
     * @return string The quoted, escaped string
     */",
 "/**
     * Determines if a PHP value would require single quoting in YAML.
     *
     * @param string $value A PHP value
     *
     * @return Boolean True if the value would require single quotes.
     */",
 "/**
     * Escapes and surrounds a PHP value with single quotes.
     *
     * @param string $value A PHP value
     *
     * @return string The quoted, escaped string
     */",
 "/**
 * Escaper encapsulates escaping rules for single and double-quoted
 * YAML strings.
 *
 * @author Matthew Lewinski <matthew@lewinski.org>
 */",
 "/**
     * Dumps a set of routes to a PHP class.
     *
     * Available options:
     *
     *  * class:      The class name
     *  * base_class: The base class name
     *
     * @param  array  $options An array of options
     *
     * @return string A PHP class representing the generator class
     */",
 "/**
     * Gets the routes to dump.
     *
     * @return RouteCollection A RouteCollection instance
     */",
 "/**
 * GeneratorDumperInterface is the interface that all generator dumper classes must implement.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Adds a Response.
     *
     * @param Response $response
     */",
 "/**
     * Updates the Response HTTP headers based on the embedded Responses.
     *
     * @param Response $response
     */",
 "/**
 * EsiResponseCacheStrategyInterface implementations know how to compute the
 * Response cache HTTP header based on the different ESI response cache headers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * Available options:
     *
     *   * cache_dir: The cache directory (or null to disable caching)
     *   * debug:     Whether to enable debugging or not (false by default)
     *
     * @param ContainerInterface $container A ContainerInterface instance
     * @param MessageSelector    $selector  The message selector for pluralization
     * @param array              $loaderIds An array of loader Ids
     * @param array              $options   An array of options
     * @param Session            $session   A Session instance
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Translator.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
     * Removes node filters.
     *
     * This is mostly needed when another visitor adds filters (like the escaper one).
     *
     * @param Twig_Node $node A Node
     */",
 "/**
 * Twig_Node_SandboxedPrint adds a check for the __toString() method
 * when the variable is an object and the sandbox is activated.
 *
 * When there is a simple Print statement, like {{ article }},
 * and if the sandbox is enabled, we need to check that the __toString()
 * method is allowed if \'article\' is an object.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param RequestMatcherInterface $requestMatcher A RequestMatcherInterface instance
     * @param array                   $roles          An array of roles needed to access the resource
     * @param string|null             $channel        The channel to enforce (http, https, or null)
     */",
 "/**
 * AccessMap allows configuration of different access control rules for
 * specific parts of the website.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new AntiFloodPlugin with $threshold and $sleep time.
   * @param int $threshold
   * @param int $sleep time
   * @param Swift_Plugins_Sleeper $sleeper (not needed really)
   */",
 "/**
   * Set the number of emails to send before restarting.
   * @param int $threshold
   */",
 "/**
   * Get the number of emails to send before restarting.
   * @return int
   */",
 "/**
   * Set the number of seconds to sleep for during a restart.
   * @param int $sleep time
   */",
 "/**
   * Get the number of seconds to sleep for during a restart.
   * @return int
   */",
 "/**
   * Invoked immediately before the Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Invoked immediately after the Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Sleep for $seconds.
   * @param int $seconds
   */",
 "/**
 * Reduces network flooding when sending large amounts of mail.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
 * Type that maps a PHP object to a clob SQL type.
 *
 * @since 2.0
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @return array
     */",
 "/**
     * Retrieve Query Instance reponsible for the current walkers execution.
     *
     * @return \Doctrine\ORM\Query
     */",
 "/**
     * Retrieve ParserResult
     *
     * @return \Doctrine\ORM\Query\ParserResult
     */",
 "/**
     * Walks down a SelectStatement AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FromClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FunctionNode AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByClause AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByItem AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a HavingClause AST node, thereby generating the appropriate SQL.
     *
     * @param HavingClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a JoinVariableDeclaration AST node and creates the corresponding SQL.
     *
     * @param JoinVariableDeclaration $joinVarDecl
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectExpression AST node and generates the corresponding SQL.
     *
     * @param SelectExpression $selectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a QuantifiedExpression AST node, thereby generating the appropriate SQL.
     *
     * @param QuantifiedExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a Subselect AST node, thereby generating the appropriate SQL.
     *
     * @param Subselect
     * @return string The SQL.
     */",
 "/**
     * Walks down a SubselectFromClause AST node, thereby generating the appropriate SQL.
     *
     * @param SubselectFromClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an AggregateExpression AST node, thereby generating the appropriate SQL.
     *
     * @param AggregateExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByClause AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByItem AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateStatement AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteStatement AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteClause AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateClause AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateItem AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a WhereClause AST node, thereby generating the appropriate SQL.
     *
     * @param WhereClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalTerm AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalTerm
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalFactor AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalFactor
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalPrimary AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalPrimary
     * @return string The SQL.
     */",
 "/**
     * Walks down an ExistsExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ExistsExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CollectionMemberExpression AST node, thereby generating the appropriate SQL.
     *
     * @param CollectionMemberExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an EmptyCollectionComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param EmptyCollectionComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param NullComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InstanceOfExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InstanceOfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a literal that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a BetweenExpression AST node, thereby generating the appropriate SQL.
     *
     * @param BetweenExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a LikeExpression AST node, thereby generating the appropriate SQL.
     *
     * @param LikeExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a StateFieldPathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param StateFieldPathExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InputParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InputParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticTerm AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a StringPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticFactor that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an SimpleArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an PathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Gets an executor that can be used to execute the result of this walker.
     * 
     * @return AbstractExecutor
     */",
 "/**
 * An adapter implementation of the TreeWalker interface. The methods in this class
 * are empty. ???This class exists as convenience for creating tree walkers.
 * 
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
*Setsthedelimiter,enclosure,andescapecharacterforCSV.
*
*@paramstring$delimiterdelimitercharacter
*@paramstring$enclosureenclosurecharacter
*@paramstring$escapeescapecharacter
*/",
 "/**
*CsvFileLoaderloadstranslationsfromCSVfiles.
*
*@authorSa??aStamenkovi??<umpirsky@gmail.com>
*
*@api
*/",
 "/**
     * Determines whether access to a domain object is to be granted
     *
     * @param AclInterface $acl
     * @param array        $masks
     * @param array        $sids
     * @param Boolean      $administrativeMode
     * @return Boolean
     */",
 "/**
     * Determines whether access to a domain object\'s field is to be granted
     *
     * @param AclInterface $acl
     * @param string       $field
     * @param array        $masks
     * @param array        $sids
     * @param Boolean      $administrativeMode
     *
     * @return Boolean
     */",
 "/**
 * Interface used by permission granting implementations.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Returns an array of bundles to registers.
     *
     * @return array An array of bundle instances.
     *
     * @api
     */",
 "/**
     * Loads the container configuration
     *
     * @param LoaderInterface $loader A LoaderInterface instance
     *
     * @api
     */",
 "/**
     * Boots the current kernel.
     *
     * @api
     */",
 "/**
     * Shutdowns the kernel.
     *
     * This method is mainly useful when doing functional testing.
     *
     * @api
     */",
 "/**
     * Gets the registered bundle instances.
     *
     * @return array An array of registered bundle instances
     *
     * @api
     */",
 "/**
     * Checks if a given class name belongs to an active bundle.
     *
     * @param string $class A class name
     *
     * @return Boolean true if the class belongs to an active bundle, false otherwise
     *
     * @api
     */",
 "/**
     * Returns a bundle and optionally its descendants by its name.
     *
     * @param string  $name  Bundle name
     * @param Boolean $first Whether to return the first bundle only or together with its descendants
     *
     * @return BundleInterface|Array A BundleInterface instance or an array of BundleInterface instances if $first is false
     *
     * @throws \InvalidArgumentException when the bundle is not enabled
     *
     * @api
     */",
 "/**
     * Returns the file path for a given resource.
     *
     * A Resource can be a file or a directory.
     *
     * The resource name must follow the following pattern:
     *
     *     @BundleName/path/to/a/file.something
     *
     * where BundleName is the name of the bundle
     * and the remaining part is the relative path in the bundle.
     *
     * If $dir is passed, and the first segment of the path is Resources,
     * this method will look for a file named:
     *
     *     $dir/BundleName/path/without/Resources
     *
     * @param string  $name  A resource name to locate
     * @param string  $dir   A directory where to look for the resource first
     * @param Boolean $first Whether to return the first path or paths for all matching bundles
     *
     * @return string|array The absolute path of the resource or an array if $first is false
     *
     * @throws \InvalidArgumentException if the file cannot be found or the name is not valid
     * @throws \RuntimeException         if the name contains invalid/unsafe characters
     *
     * @api
     */",
 "/**
     * Gets the name of the kernel
     *
     * @return string The kernel name
     *
     * @api
     */",
 "/**
     * Gets the environment.
     *
     * @return string The current environment
     *
     * @api
     */",
 "/**
     * Checks if debug mode is enabled.
     *
     * @return Boolean true if debug mode is enabled, false otherwise
     *
     * @api
     */",
 "/**
     * Gets the application root dir.
     *
     * @return string The application root dir
     *
     * @api
     */",
 "/**
     * Gets the current container.
     *
     * @return ContainerInterface A ContainerInterface instance
     *
     * @api
     */",
 "/**
     * Gets the request start time (not available if debug is disabled).
     *
     * @return integer The request start timestamp
     *
     * @api
     */",
 "/**
     * Gets the cache directory.
     *
     * @return string The cache directory
     *
     * @api
     */",
 "/**
     * Gets the log directory.
     *
     * @return string The log directory
     *
     * @api
     */",
 "/**
 * The Kernel is the heart of the Symfony system.
 *
 * It manages an environment made of bundles.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Sets style foreground color.
     *
     * @param   string  $color  color name
     *
     * @api
     */",
 "/**
     * Sets style background color.
     *
     * @param   string  $color  color name
     *
     * @api
     */",
 "/**
     * Sets some specific style option.
     *
     * @param   string  $option     option name
     *
     * @api
     */",
 "/**
     * Unsets some specific style option.
     *
     * @param   string  $option     option name
     */",
 "/**
     * Sets multiple style options at once.
     *
     * @param   array   $options
     */",
 "/**
     * Applies the style to a given text.
     *
     * @param string $text The text to style
     *
     * @return string
     */",
 "/**
 * Formatter style interface for defining styles.
 *
 * @author Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * @api
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Loads multiple xml mapping files
 *
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 *
 * @see    Symfony\Component\Validator\Mapping\Loader\FilesLoader
 */",
 "/**
     * Serializes data in the appropriate format
     *
     * @param mixed $data any data
     * @param string $format format name
     * @return string
     */",
 "/**
     * Deserializes data into the given type.
     *
     * @param mixed $data
     * @param string $type
     * @param string $format
     */",
 "/**
     * Normalizes any data into a set of arrays/scalars
     *
     * @param mixed $data data to normalize
     * @param string $format format name, present to give the option to normalizers to act differently based on formats
     * @return array|scalar
     */",
 "/**
     * Denormalizes data into the given type.
     *
     * @param mixed $data
     * @param string $type
     * @param string $format
     * @return mixed
     */",
 "/**
     * Encodes data into the given format
     *
     * @param mixed $data data to encode
     * @param string $format format name
     * @return array|scalar
     */",
 "/**
     * Decodes a string from the given format back into PHP data
     *
     * @param string $data data to decode
     * @param string $format format name
     * @return mixed
     */",
 "/**
     * Checks whether the serializer can serialize to given format
     *
     * @param string $format format name
     * @return Boolean
     */",
 "/**
     * Checks whether the serializer can deserialize from given format
     *
     * @param string $format format name
     * @return Boolean
     */",
 "/**
     * Checks whether the serializer can encode to given format
     *
     * @param string $format format name
     * @return Boolean
     */",
 "/**
     * Checks whether the serializer can decode from given format
     *
     * @param string $format format name
     * @return Boolean
     */",
 "/**
     * Get the encoder for the given format
     *
     * @return EncoderInterface
     */",
 "/**
 * Defines the interface of the Serializer
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Returns the shell header.
     *
     * @return string The header string
     */",
 "/**
 * Shell.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
 * PhpFileLoader loads translations from PHP files returning an array of translations.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
*Thislistenerallowsyoutouseallmethodannotationsonnon-servicecontrolleractions.
*
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*/",
 "/**
     * Get the message list
     *
     * @return array
     */",
 "/**
     * Get the message count
     *
     * @return int count
     */",
 "/**
     * Empty the message list
     *
     */",
 "/**
     * Invoked immediately before the Message is sent.
     *
     * @param \Swift_Events_SendEvent $evt
     */",
 "/**
     * Invoked immediately after the Message is sent.
     *
     * @param \Swift_Events_SendEvent $evt
     */",
 "/**
 * MessageLogger.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Cl??ment JOBEILI <clement.jobeili@gmail.com>
 */",
 "/**
     * @group integration
     */",
 "/**
     * Constructor.
     *
     * @param ControllerNameParser    $parser   A ControllerNameParser instance
     * @param LoggerInterface         $logger   A LoggerInterface instance
     * @param LoaderResolverInterface $resolver A LoaderResolverInterface instance
     */",
 "/**
     * Loads a resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return RouteCollection A RouteCollection instance
     */",
 "/**
 * DelegatingLoader delegates route loading to other loaders using a loader resolver.
 *
 * This implementation resolves the _controller attribute from the short notation
 * to the fully-qualified form (from a:b:c to class:method).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Runs assets through Packager.
 *
 * @link https://github.com/kamicane/packager
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * MsSQL Keywordlist
 *
 * @license  BSD http://www.opensource.org/licenses/bsd-license.php
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      David Coallier <davidc@php.net>
 */",
 "/**
   * Create a new Attachment.
   * Details may be optionally provided to the constructor.
   * @param string|Swift_OutputByteStream $data
   * @param string $filename
   * @param string $contentType
   */",
 "/**
   * Create a new Attachment.
   * @param string|Swift_OutputByteStream $data
   * @param string $filename
   * @param string $contentType
   * @return Swift_Mime_Attachment
   */",
 "/**
   * Create a new Attachment from a filesystem path.
   * @param string $path
   * @param string $contentType optional
   * @return Swift_Mime_Attachment
   */",
 "/**
 * Attachment class for attaching files to a {@link Swift_Mime_Message}.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
 * OrderByClause ::= \"ORDER\" \"BY\" OrderByItem {\",\" OrderByItem}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Checks if a variable is the exact same value as a constant.
 *
 * <pre>
 *  {% if post.status is constant(\'Post::PUBLISHED\') %}
 *    the status attribute is exactly the same as Post::PUBLISHED
 *  {% endif %}
 * </pre>
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns part of a string.
     *
     * Note: Not SQL92, but common functionality.
     *
     * @param string $value the target $value the string or the string column.
     * @param int $from extract from this characeter.
     * @param int $len extract this amount of characters.
     * @return string sql that extracts part of a string.
     * @override
     */",
 "/**
     * Returns the SQL string to return the current system date and time.
     *
     * @return string
     */",
 "/**
     * regexp
     *
     * @return string           the regular expression operator
     * @override
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * Whether the platform supports sequences.
     * Postgres has native support for sequences.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports database schemas.
     * 
     * @return boolean
     */",
 "/**
     * Whether the platform supports identity columns.
     * Postgres supports these through the SERIAL keyword.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform prefers sequences for ID generation.
     *
     * @return boolean
     */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaPgsqlReader.html
     * @param  string $table
     * @return string
     */",
 "/**
     * @param string $table
     * @param string $classAlias
     * @param string $namespaceAlias
     * @return string
     */",
 "/**
     * create a new database
     *
     * @param string $name name of the database that should be created
     * @throws PDOException
     * @return void
     * @override
     */",
 "/**
     * drop an existing database
     *
     * @param string $name name of the database that should be dropped
     * @throws PDOException
     * @access public
     */",
 "/**
     * Return the FOREIGN KEY query section dealing with non-standard options
     * as MATCH, INITIALLY DEFERRED, ON UPDATE, ...
     *
     * @param \Doctrine\DBAL\Schema\ForeignKeyConstraint $foreignKey         foreign key definition
     * @return string
     * @override
     */",
 "/**
     * generates the sql for altering an existing table on postgresql
     *
     * @param string $name          name of the table that is intended to be changed.
     * @param array $changes        associative array that contains the details of each type      *
     * @param boolean $check        indicates whether the function should just check if the DBMS driver
     *                              can perform the requested table alterations if the value is true or
     *                              actually perform them otherwise.
     * @see Doctrine_Export::alterTable()
     * @return array
     * @override
     */",
 "/**
     * Gets the SQL to create a sequence on this platform.
     *
     * @param \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * Drop existing sequence
     * @param  \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * @param  ForeignKeyConstraint|string $foreignKey
     * @param  Table|string $table
     * @return string
     */",
 "/**
     * Gets the SQL used to create a table.
     *
     * @param unknown_type $tableName
     * @param array $columns
     * @param array $options
     * @return unknown
     */",
 "/**
     * Postgres wants boolean values converted to the strings \'true\'/\'false\'.
     *
     * @param array $item
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column on the MySql platform.
     *
     * @params array $field
     * @override
     */",
 "/** @override */",
 "/**
     * Get the platform name for this instance
     *
     * @return string
     */",
 "/**
     * Gets the character casing of a column in an SQL result set.
     * 
     * PostgreSQL returns all column names in SQL result sets in lowercase.
     * 
     * @param string $column The column name for which to get the correct character casing.
     * @return string The column name in the character casing used in SQL result sets.
     */",
 "/**
     * Get the insert sql for an empty insert statement
     *
     * @param string $tableName 
     * @param string $identifierColumnName 
     * @return string $sql
     */",
 "/**
     * @inheritdoc
     */",
 "/**
 * PostgreSqlPlatform.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: PostgreSQLPlatform
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"LENGTH\" \"(\" StringPrimary \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param string  $script  The PHP script to run (as a string)
     * @param string  $cwd     The working directory
     * @param array   $env     The environment variables
     * @param integer $timeout The timeout in seconds
     * @param array   $options An array of options for proc_open
     *
     * @api
     */",
 "/**
     * Sets the path to the PHP binary to use.
     *
     * @api
     */",
 "/**
     * Runs the process.
     *
     * @param Closure|string|array $callback A PHP callback to run whenever there is some
     *                                       output available on STDOUT or STDERR
     *
     * @return integer The exit status code
     *
     * @api
     */",
 "/**
 * PhpProcess runs a PHP script in an independent process.
 *
 * $p = new PhpProcess(\'<?php echo \"foo\"; ?>\');
 * $p->run();
 * print $p->getOutput().\"\n\";
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Infer type of a given value, returning a compatible constant:
     * - Type (\Doctrine\DBAL\Types\Type::*)
     * - Connection (\Doctrine\DBAL\Connection::PARAM_*)
     * 
     * @param mixed $value Parameter value
     * 
     * @return mixed Parameter type constant
     */",
 "/**
 * Provides an enclosed support for parameter infering.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Available options:
     *
     *  * name:     The cookie name (null [omitted] by default)
     *  * id:       The session id (null [omitted] by default)
     *  * lifetime: Cookie lifetime
     *  * path:     Cookie path
     *  * domain:   Cookie domain
     *  * secure:   Cookie secure
     *  * httponly: Cookie http only
     *
     * The default values for most options are those returned by the session_get_cookie_params() function
     *
     * @param array $options  An associative array of session options
     */",
 "/**
     * Starts the session.
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * Reads data from this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param string $key     A unique key identifying your data
     * @param string $default Default value
     *
     * @return mixed Data associated with the key
     *
     * @api
     */",
 "/**
     * Removes data from this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param  string $key  A unique key identifying your data
     *
     * @return mixed Data associated with the key
     *
     * @api
     */",
 "/**
     * Writes data to this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param string $key   A unique key identifying your data
     * @param mixed  $data  Data associated with your key
     *
     * @api
     */",
 "/**
     * Regenerates id that represents this storage.
     *
     * @param  Boolean $destroy Destroy session when regenerating?
     *
     * @return Boolean True if session regenerated, false if error
     *
     * @api
     */",
 "/**
 * NativeSessionStorage.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Loads LESS files using the PHP implementation of less, lessphp.
 *
 * Less files are mostly compatible, but there are slight differences.
 *
 * To use this, you need to clone https://github.com/leafo/lessphp and make
 * sure to either include lessphp.inc.php or tell your autoloader that\'s where
 * lessc is located.
 *
 * @link http://leafo.net/lessphp/
 *
 * @author David Buchmann <david@liip.ch>
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * Oracle Keywordlist
 *
 * @license  BSD http://www.opensource.org/licenses/bsd-license.php
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      David Coallier <davidc@php.net>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Creates a redirect response so that it conforms to the rules defined for a redirect status code.
     *
     * @param string  $url    The URL to redirect to
     * @param integer $status The status code (302 by default)
     *
     * @see http://tools.ietf.org/html/rfc2616#section-10.3
     *
     * @api
     */",
 "/**
 * RedirectResponse represents an HTTP response doing a redirect.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * ProviderNotFoundException is thrown when no AuthenticationProviderInterface instance
 * supports an authentication Token.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"SUBSTRING\" \"(\" StringPrimary \",\" SimpleArithmeticExpression \",\" SimpleArithmeticExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Resolves whether the passed token implementation is authenticated
     * anonymously.
     *
     * If null is passed, the method must return false.
     *
     * @param TokenInterface $token
     *
     * @return Boolean
     */",
 "/**
     * Resolves whether the passed token implementation is authenticated
     * using remember-me capabilities.
     *
     * @param TokenInterface $token
     *
     * @return Boolean
     */",
 "/**
     * Resolves whether the passed token implementation is fully authenticated.
     *
     * @param TokenInterface $token
     *
     * @return Boolean
     */",
 "/**
 * Interface for resolving the authentication status of a given token.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * This after invocation provider filters returned objects based on ACLs.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @param ClassMetadata $classMetadata
     * @param Schema $schema
     * @param Table $classTable
     */",
 "/**
     * @return EntityManager
     */",
 "/**
     * @return Schema
     */",
 "/**
 * Event Args used for the Events::postGenerateSchema event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param array $extensions An array of FormExtensionInterface
     *
     * @throws UnexpectedTypeException if any extension does not implement FormExtensionInterface
     */",
 "/**
     * Returns whether the given type is supported.
     *
     * @param string $name The name of the type
     *
     * @return Boolean Whether the type is supported
     */",
 "/**
     * Add a type.
     *
     * @param FormTypeInterface $type The type
     */",
 "/**
     * Returns a type by name.
     *
     * This methods registers the type extensions from the form extensions.
     *
     * @param string|FormTypeInterface $name The name of the type or a type instance
     *
     * @return FormTypeInterface The type
     *
     * @throws FormException if the type can not be retrieved from any extension
     */",
 "/**
     * Returns a form.
     *
     * @see createBuilder()
     *
     * @param string|FormTypeInterface  $type       The type of the form
     * @param mixed                     $data       The initial data
     * @param array                     $options    The options
     *
     * @return Form The form named after the type
     *
     * @throws FormException if any given option is not applicable to the given type
     */",
 "/**
     * Returns a form.
     *
     * @see createNamedBuilder()
     *
     * @param string|FormTypeInterface  $type       The type of the form
     * @param string                    $name       The name of the form
     * @param mixed                     $data       The initial data
     * @param array                     $options    The options
     *
     * @return Form The form
     *
     * @throws FormException if any given option is not applicable to the given type
     */",
 "/**
     * Returns a form for a property of a class.
     *
     * @see createBuilderForProperty()
     *
     * @param string $class     The fully qualified class name
     * @param string $property  The name of the property to guess for
     * @param mixed  $data      The initial data
     * @param array  $options   The options for the builder
     *
     * @return Form The form named after the property
     *
     * @throws FormException if any given option is not applicable to the form type
     */",
 "/**
     * Returns a form builder
     *
     * @param string|FormTypeInterface  $type       The type of the form
     * @param mixed                     $data       The initial data
     * @param array                     $options    The options
     *
     * @return FormBuilder The form builder
     *
     * @throws FormException if any given option is not applicable to the given type
     */",
 "/**
     * Returns a form builder.
     *
     * @param string|FormTypeInterface  $type       The type of the form
     * @param string                    $name       The name of the form
     * @param mixed                     $data       The initial data
     * @param array                     $options    The options
     *
     * @return FormBuilder The form builder
     *
     * @throws FormException if any given option is not applicable to the given type
     */",
 "/**
     * Returns a form builder for a property of a class.
     *
     * If any of the \'max_length\', \'required\' and type options can be guessed,
     * and are not provided in the options argument, the guessed value is used.
     *
     * @param string $class     The fully qualified class name
     * @param string $property  The name of the property to guess for
     * @param mixed  $data      The initial data
     * @param array  $options   The options for the builder
     *
     * @return FormBuilder The form builder named after the property
     *
     * @throws FormException if any given option is not applicable to the form type
     */",
 "/**
     * Initializes the guesser chain.
     */",
 "/**
     * Loads a type.
     *
     * @param string $name The type name
     *
     * @throws FormException if the type is not provided by any registered extension
     */",
 "/**
     * Loads the extensions for a given type.
     *
     * @param FormTypeInterface $type The type
     */",
 "/**
     * Sets a service.
     *
     * @param string $id      The service identifier
     * @param object $service The service instance
     * @param string $scope   The scope of the service
     *
     * @api
     */",
 "/**
     * Gets a service.
     *
     * @param  string $id              The service identifier
     * @param  int    $invalidBehavior The behavior when the service does not exist
     *
     * @return object The associated service
     *
     * @throws \InvalidArgumentException if the service is not defined
     *
     * @see Reference
     *
     * @api
     */",
 "/**
     * Returns true if the given service is defined.
     *
     * @param  string  $id      The service identifier
     *
     * @return Boolean true if the service is defined, false otherwise
     *
     * @api
     */",
 "/**
     * Gets a parameter.
     *
     * @param  string $name The parameter name
     *
     * @return mixed  The parameter value
     *
     * @throws  \InvalidArgumentException if the parameter is not defined
     *
     * @api
     */",
 "/**
     * Checks if a parameter exists.
     *
     * @param  string $name The parameter name
     *
     * @return Boolean The presence of parameter in container
     *
     * @api
     */",
 "/**
     * Sets a parameter.
     *
     * @param string $name  The parameter name
     * @param mixed  $value The parameter value
     *
     * @api
     */",
 "/**
     * Enters the given scope
     *
     * @param string $name
     *
     * @return void
     *
     * @api
     */",
 "/**
     * Leaves the current scope, and re-enters the parent scope
     *
     * @param string $name
     *
     * @return void
     *
     * @api
     */",
 "/**
     * Adds a scope to the container
     *
     * @param ScopeInterface $scope
     *
     * @return void
     *
     * @api
     */",
 "/**
     * Whether this container has the given scope
     *
     * @param string $name
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Determines whether the given scope is currently active.
     *
     * It does however not check if the scope actually exists.
     *
     * @param string $name
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
 * ContainerInterface is the interface implemented by service container classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
     * Creates a temporary RunAsToken.
     *
     * The returned Token must have a complementing AuthenticationProvider implementation.
     *
     * @param TokenInterface $token the original Token
     * @param object $secureObject the secure object which caused this call
     * @param array $attributes an array of attributes to apply to the built token
     * @return TokenInterface
     */",
 "/**
     * Whether this RunAsManager supports the given attribute
     *
     * @param string $attribute
     * @return Boolean
     */",
 "/**
     * Whether this RunAsManager supports the given class.
     *
     * @param string $className The class of the secure object which requests RunAs capabilities
     * @return Boolean
     */",
 "/**
 * RunAsManagerInterface
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Dumps the ContainerBuilder to a cache file so that it can be used by
 * debugging tools such as the container:debug console command.
 *
 * @author Ryan Weaver <ryan@thatsquality.com>
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param array $fieldDeclaration
     * @param AbstractPlatform $platform
     * @return string
     */",
 "/**
     * Converts a value from its database representation to its PHP representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The PHP representation of the value.
     */",
 "/**
     * @dataProvider getMissingControllersTest
     */",
 "/**
     * Performs some checks if logging was requested
     *
     * @param Boolean        $granted
     * @param EntryInterface $ace
     * @return void
     */",
 "/**
     * This method is only called when logging is needed
     *
     * @param Boolean        $granted
     * @param EntryInterface $ace
     * @return void
     */",
 "/**
 * Base audit logger implementation
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/** @Annotation */",
 "/**
     * Constructor.
     *
     * @param string $bundle A bundle name or empty string
     * @param string $engine The templating engine
     * @param array  $dirs   An array of directories to merge
     */",
 "/**
 * Encapsulates logic for creating a directory resource.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"ABS\" \"(\" SimpleArithmeticExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Creates a Client.
     *
     * @param array   $options An array of options to pass to the createKernel class
     * @param array   $server  An array of server parameters
     *
     * @return Client A Client instance
     */",
 "/**
     * Finds the directory where the phpunit.xml(.dist) is stored.
     *
     * If you run tests with the PHPUnit CLI tool, everything will work as expected.
     * If not, override this method in your test classes.
     *
     * @return string The directory where phpunit.xml(.dist) is stored
     */",
 "/**
     * Finds the value of configuration flag from cli
     *
     * PHPUnit will use the last configuration argument on the command line, so this only returns
     * the last configuration argument
     *
     * @return string The value of the phpunit cli configuration option
     */",
 "/**
     * Attempts to guess the kernel location.
     *
     * When the Kernel is located, the file is required.
     *
     * @return string The Kernel class name
     */",
 "/**
     * Creates a Kernel.
     *
     * Available options:
     *
     *  * environment
     *  * debug
     *
     * @param array $options An array of options
     *
     * @return HttpKernelInterface A HttpKernelInterface instance
     */",
 "/**
     * Shuts the kernel down if it was used in the test.
     */",
 "/**
 * WebTestCase is the base class for functional tests.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * FirewallMap allows configuration of different firewalls for specific parts
 * of the website.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * SerializerAware Normalizer implementation
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
     * Initializes a new ClassMetadata instance that will hold the object-relational mapping
     * metadata of the class with the given name.
     *
     * @param string $entityName The name of the entity class the new instance is used for.
     */",
 "/**
     * Gets the ReflectionClass instance of the mapped class.
     *
     * @return ReflectionClass
     */",
 "/**
     * Sets the change tracking policy used by this class.
     *
     * @param integer $policy
     */",
 "/**
     * Whether the change tracking policy of this class is \"deferred explicit\".
     *
     * @return boolean
     */",
 "/**
     * Whether the change tracking policy of this class is \"deferred implicit\".
     *
     * @return boolean
     */",
 "/**
     * Whether the change tracking policy of this class is \"notify\".
     *
     * @return boolean
     */",
 "/**
     * Checks whether a field is part of the identifier/primary key field(s).
     *
     * @param string $fieldName  The field name
     * @return boolean  TRUE if the field is part of the table identifier/primary key field(s),
     *                  FALSE otherwise.
     */",
 "/**
     * Check if the field is unique.
     *
     * @param string $fieldName  The field name
     * @return boolean  TRUE if the field is unique, FALSE otherwise.
     */",
 "/**
     * Check if the field is not null.
     *
     * @param string $fieldName  The field name
     * @return boolean  TRUE if the field is not null, FALSE otherwise.
     */",
 "/**
     * Gets a column name for a field name.
     * If the column name for the field cannot be found, the given field name
     * is returned.
     *
     * @param string $fieldName The field name.
     * @return string  The column name.
     */",
 "/**
     * Gets the mapping of a (regular) field that holds some data but not a
     * reference to another object.
     *
     * @param string $fieldName  The field name.
     * @return array  The field mapping.
     */",
 "/**
     * Gets the mapping of an association.
     *
     * @see ClassMetadataInfo::$associationMappings
     * @param string $fieldName  The field name that represents the association in
     *                           the object model.
     * @return array The mapping.
     */",
 "/**
     * Gets all association mappings of the class.
     *
     * @return array
     */",
 "/**
     * Gets the field name for a column name.
     * If no field name can be found the column name is returned.
     *
     * @param string $columnName    column name
     * @return string               column alias
     */",
 "/**
     * Gets the named query.
     *
     * @see ClassMetadataInfo::$namedQueries
     * @throws MappingException
     * @param string $queryName The query name
     * @return string
     */",
 "/**
     * Gets all named queries of the class.
     *
     * @return array
     */",
 "/**
     * Validates & completes the given field mapping.
     *
     * @param array $mapping  The field mapping to validated & complete.
     * @return array  The validated and completed field mapping.
     */",
 "/**
*Validates&completesthebasicmappinginformationthatiscommontoall
*associationmappings(one-to-one,many-ot-one,one-to-many,many-to-many).
*
*@paramarray$mappingThemapping.
*@returnarrayTheupdatedmapping.
*@throwsMappingExceptionIfsomethingiswrongwiththemapping.
*/",
 "/**
*Validates&completesaone-to-oneassociationmapping.
*
*@paramarray$mappingThemappingtovalidate&complete.
*@returnarrayThevalidated&completedmapping.
*@override
*/",
 "/**
*Validatesandcompletesthemapping.
*
*@paramarray$mappingThemappingtovalidateandcomplete.
*@returnarrayThevalidatedandcompletedmapping.
*@override
*/",
 "/**
*Getstheidentifier(primarykey)fieldnamesoftheclass.
*
*@returnmixed
*/",
 "/**
*Getsthenameofthesingleidfield.Notethatthisonlyworkson
*entityclassesthathaveasingle-fieldpk.
*
*@returnstring
*@throwsMappingExceptionIftheclasshasacompositeprimarykey.
*/",
 "/**
*Getsthecolumnnameofthesingleidcolumn.Notethatthisonlyworkson
*entityclassesthathaveasingle-fieldpk.
*
*@returnstring
*@throwsMappingExceptionIftheclasshasacompositeprimarykey.
*/",
 "/**
*INTERNAL:
*Setsthemappedidentifier/primarykeyfieldsofthisclass.
*MainlyusedbytheClassMetadataFactorytoassigninheritedidentifiers.
*
*@paramarray$identifier
*/",
 "/**
*Getsthemappedidentifierfieldofthisclass.
*
*@returnstring$identifier
*/",
 "/**
*Checkswhethertheclasshasa(mapped)fieldwithacertainname.
*
*@returnboolean
*/",
 "/**
*Getsanarraycontainingallthecolumnnames.
*
*@returnarray
*/",
 "/**
*Returnsanarraywithalltheidentifiercolumnnames.
*
*@returnarray
*/",
 "/**
*SetsthetypeofIdgeneratortouseforthemappedclass.
*/",
 "/**
*CheckswhetherthemappedclassusesanIdgenerator.
*
*@returnbooleanTRUEifthemappedclassusesanIdgenerator,FALSEotherwise.
*/",
 "/**
*@returnboolean
*/",
 "/**
*CheckswhetherthemappedclassusestheJOINEDinheritancemappingstrategy.
*
*@returnbooleanTRUEiftheclassparticipatesinaJOINEDinheritancemapping,
*FALSEotherwise.
*/",
 "/**
*CheckswhetherthemappedclassusestheSINGLE_TABLEinheritancemappingstrategy.
*
*@returnbooleanTRUEiftheclassparticipatesinaSINGLE_TABLEinheritancemapping,
*FALSEotherwise.
*/",
 "/**
*CheckswhetherthemappedclassusestheTABLE_PER_CLASSinheritancemappingstrategy.
*
*@returnbooleanTRUEiftheclassparticipatesinaTABLE_PER_CLASSinheritancemapping,
*FALSEotherwise.
*/",
 "/**
*CheckswhethertheclassusesanidentitycolumnfortheIdgeneration.
*
*@returnbooleanTRUEiftheclassusestheIDENTITYgenerator,FALSEotherwise.
*/",
 "/**
*Checkswhethertheclassusesasequenceforidgeneration.
*
*@returnbooleanTRUEiftheclassusestheSEQUENCEgenerator,FALSEotherwise.
*/",
 "/**
*Checkswhethertheclassusesatableforidgeneration.
*
*@returnbooleanTRUEiftheclassusestheTABLEgenerator,FALSEotherwise.
*/",
 "/**
*Checkswhethertheclasshasanaturalidentifier/pk(whichmeansitdoes
*notuseanyIdgenerator.
*
*@returnboolean
*/",
 "/**
*Getsthetypeofafield.
*
*@paramstring$fieldName
*@return\Doctrine\DBAL\Types\Type
*/",
 "/**
*Getsthetypeofacolumn.
*
*@return\Doctrine\DBAL\Types\Type
*/",
 "/**
*Getsthenameoftheprimarytable.
*
*@returnstring
*/",
 "/**
*Getsthetablenametousefortemporaryidentifiertablesofthisclass.
*
*@returnstring
*/",
 "/**
*Setsthemappedsubclassesofthisclass.
*
*@paramarray$subclassesThenamesofallmappedsubclasses.
*/",
 "/**
*Setstheparentclassnames.
*Assumesthattheclassnamesinthepassedarrayareintheorder:
*directParent->directParentParent->directParentParentParent...->root.
*/",
 "/**
*Setstheinheritancetypeusedbytheclassandit\'ssubclasses.
*
*@paraminteger$type
*/",
 "/**
*Checkswhetheramappedfieldisinheritedfromanentitysuperclass.
*
*@returnbooleanTRUEifthefieldisinherited,FALSEotherwise.
*/",
 "/**
*Checkswhetheramappedassociationfieldisinheritedfromasuperclass.
*
*@paramstring$fieldName
*@returnbooleanTRUEifthefieldisinherited,FALSEotherwise.
*/",
 "/**
*Setsthenameoftheprimarytabletheclassismappedto.
*
*@paramstring$tableNameThetablename.
*@deprecatedUse{@linksetPrimaryTable}.
*/",
 "/**
*Setstheprimarytabledefinition.Theprovidedarraysupportsthe
*followingstructure:
*
*name=><tableName>(optional,defaultstoclassname)
*indexes=>arrayofindexes(optional)
*uniqueConstraints=>arrayofconstraints(optional)
*
*Ifakeyisomitted,thecurrentvalueiskept.
*
*@paramarray$tableThetabledescription.
*/",
 "/**
*Checkswhetherthegiventypeidentifiesaninheritancetype.
*
*@paraminteger$type
*@returnbooleanTRUEifthegiventypeidentifiesaninheritancetype,FALSeotherwise.
*/",
 "/**
*Addsamappedfieldtotheclass.
*
*@paramarray$mappingThefieldmapping.
*/",
 "/**
*INTERNAL:
*Addsanassociationmappingwithoutcompleting/validatingit.
*Thisismainlyusedtoaddinheritedassociationmappingstoderivedclasses.
*
*@paramarray$mapping
*/",
 "/**
*INTERNAL:
*Addsafieldmappingwithoutcompleting/validatingit.
*Thisismainlyusedtoaddinheritedfieldmappingstoderivedclasses.
*
*@paramarray$mapping
*/",
 "/**
*INTERNAL:
*Addsanamedquerytothisclass.
*
*@throwsMappingException
*@paramarray$queryMapping
*/",
 "/**
*Addsaone-to-onemapping.
*
*@paramarray$mappingThemapping.
*/",
 "/**
*Addsaone-to-manymapping.
*
*@paramarray$mappingThemapping.
*/",
 "/**
*Addsamany-to-onemapping.
*
*@paramarray$mappingThemapping.
*/",
 "/**
*Addsamany-to-manymapping.
*
*@paramarray$mappingThemapping.
*/",
 "/**
*Storestheassociationmapping.
*
*@paramAssociationMapping$assocMapping
*/",
 "/**
*Registersacustomrepositoryclassfortheentityclass.
*
*@paramstring$mapperClassNameTheclassnameofthecustommapper.
*/",
 "/**
*Dispatchesthelifecycleeventofthegivenentitytotheregistered
*lifecyclecallbacksandlifecyclelisteners.
*
*@paramstring$eventThelifecycleevent.
*@paramEntity$entityTheEntityonwhichtheeventoccured.
*/",
 "/**
*Whethertheclasshasanyattachedlifecyclelistenersorcallbacksforalifecycleevent.
*
*@paramstring$lifecycleEvent
*@returnboolean
*/",
 "/**
*Getstheregisteredlifecyclecallbacksforanevent.
*
*@paramstring$event
*@returnarray
*/",
 "/**
*Addsalifecyclecallbackforentitiesofthisclass.
*
*Note:Ifthesamecallbackisregisteredmorethanonce,theoldone
*willbeoverridden.
*
*@paramstring$callback
*@paramstring$event
*/",
 "/**
*Setsthelifecyclecallbacksforentitiesofthisclass.
*Anypreviouslyregisteredcallbacksareoverwritten.
*
*@paramarray$callbacks
*/",
 "/**
*Setsthediscriminatorcolumndefinition.
*
*@paramarray$columnDef
*@seegetDiscriminatorColumn()
*/",
 "/**
*Setsthediscriminatorvaluesusedbythisclass.
*UsedforJOINEDandSINGLE_TABLEinheritancemappingstrategies.
*
*@paramarray$map
*/",
 "/**
*Checkswhethertheclasshasanamedquerywiththegivenqueryname.
*
*@paramstring$fieldName
*@returnboolean
*/",
 "/**
*Checkswhethertheclasshasamappedassociationwiththegivenfieldname.
*
*@paramstring$fieldName
*@returnboolean
*/",
 "/**
*Checkswhethertheclasshasamappedassociationforthespecifiedfield
*andifyes,checkswhetheritisasingle-valuedassociation(to-one).
*
*@paramstring$fieldName
*@returnbooleanTRUEiftheassociationexistsandissingle-valued,FALSEotherwise.
*/",
 "/**
*Checkswhethertheclasshasamappedassociationforthespecifiedfield
*andifyes,checkswhetheritisacollection-valuedassociation(to-many).
*
*@paramstring$fieldName
*@returnbooleanTRUEiftheassociationexistsandiscollection-valued,FALSEotherwise.
*/",
 "/**
*Isthisanassociationthatonlyhasasinglejoincolumn?
*
*@paramstring$fieldName
*@returnbool
*/",
 "/**
*Returnthesingleassociationjoincolumn(ifany).
*
*@paramstring$fieldName
*@returnstring
*/",
 "/**
*Returnthesingleassociationreferencedjoincolumnname(ifany).
*
*@paramstring$fieldName
*@returnstring
*/",
 "/**
*Usedtoretrieveafieldnameforeitherfieldorassociationfromagivencolumn,
*
*Thismethodisusedinforeign-keyasprimary-keycontexts.
*
*@paramstring$columnName
*@returnstring
*/",
 "/**
*SetstheIDgeneratorusedtogenerateIDsforinstancesofthisclass.
*
*@paramAbstractIdGenerator$generator
*/",
 "/**
*SetsthedefinitionofthesequenceIDgeneratorforthisclass.
*
*Thedefinitionmusthavethefollowingstructure:
*<code>
*array(
*\'sequenceName\'=>\'name\',
*\'allocationSize\'=>20,
*\'initialValue\'=>1
*)
*</code>
*
*@paramarray$definition
*/",
 "/**
*Setstheversionfieldmappingusedforversioning.Setsthedefault
*valuetousedependingonthecolumntype.
*
*@paramarray$mappingTheversionfieldmappingarray
*/",
 "/**
*Setswhetherthisclassistobeversionedforoptimisticlocking.
*
*@paramboolean$bool
*/",
 "/**
*Setsthenameofthefieldthatistobeusedforversioningifthisclassis
*versionedforoptimisticlocking.
*
*@paramstring$versionField
*/",
 "/**
*Markthisclassasreadonly,nochangetrackingisappliedtoit.
*
*@returnvoid
*/",
 "/**
*Anumericallyindexedlistoffieldnamesofthispersistentclass.
*
*Thisarrayincludesidentifierfieldsifpresentonthisclass.
*
*@returnarray
*/",
 "/**
*Anumericallyindexedlistofassociationnamesofthispersistentclass.
*
*Thisarrayincludesidentifierassociationsifpresentonthisclass.
*
*@returnarray
*/",
 "/**
*Returnsthetargetclassnameofthegivenassociation.
*
*@paramstring$assocName
*@returnstring
*/",
 "/**
*Getfully-qualifiedclassnameofthispersistentclass.
*
*@returnstring
*/",
 "/**
*Getsthe(possiblyquoted)identifiercolumnnamesforsafeuseinanSQLstatement.
*
*@paramAbstractPlatform$platform
*@returnarray
*/",
 "/**
*Getsthe(possiblyquoted)columnnameofamappedfieldforsafeuse
*inanSQLstatement.
*
*@paramstring$field
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*Getsthe(possiblyquoted)primarytablenameofthisclassforsafeuse
*inanSQLstatement.
*
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*Getsthe(possiblyquoted)nameofthejointable.
*
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*A<tt>ClassMetadata</tt>instanceholdsalltheobject-relationalmappingmetadata
*ofanentityandit\'sassociations.
*
*Oncepopulated,ClassMetadatainstancesareusuallycachedinaserializedform.
*
*<b>IMPORTANTNOTE:</b>
*
*Thefieldsofthisclassareonlypublicfor2reasons:
*1)ToallowfastREADaccess.
*2)Todrasticallyreducethesizeofaserializedinstance(private/protectedmembers
*getthewholeclassname,namespaceinclusive,prependedtoeverypropertyin
*theserializedrepresentation).
*
*@authorRomanBorschel<roman@code-factory.org>
*@authorJonathanH.Wage<jonwage@gmail.com>
*@since2.0
*/",
 "/**
     * Tokenizes a source code.
     *
     * @param  string $code     The source code
     * @param  string $filename A unique identifier for the source code
     *
     * @return Twig_TokenStream A token stream instance
     */",
 "/**
 * Lexes a template string.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Stub implementation for the intl_is_failure function of the intl extension
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @param  integer $errorCode  The error code returned by intl_get_error_code()
 * @return Boolean Whether the error code indicates an error
 * @see    Symfony\Component\Locale\Stub\StubIntl::isFailure
 */",
 "/**
 * Stub implementation for the intl_get_error_code function of the intl extension
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @return Boolean The error code of the last intl function call or
 *                 StubIntl::U_ZERO_ERROR if no error occurred
 * @see    Symfony\Component\Locale\Stub\StubIntl::getErrorCode
 */",
 "/**
 * Stub implementation for the intl_get_error_code function of the intl extension
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @return Boolean The error message of the last intl function call or
 *                 \"U_ZERO_ERROR\" if no error occurred
 * @see    Symfony\Component\Locale\Stub\StubIntl::getErrorMessage
 */",
 "/**
     * Loads the metadata for the specified class into the provided container.
     * 
     * @param string $className
     * @param ClassMetadataInfo $metadata
     */",
 "/**
     * Gets the names of all mapped classes known to this driver.
     * 
     * @return array The names of all mapped classes known to this driver.
     */",
 "/**
     * Whether the class with the specified name should have its metadata loaded.
     * This is only the case if it is either mapped as an Entity or a
     * MappedSuperclass.
     *
     * @param string $className
     * @return boolean
     */",
 "/**
 * Contract for metadata drivers.
 *
 * @since 2.0
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @todo Rename: MetadataDriver or MappingDriver
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Constructor
     *
     * @param integer                   $id
     * @param AclInterface              $acl
     * @param string                    $field
     * @param SecurityIdentityInterface $sid
     * @param string                    $strategy
     * @param integer                   $mask
     * @param Boolean                   $granting
     * @param Boolean                   $auditFailure
     * @param Boolean                   $auditSuccess
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Field-aware ACE implementation which is auditable
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * ConditionalExpression ::= ConditionalTerm {\"OR\" ConditionalTerm}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Loads the web profiler configuration.
     *
     * @param array            $configs   An array of configuration settings
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
 * WebProfilerExtension.
 *
 * Usage:
 *
 *     <webprofiler:config
 *        toolbar=\"true\"
 *        intercept-redirects=\"true\"
 *    />
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * The default session strategy implementation.
 *
 * Supports the following strategies:
 * NONE: the session is not changed
 * MIGRATE: the session id is updated, attributes are kept
 * INVALIDATE: the session id is updated, attributes are lost
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * AccessDeniedException is thrown when the account has not the required role.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Type that maps a database BIGINT to a PHP string.
 *
 * @author robo
 * @since 2.0
 */",
 "/**
     * @expectedException \RuntimeException
     */",
 "/**
 * PostgreSQL Keywordlist
 *
 * @license     BSD http://www.opensource.org/licenses/bsd-license.php
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Marcelo Santos Araujo <msaraujo@php.net>
 */",
 "/**
     * Returns the name of the node.
     *
     * @return string The name of the node
     */",
 "/**
     * Returns the path of the node.
     *
     * @return string The node path
     */",
 "/**
     * Returns true when the node is required.
     *
     * @return Boolean If the node is required
     */",
 "/**
     * Returns true when the node has a default value.
     *
     * @return Boolean If the node has a default value
     */",
 "/**
     * Returns the default value of the node.
     *
     * @return mixed The default value
     * @throws \RuntimeException if the node has no default value
     */",
 "/**
     * Normalizes the supplied value.
     *
     * @param mixed $value The value to normalize
     *
     * @return mixed The normalized value
     */",
 "/**
     * Merges two values together.
     *
     * @param mixed $leftSide
     * @param mixed $rightSide
     *
     * @return mixed The merged values
     */",
 "/**
     * Finalizes a value.
     *
     * @param mixed $value The value to finalize
     *
     * @return mixed The finalized value
     */",
 "/**
 * Common Interface among all nodes.
 *
 * In most cases, it is better to inherit from BaseNode instead of implementing
 * this interface yourself.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
*Parsesaclass.
*
*@param\ReflectionClass$class
*/",
 "/**
*Parsesafilefornamespaces/use/classdeclarations.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
 * Contains all events thrown in the HttpKernel component
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
 * DefaultController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Returns an array of prototypical calls and options.
     *
     * @return array Prototypes and options
     */",
 "/**
     * Returns setup code for the reflection scriptlet.
     *
     * @return string Some PHP setup code
     */",
 "/**
 * Loads asset formulae from PHP files.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * SensioFrameworkExtraBundle.
 *
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * RegisterPluginsPass registers Swiftmailer plugins.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Returns the token parser instances to add to the existing list.
     *
     * @return array An array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances
     */",
 "/**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
     * Copies a file.
     *
     * This method only copies the file if the origin file is newer than the target file.
     *
     * By default, if the target already exists, it is not overridden.
     *
     * @param string $originFile The original filename
     * @param string $targetFile The target filename
     * @param array  $override   Whether to override an existing file or not
     */",
 "/**
     * Creates a directory recursively.
     *
     * @param  string|array|\Traversable $dirs The directory path
     * @param  int                       $mode The directory mode
     *
     * @return Boolean true if the directory has been created, false otherwise
     */",
 "/**
     * Creates empty files.
     *
     * @param string|array|\Traversable $files A filename, an array of files, or a \Traversable instance to remove
     */",
 "/**
     * Removes files or directories.
     *
     * @param string|array|\Traversable $files A filename, an array of files, or a \Traversable instance to remove
     */",
 "/**
     * Change mode for an array of files or directories.
     *
     * @param string|array|\Traversable $files A filename, an array of files, or a \Traversable instance to remove
     * @param integer                   $mode  The new mode
     * @param integer                   $umask The mode mask (octal)
     */",
 "/**
     * Renames a file.
     *
     * @param string $origin  The origin filename
     * @param string $target  The new filename
     *
     * @throws \RuntimeException When target file already exists
     */",
 "/**
     * Creates a symbolic link or copy a directory.
     *
     * @param string  $originDir     The origin directory path
     * @param string  $targetDir     The symbolic link name
     * @param Boolean $copyOnWindows Whether to copy files if on Windows
     */",
 "/**
     * Mirrors a directory to another.
     *
     * @param string $originDir      The origin directory
     * @param string $targetDir      The target directory
     * @param \Traversable $iterator A Traversable instance
     * @param array  $options        An array of boolean options
     *                               Valid options are:
     *                                 - $options[\'override\'] Whether to override an existing file on copy or not (see copy())
     *                                 - $options[\'copy_on_windows\'] Whether to copy files instead of links on Windows (see symlink())
     *
     * @throws \RuntimeException When file type is unknown
     */",
 "/**
*Returnswhetherthefilepathisanabsolutepath.
*
*@paramstring$fileAfilepath
*
*@returnBoolean
*/",
 "/**
*Providesbasicutilitytomanipulatethefilesystem.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * Constructor.
     *
     * @param LoggerInterface $logger A LoggerInterface instance
     */",
 "/**
     * Returns the Controller instance associated with a Request.
     *
     * This method looks for a \'_controller\' request attribute that represents
     * the controller name (a string like ClassName::MethodName).
     *
     * @param Request $request A Request instance
     *
     * @return mixed|Boolean A PHP callable representing the Controller,
     *                       or false if this resolver is not able to determine the controller
     *
     * @throws \InvalidArgumentException|\LogicException If the controller can\'t be found
     *
     * @api
     */",
 "/**
     * Returns the arguments to pass to the controller.
     *
     * @param Request $request    A Request instance
     * @param mixed   $controller A PHP callable
     *
     * @throws \RuntimeException When value for argument given is not provided
     *
     * @api
     */",
 "/**
     * Returns a callable for the given controller.
     *
     * @param string $controller A Controller string
     *
     * @return mixed A PHP callable
     */",
 "/**
 * ControllerResolver.
 *
 * This implementation uses the \'_controller\' request attribute to determine
 * the controller to execute and uses the request attributes to determine
 * the controller method arguments.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * @author Kris Wallsmith <kris@symfony.com>
 * @Annotation
 */",
 "/**
   * Create a new TransportException with $message.
   * @param string $message
   */",
 "/**
 * TransportException thrown when an error occurs in the Transport subsystem.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
 * Exception thrown when a route cannot be generated because of missing
 * mandatory parameters.
 *
 * @author Alexandre Salom?? <alexandre.salome@gmail.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param integer         $verbosity The verbosity level (self::VERBOSITY_QUIET, self::VERBOSITY_NORMAL,
     *                                   self::VERBOSITY_VERBOSE)
     * @param Boolean         $decorated Whether to decorate messages or not (null for auto-guessing)
     * @param OutputFormatter $formatter Output formatter instance
     *
     * @api
     */",
 "/**
 * ConsoleOutput is the default class for all CLI output. It uses STDOUT.
 *
 * This class is a convenient wrapper around `StreamOutput`.
 *
 *     $output = new ConsoleOutput();
 *
 * This is equivalent to:
 *
 *     $output = new StreamOutput(fopen(\'php://stdout\', \'w\'));
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Create a new PopBeforeSmtpPlugin for $host and $port.
   * 
   * @param string $host
   * @param int $port
   * @param string $cypto as \"tls\" or \"ssl\"
   */",
 "/**
   * Create a new PopBeforeSmtpPlugin for $host and $port.
   * 
   * @param string $host
   * @param int $port
   * @param string $cypto as \"tls\" or \"ssl\"
   * 
   * @return Swift_Plugins_PopBeforeSmtpPlugin
   */",
 "/**
   * Set a Pop3Connection to delegate to instead of connecting directly.
   * 
   * @param Swift_Plugins_Pop_Pop3Connection $connection
   */",
 "/**
   * Bind this plugin to a specific SMTP transport instance.
   * 
   * @param Swift_Transport
   */",
 "/**
   * Set the connection timeout in seconds (default 10).
   * 
   * @param int $timeout
   */",
 "/**
   * Set the username to use when connecting (if needed).
   * 
   * @param string $username
   */",
 "/**
   * Set the password to use when connecting (if needed).
   * 
   * @param string $password
   */",
 "/**
   * Connect to the POP3 host and authenticate.
   * 
   * @throws Swift_Plugins_Pop_Pop3Exception if connection fails
   */",
 "/**
   * Disconnect from the POP3 host.
   */",
 "/**
   * Invoked just before a Transport is started.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
   * Not used.
   */",
 "/**
   * Not used.
   */",
 "/**
   * Not used.
   */",
 "/**
 * Makes sure a connection to a POP3 host has been established prior to connecting to SMTP.
 * 
 * @package Swift
 * @subpackage Plugins
 * 
 * @author Chris Corbyn
 */",
 "/**
     * Constructor
     *
     */",
 "/**
     * Set the parent node
     *
     * @param ParentNodeDefinitionInterface $parent The parent node
     *
     * @return NodeBuilder This node builder
     */",
 "/**
     * Creates a child array node
     *
     * @param string $name The name of the node
     *
     * @return ArrayNodeDefinition The child node
     */",
 "/**
     * Creates a child scalar node.
     *
     * @param string $name the name of the node
     *
     * @return ScalarNodeDefinition The child node
     */",
 "/**
     * Creates a child Boolean node.
     *
     * @param string $name The name of the node
     *
     * @return BooleanNodeDefinition The child node
     */",
 "/**
     * Creates a child variable node.
     *
     * @param string $name The name of the node
     *
     * @return VariableNodeDefinition The builder of the child node
     */",
 "/**
     * Returns the parent node.
     *
     * @return ParentNodeDefinitionInterface The parent node
     */",
 "/**
     * Creates a child node.
     *
     * @param string $name The name of the node
     * @param string $type The type of the node
     *
     * @return NodeDefinition The child node
     *
     * @throws \RuntimeException When the node type is not registered
     * @throws \RuntimeException When the node class is not found
     */",
 "/**
     * Add or override a node Type
     *
     * @param string $type The name of the type
     * @param string $class The fully qualified name the node definition class
     */",
 "/**
     * Returns the class name of the node definition
     *
     * @param string $type The node type
     *
     * @return string The node definition class name
     *
     * @throws \RuntimeException When the node type is not registered
     * @throws \RuntimeException When the node class is not found
     */",
 "/**
 * This class provides a fluent interface for building a node.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Returns either the HTTP or SSL version of an asset package.
     *
     * @param Request $request The current request
     * @param string  $httpId  The id for the package to use when the current request is HTTP
     * @param string  $sslId   The id for the package to use when the current request is SSL
     *
     * @return PackageInterface The package
     */",
 "/**
 * Creates packages based on whether the current request is secure.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * ArithmeticExpression ::= SimpleArithmeticExpression | \"(\" Subselect \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * RangeVariableDeclaration ::= AbstractSchemaName [\"AS\"] AliasIdentificationVariable
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string $prefix A prefix to create a namespace in APC
     *
     * @api
     */",
 "/**
     * Finds a file by class name while caching lookups to APC.
     *
     * @param string $class A class name to resolve to file
     */",
 "/**
 * ApcUniversalClassLoader implements a \"universal\" autoloader cached in APC for PHP 5.3.
 *
 * It is able to load classes that use either:
 *
 *  * The technical interoperability standards for PHP 5.3 namespaces and
 *    class names (https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md);
 *
 *  * The PEAR naming convention for classes (http://pear.php.net/).
 *
 * Classes from a sub-namespace or a sub-hierarchy of PEAR classes can be
 * looked for in a list of locations to ease the vendoring of a sub-set of
 * classes for large projects.
 *
 * Example usage:
 *
 *     require \'vendor/symfony/src/Symfony/Component/ClassLoader/UniversalClassLoader.php\';
 *     require \'vendor/symfony/src/Symfony/Component/ClassLoader/ApcUniversalClassLoader.php\';
 *
 *     use Symfony\Component\ClassLoader\ApcUniversalClassLoader;
 *
 *     $loader = new ApcUniversalClassLoader(\'apc.prefix.\');
 *
 *     // register classes with namespaces
 *     $loader->registerNamespaces(array(
 *         \'Symfony\Component\' => __DIR__.\'/component\',
 *         \'Symfony\'           => __DIR__.\'/framework\',
 *         \'Sensio\'            => array(__DIR__.\'/src\', __DIR__.\'/vendor\'),
 *     ));
 *
 *     // register a library using the PEAR naming convention
 *     $loader->registerPrefixes(array(
 *         \'Swift_\' => __DIR__.\'/Swift\',
 *     ));
 *
 *     // activate the autoloader
 *     $loader->register();
 *
 * In this example, if you try to use a class in the Symfony\Component
 * namespace or one of its children (Symfony\Component\Console for instance),
 * the autoloader will first look for the class under the component/
 * directory, and it will then fallback to the framework/ directory if not
 * found before giving up.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Kris Wallsmith <kris@symfony.com>
 *
 * @api
 */",
 "/**
   * Creates a new FailoverTransport.
   */",
 "/**
   * Send the given Message.
   * Recipient/sender data will be retrieved from the Message API.
   * The return value is the number of recipients who were accepted for delivery.
   * @param Swift_Mime_Message $message
   * @param string[] &$failedRecipients to collect failures by-reference
   * @return int
   */",
 "/**
 * Contains a list of redundant Transports so when one fails, the next is used.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param AuthenticationManagerInterface      $authenticationManager An AuthenticationManager instance
     * @param AccessDecisionManagerInterface|null $accessDecisionManager An AccessDecisionManager instance
     * @param Boolean                             $alwaysAuthenticate
     */",
 "/**
     * Checks if the attributes are granted against the current token.
     *
     * @throws AuthenticationCredentialsNotFoundException when the security context has no authentication token.
     *
     * @param mixed $attributes
     * @param mixed|null $object
     *
     * @return Boolean
     */",
 "/**
     * Gets the currently authenticated token.
     *
     * @return TokenInterface|null A TokenInterface instance or null if no authentication information is available
     */",
 "/**
     * Sets the currently authenticated token.
     *
     * @param TokenInterface $token A TokenInterface token, or null if no further authentication information should be stored
     */",
 "/**
 * SecurityContext is the main entry point of the Security component.
 *
 * It gives access to the token representing the current user authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to clear the metadata cache of the various cache drivers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
*@override
*/",
 "/**
*Validateruntimemetadataiscorrectlydefined.
*
*@paramClassMetadata$class
*@paramClassMetadata$parent
*/",
 "/**
*@override
*/",
 "/**
*TheDisconnectedClassMetadataFactoryisusedtocreateClassMetadataInfoobjects
*thatdonotrequiretheentityclassactuallyexist.Thisallowsusto
*loadsomemappinginformationanduseittodothingslikegeneratecode
*fromthemappinginformation.
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.org
*@since2.0
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * Constructor.
     *
     * @param string $file The mapping file to load
     *
     * @throws MappingException if the mapping file does not exist
     * @throws MappingException if the mapping file is not readable
     */",
 "/**
*Createsanewconstraintinstanceforthegivenconstraintname.
*
*@paramstring$nameTheconstraintname.Eitheraconstraintrelative
*tothedefaultconstraintnamespace,orafully
*qualifiedclassname
*@paramarray$optionsTheconstraintoptions
*
*@returnConstraint
*/",
 "/**
 * ConditionalPrimary ::= SimpleConditionalExpression | \"(\" ConditionalExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Return the array of replacements for $address.
   * 
   * This method is invoked once for every single recipient of a message.
   * 
   * If no replacements can be found, an empty value (NULL) should be returned
   * and no replacements will then be made on the message.
   * 
   * @param string $address
   * 
   * @return array
   */",
 "/**
 * Allows customization of Messages on-the-fly.
 * 
 * @package Swift
 * @subpackage Plugins
 * 
 * @author Chris Corbyn
 */",
 "/**
 * ConditionalFactor ::= [\"NOT\"] ConditionalPrimary
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
     * @param \Doctrine\ORM\Mapping\AssociationMapping $assoc
     */",
 "/**
 * Description of QueryException
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Decides whether the rule(s) implemented by the strategy matches the supplied request.
     *
     * @param  Request $request The request to check for a match
     *
     * @return Boolean true if the request matches, false otherwise
     *
     * @api
     */",
 "/**
 * RequestMatcherInterface is an interface for strategies to match a Request.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Convert a template name to a TemplateReferenceInterface instance.
     *
     * @param string $name A template name
     *
     * @return TemplateReferenceInterface A template
     *
     * @api
     */",
 "/**
 * TemplateNameParserInterface converts template names to TemplateReferenceInterface
 * instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Compares a Doctrine version with the current one.
     *
     * @param string $version Doctrine version to compare.
     * @return int Returns -1 if older, 0 if it is the same, 1 if version 
     *             passed as argument is newer.
     */",
 "/**
 * Class to store and retrieve the version of Doctrine
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param array  $assets     Assets for the current collection
     * @param array  $filters    Filters for the current collection
     * @param string $sourceRoot The root directory
     */",
 "/**
     * Adds an asset to the current collection.
     *
     * @param AssetInterface $asset An asset
     */",
 "/**
     * Returns the highest last-modified value of all assets in the current collection.
     *
     * @return integer|null A UNIX timestamp
     */",
 "/**
     * Returns an iterator for looping recursively over unique leaves.
     */",
 "/**
 * A collection of assets.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param AssetCollectionIterator $iterator The inner iterator
     * @param array                   $visited  An array of visited asset objects
     * @param array                   $sources  An array of visited source strings
     */",
 "/**
     * Determines whether the current asset is a duplicate.
     *
     * De-duplication is performed based on either strict equality or by
     * matching sources.
     *
     * @return Boolean Returns true if we have not seen this asset yet
     */",
 "/**
     * Passes visited objects and source URLs to the child iterator.
     */",
 "/**
 * Asset collection filter iterator.
 *
 * The filter iterator is responsible for de-duplication of leaf assets based
 * on both strict equality and source URL.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 * @access private
 */",
 "/**
     * Returns a copy of the current asset with filters and a target URL applied.
     *
     * @param Boolean $raw Returns the unmodified asset if true
     */",
 "/**
     * @uses current()
     */",
 "/**
 * Iterates over an asset collection.
 *
 * The iterator is responsible for cascading filters and target URL patterns
 * from parent to child assets.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 * @access private
 */",
 "/**
     * @dataProvider dataValidateSchemaFiles
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Sets a theme for a given view.
     *
     * @param FormView $view      A FormView instance
     * @param array    $resources An array of resources
     */",
 "/**
     * Returns the token parser instance to add to the existing list.
     *
     * @return array An array of Twig_TokenParser instances
     */",
 "/**
     * Renders the HTML enctype in the form tag, if necessary
     *
     * Example usage in Twig templates:
     *
     *     <form action=\"...\" method=\"post\" {{ form_enctype(form) }}>
     *
     * @param FormView $view  The view for which to render the encoding type
     *
     * @return string The html markup
     */",
 "/**
     * Renders a row for the view.
     *
     * @param FormView $view      The view to render as a row
     * @param array    $variables An array of variables
     *
     * @return string The html markup
     */",
 "/**
     * Renders views which have not already been rendered.
     *
     * @param FormView $view      The parent view
     * @param array    $variables An array of variables
     *
     * @return string The html markup
     */",
 "/**
     * Renders the HTML for a given view
     *
     * Example usage in Twig:
     *
     *     {{ form_widget(view) }}
     *
     * You can pass options during the call:
     *
     *     {{ form_widget(view, {\'attr\': {\'class\': \'foo\'}}) }}
     *
     *     {{ form_widget(view, {\'separator\': \'+++++\'}) }}
     *
     * @param FormView        $view      The view to render
     * @param array           $variables Additional variables passed to the template
     *
     * @return string The html markup
     */",
 "/**
     * Renders the errors of the given view
     *
     * @param FormView $view The view to render the errors for
     *
     * @return string The html markup
     */",
 "/**
     * Renders the label of the given view
     *
     * @param FormView $view  The view to render the label for
     * @param string   $label Label name
     * @param array    $variables Additional variables passed to the template
     *
     * @return string The html markup
     */",
 "/**
     * Renders a template.
     *
     * 1. This function first looks for a block named \"_<view id>_<section>\",
     * 2. if such a block is not found the function will look for a block named
     *    \"<type name>_<section>\",
     * 3. the type name is recursively replaced by the parent type name until a
     *    corresponding block is found
     *
     * @param FormView  $view       The form view
     * @param string    $section    The section to render (i.e. \'row\', \'widget\', \'label\', ...)
     * @param array     $variables  Additional variables
     *
     * @return string The html markup
     *
     * @throws FormException if no template block exists to render the given section of the view
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
     * Returns the blocks used to render the view.
     *
     * Templates are looked for in the resources in the following order:
     *   * resources from the themes (and its parents)
     *   * resources from the themes of parent views (up to the root view)
     *   * default resources
     *
     * @param FormView $view The view
     *
     * @return array An array of Twig_TemplateInterface instances
     */",
 "/**
 * FormExtension extends Twig with form capabilities.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
   * Sleep for $seconds.
   * @param int $seconds
   */",
 "/**
 * Sleeps for a duration of time.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param RouterInterface $router An RouterInterface instance
     */",
 "/**
     * Creates a redirect Response.
     *
     * @param Request $request A Request instance
     * @param string  $path    A path (an absolute path (/foo), an absolute URL (http://...), or a route name (foo))
     * @param integer $status  The status code
     *
     * @return Response A RedirectResponse instance
     */",
 "/**
     * Creates a Request.
     *
     * @param Request $request The current Request instance
     * @param string  $path    A path (an absolute path (/foo), an absolute URL (http://...), or a route name (foo))
     *
     * @return Request A Request instance
     */",
 "/**
     * Checks that a given path matches the Request.
     *
     * @param Request $request A Request instance
     * @param string  $path    A path (an absolute path (/foo) or a route name (foo))
     *
     * @return Boolean true if the path is the same as the one from the Request, false otherwise
     */",
 "/**
 * Encapsulates the logic needed to create sub-requests, redirect the user, and match URLs.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns the field used for this entry.
     *
     * @return string
     */",
 "/**
 * Interface for entries which are restricted to specific fields
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * UnexpectedValueException
 *
 * @author Lukas Kahwe Smith <smith@pooteeweet.org>
 */",
 "/**
 * The resource was not found.
 *
 * This exception should trigger an HTTP 404 response in your application code.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 *
 * @api
 */",
 "/**
   * Create a new MimePart with $headers, $encoder and $cache.
   * 
   * @param Swift_Mime_HeaderSet $headers
   * @param Swift_Mime_ContentEncoder $encoder
   * @param Swift_KeyCache $cache
   * @param Swift_Mime_Grammar $grammar
   * @param string $charset
   */",
 "/**
   * Set the body of this entity, either as a string, or as an instance of
   * {@link Swift_OutputByteStream}.
   * 
   * @param mixed $body
   * @param string $contentType optional
   * @param string $charset optional
   * @param Swift_Mime_MimePart
   */",
 "/**
   * Get the character set of this entity.
   * 
   * @return string
   */",
 "/**
   * Set the character set of this entity.
   * 
   * @param string $charset
   * @param Swift_Mime_MimePart
   */",
 "/**
   * Get the format of this entity (i.e. flowed or fixed).
   * 
   * @return string
   */",
 "/**
   * Set the format of this entity (flowed or fixed).
   * 
   * @param string $format
   * @param Swift_Mime_MimePart
   */",
 "/**
   * Test if delsp is being used for this entity.
   * 
   * @return boolean
   */",
 "/**
   * Turn delsp on or off for this entity.
   * 
   * @param boolean $delsp
   * @param Swift_Mime_MimePart
   */",
 "/**
   * Get the nesting level of this entity.
   * 
   * @return int
   * @see LEVEL_TOP, LEVEL_ALTERNATIVE, LEVEL_MIXED, LEVEL_RELATED
   */",
 "/**
   * Receive notification that the charset has changed on this document, or a
   * parent document.
   * 
   * @param string $charset
   */",
 "/** Fix the content-type and encoding of this entity */",
 "/** Set the nesting level of this entity */",
 "/**
 * A MIME part, in a multipart message.
 * 
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/** Private constructor. This class cannot be instantiated. */",
 "/**
     * Creates a connection object based on the specified parameters.
     * This method returns a Doctrine\DBAL\Connection which wraps the underlying
     * driver connection.
     *
     * $params must contain at least one of the following.
     * 
     * Either \'driver\' with one of the following values:
     *     pdo_mysql
     *     pdo_sqlite
     *     pdo_pgsql
     *     pdo_oracle
     *     pdo_sqlsrv
     * 
     * OR \'driverClass\' that contains the full class name (with namespace) of the
     * driver class to instantiate.
     * 
     * Other (optional) parameters:
     * 
     * <b>user (string)</b>:
     * The username to use when connecting. 
     * 
     * <b>password (string)</b>:
     * The password to use when connecting.
     * 
     * <b>driverOptions (array)</b>:
     * Any additional driver-specific options for the driver. These are just passed
     * through to the driver.
     * 
     * <b>pdo</b>:
     * You can pass an existing PDO instance through this parameter. The PDO
     * instance will be wrapped in a Doctrine\DBAL\Connection.
     * 
     * <b>wrapperClass</b>:
     * You may specify a custom wrapper class through the \'wrapperClass\'
     * parameter but this class MUST inherit from Doctrine\DBAL\Connection.
     * 
     * @param array $params The parameters.
     * @param Doctrine\DBAL\Configuration The configuration to use.
     * @param Doctrine\Common\EventManager The event manager to use.
     * @return Doctrine\DBAL\Connection
     */",
 "/**
     * Checks the list of parameters.
     *
     * @param array $params
     */",
 "/**
 * Factory for creating Doctrine\DBAL\Connection instances.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @expectedException \RuntimeException
     */",
 "/**
     * Constructor.
     *
     * @param KernelInterface $kernel A KernelInterface instance
     * @param string          $path   The path the global resource directory
     * @param string|array    $paths A path or an array of paths where to look for resources
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * FileLocator uses the KernelInterface to locate resources in bundles.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new SendEvent for $source and $message.
   * @param Swift_Transport $source
   * @param Swift_Mime_Message
   * @return Swift_Events_SendEvent
   */",
 "/**
   * Create a new CommandEvent for $source and $command.
   * @param Swift_Transport $source
   * @param string $command That will be executed
   * @param array $successCodes That are needed
   * @return Swift_Events_CommandEvent
   */",
 "/**
   * Create a new ResponseEvent for $source and $response.
   * @param Swift_Transport $source
   * @param string $response
   * @param boolean $valid If the response is valid
   * @return Swift_Events_ResponseEvent
   */",
 "/**
   * Create a new TransportChangeEvent for $source.
   * @param Swift_Transport $source
   * @return Swift_Events_TransportChangeEvent
   */",
 "/**
   * Create a new TransportExceptionEvent for $source.
   * @param Swift_Transport $source
   * @param Swift_TransportException $ex
   * @return Swift_Events_TransportExceptionEvent
   */",
 "/**
   * Bind an event listener to this dispatcher.
   * @param Swift_Events_EventListener $listener
   */",
 "/**
   * Dispatch the given Event to all suitable listeners.
   * @param Swift_Events_EventObject $evt
   * @param string $target method
   */",
 "/**
 * Interface for the EventDispatcher which handles the event dispatching layer.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
   * Create a new SimpleHeaderSet with the given $factory.
   * 
   * @param Swift_Mime_HeaderFactory $factory
   * @param string $charset
   */",
 "/**
   * Set the charset used by these headers.
   * 
   * @param string $charset
   */",
 "/**
   * Add a new Mailbox Header with a list of $addresses.
   * 
   * @param string $name
   * @param array|string $addresses
   */",
 "/**
   * Add a new Date header using $timestamp (UNIX time).
   * 
   * @param string $name
   * @param int $timestamp
   */",
 "/**
   * Add a new basic text header with $name and $value.
   * 
   * @param string $name
   * @param string $value
   */",
 "/**
   * Add a new ParameterizedHeader with $name, $value and $params.
   * 
   * @param string $name
   * @param string $value
   * @param array $params
   */",
 "/**
   * Add a new ID header for Message-ID or Content-ID.
   * 
   * @param string $name
   * @param string|array $ids
   */",
 "/**
   * Add a new Path header with an address (path) in it.
   * 
   * @param string $name
   * @param string $path
   */",
 "/**
   * Returns true if at least one header with the given $name exists.
   * 
   * If multiple headers match, the actual one may be specified by $index.
   * 
   * @param string $name
   * @param int $index
   * 
   * @return boolean
   */",
 "/**
   * Set a header in the HeaderSet.
   * 
   * The header may be a previously fetched header via {@link get()} or it may
   * be one that has been created separately.
   * 
   * If $index is specified, the header will be inserted into the set at this
   * offset.
   * 
   * @param Swift_Mime_Header $header
   * @param int $index
   */",
 "/**
   * Get the header with the given $name.
   * 
   * If multiple headers match, the actual one may be specified by $index.
   * Returns NULL if none present.
   * 
   * @param string $name
   * @param int $index
   * 
   * @return Swift_Mime_Header
   */",
 "/**
   * Get all headers with the given $name.
   * 
   * @param string $name
   * 
   * @return array
   */",
 "/**
   * Remove the header with the given $name if it\'s set.
   * 
   * If multiple headers match, the actual one may be specified by $index.
   * 
   * @param string $name
   * @param int $index
   */",
 "/**
   * Remove all headers with the given $name.
   * 
   * @param string $name
   */",
 "/**
   * Create a new instance of this HeaderSet.
   * 
   * @return Swift_Mime_HeaderSet
   */",
 "/**
   * Define a list of Header names as an array in the correct order.
   * 
   * These Headers will be output in the given order where present.
   * 
   * @param array $sequence
   */",
 "/**
   * Set a list of header names which must always be displayed when set.
   * 
   * Usually headers without a field value won\'t be output unless set here.
   * 
   * @param array $names
   */",
 "/**
   * Notify this observer that the entity\'s charset has changed.
   * 
   * @param string $charset
   */",
 "/**
   * Returns a string with a representation of all headers.
   * 
   * @return string
   */",
 "/**
   * Returns a string representation of this object.
   *
   * @return string
   *
   * @see toString()
   */",
 "/** Save a Header to the internal collection */",
 "/** Test if the headers can be sorted */",
 "/** uksort() algorithm for Header ordering */",
 "/** Test if the given Header is always displayed */",
 "/** Notify all Headers of the new charset */",
 "/**
 * A collection of MIME headers.
 * 
 * @package Swift
 * @subpackage Mime
 * 
 * @author Chris Corbyn
 */",
 "/**
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Handles channel management.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
 * ChannelListener switches the HTTP protocol based on the access control
 * configuration.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the name of the table that contains the discriminator column.
     * 
     * @return string The table name.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Base class for entity persisters that implement a certain inheritance mapping strategy.
 * All these persisters are assumed to use a discriminator column to discriminate entity
 * types in the hierarchy.
 * 
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 */",
 "/**
     * Translates the given message.
     *
     * @param string $id         The message id
     * @param array  $parameters An array of parameters for the message
     * @param string $domain     The domain for the message
     * @param string $locale     The locale
     *
     * @return string The translated string
     *
     * @api
     */",
 "/**
     * Translates the given choice message by choosing a translation according to a number.
     *
     * @param string  $id         The message id
     * @param integer $number     The number to use to find the indice of the message
     * @param array   $parameters An array of parameters for the message
     * @param string  $domain     The domain for the message
     * @param string  $locale     The locale
     *
     * @return string The translated string
     *
     * @api
     */",
 "/**
     * Sets the current locale.
     *
     * @param string $locale The locale
     *
     * @api
     */",
 "/**
     * Returns the current locale.
     *
     * @return string The locale
     *
     * @api
     */",
 "/**
 * TranslatorInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Writes a message to the output.
     *
     * @param string $message A message to write to the output
     * @param Boolean $newline Whether to add a newline or not
     */",
 "/**
 * NullOutput suppresses all output.
 *
 *     $output = new NullOutput();
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Executor that executes the SQL statement for simple DQL SELECT statements.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Roman Borschel <roman@code-factory.org>
 * @version     $Revision$
 * @link        www.doctrine-project.org
 * @since       2.0
 */",
 "/**
 * Collects after invocation providers.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $test A comparison string
     *
     * @throws \InvalidArgumentException If the test is not understood
     */",
 "/**
 * NumberComparator compiles a simple comparison to an anonymous
 * subroutine, which you can call with a value to be tested again.
 *
 * Now this would be very pointless, if NumberCompare didn\'t understand
 * magnitudes.
 *
 * The target value may use magnitudes of kilobytes (k, ki),
 * megabytes (m, mi), or gigabytes (g, gi).  Those suffixed
 * with an i use the appropriate 2**n version in accordance with the
 * IEC standard: http://physics.nist.gov/cuu/Units/binary.html
 *
 * Based on the Perl Number::Compare module.
 *
 * @author    Fabien Potencier <fabien@symfony.com> PHP port
 * @author    Richard Clamp <richardc@unixbeard.net> Perl version
 *
 * @copyright 2004-2005 Fabien Potencier <fabien@symfony.com>
 * @copyright 2002 Richard Clamp <richardc@unixbeard.net>
 *
 * @see       http://physics.nist.gov/cuu/Units/binary.html
 */",
 "/**
     * Returns the timezone choices.
     *
     * The choices are generated from the ICU function
     * \DateTimeZone::listIdentifiers(). They are cached during a single request,
     * so multiple timezone fields on the same page don\'t lead to unnecessary
     * overhead.
     *
     * @return array The timezone choices
     */",
 "/**
 * Represents a choice list where each timezone is broken down by continent.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
   * Create a new StreamBuffer using $replacementFactory for transformations.
   * @param Swift_ReplacementFilterFactory $replacementFactory
   */",
 "/**
   * Perform any initialization needed, using the given $params.
   * Parameters will vary depending upon the type of IoBuffer used.
   * @param array $params
   */",
 "/**
   * Set an individual param on the buffer (e.g. switching to SSL).
   * @param string $param
   * @param mixed $value
   */",
 "/**
   * Perform any shutdown logic needed.
   */",
 "/**
   * Set an array of string replacements which should be made on data written
   * to the buffer.  This could replace LF with CRLF for example.
   * @param string[] $replacements
   */",
 "/**
   * Get a line of output (including any CRLF).
   * The $sequence number comes from any writes and may or may not be used
   * depending upon the implementation.
   * @param int $sequence of last write to scan from
   * @return string
   */",
 "/**
   * Reads $length bytes from the stream into a string and moves the pointer
   * through the stream by $length. If less bytes exist than are requested the
   * remaining bytes are given instead. If no bytes are remaining at all, boolean
   * false is returned.
   * @param int $length
   * @return string
   */",
 "/** Not implemented */",
 "/** Flush the stream contents */",
 "/** Write this bytes to the stream */",
 "/**
   * Establishes a connection to a remote server.
   * @access private
   */",
 "/**
   * Opens a process for input/output.
   * @access private
   */",
 "/**
 * A generic IoBuffer implementation supporting remote sockets and local processes.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Compiles a node.
     *
     * @param  Twig_NodeInterface $node The node to compile
     *
     * @return Twig_CompilerInterface The current compiler instance
     */",
 "/**
     * Gets the current PHP code after compilation.
     *
     * @return string The PHP code
     */",
 "/**
 * Interface implemented by compiler classes.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Processes an asset.
     *
     * @param AssetInterface $asset An asset
     */",
 "/**
 * Assets are passed through factory workers before leaving the factory.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Register the exception handler.
     *
     * @return The registered exception handler
     */",
 "/**
     * Sends a Response for the given Exception.
     *
     * @param \Exception $exception An \Exception instance
     */",
 "/**
     * Creates the error Response associated with the given Exception.
     *
     * @param \Exception $exception An \Exception instance
     *
     * @return Response A Response instance
     */",
 "/**
 * ExceptionHandler converts an exception to a Response object.
 *
 * It is mostly useful in debug mode to replace the default PHP/XDebug
 * output with something prettier and more useful.
 *
 * As this class is mainly used during Kernel boot, where nothing is yet
 * available, the Response content is always HTML.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Converts a YAML string to a PHP array.
     *
     * @param string $value A YAML string
     *
     * @return array A PHP array representing the YAML string
     */",
 "/**
     * Dumps a given PHP variable to a YAML string.
     *
     * @param mixed $value The PHP variable to convert
     *
     * @return string The YAML string representing the PHP array
     *
     * @throws DumpException When trying to dump PHP resource
     */",
 "/**
     * Dumps a PHP array to a YAML string.
     *
     * @param array $value The PHP array to dump
     *
     * @return string The YAML string representing the PHP array
     */",
 "/**
     * Parses a scalar to a YAML string.
     *
     * @param scalar  $scalar
     * @param string  $delimiters
     * @param array   $stringDelimiters
     * @param integer &$i
     * @param Boolean $evaluate
     *
     * @return string A YAML string
     *
     * @throws ParseException When malformed inline YAML string is parsed
     */",
 "/**
     * Parses a quoted scalar to YAML.
     *
     * @param string  $scalar
     * @param integer &$i
     *
     * @return string A YAML string
     *
     * @throws ParseException When malformed inline YAML string is parsed
     */",
 "/**
     * Parses a sequence to a YAML string.
     *
     * @param string  $sequence
     * @param integer &$i
     *
     * @return string A YAML string
     *
     * @throws ParseException When malformed inline YAML string is parsed
     */",
 "/**
     * Parses a mapping to a YAML string.
     *
     * @param string  $mapping
     * @param integer &$i
     *
     * @return string A YAML string
     *
     * @throws ParseException When malformed inline YAML string is parsed
     */",
 "/**
     * Evaluates scalars and replaces magic values.
     *
     * @param string $scalar
     *
     * @return string A YAML string
     */",
 "/**
     * Gets a regex that matches an unix timestamp
     *
     * @return string The regular expression
     */",
 "/**
 * Inline implements a YAML parser/dumper for the YAML inline syntax.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Filters an asset after it has been loaded.
     *
     * @param AssetInterface $asset An asset
     */",
 "/**
     * Filters an asset just before it\'s dumped.
     *
     * @param AssetInterface $asset An asset
     */",
 "/**
 * A filter manipulates an asset at load and dump.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * Assetic token parser.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
*Classtogenerateentityrepositoryclasses
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.org
*@since2.0
*@version$Revision$
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * Constructor.
     *
     * @param \DOMNode $node       A \DOMNode instance
     * @param string   $currentUri The URI of the page where the link is embedded (or the base href)
     * @param string   $method     The method to use for the link (get by default)
     *
     * @throws \LogicException if the node is not a link
     *
     * @api
     */",
 "/**
     * Gets the node associated with this link.
     *
     * @return \DOMNode A \DOMNode instance
     */",
 "/**
     * Gets the method associated with this link.
     *
     * @return string The method
     *
     * @api
     */",
 "/**
     * Gets the URI associated with this link.
     *
     * @return string The URI
     *
     * @api
     */",
 "/**
 * Link represents an HTML link (an HTML a tag).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor
     *
     * @param string $anonymousClass
     * @param string $rememberMeClass
     *
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * The default implementation of the authentication trust resolver.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string  $content The response content
     * @param integer $status  The response status code
     * @param array   $headers An array of response headers
     *
     * @api
     */",
 "/**
     * Returns the response content as it will be sent (with the headers).
     *
     * @return string The response content
     */",
 "/**
     * Clones the current Response instance.
     */",
 "/**
     * Prepares the Response before it is sent to the client.
     *
     * This method tweaks the Response to ensure that it is
     * compliant with RFC 2616.
     */",
 "/**
     * Sends HTTP headers.
     */",
 "/**
     * Sends content for the current web response.
     */",
 "/**
     * Sends HTTP headers and content.
     *
     * @api
     */",
 "/**
     * Sets the response content.
     *
     * Valid types are strings, numbers, and objects that implement a __toString() method.
     *
     * @param mixed $content
     *
     * @api
     */",
 "/**
     * Gets the current response content.
     *
     * @return string Content
     *
     * @api
     */",
 "/**
     * Sets the HTTP protocol version (1.0 or 1.1).
     *
     * @param string $version The HTTP protocol version
     *
     * @api
     */",
 "/**
     * Gets the HTTP protocol version.
     *
     * @return string The HTTP protocol version
     *
     * @api
     */",
 "/**
     * Sets the response status code.
     *
     * @param integer $code HTTP status code
     * @param string  $text HTTP status text
     *
     * @throws \InvalidArgumentException When the HTTP status code is not valid
     *
     * @api
     */",
 "/**
     * Retrieves the status code for the current web response.
     *
     * @return string Status code
     *
     * @api
     */",
 "/**
     * Sets the response charset.
     *
     * @param string $charset Character set
     *
     * @api
     */",
 "/**
     * Retrieves the response charset.
     *
     * @return string Character set
     *
     * @api
     */",
 "/**
     * Returns true if the response is worth caching under any circumstance.
     *
     * Responses marked \"private\" with an explicit Cache-Control directive are
     * considered uncacheable.
     *
     * Responses with neither a freshness lifetime (Expires, max-age) nor cache
     * validator (Last-Modified, ETag) are considered uncacheable.
     *
     * @return Boolean true if the response is worth caching, false otherwise
     *
     * @api
     */",
 "/**
     * Returns true if the response is \"fresh\".
     *
     * Fresh responses may be served from cache without any interaction with the
     * origin. A response is considered fresh when it includes a Cache-Control/max-age
     * indicator or Expiration header and the calculated age is less than the freshness lifetime.
     *
     * @return Boolean true if the response is fresh, false otherwise
     *
     * @api
     */",
 "/**
     * Returns true if the response includes headers that can be used to validate
     * the response with the origin server using a conditional GET request.
     *
     * @return Boolean true if the response is validateable, false otherwise
     *
     * @api
     */",
 "/**
     * Marks the response as \"private\".
     *
     * It makes the response ineligible for serving other clients.
     *
     * @api
     */",
 "/**
     * Marks the response as \"public\".
     *
     * It makes the response eligible for serving other clients.
     *
     * @api
     */",
 "/**
     * Returns true if the response must be revalidated by caches.
     *
     * This method indicates that the response must not be served stale by a
     * cache in any circumstance without first revalidating with the origin.
     * When present, the TTL of the response should not be overridden to be
     * greater than the value provided by the origin.
     *
     * @return Boolean true if the response must be revalidated by a cache, false otherwise
     *
     * @api
     */",
 "/**
     * Returns the Date header as a DateTime instance.
     *
     * @return \DateTime A \DateTime instance
     *
     * @throws \RuntimeException When the header is not parseable
     *
     * @api
     */",
 "/**
     * Sets the Date header.
     *
     * @param \DateTime $date A \DateTime instance
     *
     * @api
     */",
 "/**
     * Returns the age of the response.
     *
     * @return integer The age of the response in seconds
     */",
 "/**
     * Marks the response stale by setting the Age header to be equal to the maximum age of the response.
     *
     * @api
     */",
 "/**
     * Returns the value of the Expires header as a DateTime instance.
     *
     * @return \DateTime A DateTime instance
     *
     * @api
     */",
 "/**
     * Sets the Expires HTTP header with a DateTime instance.
     *
     * If passed a null value, it removes the header.
     *
     * @param \DateTime $date A \DateTime instance
     *
     * @api
     */",
 "/**
     * Sets the number of seconds after the time specified in the response\'s Date
     * header when the the response should no longer be considered fresh.
     *
     * First, it checks for a s-maxage directive, then a max-age directive, and then it falls
     * back on an expires header. It returns null when no maximum age can be established.
     *
     * @return integer|null Number of seconds
     *
     * @api
     */",
 "/**
     * Sets the number of seconds after which the response should no longer be considered fresh.
     *
     * This methods sets the Cache-Control max-age directive.
     *
     * @param integer $value Number of seconds
     *
     * @api
     */",
 "/**
     * Sets the number of seconds after which the response should no longer be considered fresh by shared caches.
     *
     * This methods sets the Cache-Control s-maxage directive.
     *
     * @param integer $value Number of seconds
     *
     * @api
     */",
 "/**
     * Returns the response\'s time-to-live in seconds.
     *
     * It returns null when no freshness information is present in the response.
     *
     * When the responses TTL is <= 0, the response may not be served from cache without first
     * revalidating with the origin.
     *
     * @return integer The TTL in seconds
     *
     * @api
     */",
 "/**
     * Sets the response\'s time-to-live for shared caches.
     *
     * This method adjusts the Cache-Control/s-maxage directive.
     *
     * @param integer $seconds Number of seconds
     *
     * @api
     */",
 "/**
     * Sets the response\'s time-to-live for private/client caches.
     *
     * This method adjusts the Cache-Control/max-age directive.
     *
     * @param integer $seconds Number of seconds
     *
     * @api
     */",
 "/**
     * Returns the Last-Modified HTTP header as a DateTime instance.
     *
     * @return \DateTime A DateTime instance
     *
     * @api
     */",
 "/**
     * Sets the Last-Modified HTTP header with a DateTime instance.
     *
     * If passed a null value, it removes the header.
     *
     * @param \DateTime $date A \DateTime instance
     *
     * @api
     */",
 "/**
     * Returns the literal value of the ETag HTTP header.
     *
     * @return string The ETag HTTP header
     *
     * @api
     */",
 "/**
     * Sets the ETag value.
     *
     * @param string  $etag The ETag unique identifier
     * @param Boolean $weak Whether you want a weak ETag or not
     *
     * @api
     */",
 "/**
     * Sets the response\'s cache headers (validation and/or expiration).
     *
     * Available options are: etag, last_modified, max_age, s_maxage, private, and public.
     *
     * @param array $options An array of cache options
     *
     * @api
     */",
 "/**
     * Modifies the response so that it conforms to the rules defined for a 304 status code.
     *
     * This sets the status, removes the body, and discards any headers
     * that MUST NOT be included in 304 responses.
     *
     * @see http://tools.ietf.org/html/rfc2616#section-10.3.5
     *
     * @api
     */",
 "/**
     * Returns true if the response includes a Vary header.
     *
     * @return Boolean true if the response includes a Vary header, false otherwise
     *
     * @api
     */",
 "/**
     * Returns an array of header names given in the Vary header.
     *
     * @return array An array of Vary names
     *
     * @api
     */",
 "/**
     * Sets the Vary header.
     *
     * @param string|array $headers
     * @param Boolean      $replace Whether to replace the actual value of not (true by default)
     *
     * @api
     */",
 "/**
     * Determines if the Response validators (ETag, Last-Modified) match
     * a conditional value specified in the Request.
     *
     * If the Response is not modified, it sets the status code to 304 and
     * removes the actual content by calling the setNotModified() method.
     *
     * @param Request $request A Request instance
     *
     * @return Boolean true if the Response validators match the Request, false otherwise
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @param string $location
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * @return Boolean
     *
     * @api
     */",
 "/**
 * Response represents an HTTP response.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Set name of this asset
     *
     * @param string $name
     */",
 "/**
     * Check if this identifier is quoted.
     *
     * @param  string $identifier
     * @return bool
     */",
 "/**
     * Trim quotes from the identifier.
     * 
     * @param  string $identifier
     * @return string
     */",
 "/**
     * Return name of this schema asset.
     * 
     * @return string
     */",
 "/**
     * Get the quoted representation of this asset but only if it was defined with one. Otherwise
     * return the plain unquoted value as inserted.
     *
     * @param AbstractPlatform $platform
     * @return string
     */",
 "/**
     * Generate an identifier from a list of column names obeying a certain string length.
     *
     * This is especially important for Oracle, since it does not allow identifiers larger than 30 chars,
     * however building idents automatically for foreign keys, composite keys or such can easily create
     * very long names.
     *
     * @param  array $columnNames
     * @param  string $prefix
     * @param  int $maxSize
     * @return string
     */",
 "/**
 * The abstract asset allows to reset the name of all assets without publishing this to the public userland.
 *
 * This encapsulation hack is necessary to keep a consistent state of the database schema. Say we have a list of tables
 * array($tableName => Table($tableName)); if you want to rename the table, you have to make sure
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Database tool allows you to easily drop and create your configured databases.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Load a Class Metadata.
     *
     * @param ClassMetadata $metadata A metadata
     *
     * @return Boolean
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Implementation of PropertyChangedListener
     *
     * This allows us to keep track of which values have been changed, so we don\'t
     * have to do a full introspection when ->updateAcl() is called.
     *
     * @param mixed $sender
     * @param string $propertyName
     * @param mixed $oldValue
     * @param mixed $newValue
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Constructs the SQL for deleting access control entries.
     *
     * @param integer $oidPK
     * @return string
     */",
 "/**
     * Constructs the SQL for deleting a specific ACE.
     *
     * @param integer $acePK
     * @return string
     */",
 "/**
     * Constructs the SQL for deleting an object identity.
     *
     * @param integer $pk
     * @return string
     */",
 "/**
     * Constructs the SQL for deleting relation entries.
     *
     * @param integer $pk
     * @return string
     */",
 "/**
     * Constructs the SQL for inserting an ACE.
     *
     * @param integer $classId
     * @param integer|null $objectIdentityId
     * @param string|null $field
     * @param integer $aceOrder
     * @param integer $securityIdentityId
     * @param string $strategy
     * @param integer $mask
     * @param Boolean $granting
     * @param Boolean $auditSuccess
     * @param Boolean $auditFailure
     * @return string
     */",
 "/**
     * Constructs the SQL for inserting a new class type.
     *
     * @param string $classType
     * @return string
     */",
 "/**
     * Constructs the SQL for inserting a relation entry.
     *
     * @param integer $objectIdentityId
     * @param integer $ancestorId
     * @return string
     */",
 "/**
     * Constructs the SQL for inserting an object identity.
     *
     * @param string $identifier
     * @param integer $classId
     * @param Boolean $entriesInheriting
     * @return string
     */",
 "/**
     * Constructs the SQL for inserting a security identity.
     *
     * @param SecurityIdentityInterface $sid
     * @throws \InvalidArgumentException
     * @return string
     */",
 "/**
     * Constructs the SQL for selecting an ACE.
     *
     * @param integer $classId
     * @param integer $oid
     * @param string $field
     * @param integer $order
     * @return string
     */",
 "/**
     * Constructs the SQL for selecting the primary key associated with
     * the passed class type.
     *
     * @param string $classType
     * @return string
     */",
 "/**
     * Constructs the SQL for selecting the primary key of a security identity.
     *
     * @param SecurityIdentityInterface $sid
     * @throws \InvalidArgumentException
     * @return string
     */",
 "/**
     * Constructs the SQL for updating an object identity.
     *
     * @param integer $pk
     * @param array $changes
     * @throws \InvalidArgumentException
     * @return string
     */",
 "/**
     * Constructs the SQL for updating an ACE.
     *
     * @param integer $pk
     * @param array $sets
     * @throws \InvalidArgumentException
     * @return string
     */",
 "/**
     * Creates the ACL for the passed object identity
     *
     * @param ObjectIdentityInterface $oid
     * @return void
     */",
 "/**
     * Returns the primary key for the passed class type.
     *
     * If the type does not yet exist in the database, it will be created.
     *
     * @param string $classType
     * @return integer
     */",
 "/**
     * Returns the primary key for the passed security identity.
     *
     * If the security identity does not yet exist in the database, it will be
     * created.
     *
     * @param SecurityIdentityInterface $sid
     * @return integer
     */",
 "/**
     * Deletes all ACEs for the given object identity primary key.
     *
     * @param integer $oidPK
     * @return void
     */",
 "/**
     * Deletes the object identity from the database.
     *
     * @param integer $pk
     * @return void
     */",
 "/**
     * Deletes all entries from the relations table from the database.
     *
     * @param integer $pk
     * @return void
     */",
 "/**
     * This regenerates the ancestor table which is used for fast read access.
     *
     * @param AclInterface $acl
     * @return void
     */",
 "/**
     * This processes changes on an ACE related property (classFieldAces, or objectFieldAces).
     *
     * @param string $name
     * @param array $changes
     * @return void
     */",
 "/**
     * This processes changes on an ACE related property (classAces, or objectAces).
     *
     * @param string $name
     * @param array $changes
     * @return void
     */",
 "/**
     * Persists the changes which were made to ACEs to the database.
     *
     * @param \SplObjectStorage $aces
     * @return void
     */",
 "/**
 * An implementation of the MutableAclProviderInterface using Doctrine DBAL.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @expectedException Symfony\Component\Security\Core\Exception\BadCredentialsException
     */",
 "/**
     * Retrieves the object identity from a domain object
     *
     * @param object $domainObject
     * @return ObjectIdentityInterface
     */",
 "/**
 * Retrieves the object identity for a given domain object
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Sets the audit logger
     *
     * @param AuditLoggerInterface $auditLogger
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Makes an authorization decision.
     *
     * The order of ACEs, and SIDs is significant; the order of permission masks
     * not so much. It is important to note that the more specific security
     * identities should be at the beginning of the SIDs array in order for this
     * strategy to produce intuitive authorization decisions.
     *
     * First, we will iterate over permissions, then over security identities.
     * For each combination of permission, and identity we will test the
     * available ACEs until we find one which is applicable.
     *
     * The first applicable ACE will make the ultimate decision for the
     * permission/identity combination. If it is granting, this method will return
     * true, if it is denying, the method will continue to check the next
     * permission/identity combination.
     *
     * This process is repeated until either a granting ACE is found, or no
     * permission/identity combinations are left. In the latter case, we will
     * call this method on the parent ACL if it exists, and isEntriesInheriting
     * is true. Otherwise, we will either throw an NoAceFoundException, or deny
     * access finally.
     *
     * @param AclInterface $acl
     * @param array        $aces               An array of ACE to check against
     * @param array        $masks              An array of permission masks
     * @param array        $sids               An array of SecurityIdentityInterface implementations
     * @param Boolean      $administrativeMode True turns off audit logging
     * @return Boolean true, or false; either granting, or denying access respectively.
     */",
 "/**
     * Determines whether the ACE is applicable to the given permission/security
     * identity combination.
     *
     * Per default, we support three different comparison strategies.
     *
     * Strategy ALL:
     * The ACE will be considered applicable when all the turned-on bits in the
     * required mask are also turned-on in the ACE mask.
     *
     * Strategy ANY:
     * The ACE will be considered applicable when any of the turned-on bits in
     * the required mask is also turned-on the in the ACE mask.
     *
     * Strategy EQUAL:
     * The ACE will be considered applicable when the bitmasks are equal.
     *
     * @param integer        $requiredMask
     * @param EntryInterface $ace
     * @return Boolean
     */",
 "/**
 * The permission granting strategy to apply to the access control list.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Decodes a string into PHP data
     *
     * @param string $data   Data to decode
     * @param string $format Format to decode from
     *
     * @return mixed
     */",
 "/**
 * Defines the interface of encoders that are able to decode their own format
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
 * UpdateStatement = UpdateClause [WhereClause]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string $uri        The request URI
     * @param array  $method     The HTTP method request
     * @param array  $parameters The request parameters
     * @param array  $files      An array of uploaded files
     * @param array  $cookies    An array of cookies
     * @param array  $server     An array of server parameters
     * @param string $content    The raw body data
     *
     * @api
     */",
 "/**
     * Gets the request URI.
     *
     * @return string The request URI
     *
     * @api
     */",
 "/**
     * Gets the request HTTP method.
     *
     * @return string The request HTTP method
     *
     * @api
     */",
 "/**
     * Gets the request parameters.
     *
     * @return array The request parameters
     *
     * @api
     */",
 "/**
     * Gets the request server files.
     *
     * @return array The request files
     *
     * @api
     */",
 "/**
     * Gets the request cookies.
     *
     * @return array The request cookies
     *
     * @api
     */",
 "/**
     * Gets the request server parameters.
     *
     * @return array The request server parameters
     *
     * @api
     */",
 "/**
     * Gets the request raw body data.
     *
     * @return string The request raw body data.
     *
     * @api
     */",
 "/**
 * Request object.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Initializes a new <tt>MultiTableDeleteExecutor</tt>.
     *
     * @param Node $AST The root AST node of the DQL query.
     * @param SqlWalker $sqlWalker The walker used for SQL generation from the AST.
     * @internal Any SQL construction and preparation takes place in the constructor for
     *           best performance. With a query cache the executor will be cached.
     */",
 "/**
     * Executes all SQL statements.
     *
     * @param \Doctrine\DBAL\Connection $conn The database connection that is used to execute the queries.
     * @param array $params The parameters.
     * @override
     */",
 "/**
 * Executes the SQL statements for bulk DQL DELETE statements on classes in
 * Class Table Inheritance (JOINED).
 *
 * @author      Roman Borschel <roman@code-factory.org>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        http://www.doctrine-project.org
 * @since       2.0
 * @version     $Revision$
 */",
 "/**
     * @param boolean $realUsage
     */",
 "/**
     * Formats bytes into a human readable string
     *
     * @param int $bytes
     * @return string
     */",
 "/**
 * Some methods that are common for all memory processors
 *
 * @author Rob Jensen
 */",
 "/**
     * Returns whether this guesser is supported on the current OS/PHP setup
     *
     * @return Boolean
     */",
 "/**
     * Guesses the mime type of the file with the given path
     *
     * @see MimeTypeGuesserInterface::guess()
     */",
 "/**
 * Guesses the mime type using the PECL extension FileInfo
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Task for executing arbitrary SQL that can come from a file or directly from
 * the command line.
 * 
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns the Assetic resource.
     *
     * @return AsseticResourceInterface The wrapped Assetic resource
     */",
 "/**
 * Turns an Assetic resource into a Symfony one.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * If you want to add or replace a keywords list use this command
     * 
     * @param string $name
     * @param string $class 
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @dataProvider getImages
     */",
 "/**
 * @group integration
 */",
 "/**
     * Initializes a new sequence generator.
     *
     * @param \Doctrine\ORM\EntityManager $em The EntityManager to use.
     * @param string $sequenceName The name of the sequence.
     * @param integer $allocationSize The allocation size of the sequence.
     */",
 "/**
     * Generates an ID for the given entity.
     *
     * @param object $entity
     * @return integer|float The generated value.
     * @override
     */",
 "/**
     * Gets the maximum value of the currently allocated bag of values.
     *
     * @return integer|float
     */",
 "/**
     * Gets the next value that will be returned by generate().
     *
     * @return integer|float
     */",
 "/**
 * Represents an ID generator that uses a database sequence.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * NullComparisonExpression ::= (SingleValuedPathExpression | InputParameter) \"IS\" [\"NOT\"] \"NULL\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Base exception
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * Constructor.
     *
     * @param AclProviderInterface              $aclProvider
     * @param ObjectIdentityRetrievalStrategy   $oidRetrievalStrategy
     * @param SecurityIdentityRetrievalStrategy $sidRetrievalStrategy
     * @return void
     */",
 "/**
     * Batch loads ACLs for an entire collection; thus, it reduces the number
     * of required queries considerably.
     *
     * @param mixed $collection anything that can be passed to foreach()
     * @param array $tokens an array of TokenInterface implementations
     * @return void
     */",
 "/**
 * This service caches ACLs for an entire collection of objects.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $version The package version
     * @param string $format  The format used to apply the version
     */",
 "/**
     * Applies version to the supplied path.
     *
     * @param string $path A path
     *
     * @return string The versionized path
     */",
 "/**
 * The basic package will add a version to asset URLs.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * @param EntityManager
     */",
 "/**
     * Adds a root entity and all of its fields to the result set.
     *
     * @param string $class The class name of the root entity.
     * @param string $alias The unique alias to use for the root entity.
     * @param array $renamedColumns Columns that have been renamed (tableColumnName => queryColumnName)
     */",
 "/**
     * Adds a joined entity and all of its fields to the result set.
     *
     * @param string $class The class name of the joined entity.
     * @param string $alias The unique alias to use for the joined entity.
     * @param string $parentAlias The alias of the entity result that is the parent of this joined result.
     * @param object $relation The association field that connects the parent entity result with the joined entity result.
     * @param array $renamedColumns Columns that have been renamed (tableColumnName => queryColumnName)
     */",
 "/**
     * Adds all fields of the given class to the result set mapping (columns and meta fields)
     */",
 "/**
 * A ResultSetMappingBuilder uses the EntityManager to automatically populate entity fields
 *
 * @author Michael Ridgway <mcridgway@gmail.com>
 * @since 2.1
 */",
 "/**
     * Constructor.
     *
     * @param UserProviderInterface   $userProvider               An UserProviderInterface instance
     * @param UserCheckerInterface    $userChecker                An UserCheckerInterface instance
     * @param string                  $providerKey                The provider key
     * @param EncoderFactoryInterface $encoderFactory             An EncoderFactoryInterface instance
     * @param Boolean                 $hideUserNotFoundExceptions Whether to hide user not found exception or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * DaoAuthenticationProvider uses a UserProviderInterface to retrieve the user
 * for a UsernamePasswordToken.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @dataProvider getIgnoredControllers
     */",
 "/**
     * Responds to the twig configuration parameter.
     *
     * @param array            $configs
     * @param ContainerBuilder $container
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
 * TwigExtension.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jeremy Mikola <jmikola@gmail.com>
 */",
 "/**
 * SimpleSelectClause  ::= \"SELECT\" [\"DISTINCT\"] SimpleSelectExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * This is called when an interactive authentication attempt fails. This is
     * called by authentication listeners inheriting from
     * AbstractAuthenticationListener.
     *
     * @param Request                 $request
     * @param AuthenticationException $exception
     *
     * @return Response the response to return
     */",
 "/**
 * Interface for custom authentication failure handlers.
 *
 * If you want to customize the failure handling process, instead of
 * overwriting the respective listener globally, you can set a custom failure
 * handler which implements this interface.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @return EntityManager
     */",
 "/**
 * Provides event arguments for the preFlush event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @version     $Revision$
 * @author      Roman Borschel <roman@code-factory.de>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Initializes a new <tt>ExpressionBuilder</tt>.
     *
     * @param Doctrine\DBAL\Connection $connection DBAL Connection
     */",
 "/**
     * Creates a conjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?) AND (u.role = ?)
     *     $expr->andX(\'u.type = ?\', \'u.role = ?\'));
     *
     * @param mixed $x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     * @return CompositeExpression
     */",
 "/**
     * Creates a disjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?) OR (u.role = ?)
     *     $qb->where($qb->expr()->orX(\'u.type = ?\', \'u.role = ?\'));
     *
     * @param mixed $x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     * @return CompositeExpression
     */",
 "/**
     * Creates a comparison expression.
     * 
     * @param mixed $x Left expression
     * @param string $operator One of the ExpressionBuikder::* constants.
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates an equality comparison expression with the given arguments.
     *
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> = <right expr>. Example:
     *
     *     [php]
     *     // u.id = ?
     *     $expr->eq(\'u.id\', \'?\');
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a non equality comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <> <right expr>. Example:
     *
     *     [php]
     *     // u.id <> 1
     *     $q->where($q->expr()->neq(\'u.id\', \'1\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a lower-than comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> < <right expr>. Example:
     *
     *     [php]
     *     // u.id < ?
     *     $q->where($q->expr()->lt(\'u.id\', \'?\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a lower-than-equal comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <= <right expr>. Example:
     *
     *     [php]
     *     // u.id <= ?
     *     $q->where($q->expr()->lte(\'u.id\', \'?\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a greater-than comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> > <right expr>. Example:
     *
     *     [php]
     *     // u.id > ?
     *     $q->where($q->expr()->gt(\'u.id\', \'?\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates a greater-than-equal comparison expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> >= <right expr>. Example:
     *
     *     [php]
     *     // u.id >= ?
     *     $q->where($q->expr()->gte(\'u.id\', \'?\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return string
     */",
 "/**
     * Creates an IS NULL expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IS NULL
     * 
     * @return string
     */",
 "/**
     * Creates an IS NOT NULL expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IS NOT NULL
     * 
     * @return string
     */",
 "/**
     * Creates a LIKE() comparison expression with the given arguments.
     *
     * @param string $x Field in string format to be inspected by LIKE() comparison.
     * @param mixed $y Argument to be used in LIKE() comparison.
     * 
     * @return string
     */",
 "/**
     * Quotes a given input parameter.
     * 
     * @param mixed $input Parameter to be quoted.
     * @param string $type Type of the parameter.
     * 
     * @return string
     */",
 "/**
 * ExpressionBuilder class is responsible to dynamically create SQL query parts.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.1
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param PackageInterface $defaultPackage The default package
     * @param array            $namedPackages  Additional packages indexed by name
     */",
 "/**
     * Sets the default package.
     *
     * @param PackageInterface $defaultPackage The default package
     */",
 "/**
     * Adds an asset package to the helper.
     *
     * @param string           $name    The package name
     * @param PackageInterface $package The package
     */",
 "/**
     * Returns an asset package.
     *
     * @param string $name The name of the package or null for the default package
     *
     * @return PackageInterface An asset package
     *
     * @throws InvalidArgumentException If there is no package by that name
     */",
 "/**
     * Gets the version to add to public URL.
     *
     * @param string $packageName A package name
     *
     * @return string The current version
     */",
 "/**
     * Returns the public path.
     *
     * Absolute paths (i.e. http://...) are returned unmodified.
     *
     * @param string $path        A public path
     * @param string $packageName The name of the asset package to use
     *
     * @return string A public path which takes into account the base path and URL path
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     */",
 "/**
 * CoreAssetsHelper helps manage asset URLs.
 *
 * Usage:
 *
 * <code>
 *   <img src=\"<?php echo $view[\'assets\']->getUrl(\'foo.png\') ?>\" />
 * </code>
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
   * Create a new Attachment with $headers, $encoder and $cache.
   * @param Swift_Mime_HeaderSet $headers
   * @param Swift_Mime_ContentEncoder $encoder
   * @param Swift_KeyCache $cache
   * @param Swift_Mime_Grammar $grammar
   * @param array $mimeTypes optional
   */",
 "/**
   * Get the nesting level used for this attachment.
   * Always returns {@link LEVEL_MIXED}.
   * @return int
   */",
 "/**
   * Get the Content-Disposition of this attachment.
   * By default attachments have a disposition of \"attachment\".
   * @return string
   */",
 "/**
   * Set the Content-Disposition of this attachment.
   * @param string $disposition
   * @return Swift_Mime_Attachment
   */",
 "/**
   * Get the filename of this attachment when downloaded.
   * @return string
   */",
 "/**
   * Set the filename of this attachment.
   * @param string $filename
   * @return Swift_Mime_Attachment
   */",
 "/**
   * Get the file size of this attachment.
   * @return int
   */",
 "/**
   * Set the file size of this attachment.
   * @param int $size
   * @return Swift_Mime_Attachment
   */",
 "/**
   * Set the file that this attachment is for.
   * @param Swift_FileStream $file
   * @param string $contentType optional
   * @return Swift_Mime_Attachment
   */",
 "/**
 * An attachment, in a multipart message.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Retrieves all child object identities from the database
     *
     * @param ObjectIdentityInterface $parentOid
     * @param Boolean $directChildrenOnly
     * @return array returns an array of child \'ObjectIdentity\'s
     */",
 "/**
     * Returns the ACL that belongs to the given object identity
     *
     * @throws AclNotFoundException when there is no ACL
     * @param ObjectIdentityInterface $oid
     * @param array $sids
     * @return AclInterface
     */",
 "/**
     * Returns the ACLs that belong to the given object identities
     *
     * @throws AclNotFoundException when we cannot find an ACL for all identities
     * @param array $oids an array of ObjectIdentityInterface implementations
     * @param array $sids an array of SecurityIdentityInterface implementations
     * @return \SplObjectStorage mapping the passed object identities to ACLs
     */",
 "/**
 * Provides a common interface for retrieving ACLs.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
     * Transforms a value from the original representation to a transformed representation.
     *
     * This method is called on two occasions inside a form field:
     *
     * 1. When the form field is initialized with the data attached from the datasource (object or array).
     * 2. When data from a request is bound using {@link Field::bind()} to transform the new input data
     *    back into the renderable format. For example if you have a date field and bind \'2009-10-10\' onto
     *    it you might accept this value because its easily parsed, but the transformer still writes back
     *    \"2009/10/10\" onto the form field (for further displaying or other purposes).
     *
     * This method must be able to deal with empty values. Usually this will
     * be NULL, but depending on your implementation other empty values are
     * possible as well (such as empty strings). The reasoning behind this is
     * that value transformers must be chainable. If the transform() method
     * of the first value transformer outputs NULL, the second value transformer
     * must be able to process that value.
     *
     * By convention, transform() should return an empty string if NULL is
     * passed.
     *
     * @param  mixed $value              The value in the original representation
     *
     * @return mixed                     The value in the transformed representation
     *
     * @throws UnexpectedTypeException   when the argument is not a string
     * @throws TransformationFailedException  when the transformation fails
     */",
 "/**
     * Transforms a value from the transformed representation to its original
     * representation.
     *
     * This method is called when {@link Field::bind()} is called to transform the requests tainted data
     * into an acceptable format for your data processing/model layer.
     *
     * This method must be able to deal with empty values. Usually this will
     * be an empty string, but depending on your implementation other empty
     * values are possible as well (such as empty strings). The reasoning behind
     * this is that value transformers must be chainable. If the
     * reverseTransform() method of the first value transformer outputs an
     * empty string, the second value transformer must be able to process that
     * value.
     *
     * By convention, reverseTransform() should return NULL if an empty string
     * is passed.
     *
     * @param  mixed $value              The value in the transformed representation
     *
     * @return mixed                     The value in the original representation
     *
     * @throws UnexpectedTypeException   when the argument is not of the expected type
     * @throws TransformationFailedException  when the transformation fails
     */",
 "/**
 * Transforms a value between different representations.
 *
 * @author     Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * Represents a template function.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * SensioDistributionExtension.
 *
 * @author Marc Weistroff <marc.weistroff@sensio.com>
 */",
 "/**
     * Converts a token stream to a node tree.
     *
     * @param  Twig_TokenStream $stream A token stream instance
     *
     * @return Twig_Node_Module A node tree
     */",
 "/**
 * Interface implemented by parser classes.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns the current response object
     *
     * @return Symfony\Component\HttpFoundation\Response
     *
     * @api
     */",
 "/**
     * Sets a new response object
     *
     * @param Symfony\Component\HttpFoundation\Response $response
     *
     * @api
     */",
 "/**
 * Allows to filter a Response object
 *
 * You can call getResponse() to retrieve the current response. With
 * setResponse() you can set a new response that will be returned to the
 * browser.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param Profiler                $profiler           A Profiler instance
     * @param RequestMatcherInterface $matcher            A RequestMatcher instance
     * @param Boolean                 $onlyException      true if the profiler only collects data when an exception occurs, false otherwise
     * @param Boolean                 $onlyMasterRequests true if the profiler only collects data when the request is a master request, false otherwise
     */",
 "/**
     * Handles the onKernelException event.
     *
     * @param GetResponseForExceptionEvent $event A GetResponseForExceptionEvent instance
     */",
 "/**
     * Handles the onKernelResponse event.
     *
     * @param FilterResponseEvent $event A FilterResponseEvent instance
     */",
 "/**
 * ProfilerListener collects data for the current request by listening to the onKernelResponse event.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @param string $word
     * @return array
     */",
 "/**
     * @param string $name The logging channel
     */",
 "/**
     * @return string
     */",
 "/**
     * Pushes an handler on the stack.
     *
     * @param HandlerInterface $handler
     */",
 "/**
     * Pops an handler from the stack
     *
     * @return HandlerInterface
     */",
 "/**
     * Adds a processor in the stack.
     *
     * @param callable $callback
     */",
 "/**
     * Removes the processor on top of the stack and returns it.
     *
     * @return callable
     */",
 "/**
     * Adds a log record.
     *
     * @param integer $level The logging level
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the DEBUG level.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the INFO level.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the WARNING level.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the ERROR level.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the CRITICAL level.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the ALERT level.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Gets the name of the logging level.
     *
     * @param integer $level
     * @return string
     */",
 "/**
     * Adds a log record at the DEBUG level.
     *
     * This method allows to have an easy ZF compatibility.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the INFO level.
     *
     * This method allows to have an easy ZF compatibility.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the INFO level.
     *
     * This method allows to have an easy ZF compatibility.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the WARNING level.
     *
     * This method allows to have an easy ZF compatibility.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the ERROR level.
     *
     * This method allows to have an easy ZF compatibility.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the CRITICAL level.
     *
     * This method allows to have an easy ZF compatibility.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the ALERT level.
     *
     * This method allows to have an easy ZF compatibility.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
     * Adds a log record at the ALERT level.
     *
     * This method allows to have an easy ZF compatibility.
     *
     * @param string $message The log message
     * @param array $context The log context
     * @return Boolean Whether the record has been processed
     */",
 "/**
 * Monolog log channel
 *
 * It contains a stack of Handlers and a stack of Processors,
 * and uses them to store records that are added to it.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Constructor.
     *
     * @param HttpKernelInterface $kernel    An HttpKernel instance
     * @param array               $server    The server parameters (equivalent of $_SERVER)
     * @param History             $history   A History instance to store the browser history
     * @param CookieJar           $cookieJar A CookieJar instance to store the cookies
     */",
 "/**
     * Makes a request.
     *
     * @param Request  $request A Request instance
     *
     * @return Response A Response instance
     */",
 "/**
     * Returns the script to execute when the request must be insulated.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Converts the BrowserKit request to a HttpKernel request.
     *
     * @param DomRequest $request A Request instance
     *
     * @return Request A Request instance
     */",
 "/**
     * Filters an array of files.
     *
     * This method created test instances of UploadedFile so that the move()
     * method can be called on those instances.
     *
     * If the size of a file is greater than the allowed size (from php.ini) then
     * an invalid UploadedFile is returned with an error set to UPLOAD_ERR_INI_SIZE.
     *
     * @see Symfony\Component\HttpFoundation\File\\UploadedFile
     *
     * @param array $files An array of files
     *
     * @return array An array with all uploaded files marked as already moved
     */",
 "/**
     * Converts the HttpKernel response to a BrowserKit response.
     *
     * @param Response $response A Response instance
     *
     * @return Response A Response instance
     */",
 "/**
 * Client simulates a browser and makes requests to a Kernel object.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Array of mapping files.
     *
     * @param array $paths Array of file paths
     */",
 "/**
     * Array of mapping files.
     *
     * @param array $paths Array of file paths
     *
     * @return array Array of metadata loaders
     */",
 "/**
     * Takes mapping file path.
     *
     * @param string $file
     *
     * @return LoaderInterface
     */",
 "/**
 * Creates mapping loaders for array of files.
 *
 * Abstract class, used by
 *
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 *
 * @see    Symfony\Component\Validator\Mapping\Loader\YamlFileLoader
 * @see    Symfony\Component\Validator\Mapping\Loader\XmlFileLoader
 */",
 "/**
     * Constructor.
     */",
 "/**
     * Checks if the graph has a specific node.
     *
     * @param string $id Id to check
     */",
 "/**
     * Gets a node by identifier.
     *
     * @param string $id The id to retrieve
     *
     * @return ServiceReferenceGraphNode The node matching the supplied identifier
     *
     * @throws \InvalidArgumentException
     */",
 "/**
     * Returns all nodes.
     *
     * @return array An array of all ServiceReferenceGraphNode objects
     */",
 "/**
     * Clears all nodes.
     */",
 "/**
     * Connects 2 nodes together in the Graph.
     *
     * @param string $sourceId
     * @param string $sourceValue
     * @param string $destId
     * @param string $destValue
     * @param string $reference
     */",
 "/**
     * Creates a graph node.
     *
     * @param string $id
     * @param string $value
     *
     * @return ServiceReferenceGraphNode
     */",
 "/**
 * This is a directed graph of your services.
 *
 * This information can be used by your compiler passes instead of collecting
 * it themselves which improves performance quite a lot.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Generates the SQL UPDATE that updates a particular row\'s foreign
     * key to null.
     *
     * @param PersistentCollection $coll
     * @return string
     * @override
     */",
 "/**
     * Generates the SQL UPDATE that updates all the foreign keys to null.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to delete
     * the given collection.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to insert the given
     * element of the given collection into the database.
     *
     * @param PersistentCollection $coll
     * @param mixed $element
     */",
 "/**
     * Gets the SQL parameters for the corresponding SQL statement to delete the given
     * element from the given collection.
     *
     * @param PersistentCollection $coll
     * @param mixed $element
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @param PersistentCollection $coll
     * @param int $offset
     * @param int $length
     * @return \Doctrine\Common\Collections\ArrayCollection
     */",
 "/**
     * @param PersistentCollection $coll
     * @param object $element
     */",
 "/**
 * Persister for one-to-many collections.
 *
 * IMPORTANT:
 * This persister is only used for uni-directional one-to-many mappings on a foreign key
 * (which are not yet supported). So currently this persister is not used.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @todo Remove
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Marks a section of a template to be escaped or not.
 *
 * <pre>
 * {% autoescape true %}
 *   Everything will be automatically escaped in this block
 * {% endautoescape %}
 *
 * {% autoescape false %}
 *   Everything will be outputed as is in this block
 * {% endautoescape %}
 *
 * {% autoescape true js %}
 *   Everything will be automatically escaped in this block
 *   using the js escaping strategy
 * {% endautoescape %}
 * </pre>
 */",
 "/**
 * Expression class for building DQL and parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Register a new exporter driver class under a specified name
     *
     * @param string $name
     * @param string $class
     */",
 "/**
     * Get a exporter driver instance
     *
     * @param string $type   The type to get (yml, xml, etc.)
     * @param string $source    The directory where the exporter will export to
     * @return AbstractExporter $exporter
     */",
 "/**
 * Class used for converting your mapping information between the
 * supported formats: yaml, xml, and php/annotation.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for 12 hour format (0-11)
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Initializes a new instance of the <tt>ProxyFactory</tt> class that is
     * connected to the given <tt>EntityManager</tt>.
     *
     * @param EntityManager $em The EntityManager the new factory works for.
     * @param string $proxyDir The directory to use for the proxy classes. It must exist.
     * @param string $proxyNs The namespace to use for the proxy classes.
     * @param boolean $autoGenerate Whether to automatically generate proxy classes.
     */",
 "/**
*Getsareferenceproxyinstancefortheentityofthegiventypeandidentifiedby
*thegivenidentifier.
*
*@paramstring$className
*@parammixed$identifier
*@returnobject
*/",
 "/**
*Generatesproxyclassesforallgivenclasses.
*
*@paramarray$classesTheclasses(ClassMetadatainstances)forwhichtogenerateproxies.
*@paramstring$toDirThetargetdirectoryoftheproxyclasses.Ifnotspecified,the
*directoryconfiguredontheConfigurationoftheEntityManagerused
*bythisfactoryisused.
*/",
 "/**
*Generatesaproxyclassfile.
*
*@param$class
*@param$originalClassName
*@param$proxyClassName
*@param$fileThepathofthefiletowriteto.
*/",
 "/**
*Generatesthemethodsofaproxyclass.
*
*@paramClassMetadata$class
*@returnstringThecodeofthegeneratedmethods.
*/",
 "/**
*Generatesthecodeforthe__sleepmethodforaproxyclass.
*
*@param$class
*@returnstring
*/",
 "/**
 * This factory is used to create proxy objects for entities at runtime.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Giorgio Sironi <piccoloprincipeazzurro@gmail.com>
 * @since 2.0
 */",
 "/**
   * Get the name of the AUTH mechanism this Authenticator handles.
   * @return string
   */",
 "/**
   * Try to authenticate the user with $username and $password.
   * @param Swift_Transport_SmtpAgent $agent
   * @param string $username
   * @param string $password
   * @return boolean
   */",
 "/**
 * An Authentication mechanism.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @dataProvider getFormats
     */",
 "/**
 * @group integration
 */",
 "/**
     * Constructor.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Returns a parameter from the current request object.
     *
     * @param string $key     The name of the parameter
     * @param string $default A default value
     *
     * @see Symfony\Component\HttpFoundation\Request::get()
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     */",
 "/**
 * RequestHelper provides access to the current request parameters.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param ProfilerStorageInterface $storage A ProfilerStorageInterface instance
     * @param LoggerInterface          $logger  A LoggerInterface instance
     */",
 "/**
     * Disables the profiler.
     */",
 "/**
     * Loads the Profile for the given Response.
     *
     * @param Response $response A Response instance
     *
     * @return Profile A Profile instance
     */",
 "/**
     * Loads the Profile for the given token.
     *
     * @param string $token A token
     *
     * @return Profile A Profile instance
     */",
 "/**
     * Saves a Profile.
     *
     * @param Profile $profile A Profile instance
     *
     * @return Boolean
     */",
 "/**
     * Purges all data from the storage.
     */",
 "/**
     * Exports the current profiler data.
     *
     * @return string The exported data
     */",
 "/**
     * Imports data into the profiler storage.
     *
     * @param string $data A data string as exported by the export() method
     *
     * @return Profile A Profile instance
     */",
 "/**
     * Finds profiler tokens for the given criteria.
     *
     * @param string $ip    The IP
     * @param string $url   The URL
     * @param string $limit The maximum number of tokens to return
     *
     * @return array An array of tokens
     */",
 "/**
     * Collects data for the given Response.
     *
     * @param Request    $request   A Request instance
     * @param Response   $response  A Response instance
     * @param \Exception $exception An exception instance if the request threw one
     *
     * @return Profile|false A Profile instance or false if the profiler is disabled
     */",
 "/**
     * Gets the Collectors associated with this profiler.
     *
     * @return array An array of collectors
     */",
 "/**
     * Sets the Collectors associated with this profiler.
     *
     * @param array $collectors An array of collectors
     */",
 "/**
     * Adds a Collector.
     *
     * @param DataCollectorInterface $collector A DataCollectorInterface instance
     */",
 "/**
     * Returns true if a Collector for the given name exists.
     *
     * @param string $name A collector name
     */",
 "/**
     * Gets a Collector by name.
     *
     * @param string $name A collector name
     *
     * @return DataCollectorInterface A DataCollectorInterface instance
     *
     * @throws \InvalidArgumentException if the collector does not exist
     */",
 "/**
 * Profiler.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param CsrfProviderInterface $csrfProvider The CSRF provider
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * This extension protects forms by using a CSRF token
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Processes the ContainerBuilder for inline service definitions.
     *
     * @param ContainerBuilder $container
     */",
 "/**
     * Processes inline arguments.
     *
     * @param ContainerBuilder $container The ContainerBuilder
     * @param array            $arguments An array of arguments
     */",
 "/**
     * Checks if the definition is inlineable.
     *
     * @param ContainerBuilder $container
     * @param string           $id
     * @param Definition       $definition
     *
     * @return Boolean If the definition is inlineable
     */",
 "/**
 * Inline service definitions where this is possible.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Checks that the location of the YUI JAR has been configured.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Parses a template to an array of parameters.
     *
     * @param string $name A template name
     *
     * @return TemplateReferenceInterface A template
     *
     * @api
     */",
 "/**
 * TemplateNameParser is the default implementation of TemplateNameParserInterface.
 *
 * This implementation takes everything as the template name
 * and the extension for the engine.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * Configuration interface
 *
 * @author Victor Berchet <victor@suumit.com>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Imports macros.
 *
 * <pre>
 *   {% from \'forms.html\' import forms %}
 * </pre>
 */",
 "/**
     * Locates a cached Response for the Request provided.
     *
     * @param Request $request A Request instance
     *
     * @return Response|null A Response instance, or null if no cache entry was found
     */",
 "/**
     * Writes a cache entry to the store for the given Request and Response.
     *
     * Existing entries are read and any that match the response are removed. This
     * method calls write with the new list of cache entries.
     *
     * @param Request  $request  A Request instance
     * @param Response $response A Response instance
     *
     * @return string The key under which the response is stored
     */",
 "/**
     * Invalidates all cache entries that match the request.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Locks the cache for a given Request.
     *
     * @param Request $request A Request instance
     *
     * @return Boolean|string true if the lock is acquired, the path to the current lock otherwise
     */",
 "/**
     * Releases the lock for the given Request.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Purges data for the given URL.
     *
     * @param string $url A URL
     *
     * @return Boolean true if the URL exists and has been purged, false otherwise
     */",
 "/**
     * Cleanups storage.
     */",
 "/**
 * Interface implemented by HTTP cache stores.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param \Twig_Compiler $compiler A Twig_Compiler instance
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @expectedException \InvalidArgumentException
     */",
 "/**
     * Dumps the service container.
     *
     * @param  array  $options An array of options
     *
     * @return string The representation of the service container
     *
     * @api
     */",
 "/**
 * DumperInterface is the interface implemented by service container dumper classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Executor that executes the SQL statements for DQL DELETE/UPDATE statements on classes
 * that are mapped to a single table.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @author      Roman Borschel <roman@code-factory.org>
 * @version     $Revision$
 * @link        www.doctrine-project.org
 * @since       2.0
 * @todo This is exactly the same as SingleSelectExecutor. Unify in SingleStatementExecutor. 
 */",
 "/**
 * Registers processors in Monolg loggers or handlers.
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Returns whether the given choice is a group.
     *
     * @param mixed $choice A choice
     *
     * @return Boolean Whether the choice is a group
     */",
 "/**
     * Returns whether the given choice is selected.
     *
     * @param mixed $choice The choice
     * @param mixed $value  the value
     *
     * @return Boolean Whether the choice is selected
     */",
 "/**
     * @param string $ident
     * @param mixed $facility
     * @param integer $level The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Logs to syslog service.
 *
 * usage example:
 *
 *   $log = new Logger(\'application\');
 *   $syslog = new SyslogHandler(\'myfacility\', \'local6\');
 *   $formatter = new LineFormatter(\"%channel%.%level_name%: %message% %extra%\");
 *   $syslog->setFormatter($formatter);
 *   $log->pushHandler($syslog);
 *
 * @author Sven Paulus <sven@karlsruhe.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Type that maps an SQL TIME to a PHP DateTime object.
 *
 * @since 2.0
 */",
 "/**
 * UsernameNotFoundException is thrown if a User cannot be found by its username.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * ArithmeticFactor ::= [(\"+\" | \"-\")] ArithmeticPrimary
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * UpdateClause ::= \"UPDATE\" AbstractSchemaName [[\"AS\"] AliasIdentificationVariable] \"SET\" UpdateItem {\",\" UpdateItem}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns a list of functions to add to the existing list.
     *
     * @return array An array of functions
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * Provides integration of the Routing component with Twig.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param \Swift_Mailer $mailer The mailer to use
     * @param callback|\Swift_Message $message An example message for real messages, only the body will be replaced
     * @param integer $level The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * SwiftMailerHandler uses Swift_Mailer to send the emails
 *
 * @author Gyula Sallai
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Includes a template.
 *
 * <pre>
 *   {% include \'header.html\' %}
 *     Body
 *   {% include \'footer.html\' %}
 * </pre>
 */",
 "/**
 * @group integration
 */",
 "/**
 * Secret Form Type.
 *
 * @author Marc Weistroff <marc.weistroff@sensio.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Merges extension configs into the container builder
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new ArrayRecipientIterator from $recipients.
   * @param array $recipients
   */",
 "/**
   * Returns true only if there are more recipients to send to.
   * @return boolean
   */",
 "/**
   * Returns an array where the keys are the addresses of recipients and the
   * values are the names.
   * e.g. (\'foo@bar\' => \'Foo\') or (\'foo@bar\' => NULL)
   * @return array
   */",
 "/**
 * Wraps a standard PHP array in an interator.
 * @package Swift
 * @subpackage Mailer
 * @author Chris Corbyn
 */",
 "/**
 * Pessimistic Lock Exception
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents an extension call node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @group integration
 */",
 "/**
 * JoinVariableDeclaration ::= Join [IndexBy]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param string $locale   The locale
     * @param array  $messages An array of messages classified by domain
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
 * MessageCatalogue.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param  \Twig_Token $token A Twig_Token instance
     *
     * @return \Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Token Parser for the \'form_theme\' tag.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $items An array of NodeInterface objects
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * OrNode represents a \"Or\" node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @dataProvider getGlobs
     */",
 "/**
 * WebProcessor override to read from the HttpFoundation\'s Request
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Creates a conjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?1) AND (u.role = ?2)
     *     $expr->andX(\'u.type = ?1\', \'u.role = ?2\'));
     *
     * @param mixed $x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     * @return Expr\Andx
     */",
 "/**
     * Creates a disjunction of the given boolean expressions.
     *
     * Example:
     *
     *     [php]
     *     // (u.type = ?1) OR (u.role = ?2)
     *     $q->where($q->expr()->orX(\'u.type = ?1\', \'u.role = ?2\'));
     *
     * @param mixed $x Optional clause. Defaults = null, but requires
     *                 at least one defined when converting to string.
     * @return Expr\Orx
     */",
 "/**
     * Creates an ASCending order expression.
     *
     * @param $sort
     * @return Expr\OrderBy
     */",
 "/**
     * Creates a DESCending order expression.
     *
     * @param $sort
     * @return Expr\OrderBy
     */",
 "/**
     * Creates an equality comparison expression with the given arguments.
     *
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> = <right expr>. Example:
     *
     *     [php]
     *     // u.id = ?1
     *     $expr->eq(\'u.id\', \'?1\');
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <> <right expr>. Example:
     *
     *     [php]
     *     // u.id <> ?1
     *     $q->where($q->expr()->neq(\'u.id\', \'?1\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> < <right expr>. Example:
     *
     *     [php]
     *     // u.id < ?1
     *     $q->where($q->expr()->lt(\'u.id\', \'?1\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> <= <right expr>. Example:
     *
     *     [php]
     *     // u.id <= ?1
     *     $q->where($q->expr()->lte(\'u.id\', \'?1\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> > <right expr>. Example:
     *
     *     [php]
     *     // u.id > ?1
     *     $q->where($q->expr()->gt(\'u.id\', \'?1\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of Expr\Comparison, with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> >= <right expr>. Example:
     *
     *     [php]
     *     // u.id >= ?1
     *     $q->where($q->expr()->gte(\'u.id\', \'?1\'));
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Comparison
     */",
 "/**
     * Creates an instance of AVG() function, with the given argument.
     *
     * @param mixed $x Argument to be used in AVG() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of MAX() function, with the given argument.
     *
     * @param mixed $x Argument to be used in MAX() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of MIN() function, with the given argument.
     *
     * @param mixed $x Argument to be used in MIN() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of COUNT() function, with the given argument.
     *
     * @param mixed $x Argument to be used in COUNT() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of COUNT(DISTINCT) function, with the given argument.
     *
     * @param mixed $x Argument to be used in COUNT(DISTINCT) function.
     * @return string
     */",
 "/**
     * Creates an instance of EXISTS() function, with the given DQL Subquery.
     *
     * @param mixed $subquery DQL Subquery to be used in EXISTS() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an instance of ALL() function, with the given DQL Subquery.
     *
     * @param mixed $subquery DQL Subquery to be used in ALL() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a SOME() function expression with the given DQL subquery.
     *
     * @param mixed $subquery DQL Subquery to be used in SOME() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an ANY() function expression with the given DQL subquery.
     *
     * @param mixed $subquery DQL Subquery to be used in ANY() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a negation expression of the given restriction.
     *
     * @param mixed $restriction Restriction to be used in NOT() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an ABS() function expression with the given argument.
     *
     * @param mixed $x Argument to be used in ABS() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a product mathematical expression with the given arguments.
     *
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> * <right expr>. Example:
     *
     *     [php]
     *     // u.salary * u.percentAnualSalaryIncrease
     *     $q->expr()->prod(\'u.salary\', \'u.percentAnualSalaryIncrease\')
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Math
     */",
 "/**
     * Creates a difference mathematical expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> - <right expr>. Example:
     *
     *     [php]
     *     // u.monthlySubscriptionCount - 1
     *     $q->expr()->diff(\'u.monthlySubscriptionCount\', \'1\')
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Math
     */",
 "/**
     * Creates a sum mathematical expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> + <right expr>. Example:
     *
     *     [php]
     *     // u.numChildren + 1
     *     $q->expr()->diff(\'u.numChildren\', \'1\')
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Math
     */",
 "/**
     * Creates a quotient mathematical expression with the given arguments.
     * First argument is considered the left expression and the second is the right expression.
     * When converted to string, it will generated a <left expr> / <right expr>. Example:
     *
     *     [php]
     *     // u.total / u.period
     *     $expr->quot(\'u.total\', \'u.period\')
     *
     * @param mixed $x Left expression
     * @param mixed $y Right expression
     * @return Expr\Math
     */",
 "/**
     * Creates a SQRT() function expression with the given argument.
     *
     * @param mixed $x Argument to be used in SQRT() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an IN() expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IN() function
     * @param mixed $y Argument to be used in IN() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a NOT IN() expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by NOT IN() function
     * @param mixed $y Argument to be used in NOT IN() function.
     * @return Expr\Func
     */",
 "/**
     * Creates an IS NULL expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IS NULL
     * @return string
     */",
 "/**
     * Creates an IS NOT NULL expression with the given arguments.
     *
     * @param string $x Field in string format to be restricted by IS NOT NULL
     * @return string
     */",
 "/**
     * Creates a LIKE() comparison expression with the given arguments.
     *
     * @param string $x Field in string format to be inspected by LIKE() comparison.
     * @param mixed $y Argument to be used in LIKE() comparison.
     * @return Expr\Comparison
     */",
 "/**
     * Creates a CONCAT() function expression with the given arguments.
     *
     * @param mixed $x First argument to be used in CONCAT() function.
     * @param mixed $x Second argument to be used in CONCAT() function.
     * @return Expr\Func
     */",
 "/**
     * Creates a SUBSTRING() function expression with the given arguments.
     *
     * @param mixed $x Argument to be used as string to be cropped by SUBSTRING() function.
     * @param integer $from Initial offset to start cropping string. May accept negative values.
     * @param integer $len Length of crop. May accept negative values.
     * @return Expr\Func
     */",
 "/**
     * Creates a LOWER() function expression with the given argument.
     *
     * @param mixed $x Argument to be used in LOWER() function.
     * @return Expr\Func A LOWER function expression.
     */",
 "/**
     * Creates an UPPER() function expression with the given argument.
     *
     * @param mixed $x Argument to be used in UPPER() function.
     * @return Expr\Func An UPPER function expression.
     */",
 "/**
     * Creates a LENGTH() function expression with the given argument.
     *
     * @param mixed $x Argument to be used as argument of LENGTH() function.
     * @return Expr\Func A LENGTH function expression.
     */",
 "/**
     * Creates a literal expression of the given argument.
     *
     * @param mixed $literal Argument to be converted to literal.
     * @return Expr\Literal
     */",
 "/**
     * Quotes a literal value, if necessary, according to the DQL syntax.
     *
     * @param mixed $literal The literal value.
     * @return string
     */",
 "/**
     * Creates an instance of BETWEEN() function, with the given argument.
     *
     * @param mixed $val Valued to be inspected by range values.
     * @param integer $x Starting range value to be used in BETWEEN() function.
     * @param integer $y End point value to be used in BETWEEN() function.
     * @return Expr\Func A BETWEEN expression.
     */",
 "/**
     * Creates an instance of TRIM() function, with the given argument.
     *
     * @param mixed $x Argument to be used as argument of TRIM() function.
     * @return Expr\Func a TRIM expression.
     */",
 "/**
 * This class is used to generate DQL expressions via a set of PHP static functions
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: ExpressionBuilder
 */",
 "/**
 * Base class for class metadata.
 *
 * This class is intended to be extended to add your own application specific
 * properties, and flags.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The PHPDriver includes php files which just populate ClassMetadataInfo
 * instances with plain php code
 *
 * @license 	http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    	www.doctrine-project.org
 * @since   	2.0
 * @version     $Revision$
 * @author		Benjamin Eberlei <kontakt@beberlei.de>
 * @author		Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan H. Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 * @todo Rename: PHPDriver
 */",
 "/**
     * Constructor.
     *
     * @param string                    $name
     * @param FormFactoryInterface      $factory
     * @param EventDispatcherInterface  $dispatcher
     * @param string                    $dataClass
     */",
 "/**
     * Returns the associated form factory.
     *
     * @return FormFactoryInterface The factory
     */",
 "/**
     * Returns the name of the form.
     *
     * @return string The form name
     */",
 "/**
     * Updates the field with default data.
     *
     * @param array $appData The data formatted as expected for the underlying object
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns the data in the format needed for the underlying object.
     *
     * @return mixed
     */",
 "/**
     * Set whether the form is read only
     *
     * @param Boolean $readOnly Whether the form is read only
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns whether the form is read only.
     *
     * @return Boolean Whether the form is read only
     */",
 "/**
     * Sets whether this field is required to be filled out when bound.
     *
     * @param Boolean $required
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns whether this field is required to be filled out when bound.
     *
     * @return Boolean Whether this field is required
     */",
 "/**
     * Sets whether errors bubble up to the parent.
     *
     * @param type $errorBubbling
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns whether errors bubble up to the parent.
     *
     * @return Boolean
     */",
 "/**
     * Adds a validator to the form.
     *
     * @param FormValidatorInterface $validator The validator
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns the validators used by the form.
     *
     * @return array An array of FormValidatorInterface
     */",
 "/**
     * Adds an event listener for events on this field
     *
     * @see Symfony\Component\EventDispatcher\EventDispatcherInterface::addListener
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Adds an event subscriber for events on this field
     *
     * @see Symfony\Component\EventDispatcher\EventDispatcherInterface::addSubscriber
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Appends a transformer to the normalization transformer chain
     *
     * @param DataTransformerInterface $normTransformer
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Prepends a transformer to the client transformer chain
     *
     * @param DataTransformerInterface $normTransformer
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Clears the normalization transformers.
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns all the normalization transformers.
     *
     * @return array An array of DataTransformerInterface
     */",
 "/**
     * Appends a transformer to the client transformer chain
     *
     * @param DataTransformerInterface $clientTransformer
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Prepends a transformer to the client transformer chain
     *
     * @param DataTransformerInterface $clientTransformer
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Clears the client transformers.
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns all the client transformers.
     *
     * @return array An array of DataTransformerInterface
     */",
 "/**
     * Sets the value for an attribute.
     *
     * @param string $name  The name of the attribute
     * @param string $value The value of the attribute
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns the value of the attributes with the given name.
     *
     * @param string $name The name of the attribute
     */",
 "/**
     * Returns whether the form has an attribute with the given name.
     *
     * @param string $name The name of the attribute
     */",
 "/**
     * Returns all the attributes.
     *
     * @return array An array of attributes
     */",
 "/**
     * Sets the data mapper used by the form.
     *
     * @param DataMapperInterface $dataMapper
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns the data mapper used by the form.
     *
     * @return array An array of DataMapperInterface
     */",
 "/**
     * Set the types.
     *
     * @param array $types An array FormTypeInterface
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Return the types.
     *
     * @return array An array of FormTypeInterface
     */",
 "/**
     * Sets the data used for the client data when no value is bound.
     *
     * @param mixed $emptyData
     */",
 "/**
     * Returns the data used for the client data when no value is bound.
     *
     * @return mixed
     */",
 "/**
     * Adds a new field to this group. A field must have a unique name within
     * the group. Otherwise the existing field is overwritten.
     *
     * If you add a nested group, this group should also be represented in the
     * object hierarchy.
     *
     * @param string|FormBuilder       $child
     * @param string|FormTypeInterface $type
     * @param array                    $options
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Creates a form builder.
     *
     * @param string                    $name    The name of the form or the name of the property
     * @param string|FormTypeInterface  $type    The type of the form or null if name is a property
     * @param array                     $options The options
     *
     * @return FormBuilder The builder
     */",
 "/**
     * Returns a child by name.
     *
     * @param string $name The name of the child
     *
     * @return FormBuilder The builder for the child
     *
     * @throws FormException if the given child does not exist
     */",
 "/**
     * Removes the field with the given name.
     *
     * @param string $name
     *
     * @return FormBuilder The current builder
     */",
 "/**
     * Returns whether a field with the given name exists.
     *
     * @param  string $name
     *
     * @return Boolean
     */",
 "/**
     * Creates the form.
     *
     * @return Form The form
     */",
 "/**
     * Returns the event dispatcher.
     *
     * @return type
     */",
 "/**
     * Creates the children.
     *
     * @return array An array of Form
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Validate that the current mapping is valid
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Parses a collection of \"constraint\" XML nodes.
     *
     * @param SimpleXMLElement $nodes The XML nodes
     *
     * @return array The Constraint instances
     */",
 "/**
     * Parses a collection of \"value\" XML nodes.
     *
     * @param SimpleXMLElement $nodes The XML nodes
     *
     * @return array The values
     */",
 "/**
     * Parses a collection of \"option\" XML nodes.
     *
     * @param SimpleXMLElement $nodes The XML nodes
     *
     * @return array The options
     */",
 "/**
     * Parse a XML File.
     *
     * @param string $file Path of file
     *
     * @return SimpleXMLElement
     *
     * @throws MappingException
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
 * NullLogger.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns whether further event listeners should be triggered.
     *
     * @see Event::stopPropagation
     * @return Boolean Whether propagation was already stopped for this event.
     *
     * @api
     */",
 "/**
     * Stops the propagation of the event to further event listeners.
     *
     * If multiple event listeners are connected to the same event, no
     * further event listener will be triggered once any trigger calls
     * stopPropagation().
     *
     * @api
     */",
 "/**
 * Event is the base class for classes containing event data.
 *
 * This class contains no event data. It is used by events that do not pass
 * state information to an event handler when an event is raised.
 *
 * You can call the method stopPropagation() to abort the execution of
 * further listeners in your event listener.
 *
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Bernhard Schussek <bschussek@gmail.com>
 *
 * @api
 */",
 "/**
 * Class which authenticates RunAsTokens.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Create a new ThrottlerPlugin.
   * @param int $rate
   * @param int $mode, defaults to {@link BYTES_PER_MINUTE}
   * @param Swift_Plugins_Sleeper $sleeper (only needed in testing)
   * @param Swift_Plugins_Timer $timer (only needed in testing)
   */",
 "/**
   * Invoked immediately before the Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Invoked when a Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Sleep for $seconds.
   * @param int $seconds
   */",
 "/**
   * Get the current UNIX timestamp
   * @return int
   */",
 "/**
   * Get a number of seconds to sleep for.
   * @param int $timePassed
   * @return int
   * @access private
   */",
 "/**
   * Get a number of seconds to sleep for.
   * @param int $timePassed
   * @return int
   * @access private
   */",
 "/**
 * Throttles the rate at which emails are sent.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
     * Normalizes an object into a set of arrays/scalars
     *
     * @param object $object object to normalize
     * @param string $format format the normalization result will be encoded as
     * @return array|scalar
     */",
 "/**
     * Denormalizes data back into an object of the given class
     *
     * @param mixed $data data to restore
     * @param string $class the expected class to instantiate
     * @param string $format format the given data was extracted from
     * @return object
     */",
 "/**
     * Checks whether the given class is supported for normalization by this normalizer
     *
     * @param mixed   $data   Data to normalize.
     * @param string  $format The format being (de-)serialized from or into.
     * @return Boolean
     */",
 "/**
     * Checks whether the given class is supported for denormalization by this normalizer
     *
     * @param mixed   $data   Data to denormalize from.
     * @param string  $type   The class to which the data should be denormalized.
     * @param string  $format The format being deserialized from.
     * @return Boolean
     */",
 "/**
 * Defines the interface of normalizers.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Constructor.
     *
     * @param string  $environment The environment
     * @param Boolean $debug       Whether to enable debugging or not
     *
     * @api
     */",
 "/**
     * Boots the current kernel.
     *
     * @api
     */",
 "/**
     * Shutdowns the kernel.
     *
     * This method is mainly useful when doing functional testing.
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * Gets a http kernel from the container
     *
     * @return HttpKernel
     */",
 "/**
     * Gets the registered bundle instances.
     *
     * @return array An array of registered bundle instances
     *
     * @api
     */",
 "/**
     * Checks if a given class name belongs to an active bundle.
     *
     * @param string $class A class name
     *
     * @return Boolean true if the class belongs to an active bundle, false otherwise
     *
     * @api
     */",
 "/**
     * Returns a bundle and optionally its descendants by its name.
     *
     * @param string  $name  Bundle name
     * @param Boolean $first Whether to return the first bundle only or together with its descendants
     *
     * @return BundleInterface|Array A BundleInterface instance or an array of BundleInterface instances if $first is false
     *
     * @throws \InvalidArgumentException when the bundle is not enabled
     *
     * @api
     */",
 "/**
     * Returns the file path for a given resource.
     *
     * A Resource can be a file or a directory.
     *
     * The resource name must follow the following pattern:
     *
     *     @<BundleName>/path/to/a/file.something
     *
     * where BundleName is the name of the bundle
     * and the remaining part is the relative path in the bundle.
     *
     * If $dir is passed, and the first segment of the path is \"Resources\",
     * this method will look for a file named:
     *
     *     $dir/<BundleName>/path/without/Resources
     *
     * before looking in the bundle resource folder.
     *
     * @param string  $name  A resource name to locate
     * @param string  $dir   A directory where to look for the resource first
     * @param Boolean $first Whether to return the first path or paths for all matching bundles
     *
     * @return string|array The absolute path of the resource or an array if $first is false
     *
     * @throws \InvalidArgumentException if the file cannot be found or the name is not valid
     * @throws \RuntimeException         if the name contains invalid/unsafe
     * @throws \RuntimeException         if a custom resource is hidden by a resource in a derived bundle
     *
     * @api
     */",
 "/**
     * Gets the name of the kernel
     *
     * @return string The kernel name
     *
     * @api
     */",
 "/**
     * Gets the environment.
     *
     * @return string The current environment
     *
     * @api
     */",
 "/**
     * Checks if debug mode is enabled.
     *
     * @return Boolean true if debug mode is enabled, false otherwise
     *
     * @api
     */",
 "/**
     * Gets the application root dir.
     *
     * @return string The application root dir
     *
     * @api
     */",
 "/**
     * Gets the current container.
     *
     * @return ContainerInterface A ContainerInterface instance
     *
     * @api
     */",
 "/**
     * Loads the PHP class cache.
     *
     * @param string  $name      The cache name prefix
     * @param string  $extension File extension of the resulting file
     */",
 "/**
     * Used internally.
     */",
 "/**
     * Gets the request start time (not available if debug is disabled).
     *
     * @return integer The request start timestamp
     *
     * @api
     */",
 "/**
     * Gets the cache directory.
     *
     * @return string The cache directory
     *
     * @api
     */",
 "/**
     * Gets the log directory.
     *
     * @return string The log directory
     *
     * @api
     */",
 "/**
     * Initializes the data structures related to the bundle management.
     *
     *  - the bundles property maps a bundle name to the bundle instance,
     *  - the bundleMap property maps a bundle name to the bundle inheritance hierarchy (most derived bundle first).
     *
     * @throws \LogicException if two bundles share a common name
     * @throws \LogicException if a bundle tries to extend a non-registered bundle
     * @throws \LogicException if a bundle tries to extend itself
     * @throws \LogicException if two bundles extend the same ancestor
     */",
 "/**
     * Gets the container class.
     *
     * @return string The container class
     */",
 "/**
     * Gets the container\'s base class.
     *
     * All names except Container must be fully qualified.
     *
     * @return string
     */",
 "/**
     * Initializes the service container.
     *
     * The cached version of the service container is used when fresh, otherwise the
     * container is built.
     */",
 "/**
     * Returns the kernel parameters.
     *
     * @return array An array of kernel parameters
     */",
 "/**
     * Gets the environment parameters.
     *
     * Only the parameters starting with \"SYMFONY__\" are considered.
     *
     * @return array An array of parameters
     */",
 "/**
     * Builds the service container.
     *
     * @return ContainerBuilder The compiled service container
     */",
 "/**
     * Dumps the service container to PHP code in the cache.
     *
     * @param ConfigCache      $cache     The config cache
     * @param ContainerBuilder $container The service container
     * @param string           $class     The name of the class to generate
     * @param string           $baseClass The name of the container\'s base class
     */",
 "/**
     * Returns a loader for the container.
     *
     * @param ContainerInterface $container The service container
     *
     * @return DelegatingLoader The loader
     */",
 "/**
     * Removes comments from a PHP source string.
     *
     * We don\'t use the PHP php_strip_whitespace() function
     * as we want the content to be readable and well-formatted.
     *
     * @param string $source A PHP string
     *
     * @return string The PHP string with the comments removed
     */",
 "/**
 * The Kernel is the heart of the Symfony system.
 *
 * It manages an environment made of bundles.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string $resource The file path to the resource
     * @param string $pattern  A pattern to restrict monitored files
     */",
 "/**
     * Returns a string representation of the Resource.
     *
     * @return string A string representation of the Resource
     */",
 "/**
     * Returns the resource tied to this Resource.
     *
     * @return mixed The resource
     */",
 "/**
     * Returns true if the resource has not been updated since the given timestamp.
     *
     * @param integer $timestamp The last time the resource was loaded
     *
     * @return Boolean true if the resource has not been updated, false otherwise
     */",
 "/**
 * DirectoryResource represents a resources stored in a subdirectory tree.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param AssetFactory $factory The asset factory
     */",
 "/**
     * Returns an array of javascript urls.
     */",
 "/**
     * Returns an array of stylesheet urls.
     */",
 "/**
     * Returns an array of one image url.
     */",
 "/**
     * Gets the URLs for the configured asset.
     *
     * Usage looks something like this:
     *
     *     <?php foreach ($view[\'assetic\']->assets(\'@jquery, js/src/core/*\', \'?yui_js\') as $url): ?>
     *         <script src=\"<?php echo $url ?>\" type=\"text/javascript\"></script>
     *     <?php endforeach; ?>
     *
     * When in debug mode, the helper returns an array of one or more URLs.
     * When not in debug mode it returns an array of one URL.
     *
     * @param array|string $inputs  An array or comma-separated list of input strings
     * @param array|string $filters An array or comma-separated list of filter names
     * @param array        $options An array of options
     *
     * @return array An array of URLs for the asset
     */",
 "/**
     * Returns an URL for the supplied asset.
     *
     * @param AssetInterface $asset   An asset
     * @param array          $options An array of options
     *
     * @return string An echo-ready URL
     */",
 "/**
 * The \"assetic\" templating helper.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Takes care of converting the input from a single radio button
 * to an array.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * SerializerAware Encoder implementation
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Returns the thrown exception
     *
     * @return \Exception  The thrown exception
     *
     * @api
     */",
 "/**
     * Replaces the thrown exception
     *
     * This exception will be thrown if no response is set in the event.
     *
     * @param \Exception $exception  The thrown exception
     *
     * @api
     */",
 "/**
 * Allows to create a response for a thrown exception
 *
 * Call setResponse() to set the response that will be returned for the
 * current request. The propagation of this event is stopped as soon as a
 * response is set.
 *
 * You can also call setException() to replace the thrown exception. This
 * exception will be thrown if no response is set during processing of this
 * event.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Starts a new slot.
     *
     * This method starts an output buffer that will be
     * closed when the stop() method is called.
     *
     * @param string $name  The slot name
     *
     * @throws \InvalidArgumentException if a slot with the same name is already started
     *
     * @api
     */",
 "/**
     * Stops a slot.
     *
     * @throws \LogicException if no slot has been started
     *
     * @api
     */",
 "/**
     * Returns true if the slot exists.
     *
     * @param string $name The slot name
     *
     * @api
     */",
 "/**
     * Gets the slot value.
     *
     * @param string $name    The slot name
     * @param string $default The default slot content
     *
     * @return string The slot content
     *
     * @api
     */",
 "/**
     * Sets a slot value.
     *
     * @param string $name    The slot name
     * @param string $content The slot content
     *
     * @api
     */",
 "/**
     * Outputs a slot.
     *
     * @param string $name    The slot name
     * @param string $default The default slot content
     *
     * @return Boolean true if the slot is defined or if a default content has been provided, false otherwise
     *
     * @api
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     *
     * @api
     */",
 "/**
 * SlotsHelper manages template slots.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Initialize some RFC 2822 (and friends) ABNF grammar definitions.
   * @access protected
   */",
 "/**
   * Get the grammar defined for $name token.
   * @param string $name execatly as written in the RFC
   * @return string
   */",
 "/**
   * Returns the tokens defined in RFC 2822 (and some related RFCs).
   * @return array
   */",
 "/**
   * Returns the current special characters used in the syntax which need to be escaped.
   * @return array
   */",
 "/**
*Escapespecialcharactersinastring(converttoquoted-pairs).
*@paramstring$token
*@paramstring[]$includeadditonalcharstoescape
*@paramstring[]$excludecharsfromescaping
*@returnstring
*/",
 "/**
*Definesthegrammartouseforvalidation,implementstheRFC2822(andfriends)ABNFgrammardefinitions.
*@packageSwift
*@subpackageMime
*@authorFabienPotencier
*@authorChrisCorbyn
*/",
 "/**
   * Not used.
   */",
 "/**
   * Invoked immediately after the Message is sent.
   * @param Swift_Events_SendEvent $evt
   */",
 "/**
   * Invoked immediately following a command being sent.
   * @param Swift_Events_ResponseEvent $evt
   */",
 "/**
   * Invoked immediately following a response coming back.
   * @param Swift_Events_ResponseEvent $evt
   */",
 "/**
   * Called when a message is sent so that the outgoing counter can be increased.
   * @param string $bytes
   */",
 "/**
   * Not used.
   */",
 "/**
   * Attach $is to this stream.
   * The stream acts as an observer, receiving all data that is written.
   * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
   * 
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Remove an already bound stream.
   * If $is is not bound, no errors will be raised.
   * If the stream currently has any buffered data it will be written to $is
   * before unbinding occurs.
   * 
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Not used.
   */",
 "/**
   * Get the total number of bytes sent to the server.
   * @return int
   */",
 "/**
   * Get the total number of bytes received from the server.
   * @return int
   */",
 "/**
   * Reset the internal counters to zero.
   */",
 "/**
 * Reduces network flooding when sending large amounts of mail.
 * @package Swift
 * @subpackage Plugins
 * @author Chris Corbyn
 */",
 "/**
     * Get fully-qualified class name of this persistent class.
     * 
     * @return string
     */",
 "/**
     * Gets the mapped identifier field name.
     * 
     * The returned structure is an array of the identifier field names.
     *
     * @return array
     */",
 "/**
     * Gets the ReflectionClass instance for this mapped class.
     *
     * @return ReflectionClass
     */",
 "/**
     * Checks if the given field name is a mapped identifier for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * Checks if the given field is a mapped property for this class.
     *
     * @param string $fieldName 
     * @return boolean
     */",
 "/**
     * Checks if the given field is a mapped association for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * Checks if the given field is a mapped single valued association for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * Checks if the given field is a mapped collection valued association for this class.
     *
     * @param string $fieldName
     * @return boolean
     */",
 "/**
     * A numerically indexed list of field names of this persistent class.
     * 
     * This array includes identifier fields if present on this class.
     * 
     * @return array
     */",
 "/**
     * A numerically indexed list of association names of this persistent class.
     * 
     * This array includes identifier associations if present on this class.
     * 
     * @return array
     */",
 "/**
     * Returns a type name of this field.
     * 
     * This type names can be implementation specific but should at least include the php types:
     * integer, string, boolean, float/double, datetime.
     * 
     * @param string $fieldName
     * @return string
     */",
 "/**
     * Returns the target class name of the given association.
     * 
     * @param string $assocName
     * @return string
     */",
 "/**
 * Contract for a Doctrine persistence layer ClassMetadata class to implement.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * User is the user implementation used by the in-memory user provider.
 *
 * This should not be used for anything else.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * UserChecker checks the user account flags.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param array $tables
     * @param array $sequences
     * @param array $views
     * @param array $triggers
     * @param SchemaConfig $schemaConfig
     */",
 "/**
     * @return bool
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
     * Get all tables of this schema.
     * 
     * @return array
     */",
 "/**
     * @param string $tableName
     * @return Table
     */",
 "/**
     * Does this schema have a table with the given name?
     * 
     * @param  string $tableName
     * @return Schema
     */",
 "/**
     * @param  string $sequenceName
     * @return bool
     */",
 "/**
     * @throws SchemaException
     * @param  string $sequenceName
     * @return Doctrine\DBAL\Schema\Sequence
     */",
 "/**
     * @return Doctrine\DBAL\Schema\Sequence[]
     */",
 "/**
     * Create a new table
     * 
     * @param  string $tableName
     * @return Table
     */",
 "/**
     * Rename a table
     *
     * @param string $oldTableName
     * @param string $newTableName
     * @return Schema
     */",
 "/**
     * Drop a table from the schema.
     *
     * @param string $tableName
     * @return Schema
     */",
 "/**
     * Create a new sequence
     * 
     * @param  string $sequenceName
     * @param  int $allocationSize
     * @param  int $initialValue
     * @return Sequence
     */",
 "/**
     * @param string $sequenceName
     * @return Schema
     */",
 "/**
     * Return an array of necessary sql queries to create the schema on the given platform.
     *
     * @param AbstractPlatform $platform
     * @return array
     */",
 "/**
     * Return an array of necessary sql queries to drop the schema on the given platform.
     *
     * @param AbstractPlatform $platform
     * @return array
     */",
 "/**
     * @param Schema $toSchema
     * @param AbstractPlatform $platform
     */",
 "/**
     * @param Schema $fromSchema
     * @param AbstractPlatform $platform
     */",
 "/**
     * @param Visitor $visitor
     */",
 "/**
     * Cloning a Schema triggers a deep clone of all related assets.
     *
     * @return void
     */",
 "/**
 * Object representation of a database schema
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Checks if the given class has any get{Property} method.
     *
     * @param string $class
     * @return Boolean
     */",
 "/**
     * Checks if a method\'s name is get.* and can be called without parameters.
     *
     * @param ReflectionMethod $method the method to check
     * @return Boolean whether the method is a getter.
     */",
 "/**
 * Converts between objects with getter and setter methods and arrays.
 *
 * The normalization process looks at all public methods and calls the ones
 * which have a name starting with get and take no parameters. The result is a
 * map from property names (method name stripped of the get prefix and converted
 * to lower case) to property values. Property values are normalized through the
 * serializer.
 *
 * The denormalization first looks at the constructor of the given class to see
 * if any of the parameters have the same name as one of the properties. The
 * constructor is then called with all parameters or an exception is thrown if
 * any required parameters were not present as properties. Then the denormalizer
 * walks through the given map of property names to property values to see if a
 * setter method exists for any of the properties. If a setter exists it is
 * called with the property value. No automatic denormalization of the value
 * takes place.
 *
 * @author Nils Adermann <naderman@naderman.de>
 */",
 "/**
   * Create a new ArrayByteStream.
   * If $stack is given the stream will be populated with the bytes it contains.
   * @param mixed $stack of bytes in string or array form, optional
   */",
 "/**
   * Reads $length bytes from the stream into a string and moves the pointer
   * through the stream by $length. If less bytes exist than are requested the
   * remaining bytes are given instead. If no bytes are remaining at all, boolean
   * false is returned.
   * @param int $length
   * @return string
   */",
 "/**
   * Writes $bytes to the end of the stream.
   * @param string $bytes
   */",
 "/**
   * Not used.
   */",
 "/**
   * Attach $is to this stream.
   * The stream acts as an observer, receiving all data that is written.
   * All {@link write()} and {@link flushBuffers()} operations will be mirrored.
   *
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Remove an already bound stream.
   * If $is is not bound, no errors will be raised.
   * If the stream currently has any buffered data it will be written to $is
   * before unbinding occurs.
   *
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Move the internal read pointer to $byteOffset in the stream.
   * @param int $byteOffset
   * @return boolean
   */",
 "/**
   * Flush the contents of the stream (empty it) and set the internal pointer
   * to the beginning.
   */",
 "/**
 * Allows reading and writing of bytes to and from an array.
 * @package Swift
 * @subpackage ByteStream
 * @author Chris Corbyn
 */",
 "/**
*Returnsaregexpwhichistheequivalentoftheglobpattern.
*
*@paramstring$globTheglobpattern
*@paramBoolean$strictLeadingDot
*@paramBoolean$strictWildcardSlash
*
*@returnstringregexTheregexp
*/",
 "/**
*Globmatchesglobbingpatternsagainsttext.
*
*ifmatch_glob(\"foo.*\", \"foo.bar\") echo \"matched\n\";
 *
 * // prints foo.bar and foo.baz
 * $regex = glob_to_regex(\"foo.*\");
 * for (array(\'foo.bar\', \'foo.baz\', \'foo\', \'bar\') as $t)
 * {
 *   if (/$regex/) echo \"matched: $car\n\";
 * }
 *
 * Glob implements glob(3) style matching that can be used to match
 * against text, rather than fetching names from a filesystem.
 *
 * Based on the Perl Text::Glob module.
 *
 * @author Fabien Potencier <fabien@symfony.com> PHP port
 * @author     Richard Clamp <richardc@unixbeard.net> Perl version
 * @copyright  2004-2005 Fabien Potencier <fabien@symfony.com>
 * @copyright  2002 Richard Clamp <richardc@unixbeard.net>
 */",
 "/**
 * Description of GroupByClause
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param array $passes An array of RepeatablePassInterface objects
     */",
 "/**
     * Process the repeatable passes that run more than once.
     *
     * @param ContainerBuilder $container
     */",
 "/**
     * Sets if the pass should repeat
     */",
 "/**
     * Returns the passes
     *
     * @return array An array of RepeatablePassInterface objects
     */",
 "/**
 * A pass that might be run repeatedly.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * This exception is thrown when an account is reloaded from a provider which
 * doesn\'t support the passed implementation of UserInterface.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Translates a CSS expression to its XPath equivalent.
     * Optionally, a prefix can be added to the resulting XPath
     * expression with the $prefix parameter.
     *
     * @param  mixed  $cssExpr The CSS expression.
     * @param  string $prefix  An optional prefix for the XPath expression.
     *
     * @return string
     *
     * @throws ParseException When got None for xpath expression
     *
     * @api
     */",
 "/**
     * Parses an expression and returns the Node object that represents
     * the parsed expression.
     *
     * @throws \Exception When tokenizer throws it while parsing
     *
     * @param  string $string The expression to parse
     *
     * @return Node\NodeInterface
     */",
 "/**
     * Parses a selector group contained in $stream and returns
     * the Node object that represents the expression.
     *
     * @param  TokenStream $stream The stream to parse.
     *
     * @return Node\NodeInterface
     */",
 "/**
     * Parses a selector contained in $stream and returns the Node
     * object that represents it.
     *
     * @throws ParseException When expected selector but got something else
     *
     * @param  TokenStream $stream The stream containing the selector.
     *
     * @return Node\NodeInterface
     */",
 "/**
     * Parses a simple selector (the current token) from $stream and returns
     * the resulting Node object.
     *
     * @throws ParseException When expected symbol but got something else
     *
     * @param  TokenStream $stream The stream containing the selector.
     *
     * @return Node\NodeInterface
     */",
 "/**
     * Parses an attribute from a selector contained in $stream and returns
     * the resulting AttribNode object.
     *
     * @throws ParseException When encountered unexpected selector
     *
     * @param  Node\NodeInterface $selector The selector object whose attribute
     *                                      is to be parsed.
     * @param  TokenStream        $stream    The container token stream.
     *
     * @return Node\AttribNode
     */",
 "/**
 * CssSelector is the main entry point of the component and can convert CSS
 * selectors to XPath expressions.
 *
 * $xpath = CssSelector::toXpath(\'h1.foo\');
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Set a string into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param string $string
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Set a ByteStream into the cache under $itemKey for the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_OutputByteStream $os
   * @param int $mode
   * @see MODE_WRITE, MODE_APPEND
   */",
 "/**
   * Provides a ByteStream which when written to, writes data to $itemKey.
   * NOTE: The stream will always write in append mode.
   * @param string $nsKey
   * @param string $itemKey
   * @return Swift_InputByteStream
   */",
 "/**
   * Get data back out of the cache as a string.
   * @param string $nsKey
   * @param string $itemKey
   * @return string
   */",
 "/**
   * Get data back out of the cache as a ByteStream.
   * @param string $nsKey
   * @param string $itemKey
   * @param Swift_InputByteStream $is to write the data to
   */",
 "/**
   * Check if the given $itemKey exists in the namespace $nsKey.
   * @param string $nsKey
   * @param string $itemKey
   * @return boolean
   */",
 "/**
   * Clear data for $itemKey in the namespace $nsKey if it exists.
   * @param string $nsKey
   * @param string $itemKey
   */",
 "/**
   * Clear all data in the namespace $nsKey if it exists.
   * @param string $nsKey
   */",
 "/**
 * A null KeyCache that does not cache at all.
 * @package Swift
 * @subpackage KeyCache
 * @author Chris Corbyn
 */",
 "/**
     * Reverses this transformer
     *
     * @param DataTransformerInterface $reversedTransformer
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Reverses a transformer
 *
 * When the transform() method is called, the reversed transformer\'s
 * reverseTransform() method is called and vice versa.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
*{@inheritdoc}
*/",
 "/**
*AProfilerStorageforMysql
*
*@authorJanSchumann<js@schumann-it.com>
*/",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Gets the memory.
     *
     * @return integer The memory
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * MemoryDataCollector.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Initializes the form field.
     *
     * @throws \LogicException When node type is incorrect
     */",
 "/**
 * TextareaFormField represents a textarea form field (an HTML textarea tag).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns the Controller instance associated with a Request.
     *
     * As several resolvers can exist for a single application, a resolver must
     * return false when it is not able to determine the controller.
     *
     * The resolver must only throw an exception when it should be able to load
     * controller but cannot because of some errors made by the developer.
     *
     * @param Request $request A Request instance
     *
     * @return mixed|Boolean A PHP callable representing the Controller,
     *                       or false if this resolver is not able to determine the controller
     *
     * @throws \InvalidArgumentException|\LogicException If the controller can\'t be found
     *
     * @api
     */",
 "/**
     * Returns the arguments to pass to the controller.
     *
     * @param Request $request    A Request instance
     * @param mixed   $controller A PHP callable
     *
     * @return array An array of arguments to pass to the controller
     *
     * @throws \RuntimeException When value for argument given is not provided
     *
     * @api
     */",
 "/**
 * A ControllerResolverInterface implementation knows how to determine the
 * controller to execute based on a Request object.
 *
 * It can also determine the arguments to pass to the Controller.
 *
 * A Controller can be any valid PHP callable.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * InExpression ::= StateFieldPathExpression [\"NOT\"] \"IN\" \"(\" (Literal {\",\" Literal}* | Subselect) \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Subclasses must return the id of a service which implements the
     * AuthenticationProviderInterface.
     *
     * @param ContainerBuilder $container
     * @param string           $id             The unique id of the firewall
     * @param array            $config         The options array for this listener
     * @param string           $userProviderId The id of the user provider
     *
     * @return string never null, the id of the authentication provider
     */",
 "/**
     * Subclasses must return the id of the abstract listener template.
     *
     * Listener definitions should inherit from the AbstractAuthenticationListener
     * like this:
     *
     *    <service id=\"my.listener.id\"
     *             class=\"My\Concrete\Classname\"
     *             parent=\"security.authentication.listener.abstract\"
     *             abstract=\"true\" />
     *
     * In the above case, this method would return \"my.listener.id\".
     *
     * @return string
     */",
 "/**
     * Subclasses may create an entry point of their as they see fit. The
     * default implementation does not change the default entry point.
     *
     * @param ContainerBuilder $container
     * @param string $id
     * @param array $config
     * @param string $defaultEntryPointId
     *
     * @return string the entry point id
     */",
 "/**
     * Subclasses may disable remember-me features for the listener, by
     * always returning false from this method.
     *
     * @param array $config
     *
     * @return Boolean Whether a possibly configured RememberMeServices should be set for this listener
     */",
 "/**
 * AbstractFactory is the base class for all classes inheriting from
 * AbstractAuthenticationListener
 *
 * @author Lukas Kahwe Smith <smith@pooteeweet.org>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Gets the loader resolver.
     *
     * @return LoaderResolver A LoaderResolver instance
     */",
 "/**
     * Sets the loader resolver.
     *
     * @param LoaderResolver $resolver A LoaderResolver instance
     */",
 "/**
     * Imports a resource.
     *
     * @param mixed  $resource A Resource
     * @param string $type     The resource type
     */",
 "/**
     * Finds a loader able to load an imported resource.
     *
     * @param mixed  $resource A Resource
     * @param string $type     The resource type
     *
     * @return LoaderInterface A LoaderInterface instance
     *
     * @throws FileLoaderLoadException if no loader is found
     */",
 "/**
 * Loader is the abstract class used by all built-in loaders.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param NodeDefinition $node The related node
     */",
 "/**
     * Registers a key to remap to its plural form.
     *
     * @param string $key    The key to remap
     * @param string $plural The plural of the key in case of irregular plural
     *
     * @return NormalizationBuilder
     */",
 "/**
     * Registers a closure to run before the normalization or an expression builder to build it if null is provided.
     *
     * @param \Closure $closure
     *
     * @return ExprBuilder|NormalizationBuilder
     */",
 "/**
 * This class builds normalization conditions.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * LockedException is thrown if the user account is locked.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param NodeDefinition $node The related node
     */",
 "/**
     * Mark the expression as being always used.
     *
     * @return ExprBuilder
     */",
 "/**
     * Sets a closure to use as tests.
     *
     * The default one tests if the value is true.
     *
     * @param \Closure $closure
     *
     * @return ExprBuilder
     */",
 "/**
     * Tests if the value is a string.
     *
     * @return ExprBuilder
     */",
 "/**
     * Tests if the value is null.
     *
     * @return ExprBuilder
     */",
 "/**
     * Tests if the value is an array.
     *
     * @return ExprBuilder
     */",
 "/**
     * Tests if the value is in an array.
     *
     * @param array $array
     *
     * @return ExprBuilder
     */",
 "/**
     * Tests if the value is not in an array.
     *
     * @param array $array
     *
     * @return ExprBuilder
     */",
 "/**
     * Sets the closure to run if the test pass.
     *
     * @param \Closure $closure
     *
     * @return ExprBuilder
     */",
 "/**
     * Sets a closure returning an empty array.
     *
     * @return ExprBuilder
     */",
 "/**
     * Sets a closure marking the value as invalid at validation time.
     *
     * if you want to add the value of the node in your message just use a %s placeholder.
     *
     * @param string $message
     *
     * @return ExprBuilder
     */",
 "/**
     * Sets a closure unsetting this key of the array at validation time.
     *
     * @return ExprBuilder
     */",
 "/**
     * Returns the related node
     *
     * @return NodeDefinition
     */",
 "/**
     * Builds the expressions.
     *
     * @param array $expressions An array of ExprBuilder instances to build
     *
     * @return array
     */",
 "/**
 * This class builds an if expression.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"CURRENT_DATE\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Exception thrown when a syntax error occurs during lexing or parsing of a template.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
 * Adds services tagged as assets to the asset manager.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @see BaseDateTimeTransformer::formats for available format options
     *
     * @param string             $inputTimezone   The name of the input timezone
     * @param string             $outputTimezone  The name of the output timezone
     * @param integer            $dateFormat      The date format
     * @param integer            $timeFormat      The time format
     * @param \IntlDateFormatter $calendar        An \IntlDateFormatter instance
     * @param string             $pattern         A pattern to pass to \IntlDateFormatter
     *
     * @throws UnexpectedTypeException If a format is not supported
     * @throws UnexpectedTypeException if a timezone is not a string
     */",
 "/**
     * Transforms a normalized date into a localized date string/array.
     *
     * @param  DateTime $dateTime  Normalized date.
     *
     * @return string|array        Localized date string/array.
     *
     * @throws UnexpectedTypeException if the given value is not an instance of \DateTime
     * @throws TransformationFailedException if the date could not be transformed
     */",
 "/**
     * Transforms a localized date string/array into a normalized date.
     *
     * @param  string|array $value Localized date string/array
     *
     * @return DateTime Normalized date
     *
     * @throws UnexpectedTypeException if the given value is not a string
     * @throws TransformationFailedException if the date could not be parsed
     * @throws TransformationFailedException if the input timezone is not supported
     */",
 "/**
     * Returns a preconfigured IntlDateFormatter instance
     *
     * @return \IntlDateFormatter
     */",
 "/**
 * Transforms between a normalized time and a localized time string
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the token parser instance to add to the existing list.
     *
     * @return array An array of Twig_TokenParser instances
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * Provides integration of the Translation component with Twig.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Extends a template by another one.
 *
 * <pre>
 *  {% extends \"base.html\" %}
 * </pre>
 */",
 "/**
 * Interfaces that all security policy classes must implements.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Thrown when a field is expected to be added to a form but is not
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
   * Encode stream $in to stream $out.
   * @param Swift_OutputByteStream $in
   * @param Swift_InputByteStream $out
   * @param int $firstLineOffset
   * @param int $maxLineLength, optional, 0 indicates the default of 76 bytes
   */",
 "/**
   * Get the name of this encoding scheme.
   * Returns the string \'base64\'.
   * @return string
   */",
 "/**
 * Handles Base 64 Transfer Encoding in Swift Mailer.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
 * Thrown when a form could not be constructed by a FormFactory
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
 * SelectStatement = SelectClause FromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * ArraySessionStorage mocks the session for unit tests.
 *
 * When doing functional testing, you should use FilesystemSessionStorage instead.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 */",
 "/**
 * Expression class for DQL from
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
*Returnsthepathtothetemplate
*-asapathwhenthetemplateisnotpartofabundle
*-asaresourcewhenthetemplateispartofabundle
*
*@returnstringApathtothetemplateoraresource
*/",
 "/**
*{@inheritdoc}
*/",
 "/**
*Internalrepresentationofatemplate.
*
*@authorVictorBerchet<victor@suumit.com>
*/",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * @param ClassMetadataInfo $metadata 
     * @return mixed $exported
     */",
 "/**
 * ClassMetadata exporter for PHP code
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to clear the result cache of the various cache drivers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Loads the Swift Mailer configuration.
     *
     * Usage example:
     *
     *      <swiftmailer:config transport=\"gmail\">
     *        <swiftmailer:username>fabien</swift:username>
     *        <swiftmailer:password>xxxxx</swift:password>
     *        <swiftmailer:spool path=\"/path/to/spool/\" />
     *      </swiftmailer:config>
     *
     * @param array            $configs   An array of configuration settings
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
     * Returns the namespace to be used for this extension (XML namespace).
     *
     * @return string The XML namespace
     */",
 "/**
 * SwiftmailerExtension is an extension for the SwiftMailer library.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Expression class for building DQL Group By parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructs a new parse tree printer.
     *
     * @param bool $silent Parse tree will not be printed if true.
     */",
 "/**
     * Prints an opening parenthesis followed by production name and increases
     * indentation level by one.
     *
     * This method is called before executing a production.
     *
     * @param string $name production name
     */",
 "/**
     * Decreases indentation level by one and prints a closing parenthesis.
     *
     * This method is called after executing a production.
     */",
 "/**
     * Prints text indented with spaces depending on current indentation level.
     *
     * @param string $str text
     */",
 "/**
 * A parse tree printer for Doctrine Query Language parser.
 *
 * @author      Janne Vanhala <jpvanhal@cc.hut.fi>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        http://www.phpdoctrine.org
 * @since       2.0
 * @version     $Revision$
 */",
 "/**
     * Demerges a merge password and salt string.
     *
     * @param string $mergedPasswordSalt The merged password and salt string
     *
     * @return array An array where the first element is the password and the second the salt
     */",
 "/**
     * Merges a password and a salt.
     *
     * @param string $password the password to be used
     * @param string $salt the salt to be used
     *
     * @return string a merged password and salt
     */",
 "/**
     * Compares two passwords.
     *
     * This method implements a constant-time algorithm to compare passwords to
     * avoid (remote) timing attacks.
     *
     * @param string $password1 The first password
     * @param string $password2 The second password
     *
     * @return Boolean true if the two passwords are the same, false otherwise
     */",
 "/**
 * BasePasswordEncoder is the base class for all password encoders.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param Command $command A Command instance to test.
     */",
 "/**
     * Executes the command.
     *
     * Available options:
     *
     *  * interactive: Sets the input interactive flag
     *  * decorated:   Sets the output decorated flag
     *  * verbosity:   Sets the output verbosity flag
     *
     * @param array $input   An array of arguments and options
     * @param array $options An array of options
     *
     * @return integer The command exit code
     */",
 "/**
     * Gets the display returned by the last execution of the command.
     *
     * @return string The display
     */",
 "/**
     * Gets the input instance used by the last execution of the command.
     *
     * @return InputInterface The current input instance
     */",
 "/**
     * Gets the output instance used by the last execution of the command.
     *
     * @return OutputInterface The current output instance
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructs an event.
     *
     * @param FormInterface $form The associated form
     * @param mixed         $data The data
     */",
 "/**
     * Returns the form at the source of the event.
     *
     * @return FormInterface
     */",
 "/**
     * Returns the data associated with this event.
     *
     * @return type
     */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Loads a locale.
     *
     * @param  mixed  $resource A resource
     * @param  string $locale   A locale
     * @param  string $domain   The domain
     *
     * @return MessageCatalogue A MessageCatalogue instance
     *
     * @api
     */",
 "/**
 * LoaderInterface is the interface implemented by all translation loaders.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for minute format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Attempts to create a connection with the database.
     *
     * @param array $params All connection parameters passed by the user.
     * @param string $username The username to use when connecting.
     * @param string $password The password to use when connecting.
     * @param array $driverOptions The driver options to use when connecting.
     * @return Doctrine\DBAL\Driver\Connection The database connection.
     */",
 "/**
     * Gets the DatabasePlatform instance that provides all the metadata about
     * the platform this driver connects to.
     *
     * @return Doctrine\DBAL\Platforms\AbstractPlatform The database platform.
     */",
 "/**
     * Gets the SchemaManager that can be used to inspect and change the underlying
     * database schema of the platform this driver connects to.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return Doctrine\DBAL\SchemaManager
     */",
 "/**
     * Gets the name of the driver.
     *
     * @return string The name of the driver.
     */",
 "/**
     * Get the name of the database connected to for this driver.
     *
     * @param  Doctrine\DBAL\Connection $conn
     * @return string $database
     */",
 "/**
 * IBM DB2 Driver
 *
 * @since 2.0
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Generator is the base class for all generators.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Add a log entry.
   * @param string $entry
   */",
 "/**
   * Clear the log contents.
   */",
 "/**
   * Get this log as a string.
   * @return string
   */",
 "/**
 * Logs events in the Transport system.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
 * Expression class for DQL comparison expressions
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Validates that a value is a valid IP address
 *
 * @Annotation
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Joseph Bielawski <stloyd@gmail.com>
 *
 * @api
 */",
 "/**
 * LikeExpression ::= StringExpression [\"NOT\"] \"LIKE\" string [\"ESCAPE\" char]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Invoked just before a Transport is started.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
   * Invoked immediately after the Transport is started.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
   * Invoked just before a Transport is stopped.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
   * Invoked immediately after the Transport is stopped.
   * 
   * @param Swift_Events_TransportChangeEvent $evt
   */",
 "/**
 * Listens for changes within the Transport system.
 * 
 * @package Swift
 * @subpackage Events
 * 
 * @author Chris Corbyn
 */",
 "/**
     * @dataProvider getDebugModes
     */",
 "/**
     * @dataProvider getFilterNames
     */",
 "/**
     * @dataProvider getUseControllerKeys
     */",
 "/**
     * @dataProvider getClosureJarAndExpected
     */",
 "/**
   * Creates a new QpContentEncoder for the given CharacterStream.
   * @param Swift_CharacterStream $charStream to use for reading characters
   * @param Swift_StreamFilter $filter if canonicalization should occur
   * @param boolean $dotEscape if dot stuffing workaround must be enabled
   */",
 "/**
   * Encode stream $in to stream $out.
   * QP encoded strings have a maximum line length of 76 characters.
   * If the first line needs to be shorter, indicate the difference with
   * $firstLineOffset.
   * @param Swift_OutputByteStream $os output stream
   * @param Swift_InputByteStream $is input stream
   * @param int $firstLineOffset
   * @param int $maxLineLength
   */",
 "/**
   * Get the name of this encoding scheme.
   * Returns the string \'quoted-printable\'.
   * @return string
   */",
 "/**
 * Handles Quoted Printable (QP) Transfer Encoding in Swift Mailer.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * @dataProvider getSupportsTests
     */",
 "/**
     * @dataProvider getSupportsTests
     */",
 "/**
     * Process the ContainerBuilder to replace DefinitionDecorator instances with their real Definition instances.
     *
     * @param ContainerBuilder $container
     */",
 "/**
     * Resolves the definition
     *
     * @param string              $id         The definition identifier
     * @param DefinitionDecorator $definition
     *
     * @return Definition
     */",
 "/**
 * This replaces all DefinitionDecorator instances with their equivalent fully
 * merged Definition instance.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Checks if the voter supports the given attribute.
     *
     * @param string $attribute An attribute
     *
     * @return Boolean true if this Voter supports the attribute, false otherwise
     */",
 "/**
     * Checks if the voter supports the given class.
     *
     * @param string $class A class name
     *
     * @return true if this Voter can process the class
     */",
 "/**
     * Returns the vote for the given parameters.
     *
     * This method must return one of the following constants:
     * ACCESS_GRANTED, ACCESS_DENIED, or ACCESS_ABSTAIN.
     *
     * @param TokenInterface $token      A TokenInterface instance
     * @param object         $object     The object to secure
     * @param array          $attributes An array of attributes associated with the method being invoked
     *
     * @return integer either ACCESS_GRANTED, ACCESS_ABSTAIN, or ACCESS_DENIED
     */",
 "/**
 * VoterInterface is the interface implemented by all voters.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Prepares an SQL statement.
     *
     * @param string $statement The SQL statement to prepare.
     * @return Doctrine\DBAL\Driver\Statement The prepared statement.
     */",
 "/**
     * Constructor
     *
     * @param RoleHierarchyInterface      $roleHierarchy
     * @param AuthenticationTrustResolver $authenticationTrustResolver
     *
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Strategy for retrieving security identities
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Create a new FileSpool.
   * @param string $path
   * @throws Swift_IoException
   */",
 "/**
   * Tests if this Spool mechanism has started.
   *
   * @return boolean
   */",
 "/**
   * Starts this Spool mechanism.
   */",
 "/**
   * Stops this Spool mechanism.
   */",
 "/**
   * Allow to manage the enqueuing retry limit.
   * Default, is ten and allows over 64^20 different fileNames 
   * 
   * @param integer $limit
   */",
 "/**
   * Queues a message.
   * @param Swift_Mime_Message $message The message to store
   * @return boolean
   * @throws Swift_IoException
   */",
 "/**
   * Execute a recovery if for anyreason a process is sending for too long
   * 
   * @param int $timeout in second Defaults is for very slow smtp responses
   */",
 "/**
   * Sends messages using the given transport instance.
   *
   * @param Swift_Transport $transport         A transport instance
   * @param string[]        &$failedRecipients An array of failures by-reference
   *
   * @return int The number of sent emails
   */",
 "/**
   * Returns a random string needed to generate a fileName for the queue.
   * @param int $count
   */",
 "/**
 * Stores Messages on the filesystem.
 * @package Swift
 * @author  Fabien Potencier
 * @author Xavier De Cock <xdecock@gmail.com>
 */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
     * @api
     */",
 "/**
 * Scope class.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
 * @group integration
 */",
 "/**
 * Filesystem.
 *
 * Added for forwards compatibility with Symfony2.1
 */",
 "/**
     * Constructor
     *
     * @param Boolean $debug Whether to use the debug mode
     */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * This class contains the configuration information for the bundle
 *
 * This information is solely responsible for how the different configuration
 * sections are normalized, and merged.
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Sets a cookie.
     *
     * @param  string  $name         The cookie name
     * @param  string  $value        The value of the cookie
     * @param  string  $expires      The time the cookie expires
     * @param  string  $path         The path on the server in which the cookie will be available on
     * @param  string  $domain       The domain that the cookie is available
     * @param  Boolean $secure       Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client
     * @param  Boolean $httponly     The cookie httponly flag
     * @param  Boolean $encodedValue Whether the value is encoded or not
     *
     * @api
     */",
 "/**
     * Returns the HTTP representation of the Cookie.
     *
     * @return string The HTTP representation of the Cookie
     *
     * @api
     */",
 "/**
     * Creates a Cookie instance from a Set-Cookie header value.
     *
     * @param string $cookie A Set-Cookie header value
     * @param string $url    The base URL
     *
     * @return Cookie A Cookie instance
     *
     * @api
     */",
 "/**
     * Gets the name of the cookie.
     *
     * @return string The cookie name
     *
     * @api
     */",
 "/**
     * Gets the value of the cookie.
     *
     * @return string The cookie value
     *
     * @api
     */",
 "/**
     * Gets the raw value of the cookie.
     *
     * @return string The cookie value
     *
     * @api
     */",
 "/**
     * Gets the expires time of the cookie.
     *
     * @return string The cookie expires time
     *
     * @api
     */",
 "/**
     * Gets the path of the cookie.
     *
     * @return string The cookie path
     *
     * @api
     */",
 "/**
     * Gets the domain of the cookie.
     *
     * @return string The cookie domain
     *
     * @api
     */",
 "/**
     * Returns the secure flag of the cookie.
     *
     * @return Boolean The cookie secure flag
     *
     * @api
     */",
 "/**
     * Returns the httponly flag of the cookie.
     *
     * @return Boolean The cookie httponly flag
     *
     * @api
     */",
 "/**
     * Returns true if the cookie has expired.
     *
     * @return Boolean true if the cookie has expired, false otherwise
     *
     * @api
     */",
 "/**
 * Cookie represents an HTTP cookie.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * @Route(\"/login\", name=\"_demo_login\")
     * @Template()
     */",
 "/**
     * @Route(\"/login_check\", name=\"_security_check\")
     */",
 "/**
     * @Route(\"/logout\", name=\"_demo_logout\")
     */",
 "/**
     * @Route(\"/hello\", defaults={\"name\"=\"World\"}),
     * @Route(\"/hello/{name}\", name=\"_demo_secured_hello\")
     * @Template()
     */",
 "/**
     * @Route(\"/hello/admin/{name}\", name=\"_demo_secured_hello_admin\")
     * @Secure(roles=\"ROLE_ADMIN\")
     * @Template()
     */",
 "/**
 * @Route(\"/demo/secured\")
 */",
 "/**
     * Converts a value from its PHP representation to its database representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The database representation of the value.
     */",
 "/**
     * Converts a value from its database representation to its PHP representation
     * of this type.
     *
     * @param mixed $value The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     * @return mixed The PHP representation of the value.
     */",
 "/**
     * Gets the default length of this type.
     *
     * @todo Needed?
     */",
 "/**
     * Gets the SQL declaration snippet for a field of this type.
     *
     * @param array $fieldDeclaration The field declaration.
     * @param AbstractPlatform $platform The currently used database platform.
     */",
 "/**
     * Gets the name of this type.
     *
     * @return string
     * @todo Needed?
     */",
 "/**
     * Factory method to create type instances.
     * Type instances are implemented as flyweights.
     *
     * @static
     * @throws DBALException
     * @param string $name The name of the type (as returned by getName()).
     * @return Doctrine\DBAL\Types\Type
     */",
 "/**
     * Adds a custom type to the type map.
     *
     * @static
     * @param string $name Name of the type. This should correspond to what getName() returns.
     * @param string $className The class name of the custom type.
     * @throws DBALException
     */",
 "/**
     * Checks if exists support for a type.
     *
     * @static
     * @param string $name Name of the type
     * @return boolean TRUE if type is supported; FALSE otherwise
     */",
 "/**
     * Overrides an already defined type to use a different implementation.
     *
     * @static
     * @param string $name
     * @param string $className
     * @throws DBALException
     */",
 "/**
     * Gets the (preferred) binding type for values of this type that
     * can be used when binding parameters to prepared statements.
     * 
     * This method should return one of the PDO::PARAM_* constants, that is, one of:
     * 
     * PDO::PARAM_BOOL
     * PDO::PARAM_NULL
     * PDO::PARAM_INT
     * PDO::PARAM_STR
     * PDO::PARAM_LOB
     * 
     * @return integer
     */",
 "/**
     * Get the types array map which holds all registered types and the corresponding
     * type class
     *
     * @return array $typesMap
     */",
 "/**
*DoesworkingwiththiscolumnrequireSQLconversionfunctions?
*
*ThisisametadatafunctionthatisrequiredforexampleintheORM.
*Usageof{@linkconvertToDatabaseValueSQL}and
*{@linkconvertToPHPValueSQL}worksforanytypeandmostly
*doesnothing.Thismethodcanadditionallybeusedforoptimizationpurposes.
*
*@returnbool
*/",
 "/**
*ModifiestheSQLexpression(identifier,parameter)toconverttoadatabasevalue.
*
*@paramstring$sqlExpr
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*ModifiestheSQLexpression(identifier,parameter)toconverttoaPHPvalue.
*
*@paramstring$sqlExpr
*@paramAbstractPlatform$platform
*@returnstring
*/",
 "/**
*Thebaseclassforso-calledDoctrinemappingtypes.
*
*ATypeobjectisobtainedbycallingthestatic{@linkgetType()}method.
*
*@authorRomanBorschel<roman@code-factory.org>
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@since2.0
*/",
 "/**
 * Checks if a variable is the same as another one (=== in PHP).
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string    $message  The internal exception message
     * @param Exception $previous The previous exception
     * @param integer   $code     The internal exception code
     */",
 "/**
 * NotFoundHttpException.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
*Constructor.
*
*@paramstring$fileLinkFormatTheformatforlinkstosourcefiles
*@paramstring$rootDirTheprojectrootdirectory
*@paramstring$charsetThecharset
*/",
 "/**
*Formatsanarrayasastring.
*
*@paramarray$argsTheargumentarray
*
*@returnstring
*/",
 "/**
     * Formats an array as a string.
     *
     * @param array $args The argument array
     *
     * @return string
     */",
 "/**
     * Returns an excerpt of a code file around the given line number.
     *
     * @param string $file  A file path
     * @param int    $line  The selected line number
     *
     * @return string An HTML string
     */",
 "/**
     * Formats a file path.
     *
     * @param  string  $file An absolute file path
     * @param  integer $line The line number
     * @param  string  $text Use this text for the link rather than the file path
     *
     * @return string
     */",
 "/**
     * Returns the link for a given file/line pair.
     *
     * @param  string  $file An absolute file path
     * @param  integer $line The line number
     *
     * @return string A link of false
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     */",
 "/**
 * CodeHelper.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns the class of the user
     * @return string
     */",
 "/**
     * Returns the username
     * @return string
     */",
 "/**
     * Returns the series
     * @return string
     */",
 "/**
     * Returns the token value
     * @return string
     */",
 "/**
     * Returns the last time the cookie was used
     * @return \DateTime
     */",
 "/**
 * Interface to be implemented by persistent token classes (such as
 * Doctrine entities representing a remember-me token)
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Returns the role.
     *
     * This method returns a string representation whenever possible.
     *
     * When the role cannot be represented with sufficient precision by a
     * string, it should return null.
     *
     * @return string|null A string representation of the role, or null
     */",
 "/**
 * RoleInterface represents a role granted to a user.
 *
 * A role must either have a string representation or it needs to be explicitly
 * supported by an at least one AccessDecisionManager.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string  $type     The type of this token.
     * @param mixed   $value    The value of this token.
     * @param integer $position The order of this token.
     */",
 "/**
     * Gets a string representation of this token.
     *
     * @return string
     */",
 "/**
     * Answers whether this token\'s type equals to $type.
     *
     * @param  string $type The type to test against this token\'s one.
     *
     * @return Boolean
     */",
 "/**
     * Gets the position of this token.
     *
     * @return integer
     */",
 "/**
 * Token represents a CSS Selector token.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Sets the parser associated with this token parser
     *
     * @param $parser A Twig_Parser instance
     */",
 "/**
 * Base class for all token parsers.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * The headers array is a set of key/value pairs. If a header is present multiple times
     * then the value is an array of all the values.
     *
     * @param string  $content The content of the response
     * @param integer $status  The response status code
     * @param array   $headers An array of headers
     *
     * @api
     */",
 "/**
     * Converts the response object to string containing all headers and the response content.
     *
     * @return string The response with headers and content
     */",
 "/**
     * Returns the build header line.
     *
     * @param string $name  The header name
     * @param string $value The header value
     *
     * @return string The built header line
     */",
 "/**
     * Gets the response content.
     *
     * @return string The response content
     *
     * @api
     */",
 "/**
     * Gets the response status code.
     *
     * @return integer The response status code
     *
     * @api
     */",
 "/**
     * Gets the response headers.
     *
     * @return array The response headers
     *
     * @api
     */",
 "/**
     * Gets a response header.
     *
     * @param string  $header The header name
     * @param Boolean $first  Whether to return the first value or all header values
     *
     * @return string|array The first header value if $first is true, an array of values otherwise
     */",
 "/**
 * Response object.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Array cache driver.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * @inheritDoc
     */",
 "/**
     * @inheritDoc
     */",
 "/**
     * @inheritDoc
     */",
 "/**
     * Returns the class metadata factory used in the new validator
     *
     * @return ClassMetadataFactoryInterface  The factory instance
     */",
 "/**
     * Returns the constraint validator factory used in the new validator
     *
     * @return ConstraintValidatorFactoryInterface  The factory instance
     */",
 "/**
 * Default implementation of ValidatorContextInterface
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * @test
     */",
 "/**
     * Gets the SQL query/queries that correspond to this DQL query.
     *
     * @return mixed The built sql query or an array of all sql queries.
     * @override
     */",
 "/**
     * Returns the corresponding AST for this DQL query.
     *
     * @return \Doctrine\ORM\Query\AST\SelectStatement |
     *         \Doctrine\ORM\Query\AST\\UpdateStatement |
     *         \Doctrine\ORM\Query\AST\DeleteStatement
     */",
 "/**
     * Parses the DQL query, if necessary, and stores the parser result.
     *
     * Note: Populates $this->_parserResult as a side-effect.
     *
     * @return \Doctrine\ORM\Query\ParserResult
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Processes query parameter mappings
     *
     * @param array $paramMappings
     * @return array
     */",
 "/**
     * Process an individual parameter value
     *
     * @param mixed $value
     * @return array
     */",
 "/**
     * Defines a cache driver to be used for caching queries.
     *
     * @param Doctrine_Cache_Interface|null $driver Cache driver
     * @return Query This query instance.
     */",
 "/**
     * Defines whether the query should make use of a query cache, if available.
     *
     * @param boolean $bool
     * @return @return Query This query instance.
     */",
 "/**
     * Returns the cache driver used for query caching.
     *
     * @return CacheDriver The cache driver used for query caching or NULL, if this
     * 					   Query does not use query caching.
     */",
 "/**
     * Defines how long the query cache will be active before expire.
     *
     * @param integer $timeToLive How long the cache entry is valid
     * @return Query This query instance.
     */",
 "/**
     * Retrieves the lifetime of resultset cache.
     *
     * @return int
     */",
 "/**
     * Defines if the query cache is active or not.
     *
     * @param boolean $expire Whether or not to force query cache expiration.
     * @return Query This query instance.
     */",
 "/**
     * Retrieves if the query cache is active or not.
     *
     * @return bool
     */",
 "/**
     * @override
     */",
 "/**
     * Sets a DQL query string.
     *
     * @param string $dqlQuery DQL Query
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Returns the DQL query that is represented by this query object.
     *
     * @return string DQL query
     */",
 "/**
     * Returns the state of this query object
     * By default the type is Doctrine_ORM_Query_Abstract::STATE_CLEAN but if it appears any unprocessed DQL
     * part, it is switched to Doctrine_ORM_Query_Abstract::STATE_DIRTY.
     *
     * @see AbstractQuery::STATE_CLEAN
     * @see AbstractQuery::STATE_DIRTY
     *
     * @return integer Return the query state
     */",
 "/**
     * Method to check if an arbitrary piece of DQL exists
     *
     * @param string $dql Arbitrary piece of DQL to check for
     * @return boolean
     */",
 "/**
     * Sets the position of the first result to retrieve (the \"offset\").
     *
     * @param integer $firstResult The first result to return.
     * @return Query This query object.
     */",
 "/**
     * Gets the position of the first result the query object was set to retrieve (the \"offset\").
     * Returns NULL if {@link setFirstResult} was not applied to this query.
     *
     * @return integer The position of the first result.
     */",
 "/**
     * Sets the maximum number of results to retrieve (the \"limit\").
     *
     * @param integer $maxResults
     * @return Query This query object.
     */",
 "/**
     * Gets the maximum number of results the query object was set to retrieve (the \"limit\").
     * Returns NULL if {@link setMaxResults} was not applied to this query.
     *
     * @return integer Maximum number of results.
     */",
 "/**
     * Executes the query and returns an IterableResult that can be used to incrementally
     * iterated over the result.
     *
     * @param array $params The query parameters.
     * @param integer $hydrationMode The hydration mode to use.
     * @return IterableResult
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Set the lock mode for this Query.
     *
     * @see \Doctrine\DBAL\LockMode
     * @param  int $lockMode
     * @return Query
     */",
 "/**
     * Get the current lock mode for this query.
     *
     * @return int
     */",
 "/**
     * Generate a cache id for the query cache - reusing the Result-Cache-Id generator.
     *
     * The query cache
     *
     * @return string
     */",
 "/**
     * Cleanup Query resource when clone is called.
     *
     * @return void
     */",
 "/**
 * A Query object represents a DQL query.
 *
 * @since   1.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Konsta Vesterinen <kvesteri@cc.hut.fi>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns a string to uniquely identify the current resource.
     *
     * @return string An identifying string
     */",
 "/**
     * Returns the relative version of a filename.
     *
     * @param ResourceInterface $file      The file
     * @param ResourceInterface $directory The directory
     *
     * @return string The name to compare with files from other directories
     */",
 "/**
     * Performs the coalesce.
     *
     * @return array An array of file resources
     */",
 "/**
 * Coalesces multiple directories together into one merged resource.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param RouteCollection $routes The RouteCollection to dump
     */",
 "/**
 * GeneratorDumper is the base class for all built-in generator dumpers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @dataProvider getDebugModes
     */",
 "/**
 * This exception is thrown when the a scope crossing injection is detected.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Exception thrown when a Proxy fails to retrieve an Entity result.
 *
 * @author robo
 * @since 2.0
 */",
 "/**
     * Renders a template.
     *
     * @param mixed $name       A template name or a TemplateReferenceInterface instance
     * @param array $parameters An array of parameters to pass to the template
     *
     * @return string The evaluated template as a string
     *
     * @throws \RuntimeException if the template cannot be rendered
     *
     * @api
     */",
 "/**
     * Returns true if the template exists.
     *
     * @param mixed $name A template name or a TemplateReferenceInterface instance
     *
     * @return Boolean true if the template exists, false otherwise
     *
     * @api
     */",
 "/**
     * Returns true if this class is able to render the given template.
     *
     * @param mixed $name A template name or a TemplateReferenceInterface instance
     *
     * @return Boolean true if this class supports the given template, false otherwise
     *
     * @api
     */",
 "/**
 * EngineInterface is the interface each engine must implement.
 *
 * All methods relies on a template name. A template name is a
 * \"logical\" name for the template, and as such it does not refer to
 * a path on the filesystem (in fact, the template can be stored
 * anywhere, like in a database).
 *
 * The methods should accept any name. If the name is not an instance of
 * TemplateReferenceInterface, a TemplateNameParserInterface should be used to
 * convert the name to a TemplateReferenceInterface instance.
 *
 * Each template loader use the logical template name to look for
 * the template.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string    $message  The internal exception message
     * @param Exception $previous The previous exception
     * @param integer   $code     The internal exception code
     */",
 "/**
 * AccessDeniedHttpException.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Constructor.
     *
     * @param \Traversable     $iterator The Iterator to filter
     * @param integer|callback $sort     The sort type (SORT_BY_NAME, SORT_BY_TYPE, or a PHP callback)
     */",
 "/**
 * SortableIterator applies a sort on a given Iterator.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Represents a function template test.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param Filesystem $filesystem A Filesystem instance
     * @param string $skeletonDir Path to the skeleton directory
     */",
 "/**
*GeneratetheCRUDcontroller.
*
*@paramBundleInterface$bundleAbundleobject
*@paramstring$entityTheentityrelativeclassname
*@paramClassMetadataInfo$metadataTheentityclassmetadata
*@paramstring$formatTheconfigurationformat(xml,yaml,annotation)
*@paramstring$routePrefixTheroutenameprefix
*@paramarray$needWriteActionsWetherornottogeneratewriteactions
*
*@throws\RuntimeException
*/",
 "/**
*Setstheconfigurationformat.
*
*@paramstring$formatTheconfigurationformat
*/",
 "/**
*Generatestheroutingconfiguration.
*
*/",
 "/**
*Generatesthecontrollerclassonly.
*
*/",
 "/**
*Generatesthefunctionaltestclassonly.
*
*/",
 "/**
*Generatestheindex.html.twigtemplateinthefinalbundle.
*
*@paramstring$dirThepathtothefolderthathoststemplatesinthebundle
*/",
 "/**
*Generatestheshow.html.twigtemplateinthefinalbundle.
*
*@paramstring$dirThepathtothefolderthathoststemplatesinthebundle
*/",
 "/**
*Generatesthenew.html.twigtemplateinthefinalbundle.
*
*@paramstring$dirThepathtothefolderthathoststemplatesinthebundle
*/",
 "/**
*Generatestheedit.html.twigtemplateinthefinalbundle.
*
*@paramstring$dirThepathtothefolderthathoststemplatesinthebundle
*/",
 "/**
*Returnsanarrayofrecordactionstogenerate(edit,show).
*
*@returnarray
*/",
 "/**
*GeneratesaCRUDcontroller.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * @param integer $level The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Closes the handler.
     *
     * This will be called automatically when the object is destroyed
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Sets minimum logging level at which this handler will be triggered.
     *
     * @param integer $level
     */",
 "/**
     * Gets minimum logging level at which this handler will be triggered.
     *
     * @return integer
     */",
 "/**
     * Sets the bubbling behavior.
     *
     * @param Boolean $bubble True means that bubbling is not permitted.
     *                        False means that this handler allows bubbling.
     */",
 "/**
     * Gets the bubbling behavior.
     *
     * @return Boolean True means that bubbling is not permitted.
     *                 False means that this handler allows bubbling.
     */",
 "/**
     * Gets the default formatter.
     *
     * @return FormatterInterface
     */",
 "/**
 * Base Handler class providing the Handler structure
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
 * Simple implementation of ClassMetadataFactoryInterface that can be used when using ValidatorInterface::validateValue().
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * An identity interface which all EventListeners must extend.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Compiles the current route instance.
     *
     * @param Route $route A Route instance
     *
     * @return CompiledRoute A CompiledRoute instance
     */",
 "/**
 * RouteCompiler compiles Route instances to CompiledRoute instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Starts the session.
     *
     * @api
     */",
 "/**
     * Returns the session ID
     *
     * @return mixed  The session ID
     *
     * @throws \RuntimeException If the session was not started yet
     *
     * @api
     */",
 "/**
     * Reads data from this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param  string $key  A unique key identifying your data
     *
     * @return mixed Data associated with the key
     *
     * @throws \RuntimeException If an error occurs while reading data from this storage
     *
     * @api
     */",
 "/**
     * Removes data from this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param  string $key  A unique key identifying your data
     *
     * @return mixed Data associated with the key
     *
     * @throws \RuntimeException If an error occurs while removing data from this storage
     *
     * @api
     */",
 "/**
     * Writes data to this storage.
     *
     * The preferred format for a key is directory style so naming conflicts can be avoided.
     *
     * @param  string $key   A unique key identifying your data
     * @param  mixed  $data  Data associated with your key
     *
     * @throws \RuntimeException If an error occurs while writing to this storage
     *
     * @api
     */",
 "/**
     * Regenerates id that represents this storage.
     *
     * @param  Boolean $destroy Destroy session when regenerating?
     *
     * @return Boolean True if session regenerated, false if error
     *
     * @throws \RuntimeException If an error occurs while regenerating this storage
     *
     * @api
     */",
 "/**
 * SessionStorageInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Thrown when a form type is configured incorrectly
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Instantiate a Node
     *
     * @return BooleanNode The node
     */",
 "/**
 * This class provides a fluent interface for defining a node.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
*Getsaclassannotation.
*
*@paramReflectionClass$classTheReflectionClassoftheclassfromwhich
*theclassannotationsshouldberead.
*@paramstring$annotationNameThenameoftheannotation.
*@returnTheAnnotationorNULL,iftherequestedannotationdoesnotexist.
*/",
 "/**
*Getsamethodannotation.
*
*@paramReflectionMethod$method
*@paramstring$annotationNameThenameoftheannotation.
*@returnTheAnnotationorNULL,iftherequestedannotationdoesnotexist.
*/",
 "/**
*Getsapropertyannotation.
*
*@paramReflectionProperty$property
*@paramstring$annotationNameThenameoftheannotation.
*@returnTheAnnotationorNULL,iftherequestedannotationdoesnotexist.
*/",
 "/**
*Filecachereaderforannotations.
*
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*@authorBenjaminEberlei<kontakt@beberlei.de>
*/",
 "/**
     * Constructor.
     *
     * @param Reader $reader An Reader instance
     */",
 "/**
     * Modifies the Request object to apply configuration information found in
     * controllers annotations like the template to render or HTTP caching
     * configuration.
     *
     * @param FilterControllerEvent $event A FilterControllerEvent instance
     */",
 "/**
 * The ControllerListener class parses annotation blocks located in
 * controller classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param SecurityContextInterface      $securityContext
     * @param HttpUtils                     $httpUtils        An HttpUtilsInterface instance
     * @param string                        $logoutPath       The path that starts the logout process
     * @param string                        $targetUrl        The URL to redirect to after logout
     * @param LogoutSuccessHandlerInterface $successHandler
     */",
 "/**
     * Adds a logout handler
     *
     * @param LogoutHandlerInterface $handler
     *
     * @return void
     */",
 "/**
     * Performs the logout if requested
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
 * LogoutListener logout users.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * This exception is thrown when a non-existent service is requested.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * ListCommand displays the list of all available commands for the application.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param KernelInterface $kernel A KernelInterface instance
     */",
 "/**
     * Converts a short notation a:b:c to a class::method.
     *
     * @param string $controller A short notation controller (a:b:c)
     */",
 "/**
 * ControllerNameParser converts controller from the short notation a:b:c
 * (BlogBundle:Post:index) to a fully-qualified class::method string
 * (Bundle\BlogBundle\Controller\PostController::indexAction).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param PropertyPath $path  The property path to traverse
     */",
 "/**
     * Returns whether next() can be called without making the iterator invalid
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the current element in the property path is an array
     * index
     *
     * @return Boolean
     */",
 "/**
     * Returns whether the current element in the property path is a property
     * names
     *
     * @return Boolean
     */",
 "/**
 * Traverses a property path and provides additional methods to find out
 * information about the current element
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Checks if session was initialized and saves if current request is master
     * Runs on \'kernel.response\' in test environment
     *
     * @param FilterResponseEvent $event
     */",
 "/**
 * TestSessionListener.
 *
 * Saves session in test environment.
 *
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new ResponseEvent for $source and $response.
   * @param Swift_Transport $source
   * @param string $response
   * @param boolean $valid
   */",
 "/**
   * Get the response which was received from the server.
   * @return string
   */",
 "/**
   * Get the success status of this Event.
   * @return boolean
   */",
 "/**
 * Generated when a response is received on a SMTP connection.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Tests a condition.
 *
 * <pre>
 * {% if users %}
 *  <ul>
 *    {% for user in users %}
 *      <li>{{ user.username|e }}</li>
 *    {% endfor %}
 *  </ul>
 * {% endif %}
 * </pre>
 */",
 "/**
     * Sets the helper set associated with this helper.
     *
     * @param HelperSet $helperSet A HelperSet instance
     *
     * @api
     */",
 "/**
     * Gets the helper set associated with this helper.
     *
     * @return HelperSet A HelperSet instance
     *
     * @api
     */",
 "/**
     * Returns the canonical name of this helper.
     *
     * @return string The canonical name
     *
     * @api
     */",
 "/**
 * HelperInterface is the interface all helpers must implement.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns the alias name for an annotated configuration.
     *
     * @return string
     */",
 "/**
 * ConfigurationInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * You can modify the container here before it is dumped to PHP code.
     *
     * @param ContainerBuilder $container
     *
     * @return void
     *
     * @api
     */",
 "/**
 * Interface that must be implemented by compilation passes
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
     * Builds the form.
     *
     * This method gets called after the extended type has built the form to
     * further modify it.
     *
     * @see FormTypeInterface::buildForm()
     *
     * @param FormBuilder   $builder The form builder
     * @param array         $options The options
     */",
 "/**
     * Builds the view.
     *
     * This method gets called after the extended type has built the view to
     * further modify it.
     *
     * @see FormTypeInterface::buildView()
     *
     * @param FormView      $view The view
     * @param FormInterface $form The form
     */",
 "/**
     * Builds the view.
     *
     * This method gets called after the extended type has built the view to
     * further modify it.
     *
     * @see FormTypeInterface::buildViewBottomUp()
     *
     * @param FormView      $view The view
     * @param FormInterface $form The form
     */",
 "/**
     * Overrides the default options form the extended type.
     *
     * @param array $options
     *
     * @return array
     */",
 "/**
     * Returns the allowed option values for each option (if any).
     *
     * @param array $options
     *
     * @return array The allowed option values
     */",
 "/**
 * Represents a function template filter.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @override
     * @todo If the collection being counted is already joined, the SQL can be simpler (more efficient).
     */",
 "/**
     * @override
     */",
 "/**
 * \"SIZE\" \"(\" CollectionValuedPathExpression \")\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Gets the character used for identifier quoting.
     *
     * @return string
     * @override
     */",
 "/**
     * Returns the regular expression operator.
     *
     * @return string
     * @override
     */",
 "/**
     * Returns global unique identifier
     *
     * @return string to get global unique identifier
     * @override
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * Returns a series of strings concatinated
     *
     * concat() accepts an arbitrary number of parameters. Each parameter
     * must contain an expression or an array with expressions.
     *
     * @param string|array(string) strings that will be concatinated.
     * @override
     */",
 "/**
     * Two approaches to listing the table indexes. The information_schema is 
     * prefered, because it doesn\'t cause problems with SQL keywords such as \"order\" or \"table\".
     * 
     * @param string $table
     * @param string $currentDatabase
     * @return string
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column on the MySql platform.
     *
     * @params array $field
     */",
 "/** @override */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set the COLLATION
     * of a field declaration to be used in statements like CREATE TABLE.
     *
     * @param string $collation   name of the collation
     * @return string  DBMS specific SQL code portion needed to set the COLLATION
     *                 of a field declaration.
     */",
 "/**
     * Whether the platform prefers identity columns for ID generation.
     * MySql prefers \"autoincrement\" identity columns since sequences can only
     * be emulated with a table.
     *
     * @return boolean
     * @override
     */",
 "/**
     * Whether the platform supports identity columns.
     * MySql supports this through AUTO_INCREMENT columns.
     *
     * @return boolean
     * @override
     */",
 "/**
     * create a new database
     *
     * @param string $name name of the database that should be created
     * @return string
     * @override
     */",
 "/**
     * drop an existing database
     *
     * @param string $name name of the database that should be dropped
     * @return string
     * @override
     */",
 "/**
     * create a new table
     *
     * @param string $tableName   Name of the database that should be created
     * @param array $columns  Associative array that contains the definition of each field of the new table
     *                       The indexes of the array entries are the names of the fields of the table an
     *                       the array entry values are associative arrays like those that are meant to be
     *                       passed with the field definitions to get[Type]Declaration() functions.
     *                          array(
     *                              \'id\' => array(
     *                                  \'type\' => \'integer\',
     *                                  \'unsigned\' => 1
     *                                  \'notnull\' => 1
     *                                  \'default\' => 0
     *                              ),
     *                              \'name\' => array(
     *                                  \'type\' => \'text\',
     *                                  \'length\' => 12
     *                              ),
     *                              \'password\' => array(
     *                                  \'type\' => \'text\',
     *                                  \'length\' => 12
     *                              )
     *                          );
     * @param array $options  An associative array of table options:
     *                          array(
     *                              \'comment\' => \'Foo\',
     *                              \'charset\' => \'utf8\',
     *                              \'collate\' => \'utf8_unicode_ci\',
     *                              \'engine\' => \'innodb\',
     *                              \'foreignKeys\' => array(
     *                                  new ForeignKeyConstraint(),
     *                                  new ForeignKeyConstraint(),
     *                                  new ForeignKeyConstraint(),
     *                                  // etc
     *                              )
     *                          );
     *
     * @return void
     * @override
     */",
 "/**
     * Gets the SQL to alter an existing table.
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to declare an integer type
     * field to be used in statements like CREATE TABLE.
     *
     * @param string  $name   name the field to be declared.
     * @param string  $field  associative array with the name of the properties
     *                        of the field being declared as array indexes.
     *                        Currently, the types of supported field
     *                        properties are as follows:
     *
     *                       unsigned
     *                        Boolean flag that indicates whether the field
     *                        should be declared as unsigned integer if
     *                        possible.
     *
     *                       default
     *                        Integer value to be used as default for this
     *                        field.
     *
     *                       notnull
     *                        Boolean flag that indicates whether this field is
     *                        constrained to not be set to null.
     * @return string  DBMS specific SQL code portion that should be used to
     *                 declare the specified field.
     * @override
     */",
 "/** @override */",
 "/** @override */",
 "/** @override */",
 "/**
     * Return the FOREIGN KEY query section dealing with non-standard options
     * as MATCH, INITIALLY DEFERRED, ON UPDATE, ...
     *
     * @param ForeignKeyConstraint $foreignKey
     * @return string
     * @override
     */",
 "/**
     * Gets the SQL to drop an index of a table.
     *
     * @param Index $index           name of the index to be dropped
     * @param string|Table $table          name of table that should be used in method
     * @override
     */",
 "/**
     * @param Index $index
     * @param Table $table 
     */",
 "/**
     * Get the platform name for this instance.
     *
     * @return string
     */",
 "/**
     * Get SQL to safely drop a temporary table WITHOUT implicitly committing an open transaction.
     *
     * MySQL commits a transaction implicitly when DROP TABLE is executed, however not
     * if DROP TEMPORARY TABLE is executed.
     *
     * @throws \InvalidArgumentException
     * @param $table
     * @return string
     */",
 "/**
 * The MySqlPlatform provides the behavior, features and SQL dialect of the
 * MySQL database platform. This platform represents a MySQL 5.0 or greater platform that
 * uses the InnoDB storage engine.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: MySQLPlatform
 */",
 "/**
 * DB2 Keywords
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * @group integration
 */",
 "/**
 * Automatically loads proxy object before validation.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * This exception is thrown when no session is available.
 *
 * Possible reasons for this are:
 *
 *     a) The session timed-out because the user waited too long.
 *     b) The user has disabled cookies, and a new session is started on each
 *        request.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Get the name of the AUTH mechanism this Authenticator handles.
   * @return string
   */",
 "/**
   * Try to authenticate the user with $username and $password.
   * @param Swift_Transport_SmtpAgent $agent
   * @param string $username
   * @param string $password
   * @return boolean
   */",
 "/**
 * Handles PLAIN authentication.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to drop the database schema for a set of classes based on their mappings.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor
     *
     * @param  string  $pattern   The pattern to be used to format and/or parse values
     * @param  string  $timezone  The timezone to perform the date/time calculations
     */",
 "/**
     * Return the array of Transformer objects
     *
     * @return  array  Associative array of Transformer objects (format char => Transformer)
     */",
 "/**
     * Format a DateTime using ICU dateformat pattern
     *
     * @param  DateTime  $dateTime  A DateTime object to be used to generate the formatted value
     *
     * @return string               The formatted value
     */",
 "/**
     * Return the formatted ICU value for the matched date characters
     *
     * @param  string    $dateChars     The date characters to be replaced with a formatted ICU value
     * @param  DateTime  $dateTime      A DateTime object to be used to generate the formatted value
     *
     * @return string                   The formatted value
     *
     * @throws NotImplementedException  When it encounters a not implemented date character
     */",
 "/**
     * Parse a pattern based string to a timestamp value
     *
     * @param  DateTime  $dateTime       A configured DateTime object to use to perform the date calculation
     * @param  string    $value          String to convert to a time value
     *
     * @return int                       The corresponding Unix timestamp
     *
     * @throws InvalidArgumentException  When the value can not be matched with pattern
     */",
 "/**
     * Retrieve a regular expression to match with a formatted value.
     *
     * @param  string  $pattern  The pattern to create the reverse matching regular expression
     *
     * @return string            The reverse matching regular expression with named captures being formed by the
     *                           transformer index in the $transformer array
     */",
 "/**
     * Check if the first char of a string is a single quote
     *
     * @param  string  $quoteMatch  The string to check
     *
     * @return Boolean              true if matches, false otherwise
     */",
 "/**
     * Replaces single quotes at the start or end of a string with two single quotes
     *
     * @param  string  $quoteMatch  The string to replace the quotes
     *
     * @return string               A string with the single quotes replaced
     */",
 "/**
     * Builds a chars match regular expression
     *
     * @param  string  $specialChars  A string of chars to build the regular expression
     *
     * @return string                 The chars match regular expression
     */",
 "/**
     * Normalize a preg_replace match array, removing the numeric keys and returning an associative array
     * with the value and pattern values for the matched Transformer
     *
     * @param  array  $data
     *
     * @return array
     */",
 "/**
     * Calculates the Unix timestamp based on the matched values by the reverse matching regular
     * expression of parse()
     *
     * @param  DateTime $dateTime The DateTime object to be used to calculate the timestamp
     * @param  array    $options  An array with the matched values to be used to calculate the timestamp
     *
     * @return Boolean|int        The calculated timestamp or false if matched date is invalid
     */",
 "/**
     * Add sensible default values for missing items in the extracted date/time options array. The values
     * are base in the beginning of the Unix era
     *
     * @param  array  $options
     *
     * @return array
     */",
 "/**
 * Parser and formatter for date formats
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
 * Adds the DebugHandler when the profiler is enabled.
 *
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * return string to call a function to get a substring inside an SQL statement
     *
     * Note: Not SQL92, but common functionality.
     *
     * @param string $value         an sql string literal or column name/alias
     * @param integer $position     where to start the substring portion
     * @param integer $length       the substring portion length
     * @return string               SQL substring function with given parameters
     * @override
     */",
 "/**
     * Return string to call a variable with the current timestamp inside an SQL statement
     * There are three special variables for current date and time:
     * - CURRENT_TIMESTAMP (date and time, TIMESTAMP type)
     * - CURRENT_DATE (date, DATE type)
     * - CURRENT_TIME (time, TIME type)
     *
     * @return string to call a variable with the current timestamp
     * @override
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * Returns global unique identifier
     *
     * @return string to get global unique identifier
     * @override
     */",
 "/**
     * Get the number of days difference between two dates.
     * 
     * Note: Since Oracle timestamp differences are calculated down to the microsecond we have to truncate
     * them to the difference in days. This is obviously a restriction of the original functionality, but we
     * need to make this a portable function.
     * 
     * @param type $date1
     * @param type $date2
     * @return type 
     */",
 "/**
     * Gets the SQL used to create a sequence that starts with a given value
     * and increments by the given allocation size.
     *
     * Need to specifiy minvalue, since start with is hidden in the system and MINVALUE <= START WITH.
     * Therefore we can use MINVALUE to be able to get a hint what START WITH was for later introspection
     * in {@see listSequences()}
     *
     * @param \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * {@inheritdoc}
     *
     * @param string $sequenceName
     * @override
     */",
 "/**
     * {@inheritdoc}
     *
     * @param integer $level
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column on the Oracle platform.
     *
     * @params array $field
     * @override
     */",
 "/** @override */",
 "/**
     *
     * @param string $table
     * @param array $columns
     * @param array $options
     * @return array
     */",
 "/**
     * @license New BSD License
     * @link http://ezcomponents.org/docs/api/trunk/DatabaseSchema/ezcDbSchemaOracleReader.html
     * @param  string $table
     * @return string
     */",
 "/**
     *
     * @param  \Doctrine\DBAL\Schema\Sequence $sequence
     * @return string
     */",
 "/**
     * @param  ForeignKeyConstraint|string $foreignKey
     * @param  Table|string $table
     * @return string
     */",
 "/**
     * Gets the sql statements for altering an existing table.
     *
     * The method returns an array of sql statements, since some platforms need several statements.
     *
     * @param string $diff->name          name of the table that is intended to be changed.
     * @param array $changes        associative array that contains the details of each type      *
     * @param boolean $check        indicates whether the function should just check if the DBMS driver
     *                              can perform the requested table alterations if the value is true or
     *                              actually perform them otherwise.
     * @return array
     */",
 "/**
     * Whether the platform prefers sequences for ID generation.
     *
     * @return boolean
     */",
 "/**
     * Get the platform name for this instance
     *
     * @return string
     */",
 "/**
     * Adds an driver-specific LIMIT clause to the query
     *
     * @param string $query         query to modify
     * @param integer $limit        limit the number of rows
     * @param integer $offset       start reading from given offset
     * @return string               the modified query
     */",
 "/**
     * Gets the character casing of a column in an SQL result set of this platform.
     * 
     * Oracle returns all column names in SQL result sets in uppercase.
     * 
     * @param string $column The column name for which to get the correct character casing.
     * @return string The column name in the character casing used in SQL result sets.
     */",
 "/**
     * Maximum length of any given databse identifier, like tables or column names.
     *
     * @return int
     */",
 "/**
     * Whether the platform supports sequences.
     *
     * @return boolean
     */",
 "/**
     * Whether the platform supports releasing savepoints.
     *
     * @return boolean
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * This is for test reasons, many vendors have special requirements for dummy statements.
     *
     * @return string
     */",
 "/**
     * Generate SQL to release a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
 * OraclePlatform.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Lukas Smith <smith@pooteeweet.org> (PEAR MDB2 library)
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Initializes a new <tt>QueryBuilder</tt>.
     *
     * @param Doctrine\DBAL\Connection $connection DBAL Connection
     */",
 "/**
     * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
     * This producer method is intended for convenient inline usage. Example:
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'users\', \'u\')
     *         ->where($qb->expr()->eq(\'u.id\', 1));
     * </code>
     *
     * For more complex expression construction, consider storing the expression
     * builder object in a local variable.
     *
     * @return Doctrine\DBAL\Query\ExpressionBuilder
     */",
 "/**
     * Get the type of the currently built query.
     *
     * @return integer
     */",
 "/**
     * Get the associated DBAL Connection for this query builder.
     *
     * @return Doctrine\DBAL\Connection
     */",
 "/**
     * Get the state of this query builder instance.
     *
     * @return integer Either QueryBuilder::STATE_DIRTY or QueryBuilder::STATE_CLEAN.
     */",
 "/**
     * Execute this query using the bound parameters and their types.
     *
     * Uses {@see Connection::executeQuery} for select statements and {@see Connection::executeUpdate}
     * for insert, update and delete statements.
     *
     * @return mixed
     */",
 "/**
     * Get the complete SQL string formed by the current specifications of this QueryBuilder.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'User\', \'u\')
     *     echo $qb->getSQL(); // SELECT u FROM User u
     * </code>
     *
     * @return string The sql query string.
     */",
 "/**
     * Sets a query parameter for the query being constructed.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'users\', \'u\')
     *         ->where(\'u.id = :user_id\')
     *         ->setParameter(\':user_id\', 1);
     * </code>
     *
     * @param string|integer $key The parameter position or name.
     * @param mixed $value The parameter value.
     * @param string|null $type PDO::PARAM_*
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Sets a collection of query parameters for the query being constructed.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'users\', \'u\')
     *         ->where(\'u.id = :user_id1 OR u.id = :user_id2\')
     *         ->setParameters(array(
     *             \':user_id1\' => 1,
     *             \':user_id2\' => 2
     *         ));
     * </code>
     *
     * @param array $params The query parameters to set.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets all defined query parameters for the query being constructed.
     *
     * @return array The currently defined query parameters.
     */",
 "/**
     * Gets a (previously set) query parameter of the query being constructed.
     *
     * @param mixed $key The key (index or name) of the bound parameter.
     * @return mixed The value of the bound parameter.
     */",
 "/**
     * Sets the position of the first result to retrieve (the \"offset\").
     *
     * @param integer $firstResult The first result to return.
     * @return Doctrine\DBAL\Query\QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets the position of the first result the query object was set to retrieve (the \"offset\").
     * Returns NULL if {@link setFirstResult} was not applied to this QueryBuilder.
     *
     * @return integer The position of the first result.
     */",
 "/**
     * Sets the maximum number of results to retrieve (the \"limit\").
     *
     * @param integer $maxResults The maximum number of results to retrieve.
     * @return Doctrine\DBAL\Query\QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Gets the maximum number of results the query object was set to retrieve (the \"limit\").
     * Returns NULL if {@link setMaxResults} was not applied to this query builder.
     *
     * @return integer Maximum number of results.
     */",
 "/**
     * Either appends to or replaces a single, generic query part.
     *
     * The available parts are: \'select\', \'from\', \'set\', \'where\',
     * \'groupBy\', \'having\' and \'orderBy\'.
     *
     * @param string $sqlPartName
     * @param string $sqlPart
     * @param string $append
     * @return Doctrine\DBAL\Query\QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies an item that is to be returned in the query result.
     * Replaces any previously specified selections, if any.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.id\', \'p.id\')
     *         ->from(\'users\', \'u\')
     *         ->leftJoin(\'u\', \'phonenumbers\', \'p\', \'u.id = p.user_id\');
     * </code>
     *
     * @param mixed $select The selection expressions.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds an item that is to be returned in the query result.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.id\')
     *         ->addSelect(\'p.id\')
     *         ->from(\'users\', \'u\')
     *         ->leftJoin(\'u\', \'phonenumbers\', \'u.id = p.user_id\');
     * </code>
     *
     * @param mixed $select The selection expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Turns the query being built into a bulk delete query that ranges over
     * a certain table.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->delete(\'users\', \'u\')
     *         ->where(\'u.id = :user_id\');
     *         ->setParameter(\':user_id\', 1);
     * </code>
     *
     * @param string $delete The table whose rows are subject to the deletion.
     * @param string $alias The table alias used in the constructed query.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Turns the query being built into a bulk update query that ranges over
     * a certain table
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->update(\'users\', \'u\')
     *         ->set(\'u.password\', md5(\'password\'))
     *         ->where(\'u.id = ?\');
     * </code>
     *
     * @param string $update The table whose rows are subject to the update.
     * @param string $alias The table alias used in the constructed query.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Create and add a query root corresponding to the table identified by the
     * given alias, forming a cartesian product with any existing query roots.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.id\')
     *         ->from(\'users\', \'u\')
     * </code>
     *
     * @param string $from   The table
     * @param string $alias  The alias of the table
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a join to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.name\')
     *         ->from(\'users\', \'u\')
     *         ->join(\'u\', \'phonenumbers\', \'p\', \'p.is_primary = 1\');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause
     * @param string $join The table name to join
     * @param string $alias The alias of the join table
     * @param string $condition The condition for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a join to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.name\')
     *         ->from(\'users\', \'u\')
     *         ->innerJoin(\'u\', \'phonenumbers\', \'p\', \'p.is_primary = 1\');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause
     * @param string $join The table name to join
     * @param string $alias The alias of the join table
     * @param string $condition The condition for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a left join to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.name\')
     *         ->from(\'users\', \'u\')
     *         ->leftJoin(\'u\', \'phonenumbers\', \'p\', \'p.is_primary = 1\');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause
     * @param string $join The table name to join
     * @param string $alias The alias of the join table
     * @param string $condition The condition for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Creates and adds a right join to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.name\')
     *         ->from(\'users\', \'u\')
     *         ->rightJoin(\'u\', \'phonenumbers\', \'p\', \'p.is_primary = 1\');
     * </code>
     *
     * @param string $fromAlias The alias that points to a from clause
     * @param string $join The table name to join
     * @param string $alias The alias of the join table
     * @param string $condition The condition for the join
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Sets a new value for a column in a bulk update query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->update(\'users\', \'u\')
     *         ->set(\'u.password\', md5(\'password\'))
     *         ->where(\'u.id = ?\');
     * </code>
     *
     * @param string $key The column to set.
     * @param string $value The value, expression, placeholder, etc.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies one or more restrictions to the query result.
     * Replaces any previously specified restrictions, if any.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.name\')
     *         ->from(\'users\', \'u\')
     *         ->where(\'u.id = ?\');
     *
     *     // You can optionally programatically build and/or expressions
     *     $qb = $conn->createQueryBuilder();
     *
     *     $or = $qb->expr()->orx();
     *     $or->add($qb->expr()->eq(\'u.id\', 1));
     *     $or->add($qb->expr()->eq(\'u.id\', 2));
     *
     *     $qb->update(\'users\', \'u\')
     *         ->set(\'u.password\', md5(\'password\'))
     *         ->where($or);
     * </code>
     *
     * @param mixed $predicates The restriction predicates.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds one or more restrictions to the query results, forming a logical
     * conjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u\')
     *         ->from(\'users\', \'u\')
     *         ->where(\'u.username LIKE ?\')
     *         ->andWhere(\'u.is_active = 1\');
     * </code>
     *
     * @param mixed $where The query restrictions.
     * @return QueryBuilder This QueryBuilder instance.
     * @see where()
     */",
 "/**
     * Adds one or more restrictions to the query results, forming a logical
     * disjunction with any previously specified restrictions.
     *
     * <code>
     *     $qb = $em->createQueryBuilder()
     *         ->select(\'u.name\')
     *         ->from(\'users\', \'u\')
     *         ->where(\'u.id = 1\')
     *         ->orWhere(\'u.id = 2\');
     * </code>
     *
     * @param mixed $where The WHERE statement
     * @return QueryBuilder $qb
     * @see where()
     */",
 "/**
     * Specifies a grouping over the results of the query.
     * Replaces any previously specified groupings, if any.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.name\')
     *         ->from(\'users\', \'u\')
     *         ->groupBy(\'u.id\');
     * </code>
     *
     * @param mixed $groupBy The grouping expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a grouping expression to the query.
     *
     * <code>
     *     $qb = $conn->createQueryBuilder()
     *         ->select(\'u.name\')
     *         ->from(\'users\', \'u\')
     *         ->groupBy(\'u.lastLogin\');
     *         ->addGroupBy(\'u.createdAt\')
     * </code>
     *
     * @param mixed $groupBy The grouping expression.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies a restriction over the groups of the query.
     * Replaces any previous having restrictions, if any.
     *
     * @param mixed $having The restriction over the groups.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a restriction over the groups of the query, forming a logical
     * conjunction with any existing having restrictions.
     *
     * @param mixed $having The restriction to append.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds a restriction over the groups of the query, forming a logical
     * disjunction with any existing having restrictions.
     *
     * @param mixed $having The restriction to add.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Specifies an ordering for the query results.
     * Replaces any previously specified orderings, if any.
     *
     * @param string $sort The ordering expression.
     * @param string $order The ordering direction.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Adds an ordering to the query results.
     *
     * @param string $sort The ordering expression.
     * @param string $order The ordering direction.
     * @return QueryBuilder This QueryBuilder instance.
     */",
 "/**
     * Get a query part by its name.
     *
     * @param string $queryPartName
     * @return mixed $queryPart
     */",
 "/**
     * Get all query parts.
     *
     * @return array $sqlParts
     */",
 "/**
     * Reset SQL parts
     *
     * @param array $queryPartNames
     * @return QueryBuilder
     */",
 "/**
     * Reset single SQL part
     *
     * @param string $queryPartName
     * @return QueryBuilder
     */",
 "/**
     * Converts this instance into a SELECT string in SQL.
     *
     * @return string
     */",
 "/**
     * Converts this instance into an UPDATE string in SQL.
     *
     * @return string
     */",
 "/**
     * Converts this instance into a DELETE string in SQL.
     *
     * @return string
     */",
 "/**
     * Gets a string representation of this QueryBuilder which corresponds to
     * the final SQL query being constructed.
     *
     * @return string The string representation of this QueryBuilder.
     */",
 "/**
     * Create a new named parameter and bind the value $value to it.
     *
     * This method provides a shortcut for PDOStatement::bindValue
     * when using prepared statements.
     *
     * The parameter $value specifies the value that you want to bind. If
     * $placeholder is not provided bindValue() will automatically create a
     * placeholder for you. An automatic placeholder will be of the name
     * \':dcValue1\', \':dcValue2\' etc.
     *
     * For more information see {@link http://php.net/pdostatement-bindparam}
     *
     * Example:
     * <code>
     * $value = 2;
     * $q->eq( \'id\', $q->bindValue( $value ) );
     * $stmt = $q->executeQuery(); // executed with \'id = 2\'
     * </code>
     *
     * @license New BSD License
     * @link http://www.zetacomponents.org
     * @param mixed $value
     * @param mixed $type
     * @param string $placeHolder the name to bind with. The string must start with a colon \':\'.
     * @return string the placeholder name used.
     */",
 "/**
     * Create a new positional parameter and bind the given value to it.
     *
     * Attention: If you are using positional parameters with the query builder you have
     * to be very careful to bind all parameters in the order they appear in the SQL
     * statement , otherwise they get bound in the wrong order which can lead to serious
     * bugs in your code.
     *
     * Example:
     * <code>
     *  $qb = $conn->createQueryBuilder();
     *  $qb->select(\'u.*\')
     *     ->from(\'users\', \'u\')
     *     ->where(\'u.username = \' . $qb->createPositionalParameter(\'Foo\', PDO::PARAM_STR))
     *     ->orWhere(\'u.username = \' . $qb->createPositionalParameter(\'Bar\', PDO::PARAM_STR))
     * </code>
     *
     * @param  mixed $value
     * @param  mixed $type
     * @return string
     */",
 "/**
 * QueryBuilder class is responsible to dynamically create SQL queries.
 *
 * Important: Verify that every feature you use will work with your database vendor.
 * SQL Query Builder does not attempt to validate the generated SQL at all.
 *
 * The query builder does no validation whatsoever if certain features even work with the
 * underlying database vendor. Limit queries and joins are NOT applied to UPDATE and DELETE statements
 * even if some vendors such as MySQL support it.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       2.1
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * @return string
     */",
 "/**
     * Add a ConstraintViolation to this list.
     *
     * @param ConstraintViolation $violation
     *
     * @api
     */",
 "/**
     * Merge an existing ConstraintViolationList into this list.
     *
     * @param ConstraintViolationList $violations
     *
     * @api
     */",
 "/**
     * @see IteratorAggregate
     *
     * @api
     */",
 "/**
     * @see Countable
     *
     * @api
     */",
 "/**
     * @see ArrayAccess
     *
     * @api
     */",
 "/**
     * @see ArrayAccess
     *
     * @api
     */",
 "/**
     * @see ArrayAccess
     *
     * @api
     */",
 "/**
     * @see ArrayAccess
     *
     * @api
     */",
 "/**
 * An array-acting object that holds many ConstrainViolation instances.
 *
 * @api
 */",
 "/**
     * Whether auditing for successful grants is turned on
     *
     * @return Boolean
     */",
 "/**
     * Whether auditing for successful denies is turned on
     *
     * @return Boolean
     */",
 "/**
 * ACEs can implement this interface if they support auditing capabilities.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Tokenizes a source code.
     *
     * @param  string $code     The source code
     * @param  string $filename A unique identifier for the source code
     *
     * @return Twig_TokenStream A token stream instance
     */",
 "/**
 * Interface implemented by lexer classes.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param string $className
     * @param string $field
     */",
 "/**
 * Base exception class for all ORM exceptions.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the pattern for this locale
     *
     * The pattern contains the placeholder \"{{ widget }}\" where the HTML tag should
     * be inserted
     */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @param string The tag name
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * UsernamePasswordFormAuthenticationListener is the default implementation of
 * an authentication via a simple form composed of a username and a password.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param Request $request The current request
     * @param string  $version The version
     * @param string  $format  The version format
     */",
 "/**
 * The path packages adds a version and a base path to asset URLs.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for month format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Constructor.
     *
     * @param AuthenticationProviderInterface[] $providers        An array of AuthenticationProviderInterface instances
     * @param Boolean                           $eraseCredentials Whether to erase credentials after authentication or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * AuthenticationProviderManager uses a list of AuthenticationProviderInterface
 * instances to authenticate a Token.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $prefix The role prefix
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * RoleVoter votes if any attribute starts with a given prefix.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $dir The base web directory
     */",
 "/**
 * Writes assets to the filesystem.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Notifies the listener of a property change.
     *
     * @param object $sender The object on which the property changed.
     * @param string $propertyName The name of the property that changed.
     * @param mixed $oldValue The old value of the property that changed.
     * @param mixed $newValue The new value of the property that changed.
     */",
 "/**
 * Contract for classes that are potential listeners of a <tt>NotifyPropertyChanged</tt>
 * implementor.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
   * Tests if this Transport mechanism has started.
   * @return boolean
   */",
 "/**
   * Starts this Transport mechanism.
   */",
 "/**
   * Stops this Transport mechanism.
   */",
 "/**
   * Stores a message in the queue.
   *
   * @param Swift_Mime_Message $message The message to store
   *
   * @return boolean Whether the operation has succeeded
   */",
 "/**
   * Sends messages using the given transport instance.
   *
   * @param Swift_Transport $transport         A transport instance
   * @param string[]        &$failedRecipients An array of failures by-reference
   *
   * @return int The number of sent emails
   */",
 "/**
 * Stores Messages in memory.
 * @package Swift
 * @author  Fabien Potencier
 */",
 "/**
*ImplementationofClassMetadataFactoryInterface
*
*@authorBernhardSchussek<bernhard.schussek@symfony.com>
*/",
 "/**
     * Constructor.
     *
     * @param array|\Closure $choices An array of choices or a function returning an array
     *
     * @throws UnexpectedTypeException if the type of the choices parameter is not supported
     */",
 "/**
     * Returns a list of choices
     *
     * @return array
     */",
 "/**
     * Initializes the list of choices.
     *
     * @throws UnexpectedTypeException if the function does not return an array
     */",
 "/**
 * Exception thrown when a parameter is not valid
 *
 * @author Alexandre Salom?? <alexandre.salome@gmail.com>
 *
 * @api
 */",
 "/**
     * Double-dispatch method, supposed to dispatch back to the walker.
     * 
     * Implementation is not mandatory for all nodes.
     * 
     * @param $walker
     */",
 "/**
     * Dumps the AST Node into a string representation for information purpose only
     *
     * @return string
     */",
 "/**
 * Abstract class of an AST node
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param Helper[] $helpers An array of helper.
     */",
 "/**
     * Sets a helper.
     *
     * @param HelperInterface $helper The helper instance
     * @param string          $alias  An alias
     */",
 "/**
     * Returns true if the helper if defined.
     *
     * @param string  $name The helper name
     *
     * @return Boolean true if the helper is defined, false otherwise
     */",
 "/**
     * Gets a helper value.
     *
     * @param string $name The helper name
     *
     * @return HelperInterface The helper instance
     *
     * @throws \InvalidArgumentException if the helper is not defined
     */",
 "/**
     * Sets the command associated with this helper set.
     *
     * @param Command $command A Command instance
     */",
 "/**
     * Gets the command associated with this helper set.
     *
     * @return Command A Command instance
     */",
 "/**
 * HelperSet represents a set of helpers to be used with a command.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Dumps a set of routes to a PHP class.
     *
     * Available options:
     *
     *  * class:      The class name
     *  * base_class: The base class name
     *
     * @param  array  $options An array of options
     *
     * @return string A PHP class representing the matcher class
     */",
 "/**
     * Gets the routes to match.
     *
     * @return RouteCollection A RouteCollection instance
     */",
 "/**
 * MatcherDumperInterface is the interface that all matcher dumper classes must implement.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * This class contains the configuration information for the bundle
 *
 * This information is solely responsible for how the different configuration
 * sections are normalized, and merged.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @author Christophe Coevoet <stof@notk.org>
 */",
 "/**
     * Constructor.
     *
     * @param array $headers An array of HTTP headers
     *
     * @api
     */",
 "/**
     * Returns the headers as a string.
     *
     * @return string The headers
     */",
 "/**
     * Returns the headers.
     *
     * @return array An array of headers
     *
     * @api
     */",
 "/**
     * Returns the parameter keys.
     *
     * @return array An array of parameter keys
     *
     * @api
     */",
 "/**
     * Replaces the current HTTP headers by a new set.
     *
     * @param array  $headers An array of HTTP headers
     *
     * @api
     */",
 "/**
     * Adds new headers the current HTTP headers set.
     *
     * @param array  $headers An array of HTTP headers
     *
     * @api
     */",
 "/**
     * Returns a header value by name.
     *
     * @param string  $key     The header name
     * @param mixed   $default The default value
     * @param Boolean $first   Whether to return the first value or all header values
     *
     * @return string|array The first header value if $first is true, an array of values otherwise
     *
     * @api
     */",
 "/**
     * Sets a header by name.
     *
     * @param string       $key     The key
     * @param string|array $values  The value or an array of values
     * @param Boolean      $replace Whether to replace the actual value of not (true by default)
     *
     * @api
     */",
 "/**
     * Returns true if the HTTP header is defined.
     *
     * @param string $key The HTTP header
     *
     * @return Boolean true if the parameter exists, false otherwise
     *
     * @api
     */",
 "/**
     * Returns true if the given HTTP header contains the given value.
     *
     * @param string $key   The HTTP header name
     * @param string $value The HTTP value
     *
     * @return Boolean true if the value is contained in the header, false otherwise
     *
     * @api
     */",
 "/**
     * Removes a header.
     *
     * @param string $key The HTTP header name
     *
     * @api
     */",
 "/**
     * Returns the HTTP header value converted to a date.
     *
     * @param string    $key     The parameter key
     * @param \DateTime $default The default value
     *
     * @return \DateTime The filtered value
     *
     * @api
     */",
 "/**
     * Parses a Cache-Control HTTP header.
     *
     * @param string $header The value of the Cache-Control HTTP header
     *
     * @return array An array representing the attribute values
     */",
 "/**
 * HeaderBag is a container for HTTP headers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Generates an array of localized month choices.
     *
     * @param IntlDateFormatter $formatter An IntlDateFormatter instance
     * @param array             $months    The month numbers to generate
     */",
 "/**
     * Initializes the list of months.
     *
     * @throws UnexpectedTypeException if the function does not return an array
     */",
 "/**
     * Constructor.
     *
     * @param TemplateNameParserInterface $parser  A TemplateNameParserInterface instance
     * @param LoaderInterface             $loader  A loader instance
     * @param array                       $helpers An array of helper instances
     */",
 "/**
     * Renders a template.
     *
     * @param mixed $name       A template name or a TemplateReferenceInterface instance
     * @param array $parameters An array of parameters to pass to the template
     *
     * @return string The evaluated template as a string
     *
     * @throws \InvalidArgumentException if the template does not exist
     * @throws \RuntimeException         if the template cannot be rendered
     *
     * @api
     */",
 "/**
     * Returns true if the template exists.
     *
     * @param mixed $name A template name or a TemplateReferenceInterface instance
     *
     * @return Boolean true if the template exists, false otherwise
     *
     * @api
     */",
 "/**
     * Returns true if this class is able to render the given template.
     *
     * @param mixed $name A template name or a TemplateReferenceInterface instance
     *
     * @return Boolean true if this class supports the given resource, false otherwise
     *
     * @api
     */",
 "/**
     * Evaluates a template.
     *
     * @param Storage $template   The template to render
     * @param array   $parameters An array of parameters to pass to the template
     *
     * @return string|false The evaluated template, or false if the engine is unable to render the template
     */",
 "/**
     * Gets a helper value.
     *
     * @param string $name The helper name
     *
     * @return mixed The helper value
     *
     * @throws \InvalidArgumentException if the helper is not defined
     *
     * @api
     */",
 "/**
     * Returns true if the helper is defined.
     *
     * @param string  $name The helper name
     *
     * @return Boolean true if the helper is defined, false otherwise
     *
     * @api
     */",
 "/**
     * Sets a helper.
     *
     * @param HelperInterface $name  The helper instance
     * @param string          $value An alias
     *
     * @api
     */",
 "/**
     * Removes a helper.
     *
     * @param string $name The helper name
     *
     * @api
     */",
 "/**
     * @param Helper[] $helpers An array of helper
     *
     * @api
     */",
 "/**
     * Sets the helpers.
     *
     * @param Helper[] $helpers An array of helper
     *
     * @api
     */",
 "/**
     * Sets a helper.
     *
     * @param HelperInterface $helper The helper instance
     * @param string          $alias  An alias
     *
     * @api
     */",
 "/**
     * Returns true if the helper if defined.
     *
     * @param string  $name The helper name
     *
     * @return Boolean true if the helper is defined, false otherwise
     *
     * @api
     */",
 "/**
     * Gets a helper value.
     *
     * @param string $name The helper name
     *
     * @return HelperInterface The helper instance
     *
     * @throws \InvalidArgumentException if the helper is not defined
     *
     * @api
     */",
 "/**
     * Decorates the current template with another one.
     *
     * @param string $template  The decorator logical name
     *
     * @api
     */",
 "/**
     * Escapes a string by using the current charset.
     *
     * @param mixed  $value   A variable to escape
     * @param string $context The context name
     *
     * @return string The escaped value
     *
     * @api
     */",
 "/**
     * Sets the charset to use.
     *
     * @param string $charset The charset
     *
     * @api
     */",
 "/**
     * Gets the current charset.
     *
     * @return string The current charset
     *
     * @api
     */",
 "/**
     * Adds an escaper for the given context.
     *
     * @param string $context The escaper context (html, js, ...)
     * @param mixed  $escaper A PHP callable
     *
     * @api
     */",
 "/**
     * Gets an escaper for a given context.
     *
     * @param string $context The context name
     *
     * @return mixed  $escaper A PHP callable
     *
     * @api
     */",
 "/**
     * @param string $name
     * @param mixed $value
     *
     * @api
     */",
 "/**
     * Returns the assigned globals.
     *
     * @return array
     *
     * @api
     */",
 "/**
     * Initializes the built-in escapers.
     *
     * Each function specifies a way for applying a transformation to a string
     * passed to it. The purpose is for the string to be \"escaped\" so it is
     * suitable for the format it is being displayed in.
     *
     * For example, the string: \"It\'s required that you enter a username & password.\n\"
     * If this were to be displayed as HTML it would be sensible to turn the
     * ampersand into \'&amp;\' and the apostrophe into \'&aps;\'. However if it were
     * going to be used as a string in JavaScript to be displayed in an alert box
     * it would be right to leave the string as-is, but c-escape the apostrophe and
     * the new line.
     *
     * For each function there is a define to avoid problems with strings being
     * incorrectly specified.
     */",
 "/**
     * Convert a string from one encoding to another.
     *
     * @param string $string The string to convert
     * @param string $to     The input encoding
     * @param string $from   The output encoding
     *
     * @return string The string with the new encoding
     *
     * @throws \RuntimeException if no suitable encoding function is found (iconv or mbstring)
     */",
 "/**
     * Gets the loader associated with this engine.
     *
     * @return LoaderInterface A LoaderInterface instance
     */",
 "/**
     * Loads the given template.
     *
     * @param mixed $name A template name or a TemplateReferenceInterface instance
     *
     * @return Storage A Storage instance
     *
     * @throws \InvalidArgumentException if the template cannot be found
     */",
 "/**
 * PhpEngine is an engine able to render PHP templates.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Create a new SendmailTransport, optionally using $command for sending.
   * @param string $command
   */",
 "/**
   * Create a new SendmailTransport instance.
   * @param string $command
   * @return Swift_SendmailTransport
   */",
 "/**
 * SendmailTransport for sending mail through a sendmail/postfix (etc..) binary.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
 * @group functional
 */",
 "/**
 * CredentialsExpiredException is thrown when the user account credentials have expired.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Logs a SQL statement somewhere.
     *
     * @param string $sql The SQL to be executed.
     * @param array $params The SQL parameters.
     * @param array $types The SQL parameter types.
     * @return void
     */",
 "/**
     * Mark the last started query as stopped. This can be used for timing of queries.
     *
     * @return void
     */",
 "/**
 * Interface for SQL loggers.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Contains class metadata information
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * This exception is thrown when a circular reference is detected.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * DisabledException is thrown when the user account is disabled.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Invoked immediately following a command being sent.
   * @param Swift_Events_ResponseEvent $evt
   */",
 "/**
 * Listens for Transports to send commands to the server.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Initializes the runtime environment.
     *
     * This is where you can load some file that contains filter functions for instance.
     *
     * @param Twig_Environment $environment The current Twig_Environment instance
     */",
 "/**
     * Returns the token parser instances to add to the existing list.
     *
     * @return array An array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances
     */",
 "/**
     * Returns the node visitor instances to add to the existing list.
     *
     * @return array An array of Twig_NodeVisitorInterface instances
     */",
 "/**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */",
 "/**
     * Returns a list of tests to add to the existing list.
     *
     * @return array An array of tests
     */",
 "/**
     * Returns a list of functions to add to the existing list.
     *
     * @return array An array of functions
     */",
 "/**
     * Returns a list of operators to add to the existing list.
     *
     * @return array An array of operators
     */",
 "/**
     * Returns a list of global variables to add to the existing list.
     *
     * @return array An array of global variables
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * Interface implemented by extension classes.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles a function.
     *
     * @return string The PHP code for the function
     */",
 "/**
 * Represents a template function.
 *
 * @package    twig
 * @author     Arnaud Le Blanc <arnaud.lb@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param RouteCollection $routes  A RouteCollection instance
     * @param RequestContext  $context The context
     *
     * @api
     */",
 "/**
     * Sets the request context.
     *
     * @param RequestContext $context The context
     *
     * @api
     */",
 "/**
     * Gets the request context.
     *
     * @return RequestContext The context
     */",
 "/**
     * Generates a URL from the given parameters.
     *
     * @param  string  $name       The name of the route
     * @param  mixed   $parameters An array of parameters
     * @param  Boolean $absolute   Whether to generate an absolute URL
     *
     * @return string The generated URL
     *
     * @throws Symfony\Component\Routing\Exception\RouteNotFoundException When route doesn\'t exist
     *
     * @api
     */",
 "/**
     * @throws Symfony\Component\Routing\Exception\MissingMandatoryParametersException When route has some missing mandatory parameters
     * @throws Symfony\Component\Routing\Exception\InvalidParameterException When a parameter value is not correct
     */",
 "/**
 * UrlGenerator generates URL based on a set of routes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Tries to establish a database connection to SQLite.
     *
     * @param array $params
     * @param string $username
     * @param string $password
     * @param array $driverOptions
     * @return Connection
     */",
 "/**
     * Constructs the Sqlite PDO DSN.
     *
     * @return string  The DSN.
     * @override
     */",
 "/**
     * Gets the database platform that is relevant for this driver.
     */",
 "/**
     * Gets the schema manager that is relevant for this driver.
     *
     * @param Doctrine\DBAL\Connection $conn
     * @return Doctrine\DBAL\Schema\SqliteSchemaManager
     */",
 "/**
 * The PDO Sqlite driver.
 *
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param array     $allow         An array of allowed methods
     * @param string    $message       The internal exception message
     * @param Exception $previous      The previous exception
     * @param integer   $code          The internal exception code
     */",
 "/**
 * MethodNotAllowedHttpException.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * RetryAuthenticationEntryPoint redirects URL based on the configured scheme.
 *
 * This entry point is not intended to work with HTTP post requests.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks whether this provider supports the given token.
     *
     * @param TokenInterface $token A TokenInterface instance
     *
     * @return Boolean true if the implementation supports the Token, false otherwise
     */",
 "/**
 * AuthenticationProviderInterface is the interface for for all authentication
 * providers.
 *
 * Concrete implementations processes specific Token instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @return ConstraintViolationList
     */",
 "/**
     * Initialize validation on the given object using the given metadata
     * instance and validation group.
     *
     * @param ClassMetadata $metadata
     * @param object        $object       The object to validate
     * @param string        $group        The validator group to use for validation
     * @param string        $propertyPath
     */",
 "/**
 * Responsible for walking over and initializing validation on different
 * types of items.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Convenience method to push the helper sets of a given entity manager into the application.
     *
     * @param Application $application
     * @param string      $emName
     */",
 "/**
 * Provides some helper and convenience methods to configure doctrine commands in the context of bundles
 * and multiple connections/entity managers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Forwards to the given controller with the given path.
     *
     * @param string $path       The path
     * @param string $controller The controller name
     *
     * @return Response A Response instance
     */",
 "/**
 * InternalController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * DebugLogger.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
 * Finishes configuration of the Sprockets filter.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * A SQL logger that logs to the standard output using echo/var_dump.
 * 
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * The constructor.
     *
     * @param NodeInterface $selector The XPath Selector
     * @param string $className The class name
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * ClassNode represents a \"selector.className\" node.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param Reader $reader
     * @param Cache $cache
     */",
 "/**
 * A cache aware annotation reader.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Normalizes the object into an array of scalars|arrays.
     *
     * It is important to understand that the normalize() call should normalize
     * recursively all child objects of the implementor.
     *
     * @param SerializerInterface $serializer The serializer is given so that you
     *   can use it to normalize objects contained within this object.
     * @param string|null $format The format is optionally given to be able to normalize differently
     *   based on different output formats.
     * @return array|scalar
     */",
 "/**
     * Denormalizes the object back from an array of scalars|arrays.
     *
     * It is important to understand that the normalize() call should denormalize
     * recursively all child objects of the implementor.
     *
     * @param SerializerInterface $serializer The serializer is given so that you
     *   can use it to denormalize objects contained within this object.
     * @param array|scalar $data The data from which to re-create the object.
     * @param string|null $format The format is optionally given to be able to denormalize differently
     *   based on different input formats.
     */",
 "/**
 * Defines the most basic interface a class must implement to be normalizable
 *
 * If a normalizer is registered for the class and it doesn\'t implement
 * the Normalizable interfaces, the normalizer will be used instead
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
*Getadoctrinedbalconnectionbysymfonyname.
*
*@paramstring$name
*@returnDoctrine\DBAL\Connection
*/",
 "/**
*BaseclassforDoctrineconsolecommandstoextendfrom.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * Constructor.
     *
     * @param Twig_Environment $env A Twig_Environment instance
     */",
 "/**
     * Converts a token stream to a node tree.
     *
     * @param  Twig_TokenStream $stream A token stream instance
     *
     * @return Twig_Node_Module A node tree
     */",
 "/**
     * Gets the expression parser.
     *
     * @return Twig_ExpressionParser The expression parser
     */",
 "/**
     * Gets the token stream.
     *
     * @return Twig_TokenStream The token stream
     */",
 "/**
     * Gets the current token.
     *
     * @return Twig_Token The current token
     */",
 "/**
 * Default parser implementation.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param \Iterator $iterator The Iterator to filter
     * @param array     $filters  An array of PHP callbacks
     */",
 "/**
     * Filters the iterator values.
     *
     * @return Boolean true if the value should be kept, false otherwise
     */",
 "/**
 * CustomFilterIterator filters files by applying anonymous functions.
 *
 * The anonymous function receives a \SplFileInfo and must return false
 * to remove files.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * SessionListenerTest.
 *
 * Tests SessionListener.
 *
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param string|array $baseUrls Base asset URLs
     * @param string       $version  The package version
     * @param string       $format   The format used to apply the version
     */",
 "/**
     * Returns the base URL for a path.
     *
     * @return string The base URL
     */",
 "/**
 * The URL packages adds a version and a base URL to asset URLs.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Checks that all references are pointing to a valid service.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * @dataProvider getJavascriptInputs
     */",
 "/**
 * CSS YUI compressor filter.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * @see Command
     */",
 "/**
*@seeCommand
*/",
 "/**
     * Tries to generate forms if they don\'t exist yet and if we need write operations on entities.
     */",
 "/**
*GeneratesaCRUDforaDoctrineentity.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Parser and formatter for 12 hour format (1-12)
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
   * Add a new StreamFilter, referenced by $key.
   * @param Swift_StreamFilter $filter
   * @param string $key
   */",
 "/**
   * Remove an existing filter using $key.
   * @param string $key
   */",
 "/**
 * Allows StreamFilters to operate on a stream.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * @see StepInterface
     */",
 "/**
     * @see StepInterface
     */",
 "/**
     * checkOptionalSettings
     */",
 "/**
     * @see StepInterface
     */",
 "/**
     * @see StepInterface
     */",
 "/**
 * Secret Step.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * AccountStatusException is the base class for authentication exceptions
 * caused by the user account status.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Dumps the service container as an XML string.
     *
     * @param  array  $options An array of options
     *
     * @return string An xml string representing of the service container
     *
     * @api
     */",
 "/**
     * Adds parameters.
     *
     * @param DOMElement $parent
     *
     * @return void
     */",
 "/**
     * Adds method calls.
     *
     * @param array $methodcalls
     * @param DOMElement $parent
     *
     * @return void
     */",
 "/**
     * Adds a service.
     *
     * @param Definition $definition
     * @param string $id
     * @param DOMElement $parent
     *
     * @return void
     */",
 "/**
     * Adds a service alias.
     *
     * @param string $alias
     * @param string $id
     * @param DOMElement $parent
     *
     * @return void
     */",
 "/**
     * Adds services.
     *
     * @param DOMElement $parent
     *
     * @return void
     */",
 "/**
     * Converts parameters.
     *
     * @param array      $parameters
     * @param string     $type
     * @param DOMElement $parent
     * @param string     $keyAttribute
     *
     * @return void
     */",
 "/**
     * Escapes arguments
     *
     * @param array $arguments
     *
     * @return array
     */",
 "/**
     * Converts php types to xml types.
     *
     * @param mixed $value Value to convert
     *
     * @throws \RuntimeException When trying to dump object or resource
     */",
 "/**
 * XmlDumper dumps a service container as an XML string.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Martin Haso?? <martin.hason@gmail.com>
 *
 * @api
 */",
 "/**
     * Encodes the raw password.
     *
     * @param string $raw  The password to encode
     * @param string $salt The salt
     *
     * @return string The encoded password
     */",
 "/**
     * Checks a raw password against an encoded password.
     *
     * @param string $encoded An encoded password
     * @param string $raw     A raw password
     * @param string $salt    The salt
     *
     * @return Boolean true if the password is valid, false otherwise
     */",
 "/**
 * PasswordEncoderInterface is the interface for all encoders.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * The PDO implementation of the Statement interface.
 * Used by all PDO-based drivers.
 *
 * @since 2.0
 */",
 "/**
 * Checks if a variable is defined in the current context.
 *
 * <pre>
 * {# defined works with variable names and variable attributes #}
 * {% if foo is defined %}
 *     {# ... #}
 * {% endif %}
 * </pre>
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Sets a template parameter.
     *
     * @param string $name   The parameter name
     * @param string $value  The parameter value
     *
     * @return TemplateReferenceInterface The TemplateReferenceInterface instance
     *
     * @throws  \InvalidArgumentException if the parameter is not defined
     *
     * @api
     */",
 "/**
     * Gets a template parameter.
     *
     * @param string $name The parameter name
     *
     * @return string The parameter value
     *
     * @throws  \InvalidArgumentException if the parameter is not defined
     *
     * @api
     */",
 "/**
     * Gets the template parameters.
     *
     * @return array An array of parameters
     *
     * @api
     */",
 "/**
     * Returns the path to the template.
     *
     * By default, it just returns the template name.
     *
     * @return string A path to the template or a resource
     *
     * @api
     */",
 "/**
     * Returns the \"logical\" template name.
     *
     * The template name acts as a unique identifier for the template.
     *
     * @return string The template name
     *
     * @api
     */",
 "/**
 * Internal representation of a template.
 *
 * @author Victor Berchet <victor@suumit.com>
 *
 * @api
 */",
 "/**
 * Bundle.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
   * Create a new Pop3Exception with $message.
   * 
   * @param string $message
   */",
 "/**
 * Pop3Exception thrown when an error occurs connecting to a POP3 host.
 * 
 * @package Swift
 * @subpackage Transport
 * 
 * @author Chris Corbyn
 */",
 "/**
 * ORM Proxy Exception
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * The validator must be defined as a service with this name.
     *
     * @return string
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Constraint for the Unique Entity validator
 *
 * @Annotation
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Redirects the user to another URL.
     *
     * @param string  $path   The path info to redirect to.
     * @param string  $route  The route that matched
     * @param string  $scheme The URL scheme (null to keep the current one)
     *
     * @return array An array of parameters
     *
     * @api
     */",
 "/**
 * RedirectableUrlMatcherInterface knows how to redirect the user.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns the container.
     *
     * @return ContainerInterface
     */",
 "/**
     * Returns the kernel.
     *
     * @return HttpKernelInterface
     */",
 "/**
     * Gets the profile associated with the current Response.
     *
     * @return HttpProfile A Profile instance
     */",
 "/**
     * Makes a request.
     *
     * @param Request $request A Request instance
     *
     * @return Response A Response instance
     */",
 "/**
     * Returns the script to execute when the request must be insulated.
     *
     * @param Request $request A Request instance
     *
     * @return string The script content
     */",
 "/**
 * Client simulates a browser and makes requests to a Kernel object.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string  $commandline The command line to run
     * @param string  $cwd         The working directory
     * @param array   $env         The environment variables
     * @param string  $stdin       The STDIN content
     * @param integer $timeout     The timeout in seconds
     * @param array   $options     An array of options for proc_open
     *
     * @throws \RuntimeException When proc_open is not installed
     *
     * @api
     */",
 "/**
     * Runs the process.
     *
     * The callback receives the type of output (out or err) and
     * some bytes from the output in real-time. It allows to have feedback
     * from the independent process during execution.
     *
     * The STDOUT and STDERR are also available after the process is finished
     * via the getOutput() and getErrorOutput() methods.
     *
     * @param Closure|string|array $callback A PHP callback to run whenever there is some
     *                                       output available on STDOUT or STDERR
     *
     * @return integer The exit status code
     *
     * @throws \RuntimeException When process can\'t be launch or is stopped
     *
     * @api
     */",
 "/**
     * Returns the output of the process (STDOUT).
     *
     * This only returns the output if you have not supplied a callback
     * to the run() method.
     *
     * @return string The process output
     *
     * @api
     */",
 "/**
     * Returns the error output of the process (STDERR).
     *
     * This only returns the error output if you have not supplied a callback
     * to the run() method.
     *
     * @return string The process error output
     *
     * @api
     */",
 "/**
     * Returns the exit code returned by the process.
     *
     * @return integer The exit status code
     *
     * @api
     */",
 "/**
     * Checks if the process ended successfully.
     *
     * @return Boolean true if the process ended successfully, false otherwise
     *
     * @api
     */",
 "/**
     * Returns true if the child process has been terminated by an uncaught signal.
     *
     * It always returns false on Windows.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Returns the number of the signal that caused the child process to terminate its execution.
     *
     * It is only meaningful if hasBeenSignaled() returns true.
     *
     * @return integer
     *
     * @api
     */",
 "/**
     * Returns true if the child process has been stopped by a signal.
     *
     * It always returns false on Windows.
     *
     * @return Boolean
     *
     * @api
     */",
 "/**
     * Returns the number of the signal that caused the child process to stop its execution
     *
     * It is only meaningful if hasBeenStopped() returns true.
     *
     * @return integer
     *
     * @api
     */",
 "/**
 * Process is a thin wrapper around proc_* functions to ease
 * start independent PHP processes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * BadCredentialsException is thrown when the user credentials are invalid.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns a loader able to load the resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return LoaderInterface A LoaderInterface instance
     */",
 "/**
 * LoaderResolverInterface selects a loader for a given resource.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Initializes a new instance of a class derived from <tt>AbstractQuery</tt>.
     *
     * @param \Doctrine\ORM\EntityManager $entityManager
     */",
 "/**
     * Retrieves the associated EntityManager of this Query instance.
     *
     * @return \Doctrine\ORM\EntityManager
     */",
 "/**
     * Frees the resources used by the query object.
     *
     * Resets Parameters, Parameter Types and Query Hints.
     *
     * @return void
     */",
 "/**
     * Get all defined parameters.
     *
     * @return array The defined query parameters.
     */",
 "/**
     * Get all defined parameter types.
     *
     * @return array The defined query parameter types.
     */",
 "/**
     * Gets a query parameter.
     *
     * @param mixed $key The key (index or name) of the bound parameter.
     * @return mixed The value of the bound parameter.
     */",
 "/**
     * Gets a query parameter type.
     *
     * @param mixed $key The key (index or name) of the bound parameter.
     * @return mixed The parameter type of the bound parameter.
     */",
 "/**
     * Gets the SQL query that corresponds to this query object.
     * The returned SQL syntax depends on the connection driver that is used
     * by this query object at the time of this method call.
     *
     * @return string SQL query
     */",
 "/**
     * Sets a query parameter.
     *
     * @param string|integer $key The parameter position or name.
     * @param mixed $value The parameter value.
     * @param string $type The parameter type. If specified, the given value will be run through
     *                     the type conversion of this type. This is usually not needed for
     *                     strings and numeric types.
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Sets a collection of query parameters.
     *
     * @param array $params
     * @param array $types
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Sets the ResultSetMapping that should be used for hydration.
     *
     * @param ResultSetMapping $rsm
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Defines a cache driver to be used for caching result sets.
     *
     * @param \Doctrine\Common\Cache\Cache $driver Cache driver
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Returns the cache driver used for caching result sets.
     *
     * @return \Doctrine\Common\Cache\Cache Cache driver
     */",
 "/**
     * Set whether or not to cache the results of this query and if so, for
     * how long and which ID to use for the cache entry.
     *
     * @param boolean $bool
     * @param integer $timeToLive
     * @param string $resultCacheId
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Defines how long the result cache will be active before expire.
     *
     * @param integer $timeToLive How long the cache entry is valid.
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Retrieves the lifetime of resultset cache.
     *
     * @return integer
     */",
 "/**
     * Defines if the result cache is active or not.
     *
     * @param boolean $expire Whether or not to force resultset cache expiration.
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Retrieves if the resultset cache is active or not.
     *
     * @return boolean
     */",
 "/**
     * Change the default fetch mode of an association for this query.
     *
     * $fetchMode can be one of ClassMetadata::FETCH_EAGER or ClassMetadata::FETCH_LAZY
     *
     * @param  string $class
     * @param  string $assocName
     * @param  int $fetchMode
     * @return AbstractQuery
     */",
 "/**
     * Defines the processing mode to be used during hydration / result set transformation.
     *
     * @param integer $hydrationMode Doctrine processing mode to be used during hydration process.
     *                               One of the Query::HYDRATE_* constants.
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Gets the hydration mode currently used by the query.
     *
     * @return integer
     */",
 "/**
     * Gets the list of results for the query.
     *
     * Alias for execute(array(), $hydrationMode = HYDRATE_OBJECT).
     *
     * @return array
     */",
 "/**
     * Gets the array of results for the query.
     *
     * Alias for execute(array(), HYDRATE_ARRAY).
     *
     * @return array
     */",
 "/**
     * Gets the scalar results for the query.
     *
     * Alias for execute(array(), HYDRATE_SCALAR).
     *
     * @return array
     */",
 "/**
     * Get exactly one result or null.
     *
     * @throws NonUniqueResultException
     * @param int $hydrationMode
     * @return mixed
     */",
 "/**
     * Gets the single result of the query.
     *
     * Enforces the presence as well as the uniqueness of the result.
     *
     * If the result is not unique, a NonUniqueResultException is thrown.
     * If there is no result, a NoResultException is thrown.
     *
     * @param integer $hydrationMode
     * @return mixed
     * @throws NonUniqueResultException If the query result is not unique.
     * @throws NoResultException If the query returned no result.
     */",
 "/**
     * Gets the single scalar result of the query.
     *
     * Alias for getSingleResult(HYDRATE_SINGLE_SCALAR).
     *
     * @return mixed
     * @throws QueryException If the query result is not unique.
     */",
 "/**
     * Sets a query hint. If the hint name is not recognized, it is silently ignored.
     *
     * @param string $name The name of the hint.
     * @param mixed $value The value of the hint.
     * @return \Doctrine\ORM\AbstractQuery
     */",
 "/**
     * Gets the value of a query hint. If the hint name is not recognized, FALSE is returned.
     *
     * @param string $name The name of the hint.
     * @return mixed The value of the hint or FALSE, if the hint name is not recognized.
     */",
 "/**
     * Return the key value map of query hints that are currently set.
     * 
     * @return array
     */",
 "/**
     * Executes the query and returns an IterableResult that can be used to incrementally
     * iterate over the result.
     *
     * @param array $params The query parameters.
     * @param integer $hydrationMode The hydration mode to use.
     * @return IterableResult
     */",
 "/**
     * Executes the query.
     *
     * @param array $params Any additional query parameters.
     * @param integer $hydrationMode Processing mode to be used during the hydration process.
     * @return mixed
     */",
 "/**
     * Set the result cache id to use to store the result set cache entry.
     * If this is not explicitely set by the developer then a hash is automatically
     * generated for you.
     *
     * @param string $id
     * @return \Doctrine\ORM\AbstractQuery This query instance.
     */",
 "/**
     * Get the result cache id to use to store the result set cache entry.
     * Will return the configured id if it exists otherwise a hash will be
     * automatically generated for you.
     *
     * @return array ($key, $hash)
     */",
 "/**
     * Executes the query and returns a the resulting Statement object.
     *
     * @return \Doctrine\DBAL\Driver\Statement The executed database statement that holds the results.
     */",
 "/**
     * Cleanup Query resource when clone is called.
     *
     * @return void
     */",
 "/**
 * Base contract for ORM queries. Base class for Query and NativeQuery.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Konsta Vesterinen <kvesteri@cc.hut.fi>
 */",
 "/**
     * Constructor.
     *
     * @param string $key The key shared with the authentication token
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * AnonymousAuthenticationProvider validates AnonymousToken instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Registers Twig_Extensions_Autoloader as an SPL autoloader.
     */",
 "/**
     * Handles autoloading of classes.
     *
     * @param  string  $class  A class name.
     *
     * @return boolean Returns true if the class has been loaded
     */",
 "/**
 * Autoloads Twig Extensions classes.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 */",
 "/**
   * Create a new FileByteStream for $path.
   * @param string $path
   * @param string $writable if true
   */",
 "/**
   * Get the complete path to the file.
   * @return string
   */",
 "/**
   * Reads $length bytes from the stream into a string and moves the pointer
   * through the stream by $length. If less bytes exist than are requested the
   * remaining bytes are given instead. If no bytes are remaining at all, boolean
   * false is returned.
   * @param int $length
   * @return string
   * @throws Swift_IoException
   */",
 "/**
   * Move the internal read pointer to $byteOffset in the stream.
   * @param int $byteOffset
   * @return boolean
   */",
 "/** Just write the bytes to the file */",
 "/** Not used */",
 "/** Get the resource for reading */",
 "/** Get the resource for writing */",
 "/** Force a reload of the resource for reading */",
 "/** Check if ReadOnly Stream is seekable */",
 "/** Streams in a readOnly stream ensuring copy if needed */",
 "/** Copy a readOnly Stream to ensure seekability */",
 "/**
 * Allows reading and writing of bytes to and from a file.
 * @package Swift
 * @subpackage ByteStream
 * @author Chris Corbyn
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Gets the Query instance used by the walker.
     *
     * @return Query.
     */",
 "/**
     * Gets the Connection used by the walker.
     *
     * @return Connection
     */",
 "/**
     * Gets the EntityManager used by the walker.
     *
     * @return EntityManager
     */",
 "/**
     * Gets the information about a single query component.
     *
     * @param string $dqlAlias The DQL alias.
     * @return array
     */",
 "/**
     * Gets an executor that can be used to execute the result of this walker.
     *
     * @return AbstractExecutor
     */",
 "/**
     * Generates a unique, short SQL table alias.
     *
     * @param string $tableName Table name
     * @param string $dqlAlias The DQL alias.
     * @return string Generated table alias.
     */",
 "/**
     * Forces the SqlWalker to use a specific alias for a table name, rather than
     * generating an alias on its own.
     *
     * @param string $tableName
     * @param string $alias
     * @param string $dqlAlias
     * @return string
     */",
 "/**
     * Gets an SQL column alias for a column name.
     *
     * @param string $columnName
     * @return string
     */",
 "/**
     * Generates the SQL JOINs that are necessary for Class Table Inheritance
     * for the given class.
     *
     * @param ClassMetadata $class The class for which to generate the joins.
     * @param string $dqlAlias The DQL alias of the class.
     * @return string The SQL.
     */",
 "/**
     * Generates a discriminator column SQL condition for the class with the given DQL alias.
     *
     * @param array $dqlAliases List of root DQL aliases to inspect for discriminator restrictions.
     * @return string
     */",
 "/**
     * Walks down a SelectStatement AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateStatement AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteStatement AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteStatement
     * @return string The SQL.
     */",
 "/**
     * Walks down an IdentificationVariable (no AST node associated), thereby generating the SQL.
     *
     * @param string $identificationVariable
     * @param string $fieldName
     * @return string The SQL.
     */",
 "/**
     * Walks down a PathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param $selectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a FromClause AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down a FunctionNode AST node, thereby generating the appropriate SQL.
     *
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByClause AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an OrderByItem AST node, thereby generating the appropriate SQL.
     *
     * @param OrderByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a HavingClause AST node, thereby generating the appropriate SQL.
     *
     * @param HavingClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a JoinVariableDeclaration AST node and creates the corresponding SQL.
     *
     * @param JoinVariableDeclaration $joinVarDecl
     * @return string The SQL.
     */",
 "/**
     * Walks down a CoalesceExpression AST node and generates the corresponding SQL.
     *
     * @param CoalesceExpression $coalesceExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullIfExpression AST node and generates the corresponding SQL.
     *
     * @param NullIfExpression $nullIfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a SelectExpression AST node and generates the corresponding SQL.
     *
     * @param SelectExpression $selectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a QuantifiedExpression AST node, thereby generating the appropriate SQL.
     *
     * @param QuantifiedExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a Subselect AST node, thereby generating the appropriate SQL.
     *
     * @param Subselect
     * @return string The SQL.
     */",
 "/**
     * Walks down a SubselectFromClause AST node, thereby generating the appropriate SQL.
     *
     * @param SubselectFromClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectClause AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a SimpleSelectExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleSelectExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an AggregateExpression AST node, thereby generating the appropriate SQL.
     *
     * @param AggregateExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByClause AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByClause
     * @return string The SQL.
     */",
 "/**
     * Walks down a GroupByItem AST node, thereby generating the appropriate SQL.
     *
     * @param GroupByItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a DeleteClause AST node, thereby generating the appropriate SQL.
     *
     * @param DeleteClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateClause AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateClause
     * @return string The SQL.
     */",
 "/**
     * Walks down an UpdateItem AST node, thereby generating the appropriate SQL.
     *
     * @param UpdateItem
     * @return string The SQL.
     */",
 "/**
     * Walks down a WhereClause AST node, thereby generating the appropriate SQL.
     *
     * @param WhereClause
     * @return string The SQL.
     */",
 "/**
     * Walk down a ConditionalExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalTerm AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalTerm
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalFactor AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalFactor
     * @return string The SQL.
     */",
 "/**
     * Walks down a ConditionalPrimary AST node, thereby generating the appropriate SQL.
     *
     * @param ConditionalPrimary
     * @return string The SQL.
     */",
 "/**
     * Walks down an ExistsExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ExistsExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a CollectionMemberExpression AST node, thereby generating the appropriate SQL.
     *
     * @param CollectionMemberExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an EmptyCollectionComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param EmptyCollectionComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a NullComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param NullComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InstanceOfExpression AST node, thereby generating the appropriate SQL.
     *
     * @param InstanceOfExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down a literal that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a BetweenExpression AST node, thereby generating the appropriate SQL.
     *
     * @param BetweenExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a LikeExpression AST node, thereby generating the appropriate SQL.
     *
     * @param LikeExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a StateFieldPathExpression AST node, thereby generating the appropriate SQL.
     *
     * @param StateFieldPathExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down a ComparisonExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ComparisonExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an InputParameter AST node, thereby generating the appropriate SQL.
     *
     * @param InputParameter
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param ArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an SimpleArithmeticExpression AST node, thereby generating the appropriate SQL.
     *
     * @param SimpleArithmeticExpression
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticTerm AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticFactor that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down an ArithmeticPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
     * Walks down a StringPrimary that represents an AST node, thereby generating the appropriate SQL.
     *
     * @param mixed
     * @return string The SQL.
     */",
 "/**
 * The SqlWalker is a TreeWalker that walks over a DQL AST and constructs
 * the corresponding SQL.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 * @todo Rename: SQLWalker
 */",
 "/**
     * Constructor.
     *
     * @param string $source     An absolute path
     * @param array  $filters    An array of filters
     * @param string $sourceRoot The source asset root directory
     * @param string $sourcePath The source asset path
     *
     * @throws InvalidArgumentException If the supplied root doesn\'t match the source when guessing the path
     */",
 "/**
 * Represents an asset loaded from a file.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * @see Command
     */",
 "/**
     * @see Command
     *
     * @throws \InvalidArgumentException When the target directory does not exist
     */",
 "/**
 * Command that places bundle web assets into a given directory.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Compiles the current route instance.
     *
     * @param Route $route A Route instance
     *
     * @return CompiledRoute A CompiledRoute instance
     */",
 "/**
 * RouteCompilerInterface is the interface that all RouteCompiler classes must implements.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new CharacterStream with the given $chars, if set.
   * @param Swift_CharacterReaderFactory $factory for loading validators
   * @param string $charset used in the stream
   */",
 "/**
   * Set the character set used in this CharacterStream.
   * @param string $charset
   */",
 "/**
   * Set the CharacterReaderFactory for multi charset support.
   * @param Swift_CharacterReaderFactory $factory
   */",
 "/**
   * Overwrite this character stream using the byte sequence in the byte stream.
   * @param Swift_OutputByteStream $os output stream to read from
   */",
 "/**
   * Import a string a bytes into this CharacterStream, overwriting any existing
   * data in the stream.
   * @param string $string
   */",
 "/**
   * Read $length characters from the stream and move the internal pointer
   * $length further into the stream.
   * @param int $length
   * @return string
   */",
 "/**
   * Read $length characters from the stream and return a 1-dimensional array
   * containing there octet values.
   * @param int $length
   * @return int[]
   */",
 "/**
   * Write $chars to the end of the stream.
   * @param string $chars
   */",
 "/**
   * Move the internal pointer to $charOffset in the stream.
   * @param int $charOffset
   */",
 "/**
   * Empty the stream and reset the internal pointer.
   */",
 "/**
 * A CharacterStream implementation which stores characters in an internal array.
 * @package Swift
 * @subpackage CharacterStream
 * @author Chris Corbyn
 */",
 "/**
*@paramarray$record
*@returnarray
*/",
 "/**
*Injectsline/file:class/functionwherethelogmessagecamefrom
*
*Warning:Thisonlyworksifthehandlerprocessesthelogsdirectly.
*IfyouputtheprocessoronahandlerthatisbehindaFingersCrossedHandler
*forexample,theprocessorwillonlybecalledoncethetriggerlevelisreached,
*andallthelogrecordswillhavethesamefile/line/..datafromthecallthat
*triggeredtheFingersCrossedHandler.
*
*@authorJordiBoggiano<j.boggiano@seld.be>
*/",
 "/**
 * Exception class thrown when an error occurs during dumping.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Interface for proxy classes.
 * 
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
 * Show information about mapped entities
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.1
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     */",
 "/**
     * Creates a new Finder.
     *
     * @return Finder A new Finder instance
     *
     * @api
     */",
 "/**
     * Restricts the matching to directories only.
     *
     * @return Finder The current Finder instance
     *
     * @api
     */",
 "/**
     * Restricts the matching to files only.
     *
     * @return Finder The current Finder instance
     *
     * @api
     */",
 "/**
     * Adds tests for the directory depth.
     *
     * Usage:
     *
     *   $finder->depth(\'> 1\') // the Finder will start matching at level 1.
     *   $finder->depth(\'< 3\') // the Finder will descend at most 3 levels of directories below the starting point.
     *
     * @param  int $level The depth level expression
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\DepthRangeFilterIterator
     * @see Symfony\Component\Finder\Comparator\NumberComparator
     *
     * @api
     */",
 "/**
     * Adds tests for file dates (last modified).
     *
     * The date must be something that strtotime() is able to parse:
     *
     *   $finder->date(\'since yesterday\');
     *   $finder->date(\'until 2 days ago\');
     *   $finder->date(\'> now - 2 hours\');
     *   $finder->date(\'>= 2005-10-15\');
     *
     * @param  string $date A date rage string
     *
     * @return Finder The current Finder instance
     *
     * @see strtotime
     * @see Symfony\Component\Finder\Iterator\DateRangeFilterIterator
     * @see Symfony\Component\Finder\Comparator\DateComparator
     *
     * @api
     */",
 "/**
     * Adds rules that files must match.
     *
     * You can use patterns (delimited with / sign), globs or simple strings.
     *
     * $finder->name(\'*.php\')
     * $finder->name(\'/\.php$/\') // same as above
     * $finder->name(\'test.php\')
     *
     * @param  string $pattern A pattern (a regexp, a glob, or a string)
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\FilenameFilterIterator
     *
     * @api
     */",
 "/**
     * Adds rules that files must not match.
     *
     * @param  string $pattern A pattern (a regexp, a glob, or a string)
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\FilenameFilterIterator
     *
     * @api
     */",
 "/**
     * Adds tests for file sizes.
     *
     * $finder->size(\'> 10K\');
     * $finder->size(\'<= 1Ki\');
     * $finder->size(4);
     *
     * @param string $size A size range string
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\SizeRangeFilterIterator
     * @see Symfony\Component\Finder\Comparator\NumberComparator
     *
     * @api
     */",
 "/**
     * Excludes directories.
     *
     * @param  string $dir A directory to exclude
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\ExcludeDirectoryFilterIterator
     *
     * @api
     */",
 "/**
     * Excludes \"hidden\" directories and files (starting with a dot).
     *
     * @param Boolean $ignoreDotFiles Whether to exclude \"hidden\" files or not
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\ExcludeDirectoryFilterIterator
     *
     * @api
     */",
 "/**
     * Forces the finder to ignore version control directories.
     *
     * @param Boolean $ignoreVCS Whether to exclude VCS files or not
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\ExcludeDirectoryFilterIterator
     *
     * @api
     */",
 "/**
     * Sorts files and directories by an anonymous function.
     *
     * The anonymous function receives two \SplFileInfo instances to compare.
     *
     * This can be slow as all the matching files and directories must be retrieved for comparison.
     *
     * @param  Closure $closure An anonymous function
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\SortableIterator
     *
     * @api
     */",
 "/**
     * Sorts files and directories by name.
     *
     * This can be slow as all the matching files and directories must be retrieved for comparison.
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\SortableIterator
     *
     * @api
     */",
 "/**
     * Sorts files and directories by type (directories before files), then by name.
     *
     * This can be slow as all the matching files and directories must be retrieved for comparison.
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\SortableIterator
     *
     * @api
     */",
 "/**
     * Filters the iterator with an anonymous function.
     *
     * The anonymous function receives a \SplFileInfo and must return false
     * to remove files.
     *
     * @param  Closure $closure An anonymous function
     *
     * @return Finder The current Finder instance
     *
     * @see Symfony\Component\Finder\Iterator\CustomFilterIterator
     *
     * @api
     */",
 "/**
     * Forces the following of symlinks.
     *
     * @return Finder The current Finder instance
     *
     * @api
     */",
 "/**
     * Searches files and directories which match defined rules.
     *
     * @param  string|array $dirs A directory path or an array of directories
     *
     * @return Finder The current Finder instance
     *
     * @throws \InvalidArgumentException if one of the directory does not exist
     *
     * @api
     */",
 "/**
     * Returns an Iterator for the current Finder configuration.
     *
     * This method implements the IteratorAggregate interface.
     *
     * @return \Iterator An iterator
     *
     * @throws \LogicException if the in() method has not been called
     */",
 "/**
     * Appends an existing set of files/directories to the finder.
     *
     * The set can be another Finder, an Iterator, an IteratorAggregate, or even a plain array.
     *
     * @param mixed $iterator
     */",
 "/**
 * Finder allows to build rules to find files and directories.
 *
 * It is a thin wrapper around several specialized iterator classes.
 *
 * All rules may be invoked several times.
 *
 * All methods return the current Finder object to allow easy chaining:
 *
 * $finder = Finder::create()->files()->name(\'*.php\')->in(__DIR__);
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param ParamConverterManager $manager A ParamConverterManager instance
     */",
 "/**
     * Modifies the ParamConverterManager instance.
     *
     * @param FilterControllerEvent $event A FilterControllerEvent instance
     */",
 "/**
 * The ParamConverterListener handles the @ParamConverter annotation.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Is thrown when a transaction is required for the current operation, but there is none open.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Description of AggregateExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * @group integration
 */",
 "/**
     * Constructor.
     *
     * For performance reasons, the constructor assumes that
     * all keys are already lowercased.
     *
     * This is always the case when used internally.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
 * Holds read-only parameters.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Creates a new Rfc2231Encoder using the given character stream instance.
   * @param Swift_CharacterStream
   */",
 "/**
   * Takes an unencoded string and produces a string encoded according to
   * RFC 2231 from it.
   * @param string $string to encode
   * @param int $firstLineOffset
   * @param int $maxLineLength, optional, 0 indicates the default of 75 bytes
   * @return string
   */",
 "/**
   * Updates the charset used.
   * @param string $charset
   */",
 "/**
 * Handles RFC 2231 specified Encoding in Swift Mailer.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to create the database schema for a set of classes based on their mappings.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Converts a single ClassMetadata instance to the exported format
     * and returns it
     *
     * TODO: Should this code be pulled out in to a toArray() method in ClassMetadata
     *
     * @param ClassMetadataInfo $metadata
     * @return mixed $exported
     */",
 "/**
 * ClassMetadata exporter for Doctrine YAML mapping files
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Jonathan Wage <jonwage@gmail.com>
 */",
 "/**
     * @dataProvider getDebugAndCount
     */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * Validates whether a value is a valid locale code
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns the array of HTTP methods.
     *
     * @return array
     */",
 "/**
     * Sets the HTTP methods.
     *
     * @param array|string $methods An HTTP method or an array of HTTP methods
     */",
 "/**
     * Sets the HTTP methods.
     *
     * @param array|string $methods An HTTP method or an array of HTTP methods
     */",
 "/**
     * Returns the annotation alias name.
     *
     * @return string
     * @see ConfigurationInterface
     */",
 "/**
 * The Method class handles the @Method annotation parts.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @Annotation
 */",
 "/**
     * Constructor.
     *
     * @param Twig_LoaderInterface[] $loaders An array of loader instances
     */",
 "/**
     * Adds a loader instance.
     *
     * @param Twig_LoaderInterface $loader A Loader instance
     */",
 "/**
     * Gets the source code of a template, given its name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The template source code
     */",
 "/**
     * Gets the cache key to use for the cache for a given template name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The cache key
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param string    $name The template name
     * @param timestamp $time The last modification time of the cached template
     */",
 "/**
 * Loads templates from other loaders.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Adds a parameter restriction
     *
     * @param integer $index 0-based
     * @param array $permissions
     */",
 "/**
     * This allows to merge in metadata from an interface
     *
     * @param MethodMetadata $method
     * @return void
     */",
 "/**
 * Contains method metadata information
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Sets the Container.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */",
 "/**
 * ContainerAwareInterface should be implemented by classes that depends on a Container.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * UnsupportedException
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param Twig_Environment $env The twig environment instance
     */",
 "/**
     * Returns the environment instance related to this compiler.
     *
     * @return Twig_Environment The environment instance
     */",
 "/**
     * Gets the current PHP code after compilation.
     *
     * @return string The PHP code
     */",
 "/**
     * Compiles a node.
     *
     * @param Twig_NodeInterface $node        The node to compile
     * @param integer            $indentation The current indentation
     *
     * @return Twig_Compiler The current compiler instance
     */",
 "/**
     * Adds a raw string to the compiled code.
     *
     * @param  string $string The string
     *
     * @return Twig_Compiler The current compiler instance
     */",
 "/**
     * Writes a string to the compiled code by adding indentation.
     *
     * @return Twig_Compiler The current compiler instance
     */",
 "/**
*Addsaquotedstringtothecompiledcode.
*
*@paramstring$valueThestring
*
*@returnTwig_CompilerThecurrentcompilerinstance
*/",
 "/**
*ReturnsaPHPrepresentationofagivenvalue.
*
*@parammixed$valueThevaluetoconvert
*
*@returnTwig_CompilerThecurrentcompilerinstance
*/",
 "/**
*Addsdebugginginformation.
*
*@paramTwig_NodeInterface$nodeTherelatedtwignode
*
*@returnTwig_CompilerThecurrentcompilerinstance
*/",
 "/**
*Indentsthegeneratedcode.
*
*@paraminteger$stepThenumberofindentationtoadd
*
*@returnTwig_CompilerThecurrentcompilerinstance
*/",
 "/**
*Outdentsthegeneratedcode.
*
*@paraminteger$stepThenumberofindentationtoremove
*
*@returnTwig_CompilerThecurrentcompilerinstance
*/",
 "/**
*CompilesanodetoPHPcode.
*
*@packagetwig
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
 * Filter for the Google Closure Compiler JAR.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Sets the default format to be used by the date filter.
     *
     * @param string $format             The default date format string
     * @param string $dateIntervalFormat The default date interval format string
     */",
 "/**
     * Gets the default format to be used by the date filter.
     *
     * @return array The default date format string and the default date interval format string
     */",
 "/**
     * Sets the default timezone to be used by the date filter.
     *
     * @param DateTimeZone|string $timezone  The default timezone string or a DateTimeZone object
     */",
 "/**
     * Gets the default timezone to be used by the date filter.
     *
     * @return DateTimeZone The default timezone currently in use
     */",
 "/**
     * Sets the default format to be used by the number_format filter.
     *
     * @param integer $decimal The number of decimal places to use.
     * @param string $decimalPoint The character(s) to use for the decimal point.
     * @param string $thousandSep The character(s) to use for the thousands separator.
     */",
 "/**
     * Get the default format used by the number_format filter.
     *
     * @return array The arguments for number_format()
     */",
 "/**
     * Returns the token parser instance to add to the existing list.
     *
     * @return array An array of Twig_TokenParser instances
     */",
 "/**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */",
 "/**
     * Returns a list of global functions to add to the existing list.
     *
     * @return array An array of global functions
     */",
 "/**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */",
 "/**
     * Returns a list of operators to add to the existing list.
     *
     * @return array An array of operators
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * Cycles over a value.
 *
 * @param ArrayAccess|array $values An array or an ArrayAccess instance
 * @param integer           $i      The cycle value
 *
 * @return string The next value in the cycle
 */",
 "/**
 * Returns a random value depending on the supplied parameter type:
 * - a random item from a Traversable or array
 * - a random character from a string
 * - a random integer between 0 and the integer parameter
 *
 * @param Twig_Environment             $env    A Twig_Environment instance
 * @param Traversable|array|int|string $values The values to pick a random item from
 *
 * @return mixed A random value from the given sequence
 */",
 "/**
 * Converts a date to the given format.
 *
 * <pre>
 *   {{ post.published_at|date(\"m/d/Y\") }}
 * </pre>
 *
 * @param Twig_Environment             $env      A Twig_Environment instance
 * @param DateTime|DateInterval|string $date     A date
 * @param string                       $format   A format
 * @param DateTimeZone|string          $timezone A timezone
 *
 * @return string The formatter date
 */",
 "/**
 * Converts an input to a DateTime instance.
 *
 * <pre>
 *    {% if date(user.created_at) < date(\'+2days\') %}
 *      {# do something #}
 *    {% endif %}
 * </pre>
 *
 * @param Twig_Environment    $env      A Twig_Environment instance
 * @param DateTime|string     $date     A date
 * @param DateTimeZone|string $timezone A timezone
 *
 * @return DateTime A DateTime instance
 */",
 "/**
 * Number format filter.
 *
 * All of the formatting options can be left null, in that case the defaults will
 * be used.  Supplying any of the parameters will override the defaults set in the
 * environment object.
 *
 * @param Twig_Environment    $env          A Twig_Environment instance
 * @param mixed               $number       A float/int/string of the number to format
 * @param int                 $decimal      The number of decimal points to display.
 * @param string              $decimalPoint The character(s) to use for the decimal point.
 * @param string              $thousandSep  The character(s) to use for the thousands separator.
 *
 * @return string The formatted number
 */",
 "/**
 * URL encodes a string.
 *
 * @param string $url A URL
 * @param bool   $raw true to use rawurlencode() instead of urlencode
 *
 * @return string The URL encoded value
 */",
 "/**
     * JSON encodes a variable.
     *
     * @param mixed   $value   The value to encode.
     * @param integer $options Not used on PHP 5.2.x
     *
     * @return mixed The JSON encoded value
     */",
 "/**
     * JSON encodes a variable.
     *
     * @param mixed   $value   The value to encode.
     * @param integer $options Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT
     *
     * @return mixed The JSON encoded value
     */",
 "/**
 * Merges an array with another one.
 *
 * <pre>
 *  {% set items = { \'apple\': \'fruit\', \'orange\': \'fruit\' } %}
 *
 *  {% set items = items|merge({ \'peugeot\': \'car\' }) %}
 *
 *  {# items now contains { \'apple\': \'fruit\', \'orange\': \'fruit\', \'peugeot\': \'car\' } #}
 * </pre>
 *
 * @param array $arr1 An array
 * @param array $arr2 An array
 *
 * @return array The merged array
 */",
 "/**
 * Slices a variable.
 *
 * @param Twig_Environment $env          A Twig_Environment instance
 * @param mixed            $item         A variable
 * @param integer          $start        Start of the slice
 * @param integer          $length       Size of the slice
 * @param Boolean          $preserveKeys Whether to preserve key or not (when the input is an array)
 *
 * @return mixed The sliced variable
 */",
 "/**
 * Joins the values to a string.
 *
 * The separator between elements is an empty string per default, you can define it with the optional parameter.
 *
 * <pre>
 *  {{ [1, 2, 3]|join(\'|\') }}
 *  {# returns 1|2|3 #}
 *
 *  {{ [1, 2, 3]|join }}
 *  {# returns 123 #}
 * </pre>
 *
 * @param array  $value An array
 * @param string $glue  The separator
 *
 * @return string The concatenated string
 */",
 "/**
 * Returns the keys for the given array.
 *
 * It is useful when you want to iterate over the keys of an array:
 *
 * <pre>
 *  {% for key in array|keys %}
 *      {# ... #}
 *  {% endfor %}
 * </pre>
 *
 * @param array $array An array
 *
 * @return array The keys
 */",
 "/**
 * Reverses a variable.
 *
 * @param Twig_Environment         $env          A Twig_Environment instance
 * @param array|Traversable|string $item         An array, a Traversable instance, or a string
 * @param Boolean                  $preserveKeys Whether to preserve key or not
 *
 * @return mixed The reversed input
 */",
 "/**
 * Sorts an array.
 *
 * @param array $array An array
 */",
 "/**
 * Escapes a string.
 *
 * @param Twig_Environment $env        A Twig_Environment instance
 * @param string           $string     The value to be escaped
 * @param string           $type       The escaping strategy
 * @param string           $charset    The charset
 * @param Boolean          $autoescape Whether the function is called by the auto-escaping feature (true) or by the developer (false)
 */",
 "/**
     * Returns the length of a variable.
     *
     * @param Twig_Environment $env   A Twig_Environment instance
     * @param mixed            $thing A variable
     *
     * @return integer The length of the value
     */",
 "/**
     * Converts a string to uppercase.
     *
     * @param Twig_Environment $env    A Twig_Environment instance
     * @param string           $string A string
     *
     * @return string The uppercased string
     */",
 "/**
     * Converts a string to lowercase.
     *
     * @param Twig_Environment $env    A Twig_Environment instance
     * @param string           $string A string
     *
     * @return string The lowercased string
     */",
 "/**
     * Returns a titlecased string.
     *
     * @param Twig_Environment $env    A Twig_Environment instance
     * @param string           $string A string
     *
     * @return string The titlecased string
     */",
 "/**
     * Returns a capitalized string.
     *
     * @param Twig_Environment $env    A Twig_Environment instance
     * @param string           $string A string
     *
     * @return string The capitalized string
     */",
 "/**
     * Returns the length of a variable.
     *
     * @param Twig_Environment $env   A Twig_Environment instance
     * @param mixed            $thing A variable
     *
     * @return integer The length of the value
     */",
 "/**
     * Returns a titlecased string.
     *
     * @param Twig_Environment $env    A Twig_Environment instance
     * @param string           $string A string
     *
     * @return string The titlecased string
     */",
 "/**
     * Returns a capitalized string.
     *
     * @param Twig_Environment $env    A Twig_Environment instance
     * @param string           $string A string
     *
     * @return string The capitalized string
     */",
 "/**
 * Checks if a variable is empty.
 *
 * <pre>
 * {# evaluates to true if the foo variable is null, false, or the empty string #}
 * {% if foo is empty %}
 *     {# ... #}
 * {% endif %}
 * </pre>
 *
 * @param mixed $value A variable
 *
 * @return Boolean true if the value is empty, false otherwise
 */",
 "/**
     * Clears the current graph.
     *
     * @return void
     */",
 "/**
     * Gets a valid commit order for all current nodes.
     * 
     * Uses a depth-first search (DFS) to traverse the graph.
     * The desired topological sorting is the reverse postorder of these searches.
     *
     * @return array The list of ordered classes.
     */",
 "/**
 * The CommitOrderCalculator is used by the UnitOfWork to sort out the
 * correct order in which changes to entities need to be persisted.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org> 
 */",
 "/**
     * @param EntityManager $$em
     */",
 "/**
     * Sets the cache driver used by the factory to cache ClassMetadata instances.
     *
     * @param \Doctrine\Common\Cache\Cache $cacheDriver
     */",
 "/**
     * Gets the cache driver used by the factory to cache ClassMetadata instances.
     *
     * @return \Doctrine\Common\Cache\Cache
     */",
 "/**
     * Forces the factory to load the metadata of all classes known to the underlying
     * mapping driver.
     *
     * @return array The ClassMetadata instances of all mapped classes.
     */",
 "/**
     * Lazy initialization of this stuff, especially the metadata driver,
     * since these are not needed at all when a metadata cache is active.
     */",
 "/**
*Getstheclassmetadatadescriptorforaclass.
*
*@paramstring$classNameThenameoftheclass.
*@return\Doctrine\ORM\Mapping\ClassMetadata
*/",
 "/**
*Checkswhetherthefactoryhasthemetadataforaclassloadedalready.
*
*@paramstring$className
*@returnbooleanTRUEifthemetadataoftheclassinquestionisalreadyloaded,FALSEotherwise.
*/",
 "/**
*Setsthemetadatadescriptorforaspecificclass.
*
*NOTE:Thisisonlyusefulinveryspecialcases,likewhengeneratingproxyclasses.
*
*@paramstring$className
*@paramClassMetadata$class
*/",
 "/**
*Getarrayofparentclassesforthegivenentityclass
*
*@paramstring$name
*@returnarray$parentClasses
*/",
 "/**
*Loadsthemetadataoftheclassinquestionandallit\'sancestorswhosemetadata
*isstillnotloaded.
*
*@paramstring$nameThenameoftheclassforwhichthemetadatashouldgetloaded.
*@paramarray$tablesThemetadatacollectiontowhichtheloadedmetadataisadded.
*/",
 "/**
*Validateruntimemetadataiscorrectlydefined.
*
*@paramClassMetadata$class
*@paramClassMetadata$parent
*/",
 "/**
*CreatesanewClassMetadatainstanceforthegivenclassname.
*
*@paramstring$className
*@return\Doctrine\ORM\Mapping\ClassMetadata
*/",
 "/**
*Addsinheritedfieldstothesubclassmapping.
*
*@param\Doctrine\ORM\Mapping\ClassMetadata$subClass
*@param\Doctrine\ORM\Mapping\ClassMetadata$parentClass
*/",
 "/**
*Addsinheritedassociationmappingstothesubclassmapping.
*
*@param\Doctrine\ORM\Mapping\ClassMetadata$subClass
*@param\Doctrine\ORM\Mapping\ClassMetadata$parentClass
*/",
 "/**
*CompletestheIDgeneratormapping.If\"auto\" is specified we choose the generator
     * most appropriate for the targeted database platform.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
*{@inheritDoc}
*/",
 "/**
*TheClassMetadataFactoryisusedtocreateClassMetadataobjectsthatcontainallthe
*metadatamappinginformationsofaclasswhichdescribeshowaclassshouldbemapped
*toarelationaldatabase.
*
*@since2.0
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * Constructor.
     *
     * @param Application $application An Application instance to test.
     */",
 "/**
     * Executes the application.
     *
     * Available options:
     *
     *  * interactive: Sets the input interactive flag
     *  * decorated:   Sets the output decorated flag
     *  * verbosity:   Sets the output verbosity flag
     *
     * @param array $input   An array of arguments and options
     * @param array $options An array of options
     *
     * @return integer The command exit code
     */",
 "/**
     * Gets the display returned by the last execution of the application.
     *
     * @return string The display
     */",
 "/**
     * Gets the input instance used by the last execution of the application.
     *
     * @return InputInterface The current input instance
     */",
 "/**
     * Gets the output instance used by the last execution of the application.
     *
     * @return OutputInterface The current output instance
     */",
 "/**
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param mixed  $node A Node to use as the base for the crawling
     * @param string $uri  The current URI or the base href value
     *
     * @api
     */",
 "/**
     * Removes all the nodes.
     *
     * @api
     */",
 "/**
     * Adds a node to the current list of nodes.
     *
     * This method uses the appropriate specialized add*() method based
     * on the type of the argument.
     *
     * @param null|\DOMNodeList|array|\DOMNode $node A node
     *
     * @api
     */",
 "/**
     * Adds HTML/XML content.
     *
     * @param string $content A string to parse as HTML/XML
     * @param string $type    The content type of the string
     */",
 "/**
     * Adds an HTML content to the list of nodes.
     *
     * @param string $content The HTML content
     * @param string $charset The charset
     *
     * @api
     */",
 "/**
     * Adds an XML content to the list of nodes.
     *
     * @param string $content The XML content
     * @param string $charset The charset
     *
     * @api
     */",
 "/**
     * Adds a \DOMDocument to the list of nodes.
     *
     * @param \DOMDocument $dom A \DOMDocument instance
     *
     * @api
     */",
 "/**
     * Adds a \DOMNodeList to the list of nodes.
     *
     * @param \DOMNodeList $nodes A \DOMNodeList instance
     *
     * @api
     */",
 "/**
     * Adds an array of \DOMNode instances to the list of nodes.
     *
     * @param array $nodes An array of \DOMNode instances
     *
     * @api
     */",
 "/**
     * Adds a \DOMNode instance to the list of nodes.
     *
     * @param \DOMNode $node A \DOMNode instance
     *
     * @api
     */",
 "/**
     * Returns a node given its position in the node list.
     *
     * @param integer $position The position
     *
     * @return A new instance of the Crawler with the selected node, or an empty Crawler if it does not exist.
     *
     * @api
     */",
 "/**
     * Calls an anonymous function on each node of the list.
     *
     * The anonymous function receives the position and the node as arguments.
     *
     * Example:
     *
     *     $crawler->filter(\'h1\')->each(function ($node, $i)
     *     {
     *       return $node->nodeValue;
     *     });
     *
     * @param \Closure $closure An anonymous function
     *
     * @return array An array of values returned by the anonymous function
     *
     * @api
     */",
 "/**
     * Reduces the list of nodes by calling an anonymous function.
     *
     * To remove a node from the list, the anonymous function must return false.
     *
     * @param \Closure $closure An anonymous function
     *
     * @return Crawler A Crawler instance with the selected nodes.
     *
     * @api
     */",
 "/**
     * Returns the first node of the current selection
     *
     * @return Crawler A Crawler instance with the first selected node
     *
     * @api
     */",
 "/**
     * Returns the last node of the current selection
     *
     * @return Crawler A Crawler instance with the last selected node
     *
     * @api
     */",
 "/**
     * Returns the siblings nodes of the current selection
     *
     * @return Crawler A Crawler instance with the sibling nodes
     *
     * @throws \InvalidArgumentException When current node is empty
     *
     * @api
     */",
 "/**
     * Returns the next siblings nodes of the current selection
     *
     * @return Crawler A Crawler instance with the next sibling nodes
     *
     * @throws \InvalidArgumentException When current node is empty
     *
     * @api
     */",
 "/**
     * Returns the previous sibling nodes of the current selection
     *
     * @return Crawler A Crawler instance with the previous sibling nodes
     *
     * @api
     */",
 "/**
     * Returns the parents nodes of the current selection
     *
     * @return Crawler A Crawler instance with the parents nodes of the current selection
     *
     * @throws \InvalidArgumentException When current node is empty
     *
     * @api
     */",
 "/**
     * Returns the children nodes of the current selection
     *
     * @return Crawler A Crawler instance with the children nodes
     *
     * @throws \InvalidArgumentException When current node is empty
     *
     * @api
     */",
 "/**
     * Returns the attribute value of the first node of the list.
     *
     * @param string $attribute The attribute name
     *
     * @return string The attribute value
     *
     * @throws \InvalidArgumentException When current node is empty
     *
     * @api
     */",
 "/**
     * Returns the node value of the first node of the list.
     *
     * @return string The node value
     *
     * @throws \InvalidArgumentException When current node is empty
     *
     * @api
     */",
 "/**
     * Extracts information from the list of nodes.
     *
     * You can extract attributes or/and the node value (_text).
     *
     * Example:
     *
     * $crawler->filter(\'h1 a\')->extract(array(\'_text\', \'href\'));
     *
     * @param array $attributes An array of attributes
     *
     * @return array An array of extracted values
     *
     * @api
     */",
 "/**
     * Filters the list of nodes with an XPath expression.
     *
     * @param string $xpath An XPath expression
     *
     * @return Crawler A new instance of Crawler with the filtered list of nodes
     *
     * @api
     */",
 "/**
     * Filters the list of nodes with a CSS selector.
     *
     * This method only works if you have installed the CssSelector Symfony Component.
     *
     * @param string $selector A CSS selector
     *
     * @return Crawler A new instance of Crawler with the filtered list of nodes
     *
     * @throws \RuntimeException if the CssSelector Component is not available
     *
     * @api
     */",
 "/**
     * Selects links by name or alt value for clickable images.
     *
     * @param  string $value The link text
     *
     * @return Crawler A new instance of Crawler with the filtered list of nodes
     *
     * @api
     */",
 "/**
     * Selects a button by name or alt value for images.
     *
     * @param  string $value The button text
     *
     * @return Crawler A new instance of Crawler with the filtered list of nodes
     *
     * @api
     */",
 "/**
     * Returns a Link object for the first node in the list.
     *
     * @param  string $method The method for the link (get by default)
     *
     * @return Link   A Link instance
     *
     * @throws \InvalidArgumentException If the current node list is empty
     *
     * @api
     */",
 "/**
     * Returns an array of Link objects for the nodes in the list.
     *
     * @return array An array of Link instances
     *
     * @api
     */",
 "/**
     * Returns a Form object for the first node in the list.
     *
     * @param  array  $values An array of values for the form fields
     * @param  string $method The method for the form
     *
     * @return Form   A Form instance
     *
     * @throws \InvalidArgumentException If the current node list is empty
     *
     * @api
     */",
 "/**
 * Crawler eases navigation of a list of \DOMNode objects.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param Loader[] $loaders An array of loader instances
     */",
 "/**
     * Adds a loader instance.
     *
     * @param Loader $loader A Loader instance
     */",
 "/**
     * Loads a template.
     *
     * @param TemplateReferenceInterface $template A template
     *
     * @return Storage|Boolean false if the template cannot be loaded, a Storage instance otherwise
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param TemplateReferenceInterface $template A template
     * @param integer                    $time     The last modification time of the cached template (timestamp)
     *
     * @return Boolean
     */",
 "/**
 * ChainLoader is a loader that calls other loaders to load templates.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param Schema $schema
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @param Column $column
     */",
 "/**
     * @param Table $localTable
     * @param ForeignKeyConstraint $fkConstraint
     */",
 "/**
     * @param Table $table
     * @param Index $index
     */",
 "/**
     * @param Sequence $sequence
     */",
 "/**
 * Schema Visitor used for Validation or Generation purposes.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Abstract base Expr class for building DQL parts
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Sets the name of the node.
     *
     * @param string $name The name of the node
     */",
 "/**
 * This interface must be implemented by nodes which can be used as prototypes.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @override
     */",
 "/**
 * Sqlsrv Connection implementation.
 *
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param Definition $parent The Definition instance to decorate.
     *
     * @api
     */",
 "/**
     * Returns the Definition being decorated.
     *
     * @return Definition
     *
     * @api
     */",
 "/**
     * Returns all changes tracked for the Definition object.
     *
     * @return array An array of changes for this Definition
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * Gets an argument to pass to the service constructor/factory method.
     *
     * If replaceArgument() has been used to replace an argument, this method
     * will return the replacement value.
     *
     * @param integer $index
     *
     * @return mixed The argument value
     *
     * @api
     */",
 "/**
     * You should always use this method when overwriting existing arguments
     * of the parent definition.
     *
     * If you directly call setArguments() keep in mind that you must follow
     * certain conventions when you want to overwrite the arguments of the
     * parent definition, otherwise your arguments will only be appended.
     *
     * @param integer $index
     * @param mixed $value
     *
     * @return DefinitionDecorator the current instance
     * @throws \InvalidArgumentException when $index isn\'t an integer
     *
     * @api
     */",
 "/**
 * This definition decorates another definition.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 *
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/** 
     * Initializes a new FileDriver that looks in the given path(s) for mapping 
     * documents and operates in the specified operating mode. 
     *  
     * @param string|array $paths One or multiple paths where mapping documents can be found. 
     */",
 "/**
     * Append lookup paths to metadata driver.
     *
     * @param array $paths
     */",
 "/**
     * Retrieve the defined metadata lookup paths.
     *
     * @return array
     */",
 "/**
     * Get the file extension used to look for mapping files under
     *
     * @return void
     */",
 "/**
     * Set the file extension used to look for mapping files under
     *
     * @param string $fileExtension The file extension to set
     * @return void
     */",
 "/**
     * Get the element of schema meta data for the class from the mapping file.
     * This will lazily load the mapping file if it is not loaded yet
     *
     * @return array $element  The element of schema meta data
     */",
 "/**
*Whethertheclasswiththespecifiednameshouldhaveitsmetadataloaded.
*ThisisonlythecaseifitiseithermappedasanEntityora
*MappedSuperclass.
*
*@paramstring$className
*@returnboolean
*/",
 "/**
*Getsthenamesofallmappedclassesknowntothisdriver.
*
*@returnarrayThenamesofallmappedclassesknowntothisdriver.
*/",
 "/**
*Findsthemappingfilefortheclasswiththegivennamebysearching
*throughtheconfiguredpaths.
*
*@param$className
*@returnstringThe(absolute)filename.
*@throwsMappingException
*/",
 "/**
*Loadsamappingfilewiththegivennameandreturnsamap
*fromclass/entitynamestotheircorrespondingelements.
*
*@paramstring$fileThemappingfiletoload.
*@returnarray
*/",
 "/**
*Basedriverforfile-basedmetadatadrivers.
*
*Afiledriveroperatesinamodewhereitloadsthemappingfilesofindividual
*classesondemand.Thisrequirestheusertoadheretotheconventionof1mapping
*fileperclassandthefilenamesofthemappingfilesmustcorrespondtothefull
*classname,includingnamespace,withthenamespacedelimiters\'\\',replacedbydots\'.\'.
*
*@licensehttp://www.opensource.org/licenses/lgpl-license.phpLGPL
*@linkwww.doctrine-project.com
*@since2.0
*@version$Revision$
*@author		BenjaminEberlei<kontakt@beberlei.de>
*@author		GuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanH.Wage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
 * Represents a @SecureParam annotation.
 *
 * @Annotation
 * @Target(\"METHOD\")
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Private constructor (prevents from instantiation)
     *
     */",
 "/**
     * Prints a dump of the public, protected and private properties of $var.
     *
     * @static
     * @link http://xdebug.org/
     * @param mixed $var
     * @param integer $maxDepth Maximum nesting level for object properties
     */",
 "/**
 * Static class containing most used debug methods.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Giorgio Sironi <piccoloprincipeazzurro@gmail.com>
 */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Transforms entities into choice keys.
     *
     * @param Collection|object $entity A collection of entities, a single entity or NULL
     *
     * @return mixed An array of choice keys, a single key or NULL
     */",
 "/**
     * Transforms choice keys into entities.
     *
     * @param  mixed $key   An array of keys, a single key or NULL
     *
     * @return Collection|object  A collection of entities, a single entity or NULL
     */",
 "/**
     * {@inheritDoc}
     *
     * @throws NotImplementedException  When time zone is different than UTC or GMT (Etc/GMT)
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Get an Etc/GMT timezone identifier for the specified timezone
     *
     * The PHP documentation for timezones states to not use the \'Other\' time zones because them exists
     * \"for backwards compatibility\". However all Etc/GMT time zones are in the tz database \'etcetera\' file,
     * which indicates they are not deprecated (neither are old names).
     *
     * Only GMT, Etc/Universal, Etc/Zulu, Etc/Greenwich, Etc/GMT-0, Etc/GMT+0 and Etc/GMT0 are old names and
     * are linked to Etc/GMT or Etc/UTC.
     *
     * @param  string  $formattedTimeZone A GMT timezone string (GMT-03:00, e.g.)
     *
     * @return string                     A timezone identifier
     *
     * @see    http://php.net/manual/en/timezones.others.php
     * @see    http://www.twinsun.com/tz/tz-link.htm
     *
     * @throws NotImplementedException   When the GMT time zone have minutes offset different than zero
     * @throws InvalidArgumentException  When the value can not be matched with pattern
     */",
 "/**
 * Parser and formatter for time zone format
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a do node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets the default connection name.
     *
     * @return string The default connection name
     */",
 "/**
     * Gets the named connection.
     *
     * @param string $name The connection name (null for the default one)
     *
     * @return Connection
     */",
 "/**
     * Gets an array of all registered connections
     *
     * @return array An array of Connection instances
     */",
 "/**
     * Gets all connection names.
     *
     * @return array An array of connection names
     */",
 "/**
     * Gets the default entity manager name.
     *
     * @return string The default entity manager name
     */",
 "/**
     * Gets a named entity manager.
     *
     * @param string $name The entity manager name (null for the default one)
     *
     * @return EntityManager
     */",
 "/**
     * Gets an array of all registered entity managers
     *
     * @return array An array of EntityManager instances
     */",
 "/**
     * Resets a named entity manager.
     *
     * This method is useful when an entity manager has been closed
     * because of a rollbacked transaction AND when you think that
     * it makes sense to get a new one to replace the closed one.
     *
     * Be warned that you will get a brand new entity manager as
     * the existing one is not useable anymore. This means that any
     * other object with a dependency on this entity manager will
     * hold an obsolete reference. You can inject the registry instead
     * to avoid this problem.
     *
     * @param string $name The entity manager name (null for the default one)
     *
     * @return EntityManager
     */",
 "/**
     * Resolves a registered namespace alias to the full namespace.
     *
     * This method looks for the alias in all registered entity managers.
     *
     * @param string $alias The alias
     *
     * @return string The full namespace
     *
     * @see Configuration::getEntityNamespace
     */",
 "/**
     * Gets all connection names.
     *
     * @return array An array of connection names
     */",
 "/**
     * Gets the EntityRepository for an entity.
     *
     * @param string $entityName        The name of the entity.
     * @param string $entityManagerName The entity manager name (null for the default one)
     *
     * @return Doctrine\ORM\EntityRepository
     */",
 "/**
     * Gets the entity manager associated with a given class.
     *
     * @param string $class A Doctrine Entity class name
     *
     * @return EntityManager|null
     */",
 "/**
 * References all Doctrine connections and entity managers in a given Container.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param \Doctrine\ORM\Internal\Hydration\AbstractHydrator $hydrator
     */",
 "/**
     * Gets the next set of results.
     *
     * @return array
     */",
 "/**
     * @return mixed
     */",
 "/**
     * @return int
     */",
 "/**
     * @return bool
     */",
 "/**
 * Represents a result structure that can be iterated over, hydrating row-by-row
 * during the iteration. An IterableResult is obtained by AbstractHydrator#iterate().
 *
 * @author robo
 * @since 2.0
 */",
 "/**
     * Loads a Closure.
     *
     * @param \Closure $closure A Closure
     * @param string   $type    The resource type
     *
     * @api
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean True if this class supports the given resource, false otherwise
     *
     * @api
     */",
 "/**
 * ClosureLoader loads routes from a PHP closure.
 *
 * The Closure must return a RouteCollection instance.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param array $cookies An array of cookie names to unset
     */",
 "/**
     * Implementation for the LogoutHandlerInterface. Deletes all requested cookies.
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token
     *
     * @return void
     */",
 "/**
 * This handler clears the passed cookies when a user logs out.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a block call node.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Contains all DBAL LockModes
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Constructor.
     *
     * @param string $test A comparison string
     *
     * @throws \InvalidArgumentException If the test is not understood
     */",
 "/**
 * DateCompare compiles date comparisons.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string|array $paths A path or an array of paths where to look for templates
     */",
 "/**
     * Returns the paths to the templates.
     *
     * @return array The array of paths where to look for templates
     */",
 "/**
     * Sets the paths where templates are stored.
     *
     * @param string|array $paths A path or an array of paths where to look for templates
     */",
 "/**
     * Adds a path where templates are stored.
     *
     * @param string $path A path where to look for templates
     */",
 "/**
     * Gets the source code of a template, given its name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The template source code
     */",
 "/**
     * Gets the cache key to use for the cache for a given template name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The cache key
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param string    $name The template name
     * @param timestamp $time The last modification time of the cached template
     */",
 "/**
 * Loads template from the filesystem.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new ByteArrayReplacementFilter with $search and $replace.
   * @param array $search
   * @param array $replace
   */",
 "/**
   * Returns true if based on the buffer passed more bytes should be buffered.
   * @param array $buffer
   * @return boolean
   */",
 "/**
   * Perform the actual replacements on $buffer and return the result.
   * @param array $buffer
   * @return array
   */",
 "/**
 * Processes bytes as they pass through a buffer and replaces sequences in it.
 * This stream filter deals with Byte arrays rather than simple strings.
 * @package Swift
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param array $templates An array of templates (keys are the names, and values are the source code)
     *
     * @see Twig_Loader
     */",
 "/**
     * Adds or overrides a template.
     *
     * @param string $name     The template name
     * @param string $template The template source
     */",
 "/**
     * Gets the source code of a template, given its name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The template source code
     */",
 "/**
     * Gets the cache key to use for the cache for a given template name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The cache key
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param string    $name The template name
     * @param timestamp $time The last modification time of the cached template
     */",
 "/**
 * Loads a template from an array.
 *
 * When using this loader with a cache mechanism, you should know that a new cache
 * key is generated each time a template content \"changes\" (the cache key being the
 * source code of the template). If you don\'t want to see your cache grows out of
 * control, you need to take care of clearing the old cache file by yourself.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Dumps the service container as an YAML string.
     *
     * @param  array  $options An array of options
     *
     * @return string A YAML string representing of the service container
     *
     * @api
     */",
 "/**
     * Adds a service
     *
     * @param string $id
     * @param Definition $definition
     *
     * @return string
     */",
 "/**
     * Adds a service alias
     *
     * @param string $alias
     * @param string $id
     *
     * @return string
     */",
 "/**
     * Adds services
     *
     * @return string
     */",
 "/**
     * Adds parameters
     *
     * @return string
     */",
 "/**
     * Dumps the value to YAML format
     *
     * @param mixed $value
     *
     * @throws \RuntimeException When trying to dump object or resource
     */",
 "/**
     * Gets the service call.
     *
     * @param string    $id
     * @param Reference $reference
     *
     * @return string
     */",
 "/**
     * Gets parameter call.
     *
     * @param string $id
     *
     * @return string
     */",
 "/**
     * Prepares parameters
     *
     * @param array $parameters
     *
     * @return array
     */",
 "/**
     * Escapes arguments
     *
     * @param array $arguments
     *
     * @return array
     */",
 "/**
 * YamlDumper dumps a service container as a YAML string.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * The resource was found but the request method is not allowed.
 *
 * This exception should trigger an HTTP 405 response in your application code.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 *
 * @api
 */",
 "/**
     * @dataProvider getImages
     */",
 "/**
 * @group integration
 */",
 "/**
     * Creates a new query scanner object.
     *
     * @param string $input a query string
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * @inheritdoc
     */",
 "/**
 * Scans a DQL query for tokens.
 *
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Janne Vanhala <jpvanhal@cc.hut.fi>
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
 * Represents a debug node.
 *
 * @package    twig
 * @subpackage Twig-extensions
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id$
 */",
 "/**
     * Initializes the provider with a Session object and a secret value
     *
     * A recommended value for the secret is a generated value with at least
     * 32 characters and mixed letters, digits and special characters.
     *
     * @param Session $session The user session
     * @param string  $secret  A secret value included in the CSRF token
     */",
 "/**
     * Returns the ID of the user session
     *
     * Automatically starts the session if necessary.
     *
     * @return string  The session ID
     */",
 "/**
 * This provider uses a Symfony2 Session object to retrieve the user\'s
 * session ID
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @see    DefaultCsrfProvider
 */",
 "/**
     *
     * @param string $name
     * @param int $allocationSize
     * @param int $initialValue
     */",
 "/**
     * @param Visitor $visitor
     */",
 "/**
 * Sequence Structure
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
*Createsanew<tt>ClassLoader</tt>thatloadsclassesofthe
*specifiednamespacefromthespecifiedincludepath.
*
*Ifnoincludepathisgiven,theClassLoaderreliesonthePHPinclude_path.
*Ifneitheranamespacenoranincludepathisgiven,theClassLoaderwill
*beresponsibleforloadingallclasses,therebyrelyingonthePHPinclude_path.
*
*@paramstring$nsThenamespaceoftheclassestoload.
*@paramstring$includePathThebaseincludepathtouse.
*/",
 "/**
*SetsthenamespaceseparatorusedbyclassesinthenamespaceofthisClassLoader.
*
*@paramstring$sepTheseparatortouse.
*/",
 "/**
*GetsthenamespaceseparatorusedbyclassesinthenamespaceofthisClassLoader.
*
*@returnstring
*/",
 "/**
*SetsthebaseincludepathforallclassfilesinthenamespaceofthisClassLoader.
*
*@paramstring$includePath
*/",
 "/**
*GetsthebaseincludepathforallclassfilesinthenamespaceofthisClassLoader.
*
*@returnstring
*/",
 "/**
*SetsthefileextensionofclassfilesinthenamespaceofthisClassLoader.
*
*@paramstring$fileExtension
*/",
 "/**
*GetsthefileextensionofclassfilesinthenamespaceofthisClassLoader.
*
*@returnstring
*/",
 "/**
*RegistersthisClassLoaderontheSPLautoloadstack.
*/",
 "/**
*RemovesthisClassLoaderfromtheSPLautoloadstack.
*/",
 "/**
*Loadsthegivenclassorinterface.
*
*@paramstring$classnameThenameoftheclasstoload.
*@returnbooleanTRUEiftheclasshasbeensuccessfullyloaded,FALSEotherwise.
*/",
 "/**
*AsksthisClassLoaderwhetheritcanpotentiallyloadtheclass(file)with
*thegivenname.
*
*@paramstring$classNameThefully-qualifiednameoftheclass.
*@returnbooleanTRUEifthisClassLoadercanloadtheclass,FALSEotherwise.
*/",
 "/**
*Checkswhetheraclasswithagivennameexists.Aclass\"exists\" if it is either
     * already defined in the current request or if there is an autoloader on the SPL
     * autoload stack that is a) responsible for the class in question and b) is able to
     * load a class file in which the class definition resides.
     *
     * If the class is not already defined, each autoloader in the SPL autoload stack
     * is asked whether it is able to tell if the class exists. If the autoloader is
     * a <tt>ClassLoader</tt>, {@link canLoadClass} is used, otherwise the autoload
     * function of the autoloader is invoked and expected to return a value that
     * evaluates to TRUE if the class (file) exists. As soon as one autoloader reports
     * that the class exists, TRUE is returned.
     *
     * Note that, depending on what kinds of autoloaders are installed on the SPL
     * autoload stack, the class (file) might already be loaded as a result of checking
     * for its existence. This is not the case with a <tt>ClassLoader</tt>, who separates
     * these responsibilities.
     *
     * @param string $className The fully-qualified name of the class.
     * @return boolean TRUE if the class exists as per the definition given above, FALSE otherwise.
     */",
 "/**
     * Gets the <tt>ClassLoader</tt> from the SPL autoload stack that is responsible
     * for (and is able to load) the class with the given name.
     *
     * @param string $className The name of the class.
     * @return The <tt>ClassLoader</tt> for the class or NULL if no such <tt>ClassLoader</tt> exists.
     */",
 "/**
     * @param string $file The file relative path.
     * @return boolean Whether file exists in include_path.
     */",
 "/**
 * A <tt>ClassLoader</tt> is an autoloader for class files that can be
 * installed on the SPL autoload stack. It is a class loader that either loads only classes
 * of a specific namespace or all namespaces and it is suitable for working together
 * with other autoloaders in the SPL autoload stack.
 * 
 * If no include path is configured through the constructor or {@link setIncludePath}, a ClassLoader
 * relies on the PHP <code>include_path</code>.
 * 
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
   * Set the KeyCache to wrap.
   * @param Swift_KeyCache $keyCache
   */",
 "/**
   * Set the nsKey which will be written to.
   * @param string $nsKey
   */",
 "/**
   * Set the itemKey which will be written to.
   * @param string $itemKey
   */",
 "/**
   * Specify a stream to write through for each write().
   * @param Swift_InputByteStream $is
   */",
 "/**
   * Any implementation should be cloneable, allowing the clone to access a
   * separate $nsKey and $itemKey.
   */",
 "/**
 * Writes data to a KeyCache using a stream.
 * @package Swift
 * @subpackage KeyCache
 * @author Chris Corbyn
 */",
 "/**
 * CollectionMemberExpression ::= EntityExpression [\"NOT\"] \"MEMBER\" [\"OF\"] CollectionValuedPathExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @expectedException \InvalidArgumentException
     */",
 "/**
     * Transforms a \DateTime instance to a string
     *
     * @see \DateTime::format() for supported formats
     *
     * @param string $inputTimezone  The name of the input timezone
     * @param string $outputTimezone The name of the output timezone
     * @param string $format         The date format
     *
     * @throws UnexpectedTypeException if a timezone is not a string
     */",
 "/**
     * Transforms a DateTime object into a date string with the configured format
     * and timezone
     *
     * @param  DateTime $value  A DateTime object
     *
     * @return string           A value as produced by PHP\'s date() function
     *
     * @throws UnexpectedTypeException if the given value is not a \DateTime instance
     * @throws TransformationFailedException if the output timezone is not supported
     */",
 "/**
     * Transforms a date string in the configured timezone into a DateTime object.
     *
     * @param  string $value  A value as produced by PHP\'s date() function
     *
     * @return \DateTime      An instance of \DateTime
     *
     * @throws UnexpectedTypeException if the given value is not a string
     * @throws TransformationFailedException if the date could not be parsed
     * @throws TransformationFailedException if the input timezone is not supported
     */",
 "/**
 * Transforms between a date string and a DateTime object
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
     * Attempts to authenticates a TokenInterface object.
     *
     * @param TokenInterface $token The TokenInterface instance to authenticate
     *
     * @return TokenInterface An authenticated TokenInterface instance, never null
     *
     * @throws AuthenticationException if the authentication fails
     */",
 "/**
 * AuthenticationManagerInterface is the interface for authentication managers,
 * which process Token authentication.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Takes an unencoded string and produces a Base64 encoded string from it.
   * Base64 encoded strings have a maximum line length of 76 characters.
   * If the first line needs to be shorter, indicate the difference with
   * $firstLineOffset.
   * @param string $string to encode
   * @param int $firstLineOffset
   * @param int $maxLineLength, optional, 0 indicates the default of 76 bytes
   * @return string
   */",
 "/**
   * Does nothing.
   */",
 "/**
 * Handles Base 64 Encoding in Swift Mailer.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 */",
 "/**
 * @author Bernhard Schussek <bernhard.schussek@symfony-project.com>
 */",
 "/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Annotation that can be used to signal to the parser to ignore specific
 * annotations during the parsing process.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * Constructor.
     *
     * @param string $basePath The base path to be prepended to relative paths
     * @param string $version  The package version
     * @param string $format   The format used to apply the version
     */",
 "/**
     * Returns the base path.
     *
     * @return string The base path
     */",
 "/**
 * The path packages adds a version and a base path to asset URLs.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param Reader $reader
     */",
 "/**
     * Sets the annotation class to read route properties from.
     *
     * @param string $class A fully-qualified class name
     */",
 "/**
     * Loads from annotations from a class.
     *
     * @param string $class A class name
     * @param string $type  The resource type
     *
     * @return RouteCollection A RouteCollection instance
     *
     * @throws \InvalidArgumentException When route can\'t be parsed
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean True if this class supports the given resource, false otherwise
     */",
 "/**
     * Sets the loader resolver.
     *
     * @param LoaderResolver $resolver A LoaderResolver instance
     */",
 "/**
     * Gets the loader resolver.
     *
     * @return LoaderResolver A LoaderResolver instance
     */",
 "/**
*Getsthedefaultroutenameforaclassmethod.
*
*@param\ReflectionClass$class
*@param\ReflectionMethod$method
*
*@returnstring
*/",
 "/**
*AnnotationClassLoaderloadsroutinginformationfromaPHPclassanditsmethods.
*
*YouneedtodefineanimplementationforthegetRouteDefaults()method.Mostofthe
*time,thismethodshoulddefinesomePHPcallabletobecalledfortheroute
*(acontrollerinMVCspeak).
*
*The@Routeannotationcanbesetontheclass(forglobalparameters),
*andoneachmethod.
*
*The@Routeannotationmainvalueistheroutepattern.Theannotationalso
*recognizesthreeparameters:requirements,options,andname.Thenameparameter
*ismandatory.Hereisanexampleofhowyoushouldbeabletouseit:
*
*/**
**@Route(\"/Blog\")
 *      * /
 *     class Blog
 *     {
 *         /**
 *          * @Route(\"/\", name=\"blog_index\")
 *          * /
 *         public function index()
 *         {
 *         }
 *
 *         /**
 *          * @Route(\"/{id}\", name=\"blog_post\", requirements = {\"id\" = \"\d+\"})
 *          * /
 *         public function show()
 *         {
 *         }
 *     }
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Send a mail with the given content
     *
     * @param string $content
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Base class for all mail handlers
 *
 * @author Gyula Sallai
 */",
 "/**
     * Constructor.
     *
     * @param string $name The Node\'s name
     * @param NodeInterface $parent The node parent
     */",
 "/**
     * Sets the xml remappings that should be performed.
     *
     * @param array $remappings an array of the form array(array(string, string))
     */",
 "/**
     * Sets whether to add default values for this array if it has not been
     * defined in any of the configuration files.
     *
     * @param Boolean $boolean
     */",
 "/**
     * Sets whether false is allowed as value indicating that the array should be unset.
     *
     * @param Boolean $allow
     */",
 "/**
     * Sets whether new keys can be defined in subsequent configurations.
     *
     * @param Boolean $allow
     */",
 "/**
     * Sets if deep merging should occur.
     *
     * @param Boolean $boolean
     */",
 "/**
     * Whether extra keys should just be ignore without an exception.
     *
     * @param Boolean $boolean To allow extra keys
     */",
 "/**
     * Sets the node Name.
     *
     * @param string $name The node\'s name
     */",
 "/**
     * Checks if the node has a default value.
     *
     * @return Boolean
     */",
 "/**
     * Retrieves the default value.
     *
     * @return array The default value
     *
     * @throws \RuntimeException if the node has no default value
     */",
 "/**
     * Adds a child node.
     *
     * @param NodeInterface $node The child node to add
     *
     * @throws \InvalidArgumentException when the child node has no name
     * @throws \InvalidArgumentException when the child node\'s name is not unique
     */",
 "/**
     * Finalizes the value of this node.
     *
     * @param mixed $value
     *
     * @return mixed The finalised value
     *
     * @throws UnsetKeyException
     * @throws InvalidConfigurationException if the node doesn\'t have enough children
     */",
 "/**
     * Validates the type of the value.
     *
     * @param mixed $value
     *
     * @throws InvalidTypeException
     */",
 "/**
     * Normalizes the value.
     *
     * @param mixed $value The value to normalize
     *
     * @return mixed The normalized value
     */",
 "/**
     * Remaps multiple singular values to a single plural value.
     *
     * @param array $value The source values
     *
     * @return array The remapped values
     */",
 "/**
     * Merges values together.
     *
     * @param mixed $leftSide The left side to merge.
     * @param mixed $rightSide The right side to merge.
     *
     * @return mixed The merged values
     *
     * @throws InvalidConfigurationException
     * @throws \RuntimeException
     */",
 "/**
 * Represents an Array node in the config tree.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Takes a CSS selector and returns an array holding the Tokens
     * it contains.
     *
     * @param  string $s The selector to lex.
     *
     * @return array Token[]
     */",
 "/**
*Tokenizesaquotedstring(i.e.\'Astringquotedwith\\'characters\'),
*andreturnsanarrayholdingtheunquotedstringcontainedby$sand
*thenewpositionfromwhichtokenizingshouldtakeover.
*
*@throwsParseExceptionWhenexpectedclosingisnotfound
*
*@paramstring$sTheselectorstringcontainingthequotedstring.
*@paraminteger$posThestartingpositionforthequotedstring.
*
*@returnarray
*/",
 "/**
*Unescapesastringliteralandreturnstheunescapedstring.
*
*@throwsParseExceptionWheninvalidescapesequenceisfound
*
*@paramstring$literalThestringliteraltounescape.
*
*@returnstring
*/",
 "/**
*Lexesselector$sandreturnsanarrayholdingthenameofthesymbol
*containedinitandthenewpositionfromwhichtokenizingshouldtake
*over.
*
*@throwsParseExceptionWhenUnexpectedsymbolisfound
*
*@paramstring$sTheselectorstring.
*@paraminteger$posThepositionin$satwhichthesymbolstarts.
*
*@returnarray
*/",
 "/**
*TokenizerlexesaCSSSelectortotokens.
*
*ThiscomponentisaportofthePythonlxmllibrary,
*whichiscopyrightInfraeanddistributedundertheBSDlicense.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * Constructor;
     *
     * @param EngineInterface $engine    The templating engine
     * @param array           $resources An array of theme name
     */",
 "/**
     * Sets a theme for a given view.
     *
     * The theme format is \"<Bundle>:<Controller>\".
     *
     * @param FormView     $view   A FormView instance
     * @param string|array $themes A theme or an array of theme
     */",
 "/**
     * Renders the HTML enctype in the form tag, if necessary.
     *
     * Example usage templates:
     *
     *     <form action=\"...\" method=\"post\" <?php echo $view[\'form\']->enctype() ?>>
     *
     * @param FormView $view  The view for which to render the encoding type
     *
     * @return string The html markup
     */",
 "/**
     * Renders the HTML for a given view.
     *
     * Example usage:
     *
     *     <?php echo view[\'form\']->widget() ?>
     *
     * You can pass options during the call:
     *
     *     <?php echo view[\'form\']->widget(array(\'attr\' => array(\'class\' => \'foo\'))) ?>
     *
     *     <?php echo view[\'form\']->widget(array(\'separator\' => \'+++++)) ?>
     *
     * @param FormView $view      The view for which to render the widget
     * @param array    $variables Additional variables passed to the template
     *
     * @return string The html markup
     */",
 "/**
     * Renders the entire form field \"row\".
     *
     * @param FormView $view      The view for which to render the row
     * @param array    $variables Additional variables passed to the template
     *
     * @return string The html markup
     */",
 "/**
     * Renders the label of the given view.
     *
     * @param FormView $view      The view for which to render the label
     * @param string   $label     The label
     * @param array    $variables Additional variables passed to the template
     *
     * @return string The html markup
     */",
 "/**
     * Renders the errors of the given view.
     *
     * @param FormView $view The view to render the errors for
     *
     * @return string The html markup
     */",
 "/**
     * Renders views which have not already been rendered.
     *
     * @param FormView $view      The parent view
     * @param array    $variables An array of variables
     *
     * @return string The html markup
     */",
 "/**
     * Renders a template.
     *
     * 1. This function first looks for a block named \"_<view id>_<section>\",
     * 2. if such a block is not found the function will look for a block named
     *    \"<type name>_<section>\",
     * 3. the type name is recursively replaced by the parent type name until a
     *    corresponding block is found
     *
     * @param FormView  $view       The form view
     * @param string    $section    The section to render (i.e. \'row\', \'widget\', \'label\', ...)
     * @param array     $variables  Additional variables
     *
     * @return string The html markup
     *
     * @throws FormException if no template block exists to render the given section of the view
     */",
 "/**
     * Render a block from a form element.
     *
     * @param string $name
     * @param array  $variables Additional variables (those would override the current context)
     *
     * @throws FormException if the block is not found
     * @throws FormException if the method is called out of a form element (no context)
     */",
 "/**
     * Returns the name of the template to use to render the block
     *
     * @param FormView $view  The form view
     * @param string   $block The name of the block
     *
     * @return string|Boolean The template logical name or false when no template is found
     */",
 "/**
 * FormHelper provides helpers to help display forms.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Initializes a new <tt>EntityRepository</tt>.
     *
     * @param EntityManager $em The EntityManager to use.
     * @param ClassMetadata $classMetadata The class descriptor.
     */",
 "/**
     * Create a new QueryBuilder instance that is prepopulated for this entity name
     *
     * @param string $alias
     * @return QueryBuilder $qb
     */",
 "/**
     * Create a new Query instance based on a predefined metadata named query.
     *
     * @param string $queryName
     * @return Query
     */",
 "/**
     * Clears the repository, causing all managed entities to become detached.
     */",
 "/**
     * Finds an entity by its primary key / identifier.
     *
     * @param $id The identifier.
     * @param int $lockMode
     * @param int $lockVersion
     * @return object The entity.
     */",
 "/**
     * Finds all entities in the repository.
     *
     * @return array The entities.
     */",
 "/**
     * Finds entities by a set of criteria.
     *
     * @param array $criteria
     * @param array|null $orderBy
     * @param int|null $limit
     * @param int|null $offset
     * @return array The objects.
     */",
 "/**
     * Finds a single entity by a set of criteria.
     *
     * @param array $criteria
     * @return object
     */",
 "/**
     * Adds support for magic finders.
     *
     * @return array|object The found entity/entities.
     * @throws BadMethodCallException  If the method called is an invalid find* method
     *                                 or no find* method at all and therefore an invalid
     *                                 method call.
     */",
 "/**
     * @return string
     */",
 "/**
     * @return EntityManager
     */",
 "/**
     * @return Mapping\ClassMetadata
     */",
 "/**
 * An EntityRepository serves as a repository for entities with generic as well as
 * business specific methods for retrieving entities.
 *
 * This class is designed for inheritance and users can subclass this class to
 * write their own repositories with business-specific methods to locate entities.
 *
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Redirects to another route.
     *
     * It expects a route path parameter.
     * By default, the response status code is 301.
     *
     * If the route empty, the status code will be 410.
     * If the permanent path parameter is set, the status code will be 302.
     *
     * @param string  $route     The route pattern to redirect to
     * @param Boolean $permanent Whether the redirect is permanent or not
     *
     * @return Response A Response instance
     */",
 "/**
     * Redirects to a URL.
     *
     * By default, the response status code is 301.
     *
     * If the path is empty, the status code will be 410.
     * If the permanent flag is set, the status code will be 302.
     *
     * @param string  $path      The path to redirect to
     * @param Boolean $permanent Whether the redirect is permanent or not
     * @param Boolean $scheme    The URL scheme (null to keep the current one)
     * @param integer $httpPort  The HTTP port
     * @param integer $httpsPort The HTTPS port
     *
     * @return Response A Response instance
     */",
 "/**
 * Redirects a request to another URL.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Sets the directory where Doctrine generates any necessary proxy class files.
     *
     * @param string $dir
     */",
 "/**
     * Gets the directory where Doctrine generates any necessary proxy class files.
     *
     * @return string
     */",
 "/**
     * Gets a boolean flag that indicates whether proxy classes should always be regenerated
     * during each script execution.
     *
     * @return boolean
     */",
 "/**
     * Sets a boolean flag that indicates whether proxy classes should always be regenerated
     * during each script execution.
     *
     * @param boolean $bool
     */",
 "/**
     * Gets the namespace where proxy classes reside.
     *
     * @return string
     */",
 "/**
     * Sets the namespace where proxy classes reside.
     *
     * @param string $ns
     */",
 "/**
     * Sets the cache driver implementation that is used for metadata caching.
     *
     * @param Driver $driverImpl
     * @todo Force parameter to be a Closure to ensure lazy evaluation
     *       (as soon as a metadata cache is in effect, the driver never needs to initialize).
     */",
 "/**
*Addanewdefaultannotationdriverwithacorrectlyconfiguredannotationreader.
*
*@paramarray$paths
*@returnMapping\Driver\AnnotationDriver
*/",
 "/**
*Addsanamespaceunderacertainalias.
*
*@paramstring$alias
*@paramstring$namespace
*/",
 "/**
*Resolvesaregisterednamespacealiastothefullnamespace.
*
*@paramstring$entityNamespaceAlias
*@returnstring
*@throwsMappingException
*/",
 "/**
*Settheentityaliasmap
*
*@paramarray$entityAliasMap
*@returnvoid
*/",
 "/**
*Retrievesthelistofregisteredentitynamespacealiases.
*
*@returnarray
*/",
 "/**
*Getsthecachedriverimplementationthatisusedforthemappingmetadata.
*
*@throwsORMException
*@returnMapping\Driver\Driver
*/",
 "/**
*Getsthecachedriverimplementationthatisusedforqueryresultcaching.
*
*@return\Doctrine\Common\Cache\Cache
*/",
 "/**
*Setsthecachedriverimplementationthatisusedforqueryresultcaching.
*
*@param\Doctrine\Common\Cache\Cache$cacheImpl
*/",
 "/**
*Getsthecachedriverimplementationthatisusedforthequerycache(SQLcache).
*
*@return\Doctrine\Common\Cache\Cache
*/",
 "/**
*Setsthecachedriverimplementationthatisusedforthequerycache(SQLcache).
*
*@param\Doctrine\Common\Cache\Cache$cacheImpl
*/",
 "/**
*Getsthecachedriverimplementationthatisusedformetadatacaching.
*
*@return\Doctrine\Common\Cache\Cache
*/",
 "/**
*Setsthecachedriverimplementationthatisusedformetadatacaching.
*
*@param\Doctrine\Common\Cache\Cache$cacheImpl
*/",
 "/**
*AddsanamedDQLquerytotheconfiguration.
*
*@paramstring$nameThenameofthequery.
*@paramstring$dqlTheDQLquerystring.
*/",
 "/**
*GetsapreviouslyregisterednamedDQLquery.
*
*@paramstring$nameThenameofthequery.
*@returnstringTheDQLquery.
*/",
 "/**
*Addsanamednativequerytotheconfiguration.
*
*@paramstring$nameThenameofthequery.
*@paramstring$sqlThenativeSQLquerystring.
*@paramResultSetMapping$rsmTheResultSetMappingusedfortheresultsoftheSQLquery.
*/",
 "/**
*Getsthecomponentsofapreviouslyregisterednamednativequery.
*
*@paramstring$nameThenameofthequery.
*@returnarrayAtuplewiththefirstelementbeingtheSQLstringandthesecond
*elementbeingtheResultSetMapping.
*/",
 "/**
*EnsuresthatthisConfigurationinstancecontainssettingsthatare
*suitableforaproductionenvironment.
*
*@throwsORMExceptionIfaconfigurationsettinghasavaluethatisnot
*suitableforaproductionenvironment.
*/",
 "/**
*RegistersacustomDQLfunctionthatproducesastringvalue.
*SuchafunctioncanthenbeusedinanyDQLstatementinanyplacewherestring
*functionsareallowed.
*
*DQLfunctionnamesarecase-insensitive.
*
*@paramstring$name
*@paramstring$className
*/",
 "/**
*GetstheimplementationclassnameofaregisteredcustomstringDQLfunction.
*
*@paramstring$name
*@returnstring
*/",
 "/**
*SetsamapofcustomDQLstringfunctions.
*
*KeysmustbefunctionnamesandvaluestheFQCNoftheimplementingclass.
*Thefunctionnameswillbecase-insensitiveinDQL.
*
*Anypreviouslyaddedstringfunctionsarediscarded.
*
*@paramarray$functionsThemapofcustomDQLstringfunctions.
*/",
 "/**
*RegistersacustomDQLfunctionthatproducesanumericvalue.
*SuchafunctioncanthenbeusedinanyDQLstatementinanyplacewherenumeric
*functionsareallowed.
*
*DQLfunctionnamesarecase-insensitive.
*
*@paramstring$name
*@paramstring$className
*/",
 "/**
*GetstheimplementationclassnameofaregisteredcustomnumericDQLfunction.
*
*@paramstring$name
*@returnstring
*/",
 "/**
*SetsamapofcustomDQLnumericfunctions.
*
*KeysmustbefunctionnamesandvaluestheFQCNoftheimplementingclass.
*Thefunctionnameswillbecase-insensitiveinDQL.
*
*Anypreviouslyaddednumericfunctionsarediscarded.
*
*@paramarray$functionsThemapofcustomDQLnumericfunctions.
*/",
 "/**
*RegistersacustomDQLfunctionthatproducesadate/timevalue.
*SuchafunctioncanthenbeusedinanyDQLstatementinanyplacewheredate/time
*functionsareallowed.
*
*DQLfunctionnamesarecase-insensitive.
*
*@paramstring$name
*@paramstring$className
*/",
 "/**
*Getstheimplementationclassnameofaregisteredcustomdate/timeDQLfunction.
*
*@paramstring$name
*@returnstring
*/",
 "/**
*SetsamapofcustomDQLdate/timefunctions.
*
*KeysmustbefunctionnamesandvaluestheFQCNoftheimplementingclass.
*Thefunctionnameswillbecase-insensitiveinDQL.
*
*Anypreviouslyaddeddate/timefunctionsarediscarded.
*
*@paramarray$functionsThemapofcustomDQLdate/timefunctions.
*/",
 "/**
*Getthehydratorclassforthegivenhydrationmodename.
*
*@paramstring$modeNameThehydrationmodename.
*@returnstring$hydratorThehydratorclassname.
*/",
 "/**
*Addacustomhydrationmode.
*
*@paramstring$modeNameThehydrationmodename.
*@paramstring$hydratorThehydratorclassname.
*/",
 "/**
*Setaclassmetadatafactory.
*
*@paramstring$cmf
*/",
 "/**
*@returnstring
*/",
 "/**
*ConfigurationcontainerforallconfigurationoptionsofDoctrine.
*ItcombinesallconfigurationoptionsfromDBAL&ORM.
*
*@since2.0
*@internalWhenaddinganewconfigurationoptionjustwriteagetter/setterpair.
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Constructs a joinColumn mapping array based on the information
     * found in the given join column element.
     *
     * @param $joinColumnElement The array join column element
     * @return array The mapping array.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * The YamlDriver reads the mapping metadata from yaml schema files.
 *
 * @since 2.0
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @author Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Base class for property metadata.
 *
 * This class is intended to be extended to add your application specific
 * properties, and flags.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Compresses a string.
     *
     * @param string $content The content to compress
     * @param string $type    The type of content, either \"js\" or \"css\"
     * @param array  $options An indexed array of additional options
     *
     * @return string The compressed content
     */",
 "/**
 * Base YUI compressor filter.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * Description of BetweenExpression
 *
  @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Configures the _controller default parameter and eventually the _method
     * requirement of a given Route instance.
     *
     * @param Route $route A Route instance
     * @param ReflectionClass $class A ReflectionClass instance
     * @param ReflectionMethod $method A ReflectionClass method
     */",
 "/**
     * Makes the default route name more sane by removing common keywords.
     *
     * @param  ReflectionClass $class A ReflectionClass instance
     * @param  ReflectionMethod $method A ReflectionMethod instance
     * @return string
     */",
 "/**
 * AnnotatedRouteControllerLoader is an implementation of AnnotationClassLoader
 * that sets the \'_controller\' default based on the class and method names.
 *
 * It also parse the @Method annotation.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Javascript YUI compressor filter.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array     $server    The server parameters (equivalent of $_SERVER)
     * @param History   $history   A History instance to store the browser history
     * @param CookieJar $cookieJar A CookieJar instance to store the cookies
     *
     * @api
     */",
 "/**
     * Sets whether to automatically follow redirects or not.
     *
     * @param Boolean $followRedirect Whether to follow redirects
     *
     * @api
     */",
 "/**
     * Sets the insulated flag.
     *
     * @param Boolean $insulated Whether to insulate the requests or not
     *
     * @throws \RuntimeException When Symfony Process Component is not installed
     *
     * @api
     */",
 "/**
     * Sets server parameters.
     *
     * @param array $server An array of server parameters
     *
     * @api
     */",
 "/**
     * Sets single server parameter.
     *
     * @param string $key   A key of the parameter
     * @param string $value A value of the parameter
     */",
 "/**
     * Gets single server parameter for specified key.
     *
     * @param string $key     A key of the parameter to get
     * @param string $default A default value when key is undefined
     *
     * @return string A value of the parameter
     */",
 "/**
     * Returns the History instance.
     *
     * @return History A History instance
     *
     * @api
     */",
 "/**
     * Returns the CookieJar instance.
     *
     * @return CookieJar A CookieJar instance
     *
     * @api
     */",
 "/**
     * Returns the current Crawler instance.
     *
     * @return Crawler A Crawler instance
     *
     * @api
     */",
 "/**
     * Returns the current Response instance.
     *
     * @return Response A Response instance
     *
     * @api
     */",
 "/**
     * Returns the current Request instance.
     *
     * @return Request A Request instance
     *
     * @api
     */",
 "/**
     * Clicks on a given link.
     *
     * @param Link $link A Link instance
     *
     * @return Crawler
     *
     * @api
     */",
 "/**
     * Submits a form.
     *
     * @param Form  $form   A Form instance
     * @param array $values An array of form field values
     *
     * @return Crawler
     *
     * @api
     */",
 "/**
     * Calls a URI.
     *
     * @param string  $method        The request method
     * @param string  $uri           The URI to fetch
     * @param array   $parameters    The Request parameters
     * @param array   $files         The files
     * @param array   $server        The server parameters (HTTP headers are referenced with a HTTP_ prefix as PHP does)
     * @param string  $content       The raw body data
     * @param Boolean $changeHistory Whether to update the history or not (only used internally for back(), forward(), and reload())
     *
     * @return Crawler
     *
     * @api
     */",
 "/**
     * Makes a request in another process.
     *
     * @param Request $request A Request instance
     *
     * @return Response A Response instance
     *
     * @throws \RuntimeException When processing returns exit code
     */",
 "/**
     * Makes a request.
     *
     * @param Request $request A Request instance
     *
     * @return Response A Response instance
     */",
 "/**
     * Returns the script to execute when the request must be insulated.
     *
     * @param Request $request A Request instance
     *
     * @throws \LogicException When this abstract class is not implemented
     */",
 "/**
     * Filters the request.
     *
     * @param Request $request The request to filter
     *
     * @return Request
     */",
 "/**
     * Filters the Response.
     *
     * @param Response $response The Response to filter
     *
     * @return Response
     */",
 "/**
     * Creates a crawler.
     *
     * @param string $uri     A uri
     * @param string $content Content for the crawler to use
     * @param string $type    Content type
     *
     * @return Crawler
     */",
 "/**
     * Goes back in the browser history.
     *
     * @return Crawler
     *
     * @api
     */",
 "/**
     * Goes forward in the browser history.
     *
     * @return Crawler
     *
     * @api
     */",
 "/**
     * Reloads the current browser.
     *
     * @return Crawler
     *
     * @api
     */",
 "/**
     * Follow redirects?
     *
     * @return Crawler
     *
     * @throws \LogicException If request was not a redirect
     *
     * @api
     */",
 "/**
     * Restarts the client.
     *
     * It flushes history and all cookies.
     *
     * @api
     */",
 "/**
     * Takes a URI and converts it to absolute if it is not already absolute.
     *
     * @param string $uri A uri
     *
     * @return string An absolute uri
     */",
 "/**
     * Makes a request from a Request object directly.
     *
     * @param Request $request       A Request instance
     * @param Boolean $changeHistory Whether to update the history or not (only used internally for back(), forward(), and reload())
     *
     * @return Crawler
     */",
 "/**
 * Client simulates a browser.
 *
 * To make the actual request, you need to implement the doRequest() method.
 *
 * If you want to be able to run requests in their own process (insulated flag),
 * you need to also implement the getScript() method.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * SensioGeneratorBundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Initializes a new UnitOfWork instance, bound to the given EntityManager.
     *
     * @param \Doctrine\ORM\EntityManager $em
     */",
 "/**
     * Commits the UnitOfWork, executing all operations that have been postponed
     * up to this point. The state of all managed entities will be synchronized with
     * the database.
     *
     * The operations are executed in the following order:
     *
     * 1) All entity insertions
     * 2) All entity updates
     * 3) All collection deletions
     * 4) All collection updates
     * 5) All entity deletions
     *
     */",
 "/**
     * Executes any extra updates that have been scheduled.
     */",
 "/**
     * Gets the changeset for an entity.
     *
     * @return array
     */",
 "/**
     * Computes the changes that happened to a single entity.
     *
     * Modifies/populates the following properties:
     *
     * {@link _originalEntityData}
     * If the entity is NEW or MANAGED but not yet fully persisted (only has an id)
     * then it was not fetched from the database and therefore we have no original
     * entity data yet. All of the current entity data is stored as the original entity data.
     *
     * {@link _entityChangeSets}
     * The changes detected on all properties of the entity are stored there.
     * A change is a tuple array where the first entry is the old value and the second
     * entry is the new value of the property. Changesets are used by persisters
     * to INSERT/UPDATE the persistent entity state.
     *
     * {@link _entityUpdates}
     * If the entity is already fully MANAGED (has been fetched from the database before)
     * and any changes to its properties are detected, then a reference to the entity is stored
     * there to mark it for an update.
     *
     * {@link _collectionDeletions}
     * If a PersistentCollection has been de-referenced in a fully MANAGED entity,
     * then this collection is marked for deletion.
     *
     * @param ClassMetadata $class The class descriptor of the entity.
     * @param object $entity The entity for which to compute the changes.
     */",
 "/**
     * Computes all the changes that have been done to entities and collections
     * since the last commit and stores these changes in the _entityChangeSet map
     * temporarily for access by the persisters, until the UoW commit is finished.
     */",
 "/**
     * Computes the changes of an association.
     *
     * @param AssociationMapping $assoc
     * @param mixed $value The value of the association.
     */",
 "/**
     * INTERNAL:
     * Computes the changeset of an individual entity, independently of the
     * computeChangeSets() routine that is used at the beginning of a UnitOfWork#commit().
     *
     * The passed entity must be a managed entity. If the entity already has a change set
     * because this method is invoked during a commit cycle then the change sets are added.
     * whereby changes detected in this method prevail.
     *
     * @ignore
     * @param ClassMetadata $class The class descriptor of the entity.
     * @param object $entity The entity for which to (re)calculate the change set.
     * @throws InvalidArgumentException If the passed entity is not MANAGED.
     */",
 "/**
     * Executes all entity insertions for entities of the specified type.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
     * Executes all entity updates for entities of the specified type.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
     * Executes all entity deletions for entities of the specified type.
     *
     * @param \Doctrine\ORM\Mapping\ClassMetadata $class
     */",
 "/**
     * Gets the commit order.
     *
     * @return array
     */",
 "/**
     * Schedules an entity for insertion into the database.
     * If the entity already has an identifier, it will be added to the identity map.
     *
     * @param object $entity The entity to schedule for insertion.
     */",
 "/**
     * Checks whether an entity is scheduled for insertion.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * Schedules an entity for being updated.
     *
     * @param object $entity The entity to schedule for being updated.
     */",
 "/**
     * INTERNAL:
     * Schedules an extra update that will be executed immediately after the
     * regular entity updates within the currently running commit cycle.
     *
     * Extra updates for entities are stored as (entity, changeset) tuples.
     *
     * @ignore
     * @param object $entity The entity for which to schedule an extra update.
     * @param array $changeset The changeset of the entity (what to update).
     */",
 "/**
     * Checks whether an entity is registered as dirty in the unit of work.
     * Note: Is not very useful currently as dirty entities are only registered
     * at commit time.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * INTERNAL:
     * Schedules an entity for deletion.
     *
     * @param object $entity
     */",
 "/**
     * Checks whether an entity is registered as removed/deleted with the unit
     * of work.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * Checks whether an entity is scheduled for insertion, update or deletion.
     *
     * @param $entity
     * @return boolean
     */",
 "/**
     * INTERNAL:
     * Registers an entity in the identity map.
     * Note that entities in a hierarchy are registered with the class name of
     * the root entity.
     *
     * @ignore
     * @param object $entity  The entity to register.
     * @return boolean  TRUE if the registration was successful, FALSE if the identity of
     *                  the entity in question is already managed.
     */",
 "/**
     * Gets the state of an entity with regard to the current unit of work.
     *
     * @param object $entity
     * @param integer $assume The state to assume if the state is not yet known (not MANAGED or REMOVED).
     *                        This parameter can be set to improve performance of entity state detection
     *                        by potentially avoiding a database lookup if the distinction between NEW and DETACHED
     *                        is either known or does not matter for the caller of the method.
     * @return int The entity state.
     */",
 "/**
     * INTERNAL:
     * Removes an entity from the identity map. This effectively detaches the
     * entity from the persistence management of Doctrine.
     *
     * @ignore
     * @param object $entity
     * @return boolean
     */",
 "/**
     * INTERNAL:
     * Gets an entity in the identity map by its identifier hash.
     *
     * @ignore
     * @param string $idHash
     * @param string $rootClassName
     * @return object
     */",
 "/**
     * INTERNAL:
     * Tries to get an entity by its identifier hash. If no entity is found for
     * the given hash, FALSE is returned.
     *
     * @ignore
     * @param string $idHash
     * @param string $rootClassName
     * @return mixed The found entity or FALSE.
     */",
 "/**
     * Checks whether an entity is registered in the identity map of this UnitOfWork.
     *
     * @param object $entity
     * @return boolean
     */",
 "/**
     * INTERNAL:
     * Checks whether an identifier hash exists in the identity map.
     *
     * @ignore
     * @param string $idHash
     * @param string $rootClassName
     * @return boolean
     */",
 "/**
     * Persists an entity as part of the current unit of work.
     *
     * @param object $entity The entity to persist.
     */",
 "/**
     * Persists an entity as part of the current unit of work.
     *
     * This method is internally called during persist() cascades as it tracks
     * the already visited entities to prevent infinite recursions.
     *
     * @param object $entity The entity to persist.
     * @param array $visited The already visited entities.
     */",
 "/**
     * Deletes an entity as part of the current unit of work.
     *
     * @param object $entity The entity to remove.
     */",
 "/**
     * Deletes an entity as part of the current unit of work.
     *
     * This method is internally called during delete() cascades as it tracks
     * the already visited entities to prevent infinite recursions.
     *
     * @param object $entity The entity to delete.
     * @param array $visited The map of the already visited entities.
     * @throws InvalidArgumentException If the instance is a detached entity.
     */",
 "/**
     * Merges the state of the given detached entity into this UnitOfWork.
     *
     * @param object $entity
     * @return object The managed copy of the entity.
     * @throws OptimisticLockException If the entity uses optimistic locking through a version
     *         attribute and the version check against the managed copy fails.
     *
     * @todo Require active transaction!? OptimisticLockException may result in undefined state!?
     */",
 "/**
     * Executes a merge operation on an entity.
     *
     * @param object $entity
     * @param array $visited
     * @return object The managed copy of the entity.
     * @throws OptimisticLockException If the entity uses optimistic locking through a version
     *         attribute and the version check against the managed copy fails.
     * @throws InvalidArgumentException If the entity instance is NEW.
     */",
 "/**
     * Detaches an entity from the persistence management. It\'s persistence will
     * no longer be managed by Doctrine.
     *
     * @param object $entity The entity to detach.
     */",
 "/**
     * Executes a detach operation on the given entity.
     *
     * @param object $entity
     * @param array $visited
     */",
 "/**
     * Refreshes the state of the given entity from the database, overwriting
     * any local, unpersisted changes.
     *
     * @param object $entity The entity to refresh.
     * @throws InvalidArgumentException If the entity is not MANAGED.
     */",
 "/**
     * Executes a refresh operation on an entity.
     *
     * @param object $entity The entity to refresh.
     * @param array $visited The already visited entities during cascades.
     * @throws InvalidArgumentException If the entity is not MANAGED.
     */",
 "/**
     * Cascades a refresh operation to associated entities.
     *
     * @param object $entity
     * @param array $visited
     */",
 "/**
     * Cascades a detach operation to associated entities.
     *
     * @param object $entity
     * @param array $visited
     */",
 "/**
     * Cascades a merge operation to associated entities.
     *
     * @param object $entity
     * @param object $managedCopy
     * @param array $visited
     */",
 "/**
     * Cascades the save operation to associated entities.
     *
     * @param object $entity
     * @param array $visited
     * @param array $insertNow
     */",
 "/**
     * Cascades the delete operation to associated entities.
     *
     * @param object $entity
     * @param array $visited
     */",
 "/**
     * Acquire a lock on the given entity.
     *
     * @param object $entity
     * @param int $lockMode
     * @param int $lockVersion
     */",
 "/**
     * Gets the CommitOrderCalculator used by the UnitOfWork to order commits.
     *
     * @return \Doctrine\ORM\Internal\CommitOrderCalculator
     */",
 "/**
     * Clears the UnitOfWork.
     */",
 "/**
     * INTERNAL:
     * Schedules an orphaned entity for removal. The remove() operation will be
     * invoked on that entity at the beginning of the next commit of this
     * UnitOfWork.
     *
     * @ignore
     * @param object $entity
     */",
 "/**
     * INTERNAL:
     * Schedules a complete collection for removal when this UnitOfWork commits.
     *
     * @param PersistentCollection $coll
     */",
 "/**
     * INTERNAL:
     * Creates an entity. Used for reconstitution of persistent entities.
     *
     * @ignore
     * @param string $className The name of the entity class.
     * @param array $data The data for the entity.
     * @param array $hints Any hints to account for during reconstitution/lookup of the entity.
     * @return object The managed entity instance.
     * @internal Highly performance-sensitive method.
     *
     * @todo Rename: getOrCreateEntity
     */",
 "/**
     * @return void
     */",
 "/**
     * Initializes (loads) an uninitialized persistent collection of an entity.
     *
     * @param PeristentCollection $collection The collection to initialize.
     * @todo Maybe later move to EntityManager#initialize($proxyOrCollection). See DDC-733.
     */",
 "/**
     * Gets the identity map of the UnitOfWork.
     *
     * @return array
     */",
 "/**
     * Gets the original data of an entity. The original data is the data that was
     * present at the time the entity was reconstituted from the database.
     *
     * @param object $entity
     * @return array
     */",
 "/**
     * @ignore
     */",
 "/**
     * INTERNAL:
     * Sets a property value of the original data array of an entity.
     *
     * @ignore
     * @param string $oid
     * @param string $property
     * @param mixed $value
     */",
 "/**
     * Gets the identifier of an entity.
     * The returned value is always an array of identifier values. If the entity
     * has a composite identifier then the identifier values are in the same
     * order as the identifier field names as returned by ClassMetadata#getIdentifierFieldNames().
     *
     * @param object $entity
     * @return array The identifier values.
     */",
 "/**
     * Tries to find an entity with the given identifier in the identity map of
     * this UnitOfWork.
     *
     * @param mixed $id The entity identifier to look for.
     * @param string $rootClassName The name of the root class of the mapped entity hierarchy.
     * @return mixed Returns the entity with the specified identifier if it exists in
     *               this UnitOfWork, FALSE otherwise.
     */",
 "/**
     * Schedules an entity for dirty-checking at commit-time.
     *
     * @param object $entity The entity to schedule for dirty-checking.
     * @todo Rename: scheduleForSynchronization
     */",
 "/**
     * Checks whether the UnitOfWork has any pending insertions.
     *
     * @return boolean TRUE if this UnitOfWork has pending insertions, FALSE otherwise.
     */",
 "/**
     * Calculates the size of the UnitOfWork. The size of the UnitOfWork is the
     * number of entities in the identity map.
     *
     * @return integer
     */",
 "/**
     * Gets the EntityPersister for an Entity.
     *
     * @param string $entityName  The name of the Entity.
     * @return \Doctrine\ORM\Persisters\AbstractEntityPersister
     */",
 "/**
     * Gets a collection persister for a collection-valued association.
     *
     * @param AssociationMapping $association
     * @return AbstractCollectionPersister
     */",
 "/**
     * INTERNAL:
     * Registers an entity as managed.
     *
     * @param object $entity The entity.
     * @param array $id The identifier values.
     * @param array $data The original entity data.
     */",
 "/**
     * INTERNAL:
     * Clears the property changeset of the entity with the given OID.
     *
     * @param string $oid The entity\'s OID.
     */",
 "/**
     * Notifies this UnitOfWork of a property change in an entity.
     *
     * @param object $entity The entity that owns the property.
     * @param string $propertyName The name of the property that changed.
     * @param mixed $oldValue The old value of the property.
     * @param mixed $newValue The new value of the property.
     */",
 "/**
     * Gets the currently scheduled entity insertions in this UnitOfWork.
     *
     * @return array
     */",
 "/**
     * Gets the currently scheduled entity updates in this UnitOfWork.
     *
     * @return array
     */",
 "/**
     * Gets the currently scheduled entity deletions in this UnitOfWork.
     *
     * @return array
     */",
 "/**
     * Get the currently scheduled complete collection deletions
     *
     * @return array
     */",
 "/**
     * Gets the currently scheduled collection inserts, updates and deletes.
     *
     * @return array
     */",
 "/**
     * Helper method to initialize a lazy loading proxy or persistent collection.
     *
     * @param object
     * @return void
     */",
 "/**
     * Helper method to show an object as string.
     *
     * @param  object $obj
     * @return string
     */",
 "/**
     * Marks an entity as read-only so that it will not be considered for updates during UnitOfWork#commit().
     *
     * This operation cannot be undone as some parts of the UnitOfWork now keep gathering information
     * on this object that might be necessary to perform a correct udpate.
     *
     * @throws \InvalidArgumentException
     * @param $object
     * @return void
     */",
 "/**
     * Is this entity read only?
     *
     * @throws \InvalidArgumentException
     * @param $object
     * @return void
     */",
 "/**
 * The UnitOfWork is responsible for tracking changes to objects during an
 * \"object-level\" transaction and for writing out changes to the database
 * in the correct order.
 *
 * @since       2.0
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 * @internal    This class contains highly performance-sensitive code.
 */",
 "/**
     * Constructor.
     *
     * @param SessionStorageInterface $storage       A SessionStorageInterface instance
     * @param string                  $defaultLocale The default locale
     */",
 "/**
     * Starts the session storage.
     *
     * @api
     */",
 "/**
     * Checks if an attribute is defined.
     *
     * @param string $name The attribute name
     *
     * @return Boolean true if the attribute is defined, false otherwise
     *
     * @api
     */",
 "/**
     * Returns an attribute.
     *
     * @param string $name    The attribute name
     * @param mixed  $default The default value
     *
     * @return mixed
     *
     * @api
     */",
 "/**
     * Sets an attribute.
     *
     * @param string $name
     * @param mixed  $value
     *
     * @api
     */",
 "/**
     * Returns attributes.
     *
     * @return array Attributes
     *
     * @api
     */",
 "/**
     * Sets attributes.
     *
     * @param array $attributes Attributes
     *
     * @api
     */",
 "/**
     * Removes an attribute.
     *
     * @param string $name
     *
     * @api
     */",
 "/**
     * Clears all attributes.
     *
     * @api
     */",
 "/**
     * Invalidates the current session.
     *
     * @api
     */",
 "/**
     * Migrates the current session to a new session id while maintaining all
     * session attributes.
     *
     * @api
     */",
 "/**
     * Returns the session ID
     *
     * @return mixed  The session ID
     *
     * @api
     */",
 "/**
     * Returns the locale
     *
     * @return string
     */",
 "/**
     * Sets the locale.
     *
     * @param string $locale
     */",
 "/**
     * Gets the flash messages.
     *
     * @return array
     */",
 "/**
     * Sets the flash messages.
     *
     * @param array $values
     */",
 "/**
     * Gets a flash message.
     *
     * @param string      $name
     * @param string|null $default
     *
     * @return string
     */",
 "/**
     * Sets a flash message.
     *
     * @param string $name
     * @param string $value
     */",
 "/**
     * Checks whether a flash message exists.
     *
     * @param string $name
     *
     * @return Boolean
     */",
 "/**
     * Removes a flash message.
     *
     * @param string $name
     */",
 "/**
     * Removes the flash messages.
     */",
 "/**
     * This method should be called when you don\'t want the session to be saved
     * when the Session object is garbaged collected (useful for instance when
     * you want to simulate the interaction of several users/sessions in a single
     * PHP process).
     */",
 "/**
 * Session.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Set the character set used in this CharacterStream.
   * @param string $charset
   */",
 "/**
   * Set the CharacterReaderFactory for multi charset support.
   * @param Swift_CharacterReaderFactory $factory
   */",
 "/**
   * Overwrite this character stream using the byte sequence in the byte stream.
   * @param Swift_OutputByteStream $os output stream to read from
   */",
 "/**
   * Import a string a bytes into this CharacterStream, overwriting any existing
   * data in the stream.
   * @param string $string
   */",
 "/**
   * Read $length characters from the stream and move the internal pointer
   * $length further into the stream.
   * @param int $length
   * @return string
   */",
 "/**
   * Read $length characters from the stream and return a 1-dimensional array
   * containing there octet values.
   * @param int $length
   * @return int[]
   */",
 "/**
   * Write $chars to the end of the stream.
   * @param string $chars
   */",
 "/**
   * Move the internal pointer to $charOffset in the stream.
   * @param int $charOffset
   */",
 "/**
   * Empty the stream and reset the internal pointer.
   */",
 "/**
 * An abstract means of reading and writing data in terms of characters as opposed
 * to bytes.
 * Classes implementing this interface may use a subsystem which requires less
 * memory than working with large strings of data.
 * @package Swift
 * @subpackage CharacterStream
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param string $id The parameter key
     */",
 "/**
     * __toString.
     *
     * @return string The parameter key
     */",
 "/**
 * Parameter represents a parameter reference.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Returns a list of filters.
     *
     * @return array
     */",
 "/**
     * Name of this extension
     *
     * @return string
     */",
 "/**
 * This file is part of Twig.
 *
 * (c) 2009 Fabien Potencier
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author Henrik Bjornskov <hb@peytz.dk>
 * @package Twig
 * @subpackage Twig-extensions
 */",
 "/**
     * Accepts the information of the uploaded file as provided by the PHP global $_FILES.
     *
     * The file object is only created when the uploaded file is valid (i.e. when the
     * isValid() method returns true). Otherwise the only methods that could be called
     * on an UploadedFile instance are:
     *
     *   * getClientOriginalName,
     *   * getClientMimeType,
     *   * isValid,
     *   * getError.
     *
     * Calling any other method on an non-valid instance will cause an unpredictable result.
     *
     * @param string  $path         The full temporary path to the file
     * @param string  $originalName The original file name
     * @param string  $mimeType     The type of the file as provided by PHP
     * @param integer $size         The file size
     * @param integer $error        The error constant of the upload (one of PHP\'s UPLOAD_ERR_XXX constants)
     * @param Boolean $test         Whether the test mode is active
     *
     * @throws FileException         If file_uploads is disabled
     * @throws FileNotFoundException If the file does not exist
     *
     * @api
     */",
 "/**
     * Returns the original file name.
     *
     * It is extracted from the request from which the file has been uploaded.
     * Then is should not be considered as a safe value.
     *
     * @return string|null The original name
     *
     * @api
     */",
 "/**
     * Returns the file mime type.
     *
     * It is extracted from the request from which the file has been uploaded.
     * Then is should not be considered as a safe value.
     *
     * @return string|null The mime type
     *
     * @api
     */",
 "/**
     * Returns the file size.
     *
     * It is extracted from the request from which the file has been uploaded.
     * Then is should not be considered as a safe value.
     *
     * @return integer|null The file size
     *
     * @api
     */",
 "/**
     * Returns the upload error.
     *
     * If the upload was successful, the constant UPLOAD_ERR_OK is returned.
     * Otherwise one of the other UPLOAD_ERR_XXX constants is returned.
     *
     * @return integer The upload error
     *
     * @api
     */",
 "/**
     * Returns whether the file was uploaded successfully.
     *
     * @return Boolean  True if no error occurred during uploading
     *
     * @api
     */",
 "/**
     * Moves the file to a new location.
     *
     * @param string $directory The destination folder
     * @param string $name      The new file name
     *
     * @return File A File object representing the new file
     *
     * @throws FileException if the file has not been uploaded via Http
     *
     * @api
     */",
 "/**
     * Returns the maximum size of an uploaded file as configured in php.ini
     *
     * @return type The maximum size of an uploaded file in bytes
     */",
 "/**
 * A file uploaded through a form.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Get the name of the AUTH mechanism this Authenticator handles.
   * @return string
   */",
 "/**
   * Try to authenticate the user with $username and $password.
   * @param Swift_Transport_SmtpAgent $agent
   * @param string $username
   * @param string $password
   * @return boolean
   */",
 "/**
   * Generate a CRAM-MD5 response from a server challenge.
   * @param string $secret
   * @param string $challenge
   * @return string
   */",
 "/**
 * Handles CRAM-MD5 authentication.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Constructor.
     *
     * @param string $sprocketsLib Path to the Sprockets lib/ directory
     * @param string $rubyBin      Path to the ruby binary
     */",
 "/**
     * Hack around a bit, get the job done.
     */",
 "/**
 * Runs assets through Sprockets.
 *
 * Requires Sprockets 1.0.x.
 *
 * @link http://getsprockets.org/
 * @link http://github.com/sstephenson/sprockets/tree/1.0.x
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
 * Exception thrown when an ORM query unexpectedly returns more than one result.
 * 
 * @author robo
 * @since 2.0
 */",
 "/**
 * This exception is thrown whenever you change shared properties of more than
 * one ACL of the same class type concurrently.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Renders the template with the given context and returns it as string.
     *
     * @param array $context An array of parameters to pass to the template
     *
     * @return string The rendered template
     */",
 "/**
     * Displays the template with the given context.
     *
     * @param array $context An array of parameters to pass to the template
     * @param array $blocks  An array of blocks to pass to the template
     */",
 "/**
     * Returns the bound environment for this template.
     *
     * @return Twig_Environment The current environment
     */",
 "/**
 * Interface implemented by all compiled templates.
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
 * SensioFrameworkExtraExtension.
 *
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     */",
 "/**
     * Handles digest authentication.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */",
 "/**
     * Attempts to switch to another user.
     *
     * @param Request $request A Request instance
     *
     * @return TokenInterface|null The new TokenInterface if successfully switched, null otherwise
     */",
 "/**
     * Attempts to exit from an already switched user.
     *
     * @param Request $request A Request instance
     *
     * @return TokenInterface The original TokenInterface instance
     */",
 "/**
     * Gets the original Token from a switched one.
     *
     * @param TokenInterface $token A switched TokenInterface instance
     *
     * @return TokenInterface|false The original TokenInterface instance, false if the current TokenInterface is not switched
     */",
 "/**
 * SwitchUserListener allows a user to impersonate another one temporarily
 * (like the Unix su command).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * FromClause ::= \"FROM\" IdentificationVariableDeclaration {\",\" IdentificationVariableDeclaration}
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * The user array is a hash where the keys are usernames and the values are
     * an array of attributes: \'password\', \'enabled\', and \'roles\'.
     *
     * @param array $users An array of users
     */",
 "/**
     * Adds a new User to the provider.
     *
     * @param UserInterface $user A UserInterface instance
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * InMemoryUserProvider is a simple non persistent user provider.
 *
 * Useful for testing, demonstration, prototyping, and for simple needs
 * (a backend with a unique admin for instance)
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @param ClassMetadata $classMetadata
     * @param Schema $schema
     * @param Table $classTable
     */",
 "/**
     * @return ClassMetadata
     */",
 "/**
     * @return Schema
     */",
 "/**
     * @return Table
     */",
 "/**
 * Event Args used for the Events::postGenerateSchemaTable event.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
   * Create a new CommandEvent for $source with $command.
   * @param Swift_Transport $source
   * @param string $command
   * @param array $successCodes
   */",
 "/**
   * Get the command which was sent to the server.
   * @return string
   */",
 "/**
   * Get the numeric response codes which indicate success for this command.
   * @return int[]
   */",
 "/**
 * Generated when a command is sent over an SMTP connection.
 * @package Swift
 * @subpackage Events
 * @author Chris Corbyn
 */",
 "/**
     * Gets the entity that caused the exception.
     *
     * @return object
     */",
 "/**
 * An OptimisticLockException is thrown when a version check on an object
 * that uses optimistic locking through a version field fails.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @since 2.0
 */",
 "/**
     * Constructor
     *
     * @param array $bundles An array of bundle names
     */",
 "/**
     * Generates the configuration tree builder.
     *
     * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
     */",
 "/**
 * This class contains the configuration information for the bundle
 *
 * This information is solely responsible for how the different configuration
 * sections are normalized, and merged.
 *
 * @author Christophe Coevoet <stof@notk.org>
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * This pass removes services associated with unused templating engines.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Invalidate the current session
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token
     *
     * @return void
     */",
 "/**
 * Handler for clearing invalidating the current session.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @see Command
     */",
 "/**
*@seeCommand
*/",
 "/**
*GeneratesaformtypeclassforagivenDoctrineentity.
*
*@authorFabienPotencier<fabien@symfony.com>
*@authorHugoHamon<hugo.hamon@sensio.com>
*/",
 "/**
     * Constructor.
     *
     * @param array           $parameters An array of parameters
     * @param InputDefinition $definition A InputDefinition instance
     *
     * @api
     */",
 "/**
     * Returns the first argument from the raw parameters (not parsed).
     *
     * @return string The value of the first argument or null otherwise
     */",
 "/**
     * Returns true if the raw parameters (not parsed) contain a value.
     *
     * This method is to be used to introspect the input parameters
     * before they have been validated. It must be used carefully.
     *
     * @param string|array $values The values to look for in the raw parameters (can be an array)
     *
     * @return Boolean true if the value is contained in the raw parameters
     */",
 "/**
     * Returns the value of a raw option (not parsed).
     *
     * This method is to be used to introspect the input parameters
     * before they have been validated. It must be used carefully.
     *
     * @param string|array $values The value(s) to look for in the raw parameters (can be an array)
     * @param mixed $default The default value to return if no result is found
     *
     * @return mixed The option value
     */",
 "/**
     * Processes command line arguments.
     */",
 "/**
     * Adds a short option value.
     *
     * @param string $shortcut The short option key
     * @param mixed  $value    The value for the option
     *
     * @throws \InvalidArgumentException When option given doesn\'t exist
     */",
 "/**
     * Adds a long option value.
     *
     * @param string $name  The long option key
     * @param mixed  $value The value for the option
     *
     * @throws \InvalidArgumentException When option given doesn\'t exist
     * @throws \InvalidArgumentException When a required value is missing
     */",
 "/**
     * Adds an argument value.
     *
     * @param string $name  The argument name
     * @param mixed  $value The value for the argument
     *
     * @throws \InvalidArgumentException When argument given doesn\'t exist
     */",
 "/**
 * ArrayInput represents an input provided as an array.
 *
 * Usage:
 *
 *     $input = new ArrayInput(array(\'name\' => \'foo\', \'--bar\' => \'foobar\'));
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Checks a configuration.
 */",
 "/**
     * Clears all parameters.
     *
     * @api
     */",
 "/**
     * Adds parameters to the service container parameters.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */",
 "/**
     * Gets the service container parameters.
     *
     * @return array An array of parameters
     *
     * @api
     */",
 "/**
     * Gets a service container parameter.
     *
     * @param string $name The parameter name
     *
     * @return mixed  The parameter value
     *
     * @throws ParameterNotFoundException if the parameter is not defined
     *
     * @api
     */",
 "/**
     * Sets a service container parameter.
     *
     * @param string $name  The parameter name
     * @param mixed  $value The parameter value
     *
     * @api
     */",
 "/**
     * Returns true if a parameter name is defined.
     *
     * @param  string  $name       The parameter name
     *
     * @return Boolean true if the parameter name is defined, false otherwise
     *
     * @api
     */",
 "/**
     * Replaces parameter placeholders (%name%) by their values for all parameters.
     */",
 "/**
     * Replaces parameter placeholders (%name%) by their values.
     *
     * @param  mixed $value A value
     *
     * @throws ParameterNotFoundException if a placeholder references a parameter that does not exist
     */",
 "/**
 * ParameterBagInterface.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Constructs the Sqlsrv PDO DSN.
     *
     * @return string  The DSN.
     */",
 "/**
 * The PDO-based Sqlsrv driver.
 *
 * @since 2.0
 */",
 "/** @override */",
 "/** @override */",
 "/** @override */",
 "/**
 * Type that maps an SQL VARCHAR to a PHP string.
 *
 * @since 2.0
 */",
 "/**
 * CoalesceExpression ::= \"COALESCE\" \"(\" ScalarExpression {\",\" ScalarExpression}* \")\"
 *
 * @since   2.1
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * WhereClause ::= \"WHERE\" ConditionalExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Makes an access decision after the invocation of a method
     *
     * @param TokenInterface $token
     * @param object $secureObject
     * @param array $attributes
     * @param mixed $returnedValue the value that was returned by the method invocation
     * @return mixed the filter return value
     */",
 "/**
     * Determines whether the given attribute is supported
     *
     * @param string $attribute
     * @return Boolean
     */",
 "/**
     * Determines whether the given class is supported
     *
     * @param string $className the class of the secure object
     * @return Boolean
     */",
 "/**
 * AfterInvocationManagerInterface
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Returns the complete charactermap
   *
   * @param string $string
   * @param int $startOffset
   * @param array $currentMap
   * @param mixed $ignoredChars
   * @return int
   */",
 "/**
   * Returns mapType
   * @int mapType
   */",
 "/**
   * Returns an integer which specifies how many more bytes to read.
   * A positive integer indicates the number of more bytes to fetch before invoking
   * this method again.
   * A value of zero means this is already a valid character.
   * A value of -1 means this cannot possibly be a valid character.
   * @param int[] $bytes
   * @return int
   */",
 "/**
   * Returns the number of bytes which should be read to start each character.
   * For fixed width character sets this should be the number of
   * octets-per-character. For multibyte character sets this will probably be 1.
   * @return int
   */",
 "/**
 * Analyzes characters for a specific character set.
 * @package Swift
 * @subpackage Encoder
 * @author Chris Corbyn
 * @author Xavier De Cock <xdecock@gmail.com>
 */",
 "/**
     * Constructor.
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * PreAuthenticatedToken implements a pre-authenticated token.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * Any array key in $messageParameters will be used as a placeholder in
     * $messageTemplate.
     * @see Symfony\Component\Translation\Translator
     *
     * @param string $messageTemplate      The template for the error message
     * @param array $messageParameters     The parameters that should be
     *                                     substituted in the message template.
     */",
 "/**
     * Returns the error message template
     *
     * @return string
     */",
 "/**
     * Returns the parameters to be inserted in the message template
     *
     * @return array
     */",
 "/**
 * Wraps errors in forms
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 */",
 "/**
     * Returns an array of events this subscriber wants to listen to.
     *
     * @return array
     */",
 "/**
 * An EventSubscriber knows himself what events he is interested in.
 * If an EventSubscriber is added to an EventManager, the manager invokes
 * {@link getSubscribedEvents} and registers the subscriber as a listener for all
 * returned events.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Validator functions.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param ServiceReferenceGraphNode $sourceNode
     * @param ServiceReferenceGraphNode $destNode
     * @param string $value
     */",
 "/**
     * Returns the value of the edge
     *
     * @return ServiceReferenceGraphNode
     */",
 "/**
     * Returns the source node
     *
     * @return ServiceReferenceGraphNode
     */",
 "/**
     * Returns the destination node
     *
     * @return ServiceReferenceGraphNode
     */",
 "/**
 * Represents an edge in your service graph.
 *
 * Value is typically a reference.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $headers An array of HTTP headers
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Sets a cookie.
     *
     * @param Cookie $cookie
     *
     * @return void
     *
     * @api
     */",
 "/**
     * Removes a cookie from the array, but does not unset it in the browser
     *
     * @param string $name
     * @param string $path
     * @param string $domain
     *
     * @return void
     *
     * @api
     */",
 "/**
     * Returns an array with all cookies
     *
     * @param string $format
     *
     * @throws \InvalidArgumentException When the $format is invalid
     *
     * @return array
     *
     * @api
     */",
 "/**
     * Clears a cookie in the browser
     *
     * @param string $name
     * @param string $path
     * @param string $domain
     *
     * @return void
     *
     * @api
     */",
 "/**
     * Returns the calculated value of the cache-control header.
     *
     * This considers several other headers and calculates or modifies the
     * cache-control header to a sensible, conservative value.
     *
     * @return string
     */",
 "/**
 * ResponseHeaderBag is a container for Response HTTP headers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
 * Returns the value or the default value when it is undefined or empty.
 *
 * <pre>
 *  {{ var.foo|default(\'foo item on var is not defined\') }}
 * </pre>
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Decides whether the access is possible or not.
     *
     * @param TokenInterface $token      A TokenInterface instance
     * @param array          $attributes An array of attributes associated with the method being invoked
     * @param object         $object     The object to secure
     *
     * @return Boolean true if the access is granted, false otherwise
     */",
 "/**
     * Checks if the access decision manager supports the given attribute.
     *
     * @param string $attribute An attribute
     *
     * @return Boolean true if this decision manager supports the attribute, false otherwise
     */",
 "/**
     * Checks if the access decision manager supports the given class.
     *
     * @param string $class A class name
     *
     * @return true if this decision manager can process the class
     */",
 "/**
 * AccessDecisionManagerInterface makes authorization decisions.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Command to drop the database schema for a set of classes based on their mappings.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */",
 "/**
     * Injects the web debug toolbar into the given Response.
     *
     * @param Response $response A Response instance
     */",
 "/**
 * WebDebugToolbarListener injects the Web Debug Toolbar.
 *
 * The onKernelResponse method must be connected to the kernel.response event.
 *
 * The WDT is only injected on well-formed HTML (with a proper </body> tag).
 * This means that the WDT is never included in sub-requests or ESI requests.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param array $data Key-value for properties to be defined in this class
     */",
 "/**
     * Error handler for unknown property accessor in Annotation class.
     *
     * @param string $name Unknown property name
     */",
 "/**
     * Error handler for unknown property mutator in Annotation class.
     *
     * @param string $name Unkown property name
     * @param mixed $value Property value
     */",
 "/**
 * Annotations class
 *
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * SelectExpression ::= IdentificationVariable [\".\" \"*\"] | StateFieldPathExpression |
 *	                    (AggregateExpression | \"(\" Subselect \")\") [[\"AS\"] FieldAliasIdentificationVariable]
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * Represents the metadata for the entire class hierarchy.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
   * Create a new NullTransport.
   */",
 "/**
   * Create a new NullTransport instance.
   * @return Swift_NullTransport
   */",
 "/**
 * Pretends messages have been sent, but just ignores them.
 * @package Swift
 * @author  Fabien Potencier
 */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
 * Base filter for the Google Closure Compiler implementations.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * @param array $handlers Array of Handlers.
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Forwards records to multiple handlers
 *
 * @author Lenar L??hmus <lenar@city.ee>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
   * Perform any initialization needed, using the given $params.
   * Parameters will vary depending upon the type of IoBuffer used.
   * @param array $params
   */",
 "/**
   * Set an individual param on the buffer (e.g. switching to SSL).
   * @param string $param
   * @param mixed $value
   */",
 "/**
   * Perform any shutdown logic needed.
   */",
 "/**
   * Set an array of string replacements which should be made on data written
   * to the buffer.  This could replace LF with CRLF for example.
   * @param string[] $replacements
   */",
 "/**
   * Get a line of output (including any CRLF).
   * The $sequence number comes from any writes and may or may not be used
   * depending upon the implementation.
   * @param int $sequence of last write to scan from
   * @return string
   */",
 "/**
 * Buffers input and output to a resource.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Sets the request context.
     *
     * @param RequestContext $context The context
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Gets the SQL statements that are executed by the executor.
     *
     * @return array  All the SQL update statements.
     */",
 "/**
     * Executes all sql statements.
     *
     * @param \Doctrine\DBAL\Connection $conn The database connection that is used to execute the queries.
     * @param array $params  The parameters.
     * @return \Doctrine\DBAL\Driver\Statement
     */",
 "/**
 * Base class for SQL statement executors.
 *
 * @author      Roman Borschel <roman@code-factory.org>
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        http://www.doctrine-project.org
 * @since       2.0
 * @todo Rename: AbstractSQLExecutor
 */",
 "/**
     * Constructs a new file from the given path.
     *
     * @param string  $path      The path to the file
     * @param Boolean $checkPath Whether to check the path or not
     *
     * @throws FileNotFoundException If the given path is not a file
     *
     * @api
     */",
 "/**
     * Returns the extension based on the mime type.
     *
     * If the mime type is unknown, returns null.
     *
     * @return string|null The guessed extension or null if it cannot be guessed
     *
     * @api
     */",
 "/**
     * Returns the mime type of the file.
     *
     * The mime type is guessed using the functions finfo(), mime_content_type()
     * and the system binary \"file\" (in this order), depending on which of those
     * is available on the current operating system.
     *
     * @return string|null The guessed mime type (i.e. \"application/pdf\")
     *
     * @api
     */",
 "/**
     * Returns the extension of the file.
     *
     * \SplFileInfo::getExtension() is not available before PHP 5.3.6
     *
     * @return string The extension
     *
     * @api
     */",
 "/**
     * Moves the file to a new location.
     *
     * @param string $directory The destination folder
     * @param string $name      The new file name
     *
     * @return File A File object representing the new file
     *
     * @throws FileException if the target file could not be created
     *
     * @api
     */",
 "/**
 * A file in the file system.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
 * Represent the change of a column
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     * @param mixed              $resource  The main resource to load
     * @param array              $options   An array of options
     * @param RequestContext     $context   The context
     * @param array              $defaults  The default values
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * This Router only creates the Loader only when the cache is empty.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new EsmtpTransport using the given I/O buffer.
   * @param Swift_Transport_IoBuffer $buf
   * @param Swift_Transport_EsmtpHandler[] $extensionHandlers
   * @param Swift_Events_EventDispatcher $dispatcher
   */",
 "/**
   * Set the host to connect to.
   * @param string $host
   * @return Swift_Transport_EsmtpTransport
   */",
 "/**
   * Get the host to connect to.
   * @return string
   */",
 "/**
   * Set the port to connect to.
   * @param int $port
   * @return Swift_Transport_EsmtpTransport
   */",
 "/**
   * Get the port to connect to.
   * @return int
   */",
 "/**
   * Set the connection timeout.
   * @param int $timeout seconds
   * @return Swift_Transport_EsmtpTransport
   */",
 "/**
   * Get the connection timeout.
   * @return int
   */",
 "/**
   * Set the encryption type (tls or ssl)
   * @param string $encryption
   * @return Swift_Transport_EsmtpTransport
   */",
 "/**
   * Get the encryption type.
   * @return string
   */",
 "/**
   * Sets the sourceIp
   * @param string $source
   * @return Swift_Transport_EsmtpTransport
   */",
 "/**
   * Returns the ip used to connect to the destination
   * @return string
   */",
 "/**
   * Set ESMTP extension handlers.
   * @param Swift_Transport_EsmtpHandler[] $handlers
   * @return Swift_Transport_EsmtpTransport
   */",
 "/**
   * Get ESMTP extension handlers.
   * @return Swift_Transport_EsmtpHandler[]
   */",
 "/**
   * Run a command against the buffer, expecting the given response codes.
   * If no response codes are given, the response will not be validated.
   * If codes are given, an exception will be thrown on an invalid response.
   * @param string $command
   * @param int[] $codes
   * @param string[] &$failures
   * @return string
   */",
 "/** Mixin handling method for ESMTP handlers */",
 "/** Get the params to initialize the buffer */",
 "/** Overridden to perform EHLO instead */",
 "/** Overridden to add Extension support */",
 "/** Overridden to add Extension support */",
 "/** Determine ESMTP capabilities by function group */",
 "/** Set parameters which are used by each extension handler */",
 "/** Get ESMTP handlers which are currently ok to use */",
 "/** Custom sort for extension handler ordering */",
 "/**
 * Sends Messages over SMTP with ESMTP support.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/** @override */",
 "/** @override */",
 "/**
 * Hydrator that produces flat, rectangular results of scalar data.
 * The created result is almost the same as a regular SQL result set, except
 * that column names are mapped to field names and data type conversions take place.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * Creates a new EntityManager that operates on the given database connection
     * and uses the given Configuration and EventManager implementations.
     *
     * @param \Doctrine\DBAL\Connection $conn
     * @param \Doctrine\ORM\Configuration $config
     * @param \Doctrine\Common\EventManager $eventManager
     */",
 "/**
     * Gets the database connection object used by the EntityManager.
     *
     * @return \Doctrine\DBAL\Connection
     */",
 "/**
     * Gets the metadata factory used to gather the metadata of classes.
     *
     * @return \Doctrine\ORM\Mapping\ClassMetadataFactory
     */",
 "/**
     * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
     *
     * Example:
     *
     * <code>
     *     $qb = $em->createQueryBuilder();
     *     $expr = $em->getExpressionBuilder();
     *     $qb->select(\'u\')->from(\'User\', \'u\')
     *         ->where($expr->orX($expr->eq(\'u.id\', 1), $expr->eq(\'u.id\', 2)));
     * </code>
     *
     * @return \Doctrine\ORM\Query\Expr
     */",
 "/**
     * Starts a transaction on the underlying database connection.
     *
     * @deprecated Use {@link getConnection}.beginTransaction().
     */",
 "/**
     * Executes a function in a transaction.
     *
     * The function gets passed this EntityManager instance as an (optional) parameter.
     *
     * {@link flush} is invoked prior to transaction commit.
     *
     * If an exception occurs during execution of the function or flushing or transaction commit,
     * the transaction is rolled back, the EntityManager closed and the exception re-thrown.
     *
     * @param Closure $func The function to execute transactionally.
     */",
 "/**
     * Commits a transaction on the underlying database connection.
     *
     * @deprecated Use {@link getConnection}.commit().
     */",
 "/**
     * Performs a rollback on the underlying database connection.
     *
     * @deprecated Use {@link getConnection}.rollback().
     */",
 "/**
     * Returns the ORM metadata descriptor for a class.
     *
     * The class name must be the fully-qualified class name without a leading backslash
     * (as it is returned by get_class($obj)) or an aliased class name.
     *
     * Examples:
     * MyProject\Domain\\User
     * sales:PriceRequest
     *
     * @return \Doctrine\ORM\Mapping\ClassMetadata
     * @internal Performance-sensitive method.
     */",
 "/**
     * Creates a new Query object.
     *
     * @param string  The DQL string.
     * @return \Doctrine\ORM\Query
     */",
 "/**
     * Creates a Query from a named query.
     *
     * @param string $name
     * @return \Doctrine\ORM\Query
     */",
 "/**
     * Creates a native SQL query.
     *
     * @param string $sql
     * @param ResultSetMapping $rsm The ResultSetMapping to use.
     * @return NativeQuery
     */",
 "/**
     * Creates a NativeQuery from a named native query.
     *
     * @param string $name
     * @return \Doctrine\ORM\NativeQuery
     */",
 "/**
     * Create a QueryBuilder instance
     *
     * @return QueryBuilder $qb
     */",
 "/**
     * Flushes all changes to objects that have been queued up to now to the database.
     * This effectively synchronizes the in-memory state of managed objects with the
     * database.
     *
     * @throws \Doctrine\ORM\OptimisticLockException If a version check on an entity that
     *         makes use of optimistic locking fails.
     */",
 "/**
     * Finds an Entity by its identifier.
     *
     * This is just a convenient shortcut for getRepository($entityName)->find($id).
     *
     * @param string $entityName
     * @param mixed $identifier
     * @param int $lockMode
     * @param int $lockVersion
     * @return object
     */",
 "/**
*Getsareferencetotheentityidentifiedbythegiventypeandidentifier
*withoutactuallyloadingit,iftheentityisnotyetloaded.
*
*@paramstring$entityNameThenameoftheentitytype.
*@parammixed$identifierTheentityidentifier.
*@returnobjectTheentityreference.
*/",
 "/**
*Getsapartialreferencetotheentityidentifiedbythegiventypeandidentifier
*withoutactuallyloadingit,iftheentityisnotyetloaded.
*
*Thereturnedreferencemaybeapartialobjectiftheentityisnotyetloaded/managed.
*Ifitisapartialobjectitwillnotinitializetherestoftheentitystateonaccess.
*Thusyoucanonlyeversafelyaccesstheidentifierofanentityobtainedthrough
*thismethod.
*
*Theuse-casesforpartialreferencesinvolvemaintainingbidirectionalassociations
*withoutloadingonesideoftheassociationortoupdateanentitywithoutloadingit.
*Note,however,thatinthelattercasetheoriginal(persistent)entitydatawill
*neverbevisibletotheapplication(especiallynoteventlisteners)asitwill
*neverbeloadedinthefirstplace.
*
*@paramstring$entityNameThenameoftheentitytype.
*@parammixed$identifierTheentityidentifier.
*@returnobjectThe(partial)entityreference.
*/",
 "/**
*ClearstheEntityManager.Allentitiesthatarecurrentlymanaged
*bythisEntityManagerbecomedetached.
*
*@paramstring$entityName
*/",
 "/**
*ClosestheEntityManager.Allentitiesthatarecurrentlymanaged
*bythisEntityManagerbecomedetached.TheEntityManagermaynolonger
*beusedafteritisclosed.
*/",
 "/**
*TellstheEntityManagertomakeaninstancemanagedandpersistent.
*
*Theentitywillbeenteredintothedatabaseatorbeforetransaction
*commitorasaresultoftheflushoperation.
*
*NOTE:Thepersistoperationalwaysconsidersentitiesthatarenotyetknownto
*thisEntityManagerasNEW.Donotpassdetachedentitiestothepersistoperation.
*
*@paramobject$objectTheinstancetomakemanagedandpersistent.
*/",
 "/**
*Removesanentityinstance.
*
*Aremovedentitywillberemovedfromthedatabaseatorbeforetransactioncommit
*orasaresultoftheflushoperation.
*
*@paramobject$entityTheentityinstancetoremove.
*/",
 "/**
*Refreshesthepersistentstateofanentityfromthedatabase,
*overridinganylocalchangesthathavenotyetbeenpersisted.
*
*@paramobject$entityTheentitytorefresh.
*/",
 "/**
*DetachesanentityfromtheEntityManager,causingamanagedentityto
*becomedetached.Unflushedchangesmadetotheentityifany
*(includingremovaloftheentity),willnotbesynchronizedtothedatabase.
*Entitieswhichpreviouslyreferencedthedetachedentitywillcontinueto
*referenceit.
*
*@paramobject$entityTheentitytodetach.
*/",
 "/**
*Mergesthestateofadetachedentityintothepersistencecontext
*ofthisEntityManagerandreturnsthemanagedcopyoftheentity.
*Theentitypassedtomergewillnotbecomeassociated/managedwiththisEntityManager.
*
*@paramobject$entityThedetachedentitytomergeintothepersistencecontext.
*@returnobjectThemanagedcopyoftheentity.
*/",
 "/**
*Createsacopyofthegivenentity.Cancreateashalloworadeepcopy.
*
*@paramobject$entityTheentitytocopy.
*@returnobjectThenewentity.
*@todoImplementationneed.Thisisnecessarysince$e2=clone$e1;throwsanE_FATALwhenaccessanythingon$e:
*Fatalerror:Maximumfunctionnestinglevelof\'100\'reached,aborting!
*/",
 "/**
*Acquirealockonthegivenentity.
*
*@paramobject$entity
*@paramint$lockMode
*@paramint$lockVersion
*@throwsOptimisticLockException
*@throwsPessimisticLockException
*/",
 "/**
*Getstherepositoryforanentityclass.
*
*@paramstring$entityNameThenameoftheentity.
*@returnEntityRepositoryTherepositoryclass.
*/",
 "/**
*DetermineswhetheranentityinstanceismanagedinthisEntityManager.
*
*@paramobject$entity
*@returnbooleanTRUEifthisEntityManagercurrentlymanagesthegivenentity,FALSEotherwise.
*/",
 "/**
*GetstheEventManagerusedbytheEntityManager.
*
*@return\Doctrine\Common\EventManager
*/",
 "/**
*GetstheConfigurationusedbytheEntityManager.
*
*@return\Doctrine\ORM\Configuration
*/",
 "/**
*ThrowsanexceptioniftheEntityManagerisclosedorcurrentlynotactive.
*
*@throwsORMExceptionIftheEntityManagerisclosed.
*/",
 "/**
*CheckiftheEntitymanagerisopenorclosed.
*
*@returnbool
*/",
 "/**
*GetstheUnitOfWorkusedbytheEntityManagertocoordinateoperations.
*
*@return\Doctrine\ORM\\UnitOfWork
*/",
 "/**
*Getsahydratorforthegivenhydrationmode.
*
*Thismethodcachesthehydratorinstanceswhichisusedforallqueriesthatdon\'t
*selectivelyiterateovertheresult.
*
*@paramint$hydrationMode
*@return\Doctrine\ORM\Internal\Hydration\AbstractHydrator
*/",
 "/**
*Createanewinstanceforthegivenhydrationmode.
*
*@paramint$hydrationMode
*@return\Doctrine\ORM\Internal\Hydration\AbstractHydrator
*/",
 "/**
*GetstheproxyfactoryusedbytheEntityManagertocreateentityproxies.
*
*@returnProxyFactory
*/",
 "/**
*{@inheritDoc}
*/",
 "/**
*FactorymethodtocreateEntityManagerinstances.
*
*@parammixed$connAnarraywiththeconnectionparametersoranexisting
*Connectioninstance.
*@paramConfiguration$configTheConfigurationinstancetouse.
*@paramEventManager$eventManagerTheEventManagerinstancetouse.
*@returnEntityManagerThecreatedEntityManager.
*/",
 "/**
*TheEntityManageristhecentralaccesspointtoORMfunctionality.
*
*@since2.0
*@authorBenjaminEberlei<kontakt@beberlei.de>
*@authorGuilhermeBlanco<guilhermeblanco@hotmail.com>
*@authorJonathanWage<jonwage@gmail.com>
*@authorRomanBorschel<roman@code-factory.org>
*/",
 "/**
     * Returns a list of global functions to add to the existing list.
     *
     * @return array An array of global functions
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * 
 *
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Generates a URL from the given parameters.
     *
     * @param string  $name       The name of the route
     * @param mixed   $parameters An array of parameters
     * @param Boolean $absolute   Whether to generate an absolute URL
     *
     * @return string The generated URL
     *
     * @api
     */",
 "/**
 * UrlGeneratorInterface is the interface that all URL generator classes must implements.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Loads the web configuration.
     *
     * @param array            $config    An array of configuration settings
     * @param ContainerBuilder $container A ContainerBuilder instance
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
 * SecurityExtension.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Initializes request attributes based on a matching route.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Test if this Transport mechanism has started.
   * 
   * @return boolean
   */",
 "/**
   * Start this Transport mechanism.
   */",
 "/**
   * Stop this Transport mechanism.
   */",
 "/**
   * Send the given Message.
   * 
   * Recipient/sender data will be retrieved from the Message API.
   * The return value is the number of recipients who were accepted for delivery.
   * 
   * @param Swift_Mime_Message $message
   * @param string[] &$failedRecipients to collect failures by-reference
   * @return int
   */",
 "/**
   * Register a plugin in the Transport.
   * 
   * @param Swift_Events_EventListener $plugin
   */",
 "/**
 * Sends Messages via an abstract Transport subsystem.
 * 
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
   * Returns true only if there are more recipients to send to.
   * @return boolean
   */",
 "/**
   * Returns an array where the keys are the addresses of recipients and the
   * values are the names.
   * e.g. (\'foo@bar\' => \'Foo\') or (\'foo@bar\' => NULL)
   * @return array
   */",
 "/**
 * Provides an abstract way of specifying recipients for batch sending.
 * @package Swift
 * @subpackage Mailer
 * @author Chris Corbyn
 */",
 "/**
     * Registers an extension.
     *
     * @param ExtensionInterface $extension An extension instance
     *
     * @api
     */",
 "/**
     * Returns an extension by alias or namespace.
     *
     * @param string $name An alias or a namespace
     *
     * @return ExtensionInterface An extension instance
     *
     * @api
     */",
 "/**
     * Returns all registered extensions.
     *
     * @return array An array of ExtensionInterface
     *
     * @api
     */",
 "/**
     * Checks if we have an extension.
     *
     * @param string $name The name of the extension
     *
     * @return Boolean If the extension exists
     *
     * @api
     */",
 "/**
     * Returns an array of resources loaded to build this configuration.
     *
     * @return ResourceInterface[] An array of resources
     *
     * @api
     */",
 "/**
     * Adds a resource for this configuration.
     *
     * @param ResourceInterface $resource A resource instance
     *
     * @return ContainerBuilder The current instance
     *
     * @api
     */",
 "/**
     * Adds the object class hierarchy as resources.
     *
     * @param object $object An object instance
     *
     * @api
     */",
 "/**
     * Loads the configuration for an extension.
     *
     * @param string $extension The extension alias or namespace
     * @param array  $values    An array of values that customizes the extension
     *
     * @return ContainerBuilder The current instance
     *
     * @api
     */",
 "/**
     * Adds a compiler pass.
     *
     * @param CompilerPassInterface $pass A compiler pass
     * @param string                $type The type of compiler pass
     *
     * @api
     */",
 "/**
     * Returns the compiler pass config which can then be modified.
     *
     * @return PassConfig The compiler pass config
     *
     * @api
     */",
 "/**
     * Returns the compiler.
     *
     * @return Compiler The compiler
     *
     * @api
     */",
 "/**
     * Returns all Scopes.
     *
     * @return array An array of scopes
     *
     * @api
     */",
 "/**
     * Returns all Scope children.
     *
     * @return array An array of scope children.
     *
     * @api
     */",
 "/**
     * Sets a service.
     *
     * @param string $id      The service identifier
     * @param object $service The service instance
     * @param string $scope   The scope
     *
     * @throws BadMethodCallException
     *
     * @api
     */",
 "/**
     * Removes a service definition.
     *
     * @param string $id The service identifier
     *
     * @api
     */",
 "/**
     * Returns true if the given service is defined.
     *
     * @param  string  $id      The service identifier
     *
     * @return Boolean true if the service is defined, false otherwise
     *
     * @api
     */",
 "/**
     * Gets a service.
     *
     * @param  string  $id              The service identifier
     * @param  integer $invalidBehavior The behavior when the service does not exist
     *
     * @return object The associated service
     *
     * @throws \InvalidArgumentException if the service is not defined
     * @throws \LogicException if the service has a circular reference to itself
     *
     * @see Reference
     *
     * @api
     */",
 "/**
     * Merges a ContainerBuilder with the current ContainerBuilder configuration.
     *
     * Service definitions overrides the current defined ones.
     *
     * But for parameters, they are overridden by the current ones. It allows
     * the parameters passed to the container constructor to have precedence
     * over the loaded ones.
     *
     * $container = new ContainerBuilder(array(\'foo\' => \'bar\'));
     * $loader = new LoaderXXX($container);
     * $loader->load(\'resource_name\');
     * $container->register(\'foo\', new stdClass());
     *
     * In the above example, even if the loaded resource defines a foo
     * parameter, the value will still be \'bar\' as defined in the ContainerBuilder
     * constructor.
     *
     * @param ContainerBuilder $container The ContainerBuilder instance to merge.
     *
     * @throws \LogicException when this ContainerBuilder is frozen
     *
     * @api
     */",
 "/**
     * Returns the configuration array for the given extension.
     *
     * @param string $name The name of the extension
     *
     * @return array An array of configuration
     *
     * @api
     */",
 "/**
     * Compiles the container.
     *
     * This method passes the container to compiler
     * passes whose job is to manipulate and optimize
     * the container.
     *
     * The main compiler passes roughly do four things:
     *
     *  * The extension configurations are merged;
     *  * Parameter values are resolved;
     *  * The parameter bag is frozen;
     *  * Extension loading is disabled.
     *
     * @api
     */",
 "/**
     * Gets all service ids.
     *
     * @return array An array of all defined service ids
     */",
 "/**
     * Adds the service aliases.
     *
     * @param array $aliases An array of aliases
     *
     * @api
     */",
 "/**
     * Sets the service aliases.
     *
     * @param array $aliases An array of service definitions
     *
     * @api
     */",
 "/**
     * Sets an alias for an existing service.
     *
     * @param string $alias The alias to create
     * @param mixed  $id    The service to alias
     *
     * @api
     */",
 "/**
     * Removes an alias.
     *
     * @param string $alias The alias to remove
     *
     * @api
     */",
 "/**
     * Returns true if an alias exists under the given identifier.
     *
     * @param  string  $id The service identifier
     *
     * @return Boolean true if the alias exists, false otherwise
     *
     * @api
     */",
 "/**
     * Gets all defined aliases.
     *
     * @return array An array of aliases
     *
     * @api
     */",
 "/**
     * Gets an alias.
     *
     * @param  string  $id The service identifier
     *
     * @return string The aliased service identifier
     *
     * @throws \InvalidArgumentException if the alias does not exist
     *
     * @api
     */",
 "/**
     * Registers a service definition.
     *
     * This methods allows for simple registration of service definition
     * with a fluid interface.
     *
     * @param  string $id    The service identifier
     * @param  string $class The service class
     *
     * @return Definition A Definition instance
     *
     * @api
     */",
 "/**
     * Adds the service definitions.
     *
     * @param Definition[] $definitions An array of service definitions
     *
     * @api
     */",
 "/**
     * Sets the service definitions.
     *
     * @param array $definitions An array of service definitions
     *
     * @api
     */",
 "/**
     * Gets all service definitions.
     *
     * @return array An array of Definition instances
     *
     * @api
     */",
 "/**
     * Sets a service definition.
     *
     * @param  string     $id         The service identifier
     * @param  Definition $definition A Definition instance
     *
     * @throws BadMethodCallException
     *
     * @api
     */",
 "/**
     * Returns true if a service definition exists under the given identifier.
     *
     * @param  string  $id The service identifier
     *
     * @return Boolean true if the service definition exists, false otherwise
     *
     * @api
     */",
 "/**
     * Gets a service definition.
     *
     * @param  string  $id The service identifier
     *
     * @return Definition A Definition instance
     *
     * @throws \InvalidArgumentException if the service definition does not exist
     *
     * @api
     */",
 "/**
     * Gets a service definition by id or alias.
     *
     * The method \"unaliases\" recursively to return a Definition instance.
     *
     * @param  string  $id The service identifier or alias
     *
     * @return Definition A Definition instance
     *
     * @throws \InvalidArgumentException if the service definition does not exist
     *
     * @api
     */",
 "/**
     * Creates a service for a service definition.
     *
     * @param  Definition $definition A service definition instance
     * @param  string     $id         The service identifier
     *
     * @return object              The service described by the service definition
     *
     * @throws \InvalidArgumentException When configure callable is not callable
     */",
 "/**
     * Replaces service references by the real service instance.
     *
     * @param  mixed $value A value
     *
     * @return mixed The same value with all service references replaced by the real service instances
     */",
 "/**
     * Returns service ids for a given tag.
     *
     * @param string $name The tag name
     *
     * @return array An array of tags
     *
     * @api
     */",
 "/**
     * Returns the Service Conditionals.
     *
     * @param mixed $value An array of conditionals to return.
     *
     * @return array An array of Service conditionals
     */",
 "/**
 * ContainerBuilder is a DI container that provides an API to easily describe services.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
   * Create a new SimpleMimeEntity with $headers, $encoder and $cache.
   * @param Swift_Mime_HeaderSet $headers
   * @param Swift_Mime_ContentEncoder $encoder
   * @param Swift_KeyCache $cache
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Generate a new Content-ID or Message-ID for this MIME entity.
   * @return string
   */",
 "/**
   * Get the {@link Swift_Mime_HeaderSet} for this entity.
   * @return Swift_Mime_HeaderSet
   */",
 "/**
   * Get the nesting level of this entity.
   * @return int
   * @see LEVEL_TOP, LEVEL_MIXED, LEVEL_RELATED, LEVEL_ALTERNATIVE
   */",
 "/**
   * Get the Content-type of this entity.
   * @return string
   */",
 "/**
   * Set the Content-type of this entity.
   * @param string $type
   * @return Swift_Mime_SimpleMimeEntity
   */",
 "/**
   * Get the CID of this entity.
   * The CID will only be present in headers if a Content-ID header is present.
   * @return string
   */",
 "/**
   * Set the CID of this entity.
   * @param string $id
   * @return Swift_Mime_SimpleMimeEntity
   */",
 "/**
   * Get the description of this entity.
   * This value comes from the Content-Description header if set.
   * @return string
   */",
 "/**
   * Set the description of this entity.
   * This method sets a value in the Content-ID header.
   * @param string $description
   * @return Swift_Mime_SimpleMimeEntity
   */",
 "/**
   * Get the maximum line length of the body of this entity.
   * @return int
   */",
 "/**
   * Set the maximum line length of lines in this body.
   * Though not enforced by the library, lines should not exceed 1000 chars.
   * @param int $length
   * @return Swift_Mime_SimpleMimeEntity
   */",
 "/**
   * Get all children added to this entity.
   * @return array of Swift_Mime_Entity
   */",
 "/**
   * Set all children of this entity.
   * @param array $children Swiift_Mime_Entity instances
   * @param int $compoundLevel For internal use only
   * @return Swift_Mime_SimpleMimeEntity
   */",
 "/**
   * Get the body of this entity as a string.
   * @return string
   */",
 "/**
   * Set the body of this entity, either as a string, or as an instance of
   * {@link Swift_OutputByteStream}.
   * @param mixed $body
   * @param string $contentType optional
   * @return Swift_Mime_SimpleMimeEntity
   */",
 "/**
   * Get the encoder used for the body of this entity.
   * @return Swift_Mime_ContentEncoder
   */",
 "/**
   * Set the encoder used for the body of this entity.
   * @param Swift_Mime_ContentEncoder $encoder
   * @return Swift_Mime_SimpleMimeEntity
   */",
 "/**
   * Get the boundary used to separate children in this entity.
   * @return string
   */",
 "/**
   * Set the boundary used to separate children in this entity.
   * @param string $boundary
   * @throws Swift_RfcComplianceException
   * @return Swift_Mime_SimpleMimeEntity
   */",
 "/**
   * Receive notification that the charset of this entity, or a parent entity
   * has changed.
   * @param string $charset
   */",
 "/**
   * Receive notification that the encoder of this entity or a parent entity
   * has changed.
   * @param Swift_Mime_ContentEncoder $encoder
   */",
 "/**
   * Get this entire entity as a string.
   * @return string
   */",
 "/**
   * Returns a string representation of this object.
   *
   * @return string
   *
   * @see toString()
   */",
 "/**
   * Write this entire entity to a {@link Swift_InputByteStream}.
   * @param Swift_InputByteStream
   */",
 "/**
   * Get the name of the header that provides the ID of this entity */",
 "/**
   * Get the model data (usually an array or a string) for $field.
   */",
 "/**
   * Set the model data for $field.
   */",
 "/**
   * Get the parameter value of $parameter on $field header.
   */",
 "/**
   * Set the parameter value of $parameter on $field header.
   */",
 "/**
   * Re-evaluate what content type and encoding should be used on this entity.
   */",
 "/**
   * Get the KeyCache used in this entity.
   */",
 "/**
   * Get the grammar used for validation.
   * @return Swift_Mime_Grammar
   */",
 "/**
   * Empty the KeyCache for this entity.
   */",
 "/**
   * Returns a random Content-ID or Message-ID.
   * @return string
   */",
 "/**
   * Empties it\'s own contents from the cache.
   */",
 "/**
   * Throws an Exception if the id passed does not comply with RFC 2822.
   * @param string $id
   * @throws Swift_RfcComplianceException
   */",
 "/**
 * A MIME entity, in a multipart message.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param  \Twig_Token $token A Twig_Token instance
     *
     * @return \Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Token Parser for the \'transchoice\' tag.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * PDO implementation of the Connection interface.
 * Used by all PDO-based drivers.
 *
 * @since 2.0
 */",
 "/**
 * IndexBy ::= \"INDEX\" \"BY\" SimpleStateFieldPathExpression
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param array $parameters An array of HTTP files
     *
     * @api
     */",
 "/**
     * (non-PHPdoc)
     * @see Symfony\Component\HttpFoundation\ParameterBag::replace()
     *
     * @api
     */",
 "/**
     * (non-PHPdoc)
     * @see Symfony\Component\HttpFoundation\ParameterBag::set()
     *
     * @api
     */",
 "/**
     * (non-PHPdoc)
     * @see Symfony\Component\HttpFoundation\ParameterBag::add()
     *
     * @api
     */",
 "/**
     * Converts uploaded files to UploadedFile instances.
     *
     * @param  array|UploadedFile $file A (multi-dimensional) array of uploaded file information
     *
     * @return array A (multi-dimensional) array of UploadedFile instances
     */",
 "/**
     * Fixes a malformed PHP $_FILES array.
     *
     * PHP has a bug that the format of the $_FILES array differs, depending on
     * whether the uploaded file fields had normal field names or array-like
     * field names (\"normal\" vs. \"parent[child]\").
     *
     * This method fixes the array to look like the \"normal\" $_FILES array.
     *
     * It\'s safe to pass an already converted array, in which case this method
     * just returns the original array unmodified.
     *
     * @param  array $data
     *
     * @return array
     */",
 "/**
 * FileBag is a container for HTTP headers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 *
 * @api
 */",
 "/**
     * Tries to match a URL based on Apache mod_rewrite matching.
     *
     * Returns false if no route matches the URL.
     *
     * @param string $pathinfo The pathinfo to be parsed
     *
     * @return array An array of parameters
     *
     * @throws MethodNotAllowedException If the current method is not allowed
     */",
 "/**
 * ApacheUrlMatcher matches URL based on Apache mod_rewrite matching (see ApacheMatcherDumper).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets the classes to cache.
     *
     * @return array An array of classes
     */",
 "/**
     * Adds classes to the class cache.
     *
     * @param array $classes An array of classes
     */",
 "/**
     * Returns the base path for the XSD files.
     *
     * @return string The XSD base path
     */",
 "/**
     * Returns the namespace to be used for this extension (XML namespace).
     *
     * @return string The XML namespace
     */",
 "/**
*ReturnstherecommendedaliastouseinXML.
*
*ThisaliasisalsothemandatoryprefixtousewhenusingYAML.
*
*Thisconventionistoremovethe\"Extension\" postfix from the class
     * name and then lowercase and underscore the result. So:
     *
     *     AcmeHelloExtension
     *
     * becomes
     *
     *     acme_hello
     *
     * This can be overridden in a sub-class to specify the alias manually.
     *
     * @return string The alias
     */",
 "/**
 * Provides useful features shared by many extensions.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * DataCollector.
 *
 * Children of this class must store the collected data in the data property.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Sets the command
     *
     * @param Command $command The command to set
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * HelpCommand displays the help for a given command.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @dataProvider getInjectToolbarTests
     */",
 "/**
     * @depends testToolbarIsInjected
     */",
 "/**
     * @depends testToolbarIsInjected
     */",
 "/**
     * @depends testToolbarIsInjected
     */",
 "/**
     * @depends testToolbarIsInjected
     */",
 "/**
     * @depends testToolbarIsInjected
     */",
 "/**
     * @depends testToolbarIsInjected
     */",
 "/**
     * Constructor.
     *
     * @param Esi $esi An ESI instance
     */",
 "/**
     * Filters the Response.
     *
     * @param FilterResponseEvent $event A FilterResponseEvent instance
     */",
 "/**
 * EsiListener adds a Surrogate-Control HTTP header when the Response needs to be parsed for ESI.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Initializes the constraint validator.
     *
     * @param ExecutionContext $context The current validation context
     */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constrain for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
     * @return string
     *
     * @api
     */",
 "/**
     * @return array
     *
     * @api
     */",
 "/**
 * @api
 */",
 "/**
     * Dumps the service container as a graphviz graph.
     *
     * Available options:
     *
     *  * graph: The default options for the whole graph
     *  * node: The default options for nodes
     *  * edge: The default options for edges
     *  * node.instance: The default options for services that are defined directly by object instances
     *  * node.definition: The default options for services that are defined via service definition instances
     *  * node.missing: The default options for missing services
     *
     * @param  array  $options An array of options
     *
     * @return string The dot representation of the service container
     */",
 "/**
     * Returns all nodes.
     *
     * @return string A string representation of all nodes
     */",
 "/**
     * Returns all edges.
     *
     * @return string A string representation of all edges
     */",
 "/**
     * Finds all edges belonging to a specific service id.
     *
     * @param string $id The service id used to find edges
     * @param array $arguments An array of arguments
     * @param Boolean $required
     * @param string $name
     *
     * @return array An array of edges
     */",
 "/**
*Findsallnodes.
*
*@returnarrayAnarrayofallnodes
*/",
 "/**
*Returnsthestartdot.
*
*@returnstringThestringrepresentationofastartdot
*/",
 "/**
*Returnstheenddot.
*
*@returnstring
*/",
 "/**
     * Adds attributes
     *
     * @param array $attributes An array of attributes
     *
     * @return string A comma separated list of attributes
     */",
 "/**
     * Adds options
     *
     * @param array $options An array of options
     *
     * @return string A space separated list of options
     */",
 "/**
     * Dotizes an identifier.
     *
     * @param string $id The identifier to dotize
     *
     * @return string A dotized string
     */",
 "/**
     * Compiles an array of aliases for a specified service id.
     *
     * @param string $id A service id
     *
     * @return array An array of aliases
     */",
 "/**
 * GraphvizDumper dumps a service container as a graphviz file.
 *
 * You can convert the generated dot file with the dot utility (http://www.graphviz.org/):
 *
 *   dot -Tpng container.dot > foo.png
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * @inheritDoc
     */",
 "/**
 * @Annotation
 *
 * @api
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Adds all configured security voters to the access decision manager
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Loads a template.
     *
     * @param TemplateReferenceInterface $template A template
     *
     * @return Storage|Boolean false if the template cannot be loaded, a Storage instance otherwise
     *
     * @api
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param TemplateReferenceInterface $template A template
     * @param integer                    $time     The last modification time of the cached template (timestamp)
     *
     * @api
     */",
 "/**
 * LoaderInterface is the interface all loaders must implement.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * returns the regular expression operator
     *
     * @return string
     * @override
     */",
 "/**
     * Return string to call a variable with the current timestamp inside an SQL statement
     * There are three special variables for current date and time.
     *
     * @return string       sqlite function as string
     * @override
     */",
 "/**
     * Trim a string, leading/trailing/both and with a given char which defaults to space.
     *
     * @param string $str
     * @param int $pos
     * @param string $char
     * @return string
     */",
 "/**
     * return string to call a function to get a substring inside an SQL statement
     *
     * Note: Not SQL92, but common functionality.
     *
     * SQLite only supports the 2 parameter variant of this function
     *
     * @param string $value         an sql string literal or column name/alias
     * @param integer $position     where to start the substring portion
     * @param integer $length       the substring portion length
     * @return string               SQL substring function with given parameters
     * @override
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/** 
     * @override 
     */",
 "/** 
     * @override 
     */",
 "/** 
     * @override 
     */",
 "/** 
     * @override 
     */",
 "/** 
     * @override 
     */",
 "/** 
     * @override 
     */",
 "/** 
     * @override 
     */",
 "/** 
     * @override 
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/** 
     * @override 
     */",
 "/**
     * create a new table
     *
     * @param string $name   Name of the database that should be created
     * @param array $fields  Associative array that contains the definition of each field of the new table
     *                       The indexes of the array entries are the names of the fields of the table an
     *                       the array entry values are associative arrays like those that are meant to be
     *                       passed with the field definitions to get[Type]Declaration() functions.
     *                          array(
     *                              \'id\' => array(
     *                                  \'type\' => \'integer\',
     *                                  \'unsigned\' => 1
     *                                  \'notnull\' => 1
     *                                  \'default\' => 0
     *                              ),
     *                              \'name\' => array(
     *                                  \'type\' => \'text\',
     *                                  \'length\' => 12
     *                              ),
     *                              \'password\' => array(
     *                                  \'type\' => \'text\',
     *                                  \'length\' => 12
     *                              )
     *                          );
     * @param array $options  An associative array of table options:
     *
     * @return void
     * @override
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * SQLite does support foreign key constraints, but only in CREATE TABLE statements...
     * This really limits their usefulness and requires SQLite specific handling, so
     * we simply say that SQLite does NOT support foreign keys for now...
     *
     * @return boolean FALSE
     * @override
     */",
 "/**
     * Get the platform name for this instance
     *
     * @return string
     */",
 "/**
     * @inheritdoc
     */",
 "/**
     * User-defined function for Sqlite that is used with PDO::sqliteCreateFunction()
     *
     * @param  int|float $value
     * @return float
     */",
 "/**
     * User-defined function for Sqlite that implements MOD(a, b)
     */",
 "/**
     * @param string $str
     * @param string $substr
     * @param int $offset
     */",
 "/**
 * The SqlitePlatform class describes the specifics and dialects of the SQLite
 * database platform.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: SQLitePlatform
 */",
 "/**
     * Constructor.
     *
     * @param string  $file     The absolute cache path
     * @param Boolean $debug    Whether debugging is enabled or not
     */",
 "/**
     * Gets the cache file path.
     *
     * @return string The cache file path
     */",
 "/**
     * Checks if the cache is still fresh.
     *
     * This method always returns true when debug is off and the
     * cache file exists.
     *
     * @return Boolean true if the cache is fresh, false otherwise
     */",
 "/**
     * Writes cache.
     *
     * @param string $content  The content to write in the cache
     * @param array  $metadata An array of ResourceInterface instances
     *
     * @throws \RuntimeException When cache file can\'t be wrote
     */",
 "/**
 * ConfigCache manages PHP cache files.
 *
 * When debug is enabled, it knows when to flush the cache
 * thanks to an array of ResourceInterface instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Creates a new SimpleHeaderFactory using $encoder and $paramEncoder.
   * @param Swift_Mime_HeaderEncoder $encoder
   * @param Swift_Encoder $paramEncoder
   * @param Swift_Mime_Grammar $grammar
   * @param string $charset
   */",
 "/**
   * Create a new Mailbox Header with a list of $addresses.
   * @param string $name
   * @param array|string $addresses
   * @return Swift_Mime_Header
   */",
 "/**
   * Create a new Date header using $timestamp (UNIX time).
   * @param string $name
   * @param int $timestamp
   * @return Swift_Mime_Header
   */",
 "/**
   * Create a new basic text header with $name and $value.
   * @param string $name
   * @param string $value
   * @return Swift_Mime_Header
   */",
 "/**
   * Create a new ParameterizedHeader with $name, $value and $params.
   * @param string $name
   * @param string $value
   * @param array $params
   * @return Swift_Mime_ParameterizedHeader
   */",
 "/**
   * Create a new ID header for Message-ID or Content-ID.
   * @param string $name
   * @param string|array $ids
   * @return Swift_Mime_Header
   */",
 "/**
   * Create a new Path header with an address (path) in it.
   * @param string $name
   * @param string $path
   * @return Swift_Mime_Header
   */",
 "/**
   * Notify this observer that the entity\'s charset has changed.
   * @param string $charset
   */",
 "/** Apply the charset to the Header */",
 "/**
 * Creates MIME headers.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
 * SensioDistributionBundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Marc Weistroff <marc.weistroff@sensio.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * SecurityExtension exposes security context features.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Formats a message within a section.
     *
     * @param string  $section The section name
     * @param string  $message The message
     * @param string  $style   The style to apply to the section
     */",
 "/**
     * Formats a message as a block of text.
     *
     * @param string|array $messages The message to write in the block
     * @param string       $style    The style to apply to the whole block
     * @param Boolean      $large    Whether to return a large block
     *
     * @return string The formatter message
     */",
 "/**
     * Returns the length of a string, using mb_strlen if it is available.
     *
     * @param string $string The string to check its length
     *
     * @return integer The length of the string
     */",
 "/**
     * Returns the helper\'s canonical name.
     *
     * @return string The canonical name of the helper
     */",
 "/**
 * The Formatter class provides helpers to format messages.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Loads a PHP file.
     *
     * @param mixed  $file The resource
     * @param string $type The resource type
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean true if this class supports the given resource, false otherwise
     */",
 "/**
 * PhpFileLoader loads service definitions from a PHP file.
 *
 * The PHP file is required and the $container variable can be
 * used form the file to change the container.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
     * Check DNS Records for MX type.
     *
     * @param string $host Host name
     *
     * @return Boolean
     */",
 "/**
 * @api
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Returns the name of the extension.
     *
     * @return string The extension name
     */",
 "/**
 * Provides integration of the Yaml component with Twig.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
   * Create a new SmtpTransport, optionally with $host, $port and $security.
   * @param string $host
   * @param int $port
   * @param int $security
   */",
 "/**
   * Create a new SmtpTransport instance.
   * @param string $host
   * @param int $port
   * @param int $security
   * @return Swift_SmtpTransport
   */",
 "/**
 * Sends Messages over SMTP with ESMTP support.
 * @package Swift
 * @subpackage Transport
 * @author Chris Corbyn
 */",
 "/**
     * Starts the authentication scheme.
     *
     * @param Request                 $request       The request that resulted in an AuthenticationException
     * @param AuthenticationException $authException The exception that started the authentication process
     *
     * @return Response
     */",
 "/**
 * AuthenticationEntryPointInterface is the interface used to start the
 * authentication scheme.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Guesses a field class name for a given constraint
     *
     * @param  Constraint $constraint  The constraint to guess for
     *
     * @return TypeGuess  The guessed field class and options
     */",
 "/**
     * Guesses whether a field is required based on the given constraint
     *
     * @param  Constraint $constraint  The constraint to guess for
     *
     * @return Guess       The guess whether the field is required
     */",
 "/**
     * Guesses a field\'s maximum length based on the given constraint
     *
     * @param  Constraint $constraint  The constraint to guess for
     *
     * @return Guess       The guess for the maximum length
     */",
 "/**
     * Guesses a field\'s minimum length based on the given constraint
     *
     * @param  Constraint $constraint  The constraint to guess for
     *
     * @return Guess       The guess for the minimum length
     */",
 "/**
     * Iterates over the constraints of a property, executes a constraints on
     * them and returns the best guess
     *
     * @param string $class       The class to read the constraints from
     * @param string $property    The property for which to find constraints
     * @param \Closure $guessForConstraint   The closure that returns a guess
     *                            for a given constraint
     * @return Guess  The guessed value with the highest confidence
     */",
 "/**
     * Constructor.
     *
     * @param array $filters Filters for the asset
     */",
 "/**
     * Encapsulates asset loading logic.
     *
     * @param string          $content          The asset content
     * @param FilterInterface $additionalFilter An additional filter
     */",
 "/**
 * A base abstract asset.
 *
 * The methods load() and getLastModified() are left undefined, although a
 * reusable doLoad() method is available to child classes.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     *
     * @param array $localColumnNames
     * @param string $foreignTableName
     * @param array $foreignColumnNames
     * @param string $cascade
     * @param string|null $name
     */",
 "/**
     * @return string
     */",
 "/**
     * @param Table $table
     */",
 "/**
     * @return array
     */",
 "/**
     * @return string
     */",
 "/**
     * @return array
     */",
 "/**
     * Foreign Key onUpdate status
     *
     * @return string|null
     */",
 "/**
     * Foreign Key onDelete status
     *
     * @return string|null
     */",
 "/**
     * @param  string $event
     * @return string|null
     */",
 "/**
     * @dataProvider getConfigs
     */",
 "/**
     * @dataProvider getConfigs
     */",
 "/**
     * @dataProvider getConfigs
     */",
 "/**
 * @group functional
 */",
 "/**
 * Show information about mapped entities
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * ConditionalTerm ::= ConditionalFactor {\"AND\" ConditionalFactor}*
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
 * \"CURRENT_TIME\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Returns a field guess for a property name of a class
     *
     * @param string $class     The fully qualified class name
     * @param string $property  The name of the property to guess for
     *
     * @return TypeGuess A guess for the field\'s type and options
     */",
 "/**
     * Returns a guess whether a property of a class is required
     *
     * @param string $class     The fully qualified class name
     * @param string $property  The name of the property to guess for
     *
     * @return Guess  A guess for the field\'s required setting
     */",
 "/**
     * Returns a guess about the field\'s maximum length
     *
     * @param string $class     The fully qualified class name
     * @param string $property  The name of the property to guess for
     *
     * @return Guess  A guess for the field\'s maximum length
     */",
 "/**
     * Returns a guess about the field\'s minimum length
     *
     * @param  string $class      The fully qualified class name
     * @param  string $property   The name of the property to guess for
     *
     * @return Guess  A guess for the field\'s minimum length
     */",
 "/**
 * This exception is thrown when the RememberMeServices implementation
 * detects that a presented cookie has already been used by someone else.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @see self::$types for a list of supported types
     *
     * @param integer $precision The precision
     * @param string  $type      One of the supported types
     */",
 "/**
     * Transforms between a normalized format (integer or float) into a percentage value.
     *
     * @param  number $value  Normalized value
     *
     * @return number         Percentage value
     *
     * @throws UnexpectedTypeException if the given value is not numeric
     * @throws TransformationFailedException if the value could not be transformed
     */",
 "/**
     * Transforms between a percentage value into a normalized format (integer or float).
     *
     * @param  number $value  Percentage value.
     *
     * @return number         Normalized value.
     *
     * @throws UnexpectedTypeException if the given value is not a string
     * @throws TransformationFailedException if the value could not be transformed
     */",
 "/**
     * Returns a preconfigured \NumberFormatter instance
     *
     * @return \NumberFormatter
     */",
 "/**
 * Transforms between a normalized format (integer or float) and a percentage value.
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 * @author Florian Eckerstorfer <florian@eckerstorfer.org>
 */",
 "/**
     * Constructor
     *
     * @param Connection $connection Doctrine Database Connection
     */",
 "/**
     * Retrieves Doctrine Database Connection
     *
     * @return Connection
     */",
 "/**
     * @see Helper
     */",
 "/**
 * Doctrine CLI Connection Helper.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * This exception is thrown when someone tries to create an ACL for an object
 * identity that already has one.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Watches a asset manager for changes.
     *
     * This method includes an infinite loop the continuously polls the asset
     * manager for changes.
     *
     * @param InputInterface  $input  The command input
     * @param OutputInterface $output The command output
     */",
 "/**
     * Checks if an asset should be dumped.
     *
     * @param string $name        The asset name
     * @param array  &$previously An array of previous visits
     *
     * @return Boolean Whether the asset should be dumped
     */",
 "/**
     * Writes an asset.
     *
     * If the application or asset is in debug mode, each leaf asset will be
     * dumped as well.
     *
     * @param string          $name   An asset name
     * @param OutputInterface $output The command output
     */",
 "/**
     * Performs the asset dump.
     *
     * @param AssetInterface  $asset  An asset
     * @param OutputInterface $output The command output
     *
     * @throws RuntimeException If there is a problem writing the asset
     */",
 "/**
 * Dumps assets to the filesystem.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * @see Command
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
*ClearandWarmupthecache.
*
*@authorFrancisBesset<francis.besset@gmail.com>
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
 * \"DATE_DIFF(date1, date2)\"
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Gets the SQL snippet used to declare a VARCHAR column type.
     *
     * @param array $field
     */",
 "/**
     * Gets the SQL snippet used to declare a CLOB column type.
     *
     * @param array $field
     */",
 "/**
     * Gets the name of the platform.
     *
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a boolean column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a 4 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares an 8 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares a 2 byte integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Gets the SQL snippet that declares common properties of an integer column.
     *
     * @param array $columnDef
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create datetime fields in
     * statements like CREATE TABLE
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create date fields in statements
     * like CREATE TABLE.
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL to be used to create time fields in statements
     * like CREATE TABLE.
     *
     * @param array $fieldDeclaration
     * @return string
     */",
 "/**
     * This code fragment is originally from the Zend_Db_Adapter_Db2 class.
     *
     * @license New BSD License
     * @param  string $table
     * @return string
     */",
 "/**
     * Get the SQL to list all views of a database or user.
     *
     * @param string $database
     * @return string
     */",
 "/**
     * Whether the platform supports releasing savepoints.
     *
     * @return boolean
     */",
 "/**
     * Gets the SQL specific for the platform to get the current date.
     *
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current time.
     *
     * @return string
     */",
 "/**
     * Gets the SQL specific for the platform to get the current timestamp
     *
     * @return string
     */",
 "/**
     * Obtain DBMS specific SQL code portion needed to set an index
     * declaration to be used in statements like CREATE TABLE.
     *
     * @param string $name          name of the index
     * @param Index $index          index definition
     * @return string               DBMS specific SQL code portion needed to set an index
     */",
 "/**
     * @param string $tableName
     * @param array $columns
     * @param array $options
     * @return array
     */",
 "/**
     * Gets the SQL to alter an existing table.
     *
     * @param TableDiff $diff
     * @return array
     */",
 "/**
     * Get the insert sql for an empty insert statement
     *
     * @param string $tableName
     * @param string $identifierColumnName
     * @return string $sql
     */",
 "/**
     * DB2 automatically moves temporary tables into the SESSION. schema.
     *
     * @param  string $tableName
     * @return string
     */",
 "/**
     * returns the position of the first occurrence of substring $substr in string $str
     *
     * @param string $substr    literal string to find
     * @param string $str       literal string
     * @param int    $pos       position to start at, beginning of string by default
     * @return integer
     */",
 "/**
     * return string to call a function to get a substring inside an SQL statement
     *
     * Note: Not SQL92, but common functionality.
     *
     * SQLite only supports the 2 parameter variant of this function
     *
     * @param  string $value         an sql string literal or column name/alias
     * @param  integer $from     where to start the substring portion
     * @param  integer $len       the substring portion length
     * @return string
     */",
 "/**
     * Gets the character casing of a column in an SQL result set of this platform.
     *
     * DB2 returns all column names in SQL result sets in uppercase.
     *
     * @param string $column The column name for which to get the correct character casing.
     * @return string The column name in the character casing used in SQL result sets.
     */",
 "/**
     * DB2 supports savepoints, but they work semantically different than on other vendor platforms.
     *
     * TODO: We have to investigate how to get DB2 up and running with savepoints.
     *
     * @return bool
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
     * @see Console\Command\Command
     */",
 "/**
 * Command to convert your mapping information between the various formats.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
*GenerateandwriteentityclassesforthegivenarrayofClassMetadataInfoinstances
*
*@paramarray$metadatas
*@paramstring$outputDirectory
*@returnvoid
*/",
 "/**
*GeneratedandwriteentityclasstodiskforthegivenClassMetadataInfoinstance
*
*@paramClassMetadataInfo$metadata
*@paramstring$outputDirectory
*@returnvoid
*/",
 "/**
*GenerateaPHP5Doctrine2entityclassfromthegivenClassMetadataInfoinstance
*
*@paramClassMetadataInfo$metadata
*@returnstring$code
*/",
 "/**
*GeneratetheupdatedcodeforthegivenClassMetadataInfoandentityatpath
*
*@paramClassMetadataInfo$metadata
*@paramstring$path
*@returnstring$code;
*/",
 "/**
*Setthenumberofspacestheexportedclassshouldhave
*
*@paraminteger$numSpaces
*@returnvoid
*/",
 "/**
*Settheextensiontousewhenwritingphpfilestodisk
*
*@paramstring$extension
*@returnvoid
*/",
 "/**
*Setthenameoftheclassthegeneratedclassesshouldextendfrom
*
*@returnvoid
*/",
 "/**
*Setwhetherornottogenerateannotationsfortheentity
*
*@parambool$bool
*@returnvoid
*/",
 "/**
*Setanannotationprefix.
*
*@paramstring$prefix
*/",
 "/**
*Setwhetherornottotryandupdatetheentityifitalreadyexists
*
*@parambool$bool
*@returnvoid
*/",
 "/**
*Setwhetherornottoregeneratetheentityifitexists
*
*@parambool$bool
*@returnvoid
*/",
 "/**
*Setwhetherornottogeneratestubmethodsfortheentity
*
*@parambool$bool
*@returnvoid
*/",
 "/**
*Shouldanexistingentitybebackedupifitalreadyexists?
*/",
 "/**
*@todothiswon\'tworkifthereisanamespaceinbracketsandaclassoutsideofit.
*@paramstring$src
*/",
 "/**
 * Generic class used to generate PHP5 entity classes from ClassMetadataInfo instances
 *
 *     [php]
 *     $classes = $em->getClassMetadataFactory()->getAllMetadata();
 *
 *     $generator = new \Doctrine\ORM\Tools\EntityGenerator();
 *     $generator->setGenerateAnnotations(true);
 *     $generator->setGenerateStubMethods(true);
 *     $generator->setRegenerateEntityIfExists(false);
 *     $generator->setUpdateEntityIfExists(true);
 *     $generator->generate($classes, \'/path/to/generate/entities\');
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor
     *
     * @param string $name
     */",
 "/**
     * Converts the object to a string
     *
     * @return string
     */",
 "/**
 * Represents a variable.
 *
 *     $var = new Variable(\'a\');
 *
 * will be dumped as
 *
 *     $a
 *
 * by the PHP dumper.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * Type that maps an SQL boolean to a PHP boolean.
 *
 * @since 2.0
 */",
 "/**
     * Ensures the current asset includes the supplied filter.
     *
     * @param FilterInterface $filter A filter
     */",
 "/**
     * Returns an array of filters currently applied.
     *
     * @return array An array of filters
     */",
 "/**
     * Clears all filters from the current asset.
     */",
 "/**
     * Loads the asset into memory and applies load filters.
     *
     * You may provide an additional filter to apply during load.
     *
     * @param FilterInterface $additionalFilter An additional filter
     */",
 "/**
     * Applies dump filters and returns the asset as a string.
     *
     * You may provide an additional filter to apply during dump.
     *
     * Dumping an asset should not change its state.
     *
     * If the current asset has not been loaded yet, it should be
     * automatically loaded at this time.
     *
     * @param FilterInterface $additionalFilter An additional filter
     *
     * @return string The filtered content of the current asset
     */",
 "/**
     * Returns the loaded content of the current asset.
     *
     * @return string The content
     */",
 "/**
     * Sets the content of the current asset.
     *
     * Filters can use this method to change the content of the asset.
     *
     * @param string $content The asset content
     */",
 "/**
     * Returns an absolute path or URL to the source asset\'s root directory.
     *
     * This value should be an absolute path to a directory in the filesystem,
     * an absolute URL with no path, or null.
     *
     * For example:
     *
     *  * \'/path/to/web\'
     *  * \'http://example.com\'
     *  * null
     *
     * @return string|null The asset\'s root
     */",
 "/**
     * Returns the relative path for the source asset.
     *
     * This value can be combined with the asset\'s source root (if both are
     * non-null) to get something compatible with file_get_contents().
     *
     * For example:
     *
     *  * \'js/main.js\'
     *  * \'main.js\'
     *  * null
     *
     * @return string|null The source asset path
     */",
 "/**
     * Returns the URL for the current asset.
     *
     * @return string|null A web URL where the asset will be dumped
     */",
 "/**
     * Sets the URL for the current asset.
     *
     * @param string $targetPath A web URL where the asset will be dumped
     */",
 "/**
     * Returns the time the current asset was last modified.
     *
     * @return integer|null A UNIX timestamp
     */",
 "/**
 * An asset has a mutable URL and content and can be loaded and dumped.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Generates the proxy class
     *
     * @param Definition $definition
     * @param ServiceMetadata $metadata
     * @return array<string, string>
     */",
 "/**
*Generatestheproxyclasswhichhassecuritychecksbuilt-inaccordingto
*thegivenmetadatainformation.
*
*@authorJohannesM.Schmitt<schmittjoh@gmail.com>
*
*/",
 "/**
     * Constructor.
     *
     * @param ContainerInterface $container The service container instance
     */",
 "/**
     * Guesses the template name to render and its variables and adds them to
     * the request object.
     *
     * @param FilterControllerEvent $event A FilterControllerEvent instance
     */",
 "/**
     * Renders the template and initializes a new response object with the
     * rendered template content.
     *
     * @param GetResponseForControllerResultEvent $event A GetResponseForControllerResultEvent instance
     */",
 "/**
     * Guesses and returns the template name to render based on the controller
     * and action names.
     *
     * @param array $controller An array storing the controller object and action method
     * @param Request $request A Request instance
     * @param string $engine
     * @return TemplateReference template reference
     * @throws \InvalidArgumentException
     */",
 "/**
     * Returns the Bundle instance in which the given class name is located.
     *
     * @param string $class A fully qualified controller class name
     * @param Bundle $bundle A Bundle instance
     * @throws \InvalidArgumentException
     */",
 "/**
 * The TemplateListener class handles the @Template annotation.
 *
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param string $path    A directory path
     * @param string $pattern A filename pattern
     */",
 "/**
     * Returns the combined content of all inner resources.
     */",
 "/**
 * A resource is something formulae can be loaded from.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
 * An iterator that converts file objects into file resources.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 * @access private
 */",
 "/**
 * Filters files by a basename pattern.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 * @access private
 */",
 "/**
 * Abstract class for all nodes that represents an expression.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * The AssetWriterCacheWarmer processes and writes the asset files.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Type that maps an SQL DATE to a PHP Date object.
 *
 * @since 2.0
 */",
 "/**
     * Constructor.
     *
     * @param array $tokens The tokens that make the stream.
     * @param mixed $source The source of the stream.
     */",
 "/**
     * Gets the tokens that have already been visited in this stream.
     *
     * @return array
     */",
 "/**
     * Gets the next token in the stream or null if there is none.
     * Note that if this stream was set to be peeking its behavior
     * will be restored to not peeking after this operation.
     *
     * @return mixed
     */",
 "/**
     * Peeks for the next token in this stream. This means that the next token
     * will be returned but it won\'t be considered as used (visited) until the
     * next() method is invoked.
     * If there are no remaining tokens null will be returned.
     *
     * @see next()
     *
     * @return mixed
     */",
 "/**
 * TokenStream represents a stream of CSS Selector tokens.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * This exception is thrown when we cannot locate an ACL for a passed
 * ObjectIdentity implementation.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Creates the actual encoder instance
     *
     * @param array $config
     *
     * @return PasswordEncoderInterface
     */",
 "/**
 * A generic encoder factory implementation
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @dataProvider getDebugModes
     */",
 "/**
     * @SatisfiesParentSecurityPolicy
     * @SecureReturn(permissions=\"VIEW\")
     */",
 "/**
     * Sets the memcache instance to use.
     *
     * @param Memcache $memcache
     */",
 "/**
     * Gets the memcache instance used by the cache.
     *
     * @return Memcache
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Memcache cache driver.
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 * @author  David Abdemoulaie <dave@hobodave.com>
 */",
 "/**
     * Constructor
     *
     * @param  string  $locale   The locale code
     *
     * @throws MethodArgumentValueNotImplementedException  When $locale different than \'en\' is passed
     */",
 "/**
     * Static constructor
     *
     * @param  string  $locale   The locale code
     *
     * @throws MethodArgumentValueNotImplementedException  When $locale different than \'en\' is passed
     */",
 "/**
     * Sort array maintaining index association
     *
     * @param  array  &$array    Input array
     * @param  array  $sortFlag  Flags for sorting, can be one of the following:
     *                           StubCollator::SORT_REGULAR - compare items normally (don\'t change types)
     *                           StubCollator::SORT_NUMERIC - compare items numerically
     *                           StubCollator::SORT_STRING - compare items as strings
     *
     * @return Boolean           True on success or false on failure
     */",
 "/**
     * Compare two Unicode strings
     *
     * @param  string  $str1   The first string to compare
     * @param  string  $str2   The second string to compare
     *
     * @return Boolean|int     Return the comparison result or false on failure:
     *                         1 if $str1 is greater than $str2
     *                         0 if $str1 is equal than $str2
     *                         -1 if $str1 is less than $str2
     *
     * @see    http://www.php.net/manual/en/collator.compare.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Get a value of an integer collator attribute
     *
     * @param  int   $attr   An attribute specifier, one of the attribute constants
     *
     * @return Boolean|int   The attribute value on success or false on error
     *
     * @see    http://www.php.net/manual/en/collator.getattribute.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Returns collator\'s last error code. Always returns the U_ZERO_ERROR class constant value
     *
     * @return int  The error code from last collator call
     */",
 "/**
     * Returns collator\'s last error message. Always returns the U_ZERO_ERROR_MESSAGE class constant value
     *
     * @return string  The error message from last collator call
     */",
 "/**
     * Returns the collator\'s locale
     *
     * @param  int      $type     The locale name type to return between valid or actual (StubLocale::VALID_LOCALE or StubLocale::ACTUAL_LOCALE, respectively)
     *
     * @return string             The locale name used to create the collator
     */",
 "/**
     * Get sorting key for a string
     *
     * @param  string   $string   The string to produce the key from
     *
     * @return string             The collation key for $string
     *
     * @see    http://www.php.net/manual/en/collator.getsortkey.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Get current collator\'s strength
     *
     * @return Boolean|int   The current collator\'s strength or false on failure
     *
     * @see    http://www.php.net/manual/en/collator.getstrength.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Set a collator\'s attribute
     *
     * @param  int   $attr   An attribute specifier, one of the attribute constants
     * @param  int   $val    The attribute value, one of the attribute value constants
     *
     * @return Boolean       True on success or false on failure
     *
     * @see    http://www.php.net/manual/en/collator.setattribute.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Set the collator\'s strength
     *
     * @param  int    $strength  Strength to set, possible values:
     *                           StubCollator::PRIMARY
     *                           StubCollator::SECONDARY
     *                           StubCollator::TERTIARY
     *                           StubCollator::QUATERNARY
     *                           StubCollator::IDENTICAL
     *                           StubCollator::DEFAULT
     *
     * @return Boolean           True on success or false on failure
     *
     * @see    http://www.php.net/manual/en/collator.setstrength.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Sort array using specified collator and sort keys
     *
     * @param  array   &$arr   Array of strings to sort
     *
     * @return Boolean         True on success or false on failure
     *
     * @see    http://www.php.net/manual/en/collator.sortwithsortkeys.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
     * Sort array using specified collator
     *
     * @param  array   &$arr       Array of string to sort
     * @param  int     $sortFlag   Optional sorting type, one of the following:
     *                             StubCollator::SORT_REGULAR
     *                             StubCollator::SORT_NUMERIC
     *                             StubCollator::SORT_STRING
     *
     * @return Boolean             True on success or false on failure
     *
     * @see    http://www.php.net/manual/en/collator.sort.php
     *
     * @throws MethodNotImplementedException
     */",
 "/**
 * Provides a stub Collator for the \'en\' locale.
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
 * This exception is thrown when we cannot locate an ACE that matches the
 * combination of permission masks and security identities.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * Instantiate a Node
     *
     * @return VariableNode The node
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * This class provides a fluent interface for defining a node.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
 * ExceptionInterface
 *
 * @author Alexandre Salom?? <alexandre.salome@gmail.com>
 *
 * @api
 */",
 "/**
     * Creates a Container with a Session-containing Request service.
     *
     * @return Container
     */",
 "/**
     * Creates a mock Twig_Environment object.
     *
     * @return \Twig_Environment
     */",
 "/**
     * @Secure(roles=\"ROLE_FOO\")
     */",
 "/**
     * {@inheritdoc}
     *
     * @api
     */",
 "/**
 * YamlFileLoader loads translations from Yaml files.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */",
 "/**
     * Adds the headers to the response once it\'s created
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Override default behavior since we check the user agent in onKernelResponse
     */",
 "/**
 * FirePHPHandler.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Parses a token and returns a node.
     *
     * @param Twig_Token $token A Twig_Token instance
     *
     * @return Twig_NodeInterface A Twig_NodeInterface instance
     */",
 "/**
     * Gets the tag name associated with this token parser.
     *
     * @return string The tag name
     */",
 "/**
 * Imports macros.
 *
 * <pre>
 *   {% import \'forms.html\' as forms %}
 * </pre>
 */",
 "/**
 * ParseException is thrown when a CSS selector syntax is not valid.
 *
 * This component is a port of the Python lxml library,
 * which is copyright Infrae and distributed under the BSD license.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Renders a profiler panel for the given token.
     *
     * @param string $token The profiler token
     *
     * @return Response A Response instance
     */",
 "/**
     * Exports data for a given token.
     *
     * @param string $token    The profiler token
     *
     * @return Response A Response instance
     */",
 "/**
     * Purges all tokens.
     *
     * @return Response A Response instance
     */",
 "/**
     * Imports token data.
     *
     * @return Response A Response instance
     */",
 "/**
     * Renders the Web Debug Toolbar.
     *
     * @param string $token    The profiler token
     * @param string $position The toolbar position (bottom, normal, or null -- automatically guessed)
     *
     * @return Response A Response instance
     */",
 "/**
     * Renders the profiler search bar.
     *
     * @return Response A Response instance
     */",
 "/**
     * Search results.
     *
     * @param string $token The token
     *
     * @return Response A Response instance
     */",
 "/**
     * Narrow the search bar.
     *
     * @return Response A Response instance
     */",
 "/**
 * ProfilerController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * App Test Kernel for functional tests.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Checks if the passed value is valid.
     *
     * @param mixed      $value      The value that should be validated
     * @param Constraint $constraint The constraint for the validation
     *
     * @return Boolean Whether or not the value is valid
     *
     * @api
     */",
 "/**
 * Validates whether a value is a valid language code
 *
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Format a value using a configured DateTime as date/time source
     *
     *
     * @param  DateTime  $dateTime  A DateTime object to be used to generate the formatted value
     * @param  int       $length    The formatted value string length
     *
     * @return string               The formatted value
     */",
 "/**
     * Returns a reverse matching regular expression of a string generated by format()
     *
     * @param  int     $length  The length of the value to be reverse matched
     *
     * @return string           The reverse matching regular expression
     */",
 "/**
     * Extract date options from a matched value returned by the processing of the reverse matching
     * regular expression
     *
     * @param  string  $matched  The matched value
     * @param  int     $length   The length of the Transformer pattern string
     *
     * @return array             An associative array
     */",
 "/**
     * Pad a string with zeros to the left
     *
     * @param  string  $value   The string to be padded
     * @param  int     $length  The length to pad
     *
     * @return string           The padded string
     */",
 "/**
 * Parser and formatter for date formats
 *
 * @author Igor Wiedler <igor@wiedler.ch>
 */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface $container  The service container
     * @param array              $validators An array of validators
     */",
 "/**
     * Returns the validator for the supplied constraint.
     *
     * @param Constraint $constraint A constraint
     *
     * @return Symfony\Component\Validator\ConstraintValidator A validator for the supplied constraint
     */",
 "/**
 * Uses a service container to create constraint validators.
 *
 * A constraint validator should be tagged as \"validator.constraint_validator\"
 * in the service container and include an \"alias\" attribute:
 *
 *     <service id=\"some_doctrine_validator\">
 *         <argument type=\"service\" id=\"doctrine.orm.some_entity_manager\" />
 *         <tag name=\"validator.constraint_validator\" alias=\"some_alias\" />
 *     </service>
 *
 * A constraint may then return this alias in its validatedBy() method:
 *
 *     public function validatedBy()
 *     {
 *         return \'some_alias\';
 *     }
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
 * Marks a content as safe.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Gets the source code of a template, given its name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The template source code
     */",
 "/**
     * Gets the cache key to use for the cache for a given template name.
     *
     * @param  string $name The name of the template to load
     *
     * @return string The cache key
     */",
 "/**
     * Returns true if the template is still fresh.
     *
     * @param string    $name The template name
     * @param timestamp $time The last modification time of the cached template
     */",
 "/**
 * Loads a template from a string.
 *
 * When using this loader with a cache mechanism, you should know that a new cache
 * key is generated each time a template content \"changes\" (the cache key being the
 * source code of the template). If you don\'t want to see your cache grows out of
 * control, you need to take care of clearing the old cache file by yourself.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Expression class for building DQL select statements
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
 * SimpleSelectExpression ::= StateFieldPathExpression | IdentificationVariable
 *                          | (AggregateExpression [[\"AS\"] FieldAliasIdentificationVariable])
 *
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision: 3938 $
 * @author  Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author  Jonathan Wage <jonwage@gmail.com>
 * @author  Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Constructor.
     *
     * @param KernelInterface $kernel A KernelInterface instance
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
*Convertafilenametoatemplate.
*
*@paramstring$fileThefilename
*
*@returnTemplateReferenceInterfaceAtemplate
*/",
 "/**
*TemplateNameParserconvertstemplatenamesfromtheshortnotation
*\"bundle:section:template.format.engine\" to TemplateReferenceInterface
 * instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Exception thrown when an error occurs during template loading.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * @group integration
 */",
 "/**
     * Constructor.
     *
     * @param LoaderResolverInterface $resolver A LoaderResolverInterface instance
     */",
 "/**
     * Loads a resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @throws FileLoaderLoadException if no loader is found.
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean true if this class supports the given resource, false otherwise
     */",
 "/**
 * DelegatingLoader delegates loading to other loaders using a loader resolver.
 *
 * This loader acts as an array of LoaderInterface objects - each having
 * a chance to load a given resource (handled by the resolver)
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Generates a bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * This method is used to compare two security identities in order to
     * not rely on referential equality.
     *
     * @param SecurityIdentityInterface $identity
     * @return void
     */",
 "/**
 * This interface provides an additional level of indirection, so that
 * we can work with abstracted versions of security objects and do
 * not have to save the entire objects.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * Wrapper around a Doctrine EntityManager.
 *
 * Provides easy to use provisioning for Doctrine entity users.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Return a list of all tables in the current database
     *
     * Apparently creator is the schema not the user who created it:
     * {@link http://publib.boulder.ibm.com/infocenter/dzichelp/v2r2/index.jsp?topic=/com.ibm.db29.doc.sqlref/db2z_sysibmsystablestable.htm}
     *
     * @return array
     */",
 "/**
     * Get Table Column Definition
     *
     * @param array $tableColumn
     * @return Column
     */",
 "/**
 * IBM Db2 Schema Manager
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
*FlattenExceptionwrapsaPHPExceptiontobeabletoserializeit.
*
*Basically,thisclassremovesallobjectsfromthetrace.
*
*@authorFabienPotencier<fabien@symfony.com>
*/",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
 * This is the pendant to the AccessDecisionManager which is used to make
 * access decisions after a method has been executed.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @param string $name
     * @param mixed $value
     *
     * @return FormView The current view
     */",
 "/**
     * @param $name
     *
     * @return Boolean
     */",
 "/**
     * @param $name
     * @param $default
     *
     * @return mixed
     */",
 "/**
     * @return array
     */",
 "/**
     * Alias of all so it is possible to do `form.vars.foo`
     *
     * @return array
     */",
 "/**
     * Sets the value for an attribute.
     *
     * @param string $name  The name of the attribute
     * @param string $value The value
     *
     * @return FormView The current view
     */",
 "/**
     * Returns whether the attached form is rendered.
     *
     * @return Boolean Whether the form is rendered
     */",
 "/**
     * Marks the attached form as rendered
     *
     * @return FormView The current view
     */",
 "/**
     * Sets the parent view.
     *
     * @param FormView $parent The parent view
     *
     * @return FormView The current view
     */",
 "/**
     * Returns the parent view.
     *
     * @return FormView The parent view
     */",
 "/**
     * Returns whether this view has a parent.
     *
     * @return Boolean Whether this view has a parent
     */",
 "/**
     * Sets the children view.
     *
     * @param array $children The children as instances of FormView
     *
     * @return FormView The current view
     */",
 "/**
     * Returns the children.
     *
     * @return array The children as instances of FormView
     */",
 "/**
     * Returns a given child.
     *
     * @param string $name The name of the child
     *
     * @return FormView The child view
     */",
 "/**
     * Returns whether this view has children.
     *
     * @return Boolean Whether this view has children
     */",
 "/**
     * Returns a child by name (implements \ArrayAccess).
     *
     * @param string $name The child name
     *
     * @return FormView The child view
     */",
 "/**
     * Returns whether the given child exists (implements \ArrayAccess).
     *
     * @param string $name The child name
     *
     * @return Boolean Whether the child view exists
     */",
 "/**
     * Implements \ArrayAccess.
     *
     * @throws \BadMethodCallException always as setting a child by name is not allowed
     */",
 "/**
     * Removes a child (implements \ArrayAccess).
     *
     * @param string $name The child name
     */",
 "/**
     * Returns an iterator to iterate over children (implements \IteratorAggregate)
     *
     * @return \ArrayIterator The iterator
     */",
 "/**
     * Implements \Countable.
     *
     * @return integer The number of children views
     */",
 "/**
 * Filters assets through CssMin.
 *
 * @author Kris Wallsmith <kris.wallsmith@gmail.com>
 */",
 "/**
     * Constructor.
     *
     * @param LoaderInterface $loader  The templating loader
     * @param string          $bundle  The current bundle name
     * @param string          $baseDir The directory
     * @param string          $path    The file path
     */",
 "/**
*Afileresource.
*
*@authorKrisWallsmith<kris@symfony.com>
*/",
 "/**
     * @dataProvider provider
     */",
 "/**
 * @author Marcin Sikon<marcin.sikon@gmail.com>
 */",
 "/**
   * Creates a new MailboxHeader with $name.
   * @param string $name of Header
   * @param Swift_Mime_HeaderEncoder $encoder
   * @param Swift_Mime_Grammar $grammar
   */",
 "/**
   * Get the type of Header that this instance represents.
   * @return int
   * @see TYPE_TEXT, TYPE_PARAMETERIZED, TYPE_MAILBOX
   * @see TYPE_DATE, TYPE_ID, TYPE_PATH
   */",
 "/**
   * Set the model for the field body.
   * This method takes a string, or an array of addresses.
   * @param mixed $model
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Get the model for the field body.
   * This method returns an associative array like {@link getNameAddresses()}
   * @return array
   * @throws Swift_RfcComplianceException
   */",
 "/**
   * Set a list of mailboxes to be shown in this Header.
   * The mailboxes can be a simple array of addresses, or an array of
   * key=>value pairs where (email => personalName).
   * Example:
   * <code>
   * <?php
   * //Sets two mailboxes in the Header, one with a personal name
   * $header->setNameAddresses(array(
   *  \'chris@swiftmailer.org\' => \'Chris Corbyn\',
   *  \'mark@swiftmailer.org\' //No associated personal name
   *  ));
   * ?>
   * </code>
   * @param string|string[] $mailboxes
   * @throws Swift_RfcComplianceException
   * @see __construct()
   * @see setAddresses()
   * @see setValue()
   */",
 "/**
   * Get the full mailbox list of this Header as an array of valid RFC 2822 strings.
   * Example:
   * <code>
   * <?php
   * $header = new Swift_Mime_Headers_MailboxHeader(\'From\',
   *  array(\'chris@swiftmailer.org\' => \'Chris Corbyn\',
   *  \'mark@swiftmailer.org\' => \'Mark Corbyn\')
   *  );
   * print_r($header->getNameAddressStrings());
   * // array (
   * // 0 => Chris Corbyn <chris@swiftmailer.org>,
   * // 1 => Mark Corbyn <mark@swiftmailer.org>
   * // )
   * ?>
   * </code>
   * @return string[]
   * @throws Swift_RfcComplianceException
   * @see getNameAddresses()
   * @see toString()
   */",
 "/**
   * Get all mailboxes in this Header as key=>value pairs.
   * The key is the address and the value is the name (or null if none set).
   * Example:
   * <code>
   * <?php
   * $header = new Swift_Mime_Headers_MailboxHeader(\'From\',
   *  array(\'chris@swiftmailer.org\' => \'Chris Corbyn\',
   *  \'mark@swiftmailer.org\' => \'Mark Corbyn\')
   *  );
   * print_r($header->getNameAddresses());
   * // array (
   * // chris@swiftmailer.org => Chris Corbyn,
   * // mark@swiftmailer.org => Mark Corbyn
   * // )
   * ?>
   * </code>
   * @return string[]
   * @see getAddresses()
   * @see getNameAddressStrings()
   */",
 "/**
   * Makes this Header represent a list of plain email addresses with no names.
   * Example:
   * <code>
   * <?php
   * //Sets three email addresses as the Header data
   * $header->setAddresses(
   *  array(\'one@domain.tld\', \'two@domain.tld\', \'three@domain.tld\')
   *  );
   * ?>
   * </code>
   * @param string[] $addresses
   * @throws Swift_RfcComplianceException
   * @see setNameAddresses()
   * @see setValue()
   */",
 "/**
   * Get all email addresses in this Header.
   * @return string[]
   * @see getNameAddresses()
   */",
 "/**
   * Remove one or more addresses from this Header.
   * @param string|string[] $addresses
   */",
 "/**
   * Get the string value of the body in this Header.
   * This is not necessarily RFC 2822 compliant since folding white space will
   * not be added at this stage (see {@link toString()} for that).
   * @return string
   * @throws Swift_RfcComplianceException
   * @see toString()
   */",
 "/**
   * Normalizes a user-input list of mailboxes into consistent key=>value pairs.
   * @param string[] $mailboxes
   * @return string[]
   * @access protected
   */",
 "/**
   * Produces a compliant, formatted display-name based on the string given.
   * @param string $displayName as displayed
   * @param boolean $shorten the first line to make remove for header name
   * @return string
   * @access protected
   */",
 "/**
   * Creates a string form of all the mailboxes in the passed array.
   * @param string[] $mailboxes
   * @return string
   * @throws Swift_RfcComplianceException
   * @access protected
   */",
 "/**
   * Return an array of strings conforming the the name-addr spec of RFC 2822.
   * @param string[] $mailboxes
   * @return string[]
   * @access private
   */",
 "/**
   * Throws an Exception if the address passed does not comply with RFC 2822.
   * @param string $address
   * @throws Swift_RfcComplianceException If invalid.
   * @access private
   */",
 "/**
 * A Mailbox Address MIME Header for something like From or Sender.
 * @package Swift
 * @subpackage Mime
 * @author Chris Corbyn
 */",
 "/**
     * Whether the platform prefers identity columns for ID generation.
     * MsSql prefers \"autoincrement\" identity columns since sequences can only
     * be emulated with a table.
     *
     * @return boolean
     * @override
     */",
 "/**
     * Whether the platform supports identity columns.
     * MsSql supports this through AUTO_INCREMENT columns.
     *
     * @return boolean
     * @override
     */",
 "/**
     * Whether the platform supports releasing savepoints.
     *
     * @return boolean
     */",
 "/**
     * create a new database
     *
     * @param string $name name of the database that should be created
     * @return string
     * @override
     */",
 "/**
     * drop an existing database
     *
     * @param string $name name of the database that should be dropped
     * @return string
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Extend unique key constraint with required filters
     *
     * @param string $sql
     * @param Index $index
     * @return string
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Returns the regular expression operator.
     *
     * @return string
     * @override
     */",
 "/**
     * Returns global unique identifier
     *
     * @return string to get global unique identifier
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/** Original query used to get those expressions
              declare @c varchar(100) = \'xxxBarxxx\', @trim_char char(1) = \'x\';
              declare @pat varchar(10) = \'%[^\' + @trim_char + \']%\';
              select @c as string
              , @trim_char as trim_char
              , stuff(@c, 1, patindex(@pat, @c) - 1, null) as trim_leading
              , reverse(stuff(reverse(@c), 1, patindex(@pat, reverse(@c)) - 1, null)) as trim_trailing
              , reverse(stuff(reverse(stuff(@c, 1, patindex(@pat, @c) - 1, null)), 1, patindex(@pat, reverse(stuff(@c, 1, patindex(@pat, @c) - 1, null))) - 1, null)) as trim_both;
             */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/** @override */",
 "/** @override */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Adds an adapter-specific LIMIT clause to the SELECT statement.
     *
     * @param string $query
     * @param mixed $limit
     * @param mixed $offset
     * @link http://lists.bestpractical.com/pipermail/rt-devel/2005-June/007339.html
     * @return string
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Get the platform name for this instance
     *
     * @return string
     */",
 "/**
     * @override
     */",
 "/**
     * Generate SQL to create a new savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Generate SQL to release a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * Generate SQL to rollback a savepoint
     *
     * @param string $savepoint
     * @return string
     */",
 "/**
     * @override
     */",
 "/**
     * @override
     */",
 "/**
     * Quotes a string so that it can be safely used as a table or column name,
     * even if it is a reserved word of the platform.
     *
     * NOTE: Just because you CAN use quoted identifiers doesn\'t mean
     * you SHOULD use them.  In general, they end up causing way more
     * problems than they solve.
     *
     * @param string $str           identifier name to be quoted
     * @return string               quoted identifier string
     */",
 "/**
 * The MsSqlPlatform provides the behavior, features and SQL dialect of the
 * MySQL database platform.
 *
 * @since 2.0
 * @author Roman Borschel <roman@code-factory.org>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 * @todo Rename: MsSQLPlatform
 */",
 "/**
     * @param string $tableName
     * @return DBALException
     */",
 "/**
     * @param string $tableName
     * @return DBALException
     */",
 "/**
     * @return Doctrine\DBAL\Connection
     */",
 "/**
     * @return Doctrine\DBAL\Driver
     */",
 "/**
     * @return Doctrine\DBAL\Platforms\AbstractPlatform
     */",
 "/**
     * @return Doctrine\DBAL\Schema\AbstractSchemaManager
     */",
 "/**
 * Event Arguments used when a Driver connection is established inside Doctrine\DBAL\Connection.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
 * Abstract cache warmer that knows how to write a file to the cache.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
     * {@inheritDoc}
     *
     * @api
     */",
 "/**
 * The default implementation of the ValidatorInterface.
 *
 * This service can be used to validate objects, properties and raw values
 * against constraints.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bernhard.schussek@symfony.com>
 *
 * @api
 */",
 "/**
     * Extracts formulae from filter function nodes.
     *
     * @return array|null The formula
     */",
 "/**
 * Assetic node visitor.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param integer                             $id
     * @param ObjectIdentityInterface             $objectIdentity
     * @param PermissionGrantingStrategyInterface $permissionGrantingStrategy
     * @param array                               $loadedSids
     * @param Boolean                             $entriesInheriting
     * @return void
     */",
 "/**
     * Adds a property changed listener
     *
     * @param PropertyChangedListener $listener
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Implementation for the \Serializable interface
     *
     * @return string
     */",
 "/**
     * Implementation for the \Serializable interface
     *
     * @param string $serialized
     * @return void
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * {@inheritDoc}
     */",
 "/**
     * Deletes an ACE
     *
     * @param string $property
     * @param integer $index
     * @throws \OutOfBoundsException
     * @return void
     */",
 "/**
     * Deletes a field-based ACE
     *
     * @param string $property
     * @param integer $index
     * @param string $field
     * @throws \OutOfBoundsException
     * @return void
     */",
 "/**
     * Inserts an ACE
     *
     * @param string                    $property
     * @param integer                   $index
     * @param integer                   $mask
     * @param SecurityIdentityInterface $sid
     * @param Boolean                   $granting
     * @param string                    $strategy
     * @throws \OutOfBoundsException
     * @throws \InvalidArgumentException
     * @return void
     */",
 "/**
     * Inserts a field-based ACE
     *
     * @param string                    $property
     * @param integer                   $index
     * @param string                    $field
     * @param integer                   $mask
     * @param SecurityIdentityInterface $sid
     * @param Boolean                   $granting
     * @param string                    $strategy
     * @throws \InvalidArgumentException
     * @throws \OutOfBoundsException
     * @return void
     */",
 "/**
     * Updates an ACE
     *
     * @param string $property
     * @param integer $index
     * @param integer $mask
     * @param string $strategy
     * @throws \OutOfBoundsException
     * @return void
     */",
 "/**
     * Updates auditing for an ACE
     *
     * @param array   &$aces
     * @param integer $index
     * @param Boolean $auditSuccess
     * @param Boolean $auditFailure
     * @throws \OutOfBoundsException
     * @return void
     */",
 "/**
     * Updates a field-based ACE
     *
     * @param string $property
     * @param integer $index
     * @param string $field
     * @param integer $mask
     * @param string $strategy
     * @throws \InvalidArgumentException
     * @throws \OutOfBoundsException
     * @return void
     */",
 "/**
     * Called when a property of the ACL changes
     *
     * @param string $name
     * @param mixed $oldValue
     * @param mixed $newValue
     * @return void
     */",
 "/**
     * Called when a property of an ACE associated with this ACL changes
     *
     * @param EntryInterface $entry
     * @param string         $name
     * @param mixed          $oldValue
     * @param mixed          $newValue
     * @return void
     */",
 "/**
 * An ACL implementation.
 *
 * Each object identity has exactly one associated ACL. Each ACL can have four
 * different types of ACEs (class ACEs, object ACEs, class field ACEs, object field
 * ACEs).
 *
 * You should not iterate over the ACEs yourself, but instead use isGranted(),
 * or isFieldGranted(). These will utilize an implementation of PermissionGrantingStrategy
 * internally.
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * @see Command
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Send Emails from the spool.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Cl??ment JOBEILI <clement.jobeili@gmail.com>
 */",
 "/**
 * Checks if a variable is divisible by a number.
 *
 * <pre>
 *  {% if loop.index is divisibleby(3) %}
 * </pre>
 *
 * @package twig
 * @author  Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * ExceptionController.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
 * Represents a displayable node in the AST.
 *
 * @package    twig
 * @author     Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor.
     *
     * @param array $contentTypes An array of content-type that should be parsed for ESI information.
     *                           (default: text/html, text/xml, and application/xml)
     */",
 "/**
     * Returns a new cache strategy instance.
     *
     * @return EsiResponseCacheStrategyInterface A EsiResponseCacheStrategyInterface instance
     */",
 "/**
     * Checks that at least one surrogate has ESI/1.0 capability.
     *
     * @param Request $request A Request instance
     *
     * @return Boolean true if one surrogate has ESI/1.0 capability, false otherwise
     */",
 "/**
     * Adds ESI/1.0 capability to the given Request.
     *
     * @param Request $request A Request instance
     */",
 "/**
     * Adds HTTP headers to specify that the Response needs to be parsed for ESI.
     *
     * This method only adds an ESI HTTP header if the Response has some ESI tags.
     *
     * @param Response $response A Response instance
     */",
 "/**
     * Checks that the Response needs to be parsed for ESI tags.
     *
     * @param Response $response A Response instance
     *
     * @return Boolean true if the Response needs to be parsed, false otherwise
     */",
 "/**
     * Renders an ESI tag.
     *
     * @param string  $uri          A URI
     * @param string  $alt          An alternate URI
     * @param Boolean $ignoreErrors Whether to ignore errors or not
     * @param string  $comment      A comment to add as an esi:include tag
     */",
 "/**
     * Replaces a Response ESI tags with the included resource content.
     *
     * @param Request  $request  A Request instance
     * @param Response $response A Response instance
     */",
 "/**
     * Handles an ESI from the cache.
     *
     * @param HttpCache $cache        An HttpCache instance
     * @param string    $uri          The main URI
     * @param string    $alt          An alternative URI
     * @param Boolean   $ignoreErrors Whether to ignore errors or not
     */",
 "/**
     * Handles an ESI include tag (called internally).
     *
     * @param array $attributes An array containing the attributes.
     *
     * @return string The response content for the include.
     */",
 "/**
 * Esi implements the ESI capabilities to Request and Response instances.
 *
 * For more information, read the following W3C notes:
 *
 *  * ESI Language Specification 1.0 (http://www.w3.org/TR/esi-lang)
 *
 *  * Edge Architecture Specification (http://www.w3.org/TR/edge-arch)
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Blackhole
 *
 * Any record it can handle will be thrown away. This can be used
 * to put on top of an existing stack to override it temporarily.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */",
 "/**
     * Sets the SQL of the query.
     *
     * @param string $sql
     * @return NativeQuery This query instance.
     */",
 "/**
     * Gets the SQL query.
     *
     * @return mixed The built SQL query or an array of all SQL queries.
     * @override
     */",
 "/**
     * {@inheritdoc}
     */",
 "/**
 * Represents a native SQL query.
 *
 * @author Roman Borschel <roman@code-factory.org>
 * @since 2.0
 */",
 "/**
     * @param Schema $fromSchema
     * @param Schema $toSchema
     * @return SchemaDiff
     */",
 "/**
     * Returns a SchemaDiff object containing the differences between the schemas $fromSchema and $toSchema.
     *
     * The returned diferences are returned in such a way that they contain the
     * operations to change the schema stored in $fromSchema to the schema that is
     * stored in $toSchema.
     *
     * @param Schema $fromSchema
     * @param Schema $toSchema
     *
     * @return SchemaDiff
     */",
 "/**
     *
     * @param Sequence $sequence1
     * @param Sequence $sequence2
     */",
 "/**
     * Returns the difference between the tables $table1 and $table2.
     *
     * If there are no differences this method returns the boolean false.
     *
     * @param Table $table1
     * @param Table $table2
     *
     * @return bool|TableDiff
     */",
 "/**
     * Try to find columns that only changed their name, rename operations maybe cheaper than add/drop
     * however ambiguouties between different possibilites should not lead to renaming at all.
     * 
     * @param TableDiff $tableDifferences
     */",
 "/**
     * @param ForeignKeyConstraint $key1
     * @param ForeignKeyConstraint $key2
     * @return bool
     */",
 "/**
     * Returns the difference between the fields $field1 and $field2.
     *
     * If there are differences this method returns $field2, otherwise the
     * boolean false.
     *
     * @param Column $column1
     * @param Column $column2
     *
     * @return array
     */",
 "/**
     * Finds the difference between the indexes $index1 and $index2.
     *
     * Compares $index1 with $index2 and returns $index2 if there are any
     * differences or false in case there are no differences.
     *
     * @param Index $index1
     * @param Index $index2
     * @return bool
     */",
 "/**
 * Compare to Schemas and return an instance of SchemaDiff
 *
 * @copyright Copyright (C) 2005-2009 eZ Systems AS. All rights reserved.
 * @license http://ez.no/licenses/new_bsd New BSD License
 * @license http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link    www.doctrine-project.org
 * @since   2.0
 * @version $Revision$
 * @author  Benjamin Eberlei <kontakt@beberlei.de>
 */",
 "/**
     * Compiles the node to PHP.
     *
     * @param Twig_Compiler A Twig_Compiler instance
     */",
 "/**
     * Loads a resource.
     *
     * @param mixed  $resource The resource
     * @param string $type     The resource type
     */",
 "/**
     * Returns true if this class supports the given resource.
     *
     * @param mixed  $resource A resource
     * @param string $type     The resource type
     *
     * @return Boolean true if this class supports the given resource, false otherwise
     */",
 "/**
     * Gets the loader resolver.
     *
     * @return LoaderResolver A LoaderResolver instance
     */",
 "/**
     * Sets the loader resolver.
     *
     * @param LoaderResolver $resolver A LoaderResolver instance
     */",
 "/**
 * LoaderInterface is the interface implemented by all loader classes.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Constructor
     *
     * @param array           $userProviders
     * @param string          $key
     * @param string          $providerKey
     * @param array           $options
     * @param LoggerInterface $logger
     */",
 "/**
     * Returns the parameter that is used for checking whether remember-me
     * services have been requested.
     *
     * @return string
     */",
 "/**
     * Implementation of RememberMeServicesInterface. Detects whether a remember-me
     * cookie was set, decodes it, and hands it to subclasses for further processing.
     *
     * @param Request $request
     *
     * @return TokenInterface
     */",
 "/**
     * Implementation for LogoutHandlerInterface. Deletes the cookie.
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token
     *
     * @return void
     */",
 "/**
     * Implementation for RememberMeServicesInterface. Deletes the cookie when
     * an attempted authentication fails.
     *
     * @param Request $request
     *
     * @return void
     */",
 "/**
     * Implementation for RememberMeServicesInterface. This is called when an
     * authentication is successful.
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token    The token that resulted in a successful authentication
     *
     * @return void
     */",
 "/**
     * Subclasses should validate the cookie and do any additional processing
     * that is required. This is called from autoLogin().
     *
     * @param array   $cookieParts
     * @param Request $request
     *
     * @return TokenInterface
     */",
 "/**
     * This is called after a user has been logged in successfully, and has
     * requested remember-me capabilities. The implementation usually sets a
     * cookie and possibly stores a persistent record of it.
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token
     *
     * @return void
     */",
 "/**
     * Decodes the raw cookie value
     *
     * @param string $rawCookie
     *
     * @return array
     */",
 "/**
     * Encodes the cookie parts
     *
     * @param array $cookieParts
     *
     * @return string
     */",
 "/**
     * Deletes the remember-me cookie
     *
     * @param Request $request
     *
     * @return void
     */",
 "/**
     * Checks whether remember-me capabilities where requested
     *
     * @param Request $request
     *
     * @return Boolean
     */",
 "/**
 * Base class implementing the RememberMeServicesInterface
 *
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */",
 "/**
     * Registers a onKernelException listener to take care of security exceptions.
     *
     * @param EventDispatcherInterface $dispatcher An EventDispatcherInterface instance
     */",
 "/**
     * Handles security related exceptions.
     *
     * @param GetResponseForExceptionEvent $event An GetResponseForExceptionEvent instance
     */",
 "/**
 * ExceptionListener catches authentication exception and converts them to
 * Response instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */",
 "/**
     * Filter Metadatas by one or more filter options.
     * 
     * @param array $metadatas
     * @param array|string $filter
     * @return array
     */",
 "/**
 * Used by CLI Tools to restrict entity-based commands to given patterns.
 *
 * @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
 * @link        www.doctrine-project.com
 * @since       1.0
 * @version     $Revision$
 * @author      Benjamin Eberlei <kontakt@beberlei.de>
 * @author      Guilherme Blanco <guilhermeblanco@hotmail.com>
 * @author      Jonathan Wage <jonwage@gmail.com>
 * @author      Roman Borschel <roman@code-factory.org>
 */",
 "/**
     * Returns the country names for a locale
     *
     * @param  string $locale     The locale to use for the country names
     *
     * @return array              The country names with their codes as keys
     *
     * @throws RuntimeException   When the resource bundles cannot be loaded
     */",
 "/**
     * Returns all available country codes
     *
     * @return array              The country codes
     * @throws RuntimeException   When the resource bundles cannot be loaded
     */",
 "/**
     * Returns the language names for a locale
     *
     * @param  string $locale     The locale to use for the language names
     *
     * @return array              The language names with their codes as keys
     *
     * @throws RuntimeException   When the resource bundles cannot be loaded
     */",
 "/**
     * Returns all available language codes
     *
     * @return array              The language codes
     * @throws RuntimeException   When the resource bundles cannot be loaded
     */",
 "/**
     * Returns the locale names for a locale
     *
     * @param  string $locale     The locale to use for the locale names
     * @return array              The locale names with their codes as keys
     * @throws RuntimeException   When the resource bundles cannot be loaded
     */",
 "/**
     * Returns all available locale codes
     *
     * @return array              The locale codes
     * @throws RuntimeException   When the resource bundles cannot be loaded
     */",
 "/**
     * Returns the fallback locale for a given locale, if any
     *
     * @param $locale             The locale to find the fallback for
     * @return string|null        The fallback locale, or null if no parent exists
     */",
 "/**
     * Initializes the runtime environment.
     *
     * This is where you can load some file that contains filter functions for instance.
     *
     * @param Twig_Environment $environment The current Twig_Environment instance
     */",
 "/**
     * Returns the token parser instances to add to the existing list.
     *
     * @return array An array of Twig_TokenParserInterface or Twig_TokenParserBrokerInterface instances
     */",
 "/**
     * Returns the node visitor instances to add to the existing list.
     *
     * @return array An array of Twig_NodeVisitorInterface instances
     */",
 "/**
     * Returns a list of filters to add to the existing list.
     *
     * @return array An array of filters
     */",
 "/**
     * Returns a list of tests to add to the existing list.
     *
     * @return array An array of tests
     */",
 "/**
     * Returns a list of functions to add to the existing list.
     *
     * @return array An array of functions
     */",
 "/**
     * Returns a list of operators to add to the existing list.
     *
     * @return array An array of operators
     */",
 "/**
     * Returns a list of global variables to add to the existing list.
     *
     * @return array An array of global variables
     */",
 "/**
     * Constructor.
     *
     * @param ContainerInterface   $container A ContainerInterface instance
     * @param ControllerNameParser $parser    A ControllerNameParser instance
     * @param LoggerInterface      $logger    A LoggerInterface instance
     */",
 "/**
     * Returns a callable for the given controller.
     *
     * @param string $controller A Controller string
     *
     * @return mixed A PHP callable
     */",
 "/**
 * ControllerResolver.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */"
]
