 ["/**
 * Helper function for connecting to the database server
 *
 * @param   string  $server
 * @param   string  $user
 * @param   string  $password
 * @param   int     $client_flags
 * @param   bool    $persistent
 * @return  mixed   false on error or a mysql connection resource on success
 */",
 "/**
 * connects to the database server
 *
 * @param   string  $user           mysql user name
 * @param   string  $password       mysql user password
 * @param   bool    $is_controluser
 * @param   array   $server host/port/socket/persistent
 * @param   bool    $auxiliary_connection (when true, don\\'t go back to login if connection fails)
 * @return  mixed   false on error or a mysqli object on success
 */",
 "/**
 * selects given database
 *
 * @param string    $dbname  name of db to select
 * @param resource  $link    mysql link resource
 * @return bool
 */",
 "/**
 * runs a query and returns the result
 *
 * @param string    $query    query to run
 * @param resource  $link     mysql link resource
 * @param int       $options
 * @return mixed
 */",
 "/**
 * returns array of rows with associative and numeric keys from $result
 *
 * @param   resource  $result
 * @return  array
 */",
 "/**
 * returns array of rows with associative keys from $result
 *
 * @param   resource  $result
 * @return  array
 */",
 "/**
 * returns array of rows with numeric keys from $result
 *
 * @param   resource  $result
 * @return  array
 */",
 "/**
 * Adjusts the result pointer to an arbitrary row in the result
 *
 * @param   $result
 * @param   $offset
 * @return  bool true on success, false on failure
 */",
 "/**
 * Frees memory associated with the result
 *
 * @param  resource  $result
 */",
 "/**
 * Check if there are any more query results from a multi query
 *
 * @return  bool         false
 */",
 "/**
 * Prepare next result from multi_query
 *
 * @return  boo         false
 */",
 "/**
 * Returns a string representing the type of connection used
 *
 * @param   resource  $link  mysql link
 * @return  string          type of connection used
 */",
 "/**
 * Returns the version of the MySQL protocol used
 *
 * @param   resource  $link  mysql link
 * @return  int         version of the MySQL protocol used
 */",
 "/**
 * returns a string that represents the client library version
 *
 * @return  string          MySQL client library version
 */",
 "/**
 * returns last error message or false if no errors occured
 *
 * @param   resource  $link  mysql link
 * @return  string|bool  $error or false
 */",
 "/**
 * returns the number of rows returned by last query
 *
 * @param   resource  $result
 * @return  string|int
 */",
 "/**
 * returns last inserted auto_increment id for given $link or $GLOBALS[\\'userlink\\']
 *
 * @param   resource  $link  the mysql object
 * @return  string|int
 */",
 "/**
 * returns the number of rows affected by last query
 *
 * @param   resource  $link            the mysql object
 * @param   bool      $get_from_cache
 * @return  string|int
 */",
 "/**
 * returns metainfo for fields in $result
 *
 * @todo add missing keys like in mysqli_query (decimals)
 * @param   resource  $result
 * @return  array  meta info for fields in $result
 */",
 "/**
 * return number of fields in given $result
 *
 * @param   resource  $result
 * @return  int  field count
 */",
 "/**
 * returns the length of the given field $i in $result
 *
 * @param   resource  $result
 * @param   int       $i       field
 * @return  int  length of field
 */",
 "/**
 * returns name of $i. field in $result
 *
 * @param   resource  $result
 * @param   int       $i       field
 * @return  string  name of $i. field in $result
 */",
 "/**
 * returns concatenated string of human readable field flags
 *
 * @param   resource  $result
 * @param   int       $i       field
 * @return  string  field flags
 */",
 "/**
     * Store user specified label and dataRow
     * @param string $label users specified label
     * @param array $dataRow A data row from the query result
     */",
 "/**
     * Handles the generation of each Data Row/Element as a SVG element
     * @return the code related to a row in the GIS dataset
     */",
 "/**
 * Base class for the plot data type classes.
 *
 * @package PhpMyAdmin
 */",
 "/**
 * Prepares the $column_order array
 *
 * @return array
 */",
 "/**
     * Registers form in form manager
     *
     * @param string $form_name
     * @param array  $form
     * @param int    $server_id 0 if new server, validation; >= 1 if editing a server
     */",
 "/**
     * Processes forms, returns true on successful save
     *
     * @param  bool  $allow_partial_save  allows for partial form saving on failed validation
     * @param  bool  $check_form_submit   whether check for $_POST[\\'submit_save\\']
     * @return boolean
     */",
 "/**
     * Runs validation for all registered forms
     *
     */",
 "/**
     * Outputs HTML for forms
     *
     * @param bool $tabbed_form
     * @param bool   $show_restore_default  whether show \"restore default\" button besides the input field
     */",
 "/**
     * Prepares data for input field display and outputs HTML code
     *
     * @param Form   $form
     * @param string $field                 field name as it appears in $form
     * @param string $system_path           field path, eg. Servers/1/verbose
     * @param string $work_path             work path, eg. Servers/4/verbose
     * @param string $translated_path       work path changed so that it can be used as XHTML id
     * @param bool   $show_restore_default  whether show \"restore default\" button besides the input field
     * @param mixed  $userprefs_allow       whether user preferences are enabled for this field
     *                                      (null - no support, true/false - enabled/disabled)
     * @param array  &$js_default           array which stores JavaScript code to be displayed
     */",
 "/**
     * Displays errors
     *
     */",
 "/**
     * Reverts erroneous fields to their default values
     *
     *
     */",
 "/**
     * Validates select field and casts $value to correct type
     *
     * @param  string  $value
     * @param  array   $allowed
     * @return bool
     */",
 "/**
     * Validates and saves form data to session
     *
     * @param  array|string  $forms               array of form names
     * @param  bool          $allow_partial_save  allows for partial form saving on failed validation
     * @return boolean  true on success (no errors and all saved)
     */",
 "/**
     * Tells whether form validation failed
     *
     * @return boolean
     */",
 "/**
     * Returns link to documentation
     *
     * @param string $path
     * @return string
     */",
 "/**
     * Returns link to wiki
     *
     * @param string $path
     * @return string
     */",
 "/**
     * Changes path so it can be used in URLs
     *
     * @param string $path
     * @return string
     */",
 "/**
     * Fills out {@link userprefs_keys} and {@link userprefs_disallow}
     *
     */",
 "/**
     * Sets field comments and warnings based on current environment
     *
     * @param string $system_path
     * @param array  $opts
     */",
 "/**
 * Form management class, displays and processes forms
 */",
 "/**
 * Defines the url to return to in case of error in a sql statement
 */",
 "/**
 * Modifications have been submitted -> updates the table
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table as a fragment of PHP code
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * returns string with filename for the MySQL helppage
     * about this storage engne
     *
     * @return  string  mysql helppage filename
     */",
 "/**
 *
 * @package PhpMyAdmin-Engines
 */",
 "/**
         * currently we don\\'t need the $pos (token position in query)
         * for other purposes than LIMIT clause verification,
         * so many calls to this function do not include the 4th parameter
         */",
 "/**
         * This is debug variant of above.
         * @ignore
         */",
 "/**
     * Reset the error variable for the SQL parser
     *
     * @access public
     */",
 "/**
     * Get the contents of the error variable for the SQL parser
     *
     * @return string Error string from SQL parser
     *
     * @access public
     */",
 "/**
     * Check if the SQL parser hit an error
     *
     * @return boolean error state
     *
     * @access public
     */",
 "/**
     * Set an error message for the system
     *
     * @param string  The error message
     * @param string  The failing SQL query
     *
     * @access private
     * @scope SQL Parser internal
     */",
 "/**
     * Do display the bug report
     *
     * @param string  The error message
     * @param string  The failing SQL query
     *
     * @access public
     */",
 "/**
                 * @todo a @ can also be present in expressions like
                 * FROM \\'user\\'@\\'%\\' or  TO \\'user\\'@\\'%\\'
                 * in this case, the @ is wrongly marked as alpha_variable
                 */",
 "/**
                         * @todo for negation operator, split in 2 tokens ?
                         * \"select x&~1 from t\"
                         * becomes \"select x & ~ 1 from t\" ?
                         */",
 "/**
                     * @todo 2005-10-16: in the case of a CREATE TABLE containing
                     * a TIMESTAMP, since TIMESTAMP() is also a function, it\\'s
                     * found here and the token is wrongly marked as alpha_functionName.
                     * But we compensate for this when analysing for timestamp_not_null
                     * later in this script.
                     *
                     * Same applies to CHAR vs. CHAR() function.
                     */",
 "/**
     * Parses the SQL queries
     *
     * @param string   The SQL query list
     *
     * @return mixed    Most of times, nothing...
     *
     * @global array    The current PMA configuration
     * @global array    MySQL column attributes
     * @global array    MySQL reserved words
     * @global array    MySQL column types
     * @global array    MySQL function names
     * @global array    List of available character sets
     * @global array    List of available collations
     *
     * @access public
     */",
 "/**
     * Checks for token types being what we want...
     *
     * @param string String of type that we have
     * @param string String of type that we want
     *
     * @return boolean result of check
     *
     * @access private
     */",
 "/**
                     * this is not a real reservedWord, because it\\'s not
                     * present in the list of forbidden words, for example
                     * \"storage\" which can be used as an identifier
                     *
                     * @todo avoid the pretty printing in color in this case
                     */",
 "/**
             * @todo can we combine loop 2 and loop 1? some code is repeated here...
             */",
 "/**
     * Analyzes SQL queries
     *
     * @param array   The SQL queries
     *
     * @return array   The analyzed SQL queries
     *
     * @access public
     */",
 "/**
     * Colorizes SQL queries html formatted
     *
     * @todo check why adding a \"\n\" after the </span> would cause extra blanks
     * to be displayed: SELECT p . person_name
     * @param array   The SQL queries html formatted
     *
     * @return array   The colorized SQL queries
     *
     * @access public
     */",
 "/**
     * Formats SQL queries to html
     *
     * @param array   The SQL queries
     * @param string  mode
     * @param integer starting token
     * @param integer number of tokens to format, -1 = all
     *
     * @return string  The formatted SQL queries
     *
     * @access public
     */",
 "/**
 * Builds a CSS rule used for html formatted SQL queries
 *
 * @param string  The class name
 * @param string  The property name
 * @param string  The property value
 *
 * @return string  The CSS rule
 *
 * @access public
 *
 * @see    PMA_SQP_buildCssData()
 */",
 "/**
 * Builds CSS rules used for html formatted SQL queries
 *
 * @return string  The CSS rules set
 *
 * @access public
 *
 * @global array   The current PMA configuration
 *
 * @see    PMA_SQP_buildCssRule()
 */",
 "/**
     * Gets SQL queries with no format
     *
     * @param array   The SQL queries list
     *
     * @return string  The SQL queries with no format
     *
     * @access public
     */",
 "/**
 * display server selection in list or selectbox form, or option tags only
 *
 * @param boolean $not_only_options   whether to include form tags or not
 * @param boolean $ommit_fieldset     whether to ommit fieldset tag or not
 */",
 "/**
 * Displays authentication form
 *
 * @global  string    the font face to use in case of failure
 * @global  string    the default font size to use in case of failure
 * @global  string    the big font size to use in case of failure
 *
 * @return  boolean   always true (no return indeed)
 *
 * @access  public
 */",
 "/**
 * Gets advanced authentication settings
 *
 * @global  string    the username if register_globals is on
 * @global  string    the password if register_globals is on
 * @global  array     the array of server variables if register_globals is
 *                    off
 * @global  array     the array of environment variables if register_globals
 *                    is off
 * @global  string    the username for the ? server
 * @global  string    the password for the ? server
 * @global  string    the username for the WebSite Professional server
 * @global  string    the password for the WebSite Professional server
 * @global  string    the username of the user who logs out
 *
 * @return  boolean   whether we get authentication settings or not
 *
 * @access  public
 */",
 "/**
 * Set the user and password after last checkings if required
 *
 * @global  array     the valid servers settings
 * @global  integer   the id of the current server
 * @global  array     the current server settings
 * @global  string    the current username
 * @global  string    the current password
 *
 * @return  boolean   always true
 *
 * @access  public
 */",
 "/**
 * User is not allowed to login to MySQL -> authentication failed
 *
 * @return  boolean   always true (no return indeed)
 *
 * @access  public
 */",
 "/**
 * Removes all variables from request except whitelisted ones.
 *
 * @param string list of variables to allow
 * @return nothing
 * @access public
 */",
 "/**
 * initialize the error handler
 */",
 "/**
 * PATH_INFO could be compromised if set, so remove it from PHP_SELF
 * and provide a clean PHP_SELF here
 */",
 "/**
 * just to be sure there was no import (registering) before here
 * we empty the global space (but avoid unsetting $variables_list
 * and $key in the foreach (), we still need them!)
 */",
 "/**
 * Subforms - some functions need to be called by form, cause of the limited URL
 * length, but if this functions inside another form you cannot just open a new
 * form - so phpMyAdmin uses \\'arrays\\' inside this form
 *
 * <code>
 * <form ...>
 * ... main form elments ...
 * <input type=\"hidden\" name=\"subform[action1][id]\" value=\"1\" />
 * ... other subform data ...
 * <input type=\"submit\" name=\"usesubform[action1]\" value=\"do action1\" />
 * ... other subforms ...
 * <input type=\"hidden\" name=\"subform[actionX][id]\" value=\"X\" />
 * ... other subform data ...
 * <input type=\"submit\" name=\"usesubform[actionX]\" value=\"do actionX\" />
 * ... main form elments ...
 * <input type=\"submit\" name=\"main_action\" value=\"submit form\" />
 * </form>
 * </code>
 *
 * so we now check if a subform is submitted
 */",
 "/**
 * @global PMA_Config $GLOBALS[\\'PMA_Config\\']
 * force reading of config file, because we removed sensitive values
 * in the previous iteration
 */",
 "/**
 * clean cookies on upgrade
 * when changing something related to PMA cookies, increment the cookie version
 */",
 "/**
 * holds parameters to be passed to next page
 * @global array $GLOBALS[\\'url_params\\']
 */",
 "/**
 * the whitelist for $GLOBALS[\\'goto\\']
 * @global array $goto_whitelist
 */",
 "/**
 * holds page that should be displayed
 * @global string $GLOBALS[\\'goto\\']
 */",
 "/**
     *  List of parameters which are allowed from unsafe source
     */",
 "/**
 * current selected database
 * @global string $GLOBALS[\\'db\\']
 */",
 "/**
 * current selected table
 * @global string $GLOBALS[\\'table\\']
 */",
 "/**
 * SQL query to be executed
 * @global string $GLOBALS[\\'sql_query\\']
 */",
 "/**
 * avoid problems in phpmyadmin.css.php in some cases
 * @global string $js_frame
 */",
 "/**
 * holds name of JavaScript files to be included in HTML header
 * @global array $js_include
 */",
 "/**
 * holds an array of javascript code snippets to be included in the HTML header
 * Can be used with PMA_AddJSCode() to pass on js variables to the browser.
 * @global array $js_script
 */",
 "/**
 * JavaScript events that will be registered
 * @global array $js_events
 */",
 "/**
 * footnotes to be displayed ot the page bottom
 * @global array $footnotes
 */",
 "/**
 * current server
 * @global integer $GLOBALS[\\'server\\']
 */",
 "/**
 * the theme object
 * @global PMA_Theme $_SESSION[\\'PMA_Theme\\']
 */",
 "/**
 * the active theme
 * @global string $GLOBALS[\\'theme\\']
 */",
 "/**
 * the theme path
 * @global string $GLOBALS[\\'pmaThemePath\\']
 */",
 "/**
 * the theme image path
 * @global string $GLOBALS[\\'pmaThemeImage\\']
 */",
 "/**
 * Load the XML string
 *
 * The option LIBXML_COMPACT is specified because it can
 * result in increased performance without the need to
 * alter the code in any way. It\\'s basically a freebee.
 */",
 "/**
 * Bring accumulated rows into the corresponding table
 */",
 "/**
 * Executes a query as controluser if possible, otherwise as normal user
 *
 * @param string  $sql        the query to execute
 * @param boolean $show_error whether to display SQL error messages or not
 * @param int     $options    query options
 *
 * @return  integer   the result set, or false if no result set
 *
 * @access  public
 *
 */",
 "/**
 * @param bool $verbose whether to print diagnostic info
 *
 * @return  array   $cfgRelation
 */",
 "/**
 * prints out diagnostic info for pma relation feature
 *
 * @param array $cfgRelation
 *
 * @return nothing
 */",
 "/**
 * prints out one diagnostic message for a feature
 *
 * @param string  $feature_name       feature name in a message string
 * @param string  $relation_parameter the $GLOBALS[\\'cfgRelation\\'] parameter to check
 * @param array   $messages           utility messages
 * @param boolean $skip_line          whether to skip a line after the message
 *
 * @return nothing
 */",
 "/**
 * prints out one diagnostic message for a configuration parameter
 *
 * @param string  $parameter              config parameter name to display
 * @param boolean $relation_parameter_set whether this parameter is set
 * @param array   $messages               utility messages
 * @param string  $doc_anchor             anchor in Documentation.html
 *
 * @return nothing
 */",
 "/**
 * Defines the relation parameters for the current user
 * just a copy of the functions used for relations ;-)
 * but added some stuff to check what will work
 *
 * @access  protected
 * @return  array    the relation parameters for the current user
 */",
 "/**
     * Emulating relations for some information_schema and data_dictionary tables
     */",
 "/**
 * Gets all Relations to foreign tables for a given table or
 * optionally a given column in a table
 *
 * @param string $db     the name of the db to check for
 * @param string $table  the name of the table to check for
 * @param string $column the name of the column to check for
 * @param string $source the source for foreign key information
 *
 * @return  array    db,table,column
 *
 * @access  public
 */",
 "/**
 * Gets the display field of a table
 *
 * @param string $db    the name of the db to check for
 * @param string $table the name of the table to check for
 *
 * @return  string   field name
 *
 * @access  public
 */",
 "/**
 * Gets the comments for all rows of a table or the db itself
 *
 * @param string $db    the name of the db to check for
 * @param string $table the name of the table to check for
 *
 * @return  array    [field_name] = comment
 *
 * @access  public
 */",
 "/**
 * Gets the comment for a db
 *
 * @param string $db the name of the db to check for
 *
 * @return  string   comment
 *
 * @access  public
 */",
 "/**
 * Gets the comment for a db
 *
 * @access  public
 *
 * @return  string   comment
 */",
 "/**
 * Set a database comment to a certain value.
 *
 * @param string $db      the name of the db
 * @param string $comment the value of the column
 *
 * @return  boolean  true, if comment-query was made.
 *
 * @access  public
 */",
 "/**
 * Set a SQL history entry
 *
 * @param string $db       the name of the db
 * @param string $table    the name of the table
 * @param string $username the username
 * @param string $sqlquery the sql query
 *
 * @return nothing
 *
 * @access  public
 */",
 "/**
 * Gets a SQL history entry
 *
 * @param string $username the username
 *
 * @return  array    list of history items
 *
 * @access  public
 */",
 "/**
 * purges SQL history
 *
 * deletes entries that exceeds $cfg[\\'QueryHistoryMax\\'], oldest first, for the
 * given user
 *
 * @param string $username the username
 *
 * @return nothing
 *
 * @access  public
 */",
 "/**
 * Prepares the dropdown for one mode
 *
 * @param array  $foreign the keys and values for foreigns
 * @param string $data    the current data of the dropdown
 * @param string $mode    the needed mode
 *
 * @return  array   the <option value=\"\"><option>s
 *
 * @access  protected
 */",
 "/**
 * Outputs dropdown with values of foreign fields
 *
 * @param array  $disp_row        array of the displayed row
 * @param string $foreign_field   the foreign field
 * @param string $foreign_display the foreign field to display
 * @param string $data            the current data of the dropdown (field in row)
 * @param int    $max             maximum number of items in the dropdown
 *
 * @return  string   the <option value=\"\"><option>s
 *
 * @access  public
 */",
 "/**
 * Gets foreign keys in preparation for a drop-down selector
 *
 * @param array  $foreigners     array of the foreign keys
 * @param string $field          the foreign field name
 * @param bool   $override_total whether to override the total
 * @param string $foreign_filter a possible filter
 * @param string $foreign_limit  a possible LIMIT clause
 *
 * @return  array    data about the foreign keys
 *
 * @access  public
 */",
 "/**
 * Finds all related tables
 *
 * @param string $from whether to go from master to foreign or vice versa
 *
 * @return  boolean  always true
 *
 * @global  array    $tab_left the list of tables that we still couldn\\'t connect
 * @global  array    $tab_know the list of allready connected tables
 * @global  string   $fromclause
 *
 * @access  private
 */",
 "/**
 * Rename a field in relation tables
 *
 * usually called after a field in a table was renamed in tbl_alter.php
 *
 * @param string $db       databse name
 * @param string $table    table name
 * @param string $field    old field name
 * @param string $new_name new field name
 *
 * @return nothing
 */",
 "/**
 * Create a PDF page
 *
 * @param string $newpage     name of the new PDF page
 * @param array  $cfgRelation
 * @param string $db          database name
 *
 * @return string   $pdf_page_number
 */",
 "/**
   * Reads a 32bit Integer from the Stream
   *
   * @access private
   * @return Integer from the Stream
   */",
 "/**
   * Reads an array of Integers from the Stream
   *
   * @param int count How many elements should be read
   * @return Array of Integers
   */",
 "/**
   * Constructor
   *
   * @param object Reader the StreamReader object
   * @param boolean enable_cache Enable or disable caching of strings (default on)
   */",
 "/**
   * Loads the translation tables from the MO file into the cache
   * If caching is enabled, also loads all strings into a cache
   * to speed up translation lookups
   *
   * @access private
   */",
 "/**
   * Returns a string from the \"originals\" table
   *
   * @access private
   * @param int num Offset number of original string
   * @return string Requested string if found, otherwise \\'\\'
   */",
 "/**
   * Returns a string from the \"translations\" table
   *
   * @access private
   * @param int num Offset number of original string
   * @return string Requested string if found, otherwise \\'\\'
   */",
 "/**
   * Binary search for string
   *
   * @access private
   * @param string string
   * @param int start (internally used in recursive function)
   * @param int end (internally used in recursive function)
   * @return int string number (offset in originals table)
   */",
 "/**
   * Translates a string
   *
   * @access public
   * @param string string to be translated
   * @return string translated string (or original, if not found)
   */",
 "/**
   * Sanitize plural form expression for use in PHP eval call.
   *
   * @access private
   * @return string sanitized plural form expression
   */",
 "/**
   * Parse full PO header and extract only plural forms line.
   *
   * @access private
   * @return string verbatim plural form header field
   */",
 "/**
   * Get possible plural forms from MO header
   *
   * @access private
   * @return string plural form header
   */",
 "/**
   * Detects which plural form to take
   *
   * @access private
   * @param n count
   * @return int array index of the right plural form
   */",
 "/**
   * Plural version of gettext
   *
   * @access public
   * @param string single
   * @param string plural
   * @param string number
   * @return translated plural form
   */",
 "/**
 * Provides a simple gettext replacement that works independently from
 * the system\\'s gettext abilities.
 * It can read MO files and use them for translating strings.
 * The files are passed to gettext_reader as a Stream (see streams.php)
 *
 * This version has the ability to cache all strings and translations to
 * speed up the string lookup.
 * While the cache is enabled by default, it can be switched off with the
 * second parameter in the constructor (e.g. whenusing very large MO files
 * that you don\\'t want to keep in memory)
 */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 * returns IPv4 address
 *
 * @see http://php.net/long2ip
 */",
 "/**
 *
 */",
 "/**
 * Displays authentication form
 *
 * @global  string    the font face to use in case of failure
 * @global  string    the default font size to use in case of failure
 * @global  string    the big font size to use in case of failure
 *
 * @return  boolean   always true (no return indeed)
 *
 * @access  public
 */",
 "/**
 * Gets advanced authentication settings
 *
 * @global  string    the username if register_globals is on
 * @global  string    the password if register_globals is on
 * @global  array     the array of server variables if register_globals is
 *                    off
 * @global  array     the array of environment variables if register_globals
 *                    is off
 * @global  string    the username for the ? server
 * @global  string    the password for the ? server
 * @global  string    the username for the WebSite Professional server
 * @global  string    the password for the WebSite Professional server
 * @global  string    the username of the user who logs out
 *
 * @return  boolean   whether we get authentication settings or not
 *
 * @access  public
 */",
 "/**
 * Set the user and password after last checkings if required
 *
 * @global  array     the valid servers settings
 * @global  integer   the id of the current server
 * @global  array     the current server settings
 * @global  string    the current username
 * @global  string    the current password
 *
 * @return  boolean   always true
 *
 * @access  public
 */",
 "/**
 * User is not allowed to login to MySQL -> authentication failed
 *
 * @return  boolean   always true (no return indeed)
 *
 * @access  public
 */",
 "/**
 * Value meaning:
 * o array - select field, array contains allowed values
 * o string - type override
 *
 * Use normal array, paths won\\'t be expanded
 */",
 "/**
 * Default values overrides
 * Use only full paths
 */",
 "/**
 * Basic validator assignments (functions from libraries/config/validate.lib.php and \\'validators\\'
 * object in js/config.js)
 * Use only full paths and form ids
 */",
 "/**
 * Additional validators used for user preferences
 */",
 "/**
 * Minimalistic creator of OASIS OpenDocument
 *
 * @param string      desired MIME type
 * @param string      document content
 *
 * @return  string      OASIS OpenDocument data
 *
 * @access  public
 */",
 "/**
 * Returns a modified sql query with only the label column
 * and spatial column(wrapped with \\'ASTEXT()\\' function).
 *
 * @param string $sql_query             original sql query
 * @param array  $visualizationSettings settings for the visualization
 *
 * @return the modified sql query.
 */",
 "/**
 * Formats a visualization for the GIS query results.
 *
 * @param array  $data                   Data for the status chart
 * @param array  &$visualizationSettings Settings used to generate the chart
 * @param string $format                 Format of the visulaization
 *
 * @return string HTML and JS code for the GIS visualization
 */",
 "/**
 * Generate visualization for the GIS query results and save it to a file.
 *
 * @param array  $data                  data for the status chart
 * @param array  $visualizationSettings settings used to generate the chart
 * @param string $format                format of the visulaization
 * @param string $fileName              file name
 *
 * @return file File containing the visualization
 */",
 "/**
     * Creates the view
     */",
 "/**
 * Displays top menu links
 * We use db links because a VIEW is not necessarily on a single table
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in MediaWiki format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
 * Sets required globals
 */",
 "/**
     * Display a list of available events
     */",
 "/**
 * Main function for the events functionality
 */",
 "/**
 * Handles editor requests for adding or editing an item
 */",
 "/**
 * This function will generate the values that are required to for the editor
 *
 * @return  array    Data necessary to create the editor.
 */",
 "/**
 * This function will generate the values that are required to complete
 * the \"Edit event\" form given the name of a event.
 *
 * @param   string   $name   The name of the event.
 *
 * @return  array    Data necessary to create the editor.
 */",
 "/**
 * Displays a form used to add/edit an event
 *
 * @param   string   $mode      If the editor will be used edit an event
 *                              or add a new one: \\'edit\\' or \\'add\\'.
 * @param   string   $operation If the editor was previously invoked with
 *                              JS turned off, this will hold the name of
 *                              the current operation
 * @param   array    $item      Data for the event returned by
 *                              PMA_EVN_getDataFromRequest() or
 *                              PMA_EVN_getDataFromName()
 *
 * @return  string   HTML code for the editor.
 */",
 "/**
 * Composes the query necessary to create an event from an HTTP request.
 *
 * @return  string  The CREATE EVENT query.
 */",
 "/**
 *
 */",
 "/**
 * Whole changelog in variable.
 */",
 "/**
 * Include JavaScript libraries
 */",
 "/**
 * Do the magic
 */",
 "/**
 * Initializes message list
 */",
 "/**
 * Adds a new message to message list
 *
 * @param string $type one of: notice, error
 * @param string $id unique message identifier
 * @param string $title language string id (in $str array)
 * @param string $message message text
 */",
 "/**
 * Cleans up message list
 */",
 "/**
 * Prints message list, must be called after messages_end()
 */",
 "/**
 * Checks for newest phpMyAdmin version and sets result as a new notice
 */",
 "/**
 * Calculates numerical equivalent of phpMyAdmin version string
 *
 * @param string  $version
 * @return mixed  false on failure, integer on success
 */",
 "/**
 * Checks whether config file is readable/writable
 *
 * @param bool &$is_readable
 * @param bool &$is_writable
 * @param bool &$file_exists
 */",
 "/**
 * Performs various compatibility, security and consistency checks on current config
 *
 * Outputs results to message list, must be called between messages_begin()
 * and messages_end()
 */",
 "/**
     * This function will process the user defined pages
     * and tables which will be exported as Relational schema
     * you can set the table positions on the paper via scratchboard
     * for table positions, put the x,y co-ordinates
     *
     * $this->action tells what the Schema is supposed to do
     * create and select a page, generate schema etc
     *
     * @access public
     * @return void
     */",
 "/**
     * shows/displays the HTML FORM to create the page
     *
     * @param string $db name of the selected database
     *
     * @return void
     * @access public
     */",
 "/**
     * shows/displays the created page names in a drop down list
     * User can select any page number and edit it using dashboard etc
     *
     * @return void
     * @access public
     */",
 "/**
     * A dashboard is displayed to AutoLayout the position of tables
     * users can drag n drop the tables and change their positions
     *
     * @return void
     * @access public
     */",
 "/**
     * show Export relational schema generation options
     * user can select export type of his own choice
     * and the attributes related to it
     *
     * @return void
     * @access public
     */",
 "/**
    * Check if there are tables that need to be deleted in dashboard,
    * if there are, ask the user for allowance
    *
    * @param string  $db       name of database selected
    * @param integer $chpage   selected page
    * @param array   $tabExist
    *
    * @return void
    * @access private
    */",
 "/**
     * Check if there are tables that need to be deleted in dashboard,
     * if there are, ask the user for allowance
     *
     * @return void
     * @access private
     */",
 "/**
     * delete the table rows with table co-ordinates
     *
     * @param int     $delrow      delete selected table from list of tables
     * @param array   $cfgRelation relation settings
     * @param string  $db          database name
     * @param integer $chpage      selected page for adding relations etc
     *
     * @return void
     * @access private
     */",
 "/**
     * get all the export options and verify
     * call and include the appropriate Schema Class depending on $export_type
     *
     * @return void
     * @access private
     */",
 "/**
     * delete X and Y coordinates
     *
     * @param string  $db          The database name
     * @param array   $cfgRelation relation settings
     * @param integer $choosePage  selected page for adding relations etc
     *
     * @return void
     * @access private
     */",
 "/**
     * delete pages
     *
     * @param string  $db          The database name
     * @param array   $cfgRelation relation settings
     * @param integer $choosePage  selected page for adding relations etc
     *
     * @return void
     * @access private
     */",
 "/**
     * process internal and foreign key relations
     *
     * @param string  $db          The database name
     * @param integer $pageNumber  document number/Id
     * @param array   $cfgRelation relation settings
     *
     * @return void
     * @access private
     */",
 "/**
     * Add X and Y coordinates for a table
     *
     * @param array   $all_tables  A list of all tables involved
     * @param integer $pageNumber  document number/Id
     * @param string  $db          The database name
     * @param array   $cfgRelation relation settings
     *
     * @return void
     * @access private
     */",
 "/**
     * update X and Y coordinates for a table
     *
     * @param string $db          The database name
     * @param array  $cfgRelation relation settings
     *
     * @return void
     * @access private
     */",
 "/**
 * This Class interacts with the user to gather the information
 * about their tables for which they want to export the relational schema
 * export options are shown to user from they can choose
 */",
 "/**
     * constructor
     *
     * @param string $source source to read config from
     */",
 "/**
     * sets system and application settings
     *
     * @return nothing
     */",
 "/**
     * whether to use gzip output compression or not
     *
     * @return nothing
     */",
 "/**
     * Determines platform (OS), browser and version of the user
     * Based on a phpBuilder article:
     *
     * @see http://www.phpbuilder.net/columns/tim20000821.php
     *
     * @return nothing
     */",
 "/**
     * Whether GD2 is present
     *
     * @return nothing
     */",
 "/**
     * Whether the Web server php is running on is IIS
     *
     * @return nothing
     */",
 "/**
     * Whether the os php is running on is windows or not
     *
     * @return nothing
     */",
 "/**
     * detects PHP version
     *
     * @return nothing
     */",
 "/**
     * loads default values from default source
     *
     * @return  boolean     success
     */",
 "/**
         * Parses the configuration file, the eval is used here to avoid
         * problems with trailing whitespace, what is often a problem.
         */",
 "/**
     * loads configuration from $source, usally the config file
     * should be called on object creation
     *
     * @param string $source config file
     *
     * @return bool
     */",
 "/**
     * Loads user preferences and merges them with current config
     * must be called after control connection has been estabilished
     *
     * @return boolean
     */",
 "/**
     * Sets config value which is stored in user preferences (if available)
     * or in a cookie.
     *
     * If user preferences are not yet initialized, option is applied to
     * global config and added to a update queue, which is processed
     * by {@link loadUserPreferences()}
     *
     * @param string $cookie_name   can be null
     * @param string $cfg_path
     * @param mixed  $new_cfg_value new value
     * @param mixed  $default_value default value
     *
     * @return nothing
     */",
 "/**
     * Reads value stored by {@link setUserValue()}
     *
     * @param string $cookie_name cookie name
     * @param mixed  $cfg_value   config value
     *
     * @return mixed
     */",
 "/**
     * set source
     *
     * @param string  $source
     *
     * @return nothing
     */",
 "/**
     * checks if the config folder still exists and terminates app if true
     *
     * @return nothing
     */",
 "/**
     * check config source
     *
     * @return  boolean whether source is valid or not
     */",
 "/**
     * verifies the permissions on config file (if asked by configuration)
     * (must be called after config.inc.php has been merged)
     *
     * @return nothing
     */",
 "/**
     * returns specific config setting
     *
     * @param string $setting config setting
     *
     * @return mixed value
     */",
 "/**
     * sets configuration variable
     *
     * @param string $setting configuration option
     * @param string $value   new value for configuration option
     *
     * @return nothing
     */",
 "/**
     * returns source for current config
     *
     * @return  string  config source
     */",
 "/**
     * returns a unique value to force a CSS reload if either the config
     * or the theme changes
     * must also check the pma_fontsize cookie in case there is no
     * config file
     *
     * @return int Summary of unix timestamps and fontsize,
     * to be unique on theme parameters change
     */",
 "/**



*

*/",
 "/**

*

*

*/",
 "/**

*

*/",
 "/**

*

*/",
 "/**


*

*

*/",
 "/**

*

*/",
 "/**

*



*

*/",
 "/**

*




*

*/",
 "/**

*

*/",
 "/**

*

*/",
 "/**

*

*/",
 "/**

*

*/",
 "/**

*


*

*/",
 "/**
     * returns html selectbox for font sizes
     *
     * @static
     * @param string $current_size currently slected font size with unit
     *
     * @return string html selectbox
     */",
 "/**
     * return complete font size selection form
     *
     * @static
     * @param string $current_size currently slected font size with unit
     *
     * @return string html selectbox
     */",
 "/**
     * removes cookie
     *
     * @param string $cookie name of cookie to remove
     *
     * @return boolean result of setcookie()
     */",
 "/**
     * sets cookie if value is different from current cokkie value,
     * or removes if value is equal to default
     *
     * @param string  $cookie   name of cookie to remove
     * @param mixed   $value    new cookie value
     * @param string  $default  default value
     * @param int     $validity validity of cookie in seconds (default is one month)
     * @param bool    $httponly whether cookie is only for HTTP (and not for scripts)
     *
     * @return boolean result of setcookie()
     */",
 "/**
 * Configuration class
 *
 * @package PhpMyAdmin
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in CSV format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
 * Generate dropdown choices
 *
 * @param string $dropdown_question Message to display
 * @param string $select_name       Name of the <select> field
 * @param array  $choices           Choices for dropdown
 * @param string $selected_value    Selected value
 *
 * @return  string   The existing value (for selected)
 *
 * @access  public
 */",
 "/**
 * Split a string on backquote pairs
 *
 * @param string $text original string
 *
 * @return  array   containing the elements (and their surrounding backquotes)
 *
 * @access  public
 */",
 "/**
 * Gets the relation settings
 */",
 "/**
             * construct the html for the newly created table\\'s row to be appended
             * to the list of tables.
             *
             * Logic taken from db_structure.php
             */",
 "/**
 * Gets zip file contents
 *
 * @param string $file           zip file
 * @param string $specific_entry regular expression to match a file
 *
 * @return array ($error_message, $file_data); $error_message
 *                  is empty if no error
 */",
 "/**
 * Returns the file name of the first file that matches the given $file_regexp.
 *
 * @param string $file_regexp regular expression for the file name to match
 * @param string $file        zip archive
 *
 * @return string the file name of the first file that matches the given regexp
 */",
 "/**
 * Returns the number of files in the zip archive.
 *
 * @param string $file zip archive
 *
 * @return int the number of files in the zip archive
 */",
 "/**
 * Extracts a set of files from the given zip archive to a given destinations.
 *
 * @param string $zip_path    path to the zip archive
 * @param string $destination destination to extract files
 * @param array  $entries     files in archive that should be extracted
 *
 * @return bool true on sucess, false otherwise
 */",
 "/**
  * Gets zip error message
  *
  * @param integer $code error code
  *
  * @return string error message
 */",
 "/**
     * constructor
     *
     * @access  public
     * @param string  $name   file name
     */",
 "/**
     * destructor
     *
     * @see     PMA_File::cleanUp()
     * @access  public
     */",
 "/**
     * deletes file if it is temporary, usally from a moved upload file
     *
     * @access  public
     * @return  boolean success
     */",
 "/**
     * deletes the file
     *
     * @access  public
     * @return  boolean success
     */",
 "/**
     * checks or sets the temp flag for this file
     * file objects with temp flags are deleted with object destruction
     *
     * @access  public
     * @param boolean sets the temp flag
     * @return  boolean PMA_File::$_is_temp
     */",
 "/**
     * accessor
     *
     * @access  public
     * @param string  $name   file name
     */",
 "/**
     * @access  public
     * @return  string  binary file content
     */",
 "/**
     * @access  public
     * @return bool
     */",
 "/**
     * accessor
     *
     * @access  public
     * @return  string  PMA_File::$_name
     */",
 "/**
     * @access  public
     * @param string  name of file uploaded
     * @return  boolean success
     */",
 "/**
     * @access  public
     * @param string  $key the md5 hash of the column name
     * @param string  $rownumber
     * @return  boolean success
     */",
 "/**
     * strips some dimension from the multi-dimensional array from $_FILES
     *
     * <code>
     * $file[\\'name\\'][\\'multi_edit\\'][$rownumber][$key] = [value]
     * $file[\\'type\\'][\\'multi_edit\\'][$rownumber][$key] = [value]
     * $file[\\'size\\'][\\'multi_edit\\'][$rownumber][$key] = [value]
     * $file[\\'tmp_name\\'][\\'multi_edit\\'][$rownumber][$key] = [value]
     * $file[\\'error\\'][\\'multi_edit\\'][$rownumber][$key] = [value]
     *
     * // becomes:
     *
     * $file[\\'name\\'] = [value]
     * $file[\\'type\\'] = [value]
     * $file[\\'size\\'] = [value]
     * $file[\\'tmp_name\\'] = [value]
     * $file[\\'error\\'] = [value]
     * </code>
     *
     * @access  public
     * @static
     * @param array   $file       the array
     * @param string  $rownumber
     * @param string  $key
     * @return  array
     */",
 "/**
     * sets the name if the file to the one selected in the tbl_change form
     *
     * @access  public
     * @param string  $key the md5 hash of the column name
     * @param string  $rownumber
     * @return  boolean success
     */",
 "/**
     * @access  public
     * @return  string  error message
     */",
 "/**
     * @access  public
     * @return  boolean whether an error occured or not
     */",
 "/**
     * checks the superglobals provided if the tbl_change form is submitted
     * and uses the submitted/selected file
     *
     * @access  public
     * @param string  $key the md5 hash of the column name
     * @param string  $rownumber
     * @return  boolean success
     */",
 "/**
     *
     * @access  public
     * @param string  $name
     * @return  boolean success
     */",
 "/**
     * @access  public
     * @return  boolean whether the file is readable or not
     */",
 "/**
     * If we are on a server with open_basedir, we must move the file
     * before opening it. The FAQ 1.11 explains how to create the \"./tmp\"
     * directory - if needed
     *
     * @todo move check of $cfg[\\'TempDir\\'] into PMA_Config?
     * @access  public
     * @return  boolean whether uploaded fiel is fine or not
     */",
 "/**
         * @todo
         * get registered plugins for file compression

        foreach (PMA_getPlugins($type = \\'compression\\') as $plugin) {
            if (call_user_func_array(array($plugin[\\'classname\\'], \\'canHandle\\'), array($this->getName()))) {
                $this->setCompressionPlugin($plugin);
                break;
            }
        }
         */",
 "/**
     * Detects what compression filse uses
     *
     * @todo    move file read part into readChunk() or getChunk()
     * @todo    add support for compression plugins
     * @access  protected
     * @return  string MIME type of compression, none for none
     */",
 "/**
     * whether the content should be decompressed before returned
     */",
 "/**
     * @return bool
     */",
 "/**
     * @return  string MIME type of compression, none for none
     * @access  public
     */",
 "/**
     * advances the file pointer in the file handle by $length bytes/chars
     *
     * @param integer $length numbers of chars/bytes to skip
     * @return  boolean
     * @todo this function is unused
     */",
 "/**
     * http://bugs.php.net/bug.php?id=29532
     * bzip reads a maximum of 8192 bytes on windows systems
     * @todo this function is unused
     * @param int $max_size
     * @return bool|string
     */",
 "/**
     * sets reference to most recent BLOB repository reference
     *
     * @access  public
     * @param string - BLOB repository reference
    */",
 "/**
     * retrieves reference to most recent BLOB repository reference
     *
     * @access  public
     * @return  string - most recent BLOB repository reference
    */",
 "/**
 *
 * @todo when uploading a file into a blob field, should we also consider using
 *       chunks like in import? UPDATE `table` SET `field` = `field` + [chunk]
 * @package PhpMyAdmin
 */",
 "/**
 *
 */",
 "/**
                         * Do not handle the underscore wildcard 
                         * (this case must be rare anyway)
                         */",
 "/**
 * sets privilege information extracted from SHOW GRANTS result
 *
 * Detection for some CREATE privilege.
 *
 * Since MySQL 4.1.2, we can easily detect current user\\'s grants using $userlink
 * (no control user needed) and we don\\'t have to try any other method for
 * detection
 *
 * @todo fix to get really all privileges, not only explicitly defined for this user
 * from MySQL manual: (http://dev.mysql.com/doc/refman/5.0/en/show-grants.html)
 * SHOW GRANTS displays only the privileges granted explicitly to the named
 * account. Other privileges might be available to the account, but they are not
 * displayed. For example, if an anonymous account exists, the named account
 * might be able to use its privileges, but SHOW GRANTS will not display them.
 *
 */",
 "/**
 * Logs user information to webserver logs.
 */",
 "/**
 * retrieves table info and stores it in $GLOBALS[\\'PMD\\']
 *
 */",
 "/**
 * retrieves table column info
 *
 * @return  array   table column nfo
 */",
 "/**
 * returns JavaScript code for intializing vars
 *
 * @return string   JavaScript code
 */",
 "/**
 * @return  array unique or primary indizes
 */",
 "/**
 * returns all indizes
 *
 * @param boolean whether to include ony unique ones
 * @return  array indizes
 */",
 "/**
 *
 *
 * @return  array   ???
 */",
 "/**
 * @return  array   table positions and sizes
 */",
 "/**
 * returns  distinct values from $GLOBALS[\\'PMD\\'][\\'OWNER\\']
 *
 * @return  array   owner
 */",
 "/**
     * Constructor
     *
     * @param string  $string
     * @param integer $number
     * @param array   $params
     * @param integer $sanitize
     */",
 "/**
     * magic method: return string representation for this object
     *
     * @return string
     */",
 "/**
     * get PMA_Message of type success
     *
     * shorthand for getting a simple success message
     *
     * @static
     * @param string $string a localized string e.g. __(\\'Your SQL query has been executed successfully\\')
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message of type error
     *
     * shorthand for getting a simple error message
     *
     * @static
     * @param string $string a localized string e.g. __(\\'Error\\')
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message of type notice
     *
     * shorthand for getting a simple notice message
     *
     * @static
     * @param string  $string a localized string e.g. __(\\'The additional features for working with linked tables have been deactivated. To find out why click %shere%s.\\')
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message with customized content
     *
     * shorthand for getting a customized message
     *
     * @static
     * @param string    $message
     * @param integer   $type
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message for number of affected rows
     *
     * shorthand for getting a customized message
     *
     * @static
     * @param integer   $rows Number of rows
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message for number of deleted rows
     *
     * shorthand for getting a customized message
     *
     * @static
     * @param integer   $rows Number of rows
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message for number of inserted rows
     *
     * shorthand for getting a customized message
     *
     * @static
     * @param integer   $rows Number of rows
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message of type error with custom content
     *
     * shorthand for getting a customized error message
     *
     * @static
     * @param string  $message
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message of type notice with custom content
     *
     * shorthand for getting a customized notice message
     *
     * @static
     * @param string  $message
     * @return  PMA_Message
     */",
 "/**
     * get PMA_Message of type success with custom content
     *
     * shorthand for getting a customized success message
     *
     * @static
     * @param string  $message
     * @return  PMA_Message
     */",
 "/**
     * returns whether this message is a success message or not
     * and optionaly makes this message a success message
     *
     * @param boolean $set
     * @return  boolean whether this is a success message or not
     */",
 "/**
     * returns whether this message is a notice message or not
     * and optionally makes this message a notice message
     *
     * @param boolean $set
     * @return  boolean whether this is a notice message or not
     */",
 "/**
     * returns whether this message is an error message or not
     * and optionally makes this message an error message
     *
     * @param boolean $set
     * @return  boolean whether this is an error message or not
     */",
 "/**
     * set raw message (overrides string)
     *
     * @param string  $message
     * @param boolean $sanitize whether to sanitize $message or not
     */",
 "/**
     * set string (does not take effect if raw message is set)
     *
     * @param string  $_string
     * @param boolean $sanitize whether to sanitize $string or not
     */",
 "/**
     * set message type number
     *
     * @param integer $number
     */",
 "/**
     * add parameter, usually in conjunction with strings
     *
     * usage
     * <code>
     * $message->addParam(\\'strLocale\\', false);
     * $message->addParam(\\'[em]some string[/em]\\');
     * $message->addParam(\\'<img src=\"img\" />\\', false);
     * </code>
     *
     * @param mixed   $param
     * @param boolean $raw
     */",
 "/**
     * add another string to be concatenated on displaying
     *
     * @param string  $string    to be added
     * @param string  $separator to use between this and previous string/message
     */",
 "/**
     * add a bunch of messages at once
     *
     * @param array   $messages  to be added
     * @param string  $separator to use between this and previous string/message
     */",
 "/**
     * add another raw message to be concatenated on displaying
     *
     * @param mixed   $message   to be added
     * @param string  $separator to use between this and previous string/message
     */",
 "/**
     * set all params at once, usually used in conjunction with string
     *
     * @param array   $params
     * @param boolean $sanitize
     */",
 "/**
     * return all parameters
     *
     * @return array
     */",
 "/**
     * return all added messages
     *
     * @return array
     */",
 "/**
     * Sanitizes $message
     *
     * @static
     * @param mixed  $message the message(s)
     * @return  mixed  the sanitized message(s)
     * @access  public
     */",
 "/**
     * decode $message, taking into account our special codes
     * for formatting
     *
     * @static
     * @param string  $message the message
     * @return  string  the decoded message
     * @access  public
     */",
 "/**
     * wrapper for sprintf()
     *
     * @return  string formatted
     */",
 "/**
     * returns unique PMA_Message::$_hash, if not exists it will be created
     *
     * @return  string PMA_Message::$_hash
     */",
 "/**
     * returns compiled message
     *
     * @return  string complete message
     */",
 "/**
     * returns PMA_Message::$_string
     *
     * @return  string PMA_Message::$_string
     */",
 "/**
     * returns PMA_Message::$_number
     *
     * @return  integer PMA_Message::$_number
     */",
 "/**
     * returns level of message
     *
     * @return  string  level of message
     */",
 "/**
     * Displays the message in HTML
     *
     */",
 "/**
     * returns HTML code for displaying this message
     *
     *
     * @return string whole message box
     */",
 "/**
     * sets and returns whether the message was displayed or not
     *
     * @param boolean $is_displayed
     * @return  boolean PMA_Message::$_is_displayed
     */",
 "/**
 * a single message
 *
 * simple usage examples:
 * <code>
 * // display simple error message \\'Error\\'
 * PMA_Message::error()->display();
 *
 * // get simple success message \\'Success\\'
 * $message = PMA_Message::success();
 *
 * // get special notice \\'Some locale notice\\'
 * $message = PMA_Message::notice(\\'strSomeLocaleNotice\\');
 * </code>
 *
 * more advanced usage example:
 * <code>
 * // create a localized success message
 * $message = PMA_Message::success(\\'strSomeLocaleMessage\\');
 *
 * // create another message, a hint, with a localized string which expects
 * // two parameters: $strSomeFootnote = \\'Read the %smanual%s\\'
 * $hint = PMA_Message::notice(\\'strSomeFootnote\\');
 * // replace %d with the following params
 * $hint->addParam(\\'[a@./Documentation.html#cfg_Example@_blank]\\');
 * $hint->addParam(\\'[/a]\\');
 * // add this hint as a footnote
 * $hint = PMA_showHint($hint);
 *
 * // add the retrieved footnote reference to the original message
 * $message->addMessage($hint);
 *
 * // create another message ...
 * $more = PMA_Message::notice(\\'strSomeMoreLocale\\');
 * $more->addString(\\'strSomeEvenMoreLocale\\', \\'<br />\\');
 * $more->addParam(\\'parameter for strSomeMoreLocale\\');
 * $more->addParam(\\'more parameter for strSomeMoreLocale\\');
 *
 * // and add it also to the original message
 * $message->addMessage($more);
 * // finally add another raw message
 * $message->addMessage(\\'some final words\\', \\' - \\');
 *
 * // display() will now print all messages in the same order as they are added
 * $message->display();
 * // strSomeLocaleMessage <sup>1</sup> strSomeMoreLocale<br />
 * // strSomeEvenMoreLocale - some final words
 * </code>
 * @package PhpMyAdmin
 */",
 "/**
 * finish and cleanup navigation.php script execution, only to be used in navigation.php
 *
 * @access private
 */",
 "/**
 * the relation settings
 */",
 "/**
 * displays collapsable db list
 *
 * @global  integer $element_counter
 * @global  string $img_minus
 * @global  string $img_plus
 * @global  string $href_left
 * @global  string $db_start
 * @global  string $common_url_query
 * @param array   $ext_dblist extended db list
 * @param integer $offset
 * @param integer $count
 */",
 "/**
 * display unordered list of tables
 * calls itself recursively if table in given list
 * is a list itself
 *
 * @global  integer the element counter
 * @global  string  html code for \\'-\\' image
 * @global  string  html code for \\'+\\' image
 * @global  string  html code for self link
 * @param array   $tables         array of tables/tablegroups
 * @param boolean $visible        whether the list is visible or not
 * @param string  $tab_group_full full tab group name
 * @param string  $table_db       db of this table
 */",
 "/**
 * Returns upload status.
 *
 * This is implementation for APC extension.
 *
 * @param string $id
 * @return array|null
 */",
 "/**
 * load relation params
 */",
 "/**
 * $_REQUEST[\\'no_js\\'] is set if open new window by JavaScript failed
 * so this page is loaded in main frame
 */",
 "/**
 * prepare JavaScript functionality
 */",
 "/**
 * Sends http headers
 */",
 "/**
     * Initializes settings. See phpMyAdmin/Documentation.html.
     *
     * @static
     *
     * @return nothing
     */",
 "/**
     * Actually enables tracking. This needs to be done after all
     * underlaying code is initialized.
     *
     * @static
     *
     * @return nothing
     */",
 "/**
     * Gets the on/off value of the Tracker module, starts initialization.
     *
     * @static
     *
     * @return boolean (true=on|false=off)
     */",
 "/**
     * Parses the name of a table from a SQL statement substring.
     *
     * @param string $string part of SQL statement
     *
     * @static
     *
     * @return string the name of table
     */",
 "/**
     * Gets the tracking status of a table, is it active or deactive ?
     *
     * @param string $dbname    name of database
     * @param string $tablename name of table
     *
     * @static
     *
     * @return boolean true or false
     */",
 "/**
     * Returns the comment line for the log.
     *
     * @return string Comment, contains date and username
     */",
 "/**
     * Creates tracking version of a table / view
     * (in other words: create a job to track future changes on the table).
     *
     * @param string $dbname       name of database
     * @param string $tablename    name of table
     * @param string $version      version
     * @param string $tracking_set set of tracking statements
     * @param bool   $is_view      if table is a view
     *
     * @static
     *
     * @return int result of version insertion
     */",
 "/**
     * Removes all tracking data for a table
     *
     * @param string $dbname    name of database
     * @param string $tablename name of table
     *
     * @static
     *
     * @return int result of version insertion
     */",
 "/**
     * Creates tracking version of a database
     * (in other words: create a job to track future changes on the database).
     *
     * @param string $dbname       name of database
     * @param string $version      version
     * @param string $query        query
     * @param string $tracking_set set of tracking statements
     *
     * @static
     *
     * @return int result of version insertion
     */",
 "/**
     * Changes tracking of a table.
     *
     * @param string  $dbname    name of database
     * @param string  $tablename name of table
     * @param string  $version   version
     * @param integer $new_state the new state of tracking
     *
     * @static
     *
     * @return int result of SQL query
     */",
 "/**
     * Changes tracking data of a table.
     *
     * @param string       $dbname    name of database
     * @param string       $tablename name of table
     * @param string       $version   version
     * @param string       $type      type of data(DDL || DML)
     * @param string|array $new_data  the new tracking data
     *
     * @static
     *
     * @return bool result of change
     */",
 "/**
     * Activates tracking of a table.
     *
     * @param string $dbname    name of database
     * @param string $tablename name of table
     * @param string $version   version
     *
     * @static
     *
     * @return int result of SQL query
     */",
 "/**
     * Deactivates tracking of a table.
     *
     * @param string $dbname    name of database
     * @param string $tablename name of table
     * @param string $version   version
     *
     * @static
     *
     * @return int result of SQL query
     */",
 "/**
     * Gets the newest version of a tracking job
     * (in other words: gets the HEAD version).
     *
     * @param string $dbname    name of database
     * @param string $tablename name of table
     * @param string $statement tracked statement
     *
     * @static
     *
     * @return int (-1 if no version exists | >  0 if a version exists)
     */",
 "/**
     * Gets the record of a tracking job.
     *
     * @param string $dbname    name of database
     * @param string $tablename name of table
     * @param string $version   version number
     *
     * @static
     *
     * @return mixed record DDM log, DDL log, structure snapshot, tracked statements.
     */",
 "/**
     * Parses a query. Gets
     *  - statement identifier (UPDATE, ALTER TABLE, ...)
     *  - type of statement, is it part of DDL or DML ?
     *  - tablename
     *
     * @param string $query query
     *
     * @static
     * @todo: using PMA SQL Parser when possible
     * @todo: support multi-table/view drops
     *
     * @return mixed Array containing identifier, type and tablename.
     *
     */",
 "/**
     * Analyzes a given SQL statement and saves tracking data.
     *
     * @param string $query a SQL query
     *
     * @static
     *
     * @return nothing
     */",
 "/**
     * Transforms tracking set for Drizzle, which has no SET type
     *
     * Converts int<>string for Drizzle, does nothing for MySQL
     *
     * @param int|string $tracking_set
     * @return int|string
     */",
 "/**
 * This class tracks changes on databases, tables and views.
 * For more information please see phpMyAdmin/Documentation.html
 *
 * @package PhpMyAdmin
 *
 * @todo use stristr instead of strstr
 */",
 "/**
 * Set parameters for links
 * @deprecated
 */",
 "/**
 * Defines the urls to return to in case of error in a sql statement
 */",
 "/**
 * @global array MySQL function names
 */",
 "/**
 * @global array MySQL attributes
 */",
 "/**
 * words that are reserved by MySQL and may not be used as identifiers without quotes
 *
 * @see http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html
 *
 * @global array MySQL reserved words
 */",
 "/**
 * words forbidden to be used as column or table name wihtout quotes
 * as seen in http://dev.mysql.com/doc/mysql/en/reserved-words.html
 *
 * @global array MySQL forbidden words
 */",
 "/**
 * the MySQL column/data types
 *
 * @see http://dev.mysql.com/doc/refman/5.1/en/data-types.html
 * @see http://dev.mysql.com/doc/refman/5.1/en/mysql-spatial-datatypes.html
 *
 * @global array MySQL column types
 */",
 "/**
 * Documentation links for operators.
 */",
 "/**
 * Documentation links for functions.
 */",
 "/**
 *
 */",
 "/**
     * @return  array   variable names
     */",
 "/**
     * @return string   LIKE pattern
     */",
 "/**
     * returns string with filename for the MySQL helppage
     * about this storage engne
     *
     * @return  string  mysql helppage filename
     */",
 "/**
 *
 * @package PhpMyAdmin-Engines
 */",
 "/**
             * 2.2.1
             * @todo defines edit/delete links depending on show statement
             */",
 "/**
 * Defines the display mode to use for the results of a SQL query
 *
 * It uses a synthetic string that contains all the required informations.
 * In this string:
 *   - the first two characters stand for the action to do while
 *     clicking on the \"edit\" link (e.g. \\'ur\\' for update a row, \\'nn\\' for no
 *     edit link...);
 *   - the next two characters stand for the action to do while
 *     clicking on the \"delete\" link (e.g. \\'kp\\' for kill a process, \\'nn\\' for
 *     no delete link...);
 *   - the next characters are boolean values (1/0) and respectively stand
 *     for sorting links, navigation bar, \"insert a new row\" link, the
 *     bookmark feature, the expand/collapse text/blob fields button and
 *     the \"display printable view\" option.
 *     Of course \\'0\\'/\\'1\\' means the feature won\\'t/will be enabled.
 *
 * @param string  &$the_disp_mode the synthetic value for display_mode (see a few
 *                                lines above for explanations)
 * @param integer &$the_total     the total number of rows returned by the SQL query
 *                                without any programmatically appended \"LIMIT\" clause
 *                                (just a copy of $unlim_num_rows if it exists, else
 *                                computed inside this function)
 *
 * @return  array    an array with explicit indexes for all the display
 *                   elements
 *
 * @global  string   the database name
 * @global  string   the table name
 * @global  integer  the total number of rows returned by the SQL query
 *                   without any programmatically appended \"LIMIT\" clause
 * @global  array    the properties of the fields returned by the query
 * @global  string   the URL to return to in case of error in a SQL
 *                   statement
 *
 * @access  private
 *
 * @see     PMA_displayTable()
 */",
 "/**
 * Return true if we are executing a query in the form of
 * \"SELECT * FROM <a table> ...\"
 *
 * @return boolean
 */",
 "/**
 * Displays a navigation button
 *
 * @param string  $caption            iconic caption for button
 * @param string  $title              text for button
 * @param integer $pos                position for next query
 * @param string  $html_sql_query     query ready for display
 * @param string  $onsubmit           optional onsubmit clause
 * @param string  $input_for_real_end optional hidden field for special treatment
 * @param string  $onclick            optional onclick clause
 *
 * @return nothing
 *
 * @global string   $db             the database name
 * @global string   $table          the table name
 * @global string   $goto           the URL to go back in case of errors
 *
 * @access private
 *
 * @see     PMA_displayTableNavigation()
 */",
 "/**
     * @todo move this to a central place
     * @todo for other future table types
     */",
 "/**
 * Displays a navigation bar to browse among the results of a SQL query
 *
 * @param integer $pos_next                  the offset for the \"next\" page
 * @param integer $pos_prev                  the offset for the \"previous\" page
 * @param string  $sql_query                 the URL-encoded query
 * @param string  $id_for_direction_dropdown the id for the direction dropdown
 *
 * @return nothing
 *
 * @global  string   $db             the database name
 * @global  string   $table          the table name
 * @global  string   $goto           the URL to go back in case of errors
 * @global  integer  $num_rows       the total number of rows returned by the
 *                                   SQL query
 * @global  integer  $unlim_num_rows the total number of rows returned by the
 *                                   SQL any programmatically appended \"LIMIT\" clause
 * @global  boolean  $is_innodb      whether its InnoDB or not
 * @global  array    $showtable      table definitions
 *
 * @access  private
 *
 * @see     PMA_displayTable()
 */",
 "/**
 * Displays the headers of the results table
 *
 * @param array   &$is_display                 which elements to display
 * @param array   &$fields_meta                the list of fields properties
 * @param integer $fields_cnt                  the total number of fields returned by the SQL query
 * @param array   $analyzed_sql                the analyzed query
 * @param string  $sort_expression             sort expression
 * @param string  $sort_expression_nodirection sort expression without direction
 * @param string  $sort_direction              sort direction
 *
 * @return  boolean  $clause_is_unique
 *
 * @global  string   $db               the database name
 * @global  string   $table            the table name
 * @global  string   $goto             the URL to go back in case of errors
 * @global  string   $sql_query        the SQL query
 * @global  integer  $num_rows         the total number of rows returned by the
 *                                     SQL query
 * @global  array    $vertical_display informations used with vertical display
 *                                     mode
 *
 * @access  private
 *
 * @see     PMA_displayTable()
 */",
 "/**
 * Prepares the display for a value
 *
 * @param string $class           class of table cell
 * @param bool   $condition_field whether to add CSS class condition
 * @param string $value           value to display
 *
 * @return  string  the td
 */",
 "/**
 * Prepares the display for a null value
 *
 * @param string $class           class of table cell
 * @param bool   $condition_field whether to add CSS class condition
 * @param object $meta            the meta-information about this field
 * @param string $align           cell allignment
 *
 * @return  string  the td
 */",
 "/**
 * Prepares the display for an empty value
 *
 * @param string $class           class of table cell
 * @param bool   $condition_field whether to add CSS class condition
 * @param object $meta            the meta-information about this field
 * @param string $align           cell allignment
 *
 * @return  string  the td
 */",
 "/**
 * Adds the relavant classes.
 *
 * @param string $class              class of table cell
 * @param bool   $condition_field    whether to add CSS class condition
 * @param object $meta               the meta-information about this field
 * @param string $nowrap             avoid wrapping
 * @param bool   $is_field_truncated is field truncated (display ...)
 * @param string $transform_function transformation function
 * @param string $default_function   default transformation function
 *
 * @return string the list of classes
 */",
 "/**
 * Displays the body of the results table
 *
 * @param integer &$dt_result   the link id associated to the query which results have
 *                              to be displayed
 * @param array   &$is_display  which elements to display
 * @param array   $map          the list of relations
 * @param array   $analyzed_sql the analyzed query
 *
 * @return  boolean  always true
 *
 * @global string   $db                the database name
 * @global string   $table             the table name
 * @global string   $goto              the URL to go back in case of errors
 * @global string   $sql_query         the SQL query
 * @global array    $fields_meta       the list of fields properties
 * @global integer  $fields_cnt        the total number of fields returned by
 *                                      the SQL query
 * @global array    $vertical_display  informations used with vertical display
 *                                      mode
 * @global array    $highlight_columns column names to highlight
 * @global array    $row               current row data
 *
 * @access private
 *
 * @see     PMA_displayTable()
 */",
 "/**
 * Do display the result table with the vertical direction mode.
 *
 * @return  boolean  always true
 *
 * @global  array    $vertical_display the information to display
 *
 * @access  private
 *
 * @see     PMA_displayTable()
 */",
 "/**
 * Checks the posted options for viewing query resutls
 * and sets appropriate values in the session.
 *
 * @todo    make maximum remembered queries configurable
 * @todo    move/split into SQL class!?
 * @todo    currently this is called twice unnecessary
 * @todo    ignore LIMIT and ORDER in query!?
 *
 * @return nothing
 */",
 "/**
     * @todo move this to a central place
     * @todo for other future table types
     */",
 "/**
 * Displays a table of results returned by a SQL query.
 * This function is called by the \"sql.php\" script.
 *
 * @param integer &$dt_result     the link id associated to the query which results have
 *                                to be displayed
 * @param array   &$the_disp_mode the display mode
 * @param array   $analyzed_sql   the analyzed query
 *
 * @global  string   $db                the database name
 * @global  string   $table             the table name
 * @global  string   $goto              the URL to go back in case of errors
 * @global  string   $sql_query         the current SQL query
 * @global  integer  $num_rows          the total number of rows returned by the
 *                                      SQL query
 * @global  integer  $unlim_num_rows    the total number of rows returned by the
 *                                      SQL query without any programmatically
 *                                      appended \"LIMIT\" clause
 * @global  array    $fields_meta       the list of fields properties
 * @global  integer  $fields_cnt        the total number of fields returned by
 *                                      the SQL query
 * @global  array    $vertical_display  informations used with vertical display
 *                                      mode
 * @global  array    $highlight_columns column names to highlight
 * @global  array    $cfgRelation       the relation settings
 * @global  array    $showtable         table definitions
 *
 * @access  private
 *
 * @see     PMA_showMessage(), PMA_setDisplayMode(),
 *          PMA_displayTableNavigation(), PMA_displayTableHeaders(),
 *          PMA_displayTableBody(), PMA_displayResultsOperations()
 *
 * @return nothing
 */",
 "/**
 * Displays operations that are available on results.
 *
 * @param array $the_disp_mode the display mode
 * @param array $analyzed_sql  the analyzed query
 *
 * @global  string   $db                the database name
 * @global  string   $table             the table name
 * @global  string   $sql_query         the current SQL query
 * @global  integer  $unlim_num_rows    the total number of rows returned by the
 *                                      SQL query without any programmatically
 *                                      appended \"LIMIT\" clause
 *
 * @access  private
 *
 * @see     PMA_showMessage(), PMA_setDisplayMode(),
 *          PMA_displayTableNavigation(), PMA_displayTableHeaders(),
 *          PMA_displayTableBody(), PMA_displayResultsOperations()
 *
 * @return nothing
 */",
 "/**
 * Verifies what to do with non-printable contents (binary or BLOB)
 * in Browse mode.
 *
 * @param string $category           BLOB|BINARY|GEOMETRY
 * @param string $content            the binary content
 * @param string $transform_function transformation function
 * @param string $transform_options  transformation parameters
 * @param string $default_function   default transformation function
 * @param object $meta               the meta-information about this field
 * @param array  $url_params         parameters that should go to the download link
 *
 * @return  mixed  string or float
 */",
 "/**
 * Prepares the displayable content of a data cell in Browse mode,
 * taking into account foreign key description field and transformations
 *
 * @param string $class              css classes for the td element
 * @param bool   $condition_field    whether the column is a part of the where clause
 * @param string $analyzed_sql       the analyzed query
 * @param object $meta               the meta-information about this field
 * @param array  $map                the list of relations
 * @param string $data               data
 * @param string $transform_function transformation function
 * @param string $default_function   default function
 * @param string $nowrap             \\'nowrap\\' if the content should not be wrapped
 * @param string $where_comparison   data for the where cluase
 * @param array  $transform_options  array of options for transformation
 * @param bool   $is_field_truncated whether the field is truncated
 *
 * @return  string  formatted data
 */",
 "/**
 * Generates a checkbox for multi-row submits
 *
 * @param string $del_url           delete url
 * @param array  $is_display        array with explicit indexes for all the display elements
 * @param string $row_no            the row number
 * @param string $where_clause_html url encoded where cluase
 * @param array  $condition_array   array of conditions in the where cluase
 * @param string $del_query         delete query
 * @param string $id_suffix         suffix for the id
 * @param string $class             css classes for the td element
 *
 * @return  string  the generated HTML
 */",
 "/**
 * Generates an Edit link
 *
 * @param string $edit_url          edit url
 * @param string $class             css classes for td element
 * @param string $edit_str          text for the edit link
 * @param string $where_clause      where cluase
 * @param string $where_clause_html url encoded where cluase
 *
 * @return  string  the generated HTML
 */",
 "/**
 * Generates an Copy link
 *
 * @param string $copy_url          copy url
 * @param string $copy_str          text for the copy link
 * @param string $where_clause      where clause
 * @param string $where_clause_html url encoded where cluase
 * @param string $class             css classes for the td element
 *
 * @return  string  the generated HTML
 */",
 "/**
 * Generates a Delete link
 *
 * @param string $del_url delete url
 * @param string $del_str text for the delete link
 * @param string $js_conf text for the JS confirmation
 * @param string $class   css classes for the td element
 *
 * @return  string  the generated HTML
 */",
 "/**
 * Generates checkbox and links at some position (left or right)
 * (only called for horizontal mode)
 *
 * @param string $position          the position of the checkbox and links
 * @param string $del_url           delete url
 * @param array  $is_display        array with explicit indexes for all the display elements
 * @param string $row_no            row number
 * @param string $where_clause      where clause
 * @param string $where_clause_html url encoded where cluase
 * @param array  $condition_array   array of conditions in the where cluase
 * @param string $del_query         delete query
 * @param string $id_suffix         suffix for the id
 * @param string $edit_url          edit url
 * @param string $copy_url          copy url
 * @param string $class             css classes for the td elements
 * @param string $edit_str          text for the edit link
 * @param string $copy_str          text for the copy link
 * @param string $del_str           text for the delete link
 * @param string $js_conf           text for the JS confirmation
 *
 * @return  string  the generated HTML
 */",
 "/**
     * A private constructor; prevents direct creation of object.
     */",
 "/**
     * Returns the singleton.
     *
     * @return the singleton
     */",
 "/**
     * Scales each row.
     *
     * @param string $spatial spatial data of a row
     *
     * @return array containing the min, max values for x and y cordinates
     */",
 "/**
     * Adds to the PNG image object, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS POLYGON object
     * @param string $label      Label for the GIS POLYGON object
     * @param string $fill_color Color for the GIS POLYGON object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $image      Image object
     *
     * @return the modified image object
     */",
 "/**
     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS POLYGON object
     * @param string $label      Label for the GIS POLYGON object
     * @param string $fill_color Color for the GIS POLYGON object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $pdf        TCPDF instance
     *
     * @return the modified TCPDF instance
     */",
 "/**
     * Prepares and returns the code related to a row in the GIS dataset as SVG.
     *
     * @param string $spatial    GIS POLYGON object
     * @param string $label      Label for the GIS POLYGON object
     * @param string $fill_color Color for the GIS POLYGON object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return the code related to a row in the GIS dataset
     */",
 "/**
     * Prepares JavaScript related to a row in the GIS dataset
     * to visualize it with OpenLayers.
     *
     * @param string $spatial    GIS POLYGON object
     * @param int    $srid       Spatial reference ID
     * @param string $label      Label for the GIS POLYGON object
     * @param string $fill_color Color for the GIS POLYGON object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return JavaScript related to a row in the GIS dataset
     */",
 "/**
     * Draws a ring of the polygon using SVG path element.
     *
     * @param string $polygon    The ring
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return the code to draw the ring
     */",
 "/**
     * Generate the WKT with the set of parameters passed by the GIS editor.
     *
     * @param array  $gis_data GIS data
     * @param int    $index    Index into the parameter object
     * @param string $empty    Value for empty points
     *
     * @return WKT with the set of parameters passed by the GIS editor
     */",
 "/**
     * Calculates the area of a closed simple polygon.
     *
     * @param array $ring array of points forming the ring
     *
     * @return the area of a closed simple polygon.
     */",
 "/**
     * Determines whether a set of points represents an outer ring.
     * If points are in clockwise orientation then, they form an outer ring.
     *
     * @param array $ring array of points forming the ring
     *
     * @return whether a set of points represents an outer ring.
     */",
 "/**
     * Determines whether a given point is inside a given polygon.
     *
     * @param array $point   x, y coordinates of the point
     * @param array $polygon array of points forming the ring
     *
     * @return whether a given point is inside a given polygon
     */",
 "/**
     * Returns a point that is guaranteed to be on the surface of the ring.
     * (for simple closed rings)
     *
     * @param array $ring array of points forming the ring
     *
     * @return a point on the surface of the ring
     */",
 "/** Generate parameters for the GIS data editor from the value of the GIS column.
     *
     * @param string $value of the GIS column
     * @param index  $index of the geometry
     *
     * @return  parameters for the GIS data editor from the value of the GIS column
     */",
 "/**
 * Handles the visualization of GIS POLYGON objects.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
 * Defines the url to return to in case of error in a sql statement
 */",
 "/**
 * Builds and executes the db creation sql query
 */",
 "/**
         * String containing the SQL Query formatted in pretty HTML
         * @global array $GLOBALS[\\'extra_data\\']
         * @name $extra_data
         */",
 "/**
         * Build the array to be passed to {@link PMA_generate_common_url} to generate the links
         * @global array $GLOBALS[\\'db_url_params\\']
         * @name $db_url_params
         */",
 "/**
         * String that will contain the output HTML
         * @name    $new_db_string
         */",
 "/**
 * Converts encoding of text according to parameters with detected
 * conversion function.
 *
 * @param string   source charset
 * @param string   target charset
 * @param string   what to convert
 *
 * @return  string   converted text
 *
 * @access  public
 *
 */",
 "/**
     * Set Page Number
     *
     * @param integer $value Page Number of the document to be created
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set Show Grid
     *
     * @param boolean $value show grid of the document or not
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Sets showColor
     *
     * @param string $value \\'on\\' to set the the variable
     *
     * @return nothing
     */",
 "/**
     * Set Table Dimension
     *
     * @param boolean $value show table co-ordinates or not
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set same width of All Tables
     *
     * @param boolean $value set same width of all tables or not
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set Data Dictionary
     *
     * @param boolean $value show selected database data dictionary or not
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set Show only keys
     *
     * @param boolean $value show only keys or not
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set Orientation
     *
     * @param string $value Orientation will be portrait or landscape
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set type of paper
     *
     * @param string $value paper type can be A4 etc
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set title of the page
     *
     * @param string $title title of the page displayed at top of the document
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set type of export relational schema
     *
     * @param string $value can be pdf,svg,dia,visio,eps etc
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * get all tables involved or included in page
     *
     * @param string  $db         name of the database
     * @param integer $pageNumber page no. whose tables will be fetched in an array
     *
     * @return Array an array of tables
     *
     * @access public
     */",
 "/**
     * Displays an error message
     *
     * @param integer $pageNumber    ID of the chosen page
     * @param string  $type          Schema Type
     * @param string  $error_message The error mesage
     *
     * @global array    the PMA configuration array
     * @global string   the current database name
     *
     * @access public
     *
     * @return void
     */",
 "/**
 * This class is inherited by all schema classes
 * It contains those methods which are common in them
 * it works like factory pattern
 */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
     * returns array of storage engines
     *
     * @static
     * @staticvar array $storage_engines storage engines
     * @access  public
     * @return  array    of storage engines
     */",
 "/**
     * returns HTML code for storage engine select box
     *
     * @param string  $name                    The name of the select form element
     * @param string  $id                      The ID of the form field
     * @param string  $selected                The selected engine
     * @param boolean $offerUnavailableEngines Should unavailable storage engines be offered?
     *
     * @static
     * @return  string  html selectbox
     */",
 "/**
     * public static final PMA_StorageEngine getEngine()
     *
     * Loads the corresponding engine plugin, if available.
     *
     * @param string $engine The engine ID
     *
     * @return  object  The engine plugin
     */",
 "/**
     * return true if given engine name is supported/valid, otherwise false
     *
     * @param string $engine name of engine
     *
     * @static
     * @return  boolean whether $engine is valid or not
     */",
 "/**
     * returns as HTML table of the engine\\'s server variables
     *
     * @return string The table that was generated based on the retrieved information
     */",
 "/**
     * returns the engine specific handling for
     * PMA_ENGINE_DETAILS_TYPE_SIZE type variables.
     *
     * This function should be overridden when
     * PMA_ENGINE_DETAILS_TYPE_SIZE type needs to be
     * handled differently for a particular engine.
     *
     * @return string the formatted value and its unit
     */",
 "/**
     * returns array with detailed info about engine specific server variables
     *
     * @return  array   with detailed info about specific engine server variables
     */",
 "/**
     * Constructor
     *
     * @param string $engine The engine ID
     */",
 "/**
     * public String getTitle()
     *
     * Reveals the engine\\'s title
     *
     * @return string The title
     */",
 "/**
     * public String getComment()
     *
     * Fetches the server\\'s comment about this engine
     *
     * @return string The comment
     */",
 "/**
     * public String getSupportInformationMessage()
     *
     * @return  string   The localized message.
     */",
 "/**
     * public string[][] getVariables()
     *
     * Generates a list of MySQL variables that provide information about this
     * engine. This function should be overridden when extending this class
     * for a particular engine.
     *
     * @abstract
     * @return   Array   The list of variables.
     */",
 "/**
     * returns string with filename for the MySQL helppage
     * about this storage engne
     *
     * @return  string  mysql helppage filename
     */",
 "/**
     * public string getVariablesLikePattern()
     *
     * @abstract
     * @return  string  SQL query LIKE pattern
     */",
 "/**
     * public String[] getInfoPages()
     *
     * Returns a list of available information pages with labels
     *
     * @abstract
     * @return  array    The list
     */",
 "/**
     * public String getPage()
     *
     * Generates the requested information page
     *
     * @param string $id The page ID
     *
     * @abstract
     * @return  string      The page
     *          boolean     or false on error.
     */",
 "/**
 * base Storage Engine Class
 * @package PhpMyAdmin
 */",
 "/**
     * Exports routines (procedures and functions)
     *
     * @param string  $db
     * @return  bool  Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Possibly outputs comment
     *
     * @param string  $text  Text of comment
     * @return  string      The formatted comment
     *
     * @access  private
     */",
 "/**
     * Possibly outputs CRLF
     *
     * @return  string  $crlf or nothing
     *
     * @access private
     */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Returns a stand-in CREATE definition to resolve view dependencies
     *
     * @param string  $db    the database name
     * @param string  $view  the view name
     * @param string  $crlf  the end of line sequence
     * @return  string         resulting definition
     *
     * @access  public
     */",
 "/**
     * Returns $table\\'s CREATE definition
     *
     * @param string  $db             the database name
     * @param string  $table          the table name
     * @param string  $crlf           the end of line sequence
     * @param string  $error_url      the url to go back in case of error
     * @param bool    $show_dates     whether to include creation/update/check dates
     * @param bool    $add_semicolon  whether to add semicolon and end-of-line at the end
     * @param bool    $view           whether we\\'re handling a view
     * @return  string   resulting schema
     *
     * @access  public
     */",
 "/**
     * Returns $table\\'s comments, relations etc.
     *
     * @param string  $db           database name
     * @param string  $table        table name
     * @param string  $crlf         end of line sequence
     * @param bool    $do_relation  whether to include relation comments
     * @param bool    $do_mime      whether to include mime comments
     * @return  string   resulting comments
     *
     * @access  private
     */",
 "/**
     * Outputs table\\'s structure
     *
     * @param string  $db           database name
     * @param string  $table        table name
     * @param string  $crlf         the end of line sequence
     * @param string  $error_url    the url to go back in case of error
     * @param bool    $relation     whether to include relation comments
     * @param bool    $comments     whether to include the pmadb-style column comments
     *                                as comments in the structure; this is deprecated
     *                                but the parameter is left here because export.php
     *                                calls PMA_exportStructure() also for other export
     *                                types which use this parameter
     * @param bool    $mime         whether to include mime comments
     * @param bool    $dates        whether to include creation/update/check dates
     * @param string  $export_mode  \\'create_table\\', \\'triggers\\', \\'create_view\\', \\'stand_in\\'
     * @param string  $export_type  \\'server\\', \\'database\\', \\'table\\'
     * @return  bool      Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in SQL format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Sets the value for margins
     *
     * @param float $c_margin margin
     *
     * @return nothing
     */",
 "/**
     * Sets the scaling factor, defines minimum coordinates and margins
     *
     * @param float $scale      The scaling factor
     * @param float $xMin       The minimum X coordinate
     * @param float $yMin       The minimum Y coordinate
     * @param float $leftMargin The left margin
     * @param float $topMargin  The top margin
     *
     * @access public
     *
     * @return nothing
     */",
 "/**
     * Outputs a scaled cell
     *
     * @param float   $w      The cell width
     * @param float   $h      The cell height
     * @param string  $txt    The text to output
     * @param mixed   $border Whether to add borders or not
     * @param integer $ln     Where to put the cursor once the output is done
     * @param string  $align  Align mode
     * @param integer $fill   Whether to fill the cell with a color or not
     * @param string  $link   Link
     *
     * @access public
     *
     * @return nothing
     *
     * @see TCPDF::Cell()
     */",
 "/**
     * Draws a scaled line
     *
     * @param float $x1 The horizontal position of the starting point
     * @param float $y1 The vertical position of the starting point
     * @param float $x2 The horizontal position of the ending point
     * @param float $y2 The vertical position of the ending point
     *
     * @access public
     *
     * @return nothing
     *
     * @see TCPDF::Line()
     */",
 "/**
     * Sets x and y scaled positions
     *
     * @param float $x The x position
     * @param float $y The y position
     *
     * @access public
     *
     * @return nothing
     *
     * @see TCPDF::SetXY()
     */",
 "/**
     * Sets the X scaled positions
     *
     * @param float $x The x position
     *
     * @access public
     *
     * @return nothing
     *
     * @see TCPDF::SetX()
     */",
 "/**
     * Sets the scaled font size
     *
     * @param float $size The font size (in points)
     *
     * @access public
     *
     * @return nothing
     *
     * @see TCPDF::SetFontSize()
     */",
 "/**
     * Sets the scaled line width
     *
     * @param float $width The line width
     *
     * @access public
     *
     * @return nothing
     *
     * @see TCPDF::SetLineWidth()
     */",
 "/**
     * This method is used to render the page header.
     *
     * @return nothing
     *
     * @see TCPDF::Header()
     */",
 "/**
     * This function must be named \"Footer\" to work with the TCPDF library
     *
     * @return nothing
     *
     * @see PMA_PDF::Footer()
     */",
 "/**
     * Sets widths
     *
     * @param array $w array of widths
     *
     * @return nothing
     */",
 "/**
     * Compute number of lines used by a multicell of width w
     *
     * @param int    $w   width
     * @param string $txt text
     *
     * @return int
     */",
 "/**
 * Extends the \"TCPDF\" class and helps
 * in developing the structure of PDF Schema Export
 *
 * @access public
 * @see TCPDF
 */",
 "/**
     * The \"Table_Stats\" constructor
     *
     * @param string  $tableName      The table name
     * @param integer $fontSize       The font size
     * @param integer $pageNumber     The current page number (from the
     *                                $cfg[\\'Servers\\'][$i][\\'table_coords\\'] table)
     * @param integer &$sameWideWidth The max. with among tables
     * @param boolean $showKeys       Whether to display keys or not
     * @param boolean $showInfo       Whether to display table position or not
     *
     * @global object    The current PDF document
     * @global array     The relations settings
     * @global string    The current db name
     *
     * @return nothing
     *
     * @see PMA_Schema_PDF, Table_Stats::Table_Stats_setWidth,
     *     Table_Stats::Table_Stats_setHeight
     */",
 "/**
     * Returns title of the current table,
     * title can have the dimensions of the table
     *
     * @return string
     */",
 "/**
     * Sets the width of the table
     *
     * @param integer $fontSize The font size
     *
     * @global object    The current PDF document
     *
     * @access private
     *
     * @return nothing
     *
     * @see PMA_Schema_PDF
     */",
 "/**
     * Sets the height of the table
     *
     * @return nothing
     *
     * @access private
     */",
 "/**
     * Do draw the table
     *
     * @param integer $fontSize The font size
     * @param boolean $withDoc
     * @param boolean $setColor Whether to display color
     *
     * @global object The current PDF document
     *
     * @access public
     *
     * @return nothing
     *
     * @see PMA_Schema_PDF
     */",
 "/**
 * Table preferences/statistics
 *
 * This class preserves the table co-ordinates,fields
 * and helps in drawing/generating the Tables in PDF document.
 *
 * @name Table_Stats
 * @see PMA_Schema_PDF
 */",
 "/**
     * The \"Relation_Stats\" constructor
     *
     * @param string $master_table  The master table name
     * @param string $master_field  The relation field in the master table
     * @param string $foreign_table The foreign table name
     * @param string $foreign_field The relation field in the foreign table
     *
     * @return nothing
     *
     * @see Relation_Stats::_getXy
     */",
 "/**
     * Gets arrows coordinates
     *
     * @param string $table  The current table name
     * @param string $column The relation column name
     *
     * @return array Arrows coordinates
     *
     * @access private
     */",
 "/**
     * draws relation links and arrows shows foreign key relations
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     * @param integer $i           The id of the link to draw
     *
     * @global object    The current PDF document
     *
     * @access public
     *
     * @return nothing
     *
     * @see PMA_Schema_PDF
     */",
 "/**
 * Relation preferences/statistics
 *
 * This class fetches the table master and foreign fields positions
 * and helps in generating the Table references and then connects
 * master table\\'s master field to foreign table\\'s foreign key
 * in PDF document.
 *
 * @name Relation_Stats
 * @see PMA_Schema_PDF::SetDrawColor, PMA_Schema_PDF::PMA_PDF_setLineWidthScale,
 * PMA_Schema_PDF::PMA_PDF_lineScale
 */",
 "/**
     * The \"PMA_Pdf_Relation_Schema\" constructor
     *
     * @global object   The current PDF Schema document
     * @global string   The current db name
     * @global array    The relations settings
     * @access private
     * @see PMA_Schema_PDF
     */",
 "/**
     * Sets X and Y minimum and maximum for a table cell
     *
     * @param string $table The table name of which sets XY co-ordinates
     *
     * @return nothing
     *
     * @access private
     */",
 "/**
     * Defines relation objects
     *
     * @param string  $masterTable  The master table name
     * @param string  $masterField  The relation field in the master table
     * @param string  $foreignTable The foreign table name
     * @param string  $foreignField The relation field in the foreign table
     * @param boolean $showInfo     Whether to display table position or not
     *
     * @access private
     *
     * @return nothing
     *
     * @see _setMinMax
     */",
 "/**
     * Draws the grid
     *
     * @global object  the current PMA_Schema_PDF instance
     *
     * @access private
     *
     * @return nothing
     *
     * @see PMA_Schema_PDF
     */",
 "/**
     * Draws relation arrows
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     *
     * @access private
     *
     * @return nothing
     *
     * @see Relation_Stats::relationdraw()
     */",
 "/**
     * Draws tables
     *
     * @param boolean $changeColor Whether to display table position or not
     *
     * @access private
     *
     * @return nothing
     *
     * @see Table_Stats::tableDraw()
     */",
 "/**
     * Ouputs the PDF document to a file
     * or sends the output to browser
     *
     * @param integer $pageNumber page number
     *
     * @global object   The current PDF document
     * @global string   The current database name
     * @global integer  The current page number (from the
     *                  $cfg[\\'Servers\\'][$i][\\'table_coords\\'] table)
     * @access private
     *
     * @return nothing
     *
     * @see PMA_Schema_PDF
     */",
 "/**
             * Gets table informations
             */",
 "/**
             * Gets table keys and retains them
             */",
 "/**
             * Gets fields properties
             */",
 "/**
             * Displays the comments of the table if MySQL >= 3.23
             */",
 "/**
                     * @todo find optimal width for all formats
                     */",
 "/**
 * Pdf Relation Schema Class
 *
 * Purpose of this class is to generate the PDF Document. PDF is widely
 * used format for documenting text,fonts,images and 3d vector graphics.
 *
 * This class inherits Export_Relation_Schema class has common functionality added
 * to this class
 *
 * @name Pdf_Relation_Schema
 */",
 "/**
 * Generate the conditional classes that will
 * be used to attach jQuery events to links
 */",
 "/**
 * Create labels for the list
 */",
 "/**
 * Keep a list of errors that occured while
 * processing an \\'Add\\' or \\'Edit\\' operation.
 */",
 "/**
 * Settings for relations stuff
 */",
 "/**
     * sets path to folder containing the themes
     *
     * @param string  $path   path to themes folder
     * @return  boolean success
     */",
 "/**
     * @public
     * @return  string
     */",
 "/**
     * sets if there are different themes per server
     *
     * @param boolean $per_server
     */",
 "/**
     * @return  string  cookie name
     */",
 "/**
     * returns name of theme stored in the cookie
     * @return  string  theme name from cookie
     */",
 "/**
     * save theme in cookie
     *
     * @return bool true
     */",
 "/**
     * @private
     * @param string $folder
     * @return  boolean
     */",
 "/**
     * read all themes
     *
     * @return bool true
     */",
 "/**
     * checks if given theme name is a known theme
     *
     * @param string  $theme  name fo theme to check for
     * @return bool
     */",
 "/**
     * returns HTML selectbox, with or without form enclosed
     *
     * @param boolean $form   whether enclosed by from tags or not
     * @return string
     */",
 "/**
     * enables backward compatibility
     */",
 "/**
     * prints out preview for every theme
     *
     */",
 "/**
     * returns PMA_Theme object for fall back theme
     * @return object   PMA_Theme
     */",
 "/**
     * prints css data
     *
     * @param string $type
     * @return bool
     */",
 "/**
 *
 * @package PhpMyAdmin
 */",
 "/**
 * This function be used eventually to support more modes.  It is needed
 * because both header and footer functions must know what each other is
 * doing.
 *
 * @staticvar integer remember last calculated value
 * @return  integer  the output buffer mode
 */",
 "/**
 * This function will need to run at the top of all pages if output
 * output buffering is turned on.  It also needs to be passed $mode from
 * the PMA_outBufferModeGet() function or it will be useless.
 *
 */",
 "/**
 * This function will need to run at the bottom of all pages if output
 * buffering is turned on.  It also needs to be passed $mode from the
 * PMA_outBufferModeGet() function or it will be useless.
 *
 */",
 "/**
 * Gets the relation settings
 */",
 "/**
 * Checks for superuser privileges
 */",
 "/**
 * Displays tab links
 */",
 "/**
 * Gets the relations settings
 */",
 "/**
     * Gets table informations
     */",
 "/**
     * Gets columns properties
     */",
 "/**
             * @todo merge this logic with the one in tbl_structure.php
             * or move it in a function similar to PMA_DBI_get_columns_full()
             * but based on SHOW CREATE TABLE because information_schema
             * cannot be trusted in this case (MySQL bug)
             */",
 "/**
 * Gets the php internal encoding codes and sets the available encoding
 * codes list
 * 2002/1/4 by Y.Kawada
 *
 * @global  string   the current encoding code
 * @global  string   the available encoding codes list
 *
 * @return  boolean  always true
 */",
 "/**
 * Reverses SJIS & EUC-JP position in the encoding codes list
 * 2002/1/4 by Y.Kawada
 *
 * @global  string   the available encoding codes list
 *
 * @return  boolean  always true
 */",
 "/**
 * Kanji string encoding convert
 * 2002/1/4 by Y.Kawada
 *
 * @param string   the string to convert
 * @param string   the destination encoding code
 * @param string   set \\'kana\\' convert to JIS-X208-kana
 *
 * @global  string   the available encoding codes list
 *
 * @return  string   the converted string
 */",
 "/**
 * Kanji file encoding convert
 * 2002/1/4 by Y.Kawada
 *
 * @param string   the name of the file to convert
 * @param string   the destination encoding code
 * @param string   set \\'kana\\' convert to JIS-X208-kana
 *
 * @return  string   the name of the converted file
 */",
 "/**
 * Defines radio form fields to switch between encoding modes
 * 2002/1/4 by Y.Kawada
 *
 * @param string   spaces character to prepend the output with
 *
 * @return  string   xhtml code for the radio controls
 */",
 "/**
 * Gets the \"true\" IP address of the current user
 *
 * @return  string   the ip of the user
 *
 * @access  private
 */",
 "/**
 * Based on IP Pattern Matcher
 * Originally by J.Adams <jna@retina.net>
 * Found on <http://www.php.net/manual/en/function.ip2long.php>
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxx.xxx.xxx.xxx        (exact)
 * xxx.xxx.xxx.[yyy-zzz]  (range)
 * xxx.xxx.xxx.xxx/nn     (CIDR)
 *
 * Does not match:
 * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string   string of IP range to match
 * @param string   string of IP to test against range
 *
 * @return  boolean    always true
 *
 * @access  public
 */",
 "/**
 * Runs through IP Allow/Deny rules the use of it below for more information
 *
 * @param string \\'allow\\' | \\'deny\\' type of rule to match
 *
 * @return  bool   Matched a rule ?
 *
 * @access  public
 *
 * @see     PMA_getIp()
 */",
 "/**
 * Does the common work
 */",
 "/**
 * Common initialization for user preferences modification pages
 *
 */",
 "/**
 * Loads user preferences
 *
 * Returns an array:
 * * config_data - path => value pairs
 * * mtime - last modification time
 * * type - \\'db\\' (config read from pmadb) or \\'session\\' (read from user session)
 *
 * @return array
 */",
 "/**
 * Saves user preferences
 *
 * @param array $config_array configuration array
 *
 * @return true|PMA_Message
 */",
 "/**
 * Returns a user preferences array filtered by $cfg[\\'UserprefsDisallow\\']
 * (blacklist) and keys from user preferences form (whitelist)
 *
 * @param array $config_data path => value pairs
 *
 * @return array
 */",
 "/**
 * Reads user preferences field names
 *
 * @param array|null $forms
 *
 * @return array
 */",
 "/**
 * Updates one user preferences option (loads and saves to database).
 *
 * No validation is done!
 *
 * @param string $path          configuration
 * @param mixed  $value         value
 * @param mixed  $default_value default value
 *
 * @return void
 */",
 "/**
 * Redirects after saving new user preferences
 *
 * @param array  $forms
 * @param array  $old_settings
 * @param string $file_name
 * @param array  $params
 * @param string $hash
 */",
 "/**
 * Shows form which allows to quickly load settings stored in browser\\'s local storage
 *
 */",
 "/**
 * Does the common work
 */",
 "/**
     * A private constructor; prevents direct creation of object.
     */",
 "/**
     * Returns the singleton.
     *
     * @return the singleton
     */",
 "/**
     * Scales each row.
     *
     * @param string $spatial spatial data of a row
     *
     * @return array containing the min, max values for x and y cordinates
     */",
 "/**
     * Adds to the PNG image object, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS GEOMETRYCOLLECTION object
     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object
     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $image      Image object
     *
     * @return the modified image object
     */",
 "/**
     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS GEOMETRYCOLLECTION object
     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object
     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $pdf        TCPDF instance
     *
     * @return the modified TCPDF instance
     */",
 "/**
     * Prepares and returns the code related to a row in the GIS dataset as SVG.
     *
     * @param string $spatial    GIS GEOMETRYCOLLECTION object
     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object
     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return the code related to a row in the GIS dataset
     */",
 "/**
     * Prepares JavaScript related to a row in the GIS dataset
     * to visualize it with OpenLayers.
     *
     * @param string $spatial    GIS GEOMETRYCOLLECTION object
     * @param int    $srid       Spatial reference ID
     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object
     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return JavaScript related to a row in the GIS dataset
     */",
 "/**
     * Split the GEOMETRYCOLLECTION object and get its constituents.
     *
     * @param string $goem_col Geometry collection string
     *
     * @return the constituents of the geometry collection object
     */",
 "/**
     * Generate the WKT with the set of parameters passed by the GIS editor.
     *
     * @param array  $gis_data GIS data
     * @param int    $index    Index into the parameter object
     * @param string $empty    Value for empty points
     *
     * @return WKT with the set of parameters passed by the GIS editor
     */",
 "/** Generate parameters for the GIS data editor from the value of the GIS column.
     *
     * @param string $value of the GIS column
     * @param index  $index of the geometry
     *
     * @return  parameters for the GIS data editor from the value of the GIS column
     */",
 "/**
 * Handles the visualization of GIS GEOMETRYCOLLECTION objects.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
 * This function is called from one of the other functions in this file
 * and it completes the handling of the export functionality.
 *
 * @param  string  $item_name    The name of the item that we are exporting
 * @param  string  $export_data  The SQL query to create the requested item
 */",
 "/**
 * If necessary, prepares event information and passes
 * it to PMA_RTE_handleExport() for the actual export.
 */",
 "/**
 * If necessary, prepares routine information and passes
 * it to PMA_RTE_handleExport() for the actual export.
 */",
 "/**
 * If necessary, prepares trigger information and passes
 * it to PMA_RTE_handleExport() for the actual export.
 */",
 "/**
     * Prepares and returns the code related to a row in the query result as SVG.
     *
     * @param array  $options  Array containing options related to properties of the point
     * @return the code related to a row in the query result.
     */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
     * Returns the singleton instance of geometric class of the given type.
     *
     * @param string $type type of the geometric object
     *
     * @throws Exception
     *
     * @return the singleton instance of geometric class of the given type
     */",
 "/**
 * Factory class that handles the creation of geometric objects.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
 * Sets a variable to remember headers have been sent
 */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
     * returns array with variable names dedicated to PBMS daemon
     *
     * @return  array   variable names
     */",
 "/**
 * the PBMS daemon
 * @package PhpMyAdmin-Engines
 */",
 "/**
     * A private constructor; prevents direct creation of object.
     */",
 "/**
     * Returns the singleton.
     *
     * @return the singleton
     */",
 "/**
     * Scales each row.
     *
     * @param string $spatial spatial data of a row
     *
     * @return array containing the min, max values for x and y cordinates
     */",
 "/**
     * Adds to the PNG image object, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS LINESTRING object
     * @param string $label      Label for the GIS LINESTRING object
     * @param string $line_color Color for the GIS LINESTRING object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $image      Image object
     *
     * @return the modified image object
     */",
 "/**
     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS LINESTRING object
     * @param string $label      Label for the GIS LINESTRING object
     * @param string $line_color Color for the GIS LINESTRING object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $pdf        TCPDF instance
     *
     * @return the modified TCPDF instance
     */",
 "/**
     * Prepares and returns the code related to a row in the GIS dataset as SVG.
     *
     * @param string $spatial    GIS LINESTRING object
     * @param string $label      Label for the GIS LINESTRING object
     * @param string $line_color Color for the GIS LINESTRING object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return the code related to a row in the GIS dataset
     */",
 "/**
     * Prepares JavaScript related to a row in the GIS dataset
     * to visualize it with OpenLayers.
     *
     * @param string $spatial    GIS LINESTRING object
     * @param int    $srid       Spatial reference ID
     * @param string $label      Label for the GIS LINESTRING object
     * @param string $line_color Color for the GIS LINESTRING object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return JavaScript related to a row in the GIS dataset
     */",
 "/**
     * Generate the WKT with the set of parameters passed by the GIS editor.
     *
     * @param array  $gis_data GIS data
     * @param int    $index    Index into the parameter object
     * @param string $empty    Value for empty points
     *
     * @return WKT with the set of parameters passed by the GIS editor
     */",
 "/**
     * Generate parameters for the GIS data editor from the value of the GIS column.
     *
     * @param string $value of the GIS column
     * @param index  $index of the geometry
     *
     * @return  parameters for the GIS data editor from the value of the GIS column
     */",
 "/**
 * Handles the visualization of GIS LINESTRING objects.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
     * Returns class instance.
     *
     * @return PMA_RecentTable
     */",
 "/**
     * Returns recently used tables from phpMyAdmin database.
     *
     *
     * @return array
     */",
 "/**
     * Save recent tables into phpMyAdmin database.
     *
     *
     * @return true|PMA_Message
     */",
 "/**
     * Trim recent table according to the LeftRecentTable configuration.
     *
     * @return boolean True if trimming occurred
     */",
 "/**
     * Return options for HTML select.
     *
     * @return string
     */",
 "/**
     * Return HTML select.
     *
     * @return string
     */",
 "/**
     * Add recently used tables.
     *
     * @param string $db Database name where the table is located
     * @param string $table Table name
     *
     * @return true|PMA_Message True if success, PMA_Message if not
     */",
 "/**
 * Handles the recently used tables.
 *
 * @TODO Change the release version in table pma_recent (#recent in Documentation.html)
 *
 * @package PhpMyAdmin
 */",
 "/**
     * Constructor - set PHP error handler
     *
     */",
 "/**
     * Destructor
     *
     * stores errors in session
     *
     */",
 "/**
     * returns array with all errors
     *
     * @return array PMA_Error_Handler::$_errors
     */",
 "/**
     * Error handler - called when errors are triggered/occured
     *
     * The following error types cannot be handled with a user defined function:
     * E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR,
     * E_COMPILE_WARNING,
     * and most of E_STRICT raised in the file where set_error_handler() is called.
     *
     * Do not use the context parameter as we want to avoid storing the
     * complete $GLOBALS inside $_SESSION[\\'errors\\']
     *
     * @param integer $errno
     * @param string  $errstr
     * @param string  $errfile
     * @param integer $errline
     */",
 "/**
     * log error to configured log facility
     *
     * @todo    finish!
     * @param PMA_Error $error
     * @return bool
     */",
 "/**
     * trigger a custom error
     *
     * @param string  $errorInfo
     * @param integer $errorNumber
     * @param string  $file
     * @param integer $line
     */",
 "/**
     * display fatal error and exit
     *
     * @param PMA_Error $error
     */",
 "/**
     * display the whole error page with all errors
     *
     */",
 "/**
     * display user errors not displayed
     *
     */",
 "/**
     * display HTML header
     *
     * @param PMA_error $error
     */",
 "/**
     * display HTML footer
     *
     */",
 "/**
     * display all errors regardless already displayed or user errors
     *
     */",
 "/**
     * display errors not displayed
     *
     */",
 "/**
     * look in session for saved errors
     *
     */",
 "/**
     * return count of errors
     *
     * @return  integer number of errors occoured
     */",
 "/**
     * return count of user errors
     *
     * @return  integer number of user errors occoured
     */",
 "/**
     * whether use errors occured or not
     *
     * @return  boolean
     */",
 "/**
     * whether errors occured or not
     *
     * @return  boolean
     */",
 "/**
     * number of errors to be displayed
     *
     * @return integer number of errors to be displayed
     */",
 "/**
     * whether there are errors to display or not
     *
     * @return boolean
     */",
 "/**
 * handling errors
 *
 * @package PhpMyAdmin
 */",
 "/**
     * Constructor, reads default config values
     *
     * @param string  $form_name
     * @param array   $form
     * @param int     $index      arbitrary index, stored in Form::$index
     */",
 "/**
     * Returns type of given option
     *
     * @param   string  $option_name path or field name
     * @return  string|null  one of: boolean, integer, double, string, select, array
     */",
 "/**
     * Returns allowed values for select fields
     *
     * @param   string  $option_path
     * @return  array
     */",
 "/**
     * array_walk callback function, reads path of form fields from
     * array (see file comment in setup.forms.php or user_preferences.forms.inc)
     *
     * @param   mixed   $value
     * @param   mixed   $key
     * @param   mixed   $prefix
     */",
 "/**
     * Reads form paths to {@link $fields}
     *
     * @param array $form
     */",
 "/**
     * Reads fields\\' types to $this->fieldsTypes
     *
     */",
 "/**
     * Reads form settings and prepares class to work with given subset of
     * config file
     *
     * @param string $form_name
     * @param array  $form
     */",
 "/**
 * Base class for forms, loads default configuration options, checks allowed
 * values etc.
 *
 * @package    phpMyAdmin
 */",
 "/**
     * A private constructor; prevents direct creation of object.
     */",
 "/**
     * Returns the singleton.
     *
     * @return the singleton
     */",
 "/**
     * Scales each row.
     *
     * @param string $spatial spatial data of a row
     *
     * @return array containing the min, max values for x and y cordinates
     */",
 "/**
     * Adds to the PNG image object, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS MULTILINESTRING object
     * @param string $label      Label for the GIS MULTILINESTRING object
     * @param string $line_color Color for the GIS MULTILINESTRING object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $image      Image object
     *
     * @return the modified image object
     */",
 "/**
     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS MULTILINESTRING object
     * @param string $label      Label for the GIS MULTILINESTRING object
     * @param string $line_color Color for the GIS MULTILINESTRING object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $pdf        TCPDF instance
     *
     * @return the modified TCPDF instance
     */",
 "/**
     * Prepares and returns the code related to a row in the GIS dataset as SVG.
     *
     * @param string $spatial    GIS MULTILINESTRING object
     * @param string $label      Label for the GIS MULTILINESTRING object
     * @param string $line_color Color for the GIS MULTILINESTRING object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return the code related to a row in the GIS dataset
     */",
 "/**
     * Prepares JavaScript related to a row in the GIS dataset
     * to visualize it with OpenLayers.
     *
     * @param string $spatial    GIS MULTILINESTRING object
     * @param int    $srid       Spatial reference ID
     * @param string $label      Label for the GIS MULTILINESTRING object
     * @param string $line_color Color for the GIS MULTILINESTRING object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return JavaScript related to a row in the GIS dataset
     */",
 "/**
     * Generate the WKT with the set of parameters passed by the GIS editor.
     *
     * @param array  $gis_data GIS data
     * @param int    $index    Index into the parameter object
     * @param string $empty    Value for empty points
     *
     * @return WKT with the set of parameters passed by the GIS editor
     */",
 "/**
     * Generate the WKT for the data from ESRI shape files.
     *
     * @param array $row_data GIS data
     *
     * @return the WKT for the data from ESRI shape files
     */",
 "/**
     * Generate parameters for the GIS data editor from the value of the GIS column.
     *
     * @param string $value of the GIS column
     * @param index  $index of the geometry
     *
     * @return  parameters for the GIS data editor from the value of the GIS column
     */",
 "/**
 * Handles the visualization of GIS MULTILINESTRING objects.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
 * Sends the queries and buffers the results
 */",
 "/**
 * @return array
 */",
 "/**
 * Include JavaScript libraries
 */",
 "/**
 * Do the magic
 */",
 "/**
 * Helper function for connecting to the database server
 *
 * @param   mysqli  $link
 * @param   string  $host
 * @param   string  $user
 * @param   string  $password
 * @param   string  $dbname
 * @param   int     $server_port
 * @param   string  $server_socket
 * @param   int     $client_flags
 * @param   bool    $persistent
 * @return  bool
 */",
 "/**
 * connects to the database server
 *
 * @param   string  $user           mysql user name
 * @param   string  $password       mysql user password
 * @param   bool    $is_controluser
 * @param   array   $server host/port/socket
 * @param   bool    $auxiliary_connection (when true, don\\'t go back to login if connection fails)
 * @return  mixed   false on error or a mysqli object on success
 */",
 "/**
 * selects given database
 *
 * @param string  $dbname  database name to select
 * @param mysqli  $link    the mysqli object
 * @return boolean
 */",
 "/**
 * runs a query and returns the result
 *
 * @param   string  $query    query to execute
 * @param   mysqli  $link     mysqli object
 * @param   int     $options
 * @return  mysqli_result|bool
 */",
 "/**
 * returns array of rows with associative and numeric keys from $result
 *
 * @param   mysqli_result  $result
 * @return  array
 */",
 "/**
 * returns array of rows with associative keys from $result
 *
 * @param   mysqli_result  $result
 * @return  array
 */",
 "/**
 * returns array of rows with numeric keys from $result
 *
 * @param   mysqli_result  $result
 * @return  array
 */",
 "/**
 * Adjusts the result pointer to an arbitrary row in the result
 *
 * @param   $result
 * @param   $offset
 * @return  bool  true on success, false on failure
 */",
 "/**
 * Frees memory associated with the result
 *
 * @param  mysqli_result  $result
 */",
 "/**
 * Check if there are any more query results from a multi query
 *
 * @param   mysqli  $link  the mysqli object
 * @return  bool         true or false
 */",
 "/**
 * Prepare next result from multi_query
 *
 * @param   mysqli  $link  the mysqli object
 * @return  bool         true or false
 */",
 "/**
 * Returns a string representing the type of connection used
 *
 * @param   resource  $link  mysql link
 * @return  string          type of connection used
 */",
 "/**
 * Returns the version of the MySQL protocol used
 *
 * @param   resource  $link  mysql link
 * @return  integer         version of the MySQL protocol used
 */",
 "/**
 * returns a string that represents the client library version
 *
 * @return  string          MySQL client library version
 */",
 "/**
 * returns last error message or false if no errors occured
 *
 * @param   resource  $link  mysql link
 * @return  string|bool  $error or false
 */",
 "/**
 * returns the number of rows returned by last query
 *
 * @param   mysqli_result  $result
 * @return  string|int
 */",
 "/**
 * returns last inserted auto_increment id for given $link or $GLOBALS[\\'userlink\\']
 *
 * @param   mysqli  $link  the mysqli object
 * @return  string|int
 */",
 "/**
 * returns the number of rows affected by last query
 *
 * @param   mysqli   $link            the mysqli object
 * @param   boolean  $get_from_cache
 * @return  string|int
 */",
 "/**
 * returns metainfo for fields in $result
 *
 * @param   mysqli_result  $result
 * @return  array  meta info for fields in $result
 */",
 "/**
 * return number of fields in given $result
 *
 * @param   mysqli_result  $result
 * @return  int  field count
 */",
 "/**
 * returns the length of the given field $i in $result
 *
 * @param   mysqli_result  $result
 * @param   int            $i       field
 * @return  int  length of field
 */",
 "/**
 * returns name of $i. field in $result
 *
 * @param   mysqli_result  $result
 * @param   int            $i       field
 * @return  string  name of $i. field in $result
 */",
 "/**
 * returns concatenated string of human readable field flags
 *
 * @param   mysqli_result  $result
 * @param   int            $i       field
 * @return  string  field flags
 */",
 "/**
     * A private constructor; prevents direct creation of object.
     */",
 "/**
     * Returns the singleton.
     *
     * @return the singleton
     */",
 "/**
     * Scales each row.
     *
     * @param string $spatial spatial data of a row
     *
     * @return array containing the min, max values for x and y cordinates
     */",
 "/**
     * Adds to the PNG image object, the data related to a row in the GIS dataset.
     *
     * @param string $spatial     GIS MULTIPOINT object
     * @param string $label       Label for the GIS MULTIPOINT object
     * @param string $point_color Color for the GIS MULTIPOINT object
     * @param array  $scale_data  Array containing data related to scaling
     * @param image  $image       Image object
     *
     * @return the modified image object
     */",
 "/**
     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.
     *
     * @param string $spatial     GIS MULTIPOINT object
     * @param string $label       Label for the GIS MULTIPOINT object
     * @param string $point_color Color for the GIS MULTIPOINT object
     * @param array  $scale_data  Array containing data related to scaling
     * @param image  $pdf         TCPDF instance
     *
     * @return the modified TCPDF instance
     */",
 "/**
     * Prepares and returns the code related to a row in the GIS dataset as SVG.
     *
     * @param string $spatial     GIS MULTIPOINT object
     * @param string $label       Label for the GIS MULTIPOINT object
     * @param string $point_color Color for the GIS MULTIPOINT object
     * @param array  $scale_data  Array containing data related to scaling
     *
     * @return the code related to a row in the GIS dataset
     */",
 "/**
     * Prepares JavaScript related to a row in the GIS dataset
     * to visualize it with OpenLayers.
     *
     * @param string $spatial     GIS MULTIPOINT object
     * @param int    $srid        Spatial reference ID
     * @param string $label       Label for the GIS MULTIPOINT object
     * @param string $point_color Color for the GIS MULTIPOINT object
     * @param array  $scale_data  Array containing data related to scaling
     *
     * @return JavaScript related to a row in the GIS dataset
     */",
 "/**
     * Generate the WKT with the set of parameters passed by the GIS editor.
     *
     * @param array  $gis_data GIS data
     * @param int    $index    Index into the parameter object
     * @param string $empty    Multipoint does not adhere to this
     *
     * @return WKT with the set of parameters passed by the GIS editor
     */",
 "/**
     * Generate the WKT for the data from ESRI shape files.
     *
     * @param array $row_data GIS data
     *
     * @return the WKT for the data from ESRI shape files
     */",
 "/**
     * Generate parameters for the GIS data editor from the value of the GIS column.
     *
     * @param string $value of the GIS column
     * @param index  $index of the geometry
     *
     * @return  parameters for the GIS data editor from the value of the GIS column
     */",
 "/**
 * Handles the visualization of GIS MULTIPOINT objects.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in XML format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
 * Cleanu column related relation stuff
 *
 * @param string $db
 * @param string $table
 * @param string $column
 */",
 "/**
 * Cleanup table related relation stuff
 *
 * @param string $db
 * @param string $table
 */",
 "/**
 * Cleanup database related relation stuff
 *
 * @param string $db
 */",
 "/**
 * @class TCPDF_UNICODE_DATA
 * This is a PHP class containing UnicOde data for TCPDF library.
 * @package com.tecnick.tcpdf
 * @version 1.0.009
 * @author Nicola Asuni - info@tecnick.com
 */",
 "/**
 * Used to create server variables documentation links
 * $VARIABLE_DOC_LINKS[string $name] = array(
 *    string $anchor,
 *    string $chapter,
 *    string $type);
 * string $name: name of the system variable
 * string $anchor: anchor to the documentation page
 * string $chapter: chapter of \"HTML, one page per chapter\" documentation
 * string $type: type of system variable
 * string $format: if set to \\'byte\\' it will format the variable
 * with PMA_formatByteDown()
 */",
 "/**
 * Gets all the fields of a table along with their types, collations
 * and whether null or not.
 *
 * @param string $db    Selected database
 * @param string $table Selected table
 *
 * @return array Array containing the field list, field types, collations
 * and null constraint
 */",
 "/**
 * Sets the table header for displaying a table in query-by-example format.
 *
 * @param bool $geom_column_present whether a geometry column is present
 *
 * @return HTML content, the tags and content for table header
 */",
 "/**
 * Returns an array with necessary configrations to create
 * sub-tabs(Table Search and Zoom Search) in the table_select page.
 *
 * @return array Array containing configuration (icon, text, link, id, args)
 * of sub-tabs for Table Search and Zoom search
 */",
 "/**
 * Creates the HTML content for:
 * 1) Browsing foreign data for a field.
 * 2) Creating elements for search criteria input on fields.
 *
 * @param array  $foreigners      Array of foreign keys
 * @param array  $foreignData     Foreign keys data
 * @param string $field           Column name
 * @param string $tbl_fields_type Column type
 * @param int    $i               Column index
 * @param string $db              Selected database
 * @param string $table           Selected table
 * @param array  $titles          Selected title
 * @param int    $foreignMaxLimit Max limit of displaying foreign elements
 * @param array  $fields          Array of search criteria inputs
 * @param bool   $in_fbs          Whether we are in \\'function based search\\'
 * @param bool   $in_zoom_search_edit  Whether we are in zoom search edit 
 *
 * @return string HTML content for viewing foreing data and elements
 * for search criteria input.
 */",
 "/**
     * @todo move this to a more apropriate place
     */",
 "/**
 * Return the where clause for query generation based on the inputs provided.
 *
 * @param mixed  $fields     Search criteria input
 * @param string $names      Name of the column on which search is submitted
 * @param string $types      Type of the field
 * @param string $collations Field collation
 * @param string $func_type  Search fucntion/operator
 * @param bool   $unaryFlag  Whether operator unary or not
 * @param bool   $geom_func  Whether geometry functions should be applied
 *
 * @return string HTML content for viewing foreing data and elements
 * for search criteria input.
 */",
 "/**
 * Formats a SVG plot for the query results.
 *
 * @param array $data      Data for the status chart
 * @param array &$settings Settings used to generate the chart
 *
 * @return string HTML and JS code for the SVG plot
 */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
 *
 * @package PhpMyAdmin-Engines
 */",
 "/**
 * Defines the urls to return to in case of error in a sql statement
 */",
 "/**
 * Set parameters for links
 */",
 "/**

*




*/",
 "/**

*




*/",
 "/**

*



*/",
 "/**
 * @class TCPDF_ENCODING_MAPS
 * This is a PHP class containing Font encodings maps class for TCPDF library.
 * @package com.tecnick.tcpdf
 * @version 1.0.000
 * @author Nicola Asuni - info@tecnick.com
 */",
 "/**
 *
 * @package PhpMyAdmin-Engines
 */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
 * Include JavaScript libraries
 */",
 "/**
 * Do the magic
 */",
 "/**
     * @return  array
     */",
 "/**
     * @return  string  SQL query LIKE pattern
     */",
 "/**
     * @return  array   detail pages
     */",
 "/**
     * returns html tables with stats over inno db buffer pool
     *
     * @return  string  html table with stats
     */",
 "/**
     * returns InnoDB status
     *
     * @return  string  result of SHOW INNODB STATUS inside pre tags
     */",
 "/**
     * returns content for page $id
     *
     * @param   string  $id page id
     * @return  string  html output
     */",
 "/**
     * returns string with filename for the MySQL helppage
     * about this storage engne
     *
     * @return  string  mysql helppage filename
     */",
 "/**
     *  
     * Gets the InnoDB plugin version number 
     * http://www.innodb.com/products/innodb_plugin 
     * (do not confuse this with phpMyAdmin\\'s storage engine plugins!)
     *
     * @return string the version number, or empty if not running as a plugin 
     */",
 "/**
     *  
     * Gets the InnoDB file format 
     * (works only for the InnoDB plugin)
     * http://www.innodb.com/products/innodb_plugin 
     * (do not confuse this with phpMyAdmin\\'s storage engine plugins!)
     *
     * @return string the InnoDB file format 
     */",
 "/**
     *  
     * Verifies if this server supports the innodb_file_per_table feature 
     * (works only for the InnoDB plugin)
     * http://www.innodb.com/products/innodb_plugin 
     * (do not confuse this with phpMyAdmin\\'s storage engine plugins!)
     *
     * @return boolean whether this feature is supported or not 
     */",
 "/**
 *
 * @package PhpMyAdmin-Engines
 */",
 "/**
 * Runs common work
 */",
 "/**
 * autocomplete feature of IE kills the \"onchange\" event handler and it
 *        must be replaced by the \"onpropertychange\" one in this case
 */",
 "/**
 * JS Includes
 */",
 "/**
 * get status from server
 */",
 "/**
 * for some calculations we require also some server settings
 */",
 "/**
 * split variables in sections
 */",
 "/**
     * starttime calculation
     */",
 "/**
     * Messages are built using the message name
     */",
 "/**
 * cleanup of some deprecated values
 *
 * @param array &$server_status
 */",
 "/**
 * Processes forms registered in $form_display, handles error correction
 *
 * @param FormDisplay $form_display
 */",
 "/**
 * Defines the bookmark parameters for the current user
 *
 * @return  array    the bookmark parameters for the current user
 * @access  public
 */",
 "/**
 * Gets the list of bookmarks defined for the current database
 *
 * @global  resource  the controluser db connection handle
 *
 * @param string    the current database name
 *
 * @return  array     the bookmarks list (key as index, label as value)
 *
 * @access  public
 */",
 "/**
 * Gets the sql command from a bookmark
 *
 * @global  resource  the controluser db connection handle
 *
 * @param string    the current database name
 * @param mixed     the id of the bookmark to get
 * @param string    which field to look up the $id
 * @param boolean  true: get all bookmarks regardless of the owning user
 * @param boolean   whether to ignore bookmarks with no user
 *
 * @return  string    the sql query
 *
 * @access  public
 */",
 "/**
 * Adds a bookmark
 *
 * @global  resource  the controluser db connection handle
 *
 * @param array     the properties of the bookmark to add; here,
 *                    $fields[\\'query\\'] is urlencoded
 * @param boolean   whether to make the bookmark available for all users
 *
 * @return  boolean   whether the INSERT succeeds or not
 *
 * @access  public
 */",
 "/**
 * Deletes a bookmark
 *
 * @global  resource  the controluser db connection handle
 *
 * @param string   the current database name
 * @param integer  the id of the bookmark to get
 *
 * @access  public
 */",
 "/**
 * Bookmark Support
 */",
 "/**
 * Checks whether database extension is loaded
 *
 * @param string $extension mysql extension to check
 *
 * @return bool
 */",
 "/**
 * runs a query
 *
 * @param string $query               SQL query to execte
 * @param mixed  $link                optional database link to use
 * @param int    $options             optional query options
 * @param bool   $cache_affected_rows whether to cache affected rows
 *
 * @return mixed
 */",
 "/**
 * runs a query and returns the result
 *
 * @param string   $query               query to run
 * @param resource $link                mysql link resource
 * @param integer  $options             query options
 * @param bool     $cache_affected_rows whether to cache affected row
 *
 * @return mixed
 */",
 "/**
 * converts charset of a mysql message, usually coming from mysql_error(),
 * into PMA charset, usally UTF-8
 * uses language to charset mapping from mysql/share/errmsg.txt
 * and charset names to ISO charset from information_schema.CHARACTER_SETS
 *
 * @param string $message the message
 *
 * @return  string  $message
 */",
 "/**
 * returns array with table names for given db
 *
 * @param string $database name of database
 * @param mixed  $link     mysql link resource|object
 *
 * @return  array   tables names
 */",
 "/**
 * usort comparison callback
 *
 * @param string $a first argument to sort
 * @param string $b second argument to sort
 *
 * @return  integer  a value representing whether $a should be before $b in the
 *                   sorted array or not
 *
 * @access  private
 */",
 "/**
                     * @todo difference between \\'TEMPORARY\\' and \\'BASE TABLE\\' but how to detect?
                     */",
 "/**
 * returns array of all tables in given db or dbs
 * this function expects unquoted names:
 * RIGHT: my_database
 * WRONG: `my_database`
 * WRONG: my\_database
 * if $tbl_is_group is true, $table is used as filter for table names
 * if $tbl_is_group is \\'comment, $table is used as filter for table comments
 *
 * <code>
 * PMA_DBI_get_tables_full(\\'my_database\\');
 * PMA_DBI_get_tables_full(\\'my_database\\', \\'my_table\\'));
 * PMA_DBI_get_tables_full(\\'my_database\\', \\'my_tables_\\', true));
 * PMA_DBI_get_tables_full(\\'my_database\\', \\'my_tables_\\', \\'comment\\'));
 * </code>
 *
 * @param string          $database     database
 * @param string|bool     $table        table or false
 * @param boolean|string  $tbl_is_group $table is a table group
 * @param mixed           $link         mysql link
 * @param integer         $limit_offset zero-based offset for the count
 * @param boolean|integer $limit_count  number of tables to return
 * @param string          $sort_by      table attribute to sort by
 * @param string          $sort_order   direction to sort (ASC or DESC)
 *
 * @todo    move into PMA_Table
 *
 * @return  array           list of tables in given db(s)
 */",
 "/**
         * if $GLOBALS[\\'cfg\\'][\\'NaturalOrder\\'] is enabled, we cannot use LIMIT
         * cause MySQL does not support natural ordering, we have to do it afterward
         */",
 "/**
 * returns array with databases containing extended infos about them
 *
 * @param string   $database     database
 * @param boolean  $force_stats  retrieve stats also for MySQL < 5
 * @param resource $link         mysql link
 * @param string   $sort_by      column to order by
 * @param string   $sort_order   ASC or DESC
 * @param integer  $limit_offset starting offset for LIMIT
 * @param bool|int $limit_count  row count for LIMIT or true for $GLOBALS[\\'cfg\\'][\\'MaxDbList\\']
 *
 * @todo    move into PMA_List_Database?
 *
 * @return array $databases
 */",
 "/**
         * @todo guess CHARACTER_MAXIMUM_LENGTH from COLUMN_TYPE
         */",
 "/**
         * @todo guess CHARACTER_OCTET_LENGTH from CHARACTER_MAXIMUM_LENGTH
         */",
 "/**
 * returns detailed array with all columns for given table in database,
 * or all tables/databases
 *
 * @param string $database name of database
 * @param string $table    name of table to retrieve columns from
 * @param string $column   name of specific column
 * @param mixed  $link     mysql link resource
 *
 * @return array
 */",
 "/**
 * Returns SQL query for fetching columns for a table
 *
 * The \\'Key\\' column is not calculated properly, use PMA_DBI_get_columns() to get
 * correct values.
 *
 * @param string  $database name of database
 * @param string  $table    name of table to retrieve columns from
 * @param string  $column   name of column, null to show all columns
 * @param boolean $full     whether to return full info or only column names
 *
 * @see PMA_DBI_get_columns()
 *
 * @return  string
 */",
 "/**
 * Returns descriptions of columns in given table (all or given by $column)
 *
 * @param string  $database name of database
 * @param string  $table    name of table to retrieve columns from
 * @param string  $column   name of column, null to show all columns
 * @param boolean $full     whether to return full info or only column names
 * @param mixed   $link     mysql link resource
 *
 * @return  false|array   array indexed by column names or,
 *                        if $column is given, flat array description
 */",
 "/**
* Returns SQL for fetching information on table indexes (SHOW INDEXES)
*
* @param string $database name of database
* @param string $table    name of the table whose indexes are to be retreived
* @param string $where    additional conditions for WHERE
*
* @return   array   $indexes
*/",
 "/**
* Returns indexes of a table
*
* @param string $database name of database
* @param string $table    name of the table whose indexes are to be retrieved
* @param mixed  $link     mysql link resource
*
* @return   array   $indexes
*/",
 "/**
 * returns value of given mysql server variable
 *
 * @param string $var  mysql server variable name
 * @param int    $type PMA_DBI_GETVAR_SESSION|PMA_DBI_GETVAR_GLOBAL
 * @param mixed  $link mysql link resource|object
 *
 * @return  mixed   value for mysql server variable
 */",
 "/**
 * Function called just after a connection to the MySQL database server has
 * been established. It sets the connection collation, and determins the
 * version of MySQL which is running.
 *
 * @param mixed   $link           mysql link resource|object
 * @param boolean $is_controluser whether link is for control user
 */",
 "/**
 * returns a single value from the given result or query,
 * if the query or the result has more than one row or field
 * the first field of the first row is returned
 *
 * <code>
 * $sql = \\'SELECT `name` FROM `user` WHERE `id` = 123\\';
 * $user_name = PMA_DBI_fetch_value($sql);
 * // produces
 * // $user_name = \\'John Doe\\'
 * </code>
 *
 * @param string|mysql_result $result     query or mysql result
 * @param integer             $row_number row to fetch the value from,
 *                                        starting at 0, with 0 beeing default
 * @param integer|string      $field      field to fetch the value from,
 *                                        starting at 0, with 0 beeing default
 * @param resource            $link       mysql link
 *
 * @return mixed value of first field in first row from result
 *               or false if not found
 */",
 "/**
 * returns only the first row from the result
 *
 * <code>
 * $sql = \\'SELECT * FROM `user` WHERE `id` = 123\\';
 * $user = PMA_DBI_fetch_single_row($sql);
 * // produces
 * // $user = array(\\'id\\' => 123, \\'name\\' => \\'John Doe\\')
 * </code>
 *
 * @param string|mysql_result $result query or mysql result
 * @param string              $type   NUM|ASSOC|BOTH
 *                                    returned array should either numeric
 *                                    associativ or booth
 * @param resource            $link   mysql link
 *
 * @return array|boolean first row from result
 *                       or false if result is empty
 */",
 "/**
 * returns all rows in the resultset in one array
 *
 * <code>
 * $sql = \\'SELECT * FROM `user`\\';
 * $users = PMA_DBI_fetch_result($sql);
 * // produces
 * // $users[] = array(\\'id\\' => 123, \\'name\\' => \\'John Doe\\')
 *
 * $sql = \\'SELECT `id`, `name` FROM `user`\\';
 * $users = PMA_DBI_fetch_result($sql, \\'id\\');
 * // produces
 * // $users[\\'123\\'] = array(\\'id\\' => 123, \\'name\\' => \\'John Doe\\')
 *
 * $sql = \\'SELECT `id`, `name` FROM `user`\\';
 * $users = PMA_DBI_fetch_result($sql, 0);
 * // produces
 * // $users[\\'123\\'] = array(0 => 123, 1 => \\'John Doe\\')
 *
 * $sql = \\'SELECT `id`, `name` FROM `user`\\';
 * $users = PMA_DBI_fetch_result($sql, \\'id\\', \\'name\\');
 * // or
 * $users = PMA_DBI_fetch_result($sql, 0, 1);
 * // produces
 * // $users[\\'123\\'] = \\'John Doe\\'
 *
 * $sql = \\'SELECT `name` FROM `user`\\';
 * $users = PMA_DBI_fetch_result($sql);
 * // produces
 * // $users[] = \\'John Doe\\'
 *
 * $sql = \\'SELECT `group`, `name` FROM `user`\\'
 * $users = PMA_DBI_fetch_result($sql, array(\\'group\\', null), \\'name\\');
 * // produces
 * // $users[\\'admin\\'][] = \\'John Doe\\'
 *
 * $sql = \\'SELECT `group`, `name` FROM `user`\\'
 * $users = PMA_DBI_fetch_result($sql, array(\\'group\\', \\'name\\'), \\'id\\');
 * // produces
 * // $users[\\'admin\\'][\\'John Doe\\'] = \\'123\\'
 * </code>
 *
 * @param string|mysql_result $result query or mysql result
 * @param string|integer      $key    field-name or offset
 *                                    used as key for array
 * @param string|integer      $value  value-name or offset
 *                                    used as value for array
 * @param resource            $link   mysql link
 * @param mixed               $options
 *
 * @return array resultrows or values indexed by $key
 */",
 "/**
 * Get supported SQL compatibility modes
 *
 * @return array supported SQL compatibility modes
 */",
 "/**
 * returns warnings for last query
 *
 * @param resource $link mysql link resource
 *
 * @return array warnings
 */",
 "/**
 * returns true (int > 0) if current user is superuser
 * otherwise 0
 *
 * @return bool Whether use is a superuser
 */",
 "/**
 * returns an array of PROCEDURE or FUNCTION names for a db
 *
 * @param string   $db    db name
 * @param string   $which PROCEDURE | FUNCTION
 * @param resource $link  mysql link
 *
 * @return array the procedure names or function names
 */",
 "/**
 * returns the definition of a specific PROCEDURE, FUNCTION, EVENT or VIEW
 *
 * @param string   $db    db name
 * @param string   $which PROCEDURE | FUNCTION | EVENT | VIEW
 * @param string   $name  the procedure|function|event|view name
 * @param resource $link  mysql link
 *
 * @return string the definition
 */",
 "/**
 * returns details about the TRIGGERs for a specific table or database
 *
 * @param string $db        db name
 * @param string $table     table name
 * @param string $delimiter the delimiter to use (may be empty)
 *
 * @return array information about triggers (may be empty)
 */",
 "/**
 * Formats database error message in a friendly way.
 * This is needed because some errors messages cannot
 * be obtained by mysql_error().
 *
 * @param int    $error_number  Error code
 * @param string $error_message Error message as returned by server
 *
 * @return string HML text with error details
 */",
 "/**
 * Checks whether given schema is a system schema: information_schema
 * (MySQL and Drizzle) or data_dictionary (Drizzle)
 *
 * @param string $schema_name           Name of schema (database) to test
 * @param bool   $test_for_mysql_schema Whether \\'mysql\\' schema should
 *                                      be treated the same as IS and DD
 *
 * @return bool
 */",
 "/**
 * Returns length of string depending on current charset.
 *
 * @param string   string to count
 * @return  int      string length
 */",
 "/**
 * Returns substring from string, works depending on current charset.
 *
 * @param string $string  string to count
 * @param int    $start   start of substring
 * @param int    $length  length of substring
 * @return  string
 */",
 "/**
 * Returns postion of $needle in $haystack or false if not found
 *
 * @param string  $haystack
 * @param string  $needle
 * @param int     $offset
 * @return  integer position of $needle in $haystack or false
 */",
 "/**
 * Make a string lowercase
 *
 * @param string  $string
 * @return  string
 */",
 "/**
 * Returns length of string depending on current charset.
 *
 * @param string   string to count
 * @return  int      string length
 */",
 "/**
 * Returns substring from string, works depending on current charset.
 *
 * @param string $string  string to count
 * @param int    $start   start of substring
 * @param int    $length  length of substring
 * @return  string
 */",
 "/**
 * Returns postion of $needle in $haystack or false if not found
 *
 * @param string  $haystack
 * @param string  $needle
 * @param int     $offset
 * @return  integer position of $needle in $haystack or false
 */",
 "/**
 * Make a string lowercase
 *
 * @param string  $string
 * @return  string
 */",
 "/**
 * array PMA_getPlugins(string $plugins_dir, mixed $plugin_param)
 *
 * Reads all plugin information from directory $plugins_dir.
 *
 * @param string  $plugins_dir    directrory with plugins
 * @param mixed   $plugin_param   parameter to plugin by which they can decide whether they can work
 * @return  array                   list of plugins
 */",
 "/**
 * string PMA_getString(string $name)
 *
 * returns locale string for $name or $name if no locale is found
 *
 * @param string  $name   for local string
 * @return  string          locale string for $name
 */",
 "/**
 * string PMA_pluginCheckboxCheck(string $section, string $opt)
 *
 * returns html input tag option \\'checked\\' if plugin $opt should be set by config or request
 *
 * @param string  $section    name of config section in
 *                              $GLOBALS[\\'cfg\\'][$section] for plugin
 * @param string  $opt        name of option
 * @return  string              hmtl input tag option \\'checked\\'
 */",
 "/**
 * string PMA_pluginGetDefault(string $section, string $opt)
 *
 * returns default value for option $opt
 *
 * @param string  $section    name of config section in
 *                              $GLOBALS[\\'cfg\\'][$section] for plugin
 * @param string  $opt        name of option
 * @return  string              default value for option $opt
 */",
 "/**
 * string PMA_pluginIsActive(string $section, string $opt, string $val)
 *
 * returns html input tag option \\'checked\\' if option $opt should be set by config or request
 *
 * @param string  $section    name of config section in
 *                              $GLOBALS[\\'cfg\\'][$section] for plugin
 * @param string  $opt        name of option
 * @param string  $val        value of option to check against
 * @return  string              html input tag option \\'checked\\'
 */",
 "/**
 * string PMA_pluginGetChoice(string $section, string $name, array &$list, string $cfgname)
 *
 * returns html select form element for plugin choice
 * and hidden fields denoting whether each plugin must be exported as a file
 *
 * @param string  $section    name of config section in
 *                              $GLOBALS[\\'cfg\\'][$section] for plugin
 * @param string  $name       name of select element
 * @param array   &$list      array with plugin configuration defined in plugin file
 * @param string  $cfgname    name of config value, if none same as $name
 * @return  string              html select tag
 */",
 "/**
 * string PMA_pluginGetOneOption(string $section, string $plugin_name, string $id, array &$opt)
 *
 * returns single option in a list element
 *
 * @param string  $section        name of config section in
 *                                  $GLOBALS[\\'cfg\\'][$section] for plugin
 * @param string  $plugin_name    unique plugin name
 * @param string  $id             option id
 * @param array   &$opt           plugin option details
 * @return  string                  table row with option
 */",
 "/**
 * string PMA_pluginGetOptions(string $section, array &$list)
 *
 * return html div with editable options for plugin
 *
 * @param string  $section    name of config section in $GLOBALS[\\'cfg\\'][$section]
 * @param array   &$list      array with plugin configuration defined in plugin file
 * @return  string              html fieldset with plugin options
 */",
 "/**
 * Check whether session.gc_maxlifetime limits session validity.
 */",
 "/**
 * prints list item for main page
 *
 * @param string  $name   displayed text
 * @param string  $id     id, used for css styles
 * @param string  $url    make item as link with $url as target
 * @param string  $mysql_help_page  display a link to MySQL\\'s manual
 * @param string  $target special target for $url
 * @param string  $a_id   id for the anchor, used for jQuery to hook in functions
 * @param string  $class  class for the li element
 * @param string  $a_class  class for the anchor element
 */",
 "/**
 * Detects which function to use for PMA_pow.
 *
 * @return string Function name.
 */",
 "/**
 * Exponential expression / raise number into power
 *
 * @param string $base         base to raise
 * @param string $exp          exponent to use
 * @param mixed  $use_function pow function to use, or false for auto-detect
 *
 * @return mixed string or float
 */",
 "/**
 * Returns an HTML IMG tag for a particular icon from a theme,
 * which may be an actual file or an icon from a sprite.
 * This function takes into account the PropertiesIconic
 * configuration setting and wraps the image tag in a span tag.
 *
 * @param string  $icon       name of icon file
 * @param string  $alternate  alternate text
 * @param boolean $force_text whether to force alternate text to be displayed
 *
 * @return string an html snippet
 */",
 "/**
 * Returns an HTML IMG tag for a particular image from a theme,
 * which may be an actual file or an icon from a sprite
 *
 * @param string $image      The name of the file to get
 * @param string $alternate  Used to set \\'alt\\' and \\'title\\' attributes of the image
 * @param array  $attributes An associative array of other attributes
 *
 * @return string an html IMG tag
 */",
 "/**
 * Displays the maximum size for an upload
 *
 * @param integer $max_upload_size the size
 *
 * @return string the message
 *
 * @access  public
 */",
 "/**
 * Generates a hidden field which should indicate to the browser
 * the maximum size for upload
 *
 * @param integer $max_size the size
 *
 * @return string the INPUT field
 *
 * @access  public
 */",
 "/**
*Addslashesbefore\"\\'\" and \"\" characters so a value containing them can
 * be used in a sql comparison.
 *
 * @param string $a_string the string to slash
 * @param bool   $is_like  whether the string will be used in a \\'LIKE\\' clause
 *                         (it then requires two more escaped sequences) or not
 * @param bool   $crlf     whether to treat cr/lfs as escape-worthy entities
 *                         (converts \n to \\n, \r to \\r)
 * @param bool   $php_code whether this function is used as part of the
 *                         \"Create PHP code\" dialog
 *
 * @return  string   the slashed string
 *
 * @access  public
 */",
 "/**
 * Add slashes before \"_\" and \"%\" characters for using them in MySQL
 * database, table and field names.
 * Note: This function does not escape backslashes!
 *
 * @param string $name the string to escape
 *
 * @return string the escaped string
 *
 * @access  public
 */",
 "/**
 * removes slashes before \"_\" and \"%\" characters
 * Note: This function does not unescape backslashes!
 *
 * @param string $name the string to escape
 *
 * @return  string   the escaped string
 *
 * @access  public
 */",
 "/**
 * removes quotes (\\',\",`) from a quoted string
 *
 * checks if the sting is quoted and removes this quotes
 *
 * @param string $quoted_string string to remove quotes from
 * @param string $quote         type of quote to remove
 *
 * @return string unqoted string
 */",
 "/**
 * format sql strings
 *
 * @param mixed  $parsed_sql   pre-parsed SQL structure
 * @param string $unparsed_sql raw SQL string
 *
 * @return string  the formatted sql
 *
 * @global  array    the configuration array
 * @global  boolean  whether the current statement is a multiple one or not
 *
 * @access  public
 * @todo    move into PMA_Sql
 */",
 "/**
 * Displays a link to the official MySQL documentation
 *
 * @param string $chapter   chapter of \"HTML, one page per chapter\" documentation
 * @param string $link      contains name of page/anchor that is being linked
 * @param bool   $big_icon  whether to use big icon (like in left frame)
 * @param string $anchor    anchor to page part
 * @param bool   $just_open whether only the opening <a> tag should be returned
 *
 * @return  string  the html link
 *
 * @access  public
 */",
 "/**
 * Displays a link to the phpMyAdmin documentation
 *
 * @param string $anchor anchor in documentation
 *
 * @return  string  the html link
 *
 * @access  public
 */",
 "/**
 * Displays a link to the PHP documentation
 *
 * @param string $target anchor in documentation
 *
 * @return string  the html link
 *
 * @access  public
 */",
 "/**
 * returns HTML for a footnote marker and add the messsage to the footnotes
 *
 * @param string $message the error message
 * @param bool   $bbcode
 * @param string $type    message types
 *
 * @return  string html code for a footnote marker
 *
 * @access  public
 */",
 "/**
 * Displays a MySQL error message in the right frame.
 *
 * @param string $error_message  the error message
 * @param string $the_query      the sql query that failed
 * @param bool   $is_modify_link whether to show a \"modify\" link or not
 * @param string $back_url       the \"back\" link url (full path is not required)
 * @param bool   $exit           EXIT the page?
 *
 * @global  string    the curent table
 * @global  string    the current db
 *
 * @access  public
 */",
 "/**
 * returns array with tables of given db with extended information and grouped
 *
 * @param string   $db           name of db
 * @param string   $tables       name of tables
 * @param integer  $limit_offset list offset
 * @param int|bool $limit_count  max tables to return
 *
 * @return  array    (recursive) grouped table list
 */",
 "/**
 * Adds backquotes on both sides of a database, table or field name.
 * and escapes backquotes inside the name with another backquote
 *
 * example:
 * <code>
 * echo PMA_backquote(\\'owner`s db\\'); // `owner``s db`
 *
 * </code>
 *
 * @param mixed   $a_name the database, table or field name to \"backquote\"
 *                        or array of it
 * @param boolean $do_it  a flag to bypass this function (used by dump
 *                        functions)
 *
 * @return  mixed    the \"backquoted\" database, table or field name
 *
 * @access  public
 */",
 "/**
 * Defines the <CR><LF> value depending on the user OS.
 *
 * @return  string   the <CR><LF> value to use
 *
 * @access  public
 */",
 "/**
 * Reloads navigation if needed.
 *
 * @param bool $jsonly prints out pure JavaScript
 *
 * @access  public
 */",
 "/**
 * displays the message and the query
 * usually the message is the result of the query executed
 *
 * @param string  $message   the message to display
 * @param string  $sql_query the query to display
 * @param string  $type      the type (level) of the message
 * @param boolean $is_view   is this a message after a VIEW operation?
 *
 * @return  string
 *
 * @access  public
 */",
 "/**
 * Verifies if current MySQL server supports profiling
 *
 * @access  public
 *
 * @return  boolean whether profiling is supported
 */",
 "/**
 * Displays a form with the Profiling checkbox
 *
 * @param string $sql_query sql query
 *
 * @access  public
 */",
 "/**
 * Formats $value to byte view
 *
 * @param double $value the value to format
 * @param int    $limes the sensitiveness
 * @param int    $comma the number of decimals to retain
 *
 * @return   array    the formatted value and its unit
 *
 * @access  public
 */",
 "/**
 * Changes thousands and decimal separators to locale specific values.
 *
 * @param string $value the value
 *
 * @return string
 */",
 "/**
 * Formats $value to the given length and appends SI prefixes
 * with a $length of 0 no truncation occurs, number is only formated
 * to the current locale
 *
 * examples:
 * <code>
 * echo PMA_formatNumber(123456789, 6);     // 123,457 k
 * echo PMA_formatNumber(-123456789, 4, 2); //    -123.46 M
 * echo PMA_formatNumber(-0.003, 6);        //      -3 m
 * echo PMA_formatNumber(0.003, 3, 3);      //       0.003
 * echo PMA_formatNumber(0.00003, 3, 2);    //       0.03 m
 * echo PMA_formatNumber(0, 6);             //       0
 * </code>
 *
 * @param double  $value          the value to format
 * @param integer $digits_left    number of digits left of the comma
 * @param integer $digits_right   number of digits right of the comma
 * @param boolean $only_down      do not reformat numbers below 1
 * @param boolean $noTrailingZero removes trailing zeros right of the comma
 *                                (default: true)
 *
 * @return  string   the formatted value and its unit
 *
 * @access  public
 */",
 "/**
 * Returns the number of bytes when a formatted size is given
 *
 * @param string $formatted_size the size expression (for example 8MB)
 *
 * @return  integer  The numerical part of the expression (for example 8)
 */",
 "/**
 * Writes localised date
 *
 * @param string $timestamp the current timestamp
 * @param string $format    format
 *
 * @return  string   the formatted date
 *
 * @access  public
 */",
 "/**
 * returns a tab for tabbed navigation.
 * If the variables $link and $args ar left empty, an inactive tab is created
 *
 * @param array $tab        array with all options
 * @param array $url_params
 *
 * @return  string  html code for one tab, a link if valid otherwise a span
 *
 * @access  public
 */",
 "/**
 * returns html-code for a tab navigation
 *
 * @param array  $tabs       one element per tab
 * @param string $url_params
 * @param string $base_dir
 * @param string $menu_id
 *
 * @return  string  html-code for tab-navigation
 */",
 "/**
 * Displays a link, or a button if the link\\'s URL is too large, to
 * accommodate some browsers\\' limitations
 *
 * @param string  $url        the URL
 * @param string  $message    the link message
 * @param mixed   $tag_params string: js confirmation
 *                            array: additional tag params (f.e. style=\"\")
 * @param boolean $new_form   we set this to false when we are already in
 *                            a  form, to avoid generating nested forms
 * @param boolean $strip_img  whether to strip the image
 * @param string  $target     target
 *
 * @return string  the results to be echoed or saved in an array
 */",
 "/**
 * Splits a URL string by parameter
 *
 * @param string $url the URL
 *
 * @return array  the parameter/value pairs, for example [0] db=sakila
 */",
 "/**
 * Returns a given timespan value in a readable format.
 *
 * @param int $seconds the timespan
 *
 * @return string  the formatted value
 */",
 "/**
 * Takes a string and outputs each character on a line for itself. Used
 * mainly for horizontalflipped display mode.
 * Takes care of special html-characters.
 * Fulfills todo-item
 * http://sf.net/tracker/?func=detail&aid=544361&group_id=23067&atid=377411
 *
 * @param string $string    The string
 * @param string $Separator The Separator (defaults to \"<br />\n\")
 *
 * @access  public
 * @todo    add a multibyte safe function PMA_STR_split()
 *
 * @return  string      The flipped string
 */",
 "/**
 * Function added to avoid path disclosures.
 * Called by each script that needs parameters, it displays
 * an error message and, by default, stops the execution.
 *
 * Not sure we could use a strMissingParameter message here,
 * would have to check if the error message file is always available
 *
 * @param array $params  The names of the parameters needed by the calling script.
 * @param bool  $die     Stop the execution?
 *                       (Set this manually to false in the calling script
 *                       until you know all needed parameters to check).
 * @param bool  $request Whether to include this list in checking for special params.
 *
 * @global  string  path to current script
 * @global  boolean flag whether any special variable was required
 *
 * @access  public
 * @todo    use PMA_fatalError() if $die === true?
 */",
 "/**
 * Function to generate unique condition for specified row.
 *
 * @param resource $handle       current query result
 * @param integer  $fields_cnt   number of fields
 * @param array    $fields_meta  meta information about fields
 * @param array    $row          current row
 * @param boolean  $force_unique generate condition only on pk or unique
 *
 * @access  public
 *
 * @return  array     the calculated condition and whether condition is unique
 */",
 "/**
 * Generate a button or image tag
 *
 * @param string $button_name  name of button element
 * @param string $button_class class of button element
 * @param string $image_name   name of image element
 * @param string $text         text to display
 * @param string $image        image to display
 * @param string $value        value
 *
 * @access  public
 */",
 "/**
 * Generate a pagination selector for browsing resultsets
 *
 * @param int    $rows        Number of rows in the pagination set
 * @param int    $pageNow     current page number
 * @param int    $nbTotalPage number of total pages
 * @param int    $showAll     If the number of pages is lower than this
 *                            variable, no pages will be omitted in pagination
 * @param int    $sliceStart  How many rows at the beginning should always be shown?
 * @param int    $sliceEnd    How many rows at the end should always be shown?
 * @param int    $percent     Percentage of calculation page offsets to hop to a
 *                            next page
 * @param int    $range       Near the current page, how many pages should
 *                            be considered \"nearby\" and displayed as well?
 * @param string $prompt      The prompt to display (sometimes empty)
 *
 * @return string
 *
 * @access  public
 */",
 "/**
 * Generate navigation for a list
 *
 * @param int    $count       number of elements in the list
 * @param int    $pos         current position in the list
 * @param array  $_url_params url parameters
 * @param string $script      script name for form target
 * @param string $frame       target frame
 * @param int    $max_count   maximum number of elements to display from the list
 *
 * @access  public
 *
 * @todo    use $pos from $_url_params
 */",
 "/**
 * replaces %u in given path with current user name
 *
 * example:
 * <code>
 * $user_dir = PMA_userDir(\\'/var/pma_tmp/%u/\\'); // \\'/var/pma_tmp/root/\\'
 *
 * </code>
 *
 * @param string $dir with wildcard for user
 *
 * @return  string  per user directory
 */",
 "/**
 * returns html code for db link to default db page
 *
 * @param string $database database
 *
 * @return  string  html link to default db page
 */",
 "/**
 * Displays a lightbulb hint explaining a known external bug
 * that affects a functionality
 *
 * @param string $functionality   localized message explaining the func.
 * @param string $component       \\'mysql\\' (eventually, \\'php\\')
 * @param string $minimum_version of this component
 * @param string $bugref          bug reference for this component
 */",
 "/**
 * Generates and echoes an HTML checkbox
 *
 * @param string  $html_field_name the checkbox HTML field
 * @param string  $label           label for checkbox
 * @param boolean $checked         is it initially checked?
 * @param boolean $onclick         should it submit the form on click?
 *
 * @return the HTML for the checkbox
 */",
 "/**
 * Generates and echoes a set of radio HTML fields
 *
 * @param string  $html_field_name the radio HTML field
 * @param array   $choices         the choices values and labels
 * @param string  $checked_choice  the choice to check by default
 * @param boolean $line_break      whether to add an HTML line break after a choice
 * @param boolean $escape_label    whether to use htmlspecialchars() on label
 * @param string  $class           enclose each choice with a div of this class
 *
 * @return the HTML for the tadio buttons
 */",
 "/**
 * Generates and returns an HTML dropdown
 *
 * @param string $select_name   name for the select element
 * @param array  $choices       choices values
 * @param string $active_choice the choice to select by default
 * @param string $id            id of the select element; can be different in case
 *                              the dropdown is present more than once on the page
 *
 * @return string
 *
 * @todo    support titles
 */",
 "/**
 * Generates a slider effect (jQjuery)
 * Takes care of generating the initial <div> and the link
 * controlling the slider; you have to generate the </div> yourself
 * after the sliding section.
 *
 * @param string $id      the id of the <div> on which to apply the effect
 * @param string $message the message to show as a link
 */",
 "/**
 * Creates an AJAX sliding toggle button
 * (or and equivalent form when AJAX is disabled)
 *
 * @param string $action      The URL for the request to be executed
 * @param string $select_name The name for the dropdown box
 * @param array  $options     An array of options (see rte_footer.lib.php)
 * @param string $callback    A JS snippet to execute when the request is
 *                            successfully processed
 *
 * @return   string   HTML code for the toggle button
 */",
 "/**
 * Clears cache content which needs to be refreshed on user change.
 *
 * @return nothing
 */",
 "/**
 * Verifies if something is cached in the session
 *
 * @param string   $var    variable name
 * @param int|true $server server
 *
 * @return boolean
 */",
 "/**
 * Gets cached information from the session
 *
 * @param string   $var    varibale name
 * @param int|true $server server
 *
 * @return mixed
 */",
 "/**
 * Caches information in the session
 *
 * @param string   $var    variable name
 * @param mixed    $val    value
 * @param int|true $server server
 *
 * @return mixed
 */",
 "/**
 * Removes cached information from the session
 *
 * @param string   $var    variable name
 * @param int|true $server server
 *
 * @return nothing
 */",
 "/**
 * Converts a bit value to printable format;
 * in MySQL a BIT field can be from 1 to 64 bits so we need this
 * function because in PHP, decbin() supports only 32 bits
 *
 * @param numeric $value  coming from a BIT field
 * @param integer $length length
 *
 * @return  string  the printable value
 */",
 "/**
 * Verifies whether the value contains a non-printable character
 *
 * @param string $value value
 *
 * @return  boolean
 */",
 "/**
 * Converts a BIT type default value
 * for example, b\\'010\\' becomes 010
 *
 * @param string $bit_default_value value
 *
 * @return  string the converted value
 */",
 "/**

*

*


*/",
 "/**

*

*

*/",
 "/**

*

*

*/",
 "/**

*


*

*/",
 "/**

*

*

*/",
 "/**


*


*

*/",
 "/**

*




*

*/",
 "/**


*






*

*/",
 "/**
 * Display the form used to browse anywhere on the local server for a file to import
 *
 * @param string $max_upload_size maximum upload size
 *
 * @return nothing
 */",
 "/**
 * Display the form used to select a file to import from the server upload directory
 *
 * @param array  $import_list array of import types
 * @param string $uploaddir   upload directory
 *
 * @return nothing
 */",
 "/**
 * Build titles and icons for action links
 *
 * @return   array   the action titles
 */",
 "/**
 * This function processes the datatypes supported by the DB, as specified in
 * $cfg[\\'ColumnTypes\\'] and either returns an array (useful for quickly checking
 * if a datatype is supported) or an HTML snippet that creates a drop-down list.
 *
 * @param bool   $html     Whether to generate an html snippet or an array
 * @param string $selected The value to mark as selected in HTML mode
 *
 * @return  mixed   An HTML snippet or an array of datatypes.
 *
 */",
 "/**
 * Returns a list of datatypes that are not (yet) handled by PMA.
 * Used by: tbl_change.php and libraries/db_routines.inc.php
 *
 * @return   array   list of datatypes
 */",
 "/**
 * Return GIS data types
 *
 * @param bool $upper_case whether to return values in upper case
 *
 * @return array GIS data types
 */",
 "/**
 * Generates GIS data based on the string passed.
 *
 * @param string $gis_string GIS string
 *
 * @return GIS data enclosed in \\'GeomFromText\\' function
 */",
 "/**
 * Returns the names and details of the functions
 * that can be applied on geometry data typess.
 *
 * @param string $geom_type if provided the output is limited to the functions
 *                          that are applicable to the provided geometry type.
 * @param bool   $binary    if set to false functions that take two geometries
 *                          as arguments will not be included.
 * @param bool   $display   if set to true seperators will be added to the
 *                          output array.
 *
 * @return array names and details of the functions that can be applied on
 *               geometry data typess.
 */",
 "/**
 * Creates a dropdown box with MySQL functions for a particular column.
 *
 * @param array $field       Data about the column for which
 *                           to generate the dropdown
 * @param bool  $insert_mode Whether the operation is \\'insert\\'
 *
 * @global   array    $cfg            PMA configuration
 * @global   array    $analyzed_sql   Analyzed SQL query
 * @global   mixed    $data           (null/string) FIXME: what is this for?
 *
 * @return   string   An HTML snippet of a dropdown list with function
 *                    names appropriate for the requested column.
 */",
 "/**
 * Checks if the current user has a specific privilege and returns true if the
 * user indeed has that privilege or false if (s)he doesn\\'t. This function must
 * only be used for features that are available since MySQL 5, because it
 * relies on the INFORMATION_SCHEMA database to be present.
 *
 * Example:   PMA_currentUserHasPrivilege(\\'CREATE ROUTINE\\', \\'mydb\\');
 *            // Checks if the currently logged in user has the global
 *            // \\'CREATE ROUTINE\\' privilege or, if not, checks if the
 *            // user has this privilege on database \\'mydb\\'.
 *
 * @param string $priv The privilege to check
 * @param mixed  $db   null, to only check global privileges
 *                     string, db name where to also check for privileges
 * @param mixed  $tbl  null, to only check global privileges
 *                     string, db name where to also check for privileges
 *
 * @return bool
 */",
 "/**
 * Returns server type for current connection
 *
 * Known types are: Drizzle, MariaDB and MySQL (default)
 *
 * @return string
 */",
 "/**
 * Analyzes the limit clause and return the start and length attributes of it.
 *
 * @param string $limit_clause limit clause
 *
 * @return array Start and length attributes of the limit clause
 */",
 "/**
 * Outputs HTML code for print button.
 *
 * @return nothing
 */",
 "/**
     * returns array of partition names for a specific db/table
     *
     * @access  public
     * @return  array   of partition names
     */",
 "/**
     * checks if MySQL server supports partitioning
     *
     * @static
     * @staticvar boolean $have_partitioning
     * @staticvar boolean $already_checked
     * @access  public
     * @return  boolean
     */",
 "/**
 * base Partition Class
 * @package PhpMyAdmin
 */",
 "/**
     * Listing the storage engines
     */",
 "/**
     * Displays details about a given Storage Engine
     */",
 "/**
     * returns array with variable names dedicated to MyISAM storage engine
     *
     * @return  array   variable names
     */",
 "/**
 * the MyISAM storage engine
 * @package PhpMyAdmin-Engines
 */",
 "/**
 * checks given $var and returns it if valid, or $default of not valid
 * given $var is also checked for type being \\'similar\\' as $default
 * or against any other type if $type is provided
 *
 * <code>
 * // $_REQUEST[\\'db\\'] not set
 * echo PMA_ifSetOr($_REQUEST[\\'db\\'], \\'\\'); // \\'\\'
 * // $_REQUEST[\\'sql_query\\'] not set
 * echo PMA_ifSetOr($_REQUEST[\\'sql_query\\']); // null
 * // $cfg[\\'ForceSSL\\'] not set
 * echo PMA_ifSetOr($cfg[\\'ForceSSL\\'], false, \\'boolean\\'); // false
 * echo PMA_ifSetOr($cfg[\\'ForceSSL\\']); // null
 * // $cfg[\\'ForceSSL\\'] set to 1
 * echo PMA_ifSetOr($cfg[\\'ForceSSL\\'], false, \\'boolean\\'); // false
 * echo PMA_ifSetOr($cfg[\\'ForceSSL\\'], false, \\'similar\\'); // 1
 * echo PMA_ifSetOr($cfg[\\'ForceSSL\\'], false); // 1
 * // $cfg[\\'ForceSSL\\'] set to true
 * echo PMA_ifSetOr($cfg[\\'ForceSSL\\'], false, \\'boolean\\'); // true
 * </code>
 *
 * @see     PMA_isValid()
 * @param mixed   $var        param to check
 * @param mixed   $default    default value
 * @param mixed   $type       var type or array of values to check against $var
 * @return  mixed   $var or $default
 */",
 "/**
 * checks given $var against $type or $compare
 *
 * $type can be:
 * - false       : no type checking
 * - \\'scalar\\'    : whether type of $var is integer, float, string or boolean
 * - \\'numeric\\'   : whether type of $var is any number repesentation
 * - \\'length\\'    : whether type of $var is scalar with a string length > 0
 * - \\'similar\\'   : whether type of $var is similar to type of $compare
 * - \\'equal\\'     : whether type of $var is identical to type of $compare
 * - \\'identical\\' : whether $var is identical to $compare, not only the type!
 * - or any other valid PHP variable type
 *
 * <code>
 * // $_REQUEST[\\'doit\\'] = true;
 * PMA_isValid($_REQUEST[\\'doit\\'], \\'identical\\', \\'true\\'); // false
 * // $_REQUEST[\\'doit\\'] = \\'true\\';
 * PMA_isValid($_REQUEST[\\'doit\\'], \\'identical\\', \\'true\\'); // true
 * </code>
 *
 * NOTE: call-by-reference is used to not get NOTICE on undefined vars,
 * but the var is not altered inside this function, also after checking a var
 * this var exists nut is not set, example:
 * <code>
 * // $var is not set
 * isset($var); // false
 * functionCallByReference($var); // false
 * isset($var); // true
 * functionCallByReference($var); // true
 * </code>
 *
 * to avoid this we set this var to null if not isset
 *
 * @todo create some testsuites
 * @todo add some more var types like hex, bin, ...?
 * @see     http://php.net/gettype
 * @param mixed   $var        variable to check
 * @param mixed   $type       var type or array of valid values to check against $var
 * @param mixed   $compare    var to compare with $var
 * @return  boolean whether valid or not
 */",
 "/**
 * Removes insecure parts in a path; used before include() or
 * require() when a part of the path comes from an insecure source
 * like a cookie or form.
 *
 * @param string  The path to check
 *
 * @return   string  The secured path
 *
 * @access  public
 */",
 "/**
 * displays the given error message on phpMyAdmin error page in foreign language,
 * ends script execution and closes session
 *
 * loads language file if not loaded already
 *
 * @todo    use detected argument separator (PMA_Config)
 * @param string $error_message the error message or named error message
 * @param string|array $message_args arguments applied to $error_message
 * @return  exit
 */",
 "/**
 * Returns a link to the PHP documentation
 *
 * @param string  anchor in documentation
 *
 * @return  string  the URL
 *
 * @access  public
 */",
 "/**
 * Warn or fail on missing extension.
 *
 * @param string $extension Extension name
 * @param bool $fatal Whether the error is fatal.
 / @param string $extra Extra string to append to messsage.
 */",
 "/**
 * returns count of tables in given db
 *
 * @param string  $db database to count tables for
 * @return  integer count of tables in $db
 */",
 "/**
 * Converts numbers like 10M into bytes
 * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas
 * (renamed with PMA prefix to avoid double definition when embedded
 * in Moodle)
 *
 * @param string  $size
 * @return  integer $size
 */",
 "/**
 * merges array recursive like array_merge_recursive() but keyed-values are
 * always overwritten.
 *
 * array PMA_array_merge_recursive(array $array1[, array $array2[, array ...]])
 *
 * @see     http://php.net/array_merge
 * @see     http://php.net/array_merge_recursive
 * @param array   array to merge
 * @param array   array to merge
 * @param array   ...
 * @return  array   merged array
 */",
 "/**
 * calls $function vor every element in $array recursively
 *
 * this function is protected against deep recursion attack CVE-2006-1549,
 * 1000 seems to be more than enough
 *
 * @see http://www.php-security.org/MOPB/MOPB-02-2007.html
 * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549
 *
 * @param array   $array      array to walk
 * @param string  $function   function to call for every array element
 */",
 "/**
 * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist)
 *
 * checks given given $page against given $whitelist and returns true if valid
 * it ignores optionaly query paramters in $page (script.php?ignored)
 *
 * @param string  &$page      page to check
 * @param array   $whitelist  whitelist to check page against
 * @return  boolean whether $page is valid or not (in $whitelist or not)
 */",
 "/**
 * trys to find the value for the given environment vriable name
 *
 * searchs in $_SERVER, $_ENV than trys getenv() and apache_getenv()
 * in this order
 *
 * @param string  $var_name   variable name
 * @return  string  value of $var or empty string
 */",
 "/**
 * Send HTTP header, taking IIS limits into account (600 seems ok)
 *
 * @param string   $uri the header to send
 * @return  boolean  always true
 */",
 "/**
 * Outputs headers to prevent caching in browser (and on the way).
 *
 * @return nothing
 */",
 "/**
 * Sends header indicating file download.
 *
 * @param string $filename Filename to include in headers if empty,
 *                         none Content-Disposition header will be sent.
 * @param string $mimetype MIME type to include in headers.
 * @param int    $length   Length of content (optional)
 * @param bool   $no_cache Whether to include no-caching headers.
 *
 * @return nothing
 */",
 "/**
 * Returns value of an element in $array given by $path.
 * $path is a string describing position of an element in an associative array,
 * eg. Servers/1/host refers to $array[Servers][1][host]
 *
 * @param string   $path
 * @param array    $array
 * @param mixed    $default
 * @return mixed    array element or $default
 */",
 "/**
 * Stores value in an array
 *
 * @param string   $path
 * @param array    &$array
 * @param mixed    $value
 */",
 "/**
 * Removes value from an array
 *
 * @param string   $path
 * @param array    &$array
 * @param mixed    $value
 */",
 "/**
 * Returns link to (possibly) external site using defined redirector.
 *
 * @param string $url  URL where to go.
 *
 * @return string URL for a link.
 */",
 "/**
 * Returns HTML code to include javascript file.
 *
 * @param string $url Location of javascript, relative to js/ folder.
 *
 * @return string HTML code for javascript inclusion.
 */",
 "/**
 * Adds JS code snippets to be displayed by header.inc.php. Adds a
 * newline to each snippet.
 *
 * @param string $str Js code to be added (e.g. \"token=1234;\")
 *
 */",
 "/**
 * Adds JS code snippet for variable assignment to be displayed by header.inc.php.
 *
 * @param string $key    Name of value to set
 * @param mixed  $value  Value to set, can be either string or array of strings
 * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code)
 *
 */",
 "/**
 * Displays top part of the form
 *
 * @param string $action         default: $_SERVER[\\'REQUEST_URI\\']
 * @param string $method         \\'post\\' or \\'get\\'
 * @param array  $hidden_fields  array of form hidden fields (key: field name)
 */",
 "/**
 * Displays form tabs which are given by an array indexed by fieldset id
 * ({@link display_fieldset_top}), with values being tab titles.
 *
 * @param array $tabs
 */",
 "/**
 * Displays top part of a fieldset
 *
 * @param string $title
 * @param string $description
 * @param array  $errors
 * @param array  $attributes
 */",
 "/**
 * Displays input field
 *
 * $opts keys:
 * o doc - (string) documentation link
 * o errors - error array
 * o setvalue - (string) shows button allowing to set poredefined value
 * o show_restore_default - (boolean) whether show \"restore default\" button
 * o userprefs_allow - whether user preferences are enabled for this field (null - no support,
 *                     true/false - enabled/disabled)
 * o userprefs_comment - (string) field comment
 * o values - key - value paris for <select> fields
 * o values_escaped - (boolean) tells whether values array is already escaped (defaults to false)
 * o values_disabled -  (array)list of disabled values (keys from values)
 * o comment - (string) tooltip comment
 * o comment_warning - (bool) whether this comments warns about something
 * o wiki - (string) wiki link
 *
 * @param string $path
 * @param string $name
 * @param string $description
 * @param string $type
 * @param mixed  $value
 * @param bool   $value_is_default
 * @param array  $opts
 */",
 "/**
 * Display group header
 *
 * @param string $header_text
 */",
 "/**
 * Display group footer
 *
 */",
 "/**
 * Displays bottom part of a fieldset
 */",
 "/**
 * Displays simple bottom part of a fieldset (without submit buttons)
 */",
 "/**
 * Closes form tabs
 */",
 "/**
 * Displays bottom part of the form
 */",
 "/**
 * Appends JS validation code to $js_array
 *
 * @param string       $field_id
 * @param string|array $validator
 * @param array        $js_array
 */",
 "/**
 * Displays JavaScript code
 *
 * @param array $js_array
 */",
 "/**
 * Displays error list
 *
 * @param string $name
 * @param array  $error_list
 */",
 "/**
 * fills given tooltip arrays
 *
 * @param array   $tooltip_truename   tooltip data
 * @param array   $tooltip_aliasname  tooltip data
 * @param array   $table              tabledata
 */",
 "/**
 * @global bool whether to display extended stats
 */",
 "/**
 * @global bool whether selected db is information_schema
 */",
 "/**
 * @global array information about tables in db
 */",
 "/**
             *
             * @todo Page selector for table names?
             */",
 "/**
 * @global int count of tables in db
 */",
 "/**
     * Counts amount of navigation tabs
     */",
 "/**
     * Displays tab links
     * Put the links we assume are used less, towards the end
     */",
 "/**
 * Places matching tables in source and target databases in $matching_tables
 * array whereas $uncommon_source_tables array gets the tables present in
 * source database but are absent from target database.  Criterion for
 * matching tables is just comparing their names.
 *
 * @param array $trg_tables              array of target database table names,
 * @param array $src_tables              array of source database table names,
 * @param array &$matching_tables        empty array passed by reference to save
 *                                       names of matching tables,
 * @param array &$uncommon_source_tables empty array passed by reference to save
 *                                       names of tables present in source database
 *                                       but absent from target database
 */",
 "/**
 * Places tables present in target database but are absent from source database
 *
 * @param array $trg_tables              array of target database table names,
 * @param array $matching_tables         matching tables array containing names
 *                                       of matching tables,
 * @param array &$uncommon_target_tables empty array passed by reference to save
 *                                       names of tables presnet in target database
 *                                       but absent from source database
 */",
 "/**
 * Finds the difference in source and target matching tables by
 * first comparing source table\\'s primary key entries with target table enteries.
 * It gets the field names for the matching table also for comparisons.
 * If the entry is found in target table also then it is checked for the remaining
 * field values also, in order to check whether update is required or not.
 * If update is required, it is placed in $update_array
 * Otherwise that entry is placed in the $insert_array.
 *
 * @param string  $src_db                  name of source database
 * @param string  $trg_db                  name of target database
 * @param db_link $src_link                connection established with source server
 * @param db_link $trg_link                connection established with target server
 * @param array   &$matching_table         array containing matching table names
 * @param array   &$matching_tables_fields A two dimensional array passed by reference to contain names of fields for each matching table
 * @param array   &$update_array           A three dimensional array passed by reference to
 *                                         contain updates required for each matching table
 * @param array   &$insert_array           A three dimensional array passed by reference to
 *                                         contain inserts required for each matching table
 * @param array   &$delete_array           Unused
 * @param array   &$fields_num             A two dimensional array passed by reference to
 *                                         contain number of fields for each matching table
 * @param int     $matching_table_index    Index of a table from $matching_table array
 * @param array   &$matching_tables_keys   A two dimensional array passed by reference to contain names of keys for each matching table
 */",
 "/**
 * Finds the rows which are to be deleted from target table.
 *
 * @param array   &$delete_array        array containing rows that are to be deleted
 * @param array   $matching_table       array containing matching table names
 * @param int     $matching_table_index index of a table from $matching_table array
 * @param array   $trg_keys             array of target table keys
 * @param array   $src_keys             array of source table keys
 * @param string  $trg_db               name of target database
 * @param db_link $trg_link             connection established with target server
 * @param string  $src_db               name of source database
 * @param db_link $src_link             connection established with source server
 */",
 "/**
 * PMA_dataDiffInUncommonTables() finds the data difference in  $source_tables_uncommon
 *
 * @param array  $source_tables_uncommon table names that are in source db and not in target db
 * @param string $src_db                 name of source database
 * @param mixed  $src_link               connection established with source server
 * @param int    $index                  index of a table from $matching_table array
 * @param array  &$row_count             number of rows
 *
 * @return nothing
 */",
 "/**
 * PMA_updateTargetTables() sets the updated field values to target table rows using $update_array[$matching_table_index]
 *
 * @param array   $table                Matching tables\\' names
 * @param array   $update_array         A three dimensional array containing field
 *                                      value updates required for each matching table
 * @param string  $src_db               Name of source database
 * @param string  $trg_db               Name of target database
 * @param mixed   $trg_link             Connection established with target server
 * @param int     $matching_table_index index of matching table in matching_table_array
 * @param array   $matching_table_keys
 * @param boolean $display
 */",
 "/**
 * PMA_insertIntoTargetTable() inserts missing rows in the target table using $array_insert[$matching_table_index]
 *
 * @todo this function uses undefined variables and is possibly broken: $matching_tables,
 *       $matching_tables_fields, $remove_indexes_array, $matching_table_keys
 *
 * @param array  $matching_table          matching table names
 * @param string $src_db                  name of source database
 * @param string $trg_db                  name of target database
 * @param mixed  $src_link                connection established with source server
 * @param mixed  $trg_link                connection established with target server
 * @param array  $table_fields            field names of a table
 * @param array  &$array_insert
 * @param int    $matching_table_index    index of matching table in matching_table_array
 * @param array  $matching_tables_keys    field names that are keys in the matching table
 * @param array  $source_columns          source column information
 * @param array  &$add_column_array       column names that are to be added in target table
 * @param array  $criteria                criteria like type, null, collation, default etc
 * @param array  $target_tables_keys      field names that are keys in the target table
 * @param array  $uncommon_tables         table names that are present in source db but not in targt db
 * @param array  &$uncommon_tables_fields field names of the uncommon tables
 * @param array  $uncommon_cols           column names that are present in target table and not in source table
 * @param array  &$alter_str_array        column names that are to be altered
 * @param array  &$source_indexes         column names on which indexes are made in source table
 * @param array  &$target_indexes         column names on which indexes are made in target table
 * @param array  &$add_indexes_array      column names on which index is to be added in target table
 * @param array  &$alter_indexes_array    column names whose indexes are to be altered. Only index name and uniqueness of an index can be changed
 * @param array  &$delete_array           rows that are to be deleted
 * @param array  &$update_array           rows that are to be updated in target
 * @param bool   $display
 */",
 "/**
 * PMA_createTargetTables() Create the missing table $uncommon_table in target database
 *
 * @param string $src_db                  name of source database
 * @param string $trg_db                  name of target database
 * @param mixed  $src_link                connection established with source server
 * @param mixed  $trg_link                connection established with target server
 * @param array  &$uncommon_tables        names of tables present in source but not in target
 * @param int    $table_index             index of table in $uncommon_tables array
 * @param array  &$uncommon_tables_fields field names of the uncommon table
 * @param bool   $display
 */",
 "/**
 * PMA_populateTargetTables() inserts data into uncommon tables after they have been created
 *
 * @param string $src_db                 name of source database
 * @param string $trg_db                 name of target database
 * @param mixed  $src_link               connection established with source server
 * @param mixed  $trg_link               connection established with target server
 * @param array  $uncommon_tables        uncommon table names (table names that are present in source but not in target db)
 * @param int    $table_index            index of table in matching_table_array
 * @param array  $uncommon_tables_fields field names of the uncommon table
 * @param bool   $display
 *
 * @todo This turns NULL values into \\'\\' (empty string)
 */",
 "/**
 * PMA_deleteFromTargetTable() delete rows from target table
 *
 * @param string $trg_db             name of target database
 * @param mixed  $trg_link           connection established with target server
 * @param array  $matching_tables    matching table names
 * @param int    $table_index        index of table in matching_table_array
 * @param array  $target_tables_keys primary key names of the target tables
 * @param array  $delete_array       key values of rows that are to be deleted
 * @param bool   $display
 */",
 "/**
 * PMA_structureDiffInTables() Gets all the column information for source and target table.
 * Compare columns on their names.
 * If column exists in target then compare Type, Null, Collation, Key, Default and Comment for that column.
 * If column does not exist in target table then it is placed in  $add_column_array.
 * If column exists in target table but criteria is different then it is palced in $alter_str_array.
 * If column does not exist in source table but is present in target table then it is placed in  $uncommon_columns.
 * Keys for all the source tables that have a corresponding target table are placed  in $matching_tables_keys.
 * Keys for all the target tables that have a corresponding source table are placed  in $target_tables_keys.
 *
 * @param string $src_db                 name of source database
 * @param string $trg_db                 name of target database
 * @param mixed  $src_link               connection established with source server
 * @param mixed  $trg_link               connection established with target server
 * @param array  $matching_tables        names of matching tables
 * @param array  &$source_columns        columns information of the source tables
 * @param array  &$target_columns        columns information of the target tables
 * @param array  &$alter_str_array       three dimensional associative array first index being the matching table index, second index being column name for which target
 *                                       column have some criteria different and third index containing the criteria which is different.
 * @param array  &$add_column_array      two dimensional associative array, first index of the array contain the matching table number and second index contain the
 *                                       column name which is to be added in the target table
 * @param array  &$uncommon_columns      columns that are present in the target table but not in the source table
 * @param array  $criteria               criteria which are to be checked for field that is present in source table and target table
 * @param array  &$target_tables_keys    field names which is key in the target table
 * @param int    $matching_table_index   number of the matching table
 */",
 "/**
 * PMA_addColumnsInTargetTable() adds column that are present in source table but not in target table
 *
 * @param string $src_db                  name of source database
 * @param string $trg_db                  name of target database
 * @param mixed  $src_link                connection established with source server
 * @param mixed  $trg_link                connection established with target server
 * @param array  $matching_tables         names of matching tables
 * @param array  $source_columns          columns information of the source tables
 * @param array  &$add_column_array       the names of the column(field) that are to be added in the target
 * @param array  $matching_tables_fields
 * @param array  $criteria                criteria
 * @param array  $matching_tables_keys    field names which is key in the source table
 * @param array  $target_tables_keys      field names which is key in the target table
 * @param array  $uncommon_tables         table names that are present in source db and not in target db
 * @param array  &$uncommon_tables_fields names of the fields of the uncommon tables
 * @param int    $table_counter           number of the matching table
 * @param array  $uncommon_cols
 * @param bool   $display
 */",
 "/**
 * PMA_checkForeignKeys() checks if the referenced table have foreign keys.
 * uses    PMA_createTargetTables()
 *
 * @param string $src_db                  name of source database
 * @param mixed  $src_link                connection established with source server
 * @param string $trg_db                  name of target database
 * @param mixed  $trg_link                connection established with target server
 * @param string $referenced_table        table whose column is a foreign key in another table
 * @param array  &$uncommon_tables        names that are uncommon
 * @param array  &$uncommon_tables_fields field names of the uncommon table
 * @param bool   $display
 */",
 "/**
 * PMA_alterTargetTableStructure() alters structure of the target table using $alter_str_array
 *
 * @param string $trg_db                 name of target database
 * @param mixed  $trg_link               connection established with target server
 * @param array  $matching_tables        names of matching tables
 * @param array  &$source_columns        columns information of the source table
 * @param array  &$alter_str_array       column name and criteria which is to be altered for the targert table
 * @param array  $matching_tables_fields name of the fields for the matching table
 * @param array  $criteria               criteria
 * @param array  &$matching_tables_keys  field names which is key in the source table
 * @param array  &$target_tables_keys    field names which is key in the target table
 * @param int    $matching_table_index   number of the matching table
 * @param bool   $display
 */",
 "/**
 * PMA_removeColumnsFromTargetTable() removes the columns which are present in target table but not in source table.
 *
 * @param string $trg_db           name of target database
 * @param mixed  $trg_link         connection established with target server
 * @param array  $matching_tables  names of matching tables
 * @param array  $uncommon_columns array containing the names of the column which are to be dropped from the target table
 * @param int    $table_counter    index of the matching table as in $matchiing_tables array
 * @param bool   $display
 */",
 "/**
 * PMA_indexesDiffInTables() compares the source table indexes with target table indexes and keep the indexes to be added in target table in $add_indexes_array
 * indexes to be altered in $alter_indexes_array and indexes to be removed from target table in $remove_indexes_array.
 * Only keyname and uniqueness characteristic of the indexes are altered.
 *
 * @param string $src_db                name of source database
 * @param string $trg_db                name of target database
 * @param mixed  $src_link              connection established with source server
 * @param mixed  $trg_link              connection established with target server
 * @param array  $matching_tables       matching tables name
 * @param array  &$source_indexes       indexes of the source table
 * @param array  &$target_indexes       indexes of the target table
 * @param array  &$add_indexes_array    name of the column on which the index is to be added in the target table
 * @param array  &$alter_indexes_array  key name which needs to be altered
 * @param array  &$remove_indexes_array key name of the index which is to be removed from the target table
 * @param int    $table_counter         number of the matching table
 */",
 "/**
 * PMA_applyIndexesDiff() create indexes, alters indexes and remove indexes.
 *
 * @param string $trg_db               name of target database
 * @param mixed  $trg_link             connection established with target server
 * @param array  $matching_tables      matching tables name
 * @param array  $source_indexes       indexes of the source table
 * @param array  $target_indexes       indexes of the target table
 * @param array  $add_indexes_array    column names on which indexes are to be created in target table
 * @param array  $alter_indexes_array  column names for which indexes are to be altered
 * @param array  $remove_indexes_array key name of the indexes which are to be removed from the target table
 * @param int    $table_counter        number of the matching table
 * @param $display
 */",
 "/**
 * PMA_displayQuery() displays a query, taking the maximum display size
 * into account
 *
 * @param string $query the query to display
 *
 * @return nothing
 */",
 "/**
 * PMA_syncDisplayHeaderCompare() shows the header for source database
 *
 * @param string $src_db source db name
 * @param string $trg_db target db name
 *
 * @return nothing
 */",
 "/**
 * Prints table row
 *
 * $rows contains following keys:
 * - src_table_name - source server table name
 * - dst_table_name - target server table name
 * - btn_type - \\'M\\' or \\'U\\'
 * - btn_structure - null or arguments for showDetails in server_synchronize.js (without img_obj and table_name):
 *                       i, update_size, insert_size, remove_size, insert_index, remove_index
 *
 * @param array $rows
 */",
 "/**
 * array PMA_get_column_values (string $database, string $table, string $column , mysql db link $link = null)
 *
 * @param string $database name of database
 * @param string $table    name of table to retrieve columns from
 * @param string $column   name of the column to retrieve data from
 * @param mixed  $link     mysql link resource
 *
 * @return array $field_values
 */",
 "/**
     * Sets member variable this -> doWrite to true
     * - Should be called immediately after class instantiantion
     * - If set to true, then ZIP archive are echo\\'ed to STDOUT as each
     *   file is added via this -> addfile(), and central directories are
     *   echoed to STDOUT on final call to this -> file().  Also,
     *   this -> file() returns an empty string so it is safe to issue a
     *   \"echo $zipfile;\" command
     *
     * @access public
     *
     * @return nothing
     */",
 "/**
     * Converts an Unix timestamp to a four byte DOS date and time format (date
     * in high two bytes, time in low two bytes allowing magnitude comparison).
     *
     * @param integer $unixtime the current Unix timestamp
     *
     * @return integer the current date in a four byte DOS format
     *
     * @access private
     */",
 "/**
     * Adds \"file\" to archive
     *
     * @param string  $data file contents
     * @param string  $name name of the file in the archive (may contains the path)
     * @param integer $time the current timestamp
     *
     * @access public
     *
     * @return nothing
     */",
 "/**
     * Echo central dir if ->doWrite==true, else build string to return
     *
     * @return  string  if ->doWrite {empty string} else the ZIP file contents
     *
     * @access public
     */",
 "/**
 * Zip file creation class.
 * Makes zip files.
 *
 * @see Official ZIP file format: http://www.pkware.com/support/zip-app-note
 *
 * @access  public
 * @package PhpMyAdmin
 */",
 "/**
	 * This is the class constructor.
	 * It allows to set up the page format, the orientation and the measure unit used in all the methods (except for the font sizes).
	 * @param $orientation (string) page orientation. Possible values are (case insensitive):<ul><li>P or Portrait (default)</li><li>L or Landscape</li><li>\\'\\' (empty string) for automatic orientation</li></ul>
	 * @param $unit (string) User measure unit. Possible values are:<ul><li>pt: point</li><li>mm: millimeter (default)</li><li>cm: centimeter</li><li>in: inch</li></ul><br />A point equals 1/72 of inch, that is to say about 0.35 mm (an inch being 2.54 cm). This is a very common unit in typography; font sizes are expressed in that unit.
	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
	 * @param $unicode (boolean) TRUE means that the input text is unicode (default = true)
	 * @param $encoding (string) Charset encoding; default is UTF-8.
	 * @param $diskcache (boolean) If TRUE reduce the RAM memory usage by caching temporary data on filesystem (slower).
	 * @param $pdfa (boolean) If TRUE set the document to PDF/A mode.
	 * @public
	 * @see getPageSizeFromFormat(), setPageFormat()
	 */",
 "/**
	 * Default destructor.
	 * @public
	 * @since 1.53.0.TC016
	 */",
 "/**
	 * Return the current TCPDF version.
	 * @return TCPDF version string
	 * @public
	 * @since 5.9.012 (2010-11-10)
	 */",
 "/**
	 * Set the units of measure for the document.
	 * @param $unit (string) User measure unit. Possible values are:<ul><li>pt: point</li><li>mm: millimeter (default)</li><li>cm: centimeter</li><li>in: inch</li></ul><br />A point equals 1/72 of inch, that is to say about 0.35 mm (an inch being 2.54 cm). This is a very common unit in typography; font sizes are expressed in that unit.
	 * @public
	 * @since 3.0.015 (2008-06-06)
	 */",
 "/**
	 * Get page dimensions from format name.
	 * @param $format (mixed) The format name. It can be: <ul>
	 * <li><b>ISO 216 A Series + 2 SIS 014711 extensions</b></li>
	 * <li>A0 (841x1189 mm ; 33.11x46.81 in)</li>
	 * <li>A1 (594x841 mm ; 23.39x33.11 in)</li>
	 * <li>A2 (420x594 mm ; 16.54x23.39 in)</li>
	 * <li>A3 (297x420 mm ; 11.69x16.54 in)</li>
	 * <li>A4 (210x297 mm ; 8.27x11.69 in)</li>
	 * <li>A5 (148x210 mm ; 5.83x8.27 in)</li>
	 * <li>A6 (105x148 mm ; 4.13x5.83 in)</li>
	 * <li>A7 (74x105 mm ; 2.91x4.13 in)</li>
	 * <li>A8 (52x74 mm ; 2.05x2.91 in)</li>
	 * <li>A9 (37x52 mm ; 1.46x2.05 in)</li>
	 * <li>A10 (26x37 mm ; 1.02x1.46 in)</li>
	 * <li>A11 (18x26 mm ; 0.71x1.02 in)</li>
	 * <li>A12 (13x18 mm ; 0.51x0.71 in)</li>
	 * <li><b>ISO 216 B Series + 2 SIS 014711 extensions</b></li>
	 * <li>B0 (1000x1414 mm ; 39.37x55.67 in)</li>
	 * <li>B1 (707x1000 mm ; 27.83x39.37 in)</li>
	 * <li>B2 (500x707 mm ; 19.69x27.83 in)</li>
	 * <li>B3 (353x500 mm ; 13.90x19.69 in)</li>
	 * <li>B4 (250x353 mm ; 9.84x13.90 in)</li>
	 * <li>B5 (176x250 mm ; 6.93x9.84 in)</li>
	 * <li>B6 (125x176 mm ; 4.92x6.93 in)</li>
	 * <li>B7 (88x125 mm ; 3.46x4.92 in)</li>
	 * <li>B8 (62x88 mm ; 2.44x3.46 in)</li>
	 * <li>B9 (44x62 mm ; 1.73x2.44 in)</li>
	 * <li>B10 (31x44 mm ; 1.22x1.73 in)</li>
	 * <li>B11 (22x31 mm ; 0.87x1.22 in)</li>
	 * <li>B12 (15x22 mm ; 0.59x0.87 in)</li>
	 * <li><b>ISO 216 C Series + 2 SIS 014711 extensions + 2 EXTENSION</b></li>
	 * <li>C0 (917x1297 mm ; 36.10x51.06 in)</li>
	 * <li>C1 (648x917 mm ; 25.51x36.10 in)</li>
	 * <li>C2 (458x648 mm ; 18.03x25.51 in)</li>
	 * <li>C3 (324x458 mm ; 12.76x18.03 in)</li>
	 * <li>C4 (229x324 mm ; 9.02x12.76 in)</li>
	 * <li>C5 (162x229 mm ; 6.38x9.02 in)</li>
	 * <li>C6 (114x162 mm ; 4.49x6.38 in)</li>
	 * <li>C7 (81x114 mm ; 3.19x4.49 in)</li>
	 * <li>C8 (57x81 mm ; 2.24x3.19 in)</li>
	 * <li>C9 (40x57 mm ; 1.57x2.24 in)</li>
	 * <li>C10 (28x40 mm ; 1.10x1.57 in)</li>
	 * <li>C11 (20x28 mm ; 0.79x1.10 in)</li>
	 * <li>C12 (14x20 mm ; 0.55x0.79 in)</li>
	 * <li>C76 (81x162 mm ; 3.19x6.38 in)</li>
	 * <li>DL (110x220 mm ; 4.33x8.66 in)</li>
	 * <li><b>SIS 014711 E Series</b></li>
	 * <li>E0 (879x1241 mm ; 34.61x48.86 in)</li>
	 * <li>E1 (620x879 mm ; 24.41x34.61 in)</li>
	 * <li>E2 (440x620 mm ; 17.32x24.41 in)</li>
	 * <li>E3 (310x440 mm ; 12.20x17.32 in)</li>
	 * <li>E4 (220x310 mm ; 8.66x12.20 in)</li>
	 * <li>E5 (155x220 mm ; 6.10x8.66 in)</li>
	 * <li>E6 (110x155 mm ; 4.33x6.10 in)</li>
	 * <li>E7 (78x110 mm ; 3.07x4.33 in)</li>
	 * <li>E8 (55x78 mm ; 2.17x3.07 in)</li>
	 * <li>E9 (39x55 mm ; 1.54x2.17 in)</li>
	 * <li>E10 (27x39 mm ; 1.06x1.54 in)</li>
	 * <li>E11 (19x27 mm ; 0.75x1.06 in)</li>
	 * <li>E12 (13x19 mm ; 0.51x0.75 in)</li>
	 * <li><b>SIS 014711 G Series</b></li>
	 * <li>G0 (958x1354 mm ; 37.72x53.31 in)</li>
	 * <li>G1 (677x958 mm ; 26.65x37.72 in)</li>
	 * <li>G2 (479x677 mm ; 18.86x26.65 in)</li>
	 * <li>G3 (338x479 mm ; 13.31x18.86 in)</li>
	 * <li>G4 (239x338 mm ; 9.41x13.31 in)</li>
	 * <li>G5 (169x239 mm ; 6.65x9.41 in)</li>
	 * <li>G6 (119x169 mm ; 4.69x6.65 in)</li>
	 * <li>G7 (84x119 mm ; 3.31x4.69 in)</li>
	 * <li>G8 (59x84 mm ; 2.32x3.31 in)</li>
	 * <li>G9 (42x59 mm ; 1.65x2.32 in)</li>
	 * <li>G10 (29x42 mm ; 1.14x1.65 in)</li>
	 * <li>G11 (21x29 mm ; 0.83x1.14 in)</li>
	 * <li>G12 (14x21 mm ; 0.55x0.83 in)</li>
	 * <li><b>ISO Press</b></li>
	 * <li>RA0 (860x1220 mm ; 33.86x48.03 in)</li>
	 * <li>RA1 (610x860 mm ; 24.02x33.86 in)</li>
	 * <li>RA2 (430x610 mm ; 16.93x24.02 in)</li>
	 * <li>RA3 (305x430 mm ; 12.01x16.93 in)</li>
	 * <li>RA4 (215x305 mm ; 8.46x12.01 in)</li>
	 * <li>SRA0 (900x1280 mm ; 35.43x50.39 in)</li>
	 * <li>SRA1 (640x900 mm ; 25.20x35.43 in)</li>
	 * <li>SRA2 (450x640 mm ; 17.72x25.20 in)</li>
	 * <li>SRA3 (320x450 mm ; 12.60x17.72 in)</li>
	 * <li>SRA4 (225x320 mm ; 8.86x12.60 in)</li>
	 * <li><b>German DIN 476</b></li>
	 * <li>4A0 (1682x2378 mm ; 66.22x93.62 in)</li>
	 * <li>2A0 (1189x1682 mm ; 46.81x66.22 in)</li>
	 * <li><b>Variations on the ISO Standard</b></li>
	 * <li>A2_EXTRA (445x619 mm ; 17.52x24.37 in)</li>
	 * <li>A3+ (329x483 mm ; 12.95x19.02 in)</li>
	 * <li>A3_EXTRA (322x445 mm ; 12.68x17.52 in)</li>
	 * <li>A3_SUPER (305x508 mm ; 12.01x20.00 in)</li>
	 * <li>SUPER_A3 (305x487 mm ; 12.01x19.17 in)</li>
	 * <li>A4_EXTRA (235x322 mm ; 9.25x12.68 in)</li>
	 * <li>A4_SUPER (229x322 mm ; 9.02x12.68 in)</li>
	 * <li>SUPER_A4 (227x356 mm ; 8.94x14.02 in)</li>
	 * <li>A4_LONG (210x348 mm ; 8.27x13.70 in)</li>
	 * <li>F4 (210x330 mm ; 8.27x12.99 in)</li>
	 * <li>SO_B5_EXTRA (202x276 mm ; 7.95x10.87 in)</li>
	 * <li>A5_EXTRA (173x235 mm ; 6.81x9.25 in)</li>
	 * <li><b>ANSI Series</b></li>
	 * <li>ANSI_E (864x1118 mm ; 34.00x44.00 in)</li>
	 * <li>ANSI_D (559x864 mm ; 22.00x34.00 in)</li>
	 * <li>ANSI_C (432x559 mm ; 17.00x22.00 in)</li>
	 * <li>ANSI_B (279x432 mm ; 11.00x17.00 in)</li>
	 * <li>ANSI_A (216x279 mm ; 8.50x11.00 in)</li>
	 * <li><b>Traditional \\'Loose\\' North American Paper Sizes</b></li>
	 * <li>LEDGER, USLEDGER (432x279 mm ; 17.00x11.00 in)</li>
	 * <li>TABLOID, USTABLOID, BIBLE, ORGANIZERK (279x432 mm ; 11.00x17.00 in)</li>
	 * <li>LETTER, USLETTER, ORGANIZERM (216x279 mm ; 8.50x11.00 in)</li>
	 * <li>LEGAL, USLEGAL (216x356 mm ; 8.50x14.00 in)</li>
	 * <li>GLETTER, GOVERNMENTLETTER (203x267 mm ; 8.00x10.50 in)</li>
	 * <li>JLEGAL, JUNIORLEGAL (203x127 mm ; 8.00x5.00 in)</li>
	 * <li><b>Other North American Paper Sizes</b></li>
	 * <li>QUADDEMY (889x1143 mm ; 35.00x45.00 in)</li>
	 * <li>SUPER_B (330x483 mm ; 13.00x19.00 in)</li>
	 * <li>QUARTO (229x279 mm ; 9.00x11.00 in)</li>
	 * <li>FOLIO, GOVERNMENTLEGAL (216x330 mm ; 8.50x13.00 in)</li>
	 * <li>EXECUTIVE, MONARCH (184x267 mm ; 7.25x10.50 in)</li>
	 * <li>MEMO, STATEMENT, ORGANIZERL (140x216 mm ; 5.50x8.50 in)</li>
	 * <li>FOOLSCAP (210x330 mm ; 8.27x13.00 in)</li>
	 * <li>COMPACT (108x171 mm ; 4.25x6.75 in)</li>
	 * <li>ORGANIZERJ (70x127 mm ; 2.75x5.00 in)</li>
	 * <li><b>Canadian standard CAN 2-9.60M</b></li>
	 * <li>P1 (560x860 mm ; 22.05x33.86 in)</li>
	 * <li>P2 (430x560 mm ; 16.93x22.05 in)</li>
	 * <li>P3 (280x430 mm ; 11.02x16.93 in)</li>
	 * <li>P4 (215x280 mm ; 8.46x11.02 in)</li>
	 * <li>P5 (140x215 mm ; 5.51x8.46 in)</li>
	 * <li>P6 (107x140 mm ; 4.21x5.51 in)</li>
	 * <li><b>North American Architectural Sizes</b></li>
	 * <li>ARCH_E (914x1219 mm ; 36.00x48.00 in)</li>
	 * <li>ARCH_E1 (762x1067 mm ; 30.00x42.00 in)</li>
	 * <li>ARCH_D (610x914 mm ; 24.00x36.00 in)</li>
	 * <li>ARCH_C, BROADSHEET (457x610 mm ; 18.00x24.00 in)</li>
	 * <li>ARCH_B (305x457 mm ; 12.00x18.00 in)</li>
	 * <li>ARCH_A (229x305 mm ; 9.00x12.00 in)</li>
	 * <li><b>Announcement Envelopes</b></li>
	 * <li>ANNENV_A2 (111x146 mm ; 4.37x5.75 in)</li>
	 * <li>ANNENV_A6 (121x165 mm ; 4.75x6.50 in)</li>
	 * <li>ANNENV_A7 (133x184 mm ; 5.25x7.25 in)</li>
	 * <li>ANNENV_A8 (140x206 mm ; 5.50x8.12 in)</li>
	 * <li>ANNENV_A10 (159x244 mm ; 6.25x9.62 in)</li>
	 * <li>ANNENV_SLIM (98x225 mm ; 3.87x8.87 in)</li>
	 * <li><b>Commercial Envelopes</b></li>
	 * <li>COMMENV_N6_1/4 (89x152 mm ; 3.50x6.00 in)</li>
	 * <li>COMMENV_N6_3/4 (92x165 mm ; 3.62x6.50 in)</li>
	 * <li>COMMENV_N8 (98x191 mm ; 3.87x7.50 in)</li>
	 * <li>COMMENV_N9 (98x225 mm ; 3.87x8.87 in)</li>
	 * <li>COMMENV_N10 (105x241 mm ; 4.12x9.50 in)</li>
	 * <li>COMMENV_N11 (114x263 mm ; 4.50x10.37 in)</li>
	 * <li>COMMENV_N12 (121x279 mm ; 4.75x11.00 in)</li>
	 * <li>COMMENV_N14 (127x292 mm ; 5.00x11.50 in)</li>
	 * <li><b>Catalogue Envelopes</b></li>
	 * <li>CATENV_N1 (152x229 mm ; 6.00x9.00 in)</li>
	 * <li>CATENV_N1_3/4 (165x241 mm ; 6.50x9.50 in)</li>
	 * <li>CATENV_N2 (165x254 mm ; 6.50x10.00 in)</li>
	 * <li>CATENV_N3 (178x254 mm ; 7.00x10.00 in)</li>
	 * <li>CATENV_N6 (191x267 mm ; 7.50x10.50 in)</li>
	 * <li>CATENV_N7 (203x279 mm ; 8.00x11.00 in)</li>
	 * <li>CATENV_N8 (210x286 mm ; 8.25x11.25 in)</li>
	 * <li>CATENV_N9_1/2 (216x267 mm ; 8.50x10.50 in)</li>
	 * <li>CATENV_N9_3/4 (222x286 mm ; 8.75x11.25 in)</li>
	 * <li>CATENV_N10_1/2 (229x305 mm ; 9.00x12.00 in)</li>
	 * <li>CATENV_N12_1/2 (241x318 mm ; 9.50x12.50 in)</li>
	 * <li>CATENV_N13_1/2 (254x330 mm ; 10.00x13.00 in)</li>
	 * <li>CATENV_N14_1/4 (286x311 mm ; 11.25x12.25 in)</li>
	 * <li>CATENV_N14_1/2 (292x368 mm ; 11.50x14.50 in)</li>
	 * <li><b>Japanese (JIS P 0138-61) Standard B-Series</b></li>
	 * <li>JIS_B0 (1030x1456 mm ; 40.55x57.32 in)</li>
	 * <li>JIS_B1 (728x1030 mm ; 28.66x40.55 in)</li>
	 * <li>JIS_B2 (515x728 mm ; 20.28x28.66 in)</li>
	 * <li>JIS_B3 (364x515 mm ; 14.33x20.28 in)</li>
	 * <li>JIS_B4 (257x364 mm ; 10.12x14.33 in)</li>
	 * <li>JIS_B5 (182x257 mm ; 7.17x10.12 in)</li>
	 * <li>JIS_B6 (128x182 mm ; 5.04x7.17 in)</li>
	 * <li>JIS_B7 (91x128 mm ; 3.58x5.04 in)</li>
	 * <li>JIS_B8 (64x91 mm ; 2.52x3.58 in)</li>
	 * <li>JIS_B9 (45x64 mm ; 1.77x2.52 in)</li>
	 * <li>JIS_B10 (32x45 mm ; 1.26x1.77 in)</li>
	 * <li>JIS_B11 (22x32 mm ; 0.87x1.26 in)</li>
	 * <li>JIS_B12 (16x22 mm ; 0.63x0.87 in)</li>
	 * <li><b>PA Series</b></li>
	 * <li>PA0 (840x1120 mm ; 33.07x44.09 in)</li>
	 * <li>PA1 (560x840 mm ; 22.05x33.07 in)</li>
	 * <li>PA2 (420x560 mm ; 16.54x22.05 in)</li>
	 * <li>PA3 (280x420 mm ; 11.02x16.54 in)</li>
	 * <li>PA4 (210x280 mm ; 8.27x11.02 in)</li>
	 * <li>PA5 (140x210 mm ; 5.51x8.27 in)</li>
	 * <li>PA6 (105x140 mm ; 4.13x5.51 in)</li>
	 * <li>PA7 (70x105 mm ; 2.76x4.13 in)</li>
	 * <li>PA8 (52x70 mm ; 2.05x2.76 in)</li>
	 * <li>PA9 (35x52 mm ; 1.38x2.05 in)</li>
	 * <li>PA10 (26x35 mm ; 1.02x1.38 in)</li>
	 * <li><b>Standard Photographic Print Sizes</b></li>
	 * <li>PASSPORT_PHOTO (35x45 mm ; 1.38x1.77 in)</li>
	 * <li>E (82x120 mm ; 3.25x4.72 in)</li>
	 * <li>3R, L (89x127 mm ; 3.50x5.00 in)</li>
	 * <li>4R, KG (102x152 mm ; 4.02x5.98 in)</li>
	 * <li>4D (120x152 mm ; 4.72x5.98 in)</li>
	 * <li>5R, 2L (127x178 mm ; 5.00x7.01 in)</li>
	 * <li>6R, 8P (152x203 mm ; 5.98x7.99 in)</li>
	 * <li>8R, 6P (203x254 mm ; 7.99x10.00 in)</li>
	 * <li>S8R, 6PW (203x305 mm ; 7.99x12.01 in)</li>
	 * <li>10R, 4P (254x305 mm ; 10.00x12.01 in)</li>
	 * <li>S10R, 4PW (254x381 mm ; 10.00x15.00 in)</li>
	 * <li>11R (279x356 mm ; 10.98x14.02 in)</li>
	 * <li>S11R (279x432 mm ; 10.98x17.01 in)</li>
	 * <li>12R (305x381 mm ; 12.01x15.00 in)</li>
	 * <li>S12R (305x456 mm ; 12.01x17.95 in)</li>
	 * <li><b>Common Newspaper Sizes</b></li>
	 * <li>NEWSPAPER_BROADSHEET (750x600 mm ; 29.53x23.62 in)</li>
	 * <li>NEWSPAPER_BERLINER (470x315 mm ; 18.50x12.40 in)</li>
	 * <li>NEWSPAPER_COMPACT, NEWSPAPER_TABLOID (430x280 mm ; 16.93x11.02 in)</li>
	 * <li><b>Business Cards</b></li>
	 * <li>CREDIT_CARD, BUSINESS_CARD, BUSINESS_CARD_ISO7810 (54x86 mm ; 2.13x3.37 in)</li>
	 * <li>BUSINESS_CARD_ISO216 (52x74 mm ; 2.05x2.91 in)</li>
	 * <li>BUSINESS_CARD_IT, BUSINESS_CARD_UK, BUSINESS_CARD_FR, BUSINESS_CARD_DE, BUSINESS_CARD_ES (55x85 mm ; 2.17x3.35 in)</li>
	 * <li>BUSINESS_CARD_US, BUSINESS_CARD_CA (51x89 mm ; 2.01x3.50 in)</li>
	 * <li>BUSINESS_CARD_JP (55x91 mm ; 2.17x3.58 in)</li>
	 * <li>BUSINESS_CARD_HK (54x90 mm ; 2.13x3.54 in)</li>
	 * <li>BUSINESS_CARD_AU, BUSINESS_CARD_DK, BUSINESS_CARD_SE (55x90 mm ; 2.17x3.54 in)</li>
	 * <li>BUSINESS_CARD_RU, BUSINESS_CARD_CZ, BUSINESS_CARD_FI, BUSINESS_CARD_HU, BUSINESS_CARD_IL (50x90 mm ; 1.97x3.54 in)</li>
	 * <li><b>Billboards</b></li>
	 * <li>4SHEET (1016x1524 mm ; 40.00x60.00 in)</li>
	 * <li>6SHEET (1200x1800 mm ; 47.24x70.87 in)</li>
	 * <li>12SHEET (3048x1524 mm ; 120.00x60.00 in)</li>
	 * <li>16SHEET (2032x3048 mm ; 80.00x120.00 in)</li>
	 * <li>32SHEET (4064x3048 mm ; 160.00x120.00 in)</li>
	 * <li>48SHEET (6096x3048 mm ; 240.00x120.00 in)</li>
	 * <li>64SHEET (8128x3048 mm ; 320.00x120.00 in)</li>
	 * <li>96SHEET (12192x3048 mm ; 480.00x120.00 in)</li>
	 * <li><b>Old Imperial English (some are still used in USA)</b></li>
	 * <li>EN_EMPEROR (1219x1829 mm ; 48.00x72.00 in)</li>
	 * <li>EN_ANTIQUARIAN (787x1346 mm ; 31.00x53.00 in)</li>
	 * <li>EN_GRAND_EAGLE (730x1067 mm ; 28.75x42.00 in)</li>
	 * <li>EN_DOUBLE_ELEPHANT (679x1016 mm ; 26.75x40.00 in)</li>
	 * <li>EN_ATLAS (660x864 mm ; 26.00x34.00 in)</li>
	 * <li>EN_COLOMBIER (597x876 mm ; 23.50x34.50 in)</li>
	 * <li>EN_ELEPHANT (584x711 mm ; 23.00x28.00 in)</li>
	 * <li>EN_DOUBLE_DEMY (572x902 mm ; 22.50x35.50 in)</li>
	 * <li>EN_IMPERIAL (559x762 mm ; 22.00x30.00 in)</li>
	 * <li>EN_PRINCESS (546x711 mm ; 21.50x28.00 in)</li>
	 * <li>EN_CARTRIDGE (533x660 mm ; 21.00x26.00 in)</li>
	 * <li>EN_DOUBLE_LARGE_POST (533x838 mm ; 21.00x33.00 in)</li>
	 * <li>EN_ROYAL (508x635 mm ; 20.00x25.00 in)</li>
	 * <li>EN_SHEET, EN_HALF_POST (495x597 mm ; 19.50x23.50 in)</li>
	 * <li>EN_SUPER_ROYAL (483x686 mm ; 19.00x27.00 in)</li>
	 * <li>EN_DOUBLE_POST (483x775 mm ; 19.00x30.50 in)</li>
	 * <li>EN_MEDIUM (445x584 mm ; 17.50x23.00 in)</li>
	 * <li>EN_DEMY (445x572 mm ; 17.50x22.50 in)</li>
	 * <li>EN_LARGE_POST (419x533 mm ; 16.50x21.00 in)</li>
	 * <li>EN_COPY_DRAUGHT (406x508 mm ; 16.00x20.00 in)</li>
	 * <li>EN_POST (394x489 mm ; 15.50x19.25 in)</li>
	 * <li>EN_CROWN (381x508 mm ; 15.00x20.00 in)</li>
	 * <li>EN_PINCHED_POST (375x470 mm ; 14.75x18.50 in)</li>
	 * <li>EN_BRIEF (343x406 mm ; 13.50x16.00 in)</li>
	 * <li>EN_FOOLSCAP (343x432 mm ; 13.50x17.00 in)</li>
	 * <li>EN_SMALL_FOOLSCAP (337x419 mm ; 13.25x16.50 in)</li>
	 * <li>EN_POTT (318x381 mm ; 12.50x15.00 in)</li>
	 * <li><b>Old Imperial Belgian</b></li>
	 * <li>BE_GRAND_AIGLE (700x1040 mm ; 27.56x40.94 in)</li>
	 * <li>BE_COLOMBIER (620x850 mm ; 24.41x33.46 in)</li>
	 * <li>BE_DOUBLE_CARRE (620x920 mm ; 24.41x36.22 in)</li>
	 * <li>BE_ELEPHANT (616x770 mm ; 24.25x30.31 in)</li>
	 * <li>BE_PETIT_AIGLE (600x840 mm ; 23.62x33.07 in)</li>
	 * <li>BE_GRAND_JESUS (550x730 mm ; 21.65x28.74 in)</li>
	 * <li>BE_JESUS (540x730 mm ; 21.26x28.74 in)</li>
	 * <li>BE_RAISIN (500x650 mm ; 19.69x25.59 in)</li>
	 * <li>BE_GRAND_MEDIAN (460x605 mm ; 18.11x23.82 in)</li>
	 * <li>BE_DOUBLE_POSTE (435x565 mm ; 17.13x22.24 in)</li>
	 * <li>BE_COQUILLE (430x560 mm ; 16.93x22.05 in)</li>
	 * <li>BE_PETIT_MEDIAN (415x530 mm ; 16.34x20.87 in)</li>
	 * <li>BE_RUCHE (360x460 mm ; 14.17x18.11 in)</li>
	 * <li>BE_PROPATRIA (345x430 mm ; 13.58x16.93 in)</li>
	 * <li>BE_LYS (317x397 mm ; 12.48x15.63 in)</li>
	 * <li>BE_POT (307x384 mm ; 12.09x15.12 in)</li>
	 * <li>BE_ROSETTE (270x347 mm ; 10.63x13.66 in)</li>
	 * <li><b>Old Imperial French</b></li>
	 * <li>FR_UNIVERS (1000x1300 mm ; 39.37x51.18 in)</li>
	 * <li>FR_DOUBLE_COLOMBIER (900x1260 mm ; 35.43x49.61 in)</li>
	 * <li>FR_GRANDE_MONDE (900x1260 mm ; 35.43x49.61 in)</li>
	 * <li>FR_DOUBLE_SOLEIL (800x1200 mm ; 31.50x47.24 in)</li>
	 * <li>FR_DOUBLE_JESUS (760x1120 mm ; 29.92x44.09 in)</li>
	 * <li>FR_GRAND_AIGLE (750x1060 mm ; 29.53x41.73 in)</li>
	 * <li>FR_PETIT_AIGLE (700x940 mm ; 27.56x37.01 in)</li>
	 * <li>FR_DOUBLE_RAISIN (650x1000 mm ; 25.59x39.37 in)</li>
	 * <li>FR_JOURNAL (650x940 mm ; 25.59x37.01 in)</li>
	 * <li>FR_COLOMBIER_AFFICHE (630x900 mm ; 24.80x35.43 in)</li>
	 * <li>FR_DOUBLE_CAVALIER (620x920 mm ; 24.41x36.22 in)</li>
	 * <li>FR_CLOCHE (600x800 mm ; 23.62x31.50 in)</li>
	 * <li>FR_SOLEIL (600x800 mm ; 23.62x31.50 in)</li>
	 * <li>FR_DOUBLE_CARRE (560x900 mm ; 22.05x35.43 in)</li>
	 * <li>FR_DOUBLE_COQUILLE (560x880 mm ; 22.05x34.65 in)</li>
	 * <li>FR_JESUS (560x760 mm ; 22.05x29.92 in)</li>
	 * <li>FR_RAISIN (500x650 mm ; 19.69x25.59 in)</li>
	 * <li>FR_CAVALIER (460x620 mm ; 18.11x24.41 in)</li>
	 * <li>FR_DOUBLE_COURONNE (460x720 mm ; 18.11x28.35 in)</li>
	 * <li>FR_CARRE (450x560 mm ; 17.72x22.05 in)</li>
	 * <li>FR_COQUILLE (440x560 mm ; 17.32x22.05 in)</li>
	 * <li>FR_DOUBLE_TELLIERE (440x680 mm ; 17.32x26.77 in)</li>
	 * <li>FR_DOUBLE_CLOCHE (400x600 mm ; 15.75x23.62 in)</li>
	 * <li>FR_DOUBLE_POT (400x620 mm ; 15.75x24.41 in)</li>
	 * <li>FR_ECU (400x520 mm ; 15.75x20.47 in)</li>
	 * <li>FR_COURONNE (360x460 mm ; 14.17x18.11 in)</li>
	 * <li>FR_TELLIERE (340x440 mm ; 13.39x17.32 in)</li>
	 * <li>FR_POT (310x400 mm ; 12.20x15.75 in)</li>
	 * </ul>
	 * @return array containing page width and height in points
	 * @public
	 * @since 5.0.010 (2010-05-17)
	 */",
 "/**
	 * Change the format of the current page
	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() documentation or an array of two numners (width, height) or an array containing the following measures and options:<ul>
	 * <li>[\\'format\\'] = page format name (one of the above);</li>
	 * <li>[\\'Rotate\\'] : The number of degrees by which the page shall be rotated clockwise when displayed or printed. The value shall be a multiple of 90.</li>
	 * <li>[\\'PZ\\'] : The page\\'s preferred zoom (magnification) factor.</li>
	 * <li>[\\'MediaBox\\'] : the boundaries of the physical medium on which the page shall be displayed or printed:</li>
	 * <li>[\\'MediaBox\\'][\\'llx\\'] : lower-left x coordinate in points</li>
	 * <li>[\\'MediaBox\\'][\\'lly\\'] : lower-left y coordinate in points</li>
	 * <li>[\\'MediaBox\\'][\\'urx\\'] : upper-right x coordinate in points</li>
	 * <li>[\\'MediaBox\\'][\\'ury\\'] : upper-right y coordinate in points</li>
	 * <li>[\\'CropBox\\'] : the visible region of default user space:</li>
	 * <li>[\\'CropBox\\'][\\'llx\\'] : lower-left x coordinate in points</li>
	 * <li>[\\'CropBox\\'][\\'lly\\'] : lower-left y coordinate in points</li>
	 * <li>[\\'CropBox\\'][\\'urx\\'] : upper-right x coordinate in points</li>
	 * <li>[\\'CropBox\\'][\\'ury\\'] : upper-right y coordinate in points</li>
	 * <li>[\\'BleedBox\\'] : the region to which the contents of the page shall be clipped when output in a production environment:</li>
	 * <li>[\\'BleedBox\\'][\\'llx\\'] : lower-left x coordinate in points</li>
	 * <li>[\\'BleedBox\\'][\\'lly\\'] : lower-left y coordinate in points</li>
	 * <li>[\\'BleedBox\\'][\\'urx\\'] : upper-right x coordinate in points</li>
	 * <li>[\\'BleedBox\\'][\\'ury\\'] : upper-right y coordinate in points</li>
	 * <li>[\\'TrimBox\\'] : the intended dimensions of the finished page after trimming:</li>
	 * <li>[\\'TrimBox\\'][\\'llx\\'] : lower-left x coordinate in points</li>
	 * <li>[\\'TrimBox\\'][\\'lly\\'] : lower-left y coordinate in points</li>
	 * <li>[\\'TrimBox\\'][\\'urx\\'] : upper-right x coordinate in points</li>
	 * <li>[\\'TrimBox\\'][\\'ury\\'] : upper-right y coordinate in points</li>
	 * <li>[\\'ArtBox\\'] : the extent of the page\\'s meaningful content:</li>
	 * <li>[\\'ArtBox\\'][\\'llx\\'] : lower-left x coordinate in points</li>
	 * <li>[\\'ArtBox\\'][\\'lly\\'] : lower-left y coordinate in points</li>
	 * <li>[\\'ArtBox\\'][\\'urx\\'] : upper-right x coordinate in points</li>
	 * <li>[\\'ArtBox\\'][\\'ury\\'] : upper-right y coordinate in points</li>
	 * <li>[\\'BoxColorInfo\\'] :specify the colours and other visual characteristics that should be used in displaying guidelines on the screen for each of the possible page boundaries other than the MediaBox:</li>
	 * <li>[\\'BoxColorInfo\\'][BOXTYPE][\\'C\\'] : an array of three numbers in the range 0-255, representing the components in the DeviceRGB colour space.</li>
	 * <li>[\\'BoxColorInfo\\'][BOXTYPE][\\'W\\'] : the guideline width in default user units</li>
	 * <li>[\\'BoxColorInfo\\'][BOXTYPE][\\'S\\'] : the guideline style: S = Solid; D = Dashed</li>
	 * <li>[\\'BoxColorInfo\\'][BOXTYPE][\\'D\\'] : dash array defining a pattern of dashes and gaps to be used in drawing dashed guidelines</li>
	 * <li>[\\'trans\\'] : the style and duration of the visual transition to use when moving from another page to the given page during a presentation</li>
	 * <li>[\\'trans\\'][\\'Dur\\'] : The page\\'s display duration (also called its advance timing): the maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page.</li>
	 * <li>[\\'trans\\'][\\'S\\'] : transition style : Split, Blinds, Box, Wipe, Dissolve, Glitter, R, Fly, Push, Cover, Uncover, Fade</li>
	 * <li>[\\'trans\\'][\\'D\\'] : The duration of the transition effect, in seconds.</li>
	 * <li>[\\'trans\\'][\\'Dm\\'] : (Split and Blinds transition styles only) The dimension in which the specified transition effect shall occur: H = Horizontal, V = Vertical. Default value: H.</li>
	 * <li>[\\'trans\\'][\\'M\\'] : (Split, Box and Fly transition styles only) The direction of motion for the specified transition effect: I = Inward from the edges of the page, O = Outward from the center of the pageDefault value: I.</li>
	 * <li>[\\'trans\\'][\\'Di\\'] : (Wipe, Glitter, Fly, Cover, Uncover and Push transition styles only) The direction in which the specified transition effect shall moves, expressed in degrees counterclockwise starting from a left-to-right direction. If the value is a number, it shall be one of: 0 = Left to right, 90 = Bottom to top (Wipe only), 180 = Right to left (Wipe only), 270 = Top to bottom, 315 = Top-left to bottom-right (Glitter only). If the value is a name, it shall be None, which is relevant only for the Fly transition when the value of SS is not 1.0. Default value: 0.</li>
	 * <li>[\\'trans\\'][\\'SS\\'] : (Fly transition style only) The starting or ending scale at which the changes shall be drawn. If M specifies an inward transition, the scale of the changes drawn shall progress from SS to 1.0 over the course of the transition. If M specifies an outward transition, the scale of the changes drawn shall progress from 1.0 to SS over the course of the transition. Default: 1.0.</li>
	 * <li>[\\'trans\\'][\\'B\\'] : (Fly transition style only) If true, the area that shall be flown in is rectangular and opaque. Default: false.</li>
	 * </ul>
	 * @param $orientation (string) page orientation. Possible values are (case insensitive):<ul>
	 * <li>P or Portrait (default)</li>
	 * <li>L or Landscape</li>
	 * <li>\\'\\' (empty string) for automatic orientation</li>
	 * </ul>
	 * @protected
	 * @since 3.0.015 (2008-06-06)
	 * @see getPageSizeFromFormat()
	 */",
 "/**
	 * Set page boundaries.
	 * @param $page (int) page number
	 * @param $type (string) valid values are: <ul><li>\\'MediaBox\\' : the boundaries of the physical medium on which the page shall be displayed or printed;</li><li>\\'CropBox\\' : the visible region of default user space;</li><li>\\'BleedBox\\' : the region to which the contents of the page shall be clipped when output in a production environment;</li><li>\\'TrimBox\\' : the intended dimensions of the finished page after trimming;</li><li>\\'ArtBox\\' : the page\\'s meaningful content (including potential white space).</li></ul>
	 * @param $llx (float) lower-left x coordinate in user units
	 * @param $lly (float) lower-left y coordinate in user units
	 * @param $urx (float) upper-right x coordinate in user units
	 * @param $ury (float) upper-right y coordinate in user units
	 * @param $points (boolean) if true uses user units as unit of measure, otherwise uses PDF points
	 * @public
	 * @since 5.0.010 (2010-05-17)
	 */",
 "/**
	 * Swap X and Y coordinates of page boxes (change page boxes orientation).
	 * @param $page (int) page number
	 * @protected
	 * @since 5.0.010 (2010-05-17)
	 */",
 "/**
	 * Set page orientation.
	 * @param $orientation (string) page orientation. Possible values are (case insensitive):<ul><li>P or Portrait (default)</li><li>L or Landscape</li><li>\\'\\' (empty string) for automatic orientation</li></ul>
	 * @param $autopagebreak (boolean) Boolean indicating if auto-page-break mode should be on or off.
	 * @param $bottommargin (float) bottom margin of the page.
	 * @public
	 * @since 3.0.015 (2008-06-06)
	 */",
 "/**
	 * Set regular expression to detect withespaces or word separators.
	 * The pattern delimiter must be the forward-slash character \"/\".
	 * Some example patterns are:
	 * <pre>
	 * Non-Unicode or missing PCRE unicode support: \"/[^\S\xa0]/\"
	 * Unicode and PCRE unicode support: \"/[^\S\P{Z}\xa0]/u\"
	 * Unicode and PCRE unicode support in Chinese mode: \"/[^\S\P{Z}\P{Lo}\xa0]/u\"
	 * if PCRE unicode support is turned ON (\"\P\" is the negate class of \"\p\"):
	 * \"\p{Z}\" or \"\p{Separator}\": any kind of Unicode whitespace or invisible separator.
	 * \"\p{Lo}\" or \"\p{Other_Letter}\": a Unicode letter or ideograph that does not have lowercase and uppercase variants.
	 * \"\p{Lo}\" is needed for Chinese characters because are packed next to each other without spaces in between.
	 * </pre>
	 * @param $re (string) regular expression (leave empty for default).
	 * @public
	 * @since 4.6.016 (2009-06-15)
	 */",
 "/**
	 * Enable or disable Right-To-Left language mode
	 * @param $enable (Boolean) if true enable Right-To-Left language mode.
	 * @param $resetx (Boolean) if true reset the X position on direction change.
	 * @public
	 * @since 2.0.000 (2008-01-03)
	 */",
 "/**
	 * Return the RTL status
	 * @return boolean
	 * @public
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * Force temporary RTL language direction
	 * @param $mode (mixed) can be false, \\'L\\' for LTR or \\'R\\' for RTL
	 * @public
	 * @since 2.1.000 (2008-01-09)
	 */",
 "/**
	 * Return the current temporary RTL status
	 * @return boolean
	 * @public
	 * @since 4.8.014 (2009-11-04)
	 */",
 "/**
	 * Set the last cell height.
	 * @param $h (float) cell height.
	 * @author Nicola Asuni
	 * @public
	 * @since 1.53.0.TC034
	 */",
 "/**
	 * Reset the last cell height.
	 * @public
	 * @since 5.9.000 (2010-10-03)
	 */",
 "/**
	 * Get the last cell height.
	 * @return last cell height
	 * @public
	 * @since 4.0.017 (2008-08-05)
	 */",
 "/**
	 * Set the adjusting factor to convert pixels to user units.
	 * @param $scale (float) adjusting factor to convert pixels to user units.
	 * @author Nicola Asuni
	 * @public
	 * @since 1.5.2
	 */",
 "/**
	 * Returns the adjusting factor to convert pixels to user units.
	 * @return float adjusting factor to convert pixels to user units.
	 * @author Nicola Asuni
	 * @public
	 * @since 1.5.2
	 */",
 "/**
	 * Returns an array of page dimensions:
	 * <ul><li>$this->pagedim[$this->page][\\'w\\'] = page width in points</li><li>$this->pagedim[$this->page][\\'h\\'] = height in points</li><li>$this->pagedim[$this->page][\\'wk\\'] = page width in user units</li><li>$this->pagedim[$this->page][\\'hk\\'] = page height in user units</li><li>$this->pagedim[$this->page][\\'tm\\'] = top margin</li><li>$this->pagedim[$this->page][\\'bm\\'] = bottom margin</li><li>$this->pagedim[$this->page][\\'lm\\'] = left margin</li><li>$this->pagedim[$this->page][\\'rm\\'] = right margin</li><li>$this->pagedim[$this->page][\\'pb\\'] = auto page break</li><li>$this->pagedim[$this->page][\\'or\\'] = page orientation</li><li>$this->pagedim[$this->page][\\'olm\\'] = original left margin</li><li>$this->pagedim[$this->page][\\'orm\\'] = original right margin</li><li>$this->pagedim[$this->page][\\'Rotate\\'] = The number of degrees by which the page shall be rotated clockwise when displayed or printed. The value shall be a multiple of 90.</li><li>$this->pagedim[$this->page][\\'PZ\\'] = The page\\'s preferred zoom (magnification) factor.</li><li>$this->pagedim[$this->page][\\'trans\\'] : the style and duration of the visual transition to use when moving from another page to the given page during a presentation<ul><li>$this->pagedim[$this->page][\\'trans\\'][\\'Dur\\'] = The page\\'s display duration (also called its advance timing): the maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page.</li><li>$this->pagedim[$this->page][\\'trans\\'][\\'S\\'] = transition style : Split, Blinds, Box, Wipe, Dissolve, Glitter, R, Fly, Push, Cover, Uncover, Fade</li><li>$this->pagedim[$this->page][\\'trans\\'][\\'D\\'] = The duration of the transition effect, in seconds.</li><li>$this->pagedim[$this->page][\\'trans\\'][\\'Dm\\'] = (Split and Blinds transition styles only) The dimension in which the specified transition effect shall occur: H = Horizontal, V = Vertical. Default value: H.</li><li>$this->pagedim[$this->page][\\'trans\\'][\\'M\\'] = (Split, Box and Fly transition styles only) The direction of motion for the specified transition effect: I = Inward from the edges of the page, O = Outward from the center of the pageDefault value: I.</li><li>$this->pagedim[$this->page][\\'trans\\'][\\'Di\\'] = (Wipe, Glitter, Fly, Cover, Uncover and Push transition styles only) The direction in which the specified transition effect shall moves, expressed in degrees counterclockwise starting from a left-to-right direction. If the value is a number, it shall be one of: 0 = Left to right, 90 = Bottom to top (Wipe only), 180 = Right to left (Wipe only), 270 = Top to bottom, 315 = Top-left to bottom-right (Glitter only). If the value is a name, it shall be None, which is relevant only for the Fly transition when the value of SS is not 1.0. Default value: 0.</li><li>$this->pagedim[$this->page][\\'trans\\'][\\'SS\\'] = (Fly transition style only) The starting or ending scale at which the changes shall be drawn. If M specifies an inward transition, the scale of the changes drawn shall progress from SS to 1.0 over the course of the transition. If M specifies an outward transition, the scale of the changes drawn shall progress from 1.0 to SS over the course of the transition. Default: 1.0. </li><li>$this->pagedim[$this->page][\\'trans\\'][\\'B\\'] = (Fly transition style only) If true, the area that shall be flown in is rectangular and opaque. Default: false.</li></ul></li><li>$this->pagedim[$this->page][\\'MediaBox\\'] : the boundaries of the physical medium on which the page shall be displayed or printed<ul><li>$this->pagedim[$this->page][\\'MediaBox\\'][\\'llx\\'] = lower-left x coordinate in points</li><li>$this->pagedim[$this->page][\\'MediaBox\\'][\\'lly\\'] = lower-left y coordinate in points</li><li>$this->pagedim[$this->page][\\'MediaBox\\'][\\'urx\\'] = upper-right x coordinate in points</li><li>$this->pagedim[$this->page][\\'MediaBox\\'][\\'ury\\'] = upper-right y coordinate in points</li></ul></li><li>$this->pagedim[$this->page][\\'CropBox\\'] : the visible region of default user space<ul><li>$this->pagedim[$this->page][\\'CropBox\\'][\\'llx\\'] = lower-left x coordinate in points</li><li>$this->pagedim[$this->page][\\'CropBox\\'][\\'lly\\'] = lower-left y coordinate in points</li><li>$this->pagedim[$this->page][\\'CropBox\\'][\\'urx\\'] = upper-right x coordinate in points</li><li>$this->pagedim[$this->page][\\'CropBox\\'][\\'ury\\'] = upper-right y coordinate in points</li></ul></li><li>$this->pagedim[$this->page][\\'BleedBox\\'] : the region to which the contents of the page shall be clipped when output in a production environment<ul><li>$this->pagedim[$this->page][\\'BleedBox\\'][\\'llx\\'] = lower-left x coordinate in points</li><li>$this->pagedim[$this->page][\\'BleedBox\\'][\\'lly\\'] = lower-left y coordinate in points</li><li>$this->pagedim[$this->page][\\'BleedBox\\'][\\'urx\\'] = upper-right x coordinate in points</li><li>$this->pagedim[$this->page][\\'BleedBox\\'][\\'ury\\'] = upper-right y coordinate in points</li></ul></li><li>$this->pagedim[$this->page][\\'TrimBox\\'] : the intended dimensions of the finished page after trimming<ul><li>$this->pagedim[$this->page][\\'TrimBox\\'][\\'llx\\'] = lower-left x coordinate in points</li><li>$this->pagedim[$this->page][\\'TrimBox\\'][\\'lly\\'] = lower-left y coordinate in points</li><li>$this->pagedim[$this->page][\\'TrimBox\\'][\\'urx\\'] = upper-right x coordinate in points</li><li>$this->pagedim[$this->page][\\'TrimBox\\'][\\'ury\\'] = upper-right y coordinate in points</li></ul></li><li>$this->pagedim[$this->page][\\'ArtBox\\'] : the extent of the page\\'s meaningful content<ul><li>$this->pagedim[$this->page][\\'ArtBox\\'][\\'llx\\'] = lower-left x coordinate in points</li><li>$this->pagedim[$this->page][\\'ArtBox\\'][\\'lly\\'] = lower-left y coordinate in points</li><li>$this->pagedim[$this->page][\\'ArtBox\\'][\\'urx\\'] = upper-right x coordinate in points</li><li>$this->pagedim[$this->page][\\'ArtBox\\'][\\'ury\\'] = upper-right y coordinate in points</li></ul></li></ul>
	 * @param $pagenum (int) page number (empty = current page)
	 * @return array of page dimensions.
	 * @author Nicola Asuni
	 * @public
	 * @since 4.5.027 (2009-03-16)
	 */",
 "/**
	 * Returns the page width in units.
	 * @param $pagenum (int) page number (empty = current page)
	 * @return int page width.
	 * @author Nicola Asuni
	 * @public
	 * @since 1.5.2
	 * @see getPageDimensions()
	 */",
 "/**
	 * Returns the page height in units.
	 * @param $pagenum (int) page number (empty = current page)
	 * @return int page height.
	 * @author Nicola Asuni
	 * @public
	 * @since 1.5.2
	 * @see getPageDimensions()
	 */",
 "/**
	 * Returns the page break margin.
	 * @param $pagenum (int) page number (empty = current page)
	 * @return int page break margin.
	 * @author Nicola Asuni
	 * @public
	 * @since 1.5.2
	 * @see getPageDimensions()
	 */",
 "/**
	 * Returns the scale factor (number of points in user unit).
	 * @return int scale factor.
	 * @author Nicola Asuni
	 * @public
	 * @since 1.5.2
	 */",
 "/**
	 * Defines the left, top and right margins.
	 * @param $left (float) Left margin.
	 * @param $top (float) Top margin.
	 * @param $right (float) Right margin. Default value is the left one.
	 * @param $keepmargins (boolean) if true overwrites the default page margins
	 * @public
	 * @since 1.0
	 * @see SetLeftMargin(), SetTopMargin(), SetRightMargin(), SetAutoPageBreak()
	 */",
 "/**
	 * Defines the left margin. The method can be called before creating the first page. If the current abscissa gets out of page, it is brought back to the margin.
	 * @param $margin (float) The margin.
	 * @public
	 * @since 1.4
	 * @see SetTopMargin(), SetRightMargin(), SetAutoPageBreak(), SetMargins()
	 */",
 "/**
	 * Defines the top margin. The method can be called before creating the first page.
	 * @param $margin (float) The margin.
	 * @public
	 * @since 1.5
	 * @see SetLeftMargin(), SetRightMargin(), SetAutoPageBreak(), SetMargins()
	 */",
 "/**
	 * Defines the right margin. The method can be called before creating the first page.
	 * @param $margin (float) The margin.
	 * @public
	 * @since 1.5
	 * @see SetLeftMargin(), SetTopMargin(), SetAutoPageBreak(), SetMargins()
	 */",
 "/**
	 * Set the same internal Cell padding for top, right, bottom, left-
	 * @param $pad (float) internal padding.
	 * @public
	 * @since 2.1.000 (2008-01-09)
	 * @see getCellPaddings(), setCellPaddings()
	 */",
 "/**
	 * Set the internal Cell paddings.
	 * @param $left (float) left padding
	 * @param $top (float) top padding
	 * @param $right (float) right padding
	 * @param $bottom (float) bottom padding
	 * @public
	 * @since 5.9.000 (2010-10-03)
	 * @see getCellPaddings(), SetCellPadding()
	 */",
 "/**
	 * Get the internal Cell padding array.
	 * @return array of padding values
	 * @public
	 * @since 5.9.000 (2010-10-03)
	 * @see setCellPaddings(), SetCellPadding()
	 */",
 "/**
	 * Set the internal Cell margins.
	 * @param $left (float) left margin
	 * @param $top (float) top margin
	 * @param $right (float) right margin
	 * @param $bottom (float) bottom margin
	 * @public
	 * @since 5.9.000 (2010-10-03)
	 * @see getCellMargins()
	 */",
 "/**
	 * Get the internal Cell margin array.
	 * @return array of margin values
	 * @public
	 * @since 5.9.000 (2010-10-03)
	 * @see setCellMargins()
	 */",
 "/**
	 * Adjust the internal Cell padding array to take account of the line width.
	 * @param $brd (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @return array of adjustments
	 * @public
	 * @since 5.9.000 (2010-10-03)
	 */",
 "/**
	 * Enables or disables the automatic page breaking mode. When enabling, the second parameter is the distance from the bottom of the page that defines the triggering limit. By default, the mode is on and the margin is 2 cm.
	 * @param $auto (boolean) Boolean indicating if mode should be on or off.
	 * @param $margin (float) Distance from the bottom of the page.
	 * @public
	 * @since 1.0
	 * @see Cell(), MultiCell(), AcceptPageBreak()
	 */",
 "/**
	 * Return the auto-page-break mode (true or false).
	 * @return boolean auto-page-break mode
	 * @public
	 * @since 5.9.088
	 */",
 "/**
	 * Defines the way the document is to be displayed by the viewer.
	 * @param $zoom (mixed) The zoom to use. It can be one of the following string values or a number indicating the zooming factor to use. <ul><li>fullpage: displays the entire page on screen </li><li>fullwidth: uses maximum width of window</li><li>real: uses real size (equivalent to 100% zoom)</li><li>default: uses viewer default mode</li></ul>
	 * @param $layout (string) The page layout. Possible values are:<ul><li>SinglePage Display one page at a time</li><li>OneColumn Display the pages in one column</li><li>TwoColumnLeft Display the pages in two columns, with odd-numbered pages on the left</li><li>TwoColumnRight Display the pages in two columns, with odd-numbered pages on the right</li><li>TwoPageLeft (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left</li><li>TwoPageRight (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right</li></ul>
	 * @param $mode (string) A name object specifying how the document should be displayed when opened:<ul><li>UseNone Neither document outline nor thumbnail images visible</li><li>UseOutlines Document outline visible</li><li>UseThumbs Thumbnail images visible</li><li>FullScreen Full-screen mode, with no menu bar, window controls, or any other window visible</li><li>UseOC (PDF 1.5) Optional content group panel visible</li><li>UseAttachments (PDF 1.6) Attachments panel visible</li></ul>
	 * @public
	 * @since 1.2
	 */",
 "/**
	 * Activates or deactivates page compression. When activated, the internal representation of each page is compressed, which leads to a compression ratio of about 2 for the resulting document. Compression is on by default.
	 * Note: the Zlib extension is required for this feature. If not present, compression will be turned off.
	 * @param $compress (boolean) Boolean indicating if compression must be enabled.
	 * @public
	 * @since 1.4
	 */",
 "/**
	 * Set flag to force sRGB_IEC61966-2.1 black scaled ICC color profile for the whole document.
	 * @param $mode (boolean) If true force sRGB output intent.
	 * @public
	 * @since 5.9.121 (2011-09-28)
	 */",
 "/**
	 * Turn on/off Unicode mode for document information dictionary (meta tags).
	 * This has effect only when unicode mode is set to false.
	 * @param $unicode (boolean) if true set the meta information in Unicode
	 * @since 5.9.027 (2010-12-01)
	 * @public
	 */",
 "/**
	 * Defines the title of the document.
	 * @param $title (string) The title.
	 * @public
	 * @since 1.2
	 * @see SetAuthor(), SetCreator(), SetKeywords(), SetSubject()
	 */",
 "/**
	 * Defines the subject of the document.
	 * @param $subject (string) The subject.
	 * @public
	 * @since 1.2
	 * @see SetAuthor(), SetCreator(), SetKeywords(), SetTitle()
	 */",
 "/**
	 * Defines the author of the document.
	 * @param $author (string) The name of the author.
	 * @public
	 * @since 1.2
	 * @see SetCreator(), SetKeywords(), SetSubject(), SetTitle()
	 */",
 "/**
	 * Associates keywords with the document, generally in the form \\'keyword1 keyword2 ...\\'.
	 * @param $keywords (string) The list of keywords.
	 * @public
	 * @since 1.2
	 * @see SetAuthor(), SetCreator(), SetSubject(), SetTitle()
	 */",
 "/**
	 * Defines the creator of the document. This is typically the name of the application that generates the PDF.
	 * @param $creator (string) The name of the creator.
	 * @public
	 * @since 1.2
	 * @see SetAuthor(), SetKeywords(), SetSubject(), SetTitle()
	 */",
 "/**
	 * This method is automatically called in case of fatal error; it simply outputs the message and halts the execution. An inherited class may override it to customize the error handling but should always halt the script, or the resulting document would probably be invalid.
	 * 2004-06-11 :: Nicola Asuni : changed bold tag with strong
	 * @param $msg (string) The error message
	 * @public
	 * @since 1.0
	 */",
 "/**
	 * This method begins the generation of the PDF document.
	 * It is not necessary to call it explicitly because AddPage() does it automatically.
	 * Note: no page is created by this method
	 * @public
	 * @since 1.0
	 * @see AddPage(), Close()
	 */",
 "/**
	 * Terminates the PDF document.
	 * It is not necessary to call this method explicitly because Output() does it automatically.
	 * If the document contains no page, AddPage() is called to prevent from getting an invalid document.
	 * @public
	 * @since 1.0
	 * @see Open(), Output()
	 */",
 "/**
	 * Move pointer at the specified document page and update page dimensions.
	 * @param $pnum (int) page number (1 ... numpages)
	 * @param $resetmargins (boolean) if true reset left, right, top margins and Y position.
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see getPage(), lastpage(), getNumPages()
	 */",
 "/**
	 * Reset pointer to the last document page.
	 * @param $resetmargins (boolean) if true reset left, right, top margins and Y position.
	 * @public
	 * @since 2.0.000 (2008-01-04)
	 * @see setPage(), getPage(), getNumPages()
	 */",
 "/**
	 * Get current document page number.
	 * @return int page number
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see setPage(), lastpage(), getNumPages()
	 */",
 "/**
	 * Get the total number of insered pages.
	 * @return int number of pages
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see setPage(), getPage(), lastpage()
	 */",
 "/**
	 * Adds a new TOC (Table Of Content) page to the document.
	 * @param $orientation (string) page orientation.
	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
	 * @param $keepmargins (boolean) if true overwrites the default page margins with the current margins
	 * @public
	 * @since 5.0.001 (2010-05-06)
	 * @see AddPage(), startPage(), endPage(), endTOCPage()
	 */",
 "/**
	 * Terminate the current TOC (Table Of Content) page
	 * @public
	 * @since 5.0.001 (2010-05-06)
	 * @see AddPage(), startPage(), endPage(), addTOCPage()
	 */",
 "/**
	 * Adds a new page to the document. If a page is already present, the Footer() method is called first to output the footer (if enabled). Then the page is added, the current position set to the top-left corner according to the left and top margins (or top-right if in RTL mode), and Header() is called to display the header (if enabled).
	 * The origin of the coordinate system is at the top-left corner (or top-right for RTL) and increasing ordinates go downwards.
	 * @param $orientation (string) page orientation. Possible values are (case insensitive):<ul><li>P or PORTRAIT (default)</li><li>L or LANDSCAPE</li></ul>
	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
	 * @param $keepmargins (boolean) if true overwrites the default page margins with the current margins
	 * @param $tocpage (boolean) if true set the tocpage state to true (the added page will be used to display Table Of Content).
	 * @public
	 * @since 1.0
	 * @see startPage(), endPage(), addTOCPage(), endTOCPage(), getPageSizeFromFormat(), setPageFormat()
	 */",
 "/**
	 * Terminate the current page
	 * @param $tocpage (boolean) if true set the tocpage state to false (end the page used to display Table Of Content).
	 * @public
	 * @since 4.2.010 (2008-11-14)
	 * @see AddPage(), startPage(), addTOCPage(), endTOCPage()
	 */",
 "/**
	 * Starts a new page to the document. The page must be closed using the endPage() function.
	 * The origin of the coordinate system is at the top-left corner and increasing ordinates go downwards.
	 * @param $orientation (string) page orientation. Possible values are (case insensitive):<ul><li>P or PORTRAIT (default)</li><li>L or LANDSCAPE</li></ul>
	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
	 * @param $tocpage (boolean) if true the page is designated to contain the Table-Of-Content.
	 * @since 4.2.010 (2008-11-14)
	 * @see AddPage(), endPage(), addTOCPage(), endTOCPage(), getPageSizeFromFormat(), setPageFormat()
	 * @public
	 */",
 "/**
	 * Set start-writing mark on current page stream used to put borders and fills.
	 * Borders and fills are always created after content and inserted on the position marked by this method.
	 * This function must be called after calling Image() function for a background image.
	 * Background images must be always inserted before calling Multicell() or WriteHTMLCell() or WriteHTML() functions.
	 * @public
	 * @since 4.0.016 (2008-07-30)
	 */",
 "/**
	 * Set start-writing mark on selected page.
	 * Borders and fills are always created after content and inserted on the position marked by this method.
	 * @param $page (int) page number (default is the current page)
	 * @protected
	 * @since 4.6.021 (2009-07-20)
	 */",
 "/**
	 * Set header data.
	 * @param $ln (string) header image logo
	 * @param $lw (string) header image logo width in mm
	 * @param $ht (string) string to print as title on document header
	 * @param $hs (string) string to print on document header
	 * @public
	 */",
 "/**
	 * Returns header data:
	 * <ul><li>$ret[\\'logo\\'] = logo image</li><li>$ret[\\'logo_width\\'] = width of the image logo in user units</li><li>$ret[\\'title\\'] = header title</li><li>$ret[\\'string\\'] = header description string</li></ul>
	 * @return array()
	 * @public
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * Set header margin.
	 * (minimum distance between header and top page margin)
	 * @param $hm (int) distance in user units
	 * @public
	 */",
 "/**
	 * Returns header margin in user units.
	 * @return float
	 * @since 4.0.012 (2008-07-24)
	 * @public
	 */",
 "/**
	 * Set footer margin.
	 * (minimum distance between footer and bottom page margin)
	 * @param $fm (int) distance in user units
	 * @public
	 */",
 "/**
	 * Returns footer margin in user units.
	 * @return float
	 * @since 4.0.012 (2008-07-24)
	 * @public
	 */",
 "/**
	 * Set a flag to print page header.
	 * @param $val (boolean) set to true to print the page header (default), false otherwise.
	 * @public
	 */",
 "/**
	 * Set a flag to print page footer.
	 * @param $val (boolean) set to true to print the page footer (default), false otherwise.
	 * @public
	 */",
 "/**
	 * Return the right-bottom (or left-bottom for RTL) corner X coordinate of last inserted image
	 * @return float
	 * @public
	 */",
 "/**
	 * Return the right-bottom (or left-bottom for RTL) corner Y coordinate of last inserted image
	 * @return float
	 * @public
	 */",
 "/**
	 * Reset the xobject template used by Header() method.
	 * @public
	 */",
 "/**
	 * Set a flag to automatically reset the xobject template used by Header() method at each page.
	 * @param $val (boolean) set to true to reset Header xobject template at each page, false otherwise.
	 * @public
	 */",
 "/**
	 * This method is used to render the page header.
	 * It is automatically called by AddPage() and could be overwritten in your own inherited class.
	 * @public
	 */",
 "/**
	 * This method is used to render the page footer.
	 * It is automatically called by AddPage() and could be overwritten in your own inherited class.
	 * @public
	 */",
 "/**
	 * This method is used to render the page header.
	 * @protected
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * This method is used to render the page footer.
	 * @protected
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * Check if we are on the page body (excluding page header and footer).
	 * @return true if we are not in page header nor in page footer, false otherwise.
	 * @protected
	 * @since 5.9.091 (2011-06-15)
	 */",
 "/**
	 * This method is used to render the table header on new page (if any).
	 * @protected
	 * @since 4.5.030 (2009-03-25)
	 */",
 "/**
	 * Returns the current page number.
	 * @return int page number
	 * @public
	 * @since 1.0
	 * @see getAliasNbPages()
	 */",
 "/**
	 * Defines a new spot color.
	 * It can be expressed in RGB components or gray scale.
	 * The method can be called before the first page is created and the value is retained from page to page.
	 * @param $name (string) Full name of the spot color.
	 * @param $c (float) Cyan color for CMYK. Value between 0 and 100.
	 * @param $m (float) Magenta color for CMYK. Value between 0 and 100.
	 * @param $y (float) Yellow color for CMYK. Value between 0 and 100.
	 * @param $k (float) Key (Black) color for CMYK. Value between 0 and 100.
	 * @public
	 * @since 4.0.024 (2008-09-12)
	 * @see SetDrawSpotColor(), SetFillSpotColor(), SetTextSpotColor()
	 */",
 "/**
	 * Return the Spot color array.
	 * @param $name (string) Name of the spot color.
	 * @return (array) Spot color array or false if not defined.
	 * @public
	 * @since 5.9.125 (2011-10-03)
	 */",
 "/**
	 * Set the spot color for the specified type (\\'draw\\', \\'fill\\', \\'text\\').
	 * @param $type (string) Type of object affected by this color: (\\'draw\\', \\'fill\\', \\'text\\').
	 * @param $name (string) Name of the spot color.
	 * @param $tint (float) Intensity of the color (from 0 to 100 ; 100 = full intensity by default).
	 * @return (string) PDF color command.
	 * @public
	 * @since 5.9.125 (2011-10-03)
	 */",
 "/**
	 * Defines the spot color used for all drawing operations (lines, rectangles and cell borders).
	 * @param $name (string) Name of the spot color.
	 * @param $tint (float) Intensity of the color (from 0 to 100 ; 100 = full intensity by default).
	 * @public
	 * @since 4.0.024 (2008-09-12)
	 * @see AddSpotColor(), SetFillSpotColor(), SetTextSpotColor()
	 */",
 "/**
	 * Defines the spot color used for all filling operations (filled rectangles and cell backgrounds).
	 * @param $name (string) Name of the spot color.
	 * @param $tint (float) Intensity of the color (from 0 to 100 ; 100 = full intensity by default).
	 * @public
	 * @since 4.0.024 (2008-09-12)
	 * @see AddSpotColor(), SetDrawSpotColor(), SetTextSpotColor()
	 */",
 "/**
	 * Defines the spot color used for text.
	 * @param $name (string) Name of the spot color.
	 * @param $tint (int) Intensity of the color (from 0 to 100 ; 100 = full intensity by default).
	 * @public
	 * @since 4.0.024 (2008-09-12)
	 * @see AddSpotColor(), SetDrawSpotColor(), SetFillSpotColor()
	 */",
 "/**
	 * Set the color array for the specified type (\\'draw\\', \\'fill\\', \\'text\\').
	 * It can be expressed in RGB, CMYK or GRAY SCALE components.
	 * The method can be called before the first page is created and the value is retained from page to page.
	 * @param $type (string) Type of object affected by this color: (\\'draw\\', \\'fill\\', \\'text\\').
	 * @param $color (array) Array of colors (1=gray, 3=RGB, 4=CMYK or 5=spotcolor=CMYK+name values).
	 * @param $ret (boolean) If true do not send the PDF command.
	 * @return (string) The PDF command or empty string.
	 * @public
	 * @since 3.1.000 (2008-06-11)
	 */",
 "/**
	 * Defines the color used for all drawing operations (lines, rectangles and cell borders).
	 * It can be expressed in RGB, CMYK or GRAY SCALE components.
	 * The method can be called before the first page is created and the value is retained from page to page.
	 * @param $color (array) Array of colors (1, 3 or 4 values).
	 * @param $ret (boolean) If true do not send the PDF command.
	 * @return string the PDF command
	 * @public
	 * @since 3.1.000 (2008-06-11)
	 * @see SetDrawColor()
	 */",
 "/**
	 * Defines the color used for all filling operations (filled rectangles and cell backgrounds).
	 * It can be expressed in RGB, CMYK or GRAY SCALE components.
	 * The method can be called before the first page is created and the value is retained from page to page.
	 * @param $color (array) Array of colors (1, 3 or 4 values).
	 * @param $ret (boolean) If true do not send the PDF command.
	 * @public
	 * @since 3.1.000 (2008-6-11)
	 * @see SetFillColor()
	 */",
 "/**
	 * Defines the color used for text. It can be expressed in RGB components or gray scale.
	 * The method can be called before the first page is created and the value is retained from page to page.
	 * @param $color (array) Array of colors (1, 3 or 4 values).
	 * @param $ret (boolean) If true do not send the PDF command.
	 * @public
	 * @since 3.1.000 (2008-6-11)
	 * @see SetFillColor()
	 */",
 "/**
	 * Defines the color used by the specified type (\\'draw\\', \\'fill\\', \\'text\\').
	 * @param $type (string) Type of object affected by this color: (\\'draw\\', \\'fill\\', \\'text\\').
	 * @param $col1 (float) GRAY level for single color, or Red color for RGB (0-255), or CYAN color for CMYK (0-100).
	 * @param $col2 (float) GREEN color for RGB (0-255), or MAGENTA color for CMYK (0-100).
	 * @param $col3 (float) BLUE color for RGB (0-255), or YELLOW color for CMYK (0-100).
	 * @param $col4 (float) KEY (BLACK) color for CMYK (0-100).
	 * @param $ret (boolean) If true do not send the command.
	 * @param $name (string) spot color name (if any)
	 * @return (string) The PDF command or empty string.
	 * @public
	 * @since 5.9.125 (2011-10-03)
	 */",
 "/**
	 * Convert a color array into a string representation.
	 * @param $c (array) Array of colors.
	 * @return (string) The color array representation.
	 * @protected
	 * @since 5.9.137 (2011-12-01)
	 */",
 "/**
	 * Defines the color used for all drawing operations (lines, rectangles and cell borders). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.
	 * @param $col1 (float) GRAY level for single color, or Red color for RGB (0-255), or CYAN color for CMYK (0-100).
	 * @param $col2 (float) GREEN color for RGB (0-255), or MAGENTA color for CMYK (0-100).
	 * @param $col3 (float) BLUE color for RGB (0-255), or YELLOW color for CMYK (0-100).
	 * @param $col4 (float) KEY (BLACK) color for CMYK (0-100).
	 * @param $ret (boolean) If true do not send the command.
	 * @param $name (string) spot color name (if any)
	 * @return string the PDF command
	 * @public
	 * @since 1.3
	 * @see SetDrawColorArray(), SetFillColor(), SetTextColor(), Line(), Rect(), Cell(), MultiCell()
	 */",
 "/**
	 * Defines the color used for all filling operations (filled rectangles and cell backgrounds). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.
	 * @param $col1 (float) GRAY level for single color, or Red color for RGB (0-255), or CYAN color for CMYK (0-100).
	 * @param $col2 (float) GREEN color for RGB (0-255), or MAGENTA color for CMYK (0-100).
	 * @param $col3 (float) BLUE color for RGB (0-255), or YELLOW color for CMYK (0-100).
	 * @param $col4 (float) KEY (BLACK) color for CMYK (0-100).
	 * @param $ret (boolean) If true do not send the command.
	 * @param $name (string) Spot color name (if any).
	 * @return (string) The PDF command.
	 * @public
	 * @since 1.3
	 * @see SetFillColorArray(), SetDrawColor(), SetTextColor(), Rect(), Cell(), MultiCell()
	 */",
 "/**
	 * Defines the color used for text. It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page.
	 * @param $col1 (float) GRAY level for single color, or Red color for RGB (0-255), or CYAN color for CMYK (0-100).
	 * @param $col2 (float) GREEN color for RGB (0-255), or MAGENTA color for CMYK (0-100).
	 * @param $col3 (float) BLUE color for RGB (0-255), or YELLOW color for CMYK (0-100).
	 * @param $col4 (float) KEY (BLACK) color for CMYK (0-100).
	 * @param $ret (boolean) If true do not send the command.
	 * @param $name (string) Spot color name (if any).
	 * @return (string) Empty string.
	 * @public
	 * @since 1.3
	 * @see SetTextColorArray(), SetDrawColor(), SetFillColor(), Text(), Cell(), MultiCell()
	 */",
 "/**
	 * Returns the length of a string in user unit. A font must be selected.<br>
	 * @param $s (string) The string whose length is to be computed
	 * @param $fontname (string) Family font. It can be either a name defined by AddFont() or one of the standard families. It is also possible to pass an empty string, in that case, the current family is retained.
	 * @param $fontstyle (string) Font style. Possible values are (case insensitive):<ul><li>empty string: regular</li><li>B: bold</li><li>I: italic</li><li>U: underline</li><li>D: line-trough</li><li>O: overline</li></ul> or any combination. The default value is regular.
	 * @param $fontsize (float) Font size in points. The default value is the current size.
	 * @param $getarray (boolean) if true returns an array of characters widths, if false returns the total length.
	 * @return mixed int total string length or array of characted widths
	 * @author Nicola Asuni
	 * @public
	 * @since 1.2
	 */",
 "/**
	 * Returns the string length of an array of chars in user unit or an array of characters widths. A font must be selected.<br>
	 * @param $sa (string) The array of chars whose total length is to be computed
	 * @param $fontname (string) Family font. It can be either a name defined by AddFont() or one of the standard families. It is also possible to pass an empty string, in that case, the current family is retained.
	 * @param $fontstyle (string) Font style. Possible values are (case insensitive):<ul><li>empty string: regular</li><li>B: bold</li><li>I: italic</li><li>U: underline</li><li>D: line trough</li><li>O: overline</li></ul> or any combination. The default value is regular.
	 * @param $fontsize (float) Font size in points. The default value is the current size.
	 * @param $getarray (boolean) if true returns an array of characters widths, if false returns the total length.
	 * @return mixed int total string length or array of characted widths
	 * @author Nicola Asuni
	 * @public
	 * @since 2.4.000 (2008-03-06)
	 */",
 "/**
	 * Returns the length of the char in user unit for the current font considering current stretching and spacing (tracking/kerning).
	 * @param $char (int) The char code whose length is to be returned
	 * @param $notlast (boolean) set to false for the latest character on string, true otherwise (default)
	 * @return float char width
	 * @author Nicola Asuni
	 * @public
	 * @since 2.4.000 (2008-03-06)
	 */",
 "/**
	 * Returns the length of the char in user unit for the current font.
	 * @param $char (int) The char code whose length is to be returned
	 * @return float char width
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.000 (2010-09-28)
	 */",
 "/**
	 * Returns the numbero of characters in a string.
	 * @param $s (string) The input string.
	 * @return int number of characters
	 * @public
	 * @since 2.0.0001 (2008-01-07)
	 */",
 "/**
	 * Fill the list of available fonts ($this->fontlist).
	 * @protected
	 * @since 4.0.013 (2008-07-28)
	 */",
 "/**
	 * Imports a TrueType, Type1, core, or CID0 font and makes it available.
	 * It is necessary to generate a font definition file first (read /fonts/utils/README.TXT).
	 * The definition file (and the font file itself when embedding) must be present either in the current directory or in the one indicated by K_PATH_FONTS if the constant is defined. If it could not be found, the error \"Could not include font definition file\" is generated.
	 * @param $family (string) Font family. The name can be chosen arbitrarily. If it is a standard family name, it will override the corresponding font.
	 * @param $style (string) Font style. Possible values are (case insensitive):<ul><li>empty string: regular (default)</li><li>B: bold</li><li>I: italic</li><li>BI or IB: bold italic</li></ul>
	 * @param $fontfile (string) The font definition file. By default, the name is built from the family and style, in lower case with no spaces.
	 * @return array containing the font data, or false in case of error.
	 * @param $subset (mixed) if true embedd only a subset of the font (stores only the information related to the used characters); if false embedd full font; if \\'default\\' uses the default value set using setFontSubsetting(). This option is valid only for TrueTypeUnicode fonts. If you want to enable users to change the document, set this parameter to false. If you subset the font, the person who receives your PDF would need to have your same font in order to make changes to your PDF. The file size of the PDF would also be smaller because you are embedding only part of a font.
	 * @public
	 * @since 1.5
	 * @see SetFont(), setFontSubsetting()
	 */",
 "/**
	 * Sets the font used to print character strings.
	 * The font can be either a standard one or a font added via the AddFont() method. Standard fonts use Windows encoding cp1252 (Western Europe).
	 * The method can be called before the first page is created and the font is retained from page to page.
	 * If you just wish to change the current font size, it is simpler to call SetFontSize().
	 * Note: for the standard fonts, the font metric files must be accessible. There are three possibilities for this:<ul><li>They are in the current directory (the one where the running script lies)</li><li>They are in one of the directories defined by the include_path parameter</li><li>They are in the directory defined by the K_PATH_FONTS constant</li></ul><br />
	 * @param $family (string) Family font. It can be either a name defined by AddFont() or one of the standard Type1 families (case insensitive):<ul><li>times (Times-Roman)</li><li>timesb (Times-Bold)</li><li>timesi (Times-Italic)</li><li>timesbi (Times-BoldItalic)</li><li>helvetica (Helvetica)</li><li>helveticab (Helvetica-Bold)</li><li>helveticai (Helvetica-Oblique)</li><li>helveticabi (Helvetica-BoldOblique)</li><li>courier (Courier)</li><li>courierb (Courier-Bold)</li><li>courieri (Courier-Oblique)</li><li>courierbi (Courier-BoldOblique)</li><li>symbol (Symbol)</li><li>zapfdingbats (ZapfDingbats)</li></ul> It is also possible to pass an empty string. In that case, the current family is retained.
	 * @param $style (string) Font style. Possible values are (case insensitive):<ul><li>empty string: regular</li><li>B: bold</li><li>I: italic</li><li>U: underline</li><li>D: line trough</li><li>O: overline</li></ul> or any combination. The default value is regular. Bold and italic styles do not apply to Symbol and ZapfDingbats basic fonts or other fonts when not defined.
	 * @param $size (float) Font size in points. The default value is the current size. If no size has been specified since the beginning of the document, the value taken is 12
	 * @param $fontfile (string) The font definition file. By default, the name is built from the family and style, in lower case with no spaces.
	 * @param $subset (mixed) if true embedd only a subset of the font (stores only the information related to the used characters); if false embedd full font; if \\'default\\' uses the default value set using setFontSubsetting(). This option is valid only for TrueTypeUnicode fonts. If you want to enable users to change the document, set this parameter to false. If you subset the font, the person who receives your PDF would need to have your same font in order to make changes to your PDF. The file size of the PDF would also be smaller because you are embedding only part of a font.
	 * @param $out (boolean) if true output the font size command, otherwise only set the font properties.
	 * @author Nicola Asuni
	 * @public
	 * @since 1.0
	 * @see AddFont(), SetFontSize()
	 */",
 "/**
	 * Defines the size of the current font.
	 * @param $size (float) The font size in points.
	 * @param $out (boolean) if true output the font size command, otherwise only set the font properties.
	 * @public
	 * @since 1.0
	 * @see SetFont()
	 */",
 "/**
	 * Return the font descent value
	 * @param $font (string) font name
	 * @param $style (string) font style
	 * @param $size (float) The size (in points)
	 * @return int font descent
	 * @public
	 * @author Nicola Asuni
	 * @since 4.9.003 (2010-03-30)
	 */",
 "/**
	 * Return the font ascent value
	 * @param $font (string) font name
	 * @param $style (string) font style
	 * @param $size (float) The size (in points)
	 * @return int font ascent
	 * @public
	 * @author Nicola Asuni
	 * @since 4.9.003 (2010-03-30)
	 */",
 "/**
	 * Defines the default monospaced font.
	 * @param $font (string) Font name.
	 * @public
	 * @since 4.5.025
	 */",
 "/**
	 * Creates a new internal link and returns its identifier. An internal link is a clickable area which directs to another place within the document.<br />
	 * The identifier can then be passed to Cell(), Write(), Image() or Link(). The destination is defined with SetLink().
	 * @public
	 * @since 1.5
	 * @see Cell(), Write(), Image(), Link(), SetLink()
	 */",
 "/**
	 * Defines the page and position a link points to.
	 * @param $link (int) The link identifier returned by AddLink()
	 * @param $y (float) Ordinate of target position; -1 indicates the current position. The default value is 0 (top of page)
	 * @param $page (int) Number of target page; -1 indicates the current page. This is the default value
	 * @public
	 * @since 1.5
	 * @see AddLink()
	 */",
 "/**
	 * Puts a link on a rectangular area of the page.
	 * Text or image links are generally put via Cell(), Write() or Image(), but this method can be useful for instance to define a clickable area inside an image.
	 * @param $x (float) Abscissa of the upper-left corner of the rectangle
	 * @param $y (float) Ordinate of the upper-left corner of the rectangle
	 * @param $w (float) Width of the rectangle
	 * @param $h (float) Height of the rectangle
	 * @param $link (mixed) URL or identifier returned by AddLink()
	 * @param $spaces (int) number of spaces on the text to link
	 * @public
	 * @since 1.5
	 * @see AddLink(), Annotation(), Cell(), Write(), Image()
	 */",
 "/**
	 * Puts a markup annotation on a rectangular area of the page.
	 * !!!!THE ANNOTATION SUPPORT IS NOT YET FULLY IMPLEMENTED !!!!
	 * @param $x (float) Abscissa of the upper-left corner of the rectangle
	 * @param $y (float) Ordinate of the upper-left corner of the rectangle
	 * @param $w (float) Width of the rectangle
	 * @param $h (float) Height of the rectangle
	 * @param $text (string) annotation text or alternate content
	 * @param $opt (array) array of options (see section 8.4 of PDF reference 1.7).
	 * @param $spaces (int) number of spaces on the text to link
	 * @public
	 * @since 4.0.018 (2008-08-06)
	 */",
 "/**
	 * Embedd the attached files.
	 * @since 4.4.000 (2008-12-07)
	 * @protected
	 * @see Annotation()
	 */",
 "/**
	 * Prints a text cell at the specified position.
	 * This method allows to place a string precisely on the page.
	 * @param $x (float) Abscissa of the cell origin
	 * @param $y (float) Ordinate of the cell origin
	 * @param $txt (string) String to print
	 * @param $fstroke (int) outline size in user units (false = disable)
	 * @param $fclip (boolean) if true activate clipping mode (you must call StartTransform() before this function and StopTransform() to stop the clipping tranformation).
	 * @param $ffill (boolean) if true fills the text
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $ln (int) Indicates where the current position should go after the call. Possible values are:<ul><li>0: to the right (or left for RTL languages)</li><li>1: to the beginning of the next line</li><li>2: below</li></ul>Putting 1 is equivalent to putting 0 and calling Ln() just after. Default value: 0.
	 * @param $align (string) Allows to center or align the text. Possible values are:<ul><li>L or empty string: left align (default value)</li><li>C: center</li><li>R: right align</li><li>J: justify</li></ul>
	 * @param $fill (boolean) Indicates if the cell background must be painted (true) or transparent (false).
	 * @param $link (mixed) URL or identifier returned by AddLink().
	 * @param $stretch (int) font stretch mode: <ul><li>0 = disabled</li><li>1 = horizontal scaling only if text is larger than cell width</li><li>2 = forced horizontal scaling to fit cell width</li><li>3 = character spacing only if text is larger than cell width</li><li>4 = forced character spacing to fit cell width</li></ul> General font stretching and scaling values will be preserved when possible.
	 * @param $ignore_min_height (boolean) if true ignore automatic minimum height value.
	 * @param $calign (string) cell vertical alignment relative to the specified Y value. Possible values are:<ul><li>T : cell top</li><li>A : font top</li><li>L : font baseline</li><li>D : font bottom</li><li>B : cell bottom</li></ul>
	 * @param $valign (string) text vertical alignment inside the cell. Possible values are:<ul><li>T : top</li><li>C : center</li><li>B : bottom</li></ul>
	 * @param $rtloff (boolean) if true uses the page top-left corner as origin of axis for $x and $y initial position.
	 * @public
	 * @since 1.0
	 * @see Cell(), Write(), MultiCell(), WriteHTML(), WriteHTMLCell()
	 */",
 "/**
	 * Whenever a page break condition is met, the method is called, and the break is issued or not depending on the returned value.
	 * The default implementation returns a value according to the mode selected by SetAutoPageBreak().<br />
	 * This method is called automatically and should not be called directly by the application.
	 * @return boolean
	 * @public
	 * @since 1.4
	 * @see SetAutoPageBreak()
	 */",
 "/**
	 * Add page if needed.
	 * @param $h (float) Cell height. Default value: 0.
	 * @param $y (mixed) starting y position, leave empty for current position.
	 * @param $addpage (boolean) if true add a page, otherwise only return the true/false state
	 * @return boolean true in case of page break, false otherwise.
	 * @since 3.2.000 (2008-07-01)
	 * @protected
	 */",
 "/**
	 * Removes SHY characters from text.
	 * Unicode Data:<ul>
	 * <li>Name : SOFT HYPHEN, commonly abbreviated as SHY</li>
	 * <li>HTML Entity (decimal): \"&amp;#173;\"</li>
	 * <li>HTML Entity (hex): \"&amp;#xad;\"</li>
	 * <li>HTML Entity (named): \"&amp;shy;\"</li>
	 * <li>How to type in Microsoft Windows: [Alt +00AD] or [Alt 0173]</li>
	 * <li>UTF-8 (hex): 0xC2 0xAD (c2ad)</li>
	 * <li>UTF-8 character: chr(194).chr(173)</li>
	 * </ul>
	 * @param $txt (string) input string
	 * @return string without SHY characters.
	 * @public
	 * @since (4.5.019) 2009-02-28
	 */",
 "/**
	 * Prints a cell (rectangular area) with optional borders, background color and character string. The upper-left corner of the cell corresponds to the current position. The text can be aligned or centered. After the call, the current position moves to the right or to the next line. It is possible to put a link on the text.<br />
	 * If automatic page breaking is enabled and the cell goes beyond the limit, a page break is done before outputting.
	 * @param $w (float) Cell width. If 0, the cell extends up to the right margin.
	 * @param $h (float) Cell height. Default value: 0.
	 * @param $txt (string) String to print. Default value: empty string.
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $ln (int) Indicates where the current position should go after the call. Possible values are:<ul><li>0: to the right (or left for RTL languages)</li><li>1: to the beginning of the next line</li><li>2: below</li></ul> Putting 1 is equivalent to putting 0 and calling Ln() just after. Default value: 0.
	 * @param $align (string) Allows to center or align the text. Possible values are:<ul><li>L or empty string: left align (default value)</li><li>C: center</li><li>R: right align</li><li>J: justify</li></ul>
	 * @param $fill (boolean) Indicates if the cell background must be painted (true) or transparent (false).
	 * @param $link (mixed) URL or identifier returned by AddLink().
	 * @param $stretch (int) font stretch mode: <ul><li>0 = disabled</li><li>1 = horizontal scaling only if text is larger than cell width</li><li>2 = forced horizontal scaling to fit cell width</li><li>3 = character spacing only if text is larger than cell width</li><li>4 = forced character spacing to fit cell width</li></ul> General font stretching and scaling values will be preserved when possible.
	 * @param $ignore_min_height (boolean) if true ignore automatic minimum height value.
	 * @param $calign (string) cell vertical alignment relative to the specified Y value. Possible values are:<ul><li>T : cell top</li><li>C : center</li><li>B : cell bottom</li><li>A : font top</li><li>L : font baseline</li><li>D : font bottom</li></ul>
	 * @param $valign (string) text vertical alignment inside the cell. Possible values are:<ul><li>T : top</li><li>C : center</li><li>B : bottom</li></ul>
	 * @public
	 * @since 1.0
	 * @see SetFont(), SetDrawColor(), SetFillColor(), SetTextColor(), SetLineWidth(), AddLink(), Ln(), MultiCell(), Write(), SetAutoPageBreak()
	 */",
 "/**
	 * Returns the PDF string code to print a cell (rectangular area) with optional borders, background color and character string. The upper-left corner of the cell corresponds to the current position. The text can be aligned or centered. After the call, the current position moves to the right or to the next line. It is possible to put a link on the text.<br />
	 * If automatic page breaking is enabled and the cell goes beyond the limit, a page break is done before outputting.
	 * @param $w (float) Cell width. If 0, the cell extends up to the right margin.
	 * @param $h (float) Cell height. Default value: 0.
	 * @param $txt (string) String to print. Default value: empty string.
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $ln (int) Indicates where the current position should go after the call. Possible values are:<ul><li>0: to the right (or left for RTL languages)</li><li>1: to the beginning of the next line</li><li>2: below</li></ul>Putting 1 is equivalent to putting 0 and calling Ln() just after. Default value: 0.
	 * @param $align (string) Allows to center or align the text. Possible values are:<ul><li>L or empty string: left align (default value)</li><li>C: center</li><li>R: right align</li><li>J: justify</li></ul>
	 * @param $fill (boolean) Indicates if the cell background must be painted (true) or transparent (false).
	 * @param $link (mixed) URL or identifier returned by AddLink().
	 * @param $stretch (int) font stretch mode: <ul><li>0 = disabled</li><li>1 = horizontal scaling only if text is larger than cell width</li><li>2 = forced horizontal scaling to fit cell width</li><li>3 = character spacing only if text is larger than cell width</li><li>4 = forced character spacing to fit cell width</li></ul> General font stretching and scaling values will be preserved when possible.
	 * @param $ignore_min_height (boolean) if true ignore automatic minimum height value.
	 * @param $calign (string) cell vertical alignment relative to the specified Y value. Possible values are:<ul><li>T : cell top</li><li>C : center</li><li>B : cell bottom</li><li>A : font top</li><li>L : font baseline</li><li>D : font bottom</li></ul>
	 * @param $valign (string) text vertical alignment inside the cell. Possible values are:<ul><li>T : top</li><li>M : middle</li><li>B : bottom</li></ul>
	 * @return string containing cell code
	 * @protected
	 * @since 1.0
	 * @see Cell()
	 */",
 "/**
	 * Returns the code to draw the cell border
	 * @param $x (float) X coordinate.
	 * @param $y (float) Y coordinate.
	 * @param $w (float) Cell width.
	 * @param $h (float) Cell height.
	 * @param $brd (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @return string containing cell border code
	 * @protected
	 * @see SetLineStyle()
	 * @since 5.7.000 (2010-08-02)
	 */",
 "/**
	 * This method allows printing text with line breaks.
	 * They can be automatic (as soon as the text reaches the right border of the cell) or explicit (via the \n character). As many cells as necessary are output, one below the other.<br />
	 * Text can be aligned, centered or justified. The cell block can be framed and the background painted.
	 * @param $w (float) Width of cells. If 0, they extend up to the right margin of the page.
	 * @param $h (float) Cell minimum height. The cell extends automatically if needed.
	 * @param $txt (string) String to print
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $align (string) Allows to center or align the text. Possible values are:<ul><li>L or empty string: left align</li><li>C: center</li><li>R: right align</li><li>J: justification (default value when $ishtml=false)</li></ul>
	 * @param $fill (boolean) Indicates if the cell background must be painted (true) or transparent (false).
	 * @param $ln (int) Indicates where the current position should go after the call. Possible values are:<ul><li>0: to the right</li><li>1: to the beginning of the next line [DEFAULT]</li><li>2: below</li></ul>
	 * @param $x (float) x position in user units
	 * @param $y (float) y position in user units
	 * @param $reseth (boolean) if true reset the last cell height (default true).
	 * @param $stretch (int) font stretch mode: <ul><li>0 = disabled</li><li>1 = horizontal scaling only if text is larger than cell width</li><li>2 = forced horizontal scaling to fit cell width</li><li>3 = character spacing only if text is larger than cell width</li><li>4 = forced character spacing to fit cell width</li></ul> General font stretching and scaling values will be preserved when possible.
	 * @param $ishtml (boolean) INTERNAL USE ONLY -- set to true if $txt is HTML content (default = false). Never set this parameter to true, use instead writeHTMLCell() or writeHTML() methods.
	 * @param $autopadding (boolean) if true, uses internal padding and automatically adjust it to account for line width.
	 * @param $maxh (float) maximum height. It should be >= $h and less then remaining space to the bottom of the page, or 0 for disable this feature. This feature works only when $ishtml=false.
	 * @param $valign (string) Vertical alignment of text (requires $maxh = $h > 0). Possible values are:<ul><li>T: TOP</li><li>M: middle</li><li>B: bottom</li></ul>. This feature works only when $ishtml=false and the cell must fit in a single page.
	 * @param $fitcell (boolean) if true attempt to fit all the text within the cell by reducing the font size (do not work in HTML mode).
	 * @return int Return the number of cells or 1 for html mode.
	 * @public
	 * @since 1.3
	 * @see SetFont(), SetDrawColor(), SetFillColor(), SetTextColor(), SetLineWidth(), Cell(), Write(), SetAutoPageBreak()
	 */",
 "/**
	 * Get the border mode accounting for multicell position (opens bottom side of multicell crossing pages)
	 * @param $brd (mixed) Indicates if borders must be drawn around the cell block. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul>or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $position (string) multicell position: \\'start\\', \\'middle\\', \\'end\\'
	 * @return border mode array
	 * @protected
	 * @since 4.4.002 (2008-12-09)
	 */",
 "/**
	 * This method return the estimated number of lines for print a simple text string using Multicell() method.
	 * @param $txt (string) String for calculating his height
	 * @param $w (float) Width of cells. If 0, they extend up to the right margin of the page.
	 * @param $reseth (boolean) if true reset the last cell height (default false).
	 * @param $autopadding (boolean) if true, uses internal padding and automatically adjust it to account for line width (default true).
	 * @param $cellpadding (float) Internal cell padding, if empty uses default cell padding.
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @return float Return the minimal height needed for multicell method for printing the $txt param.
	 * @author Alexander Escalona Fern?ndez, Nicola Asuni
	 * @public
	 * @since 4.5.011
	 */",
 "/**
	 * This method return the estimated height needed for printing a simple text string using the Multicell() method.
	 * Generally, if you want to know the exact height for a block of content you can use the following alternative technique:
	 * @pre
	 *  // store current object
	 *  $pdf->startTransaction();
	 *  // store starting values
	 *  $start_y = $pdf->GetY();
	 *  $start_page = $pdf->getPage();
	 *  // call your printing functions with your parameters
	 *  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	 *  $pdf->MultiCell($w=0, $h=0, $txt, $border=1, $align=\\'L\\', $fill=false, $ln=1, $x=\\'\\', $y=\\'\\', $reseth=true, $stretch=0, $ishtml=false, $autopadding=true, $maxh=0);
	 *  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	 *  // get the new Y
	 *  $end_y = $pdf->GetY();
	 *  $end_page = $pdf->getPage();
	 *  // calculate height
	 *  $height = 0;
	 *  if ($end_page == $start_page) {
	 *  	$height = $end_y - $start_y;
	 *  } else {
	 *  	for ($page=$start_page; $page <= $end_page; ++$page) {
	 *  		$this->setPage($page);
	 *  		if ($page == $start_page) {
	 *  			// first page
	 *  			$height = $this->h - $start_y - $this->bMargin;
	 *  		} elseif ($page == $end_page) {
	 *  			// last page
	 *  			$height = $end_y - $this->tMargin;
	 *  		} else {
	 *  			$height = $this->h - $this->tMargin - $this->bMargin;
	 *  		}
	 *  	}
	 *  }
	 *  // restore previous object
	 *  $pdf = $pdf->rollbackTransaction();
	 *
	 * @param $w (float) Width of cells. If 0, they extend up to the right margin of the page.
	 * @param $txt (string) String for calculating his height
	 * @param $reseth (boolean) if true reset the last cell height (default false).
	 * @param $autopadding (boolean) if true, uses internal padding and automatically adjust it to account for line width (default true).
	 * @param $cellpadding (float) Internal cell padding, if empty uses default cell padding.
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @return float Return the minimal height needed for multicell method for printing the $txt param.
	 * @author Nicola Asuni, Alexander Escalona Fern?ndez
	 * @public
	 */",
 "/**
	 * This method prints text from the current position.<br />
	 * @param $h (float) Line height
	 * @param $txt (string) String to print
	 * @param $link (mixed) URL or identifier returned by AddLink()
	 * @param $fill (boolean) Indicates if the cell background must be painted (true) or transparent (false).
	 * @param $align (string) Allows to center or align the text. Possible values are:<ul><li>L or empty string: left align (default value)</li><li>C: center</li><li>R: right align</li><li>J: justify</li></ul>
	 * @param $ln (boolean) if true set cursor at the bottom of the line, otherwise set cursor at the top of the line.
	 * @param $stretch (int) font stretch mode: <ul><li>0 = disabled</li><li>1 = horizontal scaling only if text is larger than cell width</li><li>2 = forced horizontal scaling to fit cell width</li><li>3 = character spacing only if text is larger than cell width</li><li>4 = forced character spacing to fit cell width</li></ul> General font stretching and scaling values will be preserved when possible.
	 * @param $firstline (boolean) if true prints only the first line and return the remaining string.
	 * @param $firstblock (boolean) if true the string is the starting of a line.
	 * @param $maxh (float) maximum height. The remaining unprinted text will be returned. It should be >= $h and less then remaining space to the bottom of the page, or 0 for disable this feature.
	 * @param $wadj (float) first line width will be reduced by this amount (used in HTML mode).
	 * @param $margin (array) margin array of the parent container
	 * @return mixed Return the number of cells or the remaining string if $firstline = true.
	 * @public
	 * @since 1.5
	 */",
 "/**
	 * Returns the remaining width between the current position and margins.
	 * @return int Return the remaining width
	 * @protected
	 */",
 "/**
	 * Extract a slice of the $strarr array and return it as string.
	 * @param $strarr (string) The input array of characters.
	 * @param $start (int) the starting element of $strarr.
	 * @param $end (int) first element that will not be returned.
	 * @return Return part of a string
	 * @public
	 */",
 "/**
	 * Extract a slice of the $uniarr array and return it as string.
	 * @param $uniarr (string) The input array of characters.
	 * @param $start (int) the starting element of $strarr.
	 * @param $end (int) first element that will not be returned.
	 * @return Return part of a string
	 * @public
	 * @since 4.5.037 (2009-04-07)
	 */",
 "/**
	 * Convert an array of UTF8 values to array of unicode characters
	 * @param $ta (string) The input array of UTF8 values.
	 * @return Return array of unicode characters
	 * @public
	 * @since 4.5.037 (2009-04-07)
	 */",
 "/**
	 * Returns the unicode caracter specified by UTF-8 value
	 * @param $c (int) UTF-8 value
	 * @return Returns the specified character.
	 * @author Miguel Perez, Nicola Asuni
	 * @public
	 * @since 2.3.000 (2008-03-05)
	 */",
 "/**
	 * Return the image type given the file name or array returned by getimagesize() function.
	 * @param $imgfile (string) image file name
	 * @param $iminfo (array) array of image information returned by getimagesize() function.
	 * @return string image type
	 * @since 4.8.017 (2009-11-27)
	 */",
 "/**
	 * Set the block dimensions accounting for page breaks and page/column fitting
	 * @param $w (float) width
	 * @param $h (float) height
	 * @param $x (float) X coordinate
	 * @param $y (float) Y coodiante
	 * @param $fitonpage (boolean) if true the block is resized to not exceed page dimensions.
	 * @return array($w, $h, $x, $y)
	 * @protected
	 * @since 5.5.009 (2010-07-05)
	 */",
 "/**
	 * Puts an image in the page.
	 * The upper-left corner must be given.
	 * The dimensions can be specified in different ways:<ul>
	 * <li>explicit width and height (expressed in user unit)</li>
	 * <li>one explicit dimension, the other being calculated automatically in order to keep the original proportions</li>
	 * <li>no explicit dimension, in which case the image is put at 72 dpi</li></ul>
	 * Supported formats are JPEG and PNG images whitout GD library and all images supported by GD: GD, GD2, GD2PART, GIF, JPEG, PNG, BMP, XBM, XPM;
	 * The format can be specified explicitly or inferred from the file extension.<br />
	 * It is possible to put a link on the image.<br />
	 * Remark: if an image is used several times, only one copy will be embedded in the file.<br />
	 * @param $file (string) Name of the file containing the image or a \\'@\\' character followed by the image data string. To link an image without embedding it on the document, set an asterisk character before the URL (i.e.: \\'*http://www.example.com/image.jpg\\').
	 * @param $x (float) Abscissa of the upper-left corner (LTR) or upper-right corner (RTL).
	 * @param $y (float) Ordinate of the upper-left corner (LTR) or upper-right corner (RTL).
	 * @param $w (float) Width of the image in the page. If not specified or equal to zero, it is automatically calculated.
	 * @param $h (float) Height of the image in the page. If not specified or equal to zero, it is automatically calculated.
	 * @param $type (string) Image format. Possible values are (case insensitive): JPEG and PNG (whitout GD library) and all images supported by GD: GD, GD2, GD2PART, GIF, JPEG, PNG, BMP, XBM, XPM;. If not specified, the type is inferred from the file extension.
	 * @param $link (mixed) URL or identifier returned by AddLink().
	 * @param $align (string) Indicates the alignment of the pointer next to image insertion relative to image height. The value can be:<ul><li>T: top-right for LTR or top-left for RTL</li><li>M: middle-right for LTR or middle-left for RTL</li><li>B: bottom-right for LTR or bottom-left for RTL</li><li>N: next line</li></ul>
	 * @param $resize (mixed) If true resize (reduce) the image to fit $w and $h (requires GD or ImageMagick library); if false do not resize; if 2 force resize in all cases (upscaling and downscaling).
	 * @param $dpi (int) dot-per-inch resolution used on resize
	 * @param $palign (string) Allows to center or align the image on the current line. Possible values are:<ul><li>L : left align</li><li>C : center</li><li>R : right align</li><li>\\'\\' : empty string : left for LTR or right for RTL</li></ul>
	 * @param $ismask (boolean) true if this image is a mask, false otherwise
	 * @param $imgmask (mixed) image object returned by this function or false
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $fitbox (mixed) If not false scale image dimensions proportionally to fit within the ($w, $h) box. $fitbox can be true or a 2 characters string indicating the image alignment inside the box. The first character indicate the horizontal alignment (L = left, C = center, R = right) the second character indicate the vertical algnment (T = top, M = middle, B = bottom).
	 * @param $hidden (boolean) If true do not display the image.
	 * @param $fitonpage (boolean) If true the image is resized to not exceed page dimensions.
	 * @param $alt (boolean) If true the image will be added as alternative and not directly printed (the ID of the image will be returned).
	 * @param $altimgs (array) Array of alternate images IDs. Each alternative image must be an array with two values: an integer representing the image ID (the value returned by the Image method) and a boolean value to indicate if the image is the default for printing.
	 * @return image information
	 * @public
	 * @since 1.1
	 */",
 "/**
	 * Sets the current active configuration setting of magic_quotes_runtime (if the set_magic_quotes_runtime function exist)
	 * @param $mqr (boolean) FALSE for off, TRUE for on.
	 * @since 4.6.025 (2009-08-17)
	 */",
 "/**
	 * Gets the current active configuration setting of magic_quotes_runtime (if the get_magic_quotes_runtime function exist)
	 * @return Returns 0 if magic quotes runtime is off or get_magic_quotes_runtime doesn\\'t exist, 1 otherwise.
	 * @since 4.6.025 (2009-08-17)
	 */",
 "/**
	 * Convert the loaded image to a JPEG and then return a structure for the PDF creator.
	 * This function requires GD library and write access to the directory defined on K_PATH_CACHE constant.
	 * @param $image (image) Image object.
	 * return image JPEG image object.
	 * @protected
	 */",
 "/**
	 * Convert the loaded image to a PNG and then return a structure for the PDF creator.
	 * This function requires GD library and write access to the directory defined on K_PATH_CACHE constant.
	 * @param $image (image) Image object.
	 * return image PNG image object.
	 * @protected
	 * @since 4.9.016 (2010-04-20)
	 */",
 "/**
	 * Set the transparency for the given GD image.
	 * @param $new_image (image) GD image object
	 * @param $image (image) GD image object.
	 * return GD image object.
	 * @protected
	 * @since 4.9.016 (2010-04-20)
	 */",
 "/**
	 * Extract info from a JPEG file without using the GD library.
	 * @param $file (string) image file to parse
	 * @return array structure containing the image data
	 * @protected
	 */",
 "/**
	 * Extract info from a PNG file without using the GD library.
	 * @param $file (string) image file to parse
	 * @return array structure containing the image data
	 * @protected
	 */",
 "/**
	 * Binary-safe and URL-safe file read.
	 * Reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met: length bytes have been read; EOF (end of file) is reached.
	 * @param $handle (resource)
	 * @param $length (int)
	 * @return Returns the read string or FALSE in case of error.
	 * @author Nicola Asuni
	 * @protected
	 * @since 4.5.027 (2009-03-16)
	 */",
 "/**
	 * Extract info from a PNG image with alpha channel using the GD library.
	 * @param $file (string) Name of the file containing the image.
	 * @param $x (float) Abscissa of the upper-left corner.
	 * @param $y (float) Ordinate of the upper-left corner.
	 * @param $wpx (float) Original width of the image in pixels.
	 * @param $hpx (float) original height of the image in pixels.
	 * @param $w (float) Width of the image in the page. If not specified or equal to zero, it is automatically calculated.
	 * @param $h (float) Height of the image in the page. If not specified or equal to zero, it is automatically calculated.
	 * @param $type (string) Image format. Possible values are (case insensitive): JPEG and PNG (whitout GD library) and all images supported by GD: GD, GD2, GD2PART, GIF, JPEG, PNG, BMP, XBM, XPM;. If not specified, the type is inferred from the file extension.
	 * @param $link (mixed) URL or identifier returned by AddLink().
	 * @param $align (string) Indicates the alignment of the pointer next to image insertion relative to image height. The value can be:<ul><li>T: top-right for LTR or top-left for RTL</li><li>M: middle-right for LTR or middle-left for RTL</li><li>B: bottom-right for LTR or bottom-left for RTL</li><li>N: next line</li></ul>
	 * @param $resize (boolean) If true resize (reduce) the image to fit $w and $h (requires GD library).
	 * @param $dpi (int) dot-per-inch resolution used on resize
	 * @param $palign (string) Allows to center or align the image on the current line. Possible values are:<ul><li>L : left align</li><li>C : center</li><li>R : right align</li><li>\\'\\' : empty string : left for LTR or right for RTL</li></ul>
	 * @param $filehash (string) File hash used to build unique file names.
	 * @author Nicola Asuni
	 * @protected
	 * @since 4.3.007 (2008-12-04)
	 * @see Image()
	 */",
 "/**
	 * Correct the gamma value to be used with GD library
	 * @param $v (float) the gamma value to be corrected
	 * @protected
	 * @since 4.3.007 (2008-12-04)
	 */",
 "/**
	 * Performs a line break.
	 * The current abscissa goes back to the left margin and the ordinate increases by the amount passed in parameter.
	 * @param $h (float) The height of the break. By default, the value equals the height of the last printed cell.
	 * @param $cell (boolean) if true add the current left (or right o for RTL) padding to the X coordinate
	 * @public
	 * @since 1.0
	 * @see Cell()
	 */",
 "/**
	 * Returns the relative X value of current position.
	 * The value is relative to the left border for LTR languages and to the right border for RTL languages.
	 * @return float
	 * @public
	 * @since 1.2
	 * @see SetX(), GetY(), SetY()
	 */",
 "/**
	 * Returns the absolute X value of current position.
	 * @return float
	 * @public
	 * @since 1.2
	 * @see SetX(), GetY(), SetY()
	 */",
 "/**
	 * Returns the ordinate of the current position.
	 * @return float
	 * @public
	 * @since 1.0
	 * @see SetY(), GetX(), SetX()
	 */",
 "/**
	 * Defines the abscissa of the current position.
	 * If the passed value is negative, it is relative to the right of the page (or left if language is RTL).
	 * @param $x (float) The value of the abscissa.
	 * @param $rtloff (boolean) if true always uses the page top-left corner as origin of axis.
	 * @public
	 * @since 1.2
	 * @see GetX(), GetY(), SetY(), SetXY()
	 */",
 "/**
	 * Moves the current abscissa back to the left margin and sets the ordinate.
	 * If the passed value is negative, it is relative to the bottom of the page.
	 * @param $y (float) The value of the ordinate.
	 * @param $resetx (bool) if true (default) reset the X position.
	 * @param $rtloff (boolean) if true always uses the page top-left corner as origin of axis.
	 * @public
	 * @since 1.0
	 * @see GetX(), GetY(), SetY(), SetXY()
	 */",
 "/**
	 * Defines the abscissa and ordinate of the current position.
	 * If the passed values are negative, they are relative respectively to the right and bottom of the page.
	 * @param $x (float) The value of the abscissa.
	 * @param $y (float) The value of the ordinate.
	 * @param $rtloff (boolean) if true always uses the page top-left corner as origin of axis.
	 * @public
	 * @since 1.2
	 * @see SetX(), SetY()
	 */",
 "/**
	 * Ouput input data and compress it if possible.
	 * @param $data (string) Data to output.
	 * @param $length (int) Data length in bytes.
	 * @protected
	 * @since 5.9.086
	 */",
 "/**
	 * Send the document to a given destination: string, local file or browser.
	 * In the last case, the plug-in may be used (if present) or a download (\"Save as\" dialog box) may be forced.<br />
	 * The method first calls Close() if necessary to terminate the document.
	 * @param $name (string) The name of the file when saved. Note that special characters are removed and blanks characters are replaced with the underscore character.
	 * @param $dest (string) Destination where to send the document. It can take one of the following values:<ul><li>I: send the file inline to the browser (default). The plug-in is used if available. The name given by name is used when one selects the \"Save as\" option on the link generating the PDF.</li><li>D: send to the browser and force a file download with the name given by name.</li><li>F: save to a local server file with the name given by name.</li><li>S: return the document as a string (name is ignored).</li><li>FI: equivalent to F + I option</li><li>FD: equivalent to F + D option</li><li>E: return the document as base64 mime multi-part email attachment (RFC 2045)</li></ul>
	 * @public
	 * @since 1.0
	 * @see Close()
	 */",
 "/**
	 * Unset all class variables except the following critical variables: internal_encoding, state, bufferlen, buffer and diskcache.
	 * @param $destroyall (boolean) if true destroys all class variables, otherwise preserves critical variables.
	 * @param $preserve_objcopy (boolean) if true preserves the objcopy variable
	 * @public
	 * @since 4.5.016 (2009-02-24)
	 */",
 "/**
	 * Check for locale-related bug
	 * @protected
	 */",
 "/**
	 * Return fonts path
	 * @return string
	 * @protected
	 */",
 "/**
	 * Return an array containing variations for the basic page number alias.
	 * @param $a (string) Base alias.
	 * @return array of page number aliases
	 * @protected
	 */",
 "/**
	 * Return an array containing all internal page aliases.
	 * @return array of page number aliases
	 * @protected
	 */",
 "/**
	 * Replace page number aliases with number.
	 * @param $page (string) Page content.
	 * @param $replace (array) Array of replacements (array keys are replacement strings, values are alias arrays).
	 * @param $diff (int) If passed, this will be set to the total char number difference between alias and replacements.
	 * @return replaced page content and updated $diff parameter as array.
	 * @protected
	 */",
 "/**
	 * Replace right shift page number aliases with spaces to correct right alignment.
	 * This works perfectly only when using monospaced fonts.
	 * @param $page (string) Page content.
	 * @param $aliases (array) Array of page aliases.
	 * @param $diff (int) initial difference to add.
	 * @return replaced page content.
	 * @protected
	 */",
 "/**
	 * Output pages (and replace page number aliases).
	 * @protected
	 */",
 "/**
	 * Output references to page annotations
	 * @param $n (int) page number
	 * @protected
	 * @author Nicola Asuni
	 * @since 4.7.000 (2008-08-29)
	 * @deprecated
	 */",
 "/**
	 * Get references to page annotations.
	 * @param $n (int) page number
	 * @return string
	 * @protected
	 * @author Nicola Asuni
	 * @since 5.0.010 (2010-05-17)
	 */",
 "/**
	 * Output annotations objects for all pages.
	 * !!! THIS METHOD IS NOT YET COMPLETED !!!
	 * See section 12.5 of PDF 32000_2008 reference.
	 * @protected
	 * @author Nicola Asuni
	 * @since 4.0.018 (2008-08-06)
	 */",
 "/**
	 * Put appearance streams XObject used to define annotation\\'s appearance states.
	 * @param $w (int) annotation width
	 * @param $h (int) annotation height
	 * @param $stream (string) appearance stream
	 * @return int object ID
	 * @protected
	 * @since 4.8.001 (2009-09-09)
	 */",
 "/**
	 * Get ULONG from string (Big Endian 32-bit unsigned integer).
	 * @param $str (string) string from where to extract value
	 * @param $offset (int) point from where to read the data
	 * @return int 32 bit value
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.2.000 (2010-06-02)
	 */",
 "/**
	 * Get USHORT from string (Big Endian 16-bit unsigned integer).
	 * @param $str (string) string from where to extract value
	 * @param $offset (int) point from where to read the data
	 * @return int 16 bit value
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.2.000 (2010-06-02)
	 */",
 "/**
	 * Get SHORT from string (Big Endian 16-bit signed integer).
	 * @param $str (string) string from where to extract value
	 * @param $offset (int) point from where to read the data
	 * @return int 16 bit value
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.2.000 (2010-06-02)
	 */",
 "/**
	 * Get FWORD from string (Big Endian 16-bit signed integer).
	 * @param $str (string) string from where to extract value
	 * @param $offset (int) point from where to read the data
	 * @return int 16 bit value
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.9.123 (2011-09-30)
	 */",
 "/**
	 * Get UFWORD from string (Big Endian 16-bit unsigned integer).
	 * @param $str (string) string from where to extract value
	 * @param $offset (int) point from where to read the data
	 * @return int 16 bit value
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.9.123 (2011-09-30)
	 */",
 "/**
	 * Get FIXED from string (32-bit signed fixed-point number (16.16).
	 * @param $str (string) string from where to extract value
	 * @param $offset (int) point from where to read the data
	 * @return int 16 bit value
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.9.123 (2011-09-30)
	 */",
 "/**
	 * Get BYTE from string (8-bit unsigned integer).
	 * @param $str (string) String from where to extract value.
	 * @param $offset (int) Point from where to read the data.
	 * @return int 8 bit value
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.2.000 (2010-06-02)
	 */",
 "/**
	 * Update the CIDToGIDMap string with a new value.
	 * @param $map (string) CIDToGIDMap.
	 * @param $cid (int) CID value.
	 * @param $gid (int) GID value.
	 * @return (string) CIDToGIDMap.
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.9.123 (2011-09-29)
	 */",
 "/**
	 * Convert and add the selected TrueType or Type1 font to the fonts folder (that must be writeable).
	 * @param $fontfile (string) TrueType or Type1 font file (full path).
	 * @param $fonttype (string) Font type. Leave empty for autodetect mode. Valid values are: TrueTypeUnicode, TrueType, Type1, CID0JP = CID-0 Japanese, CID0KR = CID-0 Korean, CID0CS = CID-0 Chinese Simplified, CID0CT = CID-0 Chinese Traditional.
	 * @param $enc (string) Name of the encoding table to use. Leave empty for default mode. Omit this parameter for TrueType Unicode and symbolic fonts like Symbol or ZapfDingBats.
	 * @param $flags (int) Unsigned 32-bit integer containing flags specifying various characteristics of the font (PDF32000:2008 - 9.8.2 Font Descriptor Flags): +1 for fixed font; +4 for symbol or +32 for non-symbol; +64 for italic. Fixed and Italic mode are generally autodetected so you have to set it to 32 = non-symbolic font (default) or 4 = symbolic font.
	 * @param $outpath (string) Output path for generated font files (must be writeable by the web server). Leave empty for default font folder.
	 * @return (string) TCPDF font name.
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.123 (2010-09-30)
	 */",
 "/**
	 * Returns a subset of the TrueType font data without the unused glyphs.
	 * @param $font (string) TrueType font data.
	 * @param $subsetchars (array) Array of used characters (the glyphs to keep).
	 * @return (string) A subset of TrueType font data without the unused glyphs.
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.2.000 (2010-06-02)
	 */",
 "/**
	 * Returs the checksum of a TTF table.
	 * @param $table (string) table to check
	 * @param $length (int) length of table in bytes
	 * @return int checksum
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.2.000 (2010-06-02)
	 */",
 "/**
	 * Outputs font widths
	 * @param $font (array) font data
	 * @param $cidoffset (int) offset for CID values
	 * @return PDF command string for font widths
	 * @author Nicola Asuni
	 * @protected
	 * @since 4.4.000 (2008-12-07)
	 */",
 "/**
	 * Output fonts.
	 * @author Nicola Asuni
	 * @protected
	 */",
 "/**
	 * Adds unicode fonts.<br>
	 * Based on PDF Reference 1.3 (section 5)
	 * @param $font (array) font data
	 * @protected
	 * @author Nicola Asuni
	 * @since 1.52.0.TC005 (2005-01-05)
	 */",
 "/**
	 * Output CID-0 fonts.
	 * A Type 0 CIDFont contains glyph descriptions based on the Adobe Type 1 font format
	 * @param $font (array) font data
	 * @protected
	 * @author Andrew Whitehead, Nicola Asuni, Yukihiro Nakadaira
	 * @since 3.2.000 (2008-06-23)
	 */",
 "/**
	 * Output images.
	 * @protected
	 */",
 "/**
	 * Output Form XObjects Templates.
	 * @author Nicola Asuni
	 * @since 5.8.017 (2010-08-24)
	 * @protected
	 * @see startTemplate(), endTemplate(), printTemplate()
	 */",
 "/**
	 * Output Spot Colors Resources.
	 * @protected
	 * @since 4.0.024 (2008-09-12)
	 */",
 "/**
	 * Return XObjects Dictionary.
	 * @return string XObjects dictionary
	 * @protected
	 * @since 5.8.014 (2010-08-23)
	 */",
 "/**
	 * Output Resources Dictionary.
	 * @protected
	 */",
 "/**
	 * Output Resources.
	 * @protected
	 */",
 "/**
	 * Adds some Metadata information (Document Information Dictionary)
	 * (see Chapter 14.3.3 Document Information Dictionary of PDF32000_2008.pdf Reference)
	 * @return int object id
	 * @protected
	 */",
 "/**
	 * Set additional XMP data to be added on the default XMP data just before the end of \"x:xmpmeta\" tag.
	 * IMPORTANT: This data is added as-is without controls, so you have to validate your data before using this method!
	 * @param $xmp (string) Custom XMP data.
	 * @since 5.9.128 (2011-10-06)
	 * @public
	 */",
 "/**
	 * Put XMP data object and return ID.
	 * @return (int) The object ID.
	 * @since 5.9.121 (2011-09-28)
	 * @protected
	 */",
 "/**
	 * Output Catalog.
	 * @return int object id
	 * @protected
	 */",
 "/**
	 * Output viewer preferences.
	 * @return string for viewer preferences
	 * @author Nicola asuni
	 * @since 3.1.000 (2008-06-09)
	 * @protected
	 */",
 "/**
	 * Output PDF File Header (7.5.2).
	 * @protected
	 */",
 "/**
	 * Output end of document (EOF).
	 * @protected
	 */",
 "/**
	 * Initialize a new page.
	 * @param $orientation (string) page orientation. Possible values are (case insensitive):<ul><li>P or PORTRAIT (default)</li><li>L or LANDSCAPE</li></ul>
	 * @param $format (mixed) The format used for pages. It can be either: one of the string values specified at getPageSizeFromFormat() or an array of parameters specified at setPageFormat().
	 * @protected
	 * @see getPageSizeFromFormat(), setPageFormat()
	 */",
 "/**
	 * Mark end of page.
	 * @protected
	 */",
 "/**
	 * Begin a new object and return the object number.
	 * @return int object number
	 * @protected
	 */",
 "/**
	 * Return the starting object string for the selected object ID.
	 * @param $objid (int) Object ID (leave empty to get a new ID).
	 * @return string the starting object string
	 * @protected
	 * @since 5.8.009 (2010-08-20)
	 */",
 "/**
	 * Underline text.
	 * @param $x (int) X coordinate
	 * @param $y (int) Y coordinate
	 * @param $txt (string) text to underline
	 * @protected
	 */",
 "/**
	 * Underline for rectangular text area.
	 * @param $x (int) X coordinate
	 * @param $y (int) Y coordinate
	 * @param $w (int) width to underline
	 * @protected
	 * @since 4.8.008 (2009-09-29)
	 */",
 "/**
	 * Line through text.
	 * @param $x (int) X coordinate
	 * @param $y (int) Y coordinate
	 * @param $txt (string) text to linethrough
	 * @protected
	 */",
 "/**
	 * Line through for rectangular text area.
	 * @param $x (int) X coordinate
	 * @param $y (int) Y coordinate
	 * @param $w (int) line length (width)
	 * @protected
	 * @since 4.9.008 (2009-09-29)
	 */",
 "/**
	 * Overline text.
	 * @param $x (int) X coordinate
	 * @param $y (int) Y coordinate
	 * @param $txt (string) text to overline
	 * @protected
	 * @since 4.9.015 (2010-04-19)
	 */",
 "/**
	 * Overline for rectangular text area.
	 * @param $x (int) X coordinate
	 * @param $y (int) Y coordinate
	 * @param $w (int) width to overline
	 * @protected
	 * @since 4.9.015 (2010-04-19)
	 */",
 "/**
	 * Read a 4-byte (32 bit) integer from file.
	 * @param $f (string) file name.
	 * @return 4-byte integer
	 * @protected
	 */",
 "/**
	*Add\"\" before \"\", \"(\" and \")\"
	 * @param $s (string) string to escape.
	 * @return string escaped string.
	 * @protected
	 */",
 "/**
	 * Format a data string for meta information
	 * @param $s (string) data string to escape.
	 * @param $n (int) object ID
	 * @return string escaped string.
	 * @protected
	 */",
 "/**
	 * Returns a formatted date for meta information
	 * @param $n (int) object ID
	 * @return string escaped date string.
	 * @protected
	 * @since 4.6.028 (2009-08-25)
	 */",
 "/**
	 * Format a text string for meta information
	 * @param $s (string) string to escape.
	 * @param $n (int) object ID
	 * @return string escaped string.
	 * @protected
	 */",
 "/**
	 * THIS METHOD IS DEPRECATED
	 * Format a text string
	 * @param $s (string) string to escape.
	 * @return string escaped string.
	 * @protected
	 * @deprecated
	 */",
 "/**
	* Escape some special characters (&lt; &gt; &amp;) for XML output.
	* @param $str (string) Input string to convert.
	* @return converted string
	* @since 5.9.121 (2011-09-28)
	* @protected
	*/",
 "/**
	 * get raw output stream.
	 * @param $s (string) string to output.
	 * @param $n (int) object reference for encryption mode
	 * @protected
	 * @author Nicola Asuni
	 * @since 5.5.000 (2010-06-22)
	 */",
 "/**
	 * Format output stream (DEPRECATED).
	 * @param $s (string) string to output.
	 * @param $n (int) object reference for encryption mode
	 * @protected
	 * @deprecated
	 */",
 "/**
	 * Output a stream (DEPRECATED).
	 * @param $s (string) string to output.
	 * @param $n (int) object reference for encryption mode
	 * @protected
	 * @deprecated
	 */",
 "/**
	 * Output a string to the document.
	 * @param $s (string) string to output.
	 * @protected
	 */",
 "/**
	 * Converts UTF-8 strings to codepoints array.<br>
	 * Invalid byte sequences will be replaced with 0xFFFD (replacement character)<br>
	 * Based on: http://www.faqs.org/rfcs/rfc3629.html
	 * <pre>
	 *    Char. number range  |        UTF-8 octet sequence
	 *       (hexadecimal)    |              (binary)
	 *    --------------------+-----------------------------------------------
	 *    0000 0000-0000 007F | 0xxxxxxx
	 *    0000 0080-0000 07FF | 110xxxxx 10xxxxxx
	 *    0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
	 *    0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
	 *    ---------------------------------------------------------------------
	 *
	 *   ABFN notation:
	 *   ---------------------------------------------------------------------
	 *   UTF8-octets = *( UTF8-char )
	 *   UTF8-char   = UTF8-1 / UTF8-2 / UTF8-3 / UTF8-4
	 *   UTF8-1      = %x00-7F
	 *   UTF8-2      = %xC2-DF UTF8-tail
	 *
	 *   UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
	 *                 %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
	 *   UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
	 *                 %xF4 %x80-8F 2( UTF8-tail )
	 *   UTF8-tail   = %x80-BF
	 *   ---------------------------------------------------------------------
	 * </pre>
	 * @param $str (string) string to process.
	 * @return array containing codepoints (UTF-8 characters values)
	 * @protected
	 * @author Nicola Asuni
	 * @since 1.53.0.TC005 (2005-01-05)
	 */",
 "/**
	 * Converts UTF-8 strings to UTF16-BE.<br>
	 * @param $str (string) string to process.
	 * @param $setbom (boolean) if true set the Byte Order Mark (BOM = 0xFEFF)
	 * @return string
	 * @author Nicola Asuni
	 * @since 1.53.0.TC005 (2005-01-05)
	 * @see UTF8StringToArray(), arrUTF8ToUTF16BE()
	 * @protected
	 */",
 "/**
	 * Converts UTF-8 strings to Latin1 when using the standard 14 core fonts.<br>
	 * @param $str (string) string to process.
	 * @return string
	 * @author Andrew Whitehead, Nicola Asuni
	 * @protected
	 * @since 3.2.000 (2008-06-23)
	 */",
 "/**
	 * Converts UTF-8 characters array to array of Latin1 characters<br>
	 * @param $unicode (array) array containing UTF-8 unicode values
	 * @return array
	 * @author Nicola Asuni
	 * @protected
	 * @since 4.8.023 (2010-01-15)
	 */",
 "/**
	 * Converts array of UTF-8 characters to UTF16-BE string.<br>
	 * Based on: http://www.faqs.org/rfcs/rfc2781.html
	 * <pre>
	 *   Encoding UTF-16:
	 *
	 *   Encoding of a single character from an ISO 10646 character value to
	 *    UTF-16 proceeds as follows. Let U be the character number, no greater
	 *    than 0x10FFFF.
	 *
	 *    1) If U < 0x10000, encode U as a 16-bit unsigned integer and
	 *       terminate.
	 *
	 *    2) Let U\\' = U - 0x10000. Because U is less than or equal to 0x10FFFF,
	 *       U\\' must be less than or equal to 0xFFFFF. That is, U\\' can be
	 *       represented in 20 bits.
	 *
	 *    3) Initialize two 16-bit unsigned integers, W1 and W2, to 0xD800 and
	 *       0xDC00, respectively. These integers each have 10 bits free to
	 *       encode the character value, for a total of 20 bits.
	 *
	 *    4) Assign the 10 high-order bits of the 20-bit U\\' to the 10 low-order
	 *       bits of W1 and the 10 low-order bits of U\\' to the 10 low-order
	 *       bits of W2. Terminate.
	 *
	 *    Graphically, steps 2 through 4 look like:
	 *    U\\' = yyyyyyyyyyxxxxxxxxxx
	 *    W1 = 110110yyyyyyyyyy
	 *    W2 = 110111xxxxxxxxxx
	 * </pre>
	 * @param $unicode (array) array containing UTF-8 unicode values
	 * @param $setbom (boolean) if true set the Byte Order Mark (BOM = 0xFEFF)
	 * @return string
	 * @protected
	 * @author Nicola Asuni
	 * @since 2.1.000 (2008-01-08)
	 * @see UTF8ToUTF16BE()
	 */",
 "/**
	 * Set header font.
	 * @param $font (array) font
	 * @public
	 * @since 1.1
	 */",
 "/**
	 * Get header font.
	 * @return array()
	 * @public
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * Set footer font.
	 * @param $font (array) font
	 * @public
	 * @since 1.1
	 */",
 "/**
	 * Get Footer font.
	 * @return array()
	 * @public
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * Set language array.
	 * @param $language (array)
	 * @public
	 * @since 1.1
	 */",
 "/**
	 * Returns the PDF data.
	 * @public
	 */",
 "/**
	 * Output anchor link.
	 * @param $url (string) link URL or internal link (i.e.: &lt;a href=\"#23,4.5\"&gt;link to page 23 at 4.5 Y position&lt;/a&gt;)
	 * @param $name (string) link name
	 * @param $fill (boolean) Indicates if the cell background must be painted (true) or transparent (false).
	 * @param $firstline (boolean) if true prints only the first line and return the remaining string.
	 * @param $color (array) array of RGB text color
	 * @param $style (string) font style (U, D, B, I)
	 * @param $firstblock (boolean) if true the string is the starting of a line.
	 * @return the number of cells used or the remaining text if $firstline = true;
	 * @public
	 */",
 "/**
	 * Returns an array (RGB or CMYK) from an html color name, or a six-digit (i.e. #3FE5AA), or three-digit (i.e. #7FF) hexadecimal color, or a javascript color array, or javascript color name.
	 * @param $hcolor (string) HTML color.
	 * @param $defcol (array) Color to return in case of error.
	 * @return array RGB or CMYK color, or false in case of error.
	 * @public
	 */",
 "/**
	 * Converts pixels to User\\'s Units.
	 * @param $px (int) pixels
	 * @return float value in user\\'s unit
	 * @public
	 * @see setImageScale(), getImageScale()
	 */",
 "/**
	 * Reverse function for htmlentities.
	 * Convert entities in UTF-8.
	 * @param $text_to_convert (string) Text to convert.
	 * @return string converted text string
	 * @public
	 */",
 "/**
	 * Returns a string containing random data to be used as a seed for encryption methods.
	 * @param $seed (string) starting seed value
	 * @return string containing random data
	 * @author Nicola Asuni
	 * @since 5.9.006 (2010-10-19)
	 * @protected
	 */",
 "/**
	 * Compute encryption key depending on object number where the encrypted data is stored.
	 * This is used for all strings and streams without crypt filter specifier.
	 * @param $n (int) object number
	 * @return int object key
	 * @protected
	 * @author Nicola Asuni
	 * @since 2.0.000 (2008-01-02)
	 */",
 "/**
	 * Encrypt the input string.
	 * @param $n (int) object number
	 * @param $s (string) data string to encrypt
	 * @return encrypted string
	 * @protected
	 * @author Nicola Asuni
	 * @since 5.0.005 (2010-05-11)
	 */",
 "/**
	 * Put encryption on PDF document.
	 * @protected
	 * @author Nicola Asuni
	 * @since 2.0.000 (2008-01-02)
	 */",
 "/**
	 * Returns the input text encrypted using RC4 algorithm and the specified key.
	 * RC4 is the standard encryption algorithm used in PDF format
	 * @param $key (string) encryption key
	 * @param $text (String) input text to be encrypted
	 * @return String encrypted text
	 * @protected
	 * @since 2.0.000 (2008-01-02)
	 * @author Klemen Vodopivec, Nicola Asuni
	 */",
 "/**
	 * Returns the input text exrypted using AES algorithm and the specified key.
	 * This method requires mcrypt.
	 * @param $key (string) encryption key
	 * @param $text (String) input text to be encrypted
	 * @return String encrypted text
	 * @protected
	 * @author Nicola Asuni
	 * @since 5.0.005 (2010-05-11)
	 */",
 "/**
	 * Encrypts a string using MD5 and returns it\\'s value as a binary string.
	 * @param $str (string) input string
	 * @return String MD5 encrypted binary string
	 * @protected
	 * @since 2.0.000 (2008-01-02)
	 * @author Klemen Vodopivec
	 */",
 "/**
	 * Compute U value (used for encryption)
	 * @return string U value
	 * @protected
	 * @since 2.0.000 (2008-01-02)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Compute UE value (used for encryption)
	 * @return string UE value
	 * @protected
	 * @since 5.9.006 (2010-10-19)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Compute O value (used for encryption)
	 * @return string O value
	 * @protected
	 * @since 2.0.000 (2008-01-02)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Compute OE value (used for encryption)
	 * @return string OE value
	 * @protected
	 * @since 5.9.006 (2010-10-19)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Convert password for AES-256 encryption mode
	 * @param $password (string) password
	 * @return string password
	 * @protected
	 * @since 5.9.006 (2010-10-19)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Compute encryption key
	 * @protected
	 * @since 2.0.000 (2008-01-02)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Return the premission code used on encryption (P value).
	 * @param $permissions (Array) the set of permissions (specify the ones you want to block).
	 * @param $mode (int) encryption strength: 0 = RC4 40 bit; 1 = RC4 128 bit; 2 = AES 128 bit; 3 = AES 256 bit.
	 * @protected
	 * @since 5.0.005 (2010-05-12)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Set document protection
	 * Remark: the protection against modification is for people who have the full Acrobat product.
	 * If you don\\'t set any password, the document will open as usual. If you set a user password, the PDF viewer will ask for it before displaying the document. The master password, if different from the user one, can be used to get full access.
	 * Note: protecting a document requires to encrypt it, which increases the processing time a lot. This can cause a PHP time-out in some cases, especially if the document contains images or fonts.
	 * @param $permissions (Array) the set of permissions (specify the ones you want to block):<ul><li>print : Print the document;</li><li>modify : Modify the contents of the document by operations other than those controlled by \\'fill-forms\\', \\'extract\\' and \\'assemble\\';</li><li>copy : Copy or otherwise extract text and graphics from the document;</li><li>annot-forms : Add or modify text annotations, fill in interactive form fields, and, if \\'modify\\' is also set, create or modify interactive form fields (including signature fields);</li><li>fill-forms : Fill in existing interactive form fields (including signature fields), even if \\'annot-forms\\' is not specified;</li><li>extract : Extract text and graphics (in support of accessibility to users with disabilities or for other purposes);</li><li>assemble : Assemble the document (insert, rotate, or delete pages and create bookmarks or thumbnail images), even if \\'modify\\' is not set;</li><li>print-high : Print the document to a representation from which a faithful digital copy of the PDF content could be generated. When this is not set, printing is limited to a low-level representation of the appearance, possibly of degraded quality.</li><li>owner : (inverted logic - only for public-key) when set permits change of encryption and enables all other permissions.</li></ul>
	 * @param $user_pass (String) user password. Empty by default.
	 * @param $owner_pass (String) owner password. If not specified, a random value is used.
	 * @param $mode (int) encryption strength: 0 = RC4 40 bit; 1 = RC4 128 bit; 2 = AES 128 bit; 3 = AES 256 bit.
	 * @param $pubkeys (String) array of recipients containing public-key certificates (\\'c\\') and permissions (\\'p\\'). For example: array(array(\\'c\\' => \\'file://../tcpdf.crt\\', \\'p\\' => array(\\'print\\')))
	 * @public
	 * @since 2.0.000 (2008-01-02)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Convert hexadecimal string to string
	 * @param $bs (string) byte-string to convert
	 * @return String
	 * @protected
	 * @since 5.0.005 (2010-05-12)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Convert string to hexadecimal string (byte string)
	 * @param $s (string) string to convert
	 * @return byte string
	 * @protected
	 * @since 5.0.010 (2010-05-17)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Convert encryption P value to a string of bytes, low-order byte first.
	 * @param $protection (string) 32bit encryption permission value (P value)
	 * @return String
	 * @protected
	 * @since 5.0.005 (2010-05-12)
	 * @author Nicola Asuni
	 */",
 "/**
	 * Starts a 2D tranformation saving current graphic state.
	 * This function must be called before scaling, mirroring, translation, rotation and skewing.
	 * Use StartTransform() before, and StopTransform() after the transformations to restore the normal behavior.
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Stops a 2D tranformation restoring previous graphic state.
	 * This function must be called after scaling, mirroring, translation, rotation and skewing.
	 * Use StartTransform() before, and StopTransform() after the transformations to restore the normal behavior.
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Horizontal Scaling.
	 * @param $s_x (float) scaling factor for width as percent. 0 is not allowed.
	 * @param $x (int) abscissa of the scaling center. Default is current x position
	 * @param $y (int) ordinate of the scaling center. Default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Vertical Scaling.
	 * @param $s_y (float) scaling factor for height as percent. 0 is not allowed.
	 * @param $x (int) abscissa of the scaling center. Default is current x position
	 * @param $y (int) ordinate of the scaling center. Default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Vertical and horizontal proportional Scaling.
	 * @param $s (float) scaling factor for width and height as percent. 0 is not allowed.
	 * @param $x (int) abscissa of the scaling center. Default is current x position
	 * @param $y (int) ordinate of the scaling center. Default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Vertical and horizontal non-proportional Scaling.
	 * @param $s_x (float) scaling factor for width as percent. 0 is not allowed.
	 * @param $s_y (float) scaling factor for height as percent. 0 is not allowed.
	 * @param $x (int) abscissa of the scaling center. Default is current x position
	 * @param $y (int) ordinate of the scaling center. Default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Horizontal Mirroring.
	 * @param $x (int) abscissa of the point. Default is current x position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Verical Mirroring.
	 * @param $y (int) ordinate of the point. Default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Point reflection mirroring.
	 * @param $x (int) abscissa of the point. Default is current x position
	 * @param $y (int) ordinate of the point. Default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Reflection against a straight line through point (x, y) with the gradient angle (angle).
	 * @param $angle (float) gradient angle of the straight line. Default is 0 (horizontal line).
	 * @param $x (int) abscissa of the point. Default is current x position
	 * @param $y (int) ordinate of the point. Default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Translate graphic object horizontally.
	 * @param $t_x (int) movement to the right (or left for RTL)
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Translate graphic object vertically.
	 * @param $t_y (int) movement to the bottom
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Translate graphic object horizontally and vertically.
	 * @param $t_x (int) movement to the right
	 * @param $t_y (int) movement to the bottom
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Rotate object.
	 * @param $angle (float) angle in degrees for counter-clockwise rotation
	 * @param $x (int) abscissa of the rotation center. Default is current x position
	 * @param $y (int) ordinate of the rotation center. Default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Skew horizontally.
	 * @param $angle_x (float) angle in degrees between -90 (skew to the left) and 90 (skew to the right)
	 * @param $x (int) abscissa of the skewing center. default is current x position
	 * @param $y (int) ordinate of the skewing center. default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Skew vertically.
	 * @param $angle_y (float) angle in degrees between -90 (skew to the bottom) and 90 (skew to the top)
	 * @param $x (int) abscissa of the skewing center. default is current x position
	 * @param $y (int) ordinate of the skewing center. default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Skew.
	 * @param $angle_x (float) angle in degrees between -90 (skew to the left) and 90 (skew to the right)
	 * @param $angle_y (float) angle in degrees between -90 (skew to the bottom) and 90 (skew to the top)
	 * @param $x (int) abscissa of the skewing center. default is current x position
	 * @param $y (int) ordinate of the skewing center. default is current y position
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Apply graphic transformations.
	 * @param $tm (array) transformation matrix
	 * @protected
	 * @since 2.1.000 (2008-01-07)
	 * @see StartTransform(), StopTransform()
	 */",
 "/**
	 * Defines the line width. By default, the value equals 0.2 mm. The method can be called before the first page is created and the value is retained from page to page.
	 * @param $width (float) The width.
	 * @public
	 * @since 1.0
	 * @see Line(), Rect(), Cell(), MultiCell()
	 */",
 "/**
	 * Returns the current the line width.
	 * @return int Line width
	 * @public
	 * @since 2.1.000 (2008-01-07)
	 * @see Line(), SetLineWidth()
	 */",
 "/**
	 * Set line style.
	 * @param $style (array) Line style. Array with keys among the following:
	 * <ul>
	 *	 <li>width (float): Width of the line in user units.</li>
	 *	 <li>cap (string): Type of cap to put on the line. Possible values are:
	 * butt, round, square. The difference between \"square\" and \"butt\" is that
	 * \"square\" projects a flat end past the end of the line.</li>
	 *	 <li>join (string): Type of join. Possible values are: miter, round,
	 * bevel.</li>
	 *	 <li>dash (mixed): Dash pattern. Is 0 (without dash) or string with
	 * series of length values, which are the lengths of the on and off dashes.
	 * For example: \"2\" represents 2 on, 2 off, 2 on, 2 off, ...; \"2,1\" is 2 on,
	 * 1 off, 2 on, 1 off, ...</li>
	 *	 <li>phase (integer): Modifier on the dash pattern which is used to shift
	 * the point at which the pattern starts.</li>
	 *	 <li>color (array): Draw color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K).</li>
	 * </ul>
	 * @param $ret (boolean) if true do not send the command.
	 * @return string the PDF command
	 * @public
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Begin a new subpath by moving the current point to coordinates (x, y), omitting any connecting line segment.
	 * @param $x (float) Abscissa of point.
	 * @param $y (float) Ordinate of point.
	 * @protected
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Append a straight line segment from the current point to the point (x, y).
	 * The new current point shall be (x, y).
	 * @param $x (float) Abscissa of end point.
	 * @param $y (float) Ordinate of end point.
	 * @protected
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Append a rectangle to the current path as a complete subpath, with lower-left corner (x, y) and dimensions widthand height in user space.
	 * @param $x (float) Abscissa of upper-left corner.
	 * @param $y (float) Ordinate of upper-left corner.
	 * @param $w (float) Width.
	 * @param $h (float) Height.
	 * @param $op (string) options
	 * @protected
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Append a cubic B?zier curve to the current path. The curve shall extend from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the B?zier control points.
	 * The new current point shall be (x3, y3).
	 * @param $x1 (float) Abscissa of control point 1.
	 * @param $y1 (float) Ordinate of control point 1.
	 * @param $x2 (float) Abscissa of control point 2.
	 * @param $y2 (float) Ordinate of control point 2.
	 * @param $x3 (float) Abscissa of end point.
	 * @param $y3 (float) Ordinate of end point.
	 * @protected
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Append a cubic B?zier curve to the current path. The curve shall extend from the current point to the point (x3, y3), using the current point and (x2, y2) as the B?zier control points.
	 * The new current point shall be (x3, y3).
	 * @param $x2 (float) Abscissa of control point 2.
	 * @param $y2 (float) Ordinate of control point 2.
	 * @param $x3 (float) Abscissa of end point.
	 * @param $y3 (float) Ordinate of end point.
	 * @protected
	 * @since 4.9.019 (2010-04-26)
	 */",
 "/**
	 * Append a cubic B?zier curve to the current path. The curve shall extend from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the B?zier control points.
	 * The new current point shall be (x3, y3).
	 * @param $x1 (float) Abscissa of control point 1.
	 * @param $y1 (float) Ordinate of control point 1.
	 * @param $x3 (float) Abscissa of end point.
	 * @param $y3 (float) Ordinate of end point.
	 * @protected
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Draws a line between two points.
	 * @param $x1 (float) Abscissa of first point.
	 * @param $y1 (float) Ordinate of first point.
	 * @param $x2 (float) Abscissa of second point.
	 * @param $y2 (float) Ordinate of second point.
	 * @param $style (array) Line style. Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @public
	 * @since 1.0
	 * @see SetLineWidth(), SetDrawColor(), SetLineStyle()
	 */",
 "/**
	 * Draws a rectangle.
	 * @param $x (float) Abscissa of upper-left corner.
	 * @param $y (float) Ordinate of upper-left corner.
	 * @param $w (float) Width.
	 * @param $h (float) Height.
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $border_style (array) Border style of rectangle. Array with keys among the following:
	 * <ul>
	 *	 <li>all: Line style of all borders. Array like for SetLineStyle().</li>
	 *	 <li>L, T, R, B or combinations: Line style of left, top, right or bottom border. Array like for SetLineStyle().</li>
	 * </ul>
	 * If a key is not present or is null, not draws the border. Default value: default line style (empty array).
	 * @param $border_style (array) Border style of rectangle. Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K). Default value: default color (empty array).
	 * @public
	 * @since 1.0
	 * @see SetLineStyle()
	 */",
 "/**
	 * Draws a Bezier curve.
	 * The Bezier curve is a tangent to the line between the control points at
	 * either end of the curve.
	 * @param $x0 (float) Abscissa of start point.
	 * @param $y0 (float) Ordinate of start point.
	 * @param $x1 (float) Abscissa of control point 1.
	 * @param $y1 (float) Ordinate of control point 1.
	 * @param $x2 (float) Abscissa of control point 2.
	 * @param $y2 (float) Ordinate of control point 2.
	 * @param $x3 (float) Abscissa of end point.
	 * @param $y3 (float) Ordinate of end point.
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $line_style (array) Line style of curve. Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K). Default value: default color (empty array).
	 * @public
	 * @see SetLineStyle()
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Draws a poly-Bezier curve.
	 * Each Bezier curve segment is a tangent to the line between the control points at
	 * either end of the curve.
	 * @param $x0 (float) Abscissa of start point.
	 * @param $y0 (float) Ordinate of start point.
	 * @param $segments (float) An array of bezier descriptions. Format: array(x1, y1, x2, y2, x3, y3).
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $line_style (array) Line style of curve. Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K). Default value: default color (empty array).
	 * @public
	 * @see SetLineStyle()
	 * @since 3.0008 (2008-05-12)
	 */",
 "/**
	 * Draws an ellipse.
	 * An ellipse is formed from n Bezier curves.
	 * @param $x0 (float) Abscissa of center point.
	 * @param $y0 (float) Ordinate of center point.
	 * @param $rx (float) Horizontal radius.
	 * @param $ry (float) Vertical radius (if ry = 0 then is a circle, see Circle()). Default value: 0.
	 * @param $angle: (float) Angle oriented (anti-clockwise). Default value: 0.
	 * @param $astart: (float) Angle start of draw line. Default value: 0.
	 * @param $afinish: (float) Angle finish of draw line. Default value: 360.
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $line_style (array) Line style of ellipse. Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K). Default value: default color (empty array).
	 * @param $nc (integer) Number of curves used to draw a 90 degrees portion of ellipse.
	 * @author Nicola Asuni
	 * @public
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Append an elliptical arc to the current path.
	 * An ellipse is formed from n Bezier curves.
	 * @param $xc (float) Abscissa of center point.
	 * @param $yc (float) Ordinate of center point.
	 * @param $rx (float) Horizontal radius.
	 * @param $ry (float) Vertical radius (if ry = 0 then is a circle, see Circle()). Default value: 0.
	 * @param $xang: (float) Angle between the X-axis and the major axis of the ellipse. Default value: 0.
	 * @param $angs: (float) Angle start of draw line. Default value: 0.
	 * @param $angf: (float) Angle finish of draw line. Default value: 360.
	 * @param $pie (boolean) if true do not mark the border point (used to draw pie sectors).
	 * @param $nc (integer) Number of curves used to draw a 90 degrees portion of ellipse.
	 * @param $startpoint (boolean) if true output a starting point.
	 * @param $ccw (boolean) if true draws in counter-clockwise.
	 * @param $svg (boolean) if true the angles are in svg mode (already calculated).
	 * @return array bounding box coordinates (x min, y min, x max, y max)
	 * @author Nicola Asuni
	 * @protected
	 * @since 4.9.019 (2010-04-26)
	 */",
 "/**
	 * Draws a circle.
	 * A circle is formed from n Bezier curves.
	 * @param $x0 (float) Abscissa of center point.
	 * @param $y0 (float) Ordinate of center point.
	 * @param $r (float) Radius.
	 * @param $angstr: (float) Angle start of draw line. Default value: 0.
	 * @param $angend: (float) Angle finish of draw line. Default value: 360.
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $line_style (array) Line style of circle. Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(red, green, blue). Default value: default color (empty array).
	 * @param $nc (integer) Number of curves used to draw a 90 degrees portion of circle.
	 * @public
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Draws a polygonal line
	 * @param $p (array) Points 0 to ($np - 1). Array with values (x0, y0, x1, y1,..., x(np-1), y(np - 1))
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $line_style (array) Line style of polygon. Array with keys among the following:
	 * <ul>
	 *	 <li>all: Line style of all lines. Array like for SetLineStyle().</li>
	 *	 <li>0 to ($np - 1): Line style of each line. Array like for SetLineStyle().</li>
	 * </ul>
	 * If a key is not present or is null, not draws the line. Default value is default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K). Default value: default color (empty array).
	 * @since 4.8.003 (2009-09-15)
	 * @public
	 */",
 "/**
	 * Draws a polygon.
	 * @param $p (array) Points 0 to ($np - 1). Array with values (x0, y0, x1, y1,..., x(np-1), y(np - 1))
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $line_style (array) Line style of polygon. Array with keys among the following:
	 * <ul>
	 *	 <li>all: Line style of all lines. Array like for SetLineStyle().</li>
	 *	 <li>0 to ($np - 1): Line style of each line. Array like for SetLineStyle().</li>
	 * </ul>
	 * If a key is not present or is null, not draws the line. Default value is default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K). Default value: default color (empty array).
	 * @param $closed (boolean) if true the polygon is closes, otherwise will remain open
	 * @public
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Draws a regular polygon.
	 * @param $x0 (float) Abscissa of center point.
	 * @param $y0 (float) Ordinate of center point.
	 * @param $r: (float) Radius of inscribed circle.
	 * @param $ns (integer) Number of sides.
	 * @param $angle (float) Angle oriented (anti-clockwise). Default value: 0.
	 * @param $draw_circle (boolean) Draw inscribed circle or not. Default value: false.
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $line_style (array) Line style of polygon sides. Array with keys among the following:
	 * <ul>
	 *	 <li>all: Line style of all sides. Array like for SetLineStyle().</li>
	 *	 <li>0 to ($ns - 1): Line style of each side. Array like for SetLineStyle().</li>
	 * </ul>
	 * If a key is not present or is null, not draws the side. Default value is default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(red, green, blue). Default value: default color (empty array).
	 * @param $circle_style (string) Style of rendering of inscribed circle (if draws). Possible values are:
	 * <ul>
	 *	 <li>D or empty string: Draw (default).</li>
	 *	 <li>F: Fill.</li>
	 *	 <li>DF or FD: Draw and fill.</li>
	 *	 <li>CNZ: Clipping mode (using the even-odd rule to determine which regions lie inside the clipping path).</li>
	 *	 <li>CEO: Clipping mode (using the nonzero winding number rule to determine which regions lie inside the clipping path).</li>
	 * </ul>
	 * @param $circle_outLine_style (array) Line style of inscribed circle (if draws). Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $circle_fill_color (array) Fill color of inscribed circle (if draws). Format: array(red, green, blue). Default value: default color (empty array).
	 * @public
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Draws a star polygon
	 * @param $x0 (float) Abscissa of center point.
	 * @param $y0 (float) Ordinate of center point.
	 * @param $r (float) Radius of inscribed circle.
	 * @param $nv (integer) Number of vertices.
	 * @param $ng (integer) Number of gap (if ($ng % $nv = 1) then is a regular polygon).
	 * @param $angle: (float) Angle oriented (anti-clockwise). Default value: 0.
	 * @param $draw_circle: (boolean) Draw inscribed circle or not. Default value is false.
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $line_style (array) Line style of polygon sides. Array with keys among the following:
	 * <ul>
	 *	 <li>all: Line style of all sides. Array like for
	 * SetLineStyle().</li>
	 *	 <li>0 to (n - 1): Line style of each side. Array like for SetLineStyle().</li>
	 * </ul>
	 * If a key is not present or is null, not draws the side. Default value is default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(red, green, blue). Default value: default color (empty array).
	 * @param $circle_style (string) Style of rendering of inscribed circle (if draws). Possible values are:
	 * <ul>
	 *	 <li>D or empty string: Draw (default).</li>
	 *	 <li>F: Fill.</li>
	 *	 <li>DF or FD: Draw and fill.</li>
	 *	 <li>CNZ: Clipping mode (using the even-odd rule to determine which regions lie inside the clipping path).</li>
	 *	 <li>CEO: Clipping mode (using the nonzero winding number rule to determine which regions lie inside the clipping path).</li>
	 * </ul>
	 * @param $circle_outLine_style (array) Line style of inscribed circle (if draws). Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $circle_fill_color (array) Fill color of inscribed circle (if draws). Format: array(red, green, blue). Default value: default color (empty array).
	 * @public
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Draws a rounded rectangle.
	 * @param $x (float) Abscissa of upper-left corner.
	 * @param $y (float) Ordinate of upper-left corner.
	 * @param $w (float) Width.
	 * @param $h (float) Height.
	 * @param $r (float) the radius of the circle used to round off the corners of the rectangle.
	 * @param $round_corner (string) Draws rounded corner or not. String with a 0 (not rounded i-corner) or 1 (rounded i-corner) in i-position. Positions are, in order and begin to 0: top left, top right, bottom right and bottom left. Default value: all rounded corner (\"1111\").
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $border_style (array) Border style of rectangle. Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K). Default value: default color (empty array).
	 * @public
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Draws a rounded rectangle.
	 * @param $x (float) Abscissa of upper-left corner.
	 * @param $y (float) Ordinate of upper-left corner.
	 * @param $w (float) Width.
	 * @param $h (float) Height.
	 * @param $rx (float) the x-axis radius of the ellipse used to round off the corners of the rectangle.
	 * @param $ry (float) the y-axis radius of the ellipse used to round off the corners of the rectangle.
	 * @param $round_corner (string) Draws rounded corner or not. String with a 0 (not rounded i-corner) or 1 (rounded i-corner) in i-position. Positions are, in order and begin to 0: top left, top right, bottom right and bottom left. Default value: all rounded corner (\"1111\").
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $border_style (array) Border style of rectangle. Array like for SetLineStyle(). Default value: default line style (empty array).
	 * @param $fill_color (array) Fill color. Format: array(GREY) or array(R,G,B) or array(C,M,Y,K). Default value: default color (empty array).
	 * @public
	 * @since 4.9.019 (2010-04-22)
	 */",
 "/**
	 * Draws a grahic arrow.
	 * @param $x0 (float) Abscissa of first point.
	 * @param $y0 (float) Ordinate of first point.
	 * @param $x1 (float) Abscissa of second point.
	 * @param $y1 (float) Ordinate of second point.
	 * @param $head_style (int) (0 = draw only arrowhead arms, 1 = draw closed arrowhead, but no fill, 2 = closed and filled arrowhead, 3 = filled arrowhead)
	 * @param $arm_size (float) length of arrowhead arms
	 * @param $arm_angle (int) angle between an arm and the shaft
	 * @author Piotr Galecki, Nicola Asuni, Andy Meier
	 * @since 4.6.018 (2009-07-10)
	 */",
 "/**
	 * Reverse the RLT substrings using the Bidirectional Algorithm (http://unicode.org/reports/tr9/).
	 * @param $str (string) string to manipulate.
	 * @param $setbom (bool) if true set the Byte Order Mark (BOM = 0xFEFF)
	 * @param $forcertl (bool) if true forces RTL text direction
	 * @return string
	 * @protected
	 * @author Nicola Asuni
	 * @since 2.1.000 (2008-01-08)
	 */",
 "/**
	 * Reverse the RLT substrings array using the Bidirectional Algorithm (http://unicode.org/reports/tr9/).
	 * @param $arr (array) array of unicode values.
	 * @param $str (string) string to manipulate (or empty value).
	 * @param $setbom (bool) if true set the Byte Order Mark (BOM = 0xFEFF)
	 * @param $forcertl (bool) if true forces RTL text direction
	 * @return string
	 * @protected
	 * @author Nicola Asuni
	 * @since 4.9.000 (2010-03-27)
	 */",
 "/**
	 * Reverse the RLT substrings using the Bidirectional Algorithm (http://unicode.org/reports/tr9/).
	 * @param $ta (array) array of characters composing the string.
	 * @param $str (string) string to process
	 * @param $forcertl (bool) if \\'R\\' forces RTL, if \\'L\\' forces LTR
	 * @return array of unicode chars
	 * @author Nicola Asuni
	 * @protected
	 * @since 2.4.000 (2008-03-06)
	 */",
 "/**
	 * Encode a name object.
	 * @param $name (string) Name object to encode.
	 * @return (string) Encoded name object.
	 * @protected
	 * @author Nicola Asuni
	 * @since 5.9.097 (2011-06-23)
	 */",
 "/**
	 * Add a Named Destination.
	 * NOTE: destination names are unique, so only last entry will be saved.
	 * @param $name (string) Destination name.
	 * @param $y (float) Y position in user units of the destiantion on the selected page (default = -1 = current position; 0 = page start;).
	 * @param $page (int) Target page number (leave empty for current page).
	 * @return (string) Stripped named destination identifier or false in case of error.
	 * @public
	 * @author Christian Deligant, Nicola Asuni
	 * @since 5.9.097 (2011-06-23)
	 */",
 "/**
	 * Return the Named Destination array.
	 * @return (array) Named Destination array.
	 * @public
	 * @author Nicola Asuni
	 * @since 5.9.097 (2011-06-23)
	 */",
 "/**
	 * Create a javascript PDF string.
	 * @protected
	 * @author Johannes G?ntert, Nicola Asuni
	 * @since 5.9.098 (2011-06-23)
	 */",
 "/**
	 * Adds a bookmark - alias for Bookmark().
	 * @param $txt (string) Bookmark description.
	 * @param $level (int) Bookmark level (minimum value is 0).
	 * @param $y (float) Y position in user units of the bookmark on the selected page (default = -1 = current position; 0 = page start;).
	 * @param $page (int) Target page number (leave empty for current page).
	 * @param $style (string) Font style: B = Bold, I = Italic, BI = Bold + Italic.
	 * @param $color (array) RGB color array (values from 0 to 255).
	 * @public
	 */",
 "/**
	 * Adds a bookmark.
	 * @param $txt (string) Bookmark description.
	 * @param $level (int) Bookmark level (minimum value is 0).
	 * @param $y (float) Y position in user units of the bookmark on the selected page (default = -1 = current position; 0 = page start;).
	 * @param $page (int) Target page number (leave empty for current page).
	 * @param $style (string) Font style: B = Bold, I = Italic, BI = Bold + Italic.
	 * @param $color (array) RGB color array (values from 0 to 255).
	 * @public
	 * @author Olivier Plathey, Nicola Asuni
	 * @since 2.1.002 (2008-02-12)
	 */",
 "/**
	 * Sort bookmarks for page and key.
	 * @protected
	 * @since 5.9.119 (2011-09-19)
	 */",
 "/**
	 * Create a bookmark PDF string.
	 * @protected
	 * @author Olivier Plathey, Nicola Asuni
	 * @since 2.1.002 (2008-02-12)
	 */",
 "/**
	 * Adds a javascript
	 * @param $script (string) Javascript code
	 * @public
	 * @author Johannes G?ntert, Nicola Asuni
	 * @since 2.1.002 (2008-02-12)
	 */",
 "/**
	 * Adds a javascript object and return object ID
	 * @param $script (string) Javascript code
	 * @param $onload (boolean) if true executes this object when opening the document
	 * @return int internal object ID
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-07)
	 */",
 "/**
	 * Create a javascript PDF string.
	 * @protected
	 * @author Johannes G?ntert, Nicola Asuni
	 * @since 2.1.002 (2008-02-12)
	 */",
 "/**
	 * Convert color to javascript color.
	 * @param $color (string) color name or \"#RRGGBB\"
	 * @protected
	 * @author Denis Van Nuffelen, Nicola Asuni
	 * @since 2.1.002 (2008-02-12)
	 */",
 "/**
	 * Adds a javascript form field.
	 * @param $type (string) field type
	 * @param $name (string) field name
	 * @param $x (int) horizontal position
	 * @param $y (int) vertical position
	 * @param $w (int) width
	 * @param $h (int) height
	 * @param $prop (array) javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @protected
	 * @author Denis Van Nuffelen, Nicola Asuni
	 * @since 2.1.002 (2008-02-12)
	 */",
 "/**
	 * Convert JavaScript form fields properties array to Annotation Properties array.
	 * @param $prop (array) javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @return array of annotation properties
	 * @protected
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-06)
	 */",
 "/**
	 * Set default properties for form fields.
	 * @param $prop (array) javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-06)
	 */",
 "/**
	 * Return the default properties for form fields.
	 * @return array $prop javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-06)
	 */",
 "/**
	 * Creates a text field
	 * @param $name (string) field name
	 * @param $w (float) Width of the rectangle
	 * @param $h (float) Height of the rectangle
	 * @param $prop (array) javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @param $opt (array) annotation parameters. Possible values are described on official PDF32000_2008 reference.
	 * @param $x (float) Abscissa of the upper-left corner of the rectangle
	 * @param $y (float) Ordinate of the upper-left corner of the rectangle
	 * @param $js (boolean) if true put the field using JavaScript (requires Acrobat Writer to be rendered).
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-07)
	 */",
 "/**
	 * Creates a RadioButton field.
	 * @param $name (string) Field name.
	 * @param $w (int) Width or the radio button.
	 * @param $prop (array) Javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @param $opt (array) Annotation parameters. Possible values are described on official PDF32000_2008 reference.
	 * @param $onvalue (string) Value to be returned if selected.
	 * @param $checked (boolean) Define the initial state.
	 * @param $x (float) Abscissa of the upper-left corner of the rectangle
	 * @param $y (float) Ordinate of the upper-left corner of the rectangle
	 * @param $js (boolean) If true put the field using JavaScript (requires Acrobat Writer to be rendered).
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-07)
	 */",
 "/**
	 * Creates a List-box field
	 * @param $name (string) field name
	 * @param $w (int) width
	 * @param $h (int) height
	 * @param $values (array) array containing the list of values.
	 * @param $prop (array) javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @param $opt (array) annotation parameters. Possible values are described on official PDF32000_2008 reference.
	 * @param $x (float) Abscissa of the upper-left corner of the rectangle
	 * @param $y (float) Ordinate of the upper-left corner of the rectangle
	 * @param $js (boolean) if true put the field using JavaScript (requires Acrobat Writer to be rendered).
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-07)
	 */",
 "/**
	 * Creates a Combo-box field
	 * @param $name (string) field name
	 * @param $w (int) width
	 * @param $h (int) height
	 * @param $values (array) array containing the list of values.
	 * @param $prop (array) javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @param $opt (array) annotation parameters. Possible values are described on official PDF32000_2008 reference.
	 * @param $x (float) Abscissa of the upper-left corner of the rectangle
	 * @param $y (float) Ordinate of the upper-left corner of the rectangle
	 * @param $js (boolean) if true put the field using JavaScript (requires Acrobat Writer to be rendered).
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-07)
	 */",
 "/**
	 * Creates a CheckBox field
	 * @param $name (string) field name
	 * @param $w (int) width
	 * @param $checked (boolean) define the initial state.
	 * @param $prop (array) javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @param $opt (array) annotation parameters. Possible values are described on official PDF32000_2008 reference.
	 * @param $onvalue (string) value to be returned if selected.
	 * @param $x (float) Abscissa of the upper-left corner of the rectangle
	 * @param $y (float) Ordinate of the upper-left corner of the rectangle
	 * @param $js (boolean) if true put the field using JavaScript (requires Acrobat Writer to be rendered).
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-07)
	 */",
 "/**
	 * Creates a button field
	 * @param $name (string) field name
	 * @param $w (int) width
	 * @param $h (int) height
	 * @param $caption (string) caption.
	 * @param $action (mixed) action triggered by pressing the button. Use a string to specify a javascript action. Use an array to specify a form action options as on section 12.7.5 of PDF32000_2008.
	 * @param $prop (array) javascript field properties. Possible values are described on official Javascript for Acrobat API reference.
	 * @param $opt (array) annotation parameters. Possible values are described on official PDF32000_2008 reference.
	 * @param $x (float) Abscissa of the upper-left corner of the rectangle
	 * @param $y (float) Ordinate of the upper-left corner of the rectangle
	 * @param $js (boolean) if true put the field using JavaScript (requires Acrobat Writer to be rendered).
	 * @public
	 * @author Nicola Asuni
	 * @since 4.8.000 (2009-09-07)
	 */",
 "/**
	 * Add certification signature (DocMDP or UR3)
	 * You can set only one signature type
	 * @protected
	 * @author Nicola Asuni
	 * @since 4.6.008 (2009-05-07)
	 */",
 "/**
	 * Set User\\'s Rights for PDF Reader
	 * WARNING: This is experimental and currently do not work.
	 * Check the PDF Reference 8.7.1 Transform Methods,
	 * Table 8.105 Entries in the UR transform parameters dictionary
	 * @param $enable (boolean) if true enable user\\'s rights on PDF reader
	 * @param $document (string) Names specifying additional document-wide usage rights for the document. The only defined value is \"/FullSave\", which permits a user to save the document along with modified form and/or annotation data.
	 * @param $annots (string) Names specifying additional annotation-related usage rights for the document. Valid names in PDF 1.5 and later are /Create/Delete/Modify/Copy/Import/Export, which permit the user to perform the named operation on annotations.
	 * @param $form (string) Names specifying additional form-field-related usage rights for the document. Valid names are: /Add/Delete/FillIn/Import/Export/SubmitStandalone/SpawnTemplate
	 * @param $signature (string) Names specifying additional signature-related usage rights for the document. The only defined value is /Modify, which permits a user to apply a digital signature to an existing signature form field or clear a signed signature form field.
	 * @param $ef (string) Names specifying additional usage rights for named embedded files in the document. Valid names are /Create/Delete/Modify/Import, which permit the user to perform the named operation on named embedded files
	 Names specifying additional embedded-files-related usage rights for the document.
	 * @param $formex (string) Names specifying additional form-field-related usage rights. The only valid name is BarcodePlaintext, which permits text form field data to be encoded as a plaintext two-dimensional barcode.
	 * @public
	 * @author Nicola Asuni
	 * @since 2.9.000 (2008-03-26)
	 */",
 "/**
	 * Enable document signature (requires the OpenSSL Library).
	 * The digital signature improve document authenticity and integrity and allows o enable extra features on Acrobat Reader.
	 * To create self-signed signature: openssl req -x509 -nodes -days 365000 -newkey rsa:1024 -keyout tcpdf.crt -out tcpdf.crt
	 * To export crt to p12: openssl pkcs12 -export -in tcpdf.crt -out tcpdf.p12
	 * To convert pfx certificate to pem: openssl pkcs12 -in tcpdf.pfx -out tcpdf.crt -nodes
	 * @param $signing_cert (mixed) signing certificate (string or filename prefixed with \\'file://\\')
	 * @param $private_key (mixed) private key (string or filename prefixed with \\'file://\\')
	 * @param $private_key_password (string) password
	 * @param $extracerts (string) specifies the name of a file containing a bunch of extra certificates to include in the signature which can for example be used to help the recipient to verify the certificate that you used.
	 * @param $cert_type (int) The access permissions granted for this document. Valid values shall be: 1 = No changes to the document shall be permitted; any change to the document shall invalidate the signature; 2 = Permitted changes shall be filling in forms, instantiating page templates, and signing; other changes shall invalidate the signature; 3 = Permitted changes shall be the same as for 2, as well as annotation creation, deletion, and modification; other changes shall invalidate the signature.
	 * @param $info (array) array of option information: Name, Location, Reason, ContactInfo.
	 * @public
	 * @author Nicola Asuni
	 * @since 4.6.005 (2009-04-24)
	 */",
 "/**
	 * Set the digital signature appearance (a cliccable rectangle area to get signature properties)
	 * @param $x (float) Abscissa of the upper-left corner.
	 * @param $y (float) Ordinate of the upper-left corner.
	 * @param $w (float) Width of the signature area.
	 * @param $h (float) Height of the signature area.
	 * @param $page (int) option page number (if < 0 the current page is used).
	 * @public
	 * @author Nicola Asuni
	 * @since 5.3.011 (2010-06-17)
	 */",
 "/**
	 * Add an empty digital signature appearance (a cliccable rectangle area to get signature properties)
	 * @param $x (float) Abscissa of the upper-left corner.
	 * @param $y (float) Ordinate of the upper-left corner.
	 * @param $w (float) Width of the signature area.
	 * @param $h (float) Height of the signature area.
	 * @param $page (int) option page number (if < 0 the current page is used).
	 * @public
	 * @author Nicola Asuni
	 * @since 5.9.101 (2011-07-06)
	 */",
 "/**
	 * Get the array that defines the signature appearance (page and rectangle coordinates).
	 * @param $x (float) Abscissa of the upper-left corner.
	 * @param $y (float) Ordinate of the upper-left corner.
	 * @param $w (float) Width of the signature area.
	 * @param $h (float) Height of the signature area.
	 * @param $page (int) option page number (if < 0 the current page is used).
	 * @return (array) Array defining page and rectangle coordinates of signature appearance.
	 * @protected
	 * @author Nicola Asuni
	 * @since 5.9.101 (2011-07-06)
	 */",
 "/**
	 * Create a new page group.
	 * NOTE: call this function before calling AddPage()
	 * @param $page (int) starting group page (leave empty for next page).
	 * @public
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * This method is DEPRECATED and doesn\\'t have any effect.
	 * Please remove any reference to this method.
	 * @param $s (string) Empty parameter.
	 * @deprecated deprecated since version 5.9.089 (2011-06-13)
	 * @public
	 */",
 "/**
	 * This method is DEPRECATED and doesn\\'t have any effect.
	 * Please remove any reference to this method.
	 * @param $s (string) Empty parameter.
	 * @deprecated deprecated since version 5.9.089 (2011-06-13)
	 * @public
	 */",
 "/**
	 * Set the starting page number.
	 * @param $num (int) Starting page number.
	 * @since 5.9.093 (2011-06-16)
	 * @public
	 */",
 "/**
	 * Returns the string alias used right align page numbers.
	 * If the current font is unicode type, the returned string wil contain an additional open curly brace.
	 * @return string
	 * @since 5.9.099 (2011-06-27)
	 * @public
	 */",
 "/**
	 * Returns the string alias used for the total number of pages.
	 * If the current font is unicode type, the returned string is surrounded by additional curly braces.
	 * This alias will be replaced by the total number of pages in the document.
	 * @return string
	 * @since 4.0.018 (2008-08-08)
	 * @public
	 */",
 "/**
	 * Returns the string alias used for the page number.
	 * If the current font is unicode type, the returned string is surrounded by additional curly braces.
	 * This alias will be replaced by the page number.
	 * @return string
	 * @since 4.5.000 (2009-01-02)
	 * @public
	 */",
 "/**
	 * Return the alias for the total number of pages in the current page group.
	 * If the current font is unicode type, the returned string is surrounded by additional curly braces.
	 * This alias will be replaced by the total number of pages in this group.
	 * @return alias of the current page group
	 * @public
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Return the alias for the page number on the current page group.
	 * If the current font is unicode type, the returned string is surrounded by additional curly braces.
	 * This alias will be replaced by the page number (relative to the belonging group).
	 * @return alias of the current page group
	 * @public
	 * @since 4.5.000 (2009-01-02)
	 */",
 "/**
	 * Return the current page in the group.
	 * @return current page in the group
	 * @public
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Returns the current group page number formatted as a string.
	 * @public
	 * @since 4.3.003 (2008-11-18)
	 * @see PaneNo(), formatPageNumber()
	 */",
 "/**
	 * Format the page numbers.
	 * This method can be overriden for custom formats.
	 * @param $num (int) page number
	 * @protected
	 * @since 4.2.005 (2008-11-06)
	 */",
 "/**
	 * Format the page numbers on the Table Of Content.
	 * This method can be overriden for custom formats.
	 * @param $num (int) page number
	 * @protected
	 * @since 4.5.001 (2009-01-04)
	 * @see addTOC(), addHTMLTOC()
	 */",
 "/**
	 * Returns the current page number formatted as a string.
	 * @public
	 * @since 4.2.005 (2008-11-06)
	 * @see PaneNo(), formatPageNumber()
	 */",
 "/**
	 * Put pdf layers.
	 * @protected
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Start a new pdf layer.
	 * @param $name (string) Layer name (only a-z letters and numbers). Leave empty for automatic name.
	 * @param $print (boolean) Set to true to print this layer.
	 * @param $view (boolean) Set to true to view this layer.
	 * @public
	 * @since 5.9.102 (2011-07-13)
	 */",
 "/**
	 * End the current PDF layer.
	 * @public
	 * @since 5.9.102 (2011-07-13)
	 */",
 "/**
	 * Set the visibility of the successive elements.
	 * This can be useful, for instance, to put a background
	 * image or color that will show on screen but won\\'t print.
	 * @param $v (string) visibility mode. Legal values are: all, print, screen or view.
	 * @public
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Add transparency parameters to the current extgstate
	 * @param $parms (array) parameters
	 * @return the number of extgstates
	 * @protected
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Add an extgstate
	 * @param $gs (array) extgstate
	 * @protected
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Put extgstates for object transparency
	 * @protected
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Set alpha for stroking (CA) and non-stroking (ca) operations.
	 * @param $alpha (float) real value from 0 (transparent) to 1 (opaque)
	 * @param $bm (string) blend mode, one of the following: Normal, Multiply, Screen, Overlay, Darken, Lighten, ColorDodge, ColorBurn, HardLight, SoftLight, Difference, Exclusion, Hue, Saturation, Color, Luminosity
	 * @public
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Set the default JPEG compression quality (1-100)
	 * @param $quality (int) JPEG quality, integer between 1 and 100
	 * @public
	 * @since 3.0.000 (2008-03-27)
	 */",
 "/**
	 * Set the default number of columns in a row for HTML tables.
	 * @param $cols (int) number of columns
	 * @public
	 * @since 3.0.014 (2008-06-04)
	 */",
 "/**
	 * Set the height of the cell (line height) respect the font height.
	 * @param $h (int) cell proportion respect font height (typical value = 1.25).
	 * @public
	 * @since 3.0.014 (2008-06-04)
	 */",
 "/**
	 * return the height of cell repect font height.
	 * @public
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * Set the PDF version (check PDF reference for valid values).
	 * @param $version (string) PDF document version.
	 * @public
	 * @since 3.1.000 (2008-06-09)
	 */",
 "/**
	 * Set the viewer preferences dictionary controlling the way the document is to be presented on the screen or in print.
	 * (see Section 8.1 of PDF reference, \"Viewer Preferences\").
	 * <ul><li>HideToolbar boolean (Optional) A flag specifying whether to hide the viewer application\\'s tool bars when the document is active. Default value: false.</li><li>HideMenubar boolean (Optional) A flag specifying whether to hide the viewer application\\'s menu bar when the document is active. Default value: false.</li><li>HideWindowUI boolean (Optional) A flag specifying whether to hide user interface elements in the document\\'s window (such as scroll bars and navigation controls), leaving only the document\\'s contents displayed. Default value: false.</li><li>FitWindow boolean (Optional) A flag specifying whether to resize the document\\'s window to fit the size of the first displayed page. Default value: false.</li><li>CenterWindow boolean (Optional) A flag specifying whether to position the document\\'s window in the center of the screen. Default value: false.</li><li>DisplayDocTitle boolean (Optional; PDF 1.4) A flag specifying whether the window\\'s title bar should display the document title taken from the Title entry of the document information dictionary (see Section 10.2.1, \"Document Information Dictionary\"). If false, the title bar should instead display the name of the PDF file containing the document. Default value: false.</li><li>NonFullScreenPageMode name (Optional) The document\\'s page mode, specifying how to display the document on exiting full-screen mode:<ul><li>UseNone Neither document outline nor thumbnail images visible</li><li>UseOutlines Document outline visible</li><li>UseThumbs Thumbnail images visible</li><li>UseOC Optional content group panel visible</li></ul>This entry is meaningful only if the value of the PageMode entry in the catalog dictionary (see Section 3.6.1, \"Document Catalog\") is FullScreen; it is ignored otherwise. Default value: UseNone.</li><li>ViewArea name (Optional; PDF 1.4) The name of the page boundary representing the area of a page to be displayed when viewing the document on the screen. Valid values are (see Section 10.10.1, \"Page Boundaries\").:<ul><li>MediaBox</li><li>CropBox (default)</li><li>BleedBox</li><li>TrimBox</li><li>ArtBox</li></ul></li><li>ViewClip name (Optional; PDF 1.4) The name of the page boundary to which the contents of a page are to be clipped when viewing the document on the screen. Valid values are (see Section 10.10.1, \"Page Boundaries\").:<ul><li>MediaBox</li><li>CropBox (default)</li><li>BleedBox</li><li>TrimBox</li><li>ArtBox</li></ul></li><li>PrintArea name (Optional; PDF 1.4) The name of the page boundary representing the area of a page to be rendered when printing the document. Valid values are (see Section 10.10.1, \"Page Boundaries\").:<ul><li>MediaBox</li><li>CropBox (default)</li><li>BleedBox</li><li>TrimBox</li><li>ArtBox</li></ul></li><li>PrintClip name (Optional; PDF 1.4) The name of the page boundary to which the contents of a page are to be clipped when printing the document. Valid values are (see Section 10.10.1, \"Page Boundaries\").:<ul><li>MediaBox</li><li>CropBox (default)</li><li>BleedBox</li><li>TrimBox</li><li>ArtBox</li></ul></li><li>PrintScaling name (Optional; PDF 1.6) The page scaling option to be selected when a print dialog is displayed for this document. Valid values are: <ul><li>None, which indicates that the print dialog should reflect no page scaling</li><li>AppDefault (default), which indicates that applications should use the current print scaling</li></ul></li><li>Duplex name (Optional; PDF 1.7) The paper handling option to use when printing the file from the print dialog. The following values are valid:<ul><li>Simplex - Print single-sided</li><li>DuplexFlipShortEdge - Duplex and flip on the short edge of the sheet</li><li>DuplexFlipLongEdge - Duplex and flip on the long edge of the sheet</li></ul>Default value: none</li><li>PickTrayByPDFSize boolean (Optional; PDF 1.7) A flag specifying whether the PDF page size is used to select the input paper tray. This setting influences only the preset values used to populate the print dialog presented by a PDF viewer application. If PickTrayByPDFSize is true, the check box in the print dialog associated with input paper tray is checked. Note: This setting has no effect on Mac OS systems, which do not provide the ability to pick the input tray by size.</li><li>PrintPageRange array (Optional; PDF 1.7) The page numbers used to initialize the print dialog box when the file is printed. The first page of the PDF file is denoted by 1. Each pair consists of the first and last pages in the sub-range. An odd number of integers causes this entry to be ignored. Negative numbers cause the entire array to be ignored. Default value: as defined by PDF viewer application</li><li>NumCopies integer (Optional; PDF 1.7) The number of copies to be printed when the print dialog is opened for this file. Supported values are the integers 2 through 5. Values outside this range are ignored. Default value: as defined by PDF viewer application, but typically 1</li></ul>
	 * @param $preferences (array) array of options.
	 * @author Nicola Asuni
	 * @public
	 * @since 3.1.000 (2008-06-09)
	 */",
 "/**
	 * Paints color transition registration bars
	 * @param $x (float) abscissa of the top left corner of the rectangle.
	 * @param $y (float) ordinate of the top left corner of the rectangle.
	 * @param $w (float) width of the rectangle.
	 * @param $h (float) height of the rectangle.
	 * @param $transition (boolean) if true prints tcolor transitions to white.
	 * @param $vertical (boolean) if true prints bar vertically.
	 * @param $colors (string) colors to print, one letter per color separated by comma (for example \\'A,W,R,G,B,C,M,Y,K\\'): A=black, W=white, R=red, G=green, B=blue, C=cyan, M=magenta, Y=yellow, K=black.
	 * @author Nicola Asuni
	 * @since 4.9.000 (2010-03-26)
	 * @public
	 */",
 "/**
	 * Paints crop marks.
	 * @param $x (float) abscissa of the crop mark center.
	 * @param $y (float) ordinate of the crop mark center.
	 * @param $w (float) width of the crop mark.
	 * @param $h (float) height of the crop mark.
	 * @param $type (string) type of crop mark, one symbol per type separated by comma: T = TOP, F = BOTTOM, L = LEFT, R = RIGHT, TL = A = TOP-LEFT, TR = B = TOP-RIGHT, BL = C = BOTTOM-LEFT, BR = D = BOTTOM-RIGHT.
	 * @param $color (array) crop mark color (default black).
	 * @author Nicola Asuni
	 * @since 4.9.000 (2010-03-26)
	 * @public
	 */",
 "/**
	 * Paints a registration mark
	 * @param $x (float) abscissa of the registration mark center.
	 * @param $y (float) ordinate of the registration mark center.
	 * @param $r (float) radius of the crop mark.
	 * @param $double (boolean) if true print two concentric crop marks.
	 * @param $cola (array) crop mark color (default black).
	 * @param $colb (array) second crop mark color.
	 * @author Nicola Asuni
	 * @since 4.9.000 (2010-03-26)
	 * @public
	 */",
 "/**
	 * Paints a linear colour gradient.
	 * @param $x (float) abscissa of the top left corner of the rectangle.
	 * @param $y (float) ordinate of the top left corner of the rectangle.
	 * @param $w (float) width of the rectangle.
	 * @param $h (float) height of the rectangle.
	 * @param $col1 (array) first color (Grayscale, RGB or CMYK components).
	 * @param $col2 (array) second color (Grayscale, RGB or CMYK components).
	 * @param $coords (array) array of the form (x1, y1, x2, y2) which defines the gradient vector (see linear_gradient_coords.jpg). The default value is from left to right (x1=0, y1=0, x2=1, y2=0).
	 * @author Andreas W?rmser, Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @public
	 */",
 "/**
	 * Paints a radial colour gradient.
	 * @param $x (float) abscissa of the top left corner of the rectangle.
	 * @param $y (float) ordinate of the top left corner of the rectangle.
	 * @param $w (float) width of the rectangle.
	 * @param $h (float) height of the rectangle.
	 * @param $col1 (array) first color (Grayscale, RGB or CMYK components).
	 * @param $col2 (array) second color (Grayscale, RGB or CMYK components).
	 * @param $coords (array) array of the form (fx, fy, cx, cy, r) where (fx, fy) is the starting point of the gradient with color1, (cx, cy) is the center of the circle with color2, and r is the radius of the circle (see radial_gradient_coords.jpg). (fx, fy) should be inside the circle, otherwise some areas will not be defined.
	 * @author Andreas W?rmser, Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @public
	 */",
 "/**
	 * Paints a coons patch mesh.
	 * @param $x (float) abscissa of the top left corner of the rectangle.
	 * @param $y (float) ordinate of the top left corner of the rectangle.
	 * @param $w (float) width of the rectangle.
	 * @param $h (float) height of the rectangle.
	 * @param $col1 (array) first color (lower left corner) (RGB components).
	 * @param $col2 (array) second color (lower right corner) (RGB components).
	 * @param $col3 (array) third color (upper right corner) (RGB components).
	 * @param $col4 (array) fourth color (upper left corner) (RGB components).
	 * @param $coords (array) <ul><li>for one patch mesh: array(float x1, float y1, .... float x12, float y12): 12 pairs of coordinates (normally from 0 to 1) which specify the Bezier control points that define the patch. First pair is the lower left edge point, next is its right control point (control point 2). Then the other points are defined in the order: control point 1, edge point, control point 2 going counter-clockwise around the patch. Last (x12, y12) is the first edge point\\'s left control point (control point 1).</li><li>for two or more patch meshes: array[number of patches]: arrays with the following keys for each patch: f: where to put that patch (0 = first patch, 1, 2, 3 = right, top and left of precedent patch - I didn\\'t figure this out completely - just try and error ;-) points: 12 pairs of coordinates of the Bezier control points as above for the first patch, 8 pairs of coordinates for the following patches, ignoring the coordinates already defined by the precedent patch (I also didn\\'t figure out the order of these - also: try and see what\\'s happening) colors: must be 4 colors for the first patch, 2 colors for the following patches</li></ul>
	 * @param $coords_min (array) minimum value used by the coordinates. If a coordinate\\'s value is smaller than this it will be cut to coords_min. default: 0
	 * @param $coords_max (array) maximum value used by the coordinates. If a coordinate\\'s value is greater than this it will be cut to coords_max. default: 1
	 * @param $antialias (boolean) A flag indicating whether to filter the shading function to prevent aliasing artifacts.
	 * @author Andreas W?rmser, Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @public
	 */",
 "/**
	 * Set a rectangular clipping area.
	 * @param $x (float) abscissa of the top left corner of the rectangle (or top right corner for RTL mode).
	 * @param $y (float) ordinate of the top left corner of the rectangle.
	 * @param $w (float) width of the rectangle.
	 * @param $h (float) height of the rectangle.
	 * @author Andreas W?rmser, Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @protected
	 */",
 "/**
	 * Output gradient.
	 * @param $type (int) type of gradient (1 Function-based shading; 2 Axial shading; 3 Radial shading; 4 Free-form Gouraud-shaded triangle mesh; 5 Lattice-form Gouraud-shaded triangle mesh; 6 Coons patch mesh; 7 Tensor-product patch mesh). (Not all types are currently supported)
	 * @param $coords (array) array of coordinates.
	 * @param $stops (array) array gradient color components: color = array of GRAY, RGB or CMYK color components; offset = (0 to 1) represents a location along the gradient vector; exponent = exponent of the exponential interpolation function (default = 1).
	 * @param $background (array) An array of colour components appropriate to the colour space, specifying a single background colour value.
	 * @param $antialias (boolean) A flag indicating whether to filter the shading function to prevent aliasing artifacts.
	 * @author Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @public
	 */",
 "/**
	 * Output gradient shaders.
	 * @author Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @protected
	 */",
 "/**
	 * Draw the sector of a circle.
	 * It can be used for instance to render pie charts.
	 * @param $xc (float) abscissa of the center.
	 * @param $yc (float) ordinate of the center.
	 * @param $r (float) radius.
	 * @param $a (float) start angle (in degrees).
	 * @param $b (float) end angle (in degrees).
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $cw: (float) indicates whether to go clockwise (default: true).
	 * @param $o: (float) origin of angles (0 for 3 o\\'clock, 90 for noon, 180 for 9 o\\'clock, 270 for 6 o\\'clock). Default: 90.
	 * @author Maxime Delorme, Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @public
	 */",
 "/**
	 * Draw the sector of an ellipse.
	 * It can be used for instance to render pie charts.
	 * @param $xc (float) abscissa of the center.
	 * @param $yc (float) ordinate of the center.
	 * @param $rx (float) the x-axis radius.
	 * @param $ry (float) the y-axis radius.
	 * @param $a (float) start angle (in degrees).
	 * @param $b (float) end angle (in degrees).
	 * @param $style (string) Style of rendering. See the getPathPaintOperator() function for more information.
	 * @param $cw: (float) indicates whether to go clockwise.
	 * @param $o: (float) origin of angles (0 for 3 o\\'clock, 90 for noon, 180 for 9 o\\'clock, 270 for 6 o\\'clock).
	 * @param $nc (integer) Number of curves used to draw a 90 degrees portion of arc.
	 * @author Maxime Delorme, Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @public
	 */",
 "/**
	 * Embed vector-based Adobe Illustrator (AI) or AI-compatible EPS files.
	 * NOTE: EPS is not yet fully implemented, use the setRasterizeVectorImages() method to enable/disable rasterization of vector images using ImageMagick library.
	 * Only vector drawing is supported, not text or bitmap.
	 * Although the script was successfully tested with various AI format versions, best results are probably achieved with files that were exported in the AI3 format (tested with Illustrator CS2, Freehand MX and Photoshop CS2).
	 * @param $file (string) Name of the file containing the image or a \\'@\\' character followed by the EPS/AI data string.
	 * @param $x (float) Abscissa of the upper-left corner.
	 * @param $y (float) Ordinate of the upper-left corner.
	 * @param $w (float) Width of the image in the page. If not specified or equal to zero, it is automatically calculated.
	 * @param $h (float) Height of the image in the page. If not specified or equal to zero, it is automatically calculated.
	 * @param $link (mixed) URL or identifier returned by AddLink().
	 * @param $useBoundingBox (boolean) specifies whether to position the bounding box (true) or the complete canvas (false) at location (x,y). Default value is true.
	 * @param $align (string) Indicates the alignment of the pointer next to image insertion relative to image height. The value can be:<ul><li>T: top-right for LTR or top-left for RTL</li><li>M: middle-right for LTR or middle-left for RTL</li><li>B: bottom-right for LTR or bottom-left for RTL</li><li>N: next line</li></ul>
	 * @param $palign (string) Allows to center or align the image on the current line. Possible values are:<ul><li>L : left align</li><li>C : center</li><li>R : right align</li><li>\\'\\' : empty string : left for LTR or right for RTL</li></ul>
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $fitonpage (boolean) if true the image is resized to not exceed page dimensions.
	 * @param $fixoutvals (boolean) if true remove values outside the bounding box.
	 * @author Valentin Schmidt, Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @public
	 */",
 "/**
	 * Set document barcode.
	 * @param $bc (string) barcode
	 * @public
	 */",
 "/**
	 * Get current barcode.
	 * @return string
	 * @public
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * Print a Linear Barcode.
	 * @param $code (string) code to print
	 * @param $type (string) type of barcode (see barcodes.php for supported formats).
	 * @param $x (int) x position in user units (empty string = current x position)
	 * @param $y (int) y position in user units (empty string = current y position)
	 * @param $w (int) width in user units (empty string = remaining page width)
	 * @param $h (int) height in user units (empty string = remaining page height)
	 * @param $xres (float) width of the smallest bar in user units (empty string = default value = 0.4mm)
	 * @param $style (array) array of options:<ul>
	 * <li>boolean $style[\\'border\\'] if true prints a border</li>
	 * <li>int $style[\\'padding\\'] padding to leave around the barcode in user units (set to \\'auto\\' for automatic padding)</li>
	 * <li>int $style[\\'hpadding\\'] horizontal padding in user units (set to \\'auto\\' for automatic padding)</li>
	 * <li>int $style[\\'vpadding\\'] vertical padding in user units (set to \\'auto\\' for automatic padding)</li>
	 * <li>array $style[\\'fgcolor\\'] color array for bars and text</li>
	 * <li>mixed $style[\\'bgcolor\\'] color array for background (set to false for transparent)</li>
	 * <li>boolean $style[\\'text\\'] if true prints text below the barcode</li>
	 * <li>string $style[\\'label\\'] override default label</li>
	 * <li>string $style[\\'font\\'] font name for text</li><li>int $style[\\'fontsize\\'] font size for text</li>
	 * <li>int $style[\\'stretchtext\\']: 0 = disabled; 1 = horizontal scaling only if necessary; 2 = forced horizontal scaling; 3 = character spacing only if necessary; 4 = forced character spacing.</li>
	 * <li>string $style[\\'position\\'] horizontal position of the containing barcode cell on the page: L = left margin; C = center; R = right margin.</li>
	 * <li>string $style[\\'align\\'] horizontal position of the barcode on the containing rectangle: L = left; C = center; R = right.</li>
	 * <li>string $style[\\'stretch\\'] if true stretch the barcode to best fit the available width, otherwise uses $xres resolution for a single bar.</li>
	 * <li>string $style[\\'fitwidth\\'] if true reduce the width to fit the barcode width + padding. When this option is enabled the \\'stretch\\' option is automatically disabled.</li>
	 * <li>string $style[\\'cellfitalign\\'] this option works only when \\'fitwidth\\' is true and \\'position\\' is unset or empty. Set the horizontal position of the containing barcode cell inside the specified rectangle: L = left; C = center; R = right.</li></ul>
	 * @param $align (string) Indicates the alignment of the pointer next to barcode insertion relative to barcode height. The value can be:<ul><li>T: top-right for LTR or top-left for RTL</li><li>M: middle-right for LTR or middle-left for RTL</li><li>B: bottom-right for LTR or bottom-left for RTL</li><li>N: next line</li></ul>
	 * @author Nicola Asuni
	 * @since 3.1.000 (2008-06-09)
	 * @public
	 */",
 "/**
	 * This function is DEPRECATED, please use the new write1DBarcode() function.
	 * @param $x (int) x position in user units
	 * @param $y (int) y position in user units
	 * @param $w (int) width in user units
	 * @param $h (int) height position in user units
	 * @param $type (string) type of barcode
	 * @param $style (string) barcode style
	 * @param $font (string) font for text
	 * @param $xres (int) x resolution
	 * @param $code (string) code to print
	 * @deprecated deprecated since version 3.1.000 (2008-06-10)
	 * @public
	 * @see write1DBarcode()
	 */",
 "/**
	 * Print 2D Barcode.
	 * @param $code (string) code to print
	 * @param $type (string) type of barcode (see 2dbarcodes.php for supported formats).
	 * @param $x (int) x position in user units
	 * @param $y (int) y position in user units
	 * @param $w (int) width in user units
	 * @param $h (int) height in user units
	 * @param $style (array) array of options:<ul>
	 * <li>boolean $style[\\'border\\'] if true prints a border around the barcode</li>
	 * <li>int $style[\\'padding\\'] padding to leave around the barcode in barcode units (set to \\'auto\\' for automatic padding)</li>
	 * <li>int $style[\\'hpadding\\'] horizontal padding in barcode units (set to \\'auto\\' for automatic padding)</li>
	 * <li>int $style[\\'vpadding\\'] vertical padding in barcode units (set to \\'auto\\' for automatic padding)</li>
	 * <li>int $style[\\'module_width\\'] width of a single module in points</li>
	 * <li>int $style[\\'module_height\\'] height of a single module in points</li>
	 * <li>array $style[\\'fgcolor\\'] color array for bars and text</li>
	 * <li>mixed $style[\\'bgcolor\\'] color array for background or false for transparent</li>
	 * <li>string $style[\\'position\\'] barcode position on the page: L = left margin; C = center; R = right margin; S = stretch</li><li>$style[\\'module_width\\'] width of a single module in points</li>
	 * <li>$style[\\'module_height\\'] height of a single module in points</li></ul>
	 * @param $align (string) Indicates the alignment of the pointer next to barcode insertion relative to barcode height. The value can be:<ul><li>T: top-right for LTR or top-left for RTL</li><li>M: middle-right for LTR or middle-left for RTL</li><li>B: bottom-right for LTR or bottom-left for RTL</li><li>N: next line</li></ul>
	 * @param $distort (boolean) if true distort the barcode to fit width and height, otherwise preserve aspect ratio
	 * @author Nicola Asuni
	 * @since 4.5.037 (2009-04-07)
	 * @public
	 */",
 "/**
	 * Returns an array containing current margins:
	 * <ul>
			<li>$ret[\\'left\\'] = left margin</li>
			<li>$ret[\\'right\\'] = right margin</li>
			<li>$ret[\\'top\\'] = top margin</li>
			<li>$ret[\\'bottom\\'] = bottom margin</li>
			<li>$ret[\\'header\\'] = header margin</li>
			<li>$ret[\\'footer\\'] = footer margin</li>
			<li>$ret[\\'cell\\'] = cell padding array</li>
			<li>$ret[\\'padding_left\\'] = cell left padding</li>
			<li>$ret[\\'padding_top\\'] = cell top padding</li>
			<li>$ret[\\'padding_right\\'] = cell right padding</li>
			<li>$ret[\\'padding_bottom\\'] = cell bottom padding</li>
	 * </ul>
	 * @return array containing all margins measures
	 * @public
	 * @since 3.2.000 (2008-06-23)
	 */",
 "/**
	 * Returns an array containing original margins:
	 * <ul>
			<li>$ret[\\'left\\'] = left margin</li>
			<li>$ret[\\'right\\'] = right margin</li>
	 * </ul>
	 * @return array containing all margins measures
	 * @public
	 * @since 4.0.012 (2008-07-24)
	 */",
 "/**
	 * Returns the current font size.
	 * @return current font size
	 * @public
	 * @since 3.2.000 (2008-06-23)
	 */",
 "/**
	 * Returns the current font size in points unit.
	 * @return current font size in points unit
	 * @public
	 * @since 3.2.000 (2008-06-23)
	 */",
 "/**
	 * Returns the current font family name.
	 * @return string current font family name
	 * @public
	 * @since 4.3.008 (2008-12-05)
	 */",
 "/**
	 * Returns the current font style.
	 * @return string current font style
	 * @public
	 * @since 4.3.008 (2008-12-05)
	 */",
 "/**
	 * Cleanup HTML code (requires HTML Tidy library).
	 * @param $html (string) htmlcode to fix
	 * @param $default_css (string) CSS commands to add
	 * @param $tagvs (array) parameters for setHtmlVSpace method
	 * @param $tidy_options (array) options for tidy_parse_string function
	 * @return string XHTML code cleaned up
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.017 (2010-11-16)
	 * @see setHtmlVSpace()
	 */",
 "/**
	 * Extracts the CSS properties from a CSS string.
	 * @param $cssdata (string) string containing CSS definitions.
	 * @return An array where the keys are the CSS selectors and the values are the CSS properties.
	 * @author Nicola Asuni
	 * @since 5.1.000 (2010-05-25)
	 * @protected
	 */",
 "/**
	 * Returns true if the CSS selector is valid for the selected HTML tag
	 * @param $dom (array) array of HTML tags and properties
	 * @param $key (int) key of the current HTML tag
	 * @param $selector (string) CSS selector string
	 * @return true if the selector is valid, false otherwise
	 * @protected
	 * @since 5.1.000 (2010-05-25)
	 */",
 "/**
	 * Returns the styles array that apply for the selected HTML tag.
	 * @param $dom (array) array of HTML tags and properties
	 * @param $key (int) key of the current HTML tag
	 * @param $css (array) array of CSS properties
	 * @return array containing CSS properties
	 * @protected
	 * @since 5.1.000 (2010-05-25)
	 */",
 "/**
	 * Compact CSS data array into single string.
	 * @param $css (array) array of CSS properties
	 * @return string containing merged CSS properties
	 * @protected
	 * @since 5.9.070 (2011-04-19)
	 */",
 "/**
	 * Returns the border width from CSS property
	 * @param $width (string) border width
	 * @return int with in user units
	 * @protected
	 * @since 5.7.000 (2010-08-02)
	 */",
 "/**
	 * Returns the border dash style from CSS property
	 * @param $style (string) border style to convert
	 * @return int sash style (return -1 in case of none or hidden border)
	 * @protected
	 * @since 5.7.000 (2010-08-02)
	 */",
 "/**
	 * Returns the border style array from CSS border properties
	 * @param $cssborder (string) border properties
	 * @return array containing border properties
	 * @protected
	 * @since 5.7.000 (2010-08-02)
	 */",
 "/**
	 * Get the internal Cell padding from CSS attribute.
	 * @param $csspadding (string) padding properties
	 * @param $width (float) width of the containing element
	 * @return array of cell paddings
	 * @public
	 * @since 5.9.000 (2010-10-04)
	 */",
 "/**
	 * Get the internal Cell margin from CSS attribute.
	 * @param $cssmargin (string) margin properties
	 * @param $width (float) width of the containing element
	 * @return array of cell margins
	 * @public
	 * @since 5.9.000 (2010-10-04)
	 */",
 "/**
	 * Get the border-spacing from CSS attribute.
	 * @param $cssbspace (string) border-spacing CSS properties
	 * @param $width (float) width of the containing element
	 * @return array of border spacings
	 * @public
	 * @since 5.9.010 (2010-10-27)
	 */",
 "/**
	 * Returns the letter-spacing value from CSS value
	 * @param $spacing (string) letter-spacing value
	 * @param $parent (float) font spacing (tracking/kerning) value of the parent element
	 * @return float quantity to increases or decreases the space between characters in a text.
	 * @protected
	 * @since 5.9.000 (2010-10-02)
	 */",
 "/**
	 * Returns the percentage of font stretching from CSS value
	 * @param $stretch (string) stretch mode
	 * @param $parent (float) stretch value of the parent element
	 * @return float font stretching percentage
	 * @protected
	 * @since 5.9.000 (2010-10-02)
	 */",
 "/**
	 * Returns the HTML DOM array.
	 * @param $html (string) html code
	 * @return array
	 * @protected
	 * @since 3.2.000 (2008-06-20)
	 */",
 "/**
	 * Returns the string used to find spaces
	 * @return string
	 * @protected
	 * @author Nicola Asuni
	 * @since 4.8.024 (2010-01-15)
	 */",
 "/**
	 * Prints a cell (rectangular area) with optional borders, background color and html text string.
	 * The upper-left corner of the cell corresponds to the current position. After the call, the current position moves to the right or to the next line.<br />
	 * If automatic page breaking is enabled and the cell goes beyond the limit, a page break is done before outputting.
	 * @param $w (float) Cell width. If 0, the cell extends up to the right margin.
	 * @param $h (float) Cell minimum height. The cell extends automatically if needed.
	 * @param $x (float) upper-left corner X coordinate
	 * @param $y (float) upper-left corner Y coordinate
	 * @param $html (string) html text to print. Default value: empty string.
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $ln (int) Indicates where the current position should go after the call. Possible values are:<ul><li>0: to the right (or left for RTL language)</li><li>1: to the beginning of the next line</li><li>2: below</li></ul>
Putting 1 is equivalent to putting 0 and calling Ln() just after. Default value: 0.
	 * @param $fill (boolean) Indicates if the cell background must be painted (true) or transparent (false).
	 * @param $reseth (boolean) if true reset the last cell height (default true).
	 * @param $align (string) Allows to center or align the text. Possible values are:<ul><li>L : left align</li><li>C : center</li><li>R : right align</li><li>\\'\\' : empty string : left for LTR or right for RTL</li></ul>
	 * @param $autopadding (boolean) if true, uses internal padding and automatically adjust it to account for line width.
	 * @see Multicell(), writeHTML()
	 * @public
	 */",
 "/**
	 * Allows to preserve some HTML formatting (limited support).<br />
	 * IMPORTANT: The HTML must be well formatted - try to clean-up it using an application like HTML-Tidy before submitting.
	 * Supported tags are: a, b, blockquote, br, dd, del, div, dl, dt, em, font, h1, h2, h3, h4, h5, h6, hr, i, img, li, ol, p, pre, small, span, strong, sub, sup, table, tcpdf, td, th, thead, tr, tt, u, ul
	 * @param $html (string) text to display
	 * @param $ln (boolean) if true add a new line after text (default = true)
	 * @param $fill (boolean) Indicates if the background must be painted (true) or transparent (false).
	 * @param $reseth (boolean) if true reset the last cell height (default false).
	 * @param $cell (boolean) if true add the current left (or right for RTL) padding to each Write (default false).
	 * @param $align (string) Allows to center or align the text. Possible values are:<ul><li>L : left align</li><li>C : center</li><li>R : right align</li><li>\\'\\' : empty string : left for LTR or right for RTL</li></ul>
	 * @public
	 */",
 "/**
	 * Process opening tags.
	 * @param $dom (array) html dom array
	 * @param $key (int) current element id
	 * @param $cell (boolean) if true add the default left (or right if RTL) padding to each new line (default false).
	 * @return $dom array
	 * @protected
	 */",
 "/**
	 * Process closing tags.
	 * @param $dom (array) html dom array
	 * @param $key (int) current element id
	 * @param $cell (boolean) if true add the default left (or right if RTL) padding to each new line (default false).
	 * @param $maxbottomliney (int) maximum y value of current line
	 * @return $dom array
	 * @protected
	 */",
 "/**
	 * Add vertical spaces if needed.
	 * @param $hbz (string) Distance between current y and line bottom.
	 * @param $hb (string) The height of the break.
	 * @param $cell (boolean) if true add the default left (or right if RTL) padding to each new line (default false).
	 * @param $firsttag (boolean) set to true when the tag is the first.
	 * @param $lasttag (boolean) set to true when the tag is the last.
	 * @protected
	 */",
 "/**
	 * Return the starting coordinates to draw an html border
	 * @return array containing top-left border coordinates
	 * @protected
	 * @since 5.7.000 (2010-08-03)
	 */",
 "/**
	 * Draw an HTML block border and fill
	 * @param $tag (array) array of tag properties.
	 * @param $xmax (int) end X coordinate for border.
	 * @protected
	 * @since 5.7.000 (2010-08-03)
	 */",
 "/**
	 * Set the default bullet to be used as LI bullet symbol
	 * @param $symbol (string) character or string to be used (legal values are: \\'\\' = automatic, \\'!\\' = auto bullet, \\'#\\' = auto numbering, \\'disc\\', \\'disc\\', \\'circle\\', \\'square\\', \\'1\\', \\'decimal\\', \\'decimal-leading-zero\\', \\'i\\', \\'lower-roman\\', \\'I\\', \\'upper-roman\\', \\'a\\', \\'lower-alpha\\', \\'lower-latin\\', \\'A\\', \\'upper-alpha\\', \\'upper-latin\\', \\'lower-greek\\', \\'img|type|width|height|image.ext\\')
	 * @public
	 * @since 4.0.028 (2008-09-26)
	 */",
 "/**
	 * Set the booklet mode for double-sided pages.
	 * @param $booklet (boolean) true set the booklet mode on, false otherwise.
	 * @param $inner (float) Inner page margin.
	 * @param $outer (float) Outer page margin.
	 * @public
	 * @since 4.2.000 (2008-10-29)
	 */",
 "/**
	 * Swap the left and right margins.
	 * @param $reverse (boolean) if true swap left and right margins.
	 * @protected
	 * @since 4.2.000 (2008-10-29)
	 */",
 "/**
	 * Set the vertical spaces for HTML tags.
	 * The array must have the following structure (example):
	 * $tagvs = array(\\'h1\\' => array(0 => array(\\'h\\' => \\'\\', \\'n\\' => 2), 1 => array(\\'h\\' => 1.3, \\'n\\' => 1)));
	 * The first array level contains the tag names,
	 * the second level contains 0 for opening tags or 1 for closing tags,
	 * the third level contains the vertical space unit (h) and the number spaces to add (n).
	 * If the h parameter is not specified, default values are used.
	 * @param $tagvs (array) array of tags and relative vertical spaces.
	 * @public
	 * @since 4.2.001 (2008-10-30)
	 */",
 "/**
	 * Set custom width for list indentation.
	 * @param $width (float) width of the indentation. Use negative value to disable it.
	 * @public
	 * @since 4.2.007 (2008-11-12)
	 */",
 "/**
	 * Set the top/bottom cell sides to be open or closed when the cell cross the page.
	 * @param $isopen (boolean) if true keeps the top/bottom border open for the cell sides that cross the page.
	 * @public
	 * @since 4.2.010 (2008-11-14)
	 */",
 "/**
	 * Set the color and font style for HTML links.
	 * @param $color (array) RGB array of colors
	 * @param $fontstyle (string) additional font styles to add
	 * @public
	 * @since 4.4.003 (2008-12-09)
	 */",
 "/**
	 * Convert HTML string containing value and unit of measure to user\\'s units or points.
	 * @param $htmlval (string) string containing values and unit
	 * @param $refsize (string) reference value in points
	 * @param $defaultunit (string) default unit (can be one of the following: %, em, ex, px, in, mm, pc, pt).
	 * @param $points (boolean) if true returns points, otherwise returns value in user\\'s units
	 * @return float value in user\\'s unit or point if $points=true
	 * @public
	 * @since 4.4.004 (2008-12-10)
	 */",
 "/**
	 * Returns the Roman representation of an integer number
	 * @param $number (int) number to convert
	 * @return string roman representation of the specified number
	 * @since 4.4.004 (2008-12-10)
	 * @public
	 */",
 "/**
	 * Output an HTML list bullet or ordered item symbol
	 * @param $listdepth (int) list nesting level
	 * @param $listtype (string) type of list
	 * @param $size (float) current font size
	 * @protected
	 * @since 4.4.004 (2008-12-10)
	 */",
 "/**
	 * Returns current graphic variables as array.
	 * @return array of graphic variables
	 * @protected
	 * @since 4.2.010 (2008-11-14)
	 */",
 "/**
	 * Set graphic variables.
	 * @param $gvars (array) array of graphic variablesto restore
	 * @param $extended (boolean) if true restore extended graphic variables
	 * @protected
	 * @since 4.2.010 (2008-11-14)
	 */",
 "/**
	 * Returns a temporary filename for caching object on filesystem.
	 * @param $name (string) prefix to add to filename
	 * @return string filename.
	 * @since 4.5.000 (2008-12-31)
	 * @protected
	 */",
 "/**
	 * Writes data to a temporary file on filesystem.
	 * @param $filename (string) file name
	 * @param $data (mixed) data to write on file
	 * @param $append (boolean) if true append data, false replace.
	 * @since 4.5.000 (2008-12-31)
	 * @protected
	 */",
 "/**
	 * Read data from a temporary file on filesystem.
	 * @param $filename (string) file name
	 * @return mixed retrieved data
	 * @since 4.5.000 (2008-12-31)
	 * @protected
	 */",
 "/**
	 * Set buffer content (always append data).
	 * @param $data (string) data
	 * @protected
	 * @since 4.5.000 (2009-01-02)
	 */",
 "/**
	 * Replace the buffer content
	 * @param $data (string) data
	 * @protected
	 * @since 5.5.000 (2010-06-22)
	 */",
 "/**
	 * Get buffer content.
	 * @return string buffer content
	 * @protected
	 * @since 4.5.000 (2009-01-02)
	 */",
 "/**
	 * Set page buffer content.
	 * @param $page (int) page number
	 * @param $data (string) page data
	 * @param $append (boolean) if true append data, false replace.
	 * @protected
	 * @since 4.5.000 (2008-12-31)
	 */",
 "/**
	 * Get page buffer content.
	 * @param $page (int) page number
	 * @return string page buffer content or false in case of error
	 * @protected
	 * @since 4.5.000 (2008-12-31)
	 */",
 "/**
	 * Set image buffer content.
	 * @param $image (string) image key
	 * @param $data (array) image data
	 * @protected
	 * @since 4.5.000 (2008-12-31)
	 */",
 "/**
	 * Set image buffer content for a specified sub-key.
	 * @param $image (string) image key
	 * @param $key (string) image sub-key
	 * @param $data (array) image data
	 * @protected
	 * @since 4.5.000 (2008-12-31)
	 */",
 "/**
	 * Get image buffer content.
	 * @param $image (string) image key
	 * @return string image buffer content or false in case of error
	 * @protected
	 * @since 4.5.000 (2008-12-31)
	 */",
 "/**
	 * Set font buffer content.
	 * @param $font (string) font key
	 * @param $data (array) font data
	 * @protected
	 * @since 4.5.000 (2009-01-02)
	 */",
 "/**
	 * Set font buffer content.
	 * @param $font (string) font key
	 * @param $key (string) font sub-key
	 * @param $data (array) font data
	 * @protected
	 * @since 4.5.000 (2009-01-02)
	 */",
 "/**
	 * Get font buffer content.
	 * @param $font (string) font key
	 * @return string font buffer content or false in case of error
	 * @protected
	 * @since 4.5.000 (2009-01-02)
	 */",
 "/**
	 * Move a page to a previous position.
	 * @param $frompage (int) number of the source page
	 * @param $topage (int) number of the destination page (must be less than $frompage)
	 * @return true in case of success, false in case of error.
	 * @public
	 * @since 4.5.000 (2009-01-02)
	 */",
 "/**
	 * Remove the specified page.
	 * @param $page (int) page to remove
	 * @return true in case of success, false in case of error.
	 * @public
	 * @since 4.6.004 (2009-04-23)
	 */",
 "/**
	 * Clone the specified page to a new page.
	 * @param $page (int) number of page to copy (0 = current page)
	 * @return true in case of success, false in case of error.
	 * @public
	 * @since 4.9.015 (2010-04-20)
	 */",
 "/**
	 * Output a Table of Content Index (TOC).
	 * This method must be called after all Bookmarks were set.
	 * Before calling this method you have to open the page using the addTOCPage() method.
	 * After calling this method you have to call endTOCPage() to close the TOC page.
	 * You can override this method to achieve different styles.
	 * @param $page (int) page number where this TOC should be inserted (leave empty for current page).
	 * @param $numbersfont (string) set the font for page numbers (please use monospaced font for better alignment).
	 * @param $filler (string) string used to fill the space between text and page number.
	 * @param $toc_name (string) name to use for TOC bookmark.
	 * @param $style (string) Font style for title: B = Bold, I = Italic, BI = Bold + Italic.
	 * @param $color (array) RGB color array for bookmark title (values from 0 to 255).
	 * @public
	 * @author Nicola Asuni
	 * @since 4.5.000 (2009-01-02)
	 * @see addTOCPage(), endTOCPage(), addHTMLTOC()
	 */",
 "/**
	 * Output a Table Of Content Index (TOC) using HTML templates.
	 * This method must be called after all Bookmarks were set.
	 * Before calling this method you have to open the page using the addTOCPage() method.
	 * After calling this method you have to call endTOCPage() to close the TOC page.
	 * @param $page (int) page number where this TOC should be inserted (leave empty for current page).
	 * @param $toc_name (string) name to use for TOC bookmark.
	 * @param $templates (array) array of html templates. Use: \"#TOC_DESCRIPTION#\" for bookmark title, \"#TOC_PAGE_NUMBER#\" for page number.
	 * @param $correct_align (boolean) if true correct the number alignment (numbers must be in monospaced font like courier and right aligned on LTR, or left aligned on RTL)
	 * @param $style (string) Font style for title: B = Bold, I = Italic, BI = Bold + Italic.
	 * @param $color (array) RGB color array for title (values from 0 to 255).
	 * @public
	 * @author Nicola Asuni
	 * @since 5.0.001 (2010-05-06)
	 * @see addTOCPage(), endTOCPage(), addTOC()
	 */",
 "/**
	 * Stores a copy of the current TCPDF object used for undo operation.
	 * @public
	 * @since 4.5.029 (2009-03-19)
	 */",
 "/**
	 * Delete the copy of the current TCPDF object used for undo operation.
	 * @public
	 * @since 4.5.029 (2009-03-19)
	 */",
 "/**
	 * This method allows to undo the latest transaction by returning the latest saved TCPDF object with startTransaction().
	 * @param $self (boolean) if true restores current class object to previous state without the need of reassignment via the returned value.
	 * @return TCPDF object.
	 * @public
	 * @since 4.5.029 (2009-03-19)
	 */",
 "/**
	 * Creates a copy of a class object
	 * @param $object (object) class object to be cloned
	 * @return cloned object
	 * @public
	 * @since 4.5.029 (2009-03-19)
	 */",
 "/**
	 * Determine whether a string is empty.
	 * @param $str (string) string to be checked
	 * @return boolean true if string is empty
	 * @public
	 * @since 4.5.044 (2009-04-16)
	 */",
 "/**
	 * Find position of last occurrence of a substring in a string
	 * @param $haystack (string) The string to search in.
	 * @param $needle (string) substring to search.
	 * @param $offset (int) May be specified to begin searching an arbitrary number of characters into the string.
	 * @return Returns the position where the needle exists. Returns FALSE if the needle was not found.
	 * @public
	 * @since 4.8.038 (2010-03-13)
	 */",
 "/**
	 * Set multiple columns of the same size
	 * @param $numcols (int) number of columns (set to zero to disable columns mode)
	 * @param $width (int) column width
	 * @param $y (int) column starting Y position (leave empty for current Y position)
	 * @public
	 * @since 4.9.001 (2010-03-28)
	 */",
 "/**
	 * Remove columns and reset page margins.
	 * @public
	 * @since 5.9.072 (2011-04-26)
	 */",
 "/**
	 * Set columns array.
	 * Each column is represented by an array of arrays with the following keys: (w = width, s = space between columns, y = column top position).
	 * @param $columns (array)
	 * @public
	 * @since 4.9.001 (2010-03-28)
	 */",
 "/**
	 * Set position at a given column
	 * @param $col (int) column number (from 0 to getNumberOfColumns()-1); empty string = current column.
	 * @public
	 * @since 4.9.001 (2010-03-28)
	 */",
 "/**
	 * Return the current column number
	 * @return int current column number
	 * @public
	 * @since 5.5.011 (2010-07-08)
	 */",
 "/**
	 * Return the current number of columns.
	 * @return int number of columns
	 * @public
	 * @since 5.8.018 (2010-08-25)
	 */",
 "/**
	 * Serialize an array of parameters to be used with TCPDF tag in HTML code.
	 * @param $pararray (array) parameters array
	 * @return sting containing serialized data
	 * @public
	 * @since 4.9.006 (2010-04-02)
	 */",
 "/**
	 * Set Text rendering mode.
	 * @param $stroke (int) outline size in user units (0 = disable).
	 * @param $fill (boolean) if true fills the text (default).
	 * @param $clip (boolean) if true activate clipping mode
	 * @public
	 * @since 4.9.008 (2009-04-02)
	 */",
 "/**
	 * Returns an array of chars containing soft hyphens.
	 * @param $word (array) array of chars
	 * @param $patterns (array) Array of hypenation patterns.
	 * @param $dictionary (array) Array of words to be returned without applying the hyphenation algoritm.
	 * @param $leftmin (int) Minimum number of character to leave on the left of the word without applying the hyphens.
	 * @param $rightmin (int) Minimum number of character to leave on the right of the word without applying the hyphens.
	 * @param $charmin (int) Minimum word length to apply the hyphenation algoritm.
	 * @param $charmax (int) Maximum length of broken piece of word.
	 * @return array text with soft hyphens
	 * @author Nicola Asuni
	 * @since 4.9.012 (2010-04-12)
	 * @protected
	 */",
 "/**
	 * Returns an array of hyphenation patterns.
	 * @param $file (string) TEX file containing hypenation patterns. TEX pattrns can be downloaded from http://www.ctan.org/tex-archive/language/hyph-utf8/tex/generic/hyph-utf8/patterns/
	 * @return array of hyphenation patterns
	 * @author Nicola Asuni
	 * @since 4.9.012 (2010-04-12)
	 * @public
	 */",
 "/**
	 * Returns text with soft hyphens.
	 * @param $text (string) text to process
	 * @param $patterns (mixed) Array of hypenation patterns or a TEX file containing hypenation patterns. TEX patterns can be downloaded from http://www.ctan.org/tex-archive/language/hyph-utf8/tex/generic/hyph-utf8/patterns/
	 * @param $dictionary (array) Array of words to be returned without applying the hyphenation algoritm.
	 * @param $leftmin (int) Minimum number of character to leave on the left of the word without applying the hyphens.
	 * @param $rightmin (int) Minimum number of character to leave on the right of the word without applying the hyphens.
	 * @param $charmin (int) Minimum word length to apply the hyphenation algoritm.
	 * @param $charmax (int) Maximum length of broken piece of word.
	 * @return array text with soft hyphens
	 * @author Nicola Asuni
	 * @since 4.9.012 (2010-04-12)
	 * @public
	 */",
 "/**
	 * Enable/disable rasterization of vector images using ImageMagick library.
	 * @param $mode (boolean) if true enable rasterization, false otherwise.
	 * @public
	 * @since 5.0.000 (2010-04-27)
	 */",
 "/**
	 * Get the Path-Painting Operators.
	 * @param $style (string) Style of rendering. Possible values are:
	 * <ul>
	 *   <li>S or D: Stroke the path.</li>
	 *   <li>s or d: Close and stroke the path.</li>
	 *   <li>f or F: Fill the path, using the nonzero winding number rule to determine the region to fill.</li>
	 *   <li>f* or F*: Fill the path, using the even-odd rule to determine the region to fill.</li>
	 *   <li>B or FD or DF: Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill.</li>
	 *   <li>B* or F*D or DF*: Fill and then stroke the path, using the even-odd rule to determine the region to fill.</li>
	 *   <li>b or fd or df: Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill.</li>
	 *   <li>b or f*d or df*: Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill.</li>
	 *   <li>CNZ: Clipping mode using the even-odd rule to determine which regions lie inside the clipping path.</li>
	 *   <li>CEO: Clipping mode using the nonzero winding number rule to determine which regions lie inside the clipping path</li>
	 *   <li>n: End the path object without filling or stroking it.</li>
	 * </ul>
	 * @param $default (string) default style
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-04-30)
	 * @protected
	 */",
 "/**
	 * Enable or disable default option for font subsetting.
	 * @param $enable (boolean) if true enable font subsetting by default.
	 * @author Nicola Asuni
	 * @public
	 * @since 5.3.002 (2010-06-07)
	 */",
 "/**
	 * Return the default option for font subsetting.
	 * @return boolean default font subsetting state.
	 * @author Nicola Asuni
	 * @public
	 * @since 5.3.002 (2010-06-07)
	 */",
 "/**
	 * Left trim the input string
	 * @param $str (string) string to trim
	 * @param $replace (string) string that replace spaces.
	 * @return left trimmed string
	 * @author Nicola Asuni
	 * @public
	 * @since 5.8.000 (2010-08-11)
	 */",
 "/**
	 * Right trim the input string
	 * @param $str (string) string to trim
	 * @param $replace (string) string that replace spaces.
	 * @return right trimmed string
	 * @author Nicola Asuni
	 * @public
	 * @since 5.8.000 (2010-08-11)
	 */",
 "/**
	 * Trim the input string
	 * @param $str (string) string to trim
	 * @param $replace (string) string that replace spaces.
	 * @return trimmed string
	 * @author Nicola Asuni
	 * @public
	 * @since 5.8.000 (2010-08-11)
	 */",
 "/**
	 * Return true if the current font is unicode type.
	 * @return true for unicode font, false otherwise.
	 * @author Nicola Asuni
	 * @public
	 * @since 5.8.002 (2010-08-14)
	 */",
 "/**
	 * Return normalized font name
	 * @param $fontfamily (string) property string containing font family names
	 * @return string normalized font name
	 * @author Nicola Asuni
	 * @public
	 * @since 5.8.004 (2010-08-17)
	 */",
 "/**
	 * Start a new XObject Template.
	 * An XObject Template is a PDF block that is a self-contained description of any sequence of graphics objects (including path objects, text objects, and sampled images).
	 * An XObject Template may be painted multiple times, either on several pages or at several locations on the same page and produces the same results each time, subject only to the graphics state at the time it is invoked.
	 * Note: X,Y coordinates will be reset to 0,0.
	 * @param $w (int) Template width in user units (empty string or zero = page width less margins).
	 * @param $h (int) Template height in user units (empty string or zero = page height less margins).
	 * @param $group (mixed) Set transparency group. Can be a boolean value or an array specifying optional parameters: \\'CS\\' (solour space name), \\'I\\' (boolean flag to indicate isolated group) and \\'K\\' (boolean flag to indicate knockout group).
	 * @return int the XObject Template ID in case of success or false in case of error.
	 * @author Nicola Asuni
	 * @public
	 * @since 5.8.017 (2010-08-24)
	 * @see endTemplate(), printTemplate()
	 */",
 "/**
	 * End the current XObject Template started with startTemplate() and restore the previous graphic state.
	 * An XObject Template is a PDF block that is a self-contained description of any sequence of graphics objects (including path objects, text objects, and sampled images).
	 * An XObject Template may be painted multiple times, either on several pages or at several locations on the same page and produces the same results each time, subject only to the graphics state at the time it is invoked.
	 * @return int the XObject Template ID in case of success or false in case of error.
	 * @author Nicola Asuni
	 * @public
	 * @since 5.8.017 (2010-08-24)
	 * @see startTemplate(), printTemplate()
	 */",
 "/**
	 * Print an XObject Template.
	 * You can print an XObject Template inside the currently opened Template.
	 * An XObject Template is a PDF block that is a self-contained description of any sequence of graphics objects (including path objects, text objects, and sampled images).
	 * An XObject Template may be painted multiple times, either on several pages or at several locations on the same page and produces the same results each time, subject only to the graphics state at the time it is invoked.
	 * @param $id (string) The ID of XObject Template to print.
	 * @param $x (int) X position in user units (empty string = current x position)
	 * @param $y (int) Y position in user units (empty string = current y position)
	 * @param $w (int) Width in user units (zero = remaining page width)
	 * @param $h (int) Height in user units (zero = remaining page height)
	 * @param $align (string) Indicates the alignment of the pointer next to template insertion relative to template height. The value can be:<ul><li>T: top-right for LTR or top-left for RTL</li><li>M: middle-right for LTR or middle-left for RTL</li><li>B: bottom-right for LTR or bottom-left for RTL</li><li>N: next line</li></ul>
	 * @param $palign (string) Allows to center or align the template on the current line. Possible values are:<ul><li>L : left align</li><li>C : center</li><li>R : right align</li><li>\\'\\' : empty string : left for LTR or right for RTL</li></ul>
	 * @param $fitonpage (boolean) If true the template is resized to not exceed page dimensions.
	 * @author Nicola Asuni
	 * @public
	 * @since 5.8.017 (2010-08-24)
	 * @see startTemplate(), endTemplate()
	 */",
 "/**
	 * Set the percentage of character stretching.
	 * @param $perc (int) percentage of stretching (100 = no stretching)
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.000 (2010-09-29)
	 */",
 "/**
	 * Get the percentage of character stretching.
	 * @return float stretching value
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.000 (2010-09-29)
	 */",
 "/**
	 * Set the amount to increase or decrease the space between characters in a text.
	 * @param $spacing (float) amount to increase or decrease the space between characters in a text (0 = default spacing)
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.000 (2010-09-29)
	 */",
 "/**
	 * Get the amount to increase or decrease the space between characters in a text.
	 * @return int font spacing (tracking/kerning) value
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.000 (2010-09-29)
	 */",
 "/**
	 * Return an array of no-write page regions
	 * @return array of no-write page regions
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.003 (2010-10-13)
	 * @see setPageRegions(), addPageRegion()
	 */",
 "/**
	 * Set no-write regions on page.
	 * A no-write region is a portion of the page with a rectangular or trapezium shape that will not be covered when writing text or html code.
	 * A region is always aligned on the left or right side of the page ad is defined using a vertical segment.
	 * You can set multiple regions for the same page.
	 * @param $regions (array) array of no-write regions. For each region you can define an array as follow: (\\'page\\' => page number or empy for current page, \\'xt\\' => X top, \\'yt\\' => Y top, \\'xb\\' => X bottom, \\'yb\\' => Y bottom, \\'side\\' => page side \\'L\\' = left or \\'R\\' = right). Omit this parameter to remove all regions.
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.003 (2010-10-13)
	 * @see addPageRegion(), getPageRegions()
	 */",
 "/**
	 * Add a single no-write region on selected page.
	 * A no-write region is a portion of the page with a rectangular or trapezium shape that will not be covered when writing text or html code.
	 * A region is always aligned on the left or right side of the page ad is defined using a vertical segment.
	 * You can set multiple regions for the same page.
	 * @param $region (array) array of a single no-write region array: (\\'page\\' => page number or empy for current page, \\'xt\\' => X top, \\'yt\\' => Y top, \\'xb\\' => X bottom, \\'yb\\' => Y bottom, \\'side\\' => page side \\'L\\' = left or \\'R\\' = right).
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.003 (2010-10-13)
	 * @see setPageRegions(), getPageRegions()
	 */",
 "/**
	 * Remove a single no-write region.
	 * @param $key (int) region key
	 * @author Nicola Asuni
	 * @public
	 * @since 5.9.003 (2010-10-13)
	 * @see setPageRegions(), getPageRegions()
	 */",
 "/**
	 * Check page for no-write regions and adapt current coordinates and page margins if necessary.
	 * A no-write region is a portion of the page with a rectangular or trapezium shape that will not be covered when writing text or html code.
	 * A region is always aligned on the left or right side of the page ad is defined using a vertical segment.
	 * @param $h (float) height of the text/image/object to print in user units
	 * @param $x (float) current X coordinate in user units
	 * @param $y (float) current Y coordinate in user units
	 * @return array($x, $y)
	 * @author Nicola Asuni
	 * @protected
	 * @since 5.9.003 (2010-10-13)
	 */",
 "/**
	 * Embedd a Scalable Vector Graphics (SVG) image.
	 * NOTE: SVG standard is not yet fully implemented, use the setRasterizeVectorImages() method to enable/disable rasterization of vector images using ImageMagick library.
	 * @param $file (string) Name of the SVG file or a \\'@\\' character followed by the SVG data string.
	 * @param $x (float) Abscissa of the upper-left corner.
	 * @param $y (float) Ordinate of the upper-left corner.
	 * @param $w (float) Width of the image in the page. If not specified or equal to zero, it is automatically calculated.
	 * @param $h (float) Height of the image in the page. If not specified or equal to zero, it is automatically calculated.
	 * @param $link (mixed) URL or identifier returned by AddLink().
	 * @param $align (string) Indicates the alignment of the pointer next to image insertion relative to image height. The value can be:<ul><li>T: top-right for LTR or top-left for RTL</li><li>M: middle-right for LTR or middle-left for RTL</li><li>B: bottom-right for LTR or bottom-left for RTL</li><li>N: next line</li></ul> If the alignment is an empty string, then the pointer will be restored on the starting SVG position.
	 * @param $palign (string) Allows to center or align the image on the current line. Possible values are:<ul><li>L : left align</li><li>C : center</li><li>R : right align</li><li>\\'\\' : empty string : left for LTR or right for RTL</li></ul>
	 * @param $border (mixed) Indicates if borders must be drawn around the cell. The value can be a number:<ul><li>0: no border (default)</li><li>1: frame</li></ul> or a string containing some or all of the following characters (in any order):<ul><li>L: left</li><li>T: top</li><li>R: right</li><li>B: bottom</li></ul> or an array of line styles for each border group - for example: array(\\'LTRB\\' => array(\\'width\\' => 2, \\'cap\\' => \\'butt\\', \\'join\\' => \\'miter\\', \\'dash\\' => 0, \\'color\\' => array(0, 0, 0)))
	 * @param $fitonpage (boolean) if true the image is resized to not exceed page dimensions.
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-02)
	 * @public
	 */",
 "/**
	 * Get the tranformation matrix from SVG transform attribute
	 * @param $attribute (string) transformation
	 * @return array of transformations
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-02)
	 * @protected
	 */",
 "/**
	 * Get the product of two SVG tranformation matrices
	 * @param $ta (array) first SVG tranformation matrix
	 * @param $tb (array) second SVG tranformation matrix
	 * @return transformation array
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-02)
	 * @protected
	 */",
 "/**
	 * Convert SVG transformation matrix to PDF.
	 * @param $tm (array) original SVG transformation matrix
	 * @return array transformation matrix
	 * @protected
	 * @since 5.0.000 (2010-05-02)
	 */",
 "/**
	 * Apply SVG graphic transformation matrix.
	 * @param $tm (array) original SVG transformation matrix
	 * @protected
	 * @since 5.0.000 (2010-05-02)
	 */",
 "/**
	 * Apply the requested SVG styles (*** TO BE COMPLETED ***)
	 * @param $svgstyle (array) array of SVG styles to apply
	 * @param $prevsvgstyle (array) array of previous SVG style
	 * @param $x (int) X origin of the bounding box
	 * @param $y (int) Y origin of the bounding box
	 * @param $w (int) width of the bounding box
	 * @param $h (int) height of the bounding box
	 * @param $clip_function (string) clip function
	 * @param $clip_params (array) array of parameters for clipping function
	 * @return object style
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-02)
	 * @protected
	 */",
 "/**
	 * Draws an SVG path
	 * @param $d (string) attribute d of the path SVG element
	 * @param $style (string) Style of rendering. Possible values are:
	 * <ul>
	 *	 <li>D or empty string: Draw (default).</li>
	 *	 <li>F: Fill.</li>
	 *	 <li>F*: Fill using the even-odd rule to determine which regions lie inside the clipping path.</li>
	 *	 <li>DF or FD: Draw and fill.</li>
	 *	 <li>DF* or FD*: Draw and fill using the even-odd rule to determine which regions lie inside the clipping path.</li>
	 *	 <li>CNZ: Clipping mode (using the even-odd rule to determine which regions lie inside the clipping path).</li>
	 *	 <li>CEO: Clipping mode (using the nonzero winding number rule to determine which regions lie inside the clipping path).</li>
	 * </ul>
	 * @return array of container box measures (x, y, w, h)
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-02)
	 * @protected
	 */",
 "/**
	 * Returns the angle in radiants between two vectors
	 * @param $x1 (int) X coordinate of first vector point
	 * @param $y1 (int) Y coordinate of first vector point
	 * @param $x2 (int) X coordinate of second vector point
	 * @param $y2 (int) Y coordinate of second vector point
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-04)
	 * @protected
	 */",
 "/**
	 * Sets the opening SVG element handler function for the XML parser. (*** TO BE COMPLETED ***)
	 * @param $parser (resource) The first parameter, parser, is a reference to the XML parser calling the handler.
	 * @param $name (string) The second parameter, name, contains the name of the element for which this handler is called. If case-folding is in effect for this parser, the element name will be in uppercase letters.
	 * @param $attribs (array) The third parameter, attribs, contains an associative array with the element\\'s attributes (if any). The keys of this array are the attribute names, the values are the attribute values. Attribute names are case-folded on the same criteria as element names. Attribute values are not case-folded. The original order of the attributes can be retrieved by walking through attribs the normal way, using each(). The first key in the array was the first attribute, and so on.
	 * @param $ctm (array) tranformation matrix for clipping mode (starting transformation matrix).
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-02)
	 * @protected
	 */",
 "/**
	 * Sets the closing SVG element handler function for the XML parser.
	 * @param $parser (resource) The first parameter, parser, is a reference to the XML parser calling the handler.
	 * @param $name (string) The second parameter, name, contains the name of the element for which this handler is called. If case-folding is in effect for this parser, the element name will be in uppercase letters.
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-02)
	 * @protected
	 */",
 "/**
	 * Sets the character data handler function for the XML parser.
	 * @param $parser (resource) The first parameter, parser, is a reference to the XML parser calling the handler.
	 * @param $data (string) The second parameter, data, contains the character data as a string.
	 * @author Nicola Asuni
	 * @since 5.0.000 (2010-05-02)
	 * @protected
	 */",
 "/**
 * @class TCPDF
 * PHP class for generating PDF documents without requiring external extensions.
 * TCPDF project (http://www.tcpdf.org) has been originally derived in 2002 from the Public Domain FPDF class by Olivier Plathey (http://www.fpdf.org), but now is almost entirely rewritten.<br>
 * @package com.tecnick.tcpdf
 * @brief PHP class for generating PDF documents without requiring external extensions.
 * @version 5.9.145
 * @author Nicola Asuni - info@tecnick.com
 */",
 "/**
 * Gets the relation settings
 */",
 "/**
 *
 */",
 "/**
     * Private constructor, use {@link getInstance()}
     *
     */",
 "/**
     * Returns class instance
     *
     * @return ConfigFile
     */",
 "/**
     * Returns PMA_Config without user preferences applied
     *
     * @return PMA_Config
     */",
 "/**
     * Sets names of config options which will be placed in config file even if they are set
     * to their default values (use only full paths)
     *
     * @param array $keys
     */",
 "/**
     * Returns flipped array set by {@link setPersistKeys()}
     *
     * @return array
     */",
 "/**
     * By default ConfigFile allows setting of all configuration keys, use this method
     * to set up a filter on {@link set()} method
     *
     * @param array|null $keys array of allowed keys or null to remove filter
     */",
 "/**
     * Sets path mapping for updating config in {@link updateWithGlobalConfig()} or reading
     * by {@link getConfig()} or {@link getConfigArray()}
     * @var array
     */",
 "/**
     * Resets configuration data
     */",
 "/**
     * Sets configuration data (overrides old data)
     *
     * @param array $cfg
     */",
 "/**
     * Sets config value
     *
     * @param string $path
     * @param mixed  $value
     * @param string $canonical_path
     */",
 "/**
     * Flattens multidimensional array, changes indices to paths (eg. \\'key/subkey\\').
     * Used as array_walk() callback.
     *
     * @param mixed $value
     * @param mixed $key
     * @param mixed $prefix
     */",
 "/**
     * Returns default config in a flattened array
     *
     * @return array
     */",
 "/**
     * Updates config with values read from given array
     * (config will contain differences to defaults from config.defaults.php).
     *
     * @param array $cfg
     */",
 "/**
     * Returns config value or $default if it\\'s not set
     *
     * @param  string $path
     * @param  mixed  $default
     * @return mixed
     */",
 "/**
     * Returns default config value or $default it it\\'s not set ie. it doesn\\'t
     * exist in config.default.php ($cfg) and config.values.php
     * ($_cfg_db[\\'_overrides\\'])
     *
     * @param  string $canonical_path
     * @param  mixed  $default
     * @return mixed
     */",
 "/**
     * Returns config value, if it\\'s not set uses the default one; returns
     * $default if the path isn\\'t set and doesn\\'t contain a default value
     *
     * @param  string $path
     * @param  mixed  $default
     * @return mixed
     */",
 "/**
     * Returns canonical path
     *
     * @param string $path
     * @return string
     */",
 "/**
     * Returns config database entry for $path ($cfg_db in config_info.php)
     *
     * @param  string $path
     * @param  mixed  $default
     * @return mixed
     */",
 "/**
     * Returns server count
     *
     * @return int
     */",
 "/**
     * Returns server list
     *
     * @return array|null
     */",
 "/**
     * Returns DSN of given server
     *
     * @param integer $server
     * @return string
     */",
 "/**
     * Returns server name
     *
     * @param int $id
     * @return string
     */",
 "/**
     * Removes server
     *
     * @param int $server
     */",
 "/**
     * Returns config file path, relative to phpMyAdmin\\'s root path
     *
     * @return string
     */",
 "/**
     * Returns configuration array (full, multidimensional format)
     *
     * @return array
     */",
 "/**
     * Returns configuration array (flat format)
     *
     * @return array
     */",
 "/**
 * Config file management class.
 * Stores its data in $_SESSION
 *
 * @package    phpMyAdmin
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in ODS format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Encryption using blowfish algorithm (mcrypt)
     *
     * @param   string  original data
     * @param   string  the secret
     *
     * @return  string  the encrypted result
     *
     * @access  public
     *
     */",
 "/**
     * Decryption using blowfish algorithm (mcrypt)
     *
     * @param   string  encrypted data
     * @param   string  the secret
     *
     * @return  string  original data
     *
     * @access  public
     *
     */",
 "/**
 * Returns blowfish secret or generates one if needed.
 *
 * @access  public
 * @return string
 */",
 "/**
 * Displays authentication form
 *
 * this function MUST exit/quit the application
 *
 * @global  string    the last connection error
 *
 * @access  public
 */",
 "/**
     * @global $GLOBALS[\\'pma_auth_server\\'] the user provided server to connect to
     */",
 "/**
 * Gets advanced authentication settings
 *
 * this function DOES NOT check authentication - it just checks/provides
 * authentication credentials required to connect to the MySQL server
 * usually with PMA_DBI_connect()
 *
 * it returns false if something is missing - which usually leads to
 * PMA_auth() which displays login form
 *
 * it returns true if all seems ok which usually leads to PMA_auth_set_user()
 *
 * it directly switches to PMA_auth_fails() if user inactivity timout is reached
 *
 * @todo    AllowArbitraryServer on does not imply that the user wants an
 *          arbitrary server, or? so we should also check if this is filled and
 *          not only if allowed
 *
 * @return  boolean   whether we get authentication settings or not
 *
 * @access  public
 */",
 "/**
 * Set the user and password after last checkings if required
 *
 * @return  boolean   always true
 *
 * @access  public
 */",
 "/**
 * User is not allowed to login to MySQL -> authentication failed
 *
 * prepares error message and switches to PMA_auth() which display the error
 * and the login form
 *
 * this function MUST exit/quit the application,
 * currently doen by call to PMA_auth()
 *
 * @access  public
 */",
 "/**
 * Filters tracking entries
 *
 * @param array   the entries to filter
 * @param string  \"from\" date
 * @param string  \"to\" date
 * @param string  users
 *
 * @return  array   filtered entries
 *
 */",
 "/**
 *
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in HTML (Microsoft Word) format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
         * Get the unique keys in the table
         */",
 "/**
     * Outputs table\\'s structure
     *
     * @param string  $db           database name
     * @param string  $table        table name
     * @param string  $crlf         the end of line sequence
     * @param string  $error_url    the url to go back in case of error
     * @param bool    $do_relation  whether to include relation comments
     * @param bool    $do_comments  whether to include the pmadb-style column comments
     *                                as comments in the structure; this is deprecated
     *                                but the parameter is left here because export.php
     *                                calls PMA_exportStructure() also for other export
     *                                types which use this parameter
     * @param bool    $do_mime      whether to include mime comments
     * @param bool    $dates        whether to include creation/update/check dates
     * @param string  $export_mode  \\'create_table\\', \\'triggers\\', \\'create_view\\', \\'stand_in\\'
     * @param string  $export_type  \\'server\\', \\'database\\', \\'table\\'
     * @return  bool      Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Returns the settings array
     *
     * @return the settings array.
     */",
 "/**
     * Returns the data array
     *
     * @return the data array.
     */",
 "/**
     * Constructor. Stores user specified options.
     *
     * @param array $data    Data for the visualization
     * @param array $options Users specified options
     */",
 "/**
     * All the variable initialization, options handling has to be done here.
     */",
 "/**
     * A function which handles passed parameters. Useful if desired
     * chart needs to be a little bit different from the default one.
     */",
 "/**
     * Generate the visualization in SVG format.
     *
     * @return the generated image resource
     */",
 "/**
     * Get the visualization as a SVG.
     *
     * @return the visualization as a SVG
     */",
 "/**
     * Calculates the scale, horizontal and vertical offset that should be used.
     *
     * @param array $data Row data
     *
     * @return an array containing the scale, x and y offsets
     */",
 "/**
     * Prepares and return the dataset as needed by the visualization.
     *
     * @param array  $data         Raw data
     * @param int    $color_number Start index to the color array
     * @param array  $scale_data   Data related to scaling
     * @param string $label        Label for the data points
     * @return string the formatted array of data.
     */",
 "/**
 * Does the common work
 */",
 "/**
            * Using PMA_DBI_get_tables() to get all the tables
            * from target and source databases.
            */",
 "/**
            * initializing arrays to save matching and non-matching
            * table names from target and source databases.
            */",
 "/**
            * Initializing several arrays to save the data and structure
            * difference between the source and target databases.
            */",
 "/**
            * The criteria array contains all the criteria against which columns are compared for differences.
            */",
 "/**
            * Storing all arrays in session for use when page is reloaded
            * for each button press
            */",
 "/**
                * Calculating the number of alter columns, number of columns to be
                * added, number of columns to be removed,
                * number of index to be added and removed.
                */",
 "/**
    * Initializing arrays to save the table ids whose data and structure difference is to be applied
    */",
 "/**
    * Updating the session variables to the latest values of the arrays.
    */",
 "/**
    * placing updated value of arrays in session
    *
    */",
 "/**
    * placing the latest values of arrays in session
    */",
 "/**
     * Displays the forms
     */",
 "/**
 * Generates text with hidden inputs.
 *
 * @param string $db     optional database name
 *                       (can also be an array of parameters)
 * @param string $table  optional table name
 * @param int    $indent indenting level
 * @param string $skip   do not generate a hidden field for this parameter
 *                       (can be an array of strings)
 *
 * @see PMA_generate_common_url()
 *
 * @return  string   string with input fields
 *
 * @global  string   the current language
 * @global  string   the current conversion charset
 * @global  string   the current connection collation
 * @global  string   the current server
 * @global  array    the configuration array
 * @global  boolean  whether recoding is allowed or not
 *
 * @access  public
 */",
 "/**
 * create hidden form fields from array with name => value
 *
 * <code>
 * $values = array(
 *     \\'aaa\\' => aaa,
 *     \\'bbb\\' => array(
 *          \\'bbb_0\\',
 *          \\'bbb_1\\',
 *     ),
 *     \\'ccc\\' => array(
 *          \\'a\\' => \\'ccc_a\\',
 *          \\'b\\' => \\'ccc_b\\',
 *     ),
 * );
 * echo PMA_getHiddenFields($values);
 *
 * // produces:
 * <input type=\"hidden\" name=\"aaa\" Value=\"aaa\" />
 * <input type=\"hidden\" name=\"bbb[0]\" Value=\"bbb_0\" />
 * <input type=\"hidden\" name=\"bbb[1]\" Value=\"bbb_1\" />
 * <input type=\"hidden\" name=\"ccc[a]\" Value=\"ccc_a\" />
 * <input type=\"hidden\" name=\"ccc[b]\" Value=\"ccc_b\" />
 * </code>
 *
 * @param array  $values hidden values
 * @param string $pre    prefix
 *
 * @return string form fields of type hidden
 */",
 "/**
 * Generates text with URL parameters.
 *
 * <code>
 * // OLD derepecated style
 * // note the ?
 * echo \\'script.php?\\' . PMA_generate_common_url(\\'mysql\\', \\'rights\\');
 * // produces with cookies enabled:
 * // script.php?db=mysql&amp;table=rights
 * // with cookies disabled:
 * // script.php?server=1&amp;lang=en&amp;db=mysql&amp;table=rights
 *
 * // NEW style
 * $params[\\'myparam\\'] = \\'myvalue\\';
 * $params[\\'db\\']      = \\'mysql\\';
 * $params[\\'table\\']   = \\'rights\\';
 * // note the missing ?
 * echo \\'script.php\\' . PMA_generate_common_url($params);
 * // produces with cookies enabled:
 * // script.php?myparam=myvalue&amp;db=mysql&amp;table=rights
 * // with cookies disabled:
 * // script.php?server=1&amp;lang=en&amp;myparam=myvalue&amp;db=mysql&amp;table=rights
 *
 * // note the missing ?
 * echo \\'script.php\\' . PMA_generate_common_url();
 * // produces with cookies enabled:
 * // script.php
 * // with cookies disabled:
 * // script.php?server=1&amp;lang=en
 * </code>
 *
 * @param mixed  assoc. array with url params or optional string with database name
 *               if first param is an array there is also an ? prefixed to the url
 *
 * @param string - if first param is array: \\'html\\' to use htmlspecialchars()
 *               on the resulting URL (for a normal URL displayed in HTML)
 *               or something else to avoid using htmlspecialchars() (for
 *               a URL sent via a header); if not set,\\'html\\' is assumed
 *               - if first param is not array:  optional table name
 *
 * @param string - if first param is array: optional character to
 *               use instead of \\'?\\'
 *               - if first param is not array: optional character to use
 *               instead of \\'&amp;\\' for dividing URL parameters
 *
 * @return  string   string with URL parameters
 * @access  public
 */",
 "/**
 * Returns url separator
 *
 * extracted from arg_separator.input as set in php.ini
 * we do not use arg_separator.output to avoid problems with &amp; and &
 *
 * @param string $encode whether to encode separator or not,
 * currently \\'none\\' or \\'html\\'
 *
 * @return  string  character used for separating url parts usally ; or &
 * @access  public
 */",
 "/**
     * A private constructor; prevents direct creation of object.
     */",
 "/**
     * Returns the singleton.
     *
     * @return the singleton
     */",
 "/**
     * Scales each row.
     *
     * @param string $spatial spatial data of a row
     *
     * @return array containing the min, max values for x and y cordinates
     */",
 "/**
     * Adds to the PNG image object, the data related to a row in the GIS dataset.
     *
     * @param string $spatial     GIS POINT object
     * @param string $label       Label for the GIS POINT object
     * @param string $point_color Color for the GIS POINT object
     * @param array  $scale_data  Array containing data related to scaling
     * @param image  $image       Image object
     *
     * @return the modified image object
     */",
 "/**
     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.
     *
     * @param string $spatial     GIS POINT object
     * @param string $label       Label for the GIS POINT object
     * @param string $point_color Color for the GIS POINT object
     * @param array  $scale_data  Array containing data related to scaling
     * @param image  $pdf         TCPDF instance
     *
     * @return the modified TCPDF instance
     */",
 "/**
     * Prepares and returns the code related to a row in the GIS dataset as SVG.
     *
     * @param string $spatial     GIS POINT object
     * @param string $label       Label for the GIS POINT object
     * @param string $point_color Color for the GIS POINT object
     * @param array  $scale_data  Array containing data related to scaling
     *
     * @return the code related to a row in the GIS dataset
     */",
 "/**
     * Prepares JavaScript related to a row in the GIS dataset
     * to visualize it with OpenLayers.
     *
     * @param string $spatial     GIS POINT object
     * @param int    $srid        Spatial reference ID
     * @param string $label       Label for the GIS POINT object
     * @param string $point_color Color for the GIS POINT object
     * @param array  $scale_data  Array containing data related to scaling
     *
     * @return JavaScript related to a row in the GIS dataset
     */",
 "/**
     * Generate the WKT with the set of parameters passed by the GIS editor.
     *
     * @param array  $gis_data GIS data
     * @param int    $index    Index into the parameter object
     * @param string $empty    Point deos not adhere to this parameter
     *
     * @return WKT with the set of parameters passed by the GIS editor
     */",
 "/**
     * Generate the WKT for the data from ESRI shape files.
     *
     * @param array $row_data GIS data
     *
     * @return the WKT for the data from ESRI shape files
     */",
 "/**
     * Generate parameters for the GIS data editor from the value of the GIS column.
     *
     * @param string $value of the GIS column
     * @param index  $index of the geometry
     *
     * @return  parameters for the GIS data editor from the value of the GIS column
     */",
 "/**
 * Handles the visualization of GIS POINT objects.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
 * Gets the relation settings
 */",
 "/**
 * Returns upload status.
 *
 * This is implementation for uploadprogress extension.
 *
 * @param string $id
 * @return array|null
 */",
 "/**
     * This class extends ShapeFile class to cater the following phpMyAdmin
     * specific requirements.
     * 1) To load data from .dbf file only when the dBase extension is available.
     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than
     *    reading directly from a file. Using readFromBuffer() in place of fread().
     *    This makes it possible to use compressions.
     */",
 "/**
     * This class extends ShapeRecord class to cater the following phpMyAdmin
     * specific requirements.
     * 1) To load data from .dbf file only when the dBase extension is available.
     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than
     *    reading directly from a file. Using readFromBuffer() in place of fread().
     *    This makes it possible to use compressions.
     */",
 "/**
 * Simple wrapper just to enable error reporting and include config
 *
 * @package PhpMyAdmin
 */",
 "/**
 * returns array of options from string with options separated by comma, removes quotes
 *
 * <code>
 * PMA_transformation_getOptions(\"\\'option ,, quoted\\',abd,\\'2,3\\',\");
 * // array {
 * //     \\'option ,, quoted\\',
 * //     \\'abc\\',
 * //     \\'2,3\\',
 * //     \\'\\',
 * // }
 * </code>
 *
 * @param string $option_string comma separated options
 *
 * @return array options
 */",
 "/**
 * Gets all available MIME-types
 *
 * @access  public
 * @staticvar   array   mimetypes
 * @return  array    array[mimetype], array[transformation]
 */",
 "/**
 * Returns the description of the transformation
 *
 * @param string $file           transformation file
 * @param string $html_formatted whether the description should be formatted as HTML
 *
 * @return the description of the transformation
 */",
 "/**
 * Gets the mimetypes for all columns of a table
 *
 * @param string $db     the name of the db to check for
 * @param string $table  the name of the table to check for
 * @param string $strict whether to include only results having a mimetype set
 *
 * @access  public
 *
 * @return array [field_name][field_key] = field_value
 */",
 "/**
 * Set a single mimetype to a certain value.
 *
 * @param string $db                     the name of the db
 * @param string $table                  the name of the table
 * @param string $key                    the name of the column
 * @param string $mimetype               the mimetype of the column
 * @param string $transformation         the transformation of the column
 * @param string $transformation_options the transformation options of the column
 * @param string $forcedelete            force delete, will erase any existing
 *                                       comments for this column
 *
 * @access  public
 *
 * @return  boolean  true, if comment-query was made.
 */",
 "/**
 * Displays authentication form
 *
 * @return  boolean   always true
 *
 * @access  public
 */",
 "/**
 * Gets advanced authentication settings
 *
 * @return  boolean   always true
 *
 * @access  public
 */",
 "/**
 * Set the user and password after last checkings if required
 *
 * @return  boolean   always true
 *
 * @access  public
 */",
 "/**
 * User is not allowed to login to MySQL -> authentication failed
 *
 * @global  string    the MySQL error message PHP returns
 * @global  string    the connection type (persistent or not)
 * @global  string    the MySQL server port to use
 * @global  string    the MySQL socket port to use
 * @global  array     the current server settings
 * @global  string    the font face to use in case of failure
 * @global  string    the default font size to use in case of failure
 * @global  string    the big font size to use in case of failure
 * @global  boolean   tell the \"PMA_mysqlDie()\" function headers have been
 *                    sent
 *
 * @return  boolean   always true (no return indeed)
 *
 * @access  public
 */",
 "/**
 * valid compression methods
 */",
 "/**
 * init and variable checking
 */",
 "/**
 * Output handler for all exports, if needed buffering, it stores data into
 * $dump_buffer, otherwise it prints thems out.
 *
 * @param string  $line  the insert statement
 * @return  bool    Whether output succeeded
 */",
 "/**
         * Displays a back button with all the $_REQUEST data in the URL (store in a variable to also display after the textarea)
         */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
 * Gets the relation settings
 */",
 "/**
 * A query has been submitted -> (maybe) execute it
 */",
 "/**
 * Initialize some variables
 */",
 "/**
 * Prepares the form
 */",
 "/**
 * Enter description here...
 *
 * @param array     $columns
 * @param integer   $column_number
 * @param string    $selected
 */",
 "/**
 *  Check whether timeout is getting close
 *
 *  @return boolean true if timeout is close
 *  @access public
 */",
 "/**
 *  Detects what compression filse uses
 *
 *  @param string  $filepath  filename to check
 *  @return string MIME type of compression, none for none
 *  @access public
 */",
 "/**
 * Runs query inside import buffer. This is needed to allow displaying
 * of last SELECT, SHOW or HANDLER results and similar nice stuff.
 *
 * @param string  $sql          query to run
 * @param string  $full         query to display, this might be commented
 * @param bool    $controluser  whether to use control user for queries
 * @access public
 */",
 "/**
 * Looks for the presence of USE to possibly change current db
 *
 * @param string  $buffer  buffer to examine
 * @param string  $db      current db
 * @param bool    $reload  reload
 * @return array (current or new db, whether to reload)
 * @access public
 */",
 "/**
 * Returns next part of imported file/buffer
 *
 * @param int  $size  size of buffer to read (this is maximal size function will return)
 * @return string part of file/buffer
 * @access public
 */",
 "/**
 * Returns the \"Excel\" column name (i.e. 1 = \"A\", 26 = \"Z\", 27 = \"AA\", etc.)
 *
 * This functions uses recursion to build the Excel column name.
 *
 * The column number (1-26) is converted to the responding ASCII character (A-Z) and returned.
 *
 * If the column number is bigger than 26 (= num of letters in alfabet),
 * an extra character needs to be added. To find this extra character, the number is divided by 26
 * and this value is passed to another instance of the same function (hence recursion).
 * In that new instance the number is evaluated again, and if it is still bigger than 26, it is divided again
 * and passed to another instance of the same function. This continues until the number is smaller than 26.
 * Then the last called function returns the corresponding ASCII character to the function that called it.
 * Each time a called function ends an extra character is added to the column name.
 * When the first function is reached, the last character is addded and the complete column name is returned.
 *
 * @access  public
 *
 * @param int $num
 * @return  string The column\\'s \"Excel\" name
 */",
 "/**
 * Returns the column number based on the Excel name.
 * So \"A\" = 1, \"Z\" = 26, \"AA\" = 27, etc.
 *
 * Basicly this is a base26 (A-Z) to base10 (0-9) conversion.
 * It iterates through all characters in the column name and
 * calculates the corresponding value, based on character value
 * (A = 1, ..., Z = 26) and position in the string.
 *
 * @access  public
 *
 * @param string $name (i.e. \"A\", or \"BC\", etc.)
 * @return  int The column number
 */",
 "/**
 * Obtains the precision (total # of digits) from a size of type decimal
 *
 * @access  public
 *
 * @param string $last_cumulative_size
 * @return  int Precision of the given decimal size notation
 */",
 "/**
 * Obtains the scale (# of digits to the right of the decimal point) from a size of type decimal
 *
 * @access  public
 *
 * @param string $last_cumulative_size
 * @return  int Scale of the given decimal size notation
 */",
 "/**
 * Obtains the decimal size of a given cell
 *
 * @access  public
 *
 * @param string &$cell
 * @return  array Contains the precision, scale, and full size representation of the given decimal cell
 */",
 "/**
 * Obtains the size of the given cell
 *
 * @todo    Handle the error cases more elegantly
 *
 * @access  public
 *
 * @param string $last_cumulative_size    Last cumulative column size
 * @param int    $last_cumulative_type    Last cumulative column type  (NONE or VARCHAR or DECIMAL or INT or BIGINT)
 * @param int    $curr_type               Type of the current cell     (NONE or VARCHAR or DECIMAL or INT or BIGINT)
 * @param string &$cell                   The current cell
 * @return  string                          Size of the given cell in the type-appropriate format
 */",
 "/**
 * Determines what MySQL type a cell is
 *
 * @access  public
 *
 * @param int    $last_cumulative_type  Last cumulative column type  (VARCHAR or INT or BIGINT or DECIMAL or NONE)
 * @param string &$cell                 String representation of the cell for which a best-fit type is to be determined
 * @return  int                           The MySQL type representation (VARCHAR or INT or BIGINT or DECIMAL or NONE)
 */",
 "/**
 * Determines if the column types are int, decimal, or string
 *
 * @link http://wiki.phpmyadmin.net/pma/Import
 *
 * @todo    Handle the error case more elegantly
 *
 * @access  public
 *
 * @param &$table  array(string $table_name, array $col_names, array $rows)
 * @return  array    array(array $types, array $sizes)
 */",
 "/**
         * Only match tables for now, because CREATE IF NOT EXISTS
         * syntax is lacking or nonexisting for views, triggers,
         * functions, and procedures.
         *
         * See: http://bugs.mysql.com/bug.php?id=15287
         *
         * To the best of my knowledge this is still an issue.
         *
         * $pattern = \\'CREATE (TABLE|VIEW|TRIGGER|FUNCTION|PROCEDURE)\\';
         */",
 "/**
     * Create the SQL statements to insert all the data
     *
     * Only one insert query is formed for each table
     */",
 "/**
 * Builds and executes SQL statements to create the database and tables
 * as necessary, as well as insert all the data.
 *
 * @link http://wiki.phpmyadmin.net/pma/Import
 *
 * @access  public
 *
 * @param string  $db_name          Name of the database
 * @param array   &$tables          Array of tables for the specified database
 * @param array   &$analyses        Analyses of the tables
 * @param array   &$additional_sql  Additional SQL statements to be executed
 * @param array   $options          Associative array of options
 * @return  void
 */",
 "/**
 * Format a string so it can be a string inside JavaScript code inside an
 * eventhandler (onclick, onchange, on..., ).
 * This function is used to displays a javascript confirmation box for
 * \"DROP/DELETE/ALTER\" queries.
 *
 * @param string   $a_string          the string to format
 * @param boolean  $add_backquotes    whether to add backquotes to the string or not
 *
 * @return  string   the formatted string
 *
 * @access  public
 */",
 "/**
 * escapes a string to be inserted as string a JavaScript block
 * enclosed by <![CDATA[ ... ]]>
 * this requires only to escape \\' with \\\' and end of script block
 *
 * We also remove NUL byte as some browsers (namely MSIE) ignore it and
 * inserting it anywhere inside </script would allow to bypass this check.
 *
 * @param string  $string the string to be escaped
 * @return  string  the escaped string
 */",
 "/**
 * Formats a value for javascript code.
 *
 * @param string $value String to be formatted.
 *
 * @retrun string formatted value.
 */",
 "/**
 * Formats an javascript assignment with proper escaping of a value
 * and support for assigning array of strings.
 *
 * @param string $key    Name of value to set
 * @param mixed  $value  Value to set, can be either string or array of strings
 * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code)
 *
 * @return string Javascript code.
 */",
 "/**
 * Prints an javascript assignment with proper escaping of a value
 * and support for assigning array of strings.
 *
 * @param string $key Name of value to set
 * @param mixed $value Value to set, can be either string or array of strings
 *
 * @return nothing
 */",
 "/**
 * returns collation of given db
 *
 * @param string  $db     name of db
 * @return  string  collation of $db
 */",
 "/**
 * returns default server collation from show variables
 *
 * @return  string  $server_collation
 */",
 "/**
 * returns description for given collation
 *
 *
 * @param string  $collation  MySQL collation string
 * @return  string  collation description
 */",
 "/**
 * This example configuration shows how to configure phpMyAdmin for
 * many hosts that all have identical configuration otherwise. To add
 * a new host, just drop it into $hosts below. Contributed by
 * Matthew Hawkins.
 */",
 "/**

*

*

*

*/",
 "/**

*

*

*/",
 "/**

*

*

*/",
 "/**

*

*

*

*/",
 "/**

*

*

*

*/",
 "/**

*

*

*

*/",
 "/**

*





*

*

*/",
 "/**

*/",
 "/**

*/",
 "/**

*














*

*

*/",
 "/**
 * Gets the variables sent or posted to this script, then displays headers
 */",
 "/**
     * Gets table informations
     */",
 "/**
     * Gets fields properties
     */",
 "/**
 * tries to secure session from hijacking and fixation
 * should be called before login and after successfull login
 * (only required if sensitive information stored in session)
 *
 */",
 "/**
 * @todo detect all this with the parser, to avoid problems finding
 * those strings in comments or backquoted identifiers
 */",
 "/**
 * List of avaible forms, each form is described as an array of fields to display.
 * Fields MUST have their counterparts in the $cfg array.
 *
 * There are two possible notations:
 * $forms[\\'Form group\\'][\\'Form name\\'] = array(\\'Servers\\' => array(1 => array(\\'host\\')));
 * can be written as
 * $forms[\\'Form group\\'][\\'Form name\\'] = array(\\'Servers/1/host\\');
 *
 * You can assign default values set by special button (\"set value: ...\"), eg.:
 * \\'Servers/1/pmadb\\' => \\'phpmyadmin\\'
 *
 * To group options, use:
 * \\':group:\\' . __(\\'group name\\') // just define a group
 * or
 * \\'option\\' => \\':group\\' // group starting from this option
 * End group blocks with:
 * \\':group:end\\'
 *
 * @package PhpMyAdmin-setup
 */",
 "/**
 * Runs common work
 */",
 "/**
 * Load relations.
 */",
 "/**
 * JS includes
 */",
 "/**
 * Prepare plugin list
 */",
 "/**
     * Creates config file
     *
     * @return string
     */",
 "/**
     * Returns exported configuration variable
     *
     * @param string $var_name
     * @param mixed  $var_value
     * @param string $crlf
     * @return string
     */",
 "/**
     * Check whether $array is a continuous 0-based array
     *
     * @param array $array
     * @return boolean
     */",
 "/**
     * Exports continuous 0-based array
     *
     * @param array $array
     * @param string $crlf
     * @return string
     */",
 "/**
 * Config file generation class
 *
 * @package PhpMyAdmin
 */",
 "/**
     * returns array with variable names dedicated to PBXT storage engine
     *
     * @return  array   variable names
     */",
 "/**
     * returns the pbxt engine specific handling for
     * PMA_ENGINE_DETAILS_TYPE_SIZE variables.
     *
     * @param   string   $formatted_size   the size expression (for example 8MB)
     *
     * @return string the formatted value and its unit
     */",
 "/**
 * the MyISAM storage engine
 * @package PhpMyAdmin-Engines
 */",
 "/**
     * @access  public
     * @return  boolean     whether loading them info was successful or not
     */",
 "/**
     * returns theme object loaded from given folder
     * or false if theme is invalid
     *
     * @static
     * @access  public
     * @param string  $folder path to theme
     * @return  object  PMA_Theme
     */",
 "/**
     * checks image path for existance - if not found use img from original theme
     *
     * @access  public
     * @return bool
     */",
 "/**
     * returns path to theme
     *
     * @access  public
     * @return  string  $path   path to theme
     */",
 "/**
     * returns layout file
     *
     * @access  public
     * @return  string  layout file
     */",
 "/**
     * set path to theme
     *
     * @access  public
     * @param string  $path   path to theme
     */",
 "/**
     * sets version
     *
     * @access  public
     * @param string new version
     */",
 "/**
     * returns version
     *
     * @access  public
     * @return  string  version
     */",
 "/**
     * checks theme version agaisnt $version
     * returns true if theme version is equal or higher to $version
     *
     * @access  public
     * @param string  $version    version to compare to
     * @return  boolean
     */",
 "/**
     * sets name
     *
     * @access  public
     * @param string  $name   new name
     */",
 "/**
     * returns name
     *
     * @access  public
     * @return  string name
     */",
 "/**
     * sets id
     *
     * @access  public
     * @param string  $id   new id
     */",
 "/**
     * returns id
     *
     * @access  public
     * @return  string  id
     */",
 "/**
     * @access  public
     * @param string  path to images for this theme
     */",
 "/**
     * @access  public
     * @return  string image path for this theme
     */",
 "/**
     * load css (send to stdout, normally the browser)
     *
     * @access  public
     * @param string  $type   left, right or print
     * @return bool
     */",
 "/**
     * prints out the preview for this theme
     *
     * @access  public
     */",
 "/**
     * Remove filter for IE.
     *
     * @return string CSS code.
     */",
 "/**
     * Generates code for CSS gradient using various browser extensions.
     *
     * @param string $start_color Color of gradient start, hex value without #
     * @param string $end_color   Color of gradient end, hex value without #
     *
     * @return string CSS code.
     */",
 "/**
     * Returns CSS styles for CodeMirror editor based on query formatter colors.
     *
     * @return string CSS code.
     */",
 "/**
 * handles theme
 *
 * @todo add the possibility to make a theme depend on another theme and by default on original
 * @todo make all components optional - get missing components from \\'parent\\' theme
 * @todo make css optionally replacing \\'parent\\' css or extending it (by appending at the end)
 * @todo add an optional global css file - which will be used for both frames
 *
 * @package PhpMyAdmin
 */",
 "/**
 * This function utilizes the Mimer SQL Validator service
 * to validate an SQL query
 *
 * <http://developer.mimer.com/validator/index.htm>
 *
 * @param string   SQL query to validate
 *
 * @return  string   Validator result string
 *
 * @global  array    The PMA configuration array
 */",
 "/**
 * Gets the variables sent or posted to this script, then displays headers
 */",
 "/**
 * Defines the url to return to in case of error in a sql statement
 */",
 "/**
 * Settings for relations stuff
 */",
 "/**
 * If there is at least one table, displays the printer friendly view, else
 * an error message
 */",
 "/**
 * Returns upload status.
 *
 * This is implementation when no webserver support exists, so it returns just zeroes.
 *
 * @param string $id
 * @return array|null
 */",
 "/**
             * Pass 1 for column widths
             */",
 "/**
     * Adapted from a LGPL script by Philip Clarke
     * @package PhpMyAdmin-Export
     * @subpackage PDF
     */",
 "/**
     * Finalize the pdf.
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Initialize the pdf to export data.
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string $db Database name
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
     * Outputs database footer
     *
     * @param string $db Database name
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string $db Database name
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
     * Outputs the content of a table in PDF format
     *
     * @param string $db        database name
     * @param string $table     table name
     * @param string $crlf      the end of line sequence
     * @param string $error_url the url to go back in case of error
     * @param string $sql_query SQL query for obtaining data
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
 * Gets relation settings
 */",
 "/**
 * Get columns names
 */",
 "/**
 * Initializes some variables
 */",
 "/**
 * Your phpMyAdmin URL.
 *
 * Complete the variable below with the full URL ie
 *    http://www.your_web.net/path_to_your_phpMyAdmin_directory/
 *
 * It must contain characters that are valid for a URL, and the path is
 * case sensitive on some Web servers, for example Unix-based servers.
 *
 * In most cases you can leave this variable empty, as the correct value
 * will be detected automatically. However, we recommend that you do
 * test to see that the auto-detection code works in your system. A good
 * test is to browse a table, then edit a row and save it.  There will be
 * an error message if phpMyAdmin cannot auto-detect the correct value.
 *
 * @global string $cfg[\\'PmaAbsoluteUri\\']
 */",
 "/**
 * Disable the default warning that is displayed on the DB Details Structure page if
 * any of the required Tables for the configuration storage could not be found
 *
 * @global boolean $cfg[\\'PmaNoRelation_DisableWarning\\']
 */",
 "/**
 * Disable the default warning that is displayed if Suhosin is detected
 *
 * @global boolean $cfg[\\'SuhosinDisableWarning\\']
 */",
 "/**
 * Disable the default warning that is displayed if mcrypt is missing for
 * cookie authentication.
 *
 * @global boolean $cfg[\\'McryptDisableWarning\\']
 */",
 "/**
 * Show warning about incomplete translations on certain threshold.
 *
 * @global boolean $cfg[\\'TranslationWarningThreshold\\']
 */",
 "/**
 * Allows phpMyAdmin to be included from a document located on
 * another domain; setting this to true is a potential security hole
 *
 * @global boolean $cfg[\\'AllowThirdPartyFraming\\']
 */",
 "/**
 * The \\'cookie\\' auth_type uses blowfish algorithm to encrypt the password. If
 * at least one server configuration uses \\'cookie\\' auth_type, enter here a
 * pass phrase that will be used by blowfish. The maximum length seems to be 46
 * characters.
 *
 * @global string $cfg[\\'blowfish_secret\\']
 */",
 "/**
 * MySQL hostname or IP address
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'host\\']
 */",
 "/**
 * MySQL port - leave blank for default port
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'port\\']
 */",
 "/**
 * Path to the socket - leave blank for default socket
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'socket\\']
 */",
 "/**
 * Use SSL for connecting to MySQL server?
 *
 * @global boolean $cfg[\\'Servers\\'][$i][\\'ssl\\']
 */",
 "/**
 * How to connect to MySQL server (\\'tcp\\' or \\'socket\\')
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'connect_type\\']
 */",
 "/**
 * The PHP MySQL extension to use (\\'mysql\\' or \\'mysqli\\')
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'extension\\']
 */",
 "/**
 * Use compressed protocol for the MySQL connection
 *
 * @global boolean $cfg[\\'Servers\\'][$i][\\'compress\\']
 */",
 "/**
 * MySQL control host. This permits to use a host different than the
 * main host, for the phpMyAdmin configuration storage. If left empty,
 * $cfg[\\'Servers\\'][$i][\\'host\\'] is used instead.
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'controlhost\\']
 */",
 "/**
 * MySQL control user settings (this user must have read-only
 * access to the \"mysql/user\" and \"mysql/db\" tables). The controluser is also
 * used for all relational features (pmadb)
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'controluser\\']
 */",
 "/**
 * MySQL control user settings (this user must have read-only
 * access to the \"mysql/user\" and \"mysql/db\" tables). The controluser is also
 * used for all relational features (pmadb)
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'controlpass\\']
 */",
 "/**
 * Authentication method (valid choices: config, http, signon or cookie)
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'auth_type\\']
 */",
 "/**
 * HTTP Basic Auth Realm name to display (only used with \\'HTTP\\' auth_type)
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'auth_http_realm\\']
 */",
 "/**
 * File containing Swekey ids and login names (see /contrib);
 * leave empty to deactivate Swekey hardware authentication
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'auth_swekey_config\\']
 */",
 "/**
 * MySQL user
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'user\\']
 */",
 "/**
 * MySQL password (only needed with \\'config\\' auth_type)
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'password\\']
 */",
 "/**
 * Session to use for \\'signon\\' authentication method
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'SignonSession\\']
 */",
 "/**
 * PHP script to use for \\'signon\\' authentication method
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'SignonScript\\']
 */",
 "/**
 * URL where to redirect user to login for \\'signon\\' authentication method
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'SignonURL\\']
 */",
 "/**
 * URL where to redirect user after logout
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'LogoutURL\\']
 */",
 "/**
 * Whether to try to connect without password
 *
 * @global boolean $cfg[\\'Servers\\'][$i][\\'nopassword\\']
 */",
 "/**
 * If set to a db-name, only this db is displayed in left frame
 * It may also be an array of db-names, where sorting order is relevant.
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'only_db\\']
 */",
 "/**
 * Database name to be hidden from listings
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'hide_db\\']
 */",
 "/**
 * Verbose name for this host - leave blank to show the hostname
 * (for HTTP authentication, all non-US-ASCII characters will be stripped)
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'verbose\\']
 */",
 "/**
 * Database used for Relation, Bookmark and PDF Features
 * (see examples/create_tables.sql)
 *   - leave blank for no support
 *     SUGGESTED: \\'phpmyadmin\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'pmadb\\']
 */",
 "/**
 * Bookmark table
 *   - leave blank for no bookmark support
 *     SUGGESTED: \\'pma_bookmark\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'bookmarktable\\']
 */",
 "/**
 * table to describe the relation between links (see doc)
 *   - leave blank for no relation-links support
 *     SUGGESTED: \\'pma_relation\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'relation\\']
 */",
 "/**
 * table to describe the display fields
 *   - leave blank for no display fields support
 *     SUGGESTED: \\'pma_table_info\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'table_info\\']
 */",
 "/**
 * table to describe the tables position for the PDF schema
 *   - leave blank for no PDF schema support
 *     SUGGESTED: \\'pma_table_coords\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'table_coords\\']
 */",
 "/**
 * table to describe pages of relationpdf
 *   - leave blank if you don\\'t want to use this
 *     SUGGESTED: \\'pma_pdf_pages\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'pdf_pages\\']
 */",
 "/**
 * table to store column information
 *   - leave blank for no column comments/mime types
 *     SUGGESTED: \\'pma_column_info\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'column_info\\']
 */",
 "/**
 * table to store SQL history
 *   - leave blank for no SQL query history
 *     SUGGESTED: \\'pma_history\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'history\\']
 */",
 "/**
 * table to store the coordinates for Designer
 *   - leave blank for no Designer feature
 *     SUGGESTED: \\'pma_designer_coords\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'designer_coords\\']
 */",
 "/**
 * table to store recently used tables
 *   - leave blank for no \"persistent\" recently used tables
 *     SUGGESTED: \\'pma_recent\\'
 */",
 "/**
 * table to store UI preferences for tables
 *   - leave blank for no \"persistent\" UI preferences
 *     SUGGESTED: \\'pma_table_uiprefs\\'
 */",
 "/**
 * table to store SQL tracking
 *   - leave blank for no SQL tracking
 *     SUGGESTED: \\'pma_tracking\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'tracking\\']
 */",
 "/**
 * table to store user preferences
 *   - leave blank to disable server storage
 *     SUGGESTED: \\'pma_userconfig\\'
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'userconfig\\']
 */",
 "/**
 * Maximum number of records saved in $cfg[\\'Servers\\'][$i][\\'table_uiprefs\\'] table.
 *
 * In case where tables in databases is modified (e.g. dropped or renamed),
 * table_uiprefs may contains invalid data (referring to tables which are not
 * exist anymore).
 * This configuration make sure that we only keep N (N = MaxTableUiprefs)
 * newest record in table_uiprefs and automatically delete older records.
 *
 * @global integer $cfg[\\'Servers\\'][$i][\\'userconfig\\'] = \\'\\';
 */",
 "/**
 * set to false if you know that your pma_* tables are up to date.
 * This prevents compatibility checks and thereby increases performance.
 *
 * @global boolean $cfg[\\'Servers\\'][$i][\\'verbose_check\\']
 */",
 "/**
 * whether to allow root login
 *
 * @global boolean $cfg[\\'Servers\\'][$i][\\'AllowRoot\\']
 */",
 "/**
 * whether to allow login of any user without a password
 *
 * @global boolean $cfg[\\'Servers\\'][$i][\\'AllowNoPassword\\']
 */",
 "/**
 * Host authentication order, leave blank to not use
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'AllowDeny\\'][\\'order\\']
 */",
 "/**
 * Host authentication rules, leave blank for defaults
 *
 * @global array $cfg[\\'Servers\\'][$i][\\'AllowDeny\\'][\\'rules\\']
 */",
 "/**
 * Disable use of INFORMATION_SCHEMA. Is always \\'true\\' for Drizzle.
 *
 * @see http://sf.net/support/tracker.php?aid=1849494
 * @see http://bugs.mysql.com/19588
 * @global boolean $cfg[\\'Servers\\'][$i][\\'DisableIS\\']
 */",
 "/**
 * SQL command to fetch available databases
 *
 * by default most user will be fine with SHOW DATABASES,
 * for servers with a huge amount of databases it is possible to
 * define a command which executes faster but with less information
 *
 * especially when accessing database servers from ISPs changing this command
 * can result in a great speed improvement
 *
 * false will disable fetching databases from the server, only databases in
 * $cfg[\\'Servers\\'][$i][\\'only_db\\'] will be displayed
 *
 * #user# will be replaced by current user
 *
 * examples:
 * \\'SHOW DATABASES\\'
 * \"SHOW DATABASES LIKE \\'#user#\_%\\'\"
 * \\'SELECT DISTINCT TABLE_SCHEMA FROM information_schema.SCHEMA_PRIVILEGES\\'
 * \\'SELECT SCHEMA_NAME FROM information_schema.SCHEMATA\\'
 * false
 *
 * @global array $cfg[\\'Servers\\'][$i][\\'ShowDatabasesCommand\\']
 */",
 "/**
 * Whether to count tables when showing database list
 *
 * @global array $cfg[\\'Servers\\'][$i][\\'CountTables\\']
 */",
 "/**
 * Whether the tracking mechanism creates versions for tables and views automatically.
 *
 * @global bool $cfg[\\'Servers\\'][$i][\\'tracking_version_auto_create\\']
 */",
 "/**
 * Defines the list of statements the auto-creation uses for new versions.
 *
 * @global string $cfg[\\'Servers\\'][$i][\\'tracking_default_statements\\']
 */",
 "/**
 * Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view.
 *
 * @global bool $cfg[\\'Servers\\'][$i][\\'tracking_add_drop_view\\']
 */",
 "/**
 * Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table.
 *
 * @global bool $cfg[\\'Servers\\'][$i][\\'tracking_add_drop_table\\']
 */",
 "/**
 * Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database.
 *
 * @global bool $cfg[\\'Servers\\'][$i][\\'tracking_add_drop_database\\']
 */",
 "/**
 * Default server (0 = no default server)
 *
 * If you have more than one server configured, you can set $cfg[\\'ServerDefault\\']
 * to any one of them to auto-connect to that server when phpMyAdmin is started,
 * or set it to 0 to be given a list of servers without logging in
 * If you have only one server configured, $cfg[\\'ServerDefault\\'] *MUST* be
 * set to that server.
 *
 * @global integer $cfg[\\'ServerDefault\\']
 */",
 "/**
 * whether Ajax behavior is active
 *
 * @global boolean $cfg[\\'AjaxEnable\\']
 */",
 "/**
 * whether version check is active
 *
 * @global boolean $cfg[\\'VersionCheck\\']
 */",
 "/**
 * maximum number of db\\'s displayed in left frame and database list
 *
 * @global integer $cfg[\\'MaxDbList\\']
 */",
 "/**
 * maximum number of tables displayed in table list
 *
 * @global integer $cfg[\\'MaxTableList\\']
 */",
 "/**
 * whether to show hint or not
 *
 * @global boolean $cfg[\\'ShowHint\\']
 */",
 "/**
 * maximum number of characters when a SQL query is displayed
 *
 * @global integer $cfg[\\'MaxCharactersInDisplayedSQL\\']
 */",
 "/**
 * use GZIP output buffering if possible (true|false|\\'auto\\')
 *
 * @global string $cfg[\\'OBGzip\\']
 */",
 "/**
 * use persistent connections to MySQL database
 *
 * @global boolean $cfg[\\'PersistentConnections\\']
 */",
 "/**
 * whether to force using HTTPS
 *
 * @global boolean $cfg[\\'ForceSSL\\']
 */",
 "/**
 * maximum execution time in seconds (0 for no limit)
 *
 * @global integer $cfg[\\'ExecTimeLimit\\']
 */",
 "/**
 * Path for storing session data (session_save_path PHP parameter).
 *
 * @global integer $cfg[\\'SessionSavePath\\']
 */",
 "/**
 * maximum allocated bytes (\\'0\\' for no limit)
 * this is a string because \\'16M\\' is a valid value; we must put here
 * a string as the default value so that /setup accepts strings
 *
 * @global string $cfg[\\'MemoryLimit\\']
 */",
 "/**
 * mark used tables, make possible to show locked tables (since MySQL 3.23.30)
 * Is ignored for Drizzle.
 *
 * @global boolean $cfg[\\'SkipLockedTables\\']
 */",
 "/**
 * show SQL queries as run
 *
 * @global boolean $cfg[\\'ShowSQL\\']
 */",
 "/**
 * retain SQL input on Ajax execute
 *
 * @global boolean $cfg[\\'RetainQueryEditor\\']
 */",
 "/**
 * show a \\'Drop database\\' link to normal users
 *
 * @global boolean $cfg[\\'AllowUserDropDatabase\\']
 */",
 "/**
 * confirm some commands that can result in loss of data
 * (see \"need_confirm\" in the parser)
 *
 * @global boolean $cfg[\\'Confirm\\']
 */",
 "/**
 * recall previous login in cookie authentication mode or not
 *
 * @global boolean $cfg[\\'LoginCookieRecall\\']
 */",
 "/**
 * validity of cookie login (in seconds; 1440 matches php.ini\\'s
 * session.gc_maxlifetime)
 *
 * @global integer $cfg[\\'LoginCookieValidity\\']
 */",
 "/**
 * how long login cookie should be stored (in seconds)
 *
 * @global integer $cfg[\\'LoginCookieStore\\']
 */",
 "/**
 * whether to delete all login cookies on logout
 *
 * @global boolean $cfg[\\'LoginCookieDeleteAll\\']
 */",
 "/**
 * whether to enable the \"database search\" feature or not
 *
 * @global boolean $cfg[\\'UseDbSearch\\']
 */",
 "/**
 * if set to true, PMA continues computing multiple-statement queries
 * even if one of the queries failed
 *
 * @global boolean $cfg[\\'IgnoreMultiSubmitErrors\\']
 */",
 "/**
 * if set to true, PMA will show the affected rows of EACH statement on
 * multiple-statement queries. See the libraries/import.php file for
 * hard coded defaults on how many queries a statement may contain!
 *
 * @global boolean $cfg[\\'VerboseMultiSubmit\\']
 */",
 "/**
 * allow login to any user entered server in cookie based authentication
 *
 * @global boolean $cfg[\\'AllowArbitraryServer\\']
 */",
 "/**
 * whether to display errors or not
 *
 * this does not affect errors of type  E_USER_*
 *
 * @global boolean $cfg[\\'Error_Handler\\'][\\'display\\']
 */",
 "/**
 * gather all errors in session to be displayed on a error reporting page
 * for viewing and/or sending to phpMyAdmin developer team
 *
 * @global boolean $cfg[\\'Error_Handler\\'][\\'gather\\']
 */",
 "/**
 * use a select-based menu and display only the current tables in the left frame.
 *
 * @global boolean $cfg[\\'LeftFrameLight\\']
 */",
 "/**
 * turn the select-based light menu into a tree
 *
 * @global boolean $cfg[\\'LeftFrameDBTree\\']
 */",
 "/**
 * the separator to sub-tree the select-based light menu tree
 *
 * @global string $cfg[\\'LeftFrameDBSeparator\\']
 */",
 "/**
 * Which string will be used to generate table prefixes
 * to split/nest tables into multiple categories
 *
 * @global string $cfg[\\'LeftFrameTableSeparator\\']
 */",
 "/**
 * How many sublevels should be displayed when splitting up tables by the above Separator
 *
 * @global integer $cfg[\\'LeftFrameTableLevel\\']
 */",
 "/**
 * display table comment as tooltip in left frame
 *
 * @global boolean $cfg[\\'ShowTooltip\\']
 */",
 "/**
 * if ShowToolTip is enabled, this defines that table/db comments
 *
 * @global boolean $cfg[\\'ShowTooltipAliasDB\\']
 */",
 "/**
 * are shown (in the left menu and db_structure) instead of table/db names.
 * Setting ShowTooltipAliasTB to \\'nested\\' will only use the Aliases for nested
 * descriptors, not the table itself.
 *
 * @global boolean $cfg[\\'ShowTooltipAliasTB\\']
 */",
 "/**
 * display logo at top of left frame
 *
 * @global boolean $cfg[\\'LeftDisplayLogo\\']
 */",
 "/**
 * where should logo link point to (can also contain an external URL)
 *
 * @global string $cfg[\\'LeftLogoLink\\']
 */",
 "/**
 * whether to open the linked page in the main window (\\'main\\') or
 * in a new window (\\'new\\')
 *
 * @global string $cfg[\\'LeftLogoLinkWindow\\']
 */",
 "/**
 * number of recently used tables displayed in the navigation frame
 *
 * @global integer $cfg[\\'LeftRecentTable\\']
 */",
 "/**
 * display a JavaScript table filter in the left frame
 * when more then x tables are present
 *
 * @global boolean $cfg[\\'LeftDisplayTableFilterMinimum\\']
 */",
 "/**
 * display server choice at top of left frame
 *
 * @global boolean $cfg[\\'LeftDisplayServers\\']
 */",
 "/**
 * server choice as links
 *
 * @global boolean $cfg[\\'DisplayServersList\\']
 */",
 "/**
 * database choice in light as links
 *
 * @global boolean $cfg[\\'DisplayDatabasesList\\']
 */",
 "/**
 * target of the navigation panel quick access icon
 *
 * Possible values:
 * \\'tbl_structure.php\\' = fields list
 * \\'tbl_sql.php\\' = SQL form
 * \\'tbl_select.php\\' = search page
 * \\'tbl_change.php\\' = insert row page
 * \\'sql.php\\' = browse page
 *
 * @global string $cfg[\\'LeftDefaultTabTable\\']
 */",
 "/**
 * allow to display statistics and space usage in the pages about database
 * details and table properties
 *
 * @global boolean $cfg[\\'ShowStats\\']
 */",
 "/**
 * show PHP info link
 *
 * @global boolean $cfg[\\'ShowPhpInfo\\']
 */",
 "/**
 * show MySQL server and web server information
 *
 * @global boolean $cfg[\\'ShowServerInfo\\']
 */",
 "/**
 * show change password link
 *
 * @global boolean $cfg[\\'ShowChgPassword\\']
 */",
 "/**
 * show create database form
 *
 * @global boolean $cfg[\\'ShowCreateDb\\']
 */",
 "/**
 * suggest a new DB name if possible (false = keep empty)
 *
 * @global boolean $cfg[\\'SuggestDBName\\']
 */",
 "/**
 * Use icons instead of text for the navigation bar buttons
 * and on right panel top menu (server db table) (true|false|\\'both\\')
 *
 * @global string $cfg[\\'NavigationBarIconic\\']
 */",
 "/**
 * Defines whether a user should be displayed a \"show all (records)\"
 * button in browse mode or not.
 *
 * @global boolean $cfg[\\'ShowAll\\']
 */",
 "/**
 * Number of rows displayed when browsing a result set. If the result
 * set contains more rows, \"Previous\" and \"Next\".
 *
 * @global integer $cfg[\\'MaxRows\\']
 */",
 "/**
 * default for \\'ORDER BY\\' clause (valid values are \\'ASC\\', \\'DESC\\' or \\'SMART\\' -ie
 * descending order for fields of type TIME, DATE, DATETIME & TIMESTAMP,
 * ascending order else-)
 *
 * @global string $cfg[\\'Order\\']
 */",
 "/**
 * default for \\'Show binary contents as HEX\\'
 *
 * @global string $cfg[\\'DisplayBinaryAsHex\\']
 */",
 "/**
 * disallow editing of binary fields
 * valid values are:
 *   false  allow editing
 *   \\'blob\\' allow editing except for BLOB fields
 *   \\'all\\'  disallow editing
 *
 * @global string $cfg[\\'ProtectBinary\\']
 */",
 "/**
 * Display the function fields in edit/insert mode
 *
 * @global boolean $cfg[\\'ShowFunctionFields\\']
 */",
 "/**
 * Display the type fields in edit/insert mode
 *
 * @global boolean $cfg[\\'ShowFieldTypesInDataEditView\\']
 */",
 "/**
 * Which editor should be used for CHAR/VARCHAR fields:
 *  input - allows limiting of input length
 *  textarea - allows newlines in fields
 *
 * @global string $cfg[\\'CharEditing\\']
 */",
 "/**
 * The minimum size for character input fields
 *
 * @global integer $cfg[\\'MinSizeForInputField\\']
 */",
 "/**
 * The maximum size for character input fields
 *
 * @global integer $cfg[\\'MinSizeForInputField\\']
 */",
 "/**
 * How many rows can be inserted at one time
 *
 * @global integer $cfg[\\'InsertRows\\']
 */",
 "/**
 * Sort order for items in a foreign-key drop-down list.
 * \\'content\\' is the referenced data, \\'id\\' is the key value.
 *
 * @global array $cfg[\\'ForeignKeyDropdownOrder\\']
 */",
 "/**
 * A drop-down list will be used if fewer items are present
 *
 * @global integer $cfg[\\'ForeignKeyMaxLimit\\']
 */",
 "/**
 * Allow for the use of zip compression (requires zip support to be enabled)
 *
 * @global boolean $cfg[\\'ZipDump\\']
 */",
 "/**
 * Allow for the use of gzip compression (requires zlib)
 *
 * @global boolean $cfg[\\'GZipDump\\']
 */",
 "/**
 * Allow for the use of bzip2 compression (requires bz2 extension)
 *
 * @global boolean $cfg[\\'BZipDump\\']
 */",
 "/**
 * Will compress gzip/bzip2 exports on the fly without the need for much memory.
 * If you encounter problems with created gzip/bzip2 files disable this feature.
 *
 * @global boolean $cfg[\\'CompressOnFly\\']
 */",
 "/**
 * Use graphically less intense menu tabs
 *
 * @global boolean $cfg[\\'LightTabs\\']
 */",
 "/**
 * Use icons instead of text for the table display of a database (true|false|\\'both\\')
 *
 * @global boolean $cfg[\\'PropertiesIconic\\']
 */",
 "/**
 * How many columns should be used for table display of a database?
 * (a value larger than 1 results in some information being hidden)
 *
 * @global integer $cfg[\\'PropertiesNumColumns\\']
 */",
 "/**
 * Possible values:
 * \\'main.php\\' = the welcome page
 * (recommended for multiuser setups)
 * \\'server_databases.php\\' = list of databases
 * \\'server_status.php\\' = runtime information
 * \\'server_variables.php\\' = MySQL server variables
 * \\'server_privileges.php\\' = user management
 * \\'server_processlist.php\\' = process list
 *
 * @global string $cfg[\\'DefaultTabServer\\']
 */",
 "/**
 * Possible values:
 * \\'db_structure.php\\' = tables list
 * \\'db_sql.php\\' = SQL form
 * \\'db_search.php\\' = search query
 * \\'db_operations.php\\' = operations on database
 *
 * @global string $cfg[\\'DefaultTabDatabase\\']
 */",
 "/**
 * Possible values:
 * \\'tbl_structure.php\\' = fields list
 * \\'tbl_sql.php\\' = SQL form
 * \\'tbl_select.php\\' = search page
 * \\'tbl_change.php\\' = insert row page
 * \\'sql.php\\' = browse page
 *
 * @global string $cfg[\\'DefaultTabTable\\']
 */",
 "/**
 * codegen/csv/excel/htmlexcel/htmlword/latex/ods/odt/pdf/sql/texytext/xls/xml/yaml
 *
 * @global string $cfg[\\'Export\\'][\\'format\\']
 */",
 "/**
 * quick/custom/custom-no-form
 *
 * @global string $cfg[\\'Export\\'][\\'format\\']
 */",
 "/**
 * none/zip/gzip/bzip2
 *
 * @global string $cfg[\\'Export\\'][\\'compression\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'asfile\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'charset\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'onserver\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'onserver_overwrite\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'quick_export_onserver\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'quick_export_onserver_overwrite\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'remember_file_template\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'file_template_table\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'file_template_database\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'file_template_server\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'codegen_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global $cfg[\\'Export\\'][\\'codegen_format\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'ods_columns\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'ods_null\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'odt_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'odt_columns\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'odt_relation\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'odt_comments\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'odt_mime\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'odt_null\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'htmlword_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'htmlword_columns\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'htmlword_null\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'texytext_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'texytext_columns\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'texytext_null\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'xls_columns\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'xls_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'xls_null\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'xlsx_columns\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'xlsx_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'xlsx_null\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'csv_columns\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'csv_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'csv_null\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'csv_separator\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'csv_enclosed\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'csv_escaped\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'csv_terminated\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'csv_removeCRLF\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'excel_columns\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'excel_null\\']
 */",
 "/**
 * win/mac
 *
 * @global string $cfg[\\'Export\\'][\\'excel_edition\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'excel_removeCRLF\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'excel_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'latex_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'latex_columns\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'latex_relation\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'latex_comments\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'latex_mime\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'latex_null\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'latex_caption\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'latex_structure_caption\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'latex_structure_continued_caption\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'latex_data_caption\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'latex_data_continued_caption\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'latex_data_label\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'latex_structure_label\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'mediawiki_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'ods_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'pdf_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'php_array_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'json_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'sql_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'sql_compatibility\\']
 */",
 "/**
 * Whether to include comments in SQL export.
 *
 * @global string $cfg[\\'Export\\'][\\'sql_include_comments\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_disable_fk\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_use_transaction\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_drop_database\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_drop_table\\']
 */",
 "/**
 *
 *
 * true by default for correct behavior when dealing with exporting
 * of VIEWs and the stand-in table
 * @global boolean $cfg[\\'Export\\'][\\'sql_if_not_exists\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_procedure_function\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_auto_increment\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_backquotes\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_dates\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_relation\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_delayed\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_ignore\\']
 */",
 "/**
 * Export time in UTC.
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_utc_time\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_hex_for_blob\\']
 */",
 "/**
 * insert/update/replace
 *
 * @global string $cfg[\\'Export\\'][\\'sql_type\\']
 */",
 "/**
 *
 *
 * @global integer $cfg[\\'Export\\'][\\'sql_max_query_size\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_comments\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_mime\\']
 */",
 "/**
 * \n is replaced by new line
 *
 * @global string $cfg[\\'Export\\'][\\'sql_header_comment\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Export\\'][\\'sql_create_table_statements\\']
 */",
 "/**
 * Whether to use complete inserts, extended inserts, both, or neither
 *
 * @global string $cfg[\\'Export\\'][\\'sql_insert_syntax\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'pdf_report_title\\']
 */",
 "/**
 *
 *
 *@global string $cfg[\\'Export\\'][\\'xml_structure_or_data\\']
 */",
 "/**
 * Export schema for each structure
 *
 * @global string $cfg[\\'Export\\'][\\'xml_export_struc\\']
 */",
 "/**
 * Export functions
 *
 * @global string $cfg[\\'Export\\'][\\'xml_export_functions\\']
 */",
 "/**
 * Export procedures
 *
 * @global string $cfg[\\'Export\\'][\\'xml_export_procedures\\']
 */",
 "/**
 * Export schema for each table
 *
 * @global string $cfg[\\'Export\\'][\\'xml_export_tables\\']
 */",
 "/**
 * Export triggers
 *
 * @global string $cfg[\\'Export\\'][\\'xml_export_triggers\\']
 */",
 "/**
 * Export views
 *
 * @global string $cfg[\\'Export\\'][\\'xml_export_views\\']
 */",
 "/**
 * Export contents data
 *
 * @global string $cfg[\\'Export\\'][\\'xml_export_contents\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Export\\'][\\'yaml_structure_or_data\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'format\\']
 */",
 "/**
 * Default charset for import.
 *
 * @global string $cfg[\\'Import\\'][\\'charset\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Import\\'][\\'allow_interrupt\\']
 */",
 "/**
 *
 *
 * @global integer $cfg[\\'Import\\'][\\'skip_queries\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'sql_compatibility\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'sql_no_auto_value_on_zero\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Import\\'][\\'csv_replace\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Import\\'][\\'csv_ignore\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'csv_terminated\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'csv_enclosed\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'csv_escaped\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'csv_new_line\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'csv_columns\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'csv_col_names\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Import\\'][\\'ldi_replace\\']
 */",
 "/**
 *
 *
 * @global boolean $cfg[\\'Import\\'][\\'ldi_ignore\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'ldi_terminated\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'ldi_enclosed\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'Import\\'][\\'ldi_escaped\\']
 */",
 "/**
*
*

*/",
 "/**
*
*

*/",
 "/**

*

*/",
 "/**
*
*

*/",
 "/**
*
*

*/",
 "/**
*
*

*/",
 "/**
*
*

*/",
 "/**
*
*

*/",
 "/**
*
*

*/",
 "/**
*
*

*/",
 "/**




*

*/",
 "/**

*viewable-\"viewable online\", current one used on MySQL website
 *   searchable - \"Searchable, with user comments\"
 *   chapters   - \"HTML, one page per chapter\"
 *   chapters_old - \"HTML, one page per chapter\", format used prior to MySQL 5.0 release
 *   big        - \"HTML, all on one page\"
 *   old        - old style used in phpMyAdmin 2.3.0 and sooner
 *   none       - do not show documentation links
 *
 * @global string $cfg[\\'MySQLManualType\\']
 */",
 "/**
 *
 *
 * @global array $cfg[\\'PDFPageSizes\\']
 */",
 "/**
 *
 *
 * @global string $cfg[\\'PDFDefaultPageSize\\']
 */",
 "/**
 * Default language to use, if not browser-defined or user-defined
 *
 * @global string $cfg[\\'DefaultLang\\']
 */",
 "/**
 * Default connection collation
 *
 * @global string $cfg[\\'DefaultConnectionCollation\\']
 */",
 "/**
 * Force: always use this language
 * $cfg[\\'Lang\\'] = \\'en\\';
 *
 * Regular expression to limit listed languages, e.g. \\'^(cs|en)\\' for Czech and
 * English only
 *
 * @global string $cfg[\\'FilterLanguages\\']
 */",
 "/**
 * You can select here which functions will be used for character set conversion.
 * Possible values are:
 *      auto   - automatically use available one (first is tested iconv, then
 *               recode)
 *      iconv  - use iconv or libiconv functions
 *      recode - use recode_string function
 *      none   - disable encoding conversion
 *
 * @global string $cfg[\\'RecodingEngine\\']
 */",
 "/**
 * Specify some parameters for iconv used in character set conversion. See iconv
 * documentation for details:
 * http://www.gnu.org/software/libiconv/documentation/libiconv/iconv_open.3.html
 *
 * @global string $cfg[\\'IconvExtraParams\\']
 */",
 "/**
 * Available character sets for MySQL conversion. currently contains all which could
 * be found in lang/* files and few more.
 * Character sets will be shown in same order as here listed, so if you frequently
 * use some of these move them to the top.
 *
 * @global array $cfg[\\'AvailableCharsets\\']
 */",
 "/**
 * enable the left panel pointer
 * (used when LeftFrameLight is false)
 * see also LeftPointerColor
 * in layout.inc.php
 *
 * @global boolean $cfg[\\'LeftPointerEnable\\']
 */",
 "/**
 * enable the browse pointer
 * see also BrowsePointerColor
 * in layout.inc.php
 *
 * @global boolean $cfg[\\'BrowsePointerEnable\\']
 */",
 "/**
 * enable the browse marker
 * see also BrowseMarkerColor
 * in layout.inc.php
 *
 * @global boolean $cfg[\\'BrowseMarkerEnable\\']
 */",
 "/**
 * textarea size (columns) in edit mode
 * (this value will be emphasized (*2) for SQL
 * query textareas and (*1.25) for query window)
 *
 * @global integer $cfg[\\'TextareaCols\\']
 */",
 "/**
 * textarea size (rows) in edit mode
 *
 * @global integer $cfg[\\'TextareaRows\\']
 */",
 "/**
 * double size of textarea size for LONGTEXT columns
 *
 * @global boolean $cfg[\\'LongtextDoubleTextarea\\']
 */",
 "/**
 * auto-select when clicking in the textarea of the query-box
 *
 * @global boolean $cfg[\\'TextareaAutoSelect\\']
 */",
 "/**
 * textarea size (columns) for CHAR/VARCHAR
 *
 * @global integer $cfg[\\'CharTextareaCols\\']
 */",
 "/**
 * textarea size (rows) for CHAR/VARCHAR
 *
 * @global integer $cfg[\\'CharTextareaRows\\']
 */",
 "/**
 * Max field data length in browse mode for all non-numeric fields
 *
 * @global integer $cfg[\\'LimitChars\\']
 */",
 "/**
 * Where to show the edit/copy/delete links in browse mode
 * Possible values are \\'left\\', \\'right\\', \\'both\\' and \\'none\\';
 * which will be interpreted as \\'top\\', \\'bottom\\', \\'both\\' and \\'none\\'
 * respectively for vertical display mode
 *
 * @global string $cfg[\\'RowActionLinks\\']
 */",
 "/**
 * default display direction (horizontal|vertical|horizontalflipped)
 *
 * @global string $cfg[\\'DefaultDisplay\\']
 */",
 "/**
 * remember the last way a table sorted
 *
 * @global string $cfg[\\'RememberSorting\\']
 */",
 "/**
 * table-header rotation via faking or CSS? (css|fake|auto)
 * NOTE: CSS only works in IE browsers!
 *
 * @global string $cfg[\\'HeaderFlipType\\']
 */",
 "/**
 * shows stored relation-comments in \\'browse\\' mode.
 *
 * @global boolean $cfg[\\'ShowBrowseComments\\']
 */",
 "/**
 * shows stored relation-comments in \\'table property\\' mode.
 *
 * @global boolean $cfg[\\'ShowPropertyComments\\']
 */",
 "/**
 * save edited cell(s) in browse-mode at once.
 */",
 "/**
 * shows table display direction.
 */",
 "/**
 * repeat header names every X cells? (0 = deactivate)
 *
 * @global integer $cfg[\\'RepeatCells\\']
 */",
 "/**
 * Set to true if Edit link should open the query to edit in the query window
 * (assuming JavaScript is enabled), and to false if we should edit in the right panel
 *
 * @global boolean $cfg[\\'EditInWindow\\']
 */",
 "/**
 * Width of Query window
 *
 * @global integer $cfg[\\'QueryWindowWidth\\']
 */",
 "/**
 * Height of Query window
 *
 * @global integer $cfg[\\'QueryWindowHeight\\']
 */",
 "/**
 * Set to true if you want DB-based query history.If false, this utilizes
 * JS-routines to display query history (lost by window close)
 *
 * @global boolean $cfg[\\'QueryHistoryDB\\']
 */",
 "/**
 * which tab to display in the querywindow on startup
 * (sql|files|history|full)
 *
 * @global string $cfg[\\'QueryWindowDefTab\\']
 */",
 "/**
 * When using DB-based query history, how many entries should be kept?
 *
 * @global integer $cfg[\\'QueryHistoryMax\\']
 */",
 "/**
 * Use MIME-Types (stored in column comments table) for
 *
 * @global boolean $cfg[\\'BrowseMIME\\']
 */",
 "/**
 * When approximate count < this, PMA will get exact count for table rows.
 *
 * @global integer $cfg[\\'MaxExactCount\\']
 */",
 "/**
 * Zero means that no row count is done for views; see the doc
 *
 * @global integer $cfg[\\'MaxExactCountViews\\']
 */",
 "/**
 * Sort table and database in natural order
 *
 * @global boolean $cfg[\\'NaturalOrder\\']
 */",
 "/**
 * Initial state for sliders
 * (open | closed | disabled)
 *
 * @global string $cfg[\\'InitialSlidersState\\']
 */",
 "/**
 * User preferences: disallow these settings
 * For possible setting names look in libraries/config/user_preferences.forms.php
 *
 * @global array $cfg[\\'UserprefsDisallow\\']
 */",
 "/**
 * User preferences: enable the Developer tab
 */",
 "/**
 * title of browser window when a table is selected
 *
 * @global string $cfg[\\'TitleTable\\']
 */",
 "/**
 * title of browser window when a database is selected
 *
 * @global string $cfg[\\'TitleDatabase\\']
 */",
 "/**
 * title of browser window when a server is selected
 *
 * @global string $cfg[\\'TitleServer\\']
 */",
 "/**
 * title of browser window when nothing is selected
 * @global string $cfg[\\'TitleDefault\\']
 */",
 "/**
 * show some icons for warning, error and information messages (true|false)?
 *
 * @global boolean $cfg[\\'ErrorIconic\\']
 */",
 "/**
 * show icons in list on main page and on menu tabs (true|false)?
 *
 * @global boolean $cfg[\\'MainPageIconic\\']
 */",
 "/**
 * show help button instead of Documentation text (true|false)?
 *
 * @global boolean $cfg[\\'ReplaceHelpImg\\']
 */",
 "/**
 * using themes manager please set up here the path to \\'themes\\' else leave empty
 *
 * @global string $cfg[\\'ThemePath\\']
 */",
 "/**
 * if you want to use selectable themes and if ThemesPath not empty
 * set it to true, else set it to false (default is false);
 *
 * @global boolean $cfg[\\'ThemeManager\\']
 */",
 "/**
 * set up default theme, if ThemePath not empty you can set up here an valid
 * path to themes or \\'original\\' for the original pma-theme
 *
 * @global string $cfg[\\'ThemeDefault\\']
 */",
 "/**
 * allow different theme for each configured server
 *
 * @global boolean $cfg[\\'ThemePerServer\\']
 */",
 "/**
 * Default query for table
 *
 * @global string $cfg[\\'DefaultQueryTable\\']
 */",
 "/**
 * Default query for database
 *
 * @global string $cfg[\\'DefaultQueryDatabase\\']
 */",
 "/**
 * Edit link to change a query
 *
 * @global boolean $cfg[\\'SQLQuery\\'][\\'Edit\\']
 */",
 "/**
 * EXPLAIN on SELECT queries
 *
 * @global boolean $cfg[\\'SQLQuery\\'][\\'Explain\\']
 */",
 "/**
 * Wrap a query in PHP
 *
 * @global boolean $cfg[\\'SQLQuery\\'][\\'ShowAsPHP\\']
 */",
 "/**
 * Validate a query (see $cfg[\\'SQLValidator\\'] as well)
 *
 * @global boolean $cfg[\\'SQLQuery\\'][\\'Validate\\']
 */",
 "/**
 * Refresh the results page
 *
 * @global boolean $cfg[\\'SQLQuery\\'][\\'Refresh\\']
 */",
 "/**
 * Directory for uploaded files that can be executed by phpMyAdmin.
 * For example \\'./upload\\'. Leave empty for no upload directory support.
 * Use %u for username inclusion.
 *
 * @global string $cfg[\\'UploadDir\\']
 */",
 "/**
 * Directory where phpMyAdmin can save exported data on server.
 * For example \\'./save\\'. Leave empty for no save directory support.
 * Use %u for username inclusion.
 *
 * @global string $cfg[\\'SaveDir\\']
 */",
 "/**
 * Directory where phpMyAdmin can save temporary files.
 * This is needed for MS Excel export, see documentation how to enable that.
 *
 * @global string $cfg[\\'TempDir\\']
 */",
 "/**
 * Is GD >= 2 available? Set to yes/no/auto. \\'auto\\' does auto-detection,
 * which is the only safe way to determine GD version.
 *
 * @global string $cfg[\\'GD2Available\\']
 */",
 "/**
 * Lists proxy IP and HTTP header combinations which are trusted for IP allow/deny
 *
 * @global array $cfg[\\'TrustedProxies\\']
 */",
 "/**
 * We normally check the permissions on the configuration file to ensure
 * it\\'s not world writable. However, phpMyAdmin could be installed on
 * a NTFS filesystem mounted on a non-Windows server, in which case the
 * permissions seems wrong but in fact cannot be detected. In this case
 * a sysadmin would set the following to false.
 */",
 "/**
 * Limit for length of URL in links. When length would be above this limit, it
 * is replaced by form with button.
 * This is required as some web servers (IIS) have problems with long URLs.
 * The recommended limit is 2000
 * (see http://www.boutell.com/newfaq/misc/urllength.html) but we put
 * 1000 to accommodate Suhosin, see bug #3358750.
 */",
 "/**
 * Disable the table maintenance mass operations, like optimizing or
 * repairing the selected tables of a database. An accidental execution
 * of such a maintenance task can enormously slow down a bigger database.
 */",
 "/**
 * Pretty-printing style to use on queries (html, text, none)
 *
 * @global string $cfg[\\'SQP\\'][\\'fmtType\\']
 */",
 "/**
 * Amount to indent each level (floats are valid)
 *
 * @global integer $cfg[\\'SQP\\'][\\'fmtInd\\']
 */",
 "/**
 * Units for indenting each level (CSS Types - {em, px, pt})
 *
 * @global string $cfg[\\'SQP\\'][\\'fmtIndUnit\\']
 */",
 "/**
 * Make the SQL Validator available
 *
 * @global boolean $cfg[\\'SQLValidator\\'][\\'use\\']
 */",
 "/**
 * If you have a custom username, specify it here (defaults to anonymous)
 *
 * @global string $cfg[\\'SQLValidator\\'][\\'username\\']
 */",
 "/**
 * Password for username
 *
 * @global string $cfg[\\'SQLValidator\\'][\\'password\\']
 */",
 "/**
 * Output executed queries and their execution times
 *
 * @global boolean $cfg[\\'DBG\\'][\\'sql\\']
 */",
 "/**
 * Column types;
 * VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity
 *
 * This variable is filled in data_*.inc.php
 *
 * @global array $cfg[\\'ColumnTypes\\']
 */",
 "/**
 * Attributes
 *
 * This variable is filled in data_*.inc.php
 *
 * @global array $cfg[\\'AttributeTypes\\']
 */",
 "/**
     * Available functions
     *
     * This variable is filled in data_*.inc.php
     *
     * @global array $cfg[\\'Functions\\']
     */",
 "/**
     * Which column types will be mapped to which Group?
     *
     * This variable is filled in data_*.inc.php
     *
     * @global array $cfg[\\'RestrictColumnTypes\\']
     */",
 "/**
     * Map above defined groups to any function
     *
     * This variable is filled in data_*.inc.php
     *
     * @global array $cfg[\\'RestrictFunctions\\']
     */",
 "/**
     * Default functions for above defined groups
     *
     * @global array $cfg[\\'DefaultFunctions\\']
     */",
 "/**
 * Search operators
 *
 * @global array $cfg[\\'NumOperators\\']
 */",
 "/**
 * Search operators
 *
 * @global array $cfg[\\'TextOperators\\']
 */",
 "/**
 * Search operators
 *
 * @global array $cfg[\\'EnumOperators\\']
 */",
 "/**
 * Search operators
 *
 * @global array $cfg[\\'SetOperators\\']
 */",
 "/**
 * Search operators
 *
 * @global array $cfg[\\'NullOperators\\']
 */",
 "/**
 * Search operators
 *
 * @global array $cfg[\\'UnaryOperators\\']
 */",
 "/**
 * Max rows retreived for zoom search
 */",
 "/**
 * copy values from one array to another, usually from a superglobal into $GLOBALS
 *
 * @param array   $array      values from
 * @param array   &$target    values to
 * @param bool    $sanitize   prevent importing key names in $_import_blacklist
 * @return bool
 */",
 "/**
 * @var array $_import_blacklist variable names that should NEVER be imported
 *                              from superglobals
 */",
 "/**
 * globalize some environment variables
 */",
 "/**
 * Sets required globals
 */",
 "/**
     * Display a list of available routines
     */",
 "/**
 * Main function for the routines functionality
 */",
 "/**
 * This function parses a string containing one parameter of a routine,
 * as returned by PMA_RTN_parseAllParameters() and returns an array containing
 * the information about this parameter.
 *
 * @param   string  $value    A string containing one parameter of a routine
 *
 * @return  array             Parsed information about the input parameter
 */",
 "/**
 * This function looks through the contents of a parsed
 * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts
 * information about the routine\\'s parameters.
 *
 * @param   array   $parsed_query  Parsed query, returned by by PMA_SQP_parse()
 * @param   string  $routine_type  Routine type: \\'PROCEDURE\\' or \\'FUNCTION\\'
 *
 * @return  array   Information about the parameteres of a routine.
 */",
 "/**
 * This function looks through the contents of a parsed
 * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts
 * information about the routine\\'s definer.
 *
 * @param   array   $parsed_query   Parsed query, returned by PMA_SQP_parse()
 *
 * @return  string  The definer of a routine.
 */",
 "/**
         * Handle a request to create/edit a routine
         */",
 "/**
 * Handles editor requests for adding or editing an item
 */",
 "/**
 * This function will generate the values that are required to
 * complete the editor form. It is especially necessary to handle
 * the \\'Add another parameter\\', \\'Remove last parameter\\' and
 * \\'Change routine type\\' functionalities when JS is disabled.
 *
 * @return  array    Data necessary to create the routine editor.
 */",
 "/**
 * This function will generate the values that are required to complete
 * the \"Edit routine\" form given the name of a routine.
 *
 * @param   string   $name   The name of the routine.
 * @param   string   $type   Type of routine (ROUTINE|PROCEDURE)
 * @param   bool     $all    Whether to return all data or just
 *                           the info about parameters.
 *
 * @return  array    Data necessary to create the routine editor.
 */",
 "/**
 * Creates one row for the parameter table used in the routine editor.
 *
 * @param   array    $routine    Data for the routine returned by
 *                               PMA_RTN_getDataFromRequest() or
 *                               PMA_RTN_getDataFromName()
 * @param   mixed    $index      Either a numeric index of the row being processed
 *                               or NULL to create a template row for AJAX request
 * @param   string   $class      Class used to hide the direction column, if the
 *                               row is for a stored function.
 *
 * @return    string    HTML code of one row of parameter table for the editor.
 */",
 "/**
 * Displays a form used to add/edit a routine
 *
 * @param   string   $mode         If the editor will be used edit a routine
 *                                 or add a new one: \\'edit\\' or \\'add\\'.
 * @param   string   $operation    If the editor was previously invoked with
 *                                 JS turned off, this will hold the name of
 *                                 the current operation
 * @param   array    $routine      Data for the routine returned by
 *                                 PMA_RTN_getDataFromRequest() or
 *                                 PMA_RTN_getDataFromName()
 *
 * @return  string   HTML code for the editor.
 */",
 "/**
 * Composes the query necessary to create a routine from an HTTP request.
 *
 * @return  string  The CREATE [ROUTINE | PROCEDURE] query.
 */",
 "/**
         * Display the execute form for a routine.
         */",
 "/**
 * Handles requests for executing a routine
 */",
 "/**
 * Creates the HTML code that shows the routine execution dialog.
 *
 * @param   array    $routine      Data for the routine returned by
 *                                 PMA_RTN_getDataFromName()
 *
 * @return  string   HTML code for the routine execution dialog.
 */",
 "/**
 * returns code for selecting databases
 *
 * @return String HTML code
 */",
 "/**
 * prints out code for changing master
 *
 * @param String $submitname - submit button name
 */",
 "/**
 * This function prints out table with replication status.
 *
 * @param string  $type   either master or slave
 * @param boolean $hidden if true, then default style is set to hidden, default value false
 * @param boolen  $title  if true, then title is displayed, default true
 */",
 "/**
 * Prints table with slave users connected to this master
 *
 * @param boolean $hidden - if true, then default style is set to hidden, default value false
 */",
 "/**
 * get the correct username and hostname lengths for this MySQL server
 *
 * @return  array   username length, hostname length
 */",
 "/**
 * Print code to add a replication slave user to the master
 */",
 "/**
 * Tries to detect MIME type of content.
 *
 * @param string &$test
 * @return string
 */",
 "/**
 * Returns validator list
 *
 * @return array
 */",
 "/**
 * Runs validation $validator_id on values $values and returns error list.
 *
 * Return values:
 * o array, keys - field path or formset id, values - array of errors
 *   when $isPostSource is true values is an empty array to allow for error list
 *   cleanup in HTML documen
 * o false - when no validators match name(s) given by $validator_id
 *
 * @param string|array  $validator_id
 * @param array         $values
 * @param bool          $isPostSource  tells whether $values are directly from POST request
 * @return bool|array
 */",
 "/**
 * Empty error handler, used to temporarily restore PHP internal error handler
 *
 * @return bool
 */",
 "/**
 * Ensures that $php_errormsg variable will be registered in case of an error
 * and enables output buffering (when $start = true).
 * Called with $start = false disables output buffering end restores
 * html_errors and track_errors.
 *
 * @param boolean $start
 */",
 "/**
 * Test database connection
 *
 * @param string $extension     \\'drizzle\\', \\'mysql\\' or \\'mysqli\\'
 * @param string $connect_type  \\'tcp\\' or \\'socket\\'
 * @param string $host
 * @param string $port
 * @param string $socket
 * @param string $user
 * @param string $pass
 * @param string $error_key
 * @return bool|array
 */",
 "/**
 * Validate server config
 *
 * @param string $path
 * @param array  $values
 * @return array
 */",
 "/**
 * Validate pmadb config
 *
 * @param string $path
 * @param array  $values
 * @return array
 */",
 "/**
 * Validates regular expression
 *
 * @param string $path
 * @param array  $values
 * @return array
 */",
 "/**
 * Validates TrustedProxies field
 *
 * @param string $path
 * @param array  $values
 * @return array
 */",
 "/**
 * Tests integer value
 *
 * @param string $path
 * @param array  $values
 * @param bool   $allow_neg       allow negative values
 * @param bool   $allow_zero      allow zero
 * @param int    $max_value       max allowed value
 * @param string $error_string    error message key: $GLOBALS[\"strConfig$error_lang_key\"]
 * @return string  empty string if test is successful
 */",
 "/**
 * Validates port number
 *
 * @param string $path
 * @param array  $values
 * @return array
 */",
 "/**
 * Validates positive number
 *
 * @param string $path
 * @param array  $values
 * @return array
 */",
 "/**
 * Validates non-negative number
 *
 * @param string $path
 * @param array  $values
 * @return array
 */",
 "/**
 * Validates value according to given regular expression
 * Pattern and modifiers must be a valid for PCRE <b>and</b> JavaScript RegExp
 *
 * @param string $path
 * @param array  $values
 * @param string $regex
 * @return void
 */",
 "/**
 * Validates upper bound for numeric inputs
 *
 * @param string $path
 * @param array  $values
 * @param int    $max_value
 * @return array
 */",
 "/**
 * Defines the url to return to in case of error in a sql statement
 */",
 "/**
     * No new name for the table!
     */",
 "/**
 * Back to the calling script
 */",
 "/**
 * Does the common work
 */",
 "/**
 * Messages are built using the message name
 */",
 "/**
 * Escapes wildcard in a database+table specification
 * before using it in a GRANT statement.
 *
 * Escaping a wildcard character in a GRANT is only accepted at the global
 * or database level, not at table level; this is why I remove
 * the escaping character. Internally, in mysql.tables_priv.Db there are
 * no escaping (for example test_db) but in mysql.db you\\'ll see test\_db
 * for a db-specific privilege.
 *
 * @param string $dbname    Database name
 * @param string $tablename Table name
 *
 * @return string the escaped (if necessary) database.table
 */",
 "/**
 * Generates a condition on the user name
 *
 * @param string $initial the user\\'s initial
 *
 * @return  string   the generated condition
 */",
 "/**
 * Extracts the privilege information of a priv table row
 *
 * @param array   $row        the row
 * @param boolean $enableHTML add <dfn> tag with tooltips
 *
 * @global  resource $user_link the database connection
 *
 * @return  array
 */",
 "/**
 * Displays on which column(s) a table-specific privilege is granted
 */",
 "/**
 * Displays the privileges form table
 *
 * @param string  $db     the database
 * @param string  $table  the table
 * @param boolean $submit wheather to display the submit button or not
 *
 * @global  array      $cfg         the phpMyAdmin configuration
 * @global  ressource  $user_link   the database connection
 *
 * @return  void
 */",
 "/**
 * Displays the fields used by the \"new user\" form as well as the
 * \"change login information / copy user\" form.
 *
 * @param string $mode are we creating a new user or are we just
 *                     changing  one? (allowed values: \\'new\\', \\'change\\')
 *
 * @global  array      $cfg     the phpMyAdmin configuration
 * @global  ressource  $user_link the database connection
 *
 * @return  void
 */",
 "/**
 * defines some standard links
 */",
 "/**
         * generate html on the fly for the new user that was just created.
         */",
 "/**
         * Generate the string for this alphabet\\'s initial, to update the user
         * pagination
         */",
 "/**
 * Add recently used table and reload the navigation.
 *
 * @param string $db Database name where the table is located.
 * @param string $table The table name
 */",
 "/**
         * Sets a variable to remember headers have been sent
         */",
 "/**
 * Checks whether given link is valid
 *
 * @param string $url URL to check
 * @return boolean True if string can be used as link
 */",
 "/**
 * Callback function for replacing [a@link@target] links in bb code.
 *
 * @param array $found Array of preg matches
 * @return string Replaced string
 */",
 "/**
 * Sanitizes $message, taking into account our special codes
 * for formatting.
 *
 * If you want to include result in element attribute, you should escape it.
 *
 * Examples:
 *
 * <p><?php echo PMA_sanitize($foo); ?></p>
 *
 * <a title=\"<?php echo PMA_sanitize($foo, true); ?>\">bar</a>
 *
 * @param string  $message the message
 * @param boolean $escape  whether to escape html in result
 * @param boolean $safe    whether string is safe (can keep < and > chars)
 * @return  string   the sanitized message
 */",
 "/**
 * Sanitize a filename by removing anything besides A-Za-z0-9_.-
 *
 * Intended usecase:
 *    When using a filename in a Content-Disposition header the value should not contain ; or \"
 *
 * @param   string  The filename
 *
 * @return  string  the sanitized filename
 *
 */",
 "/**
     * Conditional classes switch the list on or off
     */",
 "/**
     * Generate output
     */",
 "/**
 * Creates a list of items containing the relevant
 * information and some action links.
 *
 * @param    string   $type    One of [\\'routine\\'|\\'trigger\\'|\\'event\\']
 * @param    array    $items   An array of items
 *
 * @return   string   HTML code of the list of items
 */",
 "/**
 * Creates the contents for a row in the list of routines
 *
 * @param    array    $routine    An array of routine data
 * @param    string   $rowclass   Empty or one of [\\'even\\'|\\'odd\\']
 *
 * @return   string   HTML code of a row for the list of routines
 */",
 "/**
 * Creates the contents for a row in the list of triggers
 *
 * @param    array    $trigger    An array of routine data
 * @param    string   $rowclass   Empty or one of [\\'even\\'|\\'odd\\']
 *
 * @return   string   HTML code of a cell for the list of triggers
 */",
 "/**
 * Creates the contents for a row in the list of events
 *
 * @param    array    $event      An array of routine data
 * @param    string   $rowclass   Empty or one of [\\'even\\'|\\'odd\\']
 *
 * @return   string   HTML code of a cell for the list of events
 */",
 "/**
     * The \"PMA_DIA\" constructor
     *
     * Upon instantiation This starts writing the Dia XML document
     *
     * @return void
     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()
     */",
 "/**
     * Starts Dia Document
     *
     * dia document starts by first initializing dia:diagram tag
     * then dia:diagramdata contains all the attributes that needed
     * to define the document, then finally a Layer starts which
     * holds all the objects.
     *
     * @param string $paper        the size of the paper/document
     * @param float  $topMargin    top margin of the paper/document in cm
     * @param float  $bottomMargin bottom margin of the paper/document in cm
     * @param float  $leftMargin   left margin of the paper/document in cm
     * @param float  $rightMargin  right margin of the paper/document in cm
     * @param string $portrait     document will be portrait or landscape
     *
     * @return void
     *
     * @access public
     * @see XMLWriter::startElement(),XMLWriter::writeAttribute(),XMLWriter::writeRaw()
     */",
 "/**
     * Ends Dia Document
     *
     * @return void
     * @access public
     * @see XMLWriter::endElement(),XMLWriter::endDocument()
     */",
 "/**
     * Output Dia Document for download
     *
     * @param string $fileName name of the dia document
     *
     * @return void
     * @access public
     * @see XMLWriter::flush()
     */",
 "/**
 * This Class inherits the XMLwriter class and
 * helps in developing structure of DIA Schema Export
 *
 * @access public
 * @see http://php.net/manual/en/book.xmlwriter.php
 */",
 "/**
     * The \"Table_Stats\" constructor
     *
     * @param string  $tableName  The table name
     * @param integer $pageNumber The current page number (from the
     *                            $cfg[\\'Servers\\'][$i][\\'table_coords\\'] table)
     * @param boolean $showKeys   Whether to display ONLY keys or not
     *
     * @return void
     *
     * @global object    The current dia document
     * @global array     The relations settings
     * @global string    The current db name
     *
     * @see PMA_DIA
     */",
 "/**
     * Do draw the table
     *
     * Tables are generated using object type Database - Table
     * primary fields are underlined in tables. Dia object
     * is used to generate the XML of Dia Document. Database Table
     * Object and their attributes are involved in the combination
     * of displaing Database - Table on Dia Document.
     *
     * @param boolean $changeColor Whether to show color for tables text or not
     * if changeColor is true then an array of $listOfColors will be used to choose
     * the random colors for tables text we can change/add more colors to this array
     *
     * @return void
     *
     * @global object The current Dia document
     *
     * @access public
     * @see PMA_DIA
     */",
 "/**
 * Table preferences/statistics
 *
 * This class preserves the table co-ordinates,fields
 * and helps in drawing/generating the Tables in dia XML document.
 *
 * @name Table_Stats
 * @see PMA_DIA
 */",
 "/**
     * The \"Relation_Stats\" constructor
     *
     * @param string $master_table  The master table name
     * @param string $master_field  The relation field in the master table
     * @param string $foreign_table The foreign table name
     * @param string $foreign_field The relation field in the foreign table
     *
     * @return void
     *
     * @see Relation_Stats::_getXy
     */",
 "/**
     * Each Table object have connection points
     * which is used to connect to other objects in Dia
     * we detect the position of key in fields and
     * then determines its left and right connection
     * points.
     *
     * @param string $table  The current table name
     * @param string $column The relation column name
     *
     * @return array Table right,left connection points and key position
     *
     * @access private
     */",
 "/**
     * Draws relation references
     *
     * connects master table\\'s master field to foreign table\\'s
     * forein field using Dia object type Database - Reference
     * Dia object is used to generate the XML of Dia Document.
     * Database reference Object and their attributes are involved
     * in the combination of displaing Database - reference on Dia Document.
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     * if changeColor is true then an array of $listOfColors will be used to choose
     * the random colors for references lines. we can change/add more colors to this
     *
     * @return void
     *
     * @global object The current Dia document
     *
     * @access public
     * @see PMA_PDF
     */",
 "/**
 * Relation preferences/statistics
 *
 * This class fetches the table master and foreign fields positions
 * and helps in generating the Table references and then connects
 * master table\\'s master field to foreign table\\'s foreign key
 * in dia XML document.
 *
 * @name Relation_Stats
 * @see PMA_DIA
 */",
 "/**
     * The \"PMA_Dia_Relation_Schema\" constructor
     *
     * Upon instantiation This outputs the Dia XML document
     * that user can download
     *
     * @return void
     * @see PMA_DIA,Table_Stats,Relation_Stats
     */",
 "/**
     * Defines relation objects
     *
     * @param string $masterTable  The master table name
     * @param string $masterField  The relation field in the master table
     * @param string $foreignTable The foreign table name
     * @param string $foreignField The relation field in the foreign table
     * @param bool   $showKeys     Whether to display ONLY keys or not
     *
     * @return void
     *
     * @access private
     * @see Table_Stats::__construct(),Relation_Stats::__construct()
     */",
 "/**
     * Draws relation references
     *
     * connects master table\\'s master field to
     * foreign table\\'s forein field using Dia object
     * type Database - Reference
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     *
     * @return void
     *
     * @access private
     * @see Relation_Stats::relationDraw()
     */",
 "/**
     * Draws tables
     *
     * Tables are generated using Dia object type Database - Table
     * primary fields are underlined and bold in tables
     *
     * @param boolean $changeColor Whether to show color for tables text or not
     *
     * @return void
     *
     * @access private
     * @see Table_Stats::tableDraw()
     */",
 "/**
 * Dia Relation Schema Class
 *
 * Purpose of this class is to generate the Dia XML Document
 * which is used for representing the database diagrams in Dia IDE
 * This class uses Database Table and Reference Objects of Dia and with
 * the combination of these objects actually helps in preparing Dia XML.
 *
 * Dia XML is generated by using XMLWriter php extension and this class
 * inherits Export_Relation_Schema class has common functionality added
 * to this class
 *
 * @name Dia_Relation_Schema
 */",
 "/**
 * Sends the query
 */",
 "/**
 * If you have problems or questions about this theme email mikehomme@users.sourceforge.net
 */",
 "/**
 * Wrapper around IBM AIX iconv(), whose character set naming differs
 * from the GNU version of iconv().
 *
 * @param string   input character set
 * @param string   output character set
 * @param string   the string to convert
 *
 * @return  mixed    converted string or false on failure
 *
 * @access  public
 *
 */",
 "/**
     * returns array with variable names dedicated to MyISAM storage engine
     *
     * @return  array   variable names
     */",
 "/**
 * the MEMORY (HEAP) storage engine
 * @package PhpMyAdmin-Engines
 */",
 "/**
 * pass variables to child pages
 */",
 "/**
 * Helper function for connecting to the database server
 *
 * @param   PMA_Drizzle  $drizzle
 * @param   string       $host
 * @param   int          $port
 * @param   string       $uds
 * @param   string       $user
 * @param   string       $password
 * @param   string       $db
 * @param   int          $options
 * @return  PMA_DrizzleCon
 */",
 "/**
 * connects to the database server
 *
 * @param   string  $user           drizzle user name
 * @param   string  $password       drizzle user password
 * @param   bool    $is_controluser
 * @param   array   $server host/port/socket
 * @param   bool    $auxiliary_connection (when true, don\\'t go back to login if connection fails)
 * @return  mixed   false on error or a mysqli object on success
 */",
 "/**
 * selects given database
 *
 * @param string          $dbname  database name to select
 * @param PMA_DrizzleCom  $link    connection object
 * @return bool
 */",
 "/**
 * runs a query and returns the result
 *
 * @param   string          $query    query to execute
 * @param   PMA_DrizzleCon  $link     connection object
 * @param   int             $options
 * @return  PMA_DrizzleResult
 */",
 "/**
 * returns array of rows with associative and numeric keys from $result
 *
 * @param   PMA_DrizzleResult  $result
 * @return  array
 */",
 "/**
 * returns array of rows with associative keys from $result
 *
 * @param   PMA_DrizzleResult  $result
 * @return  array
 */",
 "/**
 * returns array of rows with numeric keys from $result
 *
 * @param   PMA_DrizzleResult  $result
 * @return  array
 */",
 "/**
 * Adjusts the result pointer to an arbitrary row in the result
 *
 * @param   PMA_DrizzleResult  $result
 * @param   int                $offset
 * @return  boolean true on success, false on failure
 */",
 "/**
 * Frees memory associated with the result
 *
 * @param  PMA_DrizzleResult  $result
 */",
 "/**
 * Check if there are any more query results from a multi query
 *
 * @return  bool         false
 */",
 "/**
 * Prepare next result from multi_query
 *
 * @return  bool         false
 */",
 "/**
 * Returns a string representing the type of connection used
 * @param   PMA_DrizzleCon  $link   connection object
 * @return  string          type of connection used
 */",
 "/**
 * Returns the version of the Drizzle protocol used
 * @param   PMA_DrizzleCon  $link   connection object
 * @return  int         version of the Drizzle protocol used
 */",
 "/**
 * returns a string that represents the client library version
 * @return  string          Drizzle client library version
 */",
 "/**
 * returns last error message or false if no errors occured
 *
 * @param   PMA_DrizzleCon  $link  connection object
 * @return  string|bool  $error or false
 */",
 "/**
 * returns the number of rows returned by last query
 *
 * @param   PMA_DrizzleResult  $result
 * @return  string|int
 */",
 "/**
 * returns last inserted auto_increment id for given $link or $GLOBALS[\\'userlink\\']
 *
 * @param   PMA_DrizzleCon  $link  connection object
 * @return  string|int
 */",
 "/**
 * returns the number of rows affected by last query
 *
 * @param   PMA_DrizzleResult  $link            connection object
 * @param   bool               $get_from_cache
 * @return  string|int
 */",
 "/**
 * returns metainfo for fields in $result
 *
 * @param   PMA_DrizzleResult  $result
 * @return  array  meta info for fields in $result
 */",
 "/**
 * return number of fields in given $result
 *
 * @param   PMA_DrizzleResult  $result
 * @return  int  field count
 */",
 "/**
 * returns the length of the given field $i in $result
 *
 * @param   PMA_DrizzleResult  $result
 * @param   int                $i       field
 * @return  int  length of field
 */",
 "/**
 * returns name of $i. field in $result
 *
 * @param   PMA_DrizzleResult  $result
 * @param   int                $i       field
 * @return  string  name of $i. field in $result
 */",
 "/**
 * returns concatenated string of human readable field flags
 *
 * @param   PMA_DrizzleResult  $result
 * @param   int                $i       field
 * @return  string  field flags
 */",
 "/**
 * Column types and functions supported by Drizzle
 *
 * @package PhpMyAdmin
 */",
 "/**
     * Returns the settings array
     *
     * @return the settings array.
     */",
 "/**
     * Constructor. Stores user specified options.
     *
     * @param array $data    Data for the visualization
     * @param array $options Users specified options
     */",
 "/**
     * All the variable initialization, options handling has to be done here.
     *
     * @return nothing
     */",
 "/**
     * A function which handles passed parameters. Useful if desired
     * chart needs to be a little bit different from the default one.
     *
     * @return nothing
     */",
 "/**
     * Sanitizes the file name.
     *
     * @param string $file_name file name
     * @param string $ext       extension of the file
     *
     * @return the sanitized file name
     */",
 "/**
     * Handles common tasks of writing the visualization to file for various formats.
     *
     * @param string $file_name file name
     * @param string $type      mime type
     * @param string $ext       extension of the file
     *
     * @return nothing
     */",
 "/**
     * Generate the visualization in SVG format.
     *
     * @return the generated image resource
     */",
 "/**
     * Get the visualization as a SVG.
     *
     * @return the visualization as a SVG
     */",
 "/**
     * Saves as a SVG image to a file.
     *
     * @param string $file_name File name
     *
     * @return nothing
     */",
 "/**
     * Generate the visualization in PNG format.
     *
     * @return the generated image resource
     */",
 "/**
     * Get the visualization as a PNG.
     *
     * @return the visualization as a PNG
     */",
 "/**
     * Saves as a PNG image to a file.
     *
     * @param string $file_name File name
     *
     * @return nothing
     */",
 "/**
     * Get the code for visualization with OpenLayers.
     *
     * @return the code for visualization with OpenLayers
     */",
 "/**
     * Saves as a PDF to a file.
     *
     * @param string $file_name File name
     *
     * @return nothing
     */",
 "/**
     * Calculates the scale, horizontal and vertical offset that should be used.
     *
     * @param array $data Row data
     *
     * @return an array containing the scale, x and y offsets
     */",
 "/**
     * Prepares and return the dataset as needed by the visualization.
     *
     * @param array  $data       Raw data
     * @param array  $scale_data Data related to scaling
     * @param string $format     Format of the visulaization
     * @param image  $results    Image object in the case of png
     *
     * @return the formatted array of data.
     */",
 "/**
 * Generates the JavaScripts needed to visualize GIS data.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
 * Initializes PBMS database
 *
 * @return bool
 */",
 "/** Retrieve current server configuration;
     *  at this point, $PMA_Config->get(\\'Servers\\') contains the server parameters
     *  as explicitely defined in config.inc.php, so it cannot be used; it\\'s
     *  better to use $GLOBALS[\\'cfg\\'][\\'Server\\'] which contains the explicit
     *  parameters merged with the default ones
     *
     */",
 "/**
 * checks whether the necessary plugins for BLOBStreaming exist
 *
 * @access  public
 * @return  boolean
*/",
 "/**
 * returns a list of BLOBStreaming variables used by MySQL
 *
 * @access  public
 * @return  array - list of BLOBStreaming variables
 */",
 "/**
 * Retrieves and shows PBMS error.
 *
 * @param sting $msg error message
 *
 * @return nothing
 */",
 "/**
 * Tries to connect to PBMS server.
 *
 * @param string $db_name Database name
 * @param bool   $quiet   Whether to report errors
 *
 * @return bool Connection status.
 */",
 "/**
 * Disconnects from PBMS server.
 *
 * @return nothing
 */",
 "/**
 * Checks whether the BLOB reference looks valid
 *
 * @param string $bs_reference BLOB reference
 * @param string $db_name      Database name
 *
 * @return bool True on success.
 */",
 "/**
 * In the future there may be server variables to turn on/off PBMS
 * BLOB streaming on a per table or database basis. So in anticipation of this
 * PMA_BS_IsTablePBMSEnabled() passes in the table and database name even though
 * they are not currently needed.
 *
 * @param string $db_name  database name
 * @param string $tbl_name table name
 * @param string $tbl_type table type
 *
 * @return bool
 */",
 "/**
     * Constructor
     *
     * @param array $params
     */",
 "/**
     * returns an array with all indexes from the given table
     *
     * @param string $table
     * @param string $schema
     * @return  array
     */",
 "/**
     * return primary if set, false otherwise
     *
     * @param string $table
     * @param string $schema
     * @return  mixed primary index or false if no one exists
     */",
 "/**
     * Load index data for table
     *
     * @param string $table
     * @param string $schema
     * @return  boolean
     */",
 "/**
     * Add column to index
     *
     * @param array $params column params
     */",
 "/**
     * Returns true if $column indexed in this index
     *
     * @param string $column
     * @return  boolean
     */",
 "/**
     * Return a list of all index choices
     *
     * @return  array index choices
     */",
 "/**
     * Show index data
     *
     * @param string      $table          The tablename
     * @param array       $indexes_info   Referenced info array
     * @param array       $indexes_data   Referenced data array
     * @param boolean     $print_mode
     * @access  public
     * @return  array       Index collection array
     */",
 "/**
     * Function to check over array of indexes and look for common problems
     *
     * @access  public
     * @param string      name of table
     * @return  string      Output HTML
     */",
 "/**
 * @since phpMyAdmin 3.0.0
 *
 * @package PhpMyAdmin
 */",
 "/**
 * @package PhpMyAdmin
 */",
 "/**
 * get master replication from server
 */",
 "/**
 * get slave replication from server
 */",
 "/**
 * replication types
 */",
 "/**
 * define variables for master status
 */",
 "/**
 * Define variables for slave status
 */",
 "/**
 * @param $string contains \"dbname.tablename\"
 * @param $what   what to extract (db|table)
 * @return $string the extracted part
 */",
 "/**
 * @param string $action  possible values: START or STOP
 * @param string $control default: null, possible values: SQL_THREAD or IO_THREAD or null. If it is set to null, it controls both SQL_THREAD and IO_THREAD
 * @param mixed  $link    mysql link
 *
 * @return mixed output of PMA_DBI_try_query
 */",
 "/**
 * @param string $user     replication user on master
 * @param string $password password for the user
 * @param string $host     master\\'s hostname or IP
 * @param int    $port     port, where mysql is running
 * @param array  $pos      position of mysql replication, array should contain fields File and Position
 * @param bool   $stop     shall we stop slave?
 * @param bool   $start    shall we start slave?
 * @param mixed  $link     mysql link
 *
 * @return output of CHANGE MASTER mysql command
 */",
 "/**
 * This function provides connection to remote mysql server
 *
 * @param string $user     mysql username
 * @param string $password password for the user
 * @param string $host     mysql server\\'s hostname or IP
 * @param int    $port     mysql remote port
 * @param string $socket   path to unix socket
 *
 * @return mixed $link mysql link on success
 */",
 "/**
 * @param mixed $link mysql link
 *
 * @return array - containing File and Position in MySQL replication on master server, useful for PMA_replication_slave_change_master
 */",
 "/**
 * Get list of replicated databases on master server
 *
 * @param mixed $link mysql link
 *
 * @return array array of replicated databases
 */",
 "/**
     * initializing arrays to save table names
     */",
 "/**
     *
     * Comparing Data In the Matching Tables
     * It is assumed that the matching tables are structurally
     * and typely exactly the same
     */",
 "/**
     * INTEGRATION OF STRUCTURE DIFFERENCE CODE
     *
     */",
 "/**
 * This function provides synchronization of structure and data between two mysql servers.
 *
 * @todo improve code sharing between the function and synchronization
 *
 * @param string $db       name of database, which should be synchronized
 * @param mixed  $src_link link of source server, note: if the server is current PMA server, use null
 * @param mixed  $trg_link link of target server, note: if the server is current PMA server, use null
 * @param bool   $data     if true, then data will be copied as well
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in NHibernate format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     *
     * @package PhpMyAdmin-Export
     * @subpackage Codegen
     */",
 "/**
     * Constructor
     *
     * @param string $table_name table name
     * @param string $db_name    database name
     */",
 "/**
     * returns table name
     *
     * @see PMA_Table::getName()
     * @return  string  table name
     */",
 "/**
     * return the last error
     *
     * @return the last error
     */",
 "/**
     * return the last message
     *
     * @return the last message
     */",
 "/**
     * sets table name
     *
     * @param string $table_name new table name
     *
     * @return nothing
     */",
 "/**
     * returns table name
     *
     * @param boolean $backquoted whether to quote name with backticks ``
     *
     * @return  string  table name
     */",
 "/**
     * sets database name for this table
     *
     * @param string $db_name database name
     *
     * @return nothing
     */",
 "/**
     * returns database name for this table
     *
     * @param boolean $backquoted whether to quote name with backticks ``
     *
     * @return  string  database name for this table
     */",
 "/**
     * returns full name for table, including database name
     *
     * @param boolean $backquoted whether to quote name with backticks ``
     *
     * @return string
     */",
 "/**
     * returns whether the table is actually a view
     *
     * @param string $db    database
     * @param string $table table
     *
     * @return whether the given is a view
     */",
 "/**
     * sets given $value for given $param
     *
     * @param string $param name
     * @param mixed  $value value
     *
     * @return nothing
     */",
 "/**
     * returns value for given setting/param
     *
     * @param string $param name for value to return
     *
     * @return  mixed   value for $param
     */",
 "/**
     * loads structure data
     * (this function is work in progress? not yet used)
     *
     * @return boolean
     */",
 "/**
     * Checks if this is a merge table
     *
     * If the ENGINE of the table is MERGE or MRG_MYISAM (alias),
     * this is a merge table.
     *
     * @param string $db    the database name
     * @param string $table the table name
     *
     * @return  boolean  true if it is a merge table
     */",
 "/**
     * Returns full table status info, or specific if $info provided
     * this info is collected from information_schema
     *
     * @param string  $db            database name
     * @param string  $table         table name
     * @param string  $info
     * @param boolean $force_read    read new rather than serving from cache
     * @param boolean $disable_error if true, disables error message
     *
     * @todo PMA_DBI_get_tables_full needs to be merged somehow into this class
     * or at least better documented
     *
     * @return mixed
     */",
 "/**
     * generates column specification for ALTER or CREATE TABLE syntax
     *
     * @param string      $name           name
     * @param string      $type           type (\\'INT\\', \\'VARCHAR\\', \\'BIT\\', ...)
     * @param string      $length         length (\\'2\\', \\'5,2\\', \\'\\', ...)
     * @param string      $attribute      attribute
     * @param string      $collation      collation
     * @param bool|string $null           with \\'NULL\\' or \\'NOT NULL\\'
     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,
     *                                    NULL, NONE, USER_DEFINED
     * @param string      $default_value  default value for USER_DEFINED default type
     * @param string      $extra          \\'AUTO_INCREMENT\\'
     * @param string      $comment        field comment
     * @param array       &$field_primary list of fields for PRIMARY KEY
     * @param string      $index
     *
     * @todo    move into class PMA_Column
     * @todo on the interface, some js to clear the default value when the default
     * current_timestamp is checked
     *
     * @return  string  field specification
     */",
 "/**
     * Counts and returns (or displays) the number of records in a table
     *
     * Revision 13 July 2001: Patch for limiting dump size from
     * vinay@sanisoft.com & girish@sanisoft.com
     *
     * @param string $db          the current database name
     * @param string $table       the current table name
     * @param bool   $force_exact whether to force an exact count
     * @param bool   $is_view     whether the table is a view
     *
     * @return mixed the number of records if \"retain\" param is true,
     *               otherwise true
     */",
 "/**
     * Generates column specification for ALTER syntax
     *
     * @param string      $oldcol         old column name
     * @param string      $newcol         new column name
     * @param string      $type           type (\\'INT\\', \\'VARCHAR\\', \\'BIT\\', ...)
     * @param string      $length         length (\\'2\\', \\'5,2\\', \\'\\', ...)
     * @param string      $attribute      attribute
     * @param string      $collation      collation
     * @param bool|string $null           with \\'NULL\\' or \\'NOT NULL\\'
     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,
     *                                    NULL, NONE, USER_DEFINED
     * @param string      $default_value  default value for USER_DEFINED default type
     * @param string      $extra          \\'AUTO_INCREMENT\\'
     * @param string      $comment        field comment
     * @param array       &$field_primary list of fields for PRIMARY KEY
     * @param string      $index
     * @param mixed       $default_orig
     *
     * @see PMA_Table::generateFieldSpec()
     *
     * @return  string  field specification
     */",
 "/**
     * Inserts existing entries in a PMA_* table by reading a value from an old entry
     *
     * @param string $work         The array index, which Relation feature to check
     *                             (\\'relwork\\', \\'commwork\\', ...)
     * @param string $pma_table    The array index, which PMA-table to update
     *                             (\\'bookmark\\', \\'relation\\', ...)
     * @param array  $get_fields   Which fields will be SELECT\\'ed from the old entry
     * @param array  $where_fields Which fields will be used for the WHERE query
     *                             (array(\\'FIELDNAME\\' => \\'FIELDVALUE\\'))
     * @param array  $new_fields   Which fields will be used as new VALUES. These are
     *                             the important keys which differ from the old entry
     *                             (array(\\'FIELDNAME\\' => \\'NEW FIELDVALUE\\'))
     *
     * @global relation variable
     *
     * @return int|true
     */",
 "/**
                 * @todo revise this code when we support cross-db relations
                 */",
 "/**
     * Copies or renames table
     *
     * @param string $source_db    source database
     * @param string $source_table source table
     * @param string $target_db    target database
     * @param string $target_table target table
     * @param string $what         what to be moved or copied (data, dataonly)
     * @param bool   $move         whether to move
     * @param string $mode         mode
     *
     * @return bool true if success, false otherwise
     */",
 "/**
     * checks if given name is a valid table name,
     * currently if not empty, trailing spaces, \\'.\\', \\'/\\' and \\'\\\'
     *
     * @param string $table_name name to check
     *
     * @todo add check for valid chars in filename on current system/os
     * @see  http://dev.mysql.com/doc/refman/5.0/en/legal-names.html
     *
     * @return  boolean whether the string is valid or not
     */",
 "/**
     * renames table
     *
     * @param string $new_name new table name
     * @param string $new_db   new database name
     * @param bool   $is_view  is this for a VIEW rename?
     * @todo    remove the $is_view parameter (also in callers)
     *
     * @return bool success
     */",
 "/**
     * Get all unique columns
     *
     * returns an array with all columns with unqiue content, in fact these are
     * all columns being single indexed in PRIMARY or UNIQUE
     *
     * e.g.
     *  - PRIMARY(id) // id
     *  - UNIQUE(name) // name
     *  - PRIMARY(fk_id1, fk_id2) // NONE
     *  - UNIQUE(x,y) // NONE
     *
     * @param bool $backquoted whether to quote name with backticks ``
     *
     * @return array
     */",
 "/**
     * Get all indexed columns
     *
     * returns an array with all columns make use of an index, in fact only
     * first columns in an index
     *
     * e.g. index(col1, col2) would only return col1
     *
     * @param bool $backquoted whether to quote name with backticks ``
     *
     * @return array
     */",
 "/**
     * Get all columns
     *
     * returns an array with all columns
     *
     * @param bool $backquoted whether to quote name with backticks ``
     *
     * @return array
     */",
 "/**
     * Return UI preferences for this table from phpMyAdmin database.
     *
     * @return array
     */",
 "/**
     * Save this table\\'s UI preferences into phpMyAdmin database.
     *
     * @return true|PMA_Message
     */",
 "/**
     * Loads the UI preferences for this table.
     * If pmadb and table_uiprefs is set, it will load the UI preferences from
     * phpMyAdmin database.
     *
     * @return nothing
     */",
 "/**
     * Get a property from UI preferences.
     * Return false if the property is not found.
     * Available property:
     * - PROP_SORTED_COLUMN
     * - PROP_COLUMN_ORDER
     * - PROP_COLUMN_VISIB
     *
     * @param string $property property
     *
     * @return mixed
     */",
 "/**
     * Set a property from UI preferences.
     * If pmadb and table_uiprefs is set, it will save the UI preferences to
     * phpMyAdmin database.
     * Available property:
     * - PROP_SORTED_COLUMN
     * - PROP_COLUMN_ORDER
     * - PROP_COLUMN_VISIB
     *
     * @param string $property          Property
     * @param mixed  $value             Value for the property
     * @param string $table_create_time Needed for PROP_COLUMN_ORDER and PROP_COLUMN_VISIB
     *
     * @return boolean|PMA_Message
     */",
 "/**
     * Remove a property from UI preferences.
     *
     * @param string $property the property
     *
     * @return true|PMA_Message
     */",
 "/**
 * @todo make use of PMA_Message and PMA_Error
 * @package PhpMyAdmin
 */",
 "/**
     * The \"PMA_SVG\" constructor
     *
     * Upon instantiation This starts writing the Svg XML document
     *
     * @return void
     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()
     */",
 "/**
     * Set document title
     *
     * @param string $value sets the title text
     *
     * @return void
     * @access public
     */",
 "/**
     * Set document author
     *
     * @param string $value sets the author
     *
     * @return void
     * @access public
     */",
 "/**
     * Set document font
     *
     * @param string $value sets the font e.g Arial, Sans-serif etc
     *
     * @return void
     * @access public
     */",
 "/**
     * Get document font
     *
     * @return string returns the font name
     * @access public
     */",
 "/**
     * Set document font size
     *
     * @param string $value sets the font size in pixels
     *
     * @return void
     * @access public
     */",
 "/**
     * Get document font size
     *
     * @return string returns the font size
     * @access public
     */",
 "/**
     * Starts Svg Document
     *
     * svg document starts by first initializing svg tag
     * which contains all the attributes and namespace that needed
     * to define the svg document
     *
     * @param integer $width  total width of the Svg document
     * @param integer $height total height of the Svg document
     *
     * @return void
     * @access public
     *
     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()
     */",
 "/**
     * Ends Svg Document
     *
     * @return void
     * @access public
     * @see XMLWriter::endElement(),XMLWriter::endDocument()
     */",
 "/**
     * output Svg Document
     *
     * svg document prompted to the user for download
     * Svg document saved in .svg extension and can be
     * easily changeable by using any svg IDE
     *
     * @param string $fileName file name
     *
     * @return void
     * @access public
     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()
     */",
 "/**
     * Draws Svg elements
     *
     * SVG has some predefined shape elements like rectangle & text
     * and other elements who have x,y co-ordinates are drawn.
     * specify their width and height and can give styles too.
     *
     * @param string  $name   Svg element name
     * @param integer $x      The x attr defines the left position of the element
     * (e.g. x=\"0\" places the element 0 pixels from the left of the browser window)
     * @param integer $y      The y attribute defines the top position of the element
     * (e.g. y=\"0\" places the element 0 pixels from the top of the browser window)
     * @param integer $width  The width attribute defines the width the element
     * @param integer $height The height attribute defines the height the element
     * @param string  $text   The text attribute defines the text the element
     * @param string  $styles The style attribute defines the style the element
     *  styles can be defined like CSS styles
     *
     * @return void
     * @access public
     *
     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),
     * XMLWriter::text(), XMLWriter::endElement()
     */",
 "/**
     * Draws Svg Line element
     *
     * Svg line element is drawn for connecting the tables.
     * arrows are also drawn by specify its start and ending
     * co-ordinates
     *
     * @param string  $name   Svg element name i.e line
     * @param integer $x1     Defines the start of the line on the x-axis
     * @param integer $y1     Defines the start of the line on the y-axis
     * @param integer $x2     Defines the end of the line on the x-axis
     * @param integer $y2     Defines the end of the line on the y-axis
     * @param string  $styles The style attribute defines the style the element
     *                        styles can be defined like CSS styles
     *
     * @return void
     * @access public
     *
     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),
     * XMLWriter::endElement()
     */",
 "/**
     * get width of string/text
     *
     * Svg text element width is calcualted depending on font name
     * and font size. It is very important to know the width of text
     * because rectangle is drawn around it.
     *
     * This is a bit hardcore method. I didn\\'t found any other than this.
     *
     * @param string  $text     string that width will be calculated
     * @param integer $font     name of the font like Arial,sans-serif etc
     * @param integer $fontSize size of font
     *
     * @return integer width of the text
     * @access public
     */",
 "/**
 * This Class inherits the XMLwriter class and
 * helps in developing structure of SVG Schema Export
 *
 * @access public
 * @see http://php.net/manual/en/book.xmlwriter.php
 */",
 "/**
     * The \"Table_Stats\" constructor
     *
     * @param string  $tableName        The table name
     * @param string  $font             Font face
     * @param integer $fontSize         The font size
     * @param integer $pageNumber       Page number
     * @param integer &$same_wide_width The max. with among tables
     * @param boolean $showKeys         Whether to display keys or not
     * @param boolean $showInfo         Whether to display table position or not
     *
     * @global object    The current SVG image document
     * @global integer   The current page number (from the
     *                   $cfg[\\'Servers\\'][$i][\\'table_coords\\'] table)
     * @global array     The relations settings
     * @global string    The current db name
     *
     * @access private
     *
     * @see PMA_SVG, Table_Stats::Table_Stats_setWidth,
     *       Table_Stats::Table_Stats_setHeight
     */",
 "/**
     * Returns title of the current table,
     * title can have the dimensions/co-ordinates of the table
     *
     * @access private
     */",
 "/**
     * Sets the width of the table
     *
     * @param string  $font     The font size
     * @param integer $fontSize The font size
     *
     * @global object    The current SVG image document
     *
     * @return nothing
     * @access private
     *
     * @see PMA_SVG
     */",
 "/**
     * Sets the height of the table
     *
     * @param integer $fontSize font size
     *
     * @return nothing
     * @access private
     */",
 "/**
     * draw the table
     *
     * @param boolean $showColor Whether to display color
     *
     * @global object The current SVG image document
     *
     * @access public
     * @return nothing
     *
     * @see PMA_SVG,PMA_SVG::printElement
     */",
 "/**
 * Table preferences/statistics
 *
 * This class preserves the table co-ordinates,fields
 * and helps in drawing/generating the Tables in SVG XML document.
 *
 * @name Table_Stats
 * @see PMA_SVG
 */",
 "/**
     * The \"Relation_Stats\" constructor
     *
     * @param string $master_table  The master table name
     * @param string $master_field  The relation field in the master table
     * @param string $foreign_table The foreign table name
     * @param string $foreign_field The relation field in the foreign table
     *
     * @return nothing
     *
     * @see Relation_Stats::_getXy
     */",
 "/**
     * Gets arrows coordinates
     *
     * @param string $table  The current table name
     * @param string $column The relation column name
     *
     * @return array Arrows coordinates
     * @access private
     */",
 "/**
     * draws relation links and arrows shows foreign key relations
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     *
     * @global object The current SVG image document
     *
     * @return nothing
     * @access public
     *
     * @see PMA_SVG
     */",
 "/**
 * Relation preferences/statistics
 *
 * This class fetches the table master and foreign fields positions
 * and helps in generating the Table references and then connects
 * master table\\'s master field to foreign table\\'s foreign key
 * in SVG XML document.
 *
 * @name Relation_Stats
 * @see PMA_SVG::printElementLine
 */",
 "/**
     * The \"PMA_Svg_Relation_Schema\" constructor
     *
     * Upon instantiation This starts writing the SVG XML document
     * user will be prompted for download as .svg extension
     *
     * @return void
     * @see PMA_SVG
     */",
 "/**
     * Sets X and Y minimum and maximum for a table cell
     *
     * @param string $table The table name
     *
     * @return nothing
     * @access private
     */",
 "/**
     * Defines relation objects
     *
     * @param string  $masterTable  The master table name
     * @param string  $font         The font face
     * @param int     $fontSize     Font size
     * @param string  $masterField  The relation field in the master table
     * @param string  $foreignTable The foreign table name
     * @param string  $foreignField The relation field in the foreign table
     * @param boolean $showInfo     Whether to display table position or not
     *
     * @access private
     * @return nothing
     *
     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()
     */",
 "/**
     * Draws relation arrows and lines
     * connects master table\\'s master field to
     * foreign table\\'s forein field
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     *
     * @return nothing
     * @access private
     *
     * @see Relation_Stats::relationDraw()
     */",
 "/**
     * Draws tables
     *
     * @param boolean $changeColor Whether to show color for primary fields or not
     *
     * @return nothing
     * @access private
     *
     * @see Table_Stats::Table_Stats_tableDraw()
     */",
 "/**
 * Svg Relation Schema Class
 *
 * Purpose of this class is to generate the SVG XML Document because
 * SVG defines the graphics in XML format which is used for representing
 * the database diagrams as vector image. This class actually helps
 *  in preparing SVG XML format.
 *
 * SVG XML is generated by using XMLWriter php extension and this class
 * inherits Export_Relation_Schema class has common functionality added
 * to this class
 *
 * @name Svg_Relation_Schema
 */",
 "/**
     * Outputs export footer
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
     * Outputs export header
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
     * Outputs database header
     *
     * @param string $db Database name
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
     * Outputs database footer
     *
     * @param string $db Database name
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string $db Database name
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
     * Outputs the content of a table in ODT format
     *
     * @param string $db        database name
     * @param string $table     table name
     * @param string $crlf      the end of line sequence
     * @param string $error_url the url to go back in case of error
     * @param string $sql_query SQL query for obtaining data
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
         * Get the unique keys in the table
         */",
 "/**
         * Displays the table structure
         */",
 "/**
     * Outputs table\\'s structure
     *
     * @param string $db          database name
     * @param string $table       table name
     * @param string $crlf        the end of line sequence
     * @param string $error_url   the url to go back in case of error
     * @param bool   $do_relation whether to include relation comments
     * @param bool   $do_comments whether to include the pmadb-style column comments
     *                            as comments in the structure; this is deprecated
     *                            but the parameter is left here because export.php
     *                            calls PMA_exportStructure() also for other export
     *                            types which use this parameter
     * @param bool   $do_mime     whether to include mime comments
     * @param bool   $dates       whether to include creation/update/check dates
     * @param string $export_mode \\'create_table\\', \\'triggers\\', \\'create_view\\', \\'stand_in\\'
     * @param string $export_type \\'server\\', \\'database\\', \\'table\\'
     *
     * @return bool Whether it succeeded
     *
     * @access public
     */",
 "/**
 * will be set in PMA_importGetNextChunk()
 *
 * @global boolean $GLOBALS[\\'finished\\']
 */",
 "/**
 * the font family as a valid css font family value,
 * if not set the browser default will be used
 * (depending on browser, DTD and system settings)
 */",
 "/**
 * fixed width font family, used in textarea
 */",
 "/**
 * SQL Parser Settings
 * Syntax colouring data
 */",
 "/**
 * Chart colors
 */",
 "/**
 * @todo check if we could replace by \"db_|tbl_\" - please clarify!?
 */",
 "/**
 * Sets parameters for links
 * where is this variable used?
 * replace by PMA_generate_common_url($url_params);
 */",
 "/**
 * Get comments for table fileds/columns
 */",
 "/**
 * used in ./libraries/header.inc.php to load JavaScript library file
 */",
 "/**
 * Get the analysis of SHOW CREATE TABLE for this table
 * @todo should be handled by class Table
 */",
 "/**
                 * @todo with functions this is not so easy, as you can basically
                 * process any data with function like MD5
                 */",
 "/**
             * This case happens for example for INT or DATE columns;
             * in these situations, the value returned in $field[\\'len\\']
             * seems appropriate.
             */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
 * Set parameters for links
 */",
 "/**
 * Defines the urls to return to in case of error in a sql statement
 */",
 "/**
 * Displays links
 */",
 "/**
     * Constructor
     */",
 "/**
     * Creates a new database conection using TCP
     *
     * @param $host
     * @param $port
     * @param $user
     * @param $password
     * @param $db
     * @param $options
     * @return PMA_DrizzleCon
     */",
 "/**
     * Creates a new connection using unix domain socket
     * 
     * @param $uds
     * @param $user
     * @param $password
     * @param $db
     * @param $options
     * @return PMA_DrizzleCon
     */",
 "/**
 * Wrapper for Drizzle class
 */",
 "/**
     * Constructor
     *
     * @param DrizzleCon $dcon
     */",
 "/**
     * Executes given query. Opens database connection if not already done.
     *
     * @param string $query
     * @param int    $bufferMode  PMA_Drizzle::BUFFER_RESULT, PMA_Drizzle::BUFFER_ROW
     * @param int    $fetchMode   PMA_Drizzle::FETCH_ASSOC, PMA_Drizzle::FETCH_NUM or PMA_Drizzle::FETCH_BOTH
     * @return PMA_DrizzleResult
     */",
 "/**
     * Returns the number of rows affected by last query
     *
     * @return int|false
     */",
 "/**
     * Pass calls of undefined methods to DrizzleCon object
     * 
     * @param $method
     * @param $args
     * @return mixed
     */",
 "/**
     * Returns original Drizzle connection object
     *
     * @return DrizzleCon
     */",
 "/**
 * Wrapper around DrizzleCon class
 *
 * Its main task is to wrap results with PMA_DrizzleResult class
 */",
 "/**
     * Constructor
     *
     * @param DrizzleResult $dresult
     * @param int           $bufferMode
     * @param int           $fetchMode
     */",
 "/**
     * Sets fetch mode
     *
     * @param int $fetchMode
     */",
 "/**
     * Reads information about columns contained in current result set into {@see $columns} and {@see $columnNames} arrays
     */",
 "/**
     * Returns columns in current result
     *
     * @return DrizzleColumn[]
     */",
 "/**
     * Returns number if columns in result
     *
     * @return int
     */",
 "/**
     * Transforms result row to conform to current fetch mode
     *
     * @param mixed &$row
     * @param int   $fetchMode
     */",
 "/**
     * Fetches next for from this result set
     *
     * @param int $fetchMode  fetch mode to use, if none given the default one is used
     * @return array|null
     */",
 "/**
     * Adjusts the result pointer to an arbitrary row in buffered result
     *
     * @param $row_index
     * @return bool
     */",
 "/**
     * Returns the number of rows in buffered result set
     *
     * @return int|false
     */",
 "/**
     * Returns the number of rows affected by query
     *
     * @return int|false
     */",
 "/**
     * Frees resources taken by this result
     */",
 "/**
 * Wrapper around DrizzleResult. Allows for reading result rows as an associative array
 * and hides complexity behind buffering.
 */",
 "/**
                 * @todo should this check really only happen if IS_TRANSFORMATION_WRAPPER?
                 */",
 "/**
     * returns string with filename for the MySQL helppage
     * about this storage engne
     *
     * @return  string  mysql helppage filename
     */",
 "/**
 *
 * @package PhpMyAdmin-Engines
 */",
 "/**
 * Returns sanitized language string, taking into account our special codes
 * for formatting. Takes variable number of arguments.
 * Based on PMA_sanitize from sanitize.lib.php.
 *
 * @param  string  $lang_key  key in $GLOBALS WITHOUT \\'strSetup\\' prefix
 * @param  mixed   $args,...  arguments for sprintf
 * @return string
 */",
 "/**
 * Returns translated field name/description or comment
 *
 * @param string $canonical_path
 * @param string $type  \\'name\\', \\'desc\\' or \\'cmt\\'
 * @param mixed  $default
 * @return string
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in YAML format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
 * Map of authenticated users to MySQL user/password pairs.
 */",
 "/**
 * Simple function to show HTML page with given content.
 */",
 "/**
         * Service opening
         *
         * @param string  URL of Mimer SQL Validator WSDL file
         *
         * @return object  Object to use
         *
         * @access private
         */",
 "/**
         * Service initializer to connect to server
         *
         * @param object   Service object
         * @param string   Username
         * @param string   Password
         * @param string   Name of calling program
         * @param string   Version of calling program
         * @param string   Target DBMS
         * @param string   Version of target DBMS
         * @param string   Connection Technology
         * @param string   version of Connection Technology
         * @param integer  boolean of 1/0 to specify if we are an interactive system
         *
         * @return object   stdClass return object with data
         *
         * @access private
         */",
 "/**
         * Validator sytem call
         *
         * @param object  Service object
         * @param object  Session object
         * @param string  SQL Query to validate
         * @param string  Data return type
         *
         * @return object  stClass return with data
         *
         * @access private
         */",
 "/**
         * Validator sytem call
         *
         * @param string  SQL Query to validate
         *
         * @return object  stdClass return with data
         *
         * @access private
         *
         * @see    validateSQL()
         */",
 "/**
         * Constructor
         *
         * @access public
         */",
 "/**
         * Sets credentials
         *
         * @param string  the username
         * @param string  the password
         *
         * @access public
         */",
 "/**
         * Sets the calling program
         *
         * @param string  the calling program name
         * @param string  the calling program revision
         *
         * @access public
         */",
 "/**
         * Appends the calling program
         *
         * @param string  the calling program name
         * @param string  the calling program revision
         *
         * @access public
         */",
 "/**
         * Sets the target DBMS
         *
         * @param string  the target DBMS name
         * @param string  the target DBMS revision
         *
         * @access public
         */",
 "/**
         * Appends the target DBMS
         *
         * @param string  the target DBMS name
         * @param string  the target DBMS revision
         *
         * @access public
         */",
 "/**
         * Sets the connection technology used
         *
         * @param string  the connection technology name
         * @param string  the connection technology revision
         *
         * @access public
         */",
 "/**
         * Appends the connection technology used
         *
         * @param string  the connection technology name
         * @param string  the connection technology revision
         *
         * @access public
         */",
 "/**
         * Sets whether interactive mode should be used or not
         *
         * @param integer  whether interactive mode should be used or not
         *
         * @access public
         */",
 "/**
         * Sets the output type to use
         *
         * @param string  the output type to use
         *
         * @access public
         */",
 "/**
         * Starts service
         *
         * @access public
         */",
 "/**
         * Starts session
         *
         * @access public
         */",
 "/**
         * Do start service and session
         *
         * @access public
         */",
 "/**
         * Call to determine just if a query is valid or not.
         *
         * @param string SQL statement to validate
         *
         * @return string Validator string from Mimer
         *
         * @see _validate
         */",
 "/**
         * Call for complete validator response
         *
         * @param string SQL statement to validate
         *
         * @return string Validator string from Mimer
         *
         * @see _validate
         */",
 "/**
 * @package PhpMyAdmin
 */",
 "/**
 * Checks if a character is an alphanumeric one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is an alphanumeric one or not
 */",
 "/**
 * Checks if a character is an alphabetic one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is an alphabetic one or not
 */",
 "/**
 * Checks if a character is a digit
 *
 * @param string   character to check for
 * @return  boolean  whether the character is a digit or not
 */",
 "/**
 * Checks if a character is an upper alphabetic one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is an upper alphabetic one or not
 */",
 "/**
 * Checks if a character is a lower alphabetic one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is a lower alphabetic one or not
 */",
 "/**
 * Checks if a character is a space one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is a space one or not
 */",
 "/**
 * Checks if a character is an hexadecimal digit
 *
 * @param string   character to check for
 * @return  boolean  whether the character is an hexadecimal digit or not
 */",
 "/**
     * Set the key to be used for en/decryption.
     *
     * @param string $key  The key to use.
     * @return bool
     */",
 "/**
     * Encrypt a block of data.
     *
     * @param string $block      The data to encrypt.
     * @param string $key        The key to use.
     *
     * @return string  The encrypted output.
     */",
 "/**
     * Encrypt left and right halves of a block of data.
     *
     * @param integer $L  Left half of the data.
     * @param integer $R  Right half of the data.
     *
     * @return array  A hash, with keys \\'L\\' and \\'R\\', and the encrypted data as
     *                the values.
     */",
 "/**
     * Decrypt a block of data.
     *
     * @param string $block  The data to decrypt.
     * @param string $key    The key to use.
     *
     * @return string  The decrypted output.
     */",
 "/**
 * The Horde_Cipher_Blowfish:: class implements the Horde_Cipher interface
 * encryption data using the Blowfish algorithm.
 *
 * Copyright 2002-2009 The Horde Project (http://www.horde.org/)
 *
 * See the enclosed file COPYING for license information (LGPL). If you
 * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html.
 *
 * @author  Mike Cochrane <mike@graftonhall.co.nz>
 * @package Horde_Cipher
 */",
 "/**
 * Encryption using blowfish algorithm
 *
 * @param string  original data
 * @param string  the secret
 *
 * @return  string  the encrypted result
 *
 * @access  public
 *
 */",
 "/**
 * Decryption using blowfish algorithm
 *
 * @param string  encrypted data
 * @param string  the secret
 *
 * @return  string  original data
 *
 * @access  public
 *
 */",
 "/**
     * This function must be named \"Footer\" to work with the TCPDF library
     */",
 "/**
     * Function to set alias which will be expanded on page rendering.
     */",
 "/**
     * Improved with alias expading.
     */",
 "/**
     * Displays an error message
     *
     * @param string $error_message the error mesage
     */",
 "/**
     * Sends file as a download to user.
     */",
 "/**
 * PDF export base class providing basic configuration.
 */",
 "/**
 * void PMA_TableHeader([bool $db_is_information_schema = false])
 * display table header (<table><thead>...</thead><tbody>)
 *
 * @param boolean $db_is_information_schema
 * @param boolean $replication
 */",
 "/**
 * Creates a clickable column header for table information
 *
 * @param string  $title title to use for the link
 * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php
 * @param string  $initial_sort_order
 * @return string  link to be displayed in the table header
 */",
 "/**
     * returns item only if there is only one in the list
     *
     * @return  single item
     */",
 "/**
     * defines what is an empty item (0, \\'\\', false or null)
     *
     * @return  mixed   an empty item
     */",
 "/**
     * checks if the given db names exists in the current list, if there is
     * missing at least one item it returns false otherwise true
     *
     * @param string  $db_name,..     one or more mysql result resources
     * @return  boolean true if all items exists, otheriwse false
     */",
 "/**
     * returns HTML <option>-tags to be used inside <select></select>
     *
     * @param mixed   $selected   the selected db or true for selecting current db
     * @param boolean $include_information_schema
     * @return  string  HTML option tags
     */",
 "/**
     * returns default item
     *
     * @return  string  default item
     */",
 "/**
     * builds up the list
     *
     */",
 "/**
 * @todo add caching
 * @since phpMyAdmin 2.9.10
 * @abstract
 * @package PhpMyAdmin
 */",
 "/**
 * Set parameters for links
 */",
 "/**
 * Defines the urls to return to in case of error in a sql statement
 */",
 "/**
 * @global boolean Checks for superuser privileges
 */",
 "/**
 * @global array binary log files
 */",
 "/**
  * constant for differenciating array in $_SESSION variable
  */",
 "/**
  * sets default plugin for handling the import process
  */",
 "/**
  * unique ID for each upload
  */",
 "/**
  * list of available plugins
  */",
 "/**
  * Checks if APC bar extension is available and configured correctly.
  *
  * @return true if APC extension is available and if rfc1867 is enabled, false if it is not
  */",
 "/**
  * Checks if UploadProgress bar extension is available.
  *
  * @return true if UploadProgress extension is available, false if it is not
  */",
 "/**
  * Default plugin for handling import. If no other plugin is available, noplugin is used.
  *
  * @return true
  */",
 "/**
  * The function outputs json encoded status of uploaded. It uses PMA_getUploadStatus, which is defined in plugin\\'s file.
  *
  * @param $id - ID of transfer, usually $upload_id from display_import_ajax.lib.php
  */",
 "/**
 * Holds information about the current table
 *
 * @todo replace this by PMA_Table
 * @global array $GLOBALS[\\'showtable\\']
 * @name $showtable
 */",
 "/**
 * Creates a fieldset for adding a new item, if the user has the privileges.
 *
 * @param    string   $docu   String used to create a link to the MySQL docs
 * @param    string   $priv   Privilege to check for adding a new item
 * @param    string   $name   MySQL name of the item
 *
 * @return   string   An HTML snippet with the link to add a new item
 */",
 "/**
 * Creates a fieldset for adding a new routine, if the user has the privileges.
 *
 * @return   string    HTML code with containing the fotter fieldset
 */",
 "/**
 * Creates a fieldset for adding a new trigger, if the user has the privileges.
 *
 * @return   string    HTML code with containing the fotter fieldset
 */",
 "/**
 * Creates a fieldset for adding a new event, if the user has the privileges.
 *
 * @return   string    HTML code with containing the fotter fieldset
 */",
 "/**
     * Prepares and returns the code related to a row in the GIS dataset as SVG.
     *
     * @param string $spatial    GIS data object
     * @param string $label      Label for the GIS data object
     * @param string $color      Color for the GIS data object
     * @param array  $scale_data Data related to scaling
     *
     * @return the code related to a row in the GIS dataset
     */",
 "/**
     * Adds to the PNG image object, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS data object
     * @param string $label      Label for the GIS data object
     * @param string $color      Color for the GIS data object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $image      Image object
     *
     * @return the modified image object
     */",
 "/**
     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS data object
     * @param string $label      Label for the GIS data object
     * @param string $color      Color for the GIS data object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $pdf        TCPDF instance
     *
     * @return the modified TCPDF instance
     */",
 "/**
     * Prepares the JavaScript related to a row in the GIS dataset
     * to visualize it with OpenLayers.
     *
     * @param string $spatial    GIS data object
     * @param int    $srid       Spatial reference ID
     * @param string $label      Label for the GIS data object
     * @param string $color      Color for the GIS data object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return the JavaScript related to a row in the GIS dataset
     */",
 "/**
     * Scales each row.
     *
     * @param string $spatial spatial data of a row
     *
     * @return array containing the min, max values for x and y cordinates
     */",
 "/**
     * Generate the WKT with the set of parameters passed by the GIS editor.
     *
     * @param array  $gis_data GIS data
     * @param int    $index    Index into the parameter object
     * @param string $empty    Value for empty points
     *
     * @return WKT with the set of parameters passed by the GIS editor
     */",
 "/**
     * Returns OpenLayers.Bounds object that correspond to the bounds of GIS data.
     *
     * @param string $srid       Spatial reference ID
     * @param array  $scale_data Data related to scaling
     *
     * @return OpenLayers.Bounds object that correspond to the bounds of GIS data
     */",
 "/**
     * Update the min, max values with the given point set.
     *
     * @param string $point_set Point set
     * @param array  $min_max   Existing min, max values
     *
     * @return the updated min, max values
     */",
 "/**
     * Generate parameters for the GIS data editor from the value of the GIS column.
     * This method performs common work.
     * More specific work is performed by each of the geom classes.
     *
     * @param $gis_string $value of the GIS column
     *
     * @return array parameters for the GIS editor from the value of the GIS column
     */",
 "/**
     * Extracts points, scales and returns them as an array.
     *
     * @param string  $point_set  String of comma sperated points
     * @param array   $scale_data Data related to scaling
     * @param boolean $linear     If true, as a 1D array, else as a 2D array
     *
     * @return scaled points
     */",
 "/**
     * Generates JavaScriipt for adding points for OpenLayers polygon.
     *
     * @param string $polygon points of a polygon in WKT form
     * @param string $srid    spatial reference id
     *
     * @return JavaScriipt for adding points for OpenLayers polygon
     */",
 "/**
 * Base class for all GIS data type classes.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
 * Displays the form
 */",
 "/**
 * Return a list of locales to try for any POSIX-style locale specification.
 */",
 "/**
 * Utility function to get a StreamReader for the given text domain.
 */",
 "/**
 * Returns whether we are using our emulated gettext API or PHP built-in one.
 */",
 "/**
 * Checks if the current locale is supported on this system.
 */",
 "/**
 * Get the codeset for the given domain.
 */",
 "/**
 * Convert the given string to the encoding set by bind_textdomain_codeset.
 */",
 "/**
 * Returns passed in $locale, or environment variable $LANG if $locale == \\'\\'.
 */",
 "/**
 * Sets a requested locale, if needed emulates it.
 */",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**

*/",
 "/**
 * the font family as a valid css font family value,
 * if not set the browser default will be used
 * (depending on browser, DTD and system settings)
 */",
 "/**
 * fixed width font family, used in textarea
 */",
 "/**
 * SQL Parser Settings
 * Syntax colouring data
 */",
 "/**
 * Chart colors
 */",
 "/**
     * Constructor
     *
     * @param mixed   $db_link_user       user database link resource|object
     * @param mixed   $db_link_control    control database link resource|object
     */",
 "/**
     * checks if the configuration wants to hide some databases
     */",
 "/**
     * retrieves database list from server
     *
     * @todo    we could also search mysql tables if all fail?
     * @param string  $like_db_name   usally a db_name containing wildcards
     * @return array
     */",
 "/**
     * builds up the list
     *
     */",
 "/**
     * checks the only_db configuration
     *
     * @return  boolean false if there is no only_db, otherwise true
     */",
 "/**
     * returns default item
     *
     * @return  string  default item
     */",
 "/**
     * returns array with dbs grouped with extended infos
     *
     * @param integer $offset
     * @param integer $count
     * @return  array   db list
     */",
 "/**
     * returns a part of the items
     *
     * @param integer $offset
     * @param integer $count
     * @return  array  some items
     */",
 "/**
     * returns html code for list with dbs
     *
     * @return  string  html code list
     */",
 "/**
     * returns html code for select form element with dbs
     *
     * @todo IE can not handle different text directions in select boxes so,
     * as mostly names will be in english, we set the whole selectbox to LTR
     * and EN
     *
     * @return  string  html code select
     */",
 "/**
     * this is just a backup, if all is fine this can be deleted later
     *
     * @deprecated
     */",
 "/**


*/",
 "/**
 * Load the XML string
 *
 * The option LIBXML_COMPACT is specified because it can
 * result in increased performance without the need to
 * alter the code in any way. It\\'s basically a freebee.
 */",
 "/**
 * Table accumulator
 */",
 "/**
 * Row accumulator
 */",
 "/**
 * Temp arrays
 */",
 "/**
 * CREATE code included (by default: no)
 */",
 "/**
 * Analyze the data in each table
 */",
 "/**
 * Get the database name, collation and charset
 */",
 "/**
     * If the structure section is not present
     * get the database name from the data section
     */",
 "/**
     * Get structures for all tables
     */",
 "/**
             * @todo    Generating a USE here blocks importing of a table
             *          into another database.
             */",
 "/**
                 * Remove the extra cosmetic spacing
                 */",
 "/**
 * Move down the XML tree to the actual data
 */",
 "/**
     * Bring accumulated rows into the corresponding table
     */",
 "/**
 * @global array list of tables from the current database
 * but do not clash with $tables coming from db_info.inc.php
 */",
 "/**
 * Displays top links if we are not in an Ajax request
 */",
 "/**
     * Builds the SQL search query
     *
     * @todo    can we make use of fulltextsearch IN BOOLEAN MODE for this?
     * PMA_backquote
     * PMA_DBI_free_result
     * PMA_DBI_fetch_assoc
     * $GLOBALS[\\'db\\']
     * explode
     * count
     * strlen
     * @param string   the table name
     * @param string   restrict the search to this field
     * @param string   the string to search
     * @param integer  type of search (1 -> 1 word at least, 2 -> all words,
     *                                   3 -> exact string, 4 -> regexp)
     *
     * @return  array    3 SQL querys (for count, display and delete results)
     */",
 "/**
     * Displays the results
     */",
 "/**
     * The \"PMA_EPS\" constructor
     *
     * Upon instantiation This starts writing the EPS Document.
     * %!PS-Adobe-3.0 EPSF-3.0 This is the MUST first comment to include
     * it shows/tells that the Post Script document is purely under
     * Document Structuring Convention [DSC] and is Compliant
     * Encapsulated Post Script Document
     *
     * @return void
     * @access public
     */",
 "/**
     * Set document title
     *
     * @param string $value sets the title text
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set document author
     *
     * @param string $value sets the author
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set document creation date
     *
     * @param string $value sets the date
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set document orientation
     *
     * @param string $value sets the author
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set the font and size
     *
     * font can be set whenever needed in EPS
     *
     * @param string  $value sets the font name e.g Arial
     * @param integer $size  sets the size of the font e.g 10
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Get the font
     *
     * @return string return the font name e.g Arial
     * @access public
     */",
 "/**
     * Get the font Size
     *
     * @return string return the size of the font e.g 10
     * @access public
     */",
 "/**
     * Draw the line
     *
     * drawing the lines from x,y source to x,y destination and set the
     * width of the line. lines helps in showing relationships of tables
     *
     * @param integer $x_from    The x_from attribute defines the start
     *                           left position of the element
     * @param integer $y_from    The y_from attribute defines the start
     *                           right position of the element
     * @param integer $x_to      The x_to attribute defines the end
     *                           left position of the element
     * @param integer $y_to      The y_to attribute defines the end
     *                           right position of the element
     * @param integer $lineWidth Sets the width of the line e.g 2
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Draw the rectangle
     *
     * drawing the rectangle from x,y source to x,y destination and set the
     * width of the line. rectangles drawn around the text shown of fields
     *
     * @param integer $x_from    The x_from attribute defines the start
                                 left position of the element
     * @param integer $y_from    The y_from attribute defines the start
                                 right position of the element
     * @param integer $x_to      The x_to attribute defines the end
                                 left position of the element
     * @param integer $y_to      The y_to attribute defines the end
                                 right position of the element
     * @param integer $lineWidth Sets the width of the line e.g 2
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Set the current point
     *
     * The moveto operator takes two numbers off the stack and treats
     * them as x and y coordinates to which to move. The coordinates
     * specified become the current point.
     *
     * @param integer $x The x attribute defines the left position of the element
     * @param integer $y The y attribute defines the right position of the element
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Output/Display the text
     *
     * @param string $text The string to be displayed
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * Output the text at specified co-ordinates
     *
     * @param string  $text String to be displayed
     * @param integer $x    X attribute defines the left position of the element
     * @param integer $y    Y attribute defines the right position of the element
     *
     * @return void
     *
     * @access public
     */",
 "/**
     * get width of string/text
     *
     * EPS text width is calcualted depending on font name
     * and font size. It is very important to know the width of text
     * because rectangle is drawn around it.
     *
     * This is a bit hardcore method. I didn\\'t found any other better than this.
     * if someone found better than this. would love to hear that method
     *
     * @param string  $text     string that width will be calculated
     * @param integer $font     name of the font like Arial,sans-serif etc
     * @param integer $fontSize size of font
     *
     * @return integer width of the text
     *
     * @access public
     */",
 "/**
     * Ends EPS Document
     *
     * @return void
     * @access public
     */",
 "/**
     * Output EPS Document for download
     *
     * @param string $fileName name of the eps document
     *
     * @return void
     *
     * @access public
     */",
 "/**
 * This Class is EPS Library and
 * helps in developing structure of EPS Schema Export
 *
 * @access public
 * @see http://php.net/manual/en/book.xmlwriter.php
 */",
 "/**
     * The \"Table_Stats\" constructor
     *
     * @param string  $tableName        The table name
     * @param string  $font             The font  name
     * @param integer $fontSize         The font size
     * @param integer $pageNumber       Page number
     * @param integer &$same_wide_width The max width among tables
     * @param boolean $showKeys         Whether to display keys or not
     * @param boolean $showInfo         Whether to display table position or not
     *
     * @global object    The current eps document
     * @global integer   The current page number (from the
     *                     $cfg[\\'Servers\\'][$i][\\'table_coords\\'] table)
     * @global array     The relations settings
     * @global string    The current db name
     *
     * @access private
     * @see PMA_EPS, Table_Stats::Table_Stats_setWidth,
     *      Table_Stats::Table_Stats_setHeight
     */",
 "/**
     * Returns title of the current table,
     * title can have the dimensions/co-ordinates of the table
     *
     * @return string The relation/table name
     * @access private
     */",
 "/**
     * Sets the width of the table
     *
     * @param string  $font     The font name
     * @param integer $fontSize The font size
     *
     * @global object    The current eps document
     *
     * @return void
     *
     * @access private
     * @see PMA_EPS
     */",
 "/**
     * Sets the height of the table
     *
     * @param integer $fontSize The font size
     *
     * @return void
     * @access private
     */",
 "/**
     * Draw the table
     *
     * @param boolean $showColor Whether to display color
     *
     * @global object The current eps document
     *
     * @return void
     *
     * @access public
     * @see PMA_EPS,PMA_EPS::line,PMA_EPS::rect
     */",
 "/**
 * Table preferences/statistics
 *
 * This class preserves the table co-ordinates,fields
 * and helps in drawing/generating the Tables in EPS.
 *
 * @name Table_Stats
 * @see PMA_EPS
 */",
 "/**
     * The \"Relation_Stats\" constructor
     *
     * @param string $master_table  The master table name
     * @param string $master_field  The relation field in the master table
     * @param string $foreign_table The foreign table name
     * @param string $foreign_field The relation field in the foreign table
     *
     * @see Relation_Stats::_getXy
     */",
 "/**
     * Gets arrows coordinates
     *
     * @param string $table  The current table name
     * @param string $column The relation column name
     *
     * @return array Arrows coordinates
     *
     * @access private
     */",
 "/**
     * draws relation links and arrows
     * shows foreign key relations
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     *
     * @global object The current EPS document
     *
     * @access public
     * @see PMA_EPS
     *
     * @return void
     */",
 "/**
 * Relation preferences/statistics
 *
 * This class fetches the table master and foreign fields positions
 * and helps in generating the Table references and then connects
 * master table\\'s master field to foreign table\\'s foreign key
 * in EPS document.
 *
 * @name Relation_Stats
 * @see PMA_EPS
 */",
 "/**
     * The \"PMA_EPS_Relation_Schema\" constructor
     *
     * Upon instantiation This starts writing the EPS document
     * user will be prompted for download as .eps extension
     *
     * @return void
     * @see PMA_EPS
     */",
 "/**
     * Defines relation objects
     *
     * @param string  $masterTable  The master table name
     * @param string  $font         The font
     * @param int     $fontSize     The font size
     * @param string  $masterField  The relation field in the master table
     * @param string  $foreignTable The foreign table name
     * @param string  $foreignField The relation field in the foreign table
     * @param boolean $showInfo     Whether to display table position or not
     *
     * @return void
     *
     * @access private
     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()
     */",
 "/**
     * Draws relation arrows and lines connects master table\\'s master field to
     * foreign table\\'s forein field
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     *
     * @return void
     *
     * @access private
     * @see Relation_Stats::relationDraw()
     */",
 "/**
     * Draws tables
     *
     * @param boolean $changeColor Whether to show color for primary fields or not
     *
     * @return void
     *
     * @access private
     * @see Table_Stats::Table_Stats_tableDraw()
     */",
 "/**
 * EPS Relation Schema Class
 *
 * Purpose of this class is to generate the EPS Document
 * which is used for representing the database diagrams.
 * This class uses post script commands and with
 * the combination of these commands actually helps in preparing EPS Document.
 *
 * This class inherits Export_Relation_Schema class has common functionality added
 * to this class
 *
 * @name Eps_Relation_Schema
 */",
 "/**
     * A private constructor; prevents direct creation of object.
     */",
 "/**
     * Returns the singleton.
     *
     * @return the singleton
     */",
 "/**
     * Scales each row.
     *
     * @param string $spatial spatial data of a row
     *
     * @return array containing the min, max values for x and y cordinates
     */",
 "/**
     * Adds to the PNG image object, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS MULTIPOLYGON object
     * @param string $label      Label for the GIS MULTIPOLYGON object
     * @param string $fill_color Color for the GIS MULTIPOLYGON object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $image      Image object
     *
     * @return the modified image object
     */",
 "/**
     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.
     *
     * @param string $spatial    GIS MULTIPOLYGON object
     * @param string $label      Label for the GIS MULTIPOLYGON object
     * @param string $fill_color Color for the GIS MULTIPOLYGON object
     * @param array  $scale_data Array containing data related to scaling
     * @param image  $pdf        TCPDF instance
     *
     * @return the modified TCPDF instance
     */",
 "/**
     * Prepares and returns the code related to a row in the GIS dataset as SVG.
     *
     * @param string $spatial    GIS MULTIPOLYGON object
     * @param string $label      Label for the GIS MULTIPOLYGON object
     * @param string $fill_color Color for the GIS MULTIPOLYGON object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return the code related to a row in the GIS dataset
     */",
 "/**
     * Prepares JavaScript related to a row in the GIS dataset
     * to visualize it with OpenLayers.
     *
     * @param string $spatial    GIS MULTIPOLYGON object
     * @param int    $srid       Spatial reference ID
     * @param string $label      Label for the GIS MULTIPOLYGON object
     * @param string $fill_color Color for the GIS MULTIPOLYGON object
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return JavaScript related to a row in the GIS dataset
     */",
 "/**
     * Draws a ring of the polygon using SVG path element.
     *
     * @param string $polygon    The ring
     * @param array  $scale_data Array containing data related to scaling
     *
     * @return the code to draw the ring
     */",
 "/**
     * Generate the WKT with the set of parameters passed by the GIS editor.
     *
     * @param array  $gis_data GIS data
     * @param int    $index    Index into the parameter object
     * @param string $empty    Value for empty points
     *
     * @return WKT with the set of parameters passed by the GIS editor
     */",
 "/**
     * Generate the WKT for the data from ESRI shape files.
     *
     * @param array $row_data GIS data
     *
     * @return the WKT for the data from ESRI shape files
     */",
 "/**
     * Generate parameters for the GIS data editor from the value of the GIS column.
     *
     * @param string $value of the GIS column
     * @param index  $index of the geometry
     *
     * @return  parameters for the GIS data editor from the value of the GIS column
     */",
 "/**
 * Handles the visualization of GIS MULTIPOLYGON objects.
 *
 * @package PhpMyAdmin-GIS
 */",
 "/**
 * This function is used to retreive some language strings that are used
 * in functionalities that are common to routines, triggers and events.
 *
 * @param   string  $index   The index of the string to get
 *
 * @return  string  The requested string or an empty string, if not available
 */",
 "/**
 * Checks if a character is an alphanumeric one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is an alphanumeric one or not
 */",
 "/**
 * Checks if a character is an alphabetic one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is an alphabetic one or not
 */",
 "/**
 * Checks if a character is a digit
 *
 * @param string   character to check for
 * @return  boolean  whether the character is a digit or not
 */",
 "/**
 * Checks if a character is an upper alphabetic one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is an upper alphabetic one or not
 */",
 "/**
 * Checks if a character is a lower alphabetic one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is a lower alphabetic one or not
 */",
 "/**
 * Checks if a character is a space one
 *
 * @param string   character to check for
 * @return  boolean  whether the character is a space one or not
 */",
 "/**
 * Checks if a character is an hexadecimal digit
 *
 * @param string   character to check for
 * @return  boolean  whether the character is an hexadecimal digit or not
 */",
 "/**
 * Defines the url to return to in case of error in a sql statement
 */",
 "/**
 * The form used to define the field to add has been submitted
 */",
 "/**
     * Displays top menu links
     */",
 "/**
     * Display the form
     */",
 "/**
 * @package PhpMyAdmin-Transformation
 */",
 "/**
 *
 */",
 "/**
     * Constructor
     *
     * @param integer $errno
     * @param string  $errstr
     * @param string  $errfile
     * @param integer $errline
     */",
 "/**
     * sets PMA_Error::$_backtrace
     *
     * @param array $backtrace
     */",
 "/**
     * sets PMA_Error::$_line
     *
     * @param integer $line
     */",
 "/**
     * sets PMA_Error::$_file
     *
     * @param string $file
     */",
 "/**
     * returns unique PMA_Error::$_hash, if not exists it will be created
     *
     * @param string $file
     * @return  string PMA_Error::$_hash
     */",
 "/**
     * returns PMA_Error::$_backtrace
     *
     * @return  array PMA_Error::$_backtrace
     */",
 "/**
     * returns PMA_Error::$_file
     *
     * @return  string PMA_Error::$_file
     */",
 "/**
     * returns PMA_Error::$_line
     *
     * @return  integer PMA_Error::$_line
     */",
 "/**
     * returns type of error
     *
     * @return  string  type of error
     */",
 "/**
     * returns level of error
     *
     * @return  string  level of error
     */",
 "/**
     * returns title prepared for HTML Title-Tag
     *
     * @return  string   HTML escaped and truncated title
     */",
 "/**
     * returns title for error
     *
     * @return string
     */",
 "/**
     * Display HTML backtrace
     *
     */",
 "/**
     * Display a single function argument
     * if $function is one of include/require the $arg is converted te relative path
     *
     * @param string $arg
     * @param string $function
     */",
 "/**
     * Displays the error in HTML
     *
     */",
 "/**
     * whether this error is a user error
     *
     * @return  boolean
     */",
 "/**

*


*



*/",
 "/**

*

*/",
 "/**
 * List of avaible forms, each form is described as an array of fields to display.
 * Fields MUST have their counterparts in the $cfg array.
 *
 * To define form field, use the notatnion below:
 * $forms[\\'Form group\\'][\\'Form name\\'] = array(\\'Option/path\\');
 *
 * You can assign default values set by special button (\"set value: ...\"), eg.:
 * \\'Servers/1/pmadb\\' => \\'phpmyadmin\\'
 *
 * To group options, use:
 * \\':group:\\' . __(\\'group name\\') // just define a group
 * or
 * \\'option\\' => \\':group\\' // group starting from this option
 * End group blocks with:
 * \\':group:end\\'
 *
 * @package PhpMyAdmin
 */",
 "/**
 * This function returns username and password.
 *
 * It can optionally use configured username as parameter.
 *
 * @param string $user
 * @return array
 */",
 "/**
 * Sets required globals
 */",
 "/**
     * Display a list of available triggers
     */",
 "/**
 * Main function for the triggers functionality
 */",
 "/**
 * Handles editor requests for adding or editing an item
 */",
 "/**
 * This function will generate the values that are required to for the editor
 *
 * @return  array    Data necessary to create the editor.
 */",
 "/**
 * This function will generate the values that are required to complete
 * the \"Edit trigger\" form given the name of a trigger.
 *
 * @param   string   $name   The name of the trigger.
 *
 * @return  array    Data necessary to create the editor.
 */",
 "/**
 * Displays a form used to add/edit a trigger
 *
 * @param   string   $mode         If the editor will be used edit a trigger
 *                                 or add a new one: \\'edit\\' or \\'add\\'.
 * @param   array    $item         Data for the trigger returned by
 *                                 PMA_TRI_getDataFromRequest() or
 *                                 PMA_TRI_getDataFromName()
 *
 * @return  string   HTML code for the editor.
 */",
 "/**
 * Composes the query necessary to create a trigger from an HTTP request.
 *
 * @return  string  The CREATE TRIGGER query.
 */",
 "/**
 * Sorts available languages by their true english names
 *
 * @param array   the array to be sorted
 * @param mixed   a required parameter
 * @return  the sorted array
 * @access  private
 */",
 "/**
 * Displays for for language selection
 *
 * @access  public
 */",
 "/**
     * Escapes percent string to be used in format string.
     *
     * @param string $str string to escape
     *
     * @return string
     */",
 "/**
     * Wrapper function for translating.
     *
     * @param string $str
     * @param mixed  $param
     *
     * @return string
     */",
 "/**
     * Splits justification to text and formula.
     *
     * @param string $rule
     *
     * @return array
     */",
 "/**
 * A simple rules engine, that parses and executes the rules in advisory_rules.txt. Adjusted to phpMyAdmin
 *
 *
 * @package PhpMyAdmin
 */",
 "/**
 * Returns language name
 *
 * @param string $tmplang
 * @return string
 */",
 "/**
 * tries to find the language to use
 *
 * @return  bool    success if valid lang is found, otherwise false
 */",
 "/**
 * checks given lang and sets it if valid
 * returns true on success, otherwise flase
 *
 * @param string  $lang   language to set
 * @return  bool    success
 */",
 "/**
 * Analyzes some PHP environment variables to find the most probable language
 * that should be used
 *
 * @param string   string to analyze
 * @param integer  type of the PHP environment variable which value is $str
 *
 * @return  bool    true on success, otherwise false
 *
 *
 * @access  private
 */",
 "/**
 * All the supported languages have to be listed in the array below.
 * 1. The key must be the \"official\" ISO 639 language code and, if required,
 *    the dialect code. It can also contain some information about the
 *    charset (see the Russian case).
 * 2. The first of the values associated to the key is used in a regular
 *    expression to find some keywords corresponding to the language inside two
 *    environment variables.
 *    These values contain:
 *    - the \"official\" ISO language code and, if required, the dialect code
 *      too (\\'bu\\' for Bulgarian, \\'fr([-_][[:alpha:]]{2})?\\' for all French
 *      dialects, \\'zh[-_]tw\\' for Chinese traditional...), the dialect has to
 *      be specified first;
 *    - the \\'|\\' character (it means \\'OR\\');
 *    - the full language name.
 * 3. The second value associated to the key is the language code as defined by
 *    the RFC1766.
 * 4. The third value is its native name in html entities or UTF-8.
 *
 * Beware that the sorting order (first values associated to keys by
 * alphabetical reverse order in the array) is important: \\'zh-tw\\' (chinese
 * traditional) must be detected before \\'zh\\' (chinese simplified) for
 * example.
 *
 * @param string $lang
 * @return array
 */",
 "/**
 * Returns list of languages supported by phpMyAdmin
 *
 * @return array
 */",
 "/**
 * @global string  path to the translations directory; may be absent if the kit is English-only
 */",
 "/**
 * @global string  interface language
 */",
 "/**
 * @global boolean whether loading lang from cfg failed
 */",
 "/**
 * @global boolean whether loading lang from cookie failed
 */",
 "/**
 * @global boolean whether loading lang from user request failed
 */",
 "/**
 * @global string text direction ltr or rtl
 */",
 "/**
 * @global array supported languages
 */",
 "/**
 * @global array MySQL charsets map
 */",
 "/**
 * Checks Swekey authentication.
 */",
 "/**
 * Handle Swekey authentication error.
 */",
 "/**
 * Perform login using Swekey.
 */",
 "/**
     * magic access to protected/inaccessible members/properties
     *
     * @see http://php.net/language.oop5.overloading
     *
     * @param string $param
     * @return mixed
     */",
 "/**
     * magic access to protected/inaccessible members/properties
     *
     * @see http://php.net/language.oop5.overloading
     *
     * @param string $param
     * @param mixed  $value
     */",
 "/**
     * Accessor to PMA::$databases
     *
     * @return PMA_List_Databases
     */",
 "/**
 * phpMyAdmin main Controller
 *
 *
 *
 * @package PhpMyAdmin
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in JSON format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
 * This is same as BDB.
 * @package PhpMyAdmin-Engines
 */",
 "/**
 *  Change the address of the Check server.
 *  If $server is empty the default value \\'http://auth-check.musbe.net\\' will be used
 *
 *  @param  server              The protocol and hostname to use
 *  @access public
 */",
 "/**
 *  Change the address of the Random Token Generator server.
 *  If $server is empty the default value \\'http://auth-rnd-gen.musbe.net\\' will be used
 *
 *  @param  server              The protocol and hostname to use
 *  @access public
 */",
 "/**
 *  Change the address of the Satus server.
 *  If $server is empty the default value \\'http://auth-status.musbe.net\\' will be used
 *
 *  @param  server              The protocol and hostname to use
 *  @access public
 */",
 "/**
 *  Change the certificat file in case of the the severs use https instead of http
 *
 *  @param  cafile              The path of the crt file to use
 *  @access public
 */",
 "/**
 *  Enable or disable the random token caching
 *  Because everybody has full access to the cache file, it can be a DOS vulnerability
 *  So disable it if you are running in a non secure enviromnement
 *
 *  @param  $enable
 *  @access public
 */",
 "/**
 *  Return the last error.
 *
 *  @return                     The Last Error
 *  @access public
 */",
 "/**
 *  Return the last result.
 *
 *  @return                     The Last Error
 *  @access public
 */",
 "/**


*


*@returnThebodyoftheresponseor\"\" in case of error
 *  @access private
 */",
 "/**
 *  Get a Random Token from a Token Server
 *  The RT is a 64 vhars hexadecimal value
 *  You should better use Swekey_GetFastRndToken() for performance
 *  @access public
 */",
 "/**
 *  Get a Half Random Token from a Token Server
 *  The RT is a 64 vhars hexadecimal value
 *  Use this value if you want to make your own Swekey_GetFastRndToken()
 *  @access public
 */",
 "/**
 *  Get a Half Random Token
 *  The RT is a 64 vhars hexadecimal value
 *  This function get a new random token and reuse it.
 *  Token are refetched from the server only once every 30 seconds.
 *  You should always use this function to get half random token.
 *  @access public
 */",
 "/**
 *  Get a Random Token
 *  The RT is a 64 vhars hexadecimal value
 *  This function generates a unique random token for each call but call the
 *  server only once every 30 seconds.
 *  You should always use this function to get random token.
 *  @access public
 */",
 "/**
 *  Checks that an OTP generated by a Swekey is valid
 *
 *  @param  id                  The id of the swekey
 *  @param rt                   The random token used to generate the otp
 *  @param otp                  The otp generated by the swekey
 *  @return                     true or false
 *  @access public
 */",
 "/**
 *  Return the text corresponding to the integer status of a key
 *
 *  @param  status              The status
 *  @return                     The text corresponding to the status
 *  @access public
 */",
 "/**
 *  If your web site requires a key to login you should check that the key
 *  is still valid (has not been lost or stolen) before requiring it.
 *  A key can be authenticated only if its status is SWEKEY_STATUS_OK
 *  @param  id                  The id of the swekey
 *  @return                     The status of the swekey
 *  @access public
 */",
 "/**
     * Outputs export footer
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs export header
     *
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database header
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs database footer
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs CREATE DATABASE statement
     *
     * @param string  $db Database name
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * Outputs the content of a table in Texy format
     *
     * @param string  $db         database name
     * @param string  $table      table name
     * @param string  $crlf       the end of line sequence
     * @param string  $error_url  the url to go back in case of error
     * @param string  $sql_query  SQL query for obtaining data
     * @return  bool        Whether it succeeded
     *
     * @access  public
     */",
 "/**
         * Get the unique keys in the table
         */",
 "/**
         * Displays the table structure
         */",
 "/**
     * Outputs table\\'s structure
     *
     * @param string  $db           database name
     * @param string  $table        table name
     * @param string  $crlf         the end of line sequence
     * @param string  $error_url    the url to go back in case of error
     * @param bool    $do_relation  whether to include relation comments
     * @param bool    $do_comments  whether to include the pmadb-style column comments
     *                                as comments in the structure; this is deprecated
     *                                but the parameter is left here because export.php
     *                                calls PMA_exportStructure() also for other export
     *                                types which use this parameter
     * @param bool    $do_mime      whether to include mime comments
     * @param bool    $dates        whether to include creation/update/check dates
     * @param string  $export_mode  \\'create_table\\', \\'triggers\\', \\'create_view\\', \\'stand_in\\'
     * @param string  $export_type  \\'server\\', \\'database\\', \\'table\\'
     * @return  bool      Whether it succeeded
     *
     * @access  public
     */",
 "/**
     * The \"PMA_VISIO\" constructor
     *
     * Upon instantiation This starts writing the Visio XML .VDX document
     *
     * @return void
     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()
     */",
 "/**
     * Starts Visio XML .VDX Document
     *
     * Visio XML document starts by first initializing VisioDocument tag
     * then DocumentProperties & DocumentSettings contains all the
     * attributes that needed to define the document. Order of elements
     * should be maintained while generating XML of Visio.
     *
     * @return void
     * @access public
     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),
     * _documentProperties, _documentSettings
     */",
 "/**
     * Set document title
     *
     * @param string $value title text
     *
     * @return void
     * @access public
     */",
 "/**
     * Set document author
     *
     * @param string $value the author
     *
     * @return void
     * @access public
     */",
 "/**
     * Sets Visio XML .VDX Document Properties
     *
     * DocumentProperties tag contains document property elements such as
       the document\\'s Title,Subject,Creator and templates tags
     *
     * @return void
     * @access private
     * @see XMLWriter::startElement(),XMLWriter::endElement(),XMLWriter::writeRaw()
     */",
 "/**
     * Sets Visio XML .VDX Document Settings
     *
     * DocumentSettings  tag contains elements that specify document settings.
     *
     * @return void
     * @access private
     * @see XMLWriter::startElement(),XMLWriter::endElement()
     */",
 "/**
     * Ends Visio XML Document
     *
     * @return void
     * @access public
     * @see XMLWriter::endElement(),XMLWriter::endDocument()
     */",
 "/**
     * Output Visio XML .VDX Document for download
     *
     * @param string $fileName name of the Visio XML document
     *
     * @return void
     * @access public
     * @see XMLWriter::flush()
     */",
 "/**
 * This Class inherits the XMLwriter class and
 * helps in developing structure of MS Visio Schema Export
 *
 * @access public
 * @see http://php.net/manual/en/book.xmlwriter.php
 */",
 "/**
     * The \"Table_Stats\" constructor
     *
     * @param string  $tableName        The table name
     * @param integer $pageNumber       Page number
     * @param integer &$same_wide_width The max. with among tables
     * @param boolean $showKeys         Whether to display keys or not
     * @param boolean $showInfo         Whether to display table position or not
     *
     * @global object    The current Visio XML document
     * @global integer   The current page number (from the
     *                     $cfg[\\'Servers\\'][$i][\\'table_coords\\'] table)
     * @global array     The relations settings
     * @global string    The current db name
     *
     * @return void
     * @access private
     * @see PMA_VISIO, Table_Stats::Table_Stats_setWidth,
     *      Table_Stats::Table_Stats_setHeight
     */",
 "/**
     * Returns title of the current table,
     * title can have the dimensions/co-ordinates of the table
     *
     * @return the title
     * @access private
     */",
 "/**
     * Sets the width of the table
     *
     * @param string  $font     font name
     * @param integer $fontSize font size
     *
     * @global object The current Visio XML document
     *
     * @return void
     * @see PMA_VISIO
     */",
 "/**
     * Sets the height of the table
     *
     * @param integer $fontSize font size
     *
     * @return void
     * @access private
     */",
 "/**
     * draw the table
     *
     * @param boolean $showColor Whether to display color
     *
     * @global object The current Visio XML document
     *
     * @return void
     * @access public
     * @see PMA_VISIO
     */",
 "/**
 * Draws tables schema
 */",
 "/**
     * The \"Relation_Stats\" constructor
     *
     * @param string $master_table  The master table name
     * @param string $master_field  The relation field in the master table
     * @param string $foreign_table The foreign table name
     * @param string $foreign_field The relation field in the foreign table
     *
     * @return void
     * @see Relation_Stats::_getXy
     */",
 "/**
     * Gets arrows coordinates
     *
     * @param string $table  The current table name
     * @param string $column The relation column name
     *
     * @return array Arrows coordinates
     * @access private
     */",
 "/**
     * draws relation links and arrows shows foreign key relations
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     *
     * @global object The current Visio XML document
     *
     * @return void
     * @access public
     * @see PMA_VISIO
     */",
 "/**
 * Draws relation links
 *
 * @access public
 * @see PMA_VISIO
 */",
 "/**
     * The \"PMA_Visio_Relation_Schema\" constructor
     *
     * Upon instantiation This outputs the Visio XML document
     * that user can download
     *
     * @return void
     * @see PMA_VISIO,Table_Stats,Relation_Stats
     */",
 "/**
     * Defines relation objects
     *
     * @param string  $masterTable  The master table name
     * @param string  $masterField  The relation field in the master table
     * @param string  $foreignTable The foreign table name
     * @param string  $foreignField The relation field in the foreign table
     * @param boolean $showKeys     Whether to display keys or not
     *
     * @return void
     * @access private
     * @see Table_Stats::__construct(), Relation_Stats::__construct()
     */",
 "/**
     * Draws relation references
     * connects master table\\'s master field to foreign table\\'s forein field.
     *
     * @param boolean $changeColor Whether to use one color per relation or not
     *
     * @return void
     * @access private
     * @see Relation_Stats::relationDraw()
     */",
 "/**
     * Draws tables
     *
     * @param boolean $changeColor Whether to show color for tables text or not
     *
     * @return void
     * @access private
     * @see Table_Stats::tableDraw()
     */",
 "/**
 * Visio Relation Schema Class
 *
 * Purpose of this class is to generate the Visio XML .VDX Document which is used
 * for representing the database diagrams in any version of MS Visio IDE.
 * This class uses Software and Database Template and Database model diagram of
 * Visio and with the combination of these objects actually helps in preparing
 * Visio XML .VDX document.
 *
 * Visio XML is generated by using XMLWriter php extension and this class
 * inherits Export_Relation_Schema class has common functionality added
 * to this class
 *
 * @name Visio_Relation_Schema
 */",
 "/**
 * Array of WEB safe colors
 */",
 "/**
 * prints the sql query boxes
 *
 * @usedby  server_sql.php
 * @usedby  db_sql.php
 * @usedby  tbl_sql.php
 * @usedby  tbl_structure.php
 * @usedby  tbl_tracking.php
 * @usedby  querywindow.php
 * @param boolean|string  $query          query to display in the textarea
 *                                          or true to display last executed
 * @param boolean|string  $display_tab    sql|files|history|full|false
 *                                          what part to display
 *                                          false if not inside querywindow
 * @param string          $delimiter
 */",
 "/**
 * prints querybox fieldset
 *
 * @usedby  PMA_sqlQueryForm()
 * @param string      $query          query to display in the textarea
 * @param boolean     $is_querywindow if inside querywindow or not
 * @param string      $delimiter      default delimiter to use
 */",
 "/**
 * prints bookmark fieldset
 *
 * @usedby  PMA_sqlQueryForm()
 */",
 "/**
 * prints bookmark fieldset
 *
 * @usedby  PMA_sqlQueryForm()
 */",
 "/**
     * @return  array
     */",
 "/**
     * @return  string  SQL query LIKE pattern
     */",
 "/**
     * returns string with filename for the MySQL helppage
     * about this storage engne
     *
     * @return  string  mysql helppage filename
     */",
 "/**
 *
 * @package PhpMyAdmin-Engines
 */",
 "/**
 * Returns array of filtered file names
 *
 * @param string $dir        directory to list
 * @param string $expression regular expression to match files
 * @return array   sorted file list on success, false on failure
 */",
 "/**
 * Returns options of filtered file names
 *
 * @param string $dir        directory to list
 * @param string $extensions regullar expression to match files
 * @param string $active     currently active choice
 * @return array   sorted file list on success, false on failure
 */",
 "/**
 * Get currently supported decompressions.
 *
 * @return string separated list of extensions usable in PMA_getDirContent
 */"
]
