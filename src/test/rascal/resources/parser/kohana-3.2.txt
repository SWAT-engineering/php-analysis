 ["/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Setups the filesystem for test view files
	 *
	 * @return null
	 */",
 "/**
	 * Restores the module list
	 *
	 * @return null
	 */",
 "/**
	 * Provider for test_instaniate
	 *
	 * @return array
	 */",
 "/**
	 * Tests that we can instantiate a view file
	 * 
	 * @test
	 * @dataProvider provider_instantiate
	 *
	 * @return null
	 */",
 "/**
 * Tests the View class
 *
 * @group kohana
 * @group kohana.view
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Callback for the heading setext style
	 * 
	 * Heading 1
	 * =========
	 *
	 * @param  array    Matches from regex call
	 * @return string   Generated html
	 */",
 "/**
	 * Callback for the heading atx style
	 *
	 * # Heading 1
	 *
	 * @param  array    Matches from regex call
	 * @return string   Generated html
	 */",
 "/**
	 * Makes a heading id from the heading text
	 * If any heading share the same name then subsequent headings will have an integer appended
	 *
	 * @param  string The heading text
	 * @return string ID for the heading
	 */",
 "/**
	 * Add the current base url to all local links.
	 *
	 *     [filesystem](about.filesystem \"Optional title\")
	 *
	 * @param   string  span text
	 * @return  string
	 */",
 "/**
	 * Add the current base url to all local images.
	 *
	 *     ![Install Page](img/install.png \"Optional title\")
	 *
	 * @param   string  span text
	 * @return  string
	 */",
 "/**
	 * Parses links to the API browser.
	 *
	 *     [Class_Name], [Class::method] or [Class::$property]
	 *
	 * @param   string   span text
	 * @return  string
	 */",
 "/**
	 * Wrap notes in the applicable markup. Notes can contain single newlines.
	 *
	 *     [!!] Remember the milk!
	 *
	 * @param   string  span text
	 * @return  string
	 */",
 "/**
 * Custom Markdown parser for Kohana documentation.
 *
 * @package    Kohana/Userguide
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
	 * Convert special characters to HTML entities. All untrusted content
	 * should be passed through this method to prevent XSS injections.
	 *
	 *     echo HTML::chars($username);
	 *
	 * @param   string   string to convert
	 * @param   boolean  encode existing entities
	 * @return  string
	 */",
 "/**
	 * Convert all applicable characters to HTML entities. All characters
	 * that cannot be represented in HTML with the current character set
	 * will be converted to entities.
	 *
	 *     echo HTML::entities($username);
	 *
	 * @param   string   string to convert
	 * @param   boolean  encode existing entities
	 * @return  string
	 */",
 "/**
	 * Create HTML link anchors. Note that the title is not escaped, to allow
	 * HTML elements within links (images, etc).
	 *
	 *     echo HTML::anchor(\'/user/profile\', \'My Profile\');
	 *
	 * @param   string   URL or URI string
	 * @param   string   link text
	 * @param   array    HTML anchor attributes
	 * @param   mixed    protocol to pass to URL::base()
	 * @param   boolean  include the index page
	 * @return  string
	 * @uses    URL::base
	 * @uses    URL::site
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates an HTML anchor to a file. Note that the title is not escaped,
	 * to allow HTML elements within links (images, etc).
	 *
	 *     echo HTML::file_anchor(\'media/doc/user_guide.pdf\', \'User Guide\');
	 *
	 * @param   string  name of file to link to
	 * @param   string  link text
	 * @param   array   HTML anchor attributes
	 * @param   mixed    protocol to pass to URL::base()
	 * @param   boolean  include the index page
	 * @return  string
	 * @uses    URL::base
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates an email (mailto:) anchor. Note that the title is not escaped,
	 * to allow HTML elements within links (images, etc).
	 *
	 *     echo HTML::mailto($address);
	 *
	 * @param   string  email address to send to
	 * @param   string  link text
	 * @param   array   HTML anchor attributes
	 * @return  string
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates a style sheet link element.
	 *
	 *     echo HTML::style(\'media/css/screen.css\');
	 *
	 * @param   string   file name
	 * @param   array    default attributes
	 * @param   mixed    protocol to pass to URL::base()
	 * @param   boolean  include the index page
	 * @return  string
	 * @uses    URL::base
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates a script link.
	 *
	 *     echo HTML::script(\'media/js/jquery.min.js\');
	 *
	 * @param   string   file name
	 * @param   array    default attributes
	 * @param   mixed    protocol to pass to URL::base()
	 * @param   boolean  include the index page
	 * @return  string
	 * @uses    URL::base
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates a image link.
	 *
	 *     echo HTML::image(\'media/img/logo.png\', array(\'alt\' => \'My Company\'));
	 *
	 * @param   string   file name
	 * @param   array    default attributes
	 * @param   mixed    protocol to pass to URL::base()
	 * @param   boolean  include the index page
	 * @return  string
	 * @uses    URL::base
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Compiles an array of HTML attributes into an attribute string.
	 * Attributes will be sorted using HTML::$attribute_order for consistency.
	 *
	 *     echo \'<div\'.HTML::attributes($attrs).\'>\'.$content.\'</div>\';
	 *
	 * @param   array   attribute list
	 * @return  string
	 */",
 "/**
 * HTML helper class. Provides generic methods for generating various HTML
 * tags and making output HTML safe.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Provides test data for test_parse()
	 *
	 * @return array
	 */",
 "/**
	 * Tests that Feed::parse gets the correct number of elements
	 *
	 * @test
	 * @dataProvider provider_parse
	 * @covers feed::parse
	 * @param string  $source   URL to test
	 * @param integer $expected Count of items
	 */",
 "/**
	 * Provides test data for test_create()
	 *
	 * @return array
	 */",
 "/**
	 * Helper for handy matcher composing
	 *
	 * @param array $data
	 * @param string $tag
	 * @param string $child
	 * @return array
	 */",
 "/**
	 * @test
	 *
	 * @dataProvider provider_create
	 *
	 * @covers feed::create
	 *
	 * @param string  $info     info to pass
	 * @param integer $items    items to add
	 * @param integer $matcher  output
	 */",
 "/**
 * Test for feed helper
 *
 * @group kohana
 * @group kohana.feed
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Provides test data for test_debug()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Debug::vars()
	 *
	 * @test
	 * @dataProvider provider_vars
	 * @covers Debug::vars
	 * @param boolean $thing    The thing to debug
	 * @param boolean $expected Output for Debug::vars
	 */",
 "/**
	 * Provides test data for testDebugPath()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Debug::path()
	 *
	 * @test
	 * @dataProvider provider_debug_path
	 * @covers Debug::path
	 * @param boolean $path     Input for Debug::path
	 * @param boolean $expected Output for Debug::path
	 */",
 "/**
	 * Provides test data for test_dump()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Debug::dump()
	 *
	 * @test
	 * @dataProvider provider_dump
	 * @covers Debug::dump
	 * @covers Debug::_dump
	 * @param object $exception exception to test
	 * @param string $expected  expected output
	 */",
 "/**
 * Tests Kohana Core
 *
 * @TODO Use a virtual filesystem (see phpunit doc on mocking fs) for find_file etc.
 *
 * @group kohana
 * @group kohana.debug
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Returns a new View object. If you do not define the \"file\" parameter,
	 * you must call [View::set_filename].
	 *
	 *     $view = View::factory($file);
	 *
	 * @param   string  view filename
	 * @param   array   array of values
	 * @return  View
	 */",
 "/**
	 * Captures the output that is generated when a view is included.
	 * The view data will be extracted to make local variables. This method
	 * is static to prevent object scope resolution.
	 *
	 *     $output = View::capture($file, $data);
	 *
	 * @param   string  filename
	 * @param   array   variables
	 * @return  string
	 */",
 "/**
	 * Sets a global variable, similar to [View::set], except that the
	 * variable will be accessible to all views.
	 *
	 *     View::set_global($name, $value);
	 *
	 * @param   string  variable name or an array of variables
	 * @param   mixed   value
	 * @return  void
	 */",
 "/**
	 * Assigns a global variable by reference, similar to [View::bind], except
	 * that the variable will be accessible to all views.
	 *
	 *     View::bind_global($key, $value);
	 *
	 * @param   string  variable name
	 * @param   mixed   referenced variable
	 * @return  void
	 */",
 "/**
	 * Sets the initial view filename and local data. Views should almost
	 * always only be created using [View::factory].
	 *
	 *     $view = new View($file);
	 *
	 * @param   string  view filename
	 * @param   array   array of values
	 * @return  void
	 * @uses    View::set_filename
	 */",
 "/**
	 * Magic method, searches for the given variable and returns its value.
	 * Local variables will be returned before global variables.
	 *
	 *     $value = $view->foo;
	 *
	 * [!!] If the variable has not yet been set, an exception will be thrown.
	 *
	 * @param   string  variable name
	 * @return  mixed
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Magic method, calls [View::set] with the same parameters.
	 *
	 *     $view->foo = \'something\';
	 *
	 * @param   string  variable name
	 * @param   mixed   value
	 * @return  void
	 */",
 "/**
	 * Magic method, determines if a variable is set.
	 *
	 *     isset($view->foo);
	 *
	 * [!!] `NULL` variables are not considered to be set by [isset](http://php.net/isset).
	 *
	 * @param   string  variable name
	 * @return  boolean
	 */",
 "/**
	 * Magic method, unsets a given variable.
	 *
	 *     unset($view->foo);
	 *
	 * @param   string  variable name
	 * @return  void
	 */",
 "/**
	 * Magic method, returns the output of [View::render].
	 *
	 * @return  string
	 * @uses    View::render
	 */",
 "/**
	 * Sets the view filename.
	 *
	 *     $view->set_filename($file);
	 *
	 * @param   string  view filename
	 * @return  View
	 * @throws  View_Exception
	 */",
 "/**
	 * Assigns a variable by name. Assigned values will be available as a
	 * variable within the view file:
	 *
	 *     // This value can be accessed as $foo within the view
	 *     $view->set(\'foo\', \'my value\');
	 *
	 * You can also use an array to set several values at once:
	 *
	 *     // Create the values $food and $beverage in the view
	 *     $view->set(array(\'food\' => \'bread\', \'beverage\' => \'water\'));
	 *
	 * @param   string   variable name or an array of variables
	 * @param   mixed    value
	 * @return  $this
	 */",
 "/**
	 * Assigns a value by reference. The benefit of binding is that values can
	 * be altered without re-setting them. It is also possible to bind variables
	 * before they have values. Assigned values will be available as a
	 * variable within the view file:
	 *
	 *     // This reference can be accessed as $ref within the view
	 *     $view->bind(\'ref\', $bar);
	 *
	 * @param   string   variable name
	 * @param   mixed    referenced variable
	 * @return  $this
	 */",
 "/**
	 * Renders the view object to a string. Global and local data are merged
	 * and extracted to create local variables within the view file.
	 *
	 *     $output = $view->render();
	 *
	 * [!!] Global variables with the same key name as local variables will be
	 * overwritten by the local variable.
	 *
	 * @param    string  view filename
	 * @return   string
	 * @throws   View_Exception
	 * @uses     View::capture
	 */",
 "/**
 * Acts as an object wrapper for HTML pages with embedded PHP, called \"views\".
 * Variables can be assigned with the view object and referenced locally within
 * the view.
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates classes when they are otherwise not found.
	 *
	 *     Kodoc::create_class(\'ThisClassDoesNotExist\');
	 *
	 * [!!] All classes created will extend [Kodoc_Missing].
	 *
	 * @param   string   class name
	 * @return  boolean
	 * @since   3.0.7
	 */",
 "/**
 * Set Kodoc_Missing::create_class as an autoloading to prevent missing classes
 * from crashing the api browser.  Classes that are missing a parent will
 * extend this class, and get a warning in the API browser.
 *
 * @package    Kohana/Userguide
 * @category   Undocumented
 * @author     Kohana Team
 * @since      3.0.7
 */",
 "/**
	 * Provides test data for test_constructor()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Kohana_Kohana_Exception::__construct()
	 *
	 * @test
	 * @dataProvider provider_constructor
	 * @covers Kohana_Kohana_Exception::__construct
	 * @param array             $arguments          Arguments
	 * @param string            $expected_message   Value from getMessage()
	 * @param integer|string    $expected_code      Value from getCode()
	 */",
 "/**
	 * Provides test data for test_text()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Kohana_Exception::text()
	 *
	 * @test
	 * @dataProvider provider_text
	 * @covers Kohana_Exception::text
	 * @param object $exception exception to test
	 * @param string $expected  expected output
	 */",
 "/**
 * Tests Kohana Exception Class
 *
 * @group kohana
 * @group kohana.exception
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Gets the value of a signed cookie. Cookies without signatures will not
	 * be returned. If the cookie signature is present, but invalid, the cookie
	 * will be deleted.
	 *
	 *     // Get the \"theme\" cookie, or use \"blue\" if the cookie does not exist
	 *     $theme = Cookie::get(\'theme\', \'blue\');
	 *
	 * @param   string  cookie name
	 * @param   mixed   default value to return
	 * @return  string
	 */",
 "/**
	 * Sets a signed cookie. Note that all cookie values must be strings and no
	 * automatic serialization will be performed!
	 *
	 *     // Set the \"theme\" cookie
	 *     Cookie::set(\'theme\', \'red\');
	 *
	 * @param   string   name of cookie
	 * @param   string   value of cookie
	 * @param   integer  lifetime in seconds
	 * @return  boolean
	 * @uses    Cookie::salt
	 */",
 "/**
	 * Deletes a cookie by making the value NULL and expiring it.
	 *
	 *     Cookie::delete(\'theme\');
	 *
	 * @param   string   cookie name
	 * @return  boolean
	 * @uses    Cookie::set
	 */",
 "/**
	 * Generates a salt string for a cookie based on the name and value.
	 *
	 *     $salt = Cookie::salt(\'theme\', \'red\');
	 *
	 * @param   string   name of cookie
	 * @param   string   value of cookie
	 * @return  string
	 */",
 "/**
 * Cookie helper.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * UTF8::str_ireplace
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	*Initializestheenvironment:
	*
	*-Disablesregister_globalsandmagic_quotes_gpc
	*-Determinesthecurrentenvironment
	*-Setglobalsettings
	*-SanitizesGET,POST,andCOOKIEvariables
	*-ConvertsGET,POST,andCOOKIEvariablestotheglobalcharacterset
	*
	*Thefollowingsettingscanbeset:
	*
	*Type|Setting|Description|DefaultValue
	*----------|------------|------------------------------------------------|---------------
	*`string`|base_url|ThebaseURLforyourapplication.Thisshouldbethe*relative*pathfromyourDOCROOTtoyour`index.php`file,inotherwords,ifKohanaisinasubfolder,setthistothesubfoldername,otherwiseleaveitasthedefault.**Theleadingslashisrequired**,trailingslashisoptional.|`\"/\"`
	 * `string`  | index_file | The name of the [front controller](http://en.wikipedia.org/wiki/Front_Controller_pattern).  This is used by Kohana to generate relative urls like [HTML::anchor()] and [URL::base()]. This is usually `index.php`.  To [remove index.php from your urls](tutorials/clean-urls), set this to `FALSE`. | `\"index.php\"`
	 * `string`  | charset    | Character set used for all input and output    | `\"utf-8\"`
	 * `string`  | cache_dir  | Kohana\'s cache directory.  Used by [Kohana::cache] for simple internal caching, like [Fragments](kohana/fragments) and **\[caching database queries](this should link somewhere)**.  This has nothing to do with the [Cache module](cache). | `APPPATH.\"cache\"`
	 * `integer` | cache_life | Lifetime, in seconds, of items cached by [Kohana::cache]         | `60`
	 * `boolean` | errors     | Should Kohana catch PHP errors and uncaught Exceptions and show the `error_view`. See [Error Handling](kohana/errors) for more info. <br /> <br /> Recommended setting: `TRUE` while developing, `FALSE` on production servers. | `TRUE`
	 * `boolean` | profile    | Whether to enable the [Profiler](kohana/profiling). <br /> <br />Recommended setting: `TRUE` while developing, `FALSE` on production servers. | `TRUE`	 * `boolean` | caching    | Cache file locations to speed up [Kohana::find_file].  This has nothing to do with [Kohana::cache], [Fragments](kohana/fragments) or the [Cache module](cache).  <br /> <br />  Recommended setting: `FALSE` while developing, `TRUE` on production servers. | `FALSE`
	 *
	 * @throws  Kohana_Exception
	 * @param   array   Array of settings.  See above.
	 * @return  void
	 * @uses    Kohana::globals
	 * @uses    Kohana::sanitize
	 * @uses    Kohana::cache
	 * @uses    Profiler
	 */",
 "/**
	 * Cleans up the environment:
	 *
	 * - Restore the previous error and exception handlers
	 * - Destroy the Kohana::$log and Kohana::$config objects
	 *
	 * @return  void
	 */",
 "/**
	 * Reverts the effects of the `register_globals` PHP setting by unsetting
	 * all global varibles except for the default super globals (GPCS, etc),
	 * which is a [potential security hole.][ref-wikibooks]
	 *
	 * This is called automatically by [Kohana::init] if `register_globals` is
	 * on.
	 *
	 *
	 * [ref-wikibooks]: http://en.wikibooks.org/wiki/PHP_Programming/Register_Globals
	 *
	 * @return  void
	 */",
 "/**
	 * Recursively sanitizes an input variable:
	 *
	 * - Strips slashes if magic quotes are enabled
	 * - Normalizes all newlines to LF
	 *
	 * @param   mixed  any variable
	 * @return  mixed  sanitized variable
	 */",
 "/**
	 * Provides auto-loading support of classes that follow Kohana\'s [class
	 * naming conventions](kohana/conventions#class-names-and-file-location).
	 * See [Loading Classes](kohana/autoloading) for more information.
	 *
	 * Class names are converted to file names by making the class name
	 * lowercase and converting underscores to slashes:
	 *
	 *     // Loads classes/my/class/name.php
	 *     Kohana::auto_load(\'My_Class_Name\');
	 *
	 * You should never have to call this function, as simply calling a class
	 * will cause it to be called.
	 *
	 * This function must be enabled as an autoloader in the bootstrap:
	 *
	 *     spl_autoload_register(array(\'Kohana\', \'auto_load\'));
	 *
	 * @param   string   class name
	 * @return  boolean
	 */",
 "/**
	 * Changes the currently enabled modules. Module paths may be relative
	 * or absolute, but must point to a directory:
	 *
	 *     Kohana::modules(array(\'modules/foo\', MODPATH.\'bar\'));
	 *
	 * @param   array  list of module paths
	 * @return  array  enabled modules
	 */",
 "/**
	 * Returns the the currently active include paths, including the
	 * application, system, and each module\'s path.
	 *
	 * @return  array
	 */",
 "/**
	 * Searches for a file in the [Cascading Filesystem](kohana/files), and
	 * returns the path to the file that has the highest precedence, so that it
	 * can be included.
	 *
	 * When searching the \"config\", \"messages\", or \"i18n\" directories, or when
	 * the `$array` flag is set to true, an array of all the files that match
	 * that path in the [Cascading Filesystem](kohana/files) will be returned.
	 * These files will return arrays which must be merged together.
	 *
	 * If no extension is given, the default extension (`EXT` set in
	 * `index.php`) will be used.
	 *
	 *     // Returns an absolute path to views/template.php
	 *     Kohana::find_file(\'views\', \'template\');
	 *
	 *     // Returns an absolute path to media/css/style.css
	 *     Kohana::find_file(\'media\', \'css/style\', \'css\');
	 *
	 *     // Returns an array of all the \"mimes\" configuration files
	 *     Kohana::find_file(\'config\', \'mimes\');
	 *
	 * @param   string   directory name (views, i18n, classes, extensions, etc.)
	 * @param   string   filename with subdirectory
	 * @param   string   extension to search for
	 * @param   boolean  return an array of files?
	 * @return  array    a list of files when $array is TRUE
	 * @return  string   single file path
	 */",
 "/**
	 * Recursively finds all of the files in the specified directory at any
	 * location in the [Cascading Filesystem](kohana/files), and returns an
	 * array of all the files found, sorted alphabetically.
	 *
	 *     // Find all view files.
	 *     $views = Kohana::list_files(\'views\');
	 *
	 * @param   string  directory name
	 * @param   array   list of paths to search
	 * @return  array
	 */",
 "/**
	 * Loads a file within a totally empty scope and returns the output:
	 *
	 *     $foo = Kohana::load(\'foo.php\');
	 *
	 * @param   string
	 * @return  mixed
	 */",
 "/**
	 * Provides simple file-based caching for strings and arrays:
	 *
	 *     // Set the \"foo\" cache
	 *     Kohana::cache(\'foo\', \'hello, world\');
	 *
	 *     // Get the \"foo\" cache
	 *     $foo = Kohana::cache(\'foo\');
	 *
	 * All caches are stored as PHP code, generated with [var_export][ref-var].
	 * Caching objects may not work as expected. Storing references or an
	 * object or array that has recursion will cause an E_FATAL.
	 *
	 * The cache directory and default cache lifetime is set by [Kohana::init]
	 *
	 * [ref-var]: http://php.net/var_export
	 *
	 * @throws  Kohana_Exception
	 * @param   string   name of the cache
	 * @param   mixed    data to cache
	 * @param   integer  number of seconds the cache is valid for
	 * @return  mixed    for getting
	 * @return  boolean  for setting
	 */",
 "/**
	 * Get a message from a file. Messages are arbitary strings that are stored
	 * in the `messages/` directory and reference by a key. Translation is not
	 * performed on the returned values.  See [message files](kohana/files/messages)
	 * for more information.
	 *
	 *     // Get \"username\" from messages/text.php
	 *     $username = Kohana::message(\'text\', \'username\');
	 *
	 * @param   string  file name
	 * @param   string  key path to get
	 * @param   mixed   default value if the path does not exist
	 * @return  string  message string for the given path
	 * @return  array   complete message list, when no path is specified
	 * @uses    Arr::merge
	 * @uses    Arr::path
	 */",
 "/**
	 * PHP error handler, converts all errors into ErrorExceptions. This handler
	 * respects error_reporting settings.
	 *
	 * @throws  ErrorException
	 * @return  TRUE
	 */",
 "/**
	 * Catches errors that are not caught by the error handler, such as E_PARSE.
	 *
	 * @uses    Kohana_Exception::handler
	 * @return  void
	 */",
 "/**
 * Contains the most low-level helpers methods in Kohana:
 *
 * - Environment initialization
 * - Locating files within the cascading filesystem
 * - Auto-loading and transparent extension of classes
 * - Variable and path debugging
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Remove all caches
	 */",
 "/**
	 * Removes cache files created during tests
	 */",
 "/**
	 * If Route::get() is asked for a route that does not exist then
	 * it should throw a Kohana_Exception
	 *
	 * Note use of @expectedException
	 *
	 * @test
	 * @covers Route::get
	 * @expectedException Kohana_Exception
	 */",
 "/**
	 * Route::all() should return all routes defined via Route::set()
	 * and not through new Route()
	 *
	 * @test
	 * @covers Route::all
	 */",
 "/**
	 * Route::name() should fetch the name of a passed route
	 * If route is not found then it should return FALSE
	 *
	 * @TODO: This test needs to segregate the Route::$_routes singleton
	 * @test
	 * @covers Route::name
	 */",
 "/**
	 * If Route::cache() was able to restore routes from the cache then
	 * it should return TRUE and load the cached routes
	 *
	 * @test
	 * @covers Route::cache
	 */",
 "/**
	 * Route::cache() should return FALSE if cached routes could not be found
	 *
	 * The cache is cleared before and after each test in setUp tearDown
	 * by cleanCacheDir()
	 *
	 * @test
	 * @covers Route::cache
	 */",
 "/**
	 * If the constructor is passed a NULL uri then it should assume it\'s
	 * being loaded from the cache & therefore shouldn\'t override the cached attributes
	 *
	 * @test
	 * @covers Route::__construct
	 */",
 "/**
	 * Provider for test_constructor_only_changes_custom_regex_if_passed
	 *
	 * @return array
	 */",
 "/**
	 * The constructor should only use custom regex if passed a non-empty array
	 *
	 * Technically we can\'t \"test\" this as the default regex is an empty array, this
	 * is purely for improving test coverage
	 *
	 * @dataProvider provider_constructor_only_changes_custom_regex_if_passed
	 *
	 * @test
	 * @covers Route::__construct
	 */",
 "/**
	 * When we pass custom regex to the route\'s constructor it should it
	 * in leu of the default. This does not apply to callback/lambda routes
	 *
	 * @test
	 * @covers Route::__construct
	 * @covers Route::compile
	 */",
 "/**
	 * Provider for test_matches_returns_false_on_failure
	 *
	 * @return array
	 */",
 "/**
	 * Route::matches() should return false if the route doesn\'t match against a uri
	 *
	 * @dataProvider provider_matches_returns_false_on_failure
	 *
	 * @test
	 * @covers Route::matches
	 */",
 "/**
	 * Provider for test_matches_returns_array_of_parameters_on_successful_match
	 *
	 * @return array
	 */",
 "/**
	 * Route::matches() should return an array of parameters when a match is made
	 * An parameters that are not matched should not be present in the array of matches
	 *
	 * @dataProvider provider_matches_returns_array_of_parameters_on_successful_match
	 *
	 * @test
	 * @covers Route::matches
	 */",
 "/**
	 * Provider for test_matches_returns_array_of_parameters_on_successful_match
	 *
	 * @return array
	 */",
 "/**
	 * Defaults specified with defaults() should be used if their values aren\'t
	 * present in the uri
	 *
	 * @dataProvider provider_defaults_are_used_if_params_arent_specified
	 *
	 * @test
	 * @covers Route::matches
	 */",
 "/**
	 * Provider for test_required_parameters_are_needed
	 *
	 * @return array
	 */",
 "/**
	 * This tests that routes with required parameters will not match uris without them present
	 *
	 * @dataProvider provider_required_parameters_are_needed
	 *
	 * @test
	 * @covers Route::matches
	 */",
 "/**
	 * Provider for test_required_parameters_are_needed
	 *
	 * @return array
	 */",
 "/**
	 * This tests the reverse routing returns the uri specified in the route
	 * if it\'s a static route
	 *
	 * A static route is a route without any parameters
	 *
	 * @dataProvider provider_reverse_routing_returns_routes_uri_if_route_is_static
	 *
	 * @test
	 * @covers Route::uri
	 */",
 "/**
	 * Provider for test_uri_throws_exception_if_required_params_are_missing
	 *
	 * @return array
	 */",
 "/**
	 * When Route::uri is working on a uri that requires certain parameters to be present
	 * (i.e. <controller> in \'<controller(/<action)\') then it should throw an exception
	 * if the param was not provided
	 *
	 * @dataProvider provider_uri_throws_exception_if_required_params_are_missing
	 *
	 * @test
	 * @covers Route::uri
	 */",
 "/**
	 * Provider for test_uri_fills_required_uri_segments_from_params
	 *
	 * @return array
	 */",
 "/**
	 * The logic for replacing required segments is separate (but similar) to that for
	 * replacing optional segments.
	 *
	 * This test asserts that Route::uri will replace required segments with provided
	 * params
	 *
	 * @dataProvider provider_uri_fills_required_uri_segments_from_params
	 *
	 * @test
	 * @covers Route::uri
	 */",
 "/**
	 * Provides test data for test_composing_url_from_route()
	 * @return array
	 */",
 "/**
	 * Tests Route::url()
	 *
	 * Checks the url composing from specific route via Route::url() shortcut
	 *
	 * @test
	 * @dataProvider provider_composing_url_from_route
	 * @param string $expected
	 * @param array $params
	 * @param boolean $protocol
	 */",
 "/**
	 * Tests Route::compile()
	 *
	 * Makes sure that compile will use custom regex if specified
	 *
	 * @test
	 * @covers Route::compile
	 */",
 "/**
	 * Tests Route::is_external(), ensuring the host can return
	 * whether internal or external host
	 */",
 "/**
	 * Provider for test_external_route_includes_params_in_uri
	 *
	 * @return array
	 */",
 "/**
	 * Tests the external route include route parameters
	 *
	 * @dataProvider provider_external_route_includes_params_in_uri
	 */",
 "/**
	 * This method MUST be implemented by each driver to setup the `Cache`
	 * instance for each test.
	 * 
	 * This method should do the following tasks for each driver test:
	 * 
	 *  - Test the Cache instance driver is available, skip test otherwise
	 *  - Setup the Cache instance
	 *  - Call the parent setup method, `parent::setUp()`
	 *
	 * @return  void
	 */",
 "/**
*  @package    Kohana/Cache/Memcache
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * Codebench ??? A benchmarking module.
 *
 * @package    Kohana/Codebench
 * @category   Controllers
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */",
 "/**
	 * Tests for correct exception messages
	 *
	 * @test
	 * @dataProvider provider_exceptions
	 *
	 * @return null
	 */",
 "/**
 * Unit tests for internal request client
 *
 * @group kohana
 * @group kohana.request
 * @group kohana.request.client
 * @group kohana.request.client.internal
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * Class property documentation generator.
 *
 * @package    Kohana/Userguide
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * UTF8::ucwords
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Sets up a test route for caching
	 *
	 * @return void
	 */",
 "/**
	 * Tests the Client does not attempt to load cache if no Cache library
	 * is present
	 *
	 * @return void
	 */",
 "/**
	 * Tests that the client attempts to load a cached response from the
	 * cache library, but fails.
	 *
	 * @return void
	 */",
 "/**
	 * Tests the client saves a response if the correct headers are set
	 *
	 * @return void
	 */",
 "/**
	 * Tests the client handles a cache HIT event correctly
	 *
	 * @return void
	 */",
 "/**
	 * Data provider for test_set_cache
	 *
	 * @return array
	 */",
 "/**
		 * Set up a mock response object to test with
		 */",
 "/**
	 * Tests the set_cache() method
	 *
	 * @test
	 * @dataProvider provider_set_cache
	 *
	 * @return null
	 */",
 "/**
	 * Returns a mock object for Cache
	 *
	 * @return Cache
	 */",
 "/**
 * Unit tests for request client cache logic
 *
 * @group kohana
 * @group kohana.request
 * @group kohana.request.client
 * @group kohana.request.client.cache
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * UTF8::rtrim
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Provides test data for test_sanitize()
	 *
	 * @return array
	 */",
 "/**
	 * Tests File::mime()
	 *
	 * @test
	 * @dataProvider provider_mime
	 * @param boolean $input  Input for File::mime
	 * @param boolean $expected Output for File::mime
	 */",
 "/**
	 * Provides test data for test_split_join()
	 *
	 * @return array
	 */",
 "/**
	 * Tests File::mime()
	 *
	 * @test
	 * @dataProvider provider_split_join
	 * @param boolean $input    Input for File::split
	 * @param boolean $peices   Input for File::split
	 * @param boolean $expected Output for File::splut
	 */",
 "/**
 * Tests Kohana File helper
 *
 * @group kohana
 * @group kohana.url
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates a new SQL query of the specified type.
	 *
	 * @param   integer  query type: Database::SELECT, Database::INSERT, etc
	 * @param   string   query string
	 * @return  void
	 */",
 "/**
	 * Return the SQL query string.
	 *
	 * @return  string
	 */",
 "/**
	 * Get the type of the query.
	 *
	 * @return  integer
	 */",
 "/**
	 * Enables the query to be cached for a specified amount of time.
	 *
	 * @param   integer  number of seconds to cache, 0 deletes it from the cache
	 * @param   boolean  whether or not to execute the query during a cache hit
	 * @return  $this
	 * @uses    Kohana::$cache_life
	 */",
 "/**
	 * Returns results as associative arrays
	 *
	 * @return  $this
	 */",
 "/**
	 * Returns results as objects
	 *
	 * @param   string  classname or TRUE for stdClass
	 * @return  $this
	 */",
 "/**
	 * Set the value of a parameter in the query.
	 *
	 * @param   string   parameter key to replace
	 * @param   mixed    value to use
	 * @return  $this
	 */",
 "/**
	 * Bind a variable to a parameter in the query.
	 *
	 * @param   string  parameter key to replace
	 * @param   mixed   variable to use
	 * @return  $this
	 */",
 "/**
	 * Add multiple parameters to the query.
	 *
	 * @param   array  list of parameters
	 * @return  $this
	 */",
 "/**
	 * Compile the SQL query and return it. Replaces any parameters with their
	 * given values.
	 *
	 * @param   object  Database instance
	 * @return  string
	 */",
 "/**
	 * Execute the current query on the given database.
	 *
	 * @param   mixed    Database instance or name of instance
	 * @param   string   result object classname, TRUE for stdClass or FALSE for array
	 * @param   array    result object constructor arguments
	 *
	 * @return  object   Database_Result for SELECT queries
	 * @return  mixed    the insert id for INSERT queries
	 * @return  integer  number of affected rows for all other queries
	 */",
 "/**
 * Database query wrapper.  See [Prepared Statements](database/query/prepared) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * UTF8::ltrim
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Attach a configuration reader. By default, the reader will be added as
	 * the first used reader. However, if the reader should be used only when
	 * all other readers fail, use `FALSE` for the second parameter.
	 *
	 *     $config->attach($reader);        // Try first
	 *     $config->attach($reader, FALSE); // Try last
	 *
	 * @param   object   Kohana_Config_Source instance
	 * @param   boolean  add the reader as the first used object
	 * @return  $this
	 */",
 "/**
	 * Detach a configuration reader.
	 *
	 *     $config->detach($reader);
	 *
	 * @param   object  Kohana_Config_Source instance
	 * @return  $this
	 */",
 "/**
	 * Load a configuration group. Searches all the config sources, merging all the 
	 * directives found into a single config group.  Any changes made to the config 
	 * in this group will be mirrored across all writable sources.  
	 *
	 *     $array = $config->load($name);
	 *
	 * See [Kohana_Config_Group] for more info
	 *
	 * @param   string  configuration group name
	 * @return  object  Kohana_Config_Group
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Copy one configuration group to all of the other writers.
	 * 
	 *     $config->copy($name);
	 *
	 * @param   string   configuration group name
	 * @return  $this
	 */",
 "/**
	 * Callback used by the config group to store changes made to configuration
	 *
	 * @param string         Group name
	 * @param string         Variable name
	 * @param mixed          The new value
	 * @return Kohana_Config Chainable instance
	 */",
 "/**
 * Wrapper for configuration arrays. Multiple configuration readers can be
 * attached to allow loading configuration from files, database, etc.
 *
 * Configuration directives cascade across config sources in the same way that 
 * files cascade across the filesystem.
 *
 * Directives from sources high in the sources list will override ones from those
 * below them.
 *
 * @package    Kohana
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Constructor loads the user list into the class.
	 */",
 "/**
	 * Logs a user in.
	 *
	 * @param   string   username
	 * @param   string   password
	 * @param   boolean  enable autologin (not supported)
	 * @return  boolean
	 */",
 "/**
	 * Forces a user to be logged in, without specifying a password.
	 *
	 * @param   mixed    username
	 * @return  boolean
	 */",
 "/**
	 * Get the stored password for a username.
	 *
	 * @param   mixed   username
	 * @return  string
	 */",
 "/**
	 * Compare password with original (plain text). Works for current (logged in) user
	 *
	 * @param   string  $password
	 * @return  boolean
	 */",
 "/**
 * File Auth driver.
 * [!!] this Auth driver does not support roles nor autologin.
 *
 * @package    Kohana/Auth
 * @author     Kohana Team
 * @copyright  (c) 2007-2010 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Checks if GD is enabled and bundled. Bundled GD is required for some
	 * methods to work. Exceptions will be thrown from those methods when GD is
	 * not bundled.
	 *
	 * @return  boolean
	 */",
 "/**
	 * Runs [Image_GD::check] and loads the image.
	 *
	 * @return  void
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Destroys the loaded image to free up resources.
	 *
	 * @return  void
	 */",
 "/**
	 * Loads an image into GD.
	 *
	 * @return  void
	 */",
 "/**
	 * Get the GD saving function and image type for this extension.
	 * Also normalizes the quality setting
	 *
	 * @param   string   image type: png, jpg, etc
	 * @param   integer  image quality
	 * @return  array    save function, IMAGETYPE_* constant
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Create an empty image with the given width and height.
	 *
	 * @param   integer   image width
	 * @param   integer   image height
	 * @return  resource
	 */",
 "/**
 * Support for image manipulation using [GD](http://php.net/GD).
 *
 * @package    Kohana/Image
 * @category   Drivers
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */",
 "/**
	 * Creates a hashed filename based on the string. This is used
	 * to create shorter unique IDs for each cache filename.
	 * 
	 *     // Create the cache filename
	 *     $filename = Cache_File::filename($this->_sanitize_id($id));
	 *
	 * @param   string   string to hash into filename
	 * @return  string
	 */",
 "/**
	 * Constructs the file cache driver. This method cannot be invoked externally. The file cache driver must
	 * be instantiated using the `Cache::instance()` method.
	 *
	 * @param   array    config 
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Retrieve a cached value entry by id.
	 * 
	 *     // Retrieve cache entry from file group
	 *     $data = Cache::instance(\'file\')->get(\'foo\');
	 * 
	 *     // Retrieve cache entry from file group and return \'bar\' if miss
	 *     $data = Cache::instance(\'file\')->get(\'foo\', \'bar\');
	 *
	 * @param   string   id of cache to entry
	 * @param   string   default value to return if cache miss
	 * @return  mixed
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Set a value to cache with id and lifetime
	 * 
	 *     $data = \'bar\';
	 * 
	 *     // Set \'bar\' to \'foo\' in file group, using default expiry
	 *     Cache::instance(\'file\')->set(\'foo\', $data);
	 * 
	 *     // Set \'bar\' to \'foo\' in file group for 30 seconds
	 *     Cache::instance(\'file\')->set(\'foo\', $data, 30);
	 *
	 * @param   string   id of cache entry
	 * @param   string   data to set to cache
	 * @param   integer  lifetime in seconds
	 * @return  boolean
	 */",
 "/**
	 * Delete a cache entry based on id
	 * 
	 *     // Delete \'foo\' entry from the file group
	 *     Cache::instance(\'file\')->delete(\'foo\');
	 *
	 * @param   string   id to remove from cache
	 * @return  boolean
	 */",
 "/**
	 * Delete all cache entries.
	 * 
	 * Beware of using this method when
	 * using shared memory cache systems, as it will wipe every
	 * entry within the system for all clients.
	 * 
	 *     // Delete all cache entries in the file group
	 *     Cache::instance(\'file\')->delete_all();
	 *
	 * @return  boolean
	 */",
 "/**
	 * Garbage collection method that cleans any expired
	 * cache entries from the cache.
	 *
	 * @return  void
	 */",
 "/**
	 * Deletes files recursively and returns FALSE on any errors
	 * 
	 *     // Delete a file or folder whilst retaining parent directory and ignore all errors
	 *     $this->_delete_file($folder, TRUE, TRUE);
	 *
	 * @param   SplFileInfo  file
	 * @param   boolean  retain the parent directory
	 * @param   boolean  ignore_errors to prevent all exceptions interrupting exec
	 * @param   boolean  only expired files
	 * @return  boolean
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Resolves the cache directory real path from the filename
	 * 
	 *      // Get the realpath of the cache folder
	 *      $realpath = $this->_resolve_directory($filename);
	 *
	 * @param   string   filename to resolve
	 * @return  string
	 */",
 "/**
	 * Makes the cache directory if it doesn\'t exist. Simply a wrapper for
	 * `mkdir` to ensure DRY principles
	 *
	 * @see     http://php.net/manual/en/function.mkdir.php
	 * @param   string   directory 
	 * @param   string   mode 
	 * @param   string   recursive 
	 * @param   string   context 
	 * @return  SplFileInfo
	 * @throws  Cache_Exception
	 */",
 "/**
 * [Kohana Cache](api/Kohana_Cache) File driver. Provides a file based
 * driver for the Kohana Cache library. This is one of the slowest
 * caching methods.
 * 
 * ### Configuration example
 * 
 * Below is an example of a _file_ server configuration.
 * 
 *     return array(
 *          \'file\'   => array(                          // File driver group
 *                  \'driver\'         => \'file\',         // using File driver
 *                  \'cache_dir\'     => APPPATH.\'cache/.kohana_cache\', // Cache location
 *           ),
 *     )
 * 
 * In cases where only one cache group is required, if the group is named `default` there is
 * no need to pass the group name when instantiating a cache instance.
 * 
 * #### General cache group configuration settings
 * 
 * Below are the settings available to all types of cache driver.
 * 
 * Name           | Required | Description
 * -------------- | -------- | ---------------------------------------------------------------
 * driver         | __YES__  | (_string_) The driver type to use
 * cache_dir      | __NO__   | (_string_) The cache directory to use for this cache instance
 * 
 * ### System requirements
 * 
 * *  Kohana 3.0.x
 * *  PHP 5.2.4 or greater
 * 
 * @package    Kohana/Cache
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * UTF8::strtolower
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
	 * Constructs a new exception for the specified model
	 *
	 * @param  string     $alias       The alias to use when looking for error messages
	 * @param  Validation $object      The Validation object of the model
	 * @param  string     $message     The error message
	 * @param  array      $values      The array of values for the error message
	 * @param  integer    $code        The error code for the exception
	 * @return void
	 */",
 "/**
	 * Adds a Validation object to this exception
	 *
	 *     // The following will add a validation object for a profile model
	 *     // inside the exception for a user model.
	 *     $e->add_object(\'profile\', $validation);
	 *     // The errors array will now look something like this
	 *     // array
	 *     // (
	 *     //   \'username\' => \'This field is required\',
	 *     //   \'profile\'  => array
	 *     //   (
	 *     //     \'first_name\' => \'This field is required\',
	 *     //   ),
	 *     // );
	 *
	 * @param  string     $alias    The relationship alias from the model
	 * @param  Validation $object   The Validation object to merge
	 * @param  mixed      $has_many The array key to use if this exception can be merged multiple times
	 * @return ORM_Validation_Exception
	 */",
 "/**
	 * Merges an ORM_Validation_Exception object into the current exception
	 * Useful when you want to combine errors into one array
	 *
	 * @param  ORM_Validation_Exception $object   The exception to merge
	 * @param  mixed                    $has_many The array key to use if this exception can be merged multiple times
	 * @return ORM_Validation_Exception
	 */",
 "/**
	 * Returns a merged array of the errors from all the Validation objects in this exception
	 *
	 *     // Will load Model_User errors from messages/orm-validation/user.php
	 *     $e->errors(\'orm-validation\');
	 *
	 * @param   string  $directory Directory to load error messages from
	 * @param   mixed   $translate Translate the message
	 * @return  array
	 * @see generate_errors()
	 */",
 "/**
	 * Recursive method to fetch all the errors in this exception
	 *
	 * @param  string $alias     Alias to use for messages file
	 * @param  array  $array     Array of Validation objects to get errors from
	 * @param  string $directory Directory to load error messages from
	 * @param  mixed  $translate Translate the message
	 * @return array
	 */",
 "/**
	 * Returns the protected _objects property from this exception
	 *
	 * @return array
	 */",
 "/**
	 * Returns the protected _alias property from this exception
	 *
	 * @return string
	 */",
 "/**
 * ORM Validation exceptions.
 *
 * @package    Kohana/ORM
 * @author     Kohana Team
 * @copyright  (c) 2007-2010 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Data provider for test_instance
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the [Cache::factory()] method behaves as expected
	 * 
	 * @dataProvider provider_instance
	 *
	 * @return  void
	 */",
 "/**
	 * Tests that `clone($cache)` will be prevented to maintain singleton
	 *
	 * @return  void
	 * @expectedException Cache_Exception
	 */",
 "/**
	 * Data provider for test_config
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the config method behaviour
	 * 
	 * @dataProvider provider_config
	 *
	 * @param   mixed    key value to set or get
	 * @param   mixed    value to set to key
	 * @param   mixed    expected result from [Cache::config()]
	 * @param   array    expected config within cache
	 * @return  void
	 */",
 "/**
	 * Data provider for test_sanitize_id
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the [Cache::_sanitize_id()] method works as expected.
	 * This uses some nasty reflection techniques to access a protected
	 * method.
	 * 
	 * @dataProvider provider_sanitize_id
	 *
	 * @param   string    id 
	 * @param   string    expected 
	 * @return  void
	 */",
 "/**
*  @package    Kohana/Cache
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * If we don\'t pass a directory to the reader then it should assume 
	 * that we want to search the dir \'config\' by default
	 *
	 * @test
	 * @covers Kohana_Config_File_Reader
	 */",
 "/**
	 * If we pass a directory to the constructor of the file reader it 
	 * should change the search directory
	 *
	 * @test
	 * @covers Kohana_Config_File_Reader
	 */",
 "/**
	 * If the config dir does not exist then the function should just 
	 * return an empty array
	 *
	 * @test
	 * @covers Kohana_Config_File_Reader::load
	 */",
 "/**
	 * If the requested config group does not exist then the reader 
	 * should return an empty array
	 *
	 * @test
	 * @covers Kohana_Config_File_Reader::load
	 */",
 "/**
	 * Test that the load() function is actually loading the 
	 * configuration from the files.
	 *
	 * @test
	 * @covers Kohana_Config_File_Reader::load
	 */",
 "/**
 * Tests the Config file reader that\'s shipped with kohana
 *
 * @group kohana
 * @group kohana.config
 *
 * @package    Unittest
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @author     Matt Button <matthew@sigswitch.com>
 * @copyright  (c) 2008-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Create a new model instance. A [Database] instance or configuration
	 * group name can be passed to the model. If no database is defined, the
	 * \"default\" database group will be used.
	 *
	 *     $model = Model::factory($name);
	 *
	 * @param   string   model name
	 * @param   mixed    Database instance object or string
	 * @return  Model
	 */",
 "/**
	 * Loads the database.
	 *
	 *     $model = new Foo_Model($db);
	 *
	 * @param   mixed  Database instance object or string
	 * @return  void
	 */",
 "/**
 * Database Model base class.
 *
 * @package    Kohana/Database
 * @category   Models
 * @author     Kohana Team
 * @copyright  (c) 2008-2010 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * Backwards compatibility extension for the database writer.
 *
 * @package    Kohana/Database
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Sets up the environment
	 */",
 "/**
	 * Tears down the environment
	 */",
 "/**
	 * Provides test data for test_set()
	 *
	 * @return array
	 */",
 "/**
	 * Tests cookie::set()
	 *
	 * @test
	 * @dataProvider provider_set
	 * @covers cookie::set
	 * @param mixed   $key      key to use
	 * @param mixed   $value    value to set
	 * @param mixed   $exp      exp to set
	 * @param boolean $expected Output for cookie::set()
	 */",
 "/**
	 * Provides test data for test_get()
	 *
	 * @return array
	 */",
 "/**
	 * Tests cookie::set()
	 *
	 * @test
	 * @dataProvider provider_get
	 * @covers cookie::get
	 * @param mixed   $key      key to use
	 * @param mixed   $value    value to set
	 * @param boolean $expected Output for cookie::get()
	 */",
 "/**
	 * Provides test data for test_delete()
	 *
	 * @return array
	 */",
 "/**
	 * Tests cookie::delete()
	 *
	 * @test
	 * @dataProvider provider_delete
	 * @covers cookie::delete
	 * @param mixed   $key      key to use
	 * @param boolean $expected Output for cookie::delete()
	 */",
 "/**
	 * Provides test data for test_salt()
	 *
	 * @return array
	 */",
 "/**
	 * Tests cookie::salt()
	 *
	 * @test
	 * @dataProvider provider_salt
	 * @covers cookie::salt
	 * @param mixed   $key      key to use
	 * @param mixed   $value    value to salt with
	 * @param boolean $expected Output for cookie::delete()
	 */",
 "/**
 * Tests the cookie class
 *
 * @group kohana
 * @group kohana.cookie
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
	 * Creates a new request object for the given URI. New requests should be
	 * created using the [Request::instance] or [Request::factory] methods.
	 *
	 *     $request = Request::factory($uri);
	 *
	 * If $cache parameter is set, the response for the request will attempt to
	 * be retrieved from the cache.
	 *
	 * @param   string  $uri URI of the request
	 * @param   Cache   $cache
	 * @param   array   $injected_routes an array of routes to use, for testing
	 * @return  void
	 * @throws  Request_Exception
	 * @uses    Route::all
	 * @uses    Route::matches
	 */",
 "/**
				 * We use REQUEST_URI as the fallback value. The reason
				 * for this is we might have a malformed URL such as:
				 *
				 *  http://localhost/http://example.com/judge.php
				 *
				 * which parse_url can\'t handle. So rather than leave empty
				 * handed, we\'ll use this.
				 */",
 "/**
	 * Automatically detects the URI of the main request using PATH_INFO,
	 * REQUEST_URI, PHP_SELF or REDIRECT_URL.
	 *
	 *     $uri = Request::detect_uri();
	 *
	 * @return  string  URI of the main request
	 * @throws  Kohana_Exception
	 * @since   3.0.8
	 */",
 "/**
	 * Return the currently executing request. This is changed to the current
	 * request when [Request::execute] is called and restored when the request
	 * is completed.
	 *
	 *     $request = Request::current();
	 *
	 * @return  Request
	 * @since   3.0.5
	 */",
 "/**
	 * Returns the first request encountered by this framework. This will should
	 * only be set once during the first [Request::factory] invocation.
	 *
	 *     // Get the first request
	 *     $request = Request::initial();
	 *
	 *     // Test whether the current request is the first request
	 *     if (Request::initial() === Request::current())
	 *          // Do something useful
	 *
	 * @return  Request
	 * @since   3.1.0
	 */",
 "/**
	 * Returns information about the client user agent.
	 *
	 *     // Returns \"Chrome\" when using Google Chrome
	 *     $browser = Request::user_agent(\'browser\');
	 *
	 * Multiple values can be returned at once by using an array:
	 *
	 *     // Get the browser and platform with a single call
	 *     $info = Request::user_agent(array(\'browser\', \'platform\'));
	 *
	 * When using an array for the value, an associative array will be returned.
	 *
	 * @param   mixed   $value String to return: browser, version, robot, mobile, platform; or array of values
	 * @return  mixed   requested information, FALSE if nothing is found
	 * @uses    Kohana::$config
	 * @uses    Request::$user_agent
	 */",
 "/**
	 * Returns the accepted content types. If a specific type is defined,
	 * the quality of that type will be returned.
	 *
	 *     $types = Request::accept_type();
	 *
	 * @param   string  $type Content MIME type
	 * @return  mixed   An array of all types or a specific type as a string
	 * @uses    Request::_parse_accept
	 */",
 "/**
	 * Returns the accepted languages. If a specific language is defined,
	 * the quality of that language will be returned. If the language is not
	 * accepted, FALSE will be returned.
	 *
	 *     $langs = Request::accept_lang();
	 *
	 * @param   string  $lang  Language code
	 * @return  mixed   An array of all types or a specific type as a string
	 * @uses    Request::_parse_accept
	 */",
 "/**
	 * Returns the accepted encodings. If a specific encoding is defined,
	 * the quality of that encoding will be returned. If the encoding is not
	 * accepted, FALSE will be returned.
	 *
	 *     $encodings = Request::accept_encoding();
	 *
	 * @param   string  $type Encoding type
	 * @return  mixed   An array of all types or a specific type as a string
	 * @uses    Request::_parse_accept
	 */",
 "/**
	 * Determines if a file larger than the post_max_size has been uploaded. PHP
	 * does not handle this situation gracefully on its own, so this method
	 * helps to solve that problem.
	 *
	 * @return  boolean
	 * @uses    Num::bytes
	 * @uses    Arr::get
	 */",
 "/**
	 * Process URI
	 *
	 * @param   string  $uri     URI
	 * @param   array   $routes  Route
	 * @return  array
	 */",
 "/**
	 * Parses an accept header and returns an array (type => quality) of the
	 * accepted types, ordered by quality.
	 *
	 *     $accept = Request::_parse_accept($header, $defaults);
	 *
	 * @param   string   $header   Header to parse
	 * @param   array    $accepts  Default values
	 * @return  array
	 */",
 "/**
	 * Creates a new request object for the given URI. New requests should be
	 * created using the [Request::instance] or [Request::factory] methods.
	 *
	 *     $request = new Request($uri);
	 *
	 * If $cache parameter is set, the response for the request will attempt to
	 * be retrieved from the cache.
	 *
	 * @param   string  $uri URI of the request
	 * @param   HTTP_Cache   $cache
	 * @param   array   $injected_routes an array of routes to use, for testing
	 * @return  void
	 * @throws  Request_Exception
	 * @uses    Route::all
	 * @uses    Route::matches
	 */",
 "/**
	 * Returns the response as the string representation of a request.
	 *
	 *     echo $request;
	 *
	 * @return  string
	 */",
 "/**
	 * Returns the URI for the current route.
	 *
	 *     $request->uri();
	 *
	 * @param   array   $params  Additional route parameters
	 * @return  string
	 * @uses    Route::uri
	 */",
 "/**
	 * Create a URL string from the current request. This is a shortcut for:
	 *
	 *     echo URL::site($this->request->uri(), $protocol);
	 *
	 * @param   array    $params    URI parameters
	 * @param   mixed    $protocol  protocol string or Request object
	 * @return  string
	 * @since   3.0.7
	 * @uses    URL::site
	 */",
 "/**
	 * Retrieves a value from the route parameters.
	 *
	 *     $id = $request->param(\'id\');
	 *
	 * @param   string   $key      Key of the value
	 * @param   mixed    $default  Default value if the key is not set
	 * @return  mixed
	 */",
 "/**
	 * Redirects as the request response. If the URL does not include a
	 * protocol, it will be converted into a complete URL.
	 *
	 *     $request->redirect($url);
	 *
	 * [!!] No further processing can be done after this method is called!
	 *
	 * @param   string   $url   Redirect location
	 * @param   integer  $code  Status code: 301, 302, etc
	 * @return  void
	 * @uses    URL::site
	 * @uses    Request::send_headers
	 */",
 "/**
	 * Sets and gets the referrer from the request.
	 *
	 * @param   string $referrer
	 * @return  mixed
	 */",
 "/**
	 * Sets and gets the route from the request.
	 *
	 * @param   string $route
	 * @return  mixed
	 */",
 "/**
	 * Sets and gets the directory for the controller.
	 *
	 * @param   string   $directory  Directory to execute the controller from
	 * @return  mixed
	 */",
 "/**
	 * Sets and gets the controller for the matched route.
	 *
	 * @param   string   $controller  Controller to execute the action
	 * @return  mixed
	 */",
 "/**
	 * Sets and gets the action for the controller.
	 *
	 * @param   string   $action  Action to execute the controller from
	 * @return  mixed
	 */",
 "/**
	 * Provides access to the [Request_Client].
	 *
	 * @return  Request_Client
	 * @return  self
	 */",
 "/**
	 * Gets and sets the requested with property, which should
	 * be relative to the x-requested-with pseudo header.
	 *
	 * @param   string    $requested_with Requested with value
	 * @return  mixed
	 */",
 "/**
	 * Processes the request, executing the controller action that handles this
	 * request, determined by the [Route].
	 *
	 * 1. Before the controller action is called, the [Controller::before] method
	 * will be called.
	 * 2. Next the controller action will be called.
	 * 3. After the controller action is called, the [Controller::after] method
	 * will be called.
	 *
	 * By default, the output from the controller is captured and returned, and
	 * no headers are sent.
	 *
	 *     $request->execute();
	 *
	 * @return  Response
	 * @throws  Request_Exception
	 * @throws  HTTP_Exception_404
	 * @uses    [Kohana::$profiling]
	 * @uses    [Profiler]
	 */",
 "/**
	 * Returns whether this request is the initial request Kohana received.
	 * Can be used to test for sub requests.
	 *
	 *     if ( ! $request->is_initial())
	 *         // This is a sub request
	 *
	 * @return  boolean
	 */",
 "/**
	 * Readonly access to the [Request::$_external] property.
	 * 
	 *     if ( ! $request->is_external())
	 *          // This is an internal request
	 *
	 * @return  boolean
	 */",
 "/**
	 * Returns whether this is an ajax request (as used by JS frameworks)
	 *
	 * @return  boolean
	 */",
 "/**
	 * Generates an [ETag](http://en.wikipedia.org/wiki/HTTP_ETag) from the
	 * request response.
	 *
	 *     $etag = $request->generate_etag();
	 *
	 * [!!] If the request response is empty when this method is called, an
	 * exception will be thrown!
	 *
	 * @return string
	 * @throws Request_Exception
	 */",
 "/**
	 * Set or get the response for this request
	 *
	 * @param   Response  $response  Response to apply to this request
	 * @return  Response
	 * @return  void
	 */",
 "/**
	 * Creates a response based on the type of request, i.e. an
	 * Request_HTTP will produce a Response_HTTP, and the same applies
	 * to CLI.
	 *
	 *      // Create a response to the request
	 *      $response = $request->create_response();
	 *
	 * @param   boolean  $bind  Bind to this request
	 * @return  Response
	 * @since   3.1.0
	 */",
 "/**
	 * Gets or sets the HTTP method. Usually GET, POST, PUT or DELETE in
	 * traditional CRUD applications.
	 *
	 * @param   string   $method  Method to use for this request
	 * @return  mixed
	 */",
 "/**
	 * Gets or sets the HTTP protocol. If there is no current protocol set,
	 * it will use the default set in HTTP::$protocol
	 *
	 * @param   string   $protocol  Protocol to set to the request/response
	 * @return  mixed
	 */",
 "/**
	 * Getter/Setter to the security settings for this request. This
	 * method should be treated as immutable.
	 *
	 * @param   boolean   is this request secure?
	 * @return  mixed
	 */",
 "/**
	 * Gets or sets HTTP headers to the request or response. All headers
	 * are included immediately after the HTTP protocol definition during
	 * transmission. This method provides a simple array or key/value
	 * interface to the headers.
	 *
	 * @param   mixed   $key   Key or array of key/value pairs to set
	 * @param   string  $value Value to set to the supplied key
	 * @return  mixed
	 */",
 "/**
	 * Set and get cookies values for this request.
	 *
	 * @param   mixed    $key    Cookie name, or array of cookie values
	 * @param   string   $value  Value to set to cookie
	 * @return  string
	 * @return  mixed
	 */",
 "/**
	 * Gets or sets the HTTP body to the request or response. The body is
	 * included after the header, separated by a single empty new line.
	 *
	 * @param   string  $content Content to set to the object
	 * @return  mixed
	 */",
 "/**
	 * Returns the length of the body for use with
	 * content header
	 *
	 * @return  integer
	 */",
 "/**
	 * Renders the HTTP_Interaction to a string, producing
	 *
	 *  - Protocol
	 *  - Headers
	 *  - Body
	 *
	 *  If there are variables set to the `Kohana_Request::$_post`
	 *  they will override any values set to body.
	 *
	 * @param   boolean  $response  Return the rendered response, else returns the rendered request
	 * @return  string
	 */",
 "/**
	 * Gets or sets HTTP query string.
	 *
	 * @param   mixed   $key    Key or key value pairs to set
	 * @param   string  $value  Value to set to a key
	 * @return  mixed
	 */",
 "/**
	 * Gets or sets HTTP POST parameters to the request.
	 *
	 * @param   mixed  $key    Key or key value pairs to set
	 * @param   string $value  Value to set to a key
	 * @return  mixed
	 */",
 "/**
 * Request and response wrapper. Uses the [Route] class to determine what
 * [Controller] to send the request to.
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Increments a given value by the step value supplied.
	 * Useful for shared counters and other persistent integer based
	 * tracking.
	 *
	 * @param   string    id of cache entry to increment
	 * @param   int       step value to increment by
	 * @return  integer
	 * @return  boolean
	 */",
 "/**
	 * Decrements a given value by the step value supplied.
	 * Useful for shared counters and other persistent integer based
	 * tracking.
	 *
	 * @param   string    id of cache entry to decrement
	 * @param   int       step value to decrement by
	 * @return  integer
	 * @return  boolean
	 */",
 "/**
 * Kohana Cache Arithmetic Interface, for basic cache integer based
 * arithmetic, addition and subtraction
 * 
 * @package    Kohana/Cache
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 * @since      3.2.0
 */",
 "/**
	 * Alias of and_where()
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Creates a new \"AND WHERE\" condition for the query.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Creates a new \"OR WHERE\" condition for the query.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Alias of and_where_open()
	 *
	 * @return  $this
	 */",
 "/**
	 * Opens a new \"AND WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Opens a new \"OR WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"AND WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"AND WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"OR WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Applies sorting with \"ORDER BY ...\"
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  direction of sorting
	 * @return  $this
	 */",
 "/**
	 * Return up to \"LIMIT ...\" results
	 *
	 * @param   integer  maximum results to return or NULL to reset
	 * @return  $this
	 */",
 "/**
 * Database query builder for WHERE statements. See [Query Builder](/database/query/builder) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * UTF8::strpos
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Provides data for test_accept_quality
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the `accept_quality` method parses the quality values
	 * correctly out of header parts
	 * 
	 * @dataProvider provider_accept_quality
	 *
	 * @param   array     input
	 * @param   array     expected output
	 * @return  void
	 */",
 "/**
	 * Data provider for test_parse_accept_header
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the `parse_accept_header` method parses the Accept: header
	 * correctly and returns expected output
	 * 
	 * @dataProvider provider_parse_accept_header
	 *
	 * @param   string    accept in
	 * @param   array     expected out
	 * @return  void
	 */",
 "/**
	 * Provides data for test_parse_charset_header
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the `parse_charset_header` method parsed the Accept-Charset header
	 * correctly
	 * 
	 * @dataProvider provider_parse_charset_header
	 *
	 * @param   string    accept 
	 * @param   array     expected 
	 * @return  void
	 */",
 "/**
	 * Provides data for test_parse_charset_header
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the `parse_encoding_header` method parses the Accept-Encoding header
	 * correctly
	 * 
	 * @dataProvider provider_parse_encoding_header
	 *
	 * @param   string    accept 
	 * @param   array     expected 
	 * @return  void
	 */",
 "/**
	 * Provides data for test_parse_charset_header
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the `parse_language_header` method parses the Accept-Language header
	 * correctly
	 * 
	 * @dataProvider provider_parse_language_header
	 * 
	 * @param   string    accept 
	 * @param   array     expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_create_cache_control
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that `create_cache_control()` outputs the correct cache control
	 * string from the supplied input
	 * 
	 * @dataProvider provider_create_cache_control
	 *
	 * @param   array     input 
	 * @param   string    expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for parse_cache_control
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that `parse_cache_control()` outputs the correct cache control
	 * parsed data from the input string
	 *
	 * @dataProvider provider_parse_cache_control
	 * 
	 * @param   string    input 
	 * @param   array     expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_offsetSet
	 *
	 * @return  array
	 */",
 "/**
	 * Ensures that offsetSet normalizes the array keys
	 *
	 * @dataProvider provider_offsetSet
	 * 
	 * @param   array     constructor
	 * @param   array     to_set 
	 * @param   array     expected
	 * @return  void
	 */",
 "/**
	 * Data provider for test_offsetGet
	 *
	 * @return  array
	 */",
 "/**
	 * Ensures that offsetGet normalizes the array keys
	 * 
	 * @dataProvider provider_offsetGet
	 *
	 * @param   array     start state
	 * @param   string    key to retrieve
	 * @param   mixed     expected
	 * @return  void
	 */",
 "/**
	 * Data provider for test_offsetExists
	 *
	 * @return  array
	 */",
 "/**
	 * Ensures that offsetExists normalizes the array key
	 * 
	 * @dataProvider provider_offsetExists
	 *
	 * @param   array    state 
	 * @param   string   key 
	 * @param   boolean  expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_offsetUnset
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that `offsetUnset` normalizes the key names properly
	 *
	 * @dataProvider provider_offsetUnset
	 *
	 * @param   array     state 
	 * @param   string    remove 
	 * @param   array     expected 
	 * @return  void
	 */",
 "/**
	 * Provides data for test_parse_header_string
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that `parse_header_string` performs as expected
	 * 
	 * @dataProvider provider_parse_header_string
	 *
	 * @param   array    headers 
	 * @param   array    expected 
	 * @return  void
	 */",
 "/**
	 * Data Provider for test_accepts_at_quality
	 *
	 * @return  array
	 */",
 "/**
	 * Tests `accepts_at_quality` parsed the Accept: header as expected
	 * 
	 * @dataProvider provider_accepts_at_quality
	 *
	 * @param   array     starting state
	 * @param   string    accept header to test
	 * @param   boolean   explicitly check
	 * @param   mixed     expected output
	 * @return  void
	 */",
 "/**
	 * Data provider for test_preferred_accept
	 *
	 * @return  array
	 */",
 "/**
	 * Tests `preferred_accept` returns the correct preferred type
	 * 
	 * @dataProvider provider_preferred_accept
	 *
	 * @param   array     state 
	 * @param   array     accepts 
	 * @param   string    explicit 
	 * @param   string    expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_accepts_charset_at_quality
	 *
	 * @return  array
	 */",
 "/**
	 * Tests `accepts_charset_at_quality` works as expected, returning the correct
	 * quality value
	 * 
	 * @dataProvider provider_accepts_charset_at_quality
	 *
	 * @param   array     state 
	 * @param   string    charset 
	 * @param   string    expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_preferred_charset
	 *
	 * @return  array
	 */",
 "/**
	 * Tests `preferred_charset` works as expected, returning the correct charset
	 * from the list supplied
	 * 
	 * @dataProvider provider_preferred_charset
	 *
	 * @param   array     state 
	 * @param   array     charsets 
	 * @param   string    expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_accepts_encoding_at_quality
	 *
	 * @return  array
	 */",
 "/**
	 * Tests `accepts_encoding_at_quality` parses and returns the correct
	 * quality value for Accept-Encoding headers
	 * 
	 * @dataProvider provider_accepts_encoding_at_quality
	 *
	 * @param   array     state 
	 * @param   string    encoding 
	 * @param   boolean   explicit 
	 * @param   float     expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_preferred_encoding
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that `preferred_encoding` parses and returns the correct
	 * encoding type
	 * 
	 * @dataProvider provider_preferred_encoding
	 *
	 * @param   array     state in
	 * @param   array     encodings to interrogate 
	 * @param   boolean   explicit check
	 * @param   string    expected output
	 * @return  void
	 */",
 "/**
	 * Data provider for test_accepts_language_at_quality
	 *
	 * @return  array
	 */",
 "/**
	 * Tests `accepts_language_at_quality` parses the Accept-Language header
	 * correctly and identifies the correct quality supplied, explicit or not
	 *
	 * @dataProvider provider_accepts_language_at_quality
	 * 
	 * @param   array    state in
	 * @param   string   language to interrogate
	 * @param   boolean  explicit check
	 * @param   float    expected output
	 * @return  void
	 */",
 "/**
	 * Data provider for test_preferred_language
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that `preferred_language` correctly identifies the right
	 * language based on the Accept-Language header and `$explicit` setting
	 * 
	 * @dataProvider provider_preferred_language
	 *
	 * @param   array    state in
	 * @param   array    languages to interrogate
	 * @param   boolean  explicit check
	 * @param   string   expected output
	 * @return  void
	 */",
 "/**
	 * Data provider for test_send_headers
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that send headers processes the headers sent to PHP correctly
	 * 
	 * @dataProvider provider_send_headers
	 *
	 * @param   array     state in
	 * @param   array     expected out
	 * @return  void
	 */",
 "/**
	 * Callback handler for send headers
	 *
	 * @param   array     headers 
	 * @param   boolean   replace 
	 * @return  array
	 */",
 "/**
 * Unit Tests for Kohana_HTTP_Header
 *
 * @group kohana
 * @group kohana.http
 * @group kohana.http.header
 * 
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Create a mock Kohana_Config instance
	 *
	 * @return Kohana_Config
	 */",
 "/**
	 * Gets a fresh instance of Kohana_Config_Group
	 *
	 * @param string        $group    Config Group name
	 * @param array         $config   Configuration
	 * @param Kohana_Config $instance Instance of Kohana_Config
	 * @return Kohana_Config_Group
	 */",
 "/**
	 * The group name and group\'s config values should be loaded into the object
	 * by the constructor
	 *
	 * @test
	 * @covers Kohana_Config_Group
	 */",
 "/**
	 * A config group may not exist (or may not have any values) when it is loaded.
	 * The config group should allow for this situation and not complain
	 *
	 * @test
	 * @covers Kohana_Config_Group
	 */",
 "/**
	 * When get() is called it should fetch the config value specified
	 *
	 * @test
	 * @covers Kohana_Config_Group::get
	 */",
 "/**
	 * If a config option does not exist then get() should return the default value, which is
	 * NULL by default
	 *
	 * @test
	 * @covers Kohana_Config_Group::get
	 */",
 "/**
	 * We should be able to modify existing configuration items using set()
	 *
	 * @test
	 * @covers Kohana_Config_Group::set
	 */",
 "/**
	 * If we modify the config via set() [$var] or ->$var then the change should be passed to
	 * the parent config instance so that the config writers can be notified.
	 * 
	 * The modification to the config should also stick
	 *
	 * @test
	 * @covers Kohana_Config_Group::offsetSet
	 */",
 "/**
	 * Calling as_array() should return the full array, inc. any modifications
	 *
	 * @test
	 * @covers Kohana_Config_Group::as_array
	 */",
 "/**
	 * Casting the object to a string should serialize the output of as_array
	 *
	 * @test
	 * @covers Kohana_Config_Group::__toString
	 */",
 "/**
 * Tests the Config group lib
 *
 * @group kohana
 * @group kohana.config
 *
 * @package    Unittest
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @author     Matt Button <matthew@sigswitch.com>
 * @copyright  (c) 2008-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Write an array of messages.
	 *
	 *     $writer->write($messages);
	 *
	 * @param   array  messages
	 * @return  void
	 */",
 "/**
	 * Allows the writer to have a unique key when stored.
	 *
	 *     echo $writer;
	 *
	 * @return  string
	 */",
 "/**
 * Log writer abstract class. All [Log] writers must extend this class.
 *
 * @package    Kohana
 * @category   Logging
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Woody Gilk <woody.gilk@kohanaphp.com>
 */",
 "/**
	 * Constructs the database reader object
	 *
	 * @param array Configuration for the reader
	 */",
 "/**
	 * Tries to load the specificed configuration group
	 *
	 * Returns FALSE if group does not exist or an array if it does
	 *
	 * @param  string $group Configuration group
	 * @return boolean|array
	 */",
 "/**
 * Database reader for the kohana config system
 *
 * @package    Kohana/Database
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
	 * Create a new [Database_Query] of the given type.
	 *
	 *     // Create a new SELECT query
	 *     $query = DB::query(Database::SELECT, \'SELECT * FROM users\');
	 *
	 *     // Create a new DELETE query
	 *     $query = DB::query(Database::DELETE, \'DELETE FROM users WHERE id = 5\');
	 *
	 * Specifying the type changes the returned result. When using
	 * `Database::SELECT`, a [Database_Query_Result] will be returned.
	 * `Database::INSERT` queries will return the insert id and number of rows.
	 * For all other queries, the number of affected rows is returned.
	 *
	 * @param   integer  type: Database::SELECT, Database::UPDATE, etc
	 * @param   string   SQL statement
	 * @return  Database_Query
	 */",
 "/**
	 * Create a new [Database_Query_Builder_Select]. Each argument will be
	 * treated as a column. To generate a `foo AS bar` alias, use an array.
	 *
	 *     // SELECT id, username
	 *     $query = DB::select(\'id\', \'username\');
	 *
	 *     // SELECT id AS user_id
	 *     $query = DB::select(array(\'id\', \'user_id\'));
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   ...
	 * @return  Database_Query_Builder_Select
	 */",
 "/**
	 * Create a new [Database_Query_Builder_Select] from an array of columns.
	 *
	 *     // SELECT id, username
	 *     $query = DB::select_array(array(\'id\', \'username\'));
	 *
	 * @param   array   columns to select
	 * @return  Database_Query_Builder_Select
	 */",
 "/**
	 * Create a new [Database_Query_Builder_Insert].
	 *
	 *     // INSERT INTO users (id, username)
	 *     $query = DB::insert(\'users\', array(\'id\', \'username\'));
	 *
	 * @param   string  table to insert into
	 * @param   array   list of column names or array($column, $alias) or object
	 * @return  Database_Query_Builder_Insert
	 */",
 "/**
	 * Create a new [Database_Query_Builder_Update].
	 *
	 *     // UPDATE users
	 *     $query = DB::update(\'users\');
	 *
	 * @param   string  table to update
	 * @return  Database_Query_Builder_Update
	 */",
 "/**
	 * Create a new [Database_Query_Builder_Delete].
	 *
	 *     // DELETE FROM users
	 *     $query = DB::delete(\'users\');
	 *
	 * @param   string  table to delete from
	 * @return  Database_Query_Builder_Delete
	 */",
 "/**
	 * Create a new [Database_Expression] which is not escaped. An expression
	 * is the only way to use SQL functions within query builders.
	 *
	 *     $expression = DB::expr(\'COUNT(users.id)\');
	 *     $query = DB::update(\'users\')->set(array(\'login_count\' => DB::expr(\'login_count + 1\')))->where(\'id\', \'=\', $id);
	 *     $users = ORM::factory(\'user\')->where(DB::expr(\"BINARY `hash`\"), \'=\', $hash)->find();
	 *
	 * @param   string  expression
	 * @param   array   parameters
	 * @return  Database_Expression
	 */",
 "/**
 * Provides a shortcut to get Database related objects for [making queries](../database/query).
 *
 * Shortcut     | Returned Object
 * -------------|---------------
 * [`DB::query()`](#query)   | [Database_Query]
 * [`DB::insert()`](#insert) | [Database_Query_Builder_Insert]
 * [`DB::select()`](#select),<br />[`DB::select_array()`](#select_array) | [Database_Query_Builder_Select]
 * [`DB::update()`](#update) | [Database_Query_Builder_Update]
 * [`DB::delete()`](#delete) | [Database_Query_Builder_Delete]
 * [`DB::expr()`](#expr)     | [Database_Expression]
 *
 * You pass the same parameters to these functions as you pass to the objects they return.
 *
 * @package    Kohana/Database
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Generate the cache key name for a fragment.
	 *
	 *     $key = Fragment::_cache_key(\'footer\', TRUE);
	 *
	 * @param   string   fragment name
	 * @param   boolean  multilingual fragment support
	 * @return  string
	 * @uses    I18n::lang
	 * @since   3.0.4
	 */",
 "/**
	 * Load a fragment from cache and display it. Multiple fragments can
	 * be nested with different life times.
	 *
	 *     if ( ! Fragment::load(\'footer\')) {
	 *         // Anything that is echo\'ed here will be saved
	 *         Fragment::save();
	 *     }
	 *
	 * @param   string   fragment name
	 * @param   integer  fragment cache lifetime
	 * @param   boolean  multilingual fragment support
	 * @return  boolean
	 */",
 "/**
	 * Saves the currently open fragment in the cache.
	 *
	 *     Fragment::save();
	 *
	 * @return  void
	 */",
 "/**
	 * Delete a cached fragment.
	 *
	 *     Fragment::delete($key);
	 *
	 * @param   string   fragment name
	 * @param   boolean  multilingual fragment support
	 * @return  void
	 */",
 "/**
 * View fragment caching. This is primarily used to cache small parts of a view
 * that rarely change. For instance, you may want to cache the footer of your
 * template because it has very little dynamic content. Or you could cache a
 * user profile page and delete the fragment when the user updates.
 *
 * For obvious reasons, fragment caching should not be applied to any
 * content that contains forms.
 *
 * [!!] Multiple language (I18n) support was added in v3.0.4.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 * @uses       Kohana::cache
 */",
 "/**
	 * Provider for test_increment
	 *
	 * @return  array
	 */",
 "/**
	 * Test for [Cache_Arithmetic::increment()]
	 * 
	 * @dataProvider provider_increment
	 *
	 * @param   integer  start state
	 * @param   array    increment arguments
	 * @return  void
	 */",
 "/**
	 * Provider for test_decrement
	 *
	 * @return  array
	 */",
 "/**
	 * Test for [Cache_Arithmetic::decrement()]
	 * 
	 * @dataProvider provider_decrement
	 *
	 * @param   integer  start state
	 * @param   array    decrement arguments
	 * @return  void
	 */",
 "/**
*  @package    Kohana/Cache
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Tries to load the specificed configuration group
	 *
	 * Returns FALSE if group does not exist or an array if it does
	 *
	 * @param  string $group Configuration group
	 * @return boolean|array
	 */",
 "/**
 * Interface for config readers
 *
 * @package    Kohana
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Provider for test_body
	 *
	 * @return array
	 */",
 "/**
	 * Tests that we can set and read a body of a response
	 * 
	 * @test
	 * @dataProvider provider_body
	 *
	 * @return null
	 */",
 "/**
	 * Provides data for test_body_string_zero()
	 *
	 * @return array
	 */",
 "/**
	 * Test that Response::body() handles numerics correctly
	 *
	 * @test
	 * @dataProvider provider_body_string_zero
	 * @param string $string 
	 * @param string $expected 
	 * @return void
	 */",
 "/**
	 * provider for test_cookie_set()
	 *
	 * @return array
	 */",
 "/**
	 * Tests the Response::cookie() method, ensures
	 * correct values are set, including defaults
	 *
	 * @test
	 * @dataProvider provider_cookie_set
	 * @param string $key 
	 * @param string $value 
	 * @param string $expected 
	 * @return void
	 */",
 "/**
	 * Tests the Response::cookie() get functionality
	 *
	 * @return void
	 */",
 "/**
	 * Tests that the headers are not sent by PHP in CLI mode
	 *
	 * @return void
	 */",
 "/**
	 * Test the content type is sent when set
	 * 
	 * @test
	 */",
 "/**
 * Unit tests for response class
 *
 * @group kohana
 * @group kohana.response
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Sets up the PDO SQLite table and
	 * initialises the PDO connection
	 *
	 * @param  array     configuration
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Retrieve a value based on an id
	 *
	 * @param   string   id 
	 * @param   string   default [Optional] Default value to return if id not found
	 * @return  mixed
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Set a value based on an id. Optionally add tags.
	 *
	 * @param   string   id 
	 * @param   mixed    data 
	 * @param   integer  lifetime [Optional]
	 * @return  boolean
	 */",
 "/**
	 * Delete a cache entry based on id
	 *
	 * @param   string   id 
	 * @param   integer  timeout [Optional]
	 * @return  boolean
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Delete all cache entries
	 *
	 * @return  boolean
	 */",
 "/**
	 * Set a value based on an id. Optionally add tags.
	 * 
	 * @param   string   id 
	 * @param   mixed    data 
	 * @param   integer  lifetime [Optional]
	 * @param   array    tags [Optional]
	 * @return  boolean
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Delete cache entries based on a tag
	 *
	 * @param   string   tag 
	 * @param   integer  timeout [Optional]
	 * @return  boolean
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Find cache entries based on a tag
	 *
	 * @param   string   tag 
	 * @return  array
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Garbage collection method that cleans any expired
	 * cache entries from the cache.
	 *
	 * @return  void
	 */",
 "/**
	 * Tests whether an id exists or not
	 *
	 * @param   string   id 
	 * @return  boolean
	 * @throws  Cache_Exception
	 */",
 "/**
 * Kohana Cache Sqlite Driver
 * 
 * Requires SQLite3 and PDO
 * 
 * @package    Kohana/Cache
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Provides test data for test_envode_php_tags()
	 *
	 * @return array Test data sets
	 */",
 "/**
	 * Tests Security::encode_php_tags()
	 *
	 * @test
	 * @dataProvider provider_encode_php_tags
	 * @covers Security::encode_php_tags
	 */",
 "/**
	 * Provides test data for test_strip_image_tags()
	 *
	 * @return array Test data sets
	 */",
 "/**
	 * Tests Security::strip_image_tags()
	 *
	 * @test
	 * @dataProvider provider_strip_image_tags
	 * @covers Security::strip_image_tags
	 */",
 "/**
	 * Provides test data for Security::token()
	 *
	 * @return array Test data sets
	 */",
 "/**
	 * Tests Security::token()
	 *
	 * @test
	 * @dataProvider provider_csrf_token
	 * @covers Security::token
	 */",
 "/**
 * Tests Kohana_Security
 *
 * @group kohana
 * @group kohana.security
 *
 * @package    Kohana
 * @category   Tests
 */",
 "/** 
	 * Constructs the memcache object
	 *
	 * @param  array     configuration
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Set a value based on an id with tags
	 * 
	 * @param   string   id 
	 * @param   mixed    data 
	 * @param   integer  lifetime [Optional]
	 * @param   array    tags [Optional]
	 * @return  boolean
	 */",
 "/**
	 * Delete cache entries based on a tag
	 *
	 * @param   string   tag 
	 * @return  boolean
	 */",
 "/**
	 * Find cache entries based on a tag
	 *
	 * @param   string   tag 
	 * @return  void
	 * @throws  Cache_Exception
	 */",
 "/**
 * See [Kohana_Cache_Memcache]
 * 
* @package    Kohana/Cache
* @category   Base
* @version    2.0
* @author     Kohana Team
* @copyright  (c) 2009-2010 Kohana Team
* @license    http://kohanaphp.com/license
 */",
 "/**
 * ORM Validation exceptions.
 *
 * @package    Kohana/ORM
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * UTF8::str_pad
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * @param  Validation  Validation object
	 * @param  string    error message
	 * @param  array     translation variables
	 * @param  int       the exception code
	 */",
 "/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Writes each of the messages to STDOUT.
	 *
	 *     $writer->write($messages);
	 *
	 * @param   array   messages
	 * @return  void
	 */",
 "/**
 * STDOUT log writer. Writes out messages to STDOUT.
 *
 * @package    Kohana
 * @category   Logging
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Sets the initial columns to select from.
	 *
	 * @param   array  column list
	 * @return  void
	 */",
 "/**
	 * Enables or disables selecting only unique columns using \"SELECT DISTINCT\"
	 *
	 * @param   boolean  enable or disable distinct columns
	 * @return  $this
	 */",
 "/**
	 * Choose the columns to select from.
	 *
	 * @param   mixed  column name or array($column, $alias) or object
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Choose the columns to select from, using an array.
	 *
	 * @param   array  list of column names or aliases
	 * @return  $this
	 */",
 "/**
	 * Choose the tables to select \"FROM ...\"
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Adds addition tables to \"JOIN ...\".
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  join type (LEFT, RIGHT, INNER, etc)
	 * @return  $this
	 */",
 "/**
	 * Adds \"ON ...\" conditions for the last created JOIN statement.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column name or array($column, $alias) or object
	 * @return  $this
	 */",
 "/**
	 * Adds \"USING ...\" conditions for the last created JOIN statement.
	 *
	 * @param   string  column name
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Creates a \"GROUP BY ...\" filter.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Alias of and_having()
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Creates a new \"AND HAVING\" condition for the query.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Creates a new \"OR HAVING\" condition for the query.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Alias of and_having_open()
	 *
	 * @return  $this
	 */",
 "/**
	 * Opens a new \"AND HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Opens a new \"OR HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"AND HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"AND HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"OR HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Adds an other UNION clause.
	 * 
	 * @param mixed $select if string, it must be the name of a table. Else
	 *  must be an instance of Database_Query_Builder_Select
	 * @param boolean $all decides if it\'s an UNION or UNION ALL clause
	 * @return $this
	 */",
 "/**
	 * Start returning results after \"OFFSET ...\"
	 *
	 * @param   integer   starting result number or NULL to reset
	 * @return  $this
	 */",
 "/**
	 * Compile the SQL query and return it.
	 *
	 * @param   object  Database instance
	 * @return  string
	 */",
 "/**
 * Database query builder for SELECT statements. See [Query Builder](/database/query/builder) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Check for existence of the APC extension This method cannot be invoked externally. The driver must
	 * be instantiated using the `Cache::instance()` method.
	 *
	 * @param  array     configuration
	 * @throws Cache_Exception
	 */",
 "/**
	 * Retrieve a cached value entry by id.
	 * 
	 *     // Retrieve cache entry from apc group
	 *     $data = Cache::instance(\'apc\')->get(\'foo\');
	 * 
	 *     // Retrieve cache entry from apc group and return \'bar\' if miss
	 *     $data = Cache::instance(\'apc\')->get(\'foo\', \'bar\');
	 *
	 * @param   string   id of cache to entry
	 * @param   string   default value to return if cache miss
	 * @return  mixed
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Set a value to cache with id and lifetime
	 * 
	 *     $data = \'bar\';
	 * 
	 *     // Set \'bar\' to \'foo\' in apc group, using default expiry
	 *     Cache::instance(\'apc\')->set(\'foo\', $data);
	 * 
	 *     // Set \'bar\' to \'foo\' in apc group for 30 seconds
	 *     Cache::instance(\'apc\')->set(\'foo\', $data, 30);
	 *
	 * @param   string   id of cache entry
	 * @param   string   data to set to cache
	 * @param   integer  lifetime in seconds
	 * @return  boolean
	 */",
 "/**
	 * Delete a cache entry based on id
	 * 
	 *     // Delete \'foo\' entry from the apc group
	 *     Cache::instance(\'apc\')->delete(\'foo\');
	 *
	 * @param   string   id to remove from cache
	 * @return  boolean
	 */",
 "/**
	 * Delete all cache entries.
	 * 
	 * Beware of using this method when
	 * using shared memory cache systems, as it will wipe every
	 * entry within the system for all clients.
	 * 
	 *     // Delete all cache entries in the apc group
	 *     Cache::instance(\'apc\')->delete_all();
	 *
	 * @return  boolean
	 */",
 "/**
	 * Increments a given value by the step value supplied.
	 * Useful for shared counters and other persistent integer based
	 * tracking.
	 *
	 * @param   string    id of cache entry to increment
	 * @param   int       step value to increment by
	 * @return  integer
	 * @return  boolean
	 */",
 "/**
	 * Decrements a given value by the step value supplied.
	 * Useful for shared counters and other persistent integer based
	 * tracking.
	 *
	 * @param   string    id of cache entry to decrement
	 * @param   int       step value to decrement by
	 * @return  integer
	 * @return  boolean
	 */",
 "/**
 * [Kohana Cache](api/Kohana_Cache) APC driver. Provides an opcode based
 * driver for the Kohana Cache library.
 * 
 * ### Configuration example
 * 
 * Below is an example of an _apc_ server configuration.
 * 
 *     return array(
 *          \'apc\' => array(                          // Driver group
 *                  \'driver\'         => \'apc\',         // using APC driver
 *           ),
 *     )
 * 
 * In cases where only one cache group is required, if the group is named `default` there is
 * no need to pass the group name when instantiating a cache instance.
 * 
 * #### General cache group configuration settings
 * 
 * Below are the settings available to all types of cache driver.
 * 
 * Name           | Required | Description
 * -------------- | -------- | ---------------------------------------------------------------
 * driver         | __YES__  | (_string_) The driver type to use
 * 
 * ### System requirements
 * 
 * *  Kohana 3.0.x
 * *  PHP 5.2.4 or greater
 * *  APC PHP extension
 * 
 * @package    Kohana/Cache
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * Transparent extension for Kohana_Unittest_Database_TestCase
 *
 * Provides some unittest helpers and allows a kohana database connection to be 
 * used to connect to the database
 *
 * @package    Kohana/UnitTest
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Get the singleton instance of this class and enable writing at shutdown.
	 *
	 *     $log = Log::instance();
	 *
	 * @return  Log
	 */",
 "/**
	 * Attaches a log writer, and optionally limits the levels of messages that
	 * will be written by the writer.
	 *
	 *     $log->attach($writer);
	 *
	 * @param   object   Log_Writer instance
	 * @param   mixed    array of messages levels to write OR max level to write
	 * @param   integer  min level to write IF $levels is not an array
	 * @return  Log
	 */",
 "/**
	 * Detaches a log writer. The same writer object must be used.
	 *
	 *     $log->detach($writer);
	 *
	 * @param   object  Log_Writer instance
	 * @return  Log
	 */",
 "/**
	 * Adds a message to the log. Replacement values must be passed in to be
	 * replaced using [strtr](http://php.net/strtr).
	 *
	 *     $log->add(Log::ERROR, \'Could not locate user: :user\', array(
	 *         \':user\' => $username,
	 *     ));
	 *
	 * @param   string  level of message
	 * @param   string  message body
	 * @param   array   values to replace in the message
	 * @return  Log
	 */",
 "/**
	 * Write and clear all of the messages.
	 *
	 *     $log->write();
	 *
	 * @return  void
	 */",
 "/**
 * Message logging with observer-based log writing.
 *
 * [!!] This class does not support extensions, only additional writers.
 *
 * @package    Kohana
 * @category   Logging
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Loads test files if they cannot be found by kohana
	 * @param <type> $class
	 */",
 "/**
	 * Configures the environment for testing
	 *
	 * Does the following:
	 *
	 * * Loads the phpunit framework (for the web ui)
	 * * Restores exception phpunit error handlers (for cli)
	 * * registeres an autoloader to load test files
	 */",
 "/**
	 * Creates the test suite for kohana
	 *
	 * @return PHPUnit_Framework_TestSuite
	 */",
 "/**
	 * Add files to test suite $suite
	 *
	 * Uses recursion to scan subdirectories
	 *
	 * @param PHPUnit_Framework_TestSuite  $suite   The test suite to add to
	 * @param array                        $files   Array of files to test
	 */",
 "/**
	 * Blacklist a set of files in PHPUnit code coverage
	 *
	 * @param array A set of files to blacklist
	 */",
 "/**
	 * Sets the whitelist
	 *
	 * If no directories are provided then the function\'ll load the whitelist
	 * set in the config file
	 *
	 * @param array $directories Optional directories to whitelist
	 */",
 "/**
	 * Works out the whitelist from the config
	 * Used only on the CLI
	 *
	 * @returns array Array of directories to whitelist
	 */",
 "/**
	 * Recursively whitelists an array of files
	 *
	 * @param array $files Array of files to whitelist
	 */",
 "/**
 * PHPUnit testsuite for kohana application
 *
 * @package    Kohana/UnitTest
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @author	   Paul Banks
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Garbage collection method that cleans any expired
	 * cache entries from the cache.
	 *
	 * @return void
	 */",
 "/**
 * Garbage Collection interface for caches that have no GC methods
 * of their own, such as [Cache_File] and [Cache_Sqlite]. Memory based
 * cache systems clean their own caches periodically.
 *
 * @package    Kohana/Cache
 * @category   Base
 * @version    2.0
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 * @since      3.0.8
 */",
 "/**
 * Object used for caching the results of select queries.  See [Results](/database/results#select-cached) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query/Result
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Compiles an array of JOIN statements into an SQL partial.
	 *
	 * @param   object  Database instance
	 * @param   array   join statements
	 * @return  string
	 */",
 "/**
	 * Compiles an array of conditions into an SQL partial. Used for WHERE
	 * and HAVING.
	 *
	 * @param   object  Database instance
	 * @param   array   condition statements
	 * @return  string
	 */",
 "/**
	 * Compiles an array of set values into an SQL partial. Used for UPDATE.
	 *
	 * @param   object  Database instance
	 * @param   array   updated values
	 * @return  string
	 */",
 "/**
	 * Compiles an array of GROUP BY columns into an SQL partial.
	 *
	 * @param   object  Database instance
	 * @param   array   columns
	 * @return  string
	 */",
 "/**
	 * Compiles an array of ORDER BY statements into an SQL partial.
	 *
	 * @param   object  Database instance
	 * @param   array   sorting columns
	 * @return  string
	 */",
 "/**
	 * Reset the current builder status.
	 *
	 * @return  $this
	 */",
 "/**
 * Database query builder. See [Query Builder](/database/query/builder) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
 * Database exceptions.
 *
 * @package    Kohana/Database
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Tries to load the specificed configuration group
	 *
	 * Returns FALSE if group does not exist or an array if it does
	 *
	 * @param  string $group Configuration group
	 * @return boolean|array
	 */",
 "/**
	 * Writes the passed config for $group
	 *
	 * Returns chainable instance on success or throws 
	 * Kohana_Config_Exception on failure
	 *
	 * @param string      $group  The config group
	 * @param string      $key    The config key to write to
	 * @param array       $config The configuration to write
	 * @return boolean
	 */",
 "/**
	 * Insert the config values into the table
	 *
	 * @param string      $group  The config group
	 * @param string      $key    The config key to write to
	 * @param array       $config The serialized configuration to write
	 * @return boolean
	 */",
 "/**
	 * Update the config values in the table
	 *
	 * @param string      $group  The config group
	 * @param string      $key    The config key to write to
	 * @param array       $config The serialized configuration to write
	 * @return boolean
	 */",
 "/**
 * Database writer for the config system
 *
 * @package    Kohana
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
 * UTF8::strrpos
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Sets or gets the HTTP status from this response.
	 *
	 *      // Set the HTTP status to 404 Not Found
	 *      $response = Response::factory()
	 *              ->status(404);
	 *
	 *      // Get the current status
	 *      $status = $response->status();
	 *
	 * @param   integer  $code  Status to set to this response
	 * @return  mixed
	 */",
 "/**
 * A HTTP Reponse specific interface that adds the methods required
 * by HTTP responses. Over and above [Kohana_HTTP_Interaction], this
 * interface provides status.
 *
 * @package    Kohana
 * @category   HTTP
 * @author     Kohana Team
 * @since      3.1.0
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Returns one or more command-line options. Options are specified using
	 * standard CLI syntax:
	 *
	 *     php index.php --username=john.smith --password=secret --var=\"some value with spaces\"
	 *
	 *     // Get the values of \"username\" and \"password\"
	 *     $auth = CLI::options(\'username\', \'password\');
	 *
	 * @param   string  option name
	 * @param   ...
	 * @return  array
	 */",
 "/**
 * Helper functions for working in a command-line environment.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Writes the passed config for $group
	 *
	 * Returns chainable instance on success or throws 
	 * Kohana_Config_Exception on failure
	 *
	 * @param string      $group  The config group
	 * @param string      $key    The config key to write to
	 * @param array       $config The configuration to write
	 * @return boolean
	 */",
 "/**
 * Interface for config writers
 *
 * Specifies the methods that a config writer must implement 
 * 
 * @package Kohana
 * @author  Kohana Team
 * @copyright  (c) 2008-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Attempt to get the mime type from a file. This method is horribly
	 * unreliable, due to PHP being horribly unreliable when it comes to
	 * determining the mime type of a file.
	 *
	 *     $mime = File::mime($file);
	 *
	 * @param   string  file name or path
	 * @return  string  mime type on success
	 * @return  FALSE   on failure
	 */",
 "/**
	 * Return the mime type of an extension.
	 *
	 *     $mime = File::mime_by_ext(\'png\'); // \"image/png\"
	 *
	 * @param   string  extension: php, pdf, txt, etc
	 * @return  string  mime type on success
	 * @return  FALSE   on failure
	 */",
 "/**
	 * Lookup MIME types for a file
	 *
	 * @see Kohana_File::mime_by_ext()
	 * @param string $extension Extension to lookup
	 * @return array Array of MIMEs associated with the specified extension
	 */",
 "/**
	 * Lookup file extensions by MIME type
	 *
	 * @param   string  $type File MIME type
	 * @return  array   File extensions matching MIME type
	 */",
 "/**
	 * Lookup a single file extension by MIME type.
	 *
	 * @param   string  $type  MIME type to lookup
	 * @return  mixed          First file extension matching or false
	 */",
 "/**
	 * Split a file into pieces matching a specific size. Used when you need to
	 * split large files into smaller pieces for easy transmission.
	 *
	 *     $count = File::split($file);
	 *
	 * @param   string   file to be split
	 * @param   string   directory to output to, defaults to the same directory as the file
	 * @param   integer  size, in MB, for each piece to be
	 * @return  integer  The number of pieces that were created
	 */",
 "/**
	 * Join a split file into a whole file. Does the reverse of [File::split].
	 *
	 *     $count = File::join($file);
	 *
	 * @param   string   split filename, without .000 extension
	 * @param   string   output filename, if different then an the filename
	 * @return  integer  The number of pieces that were joined.
	 */",
 "/**
 * File helper class.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Constructs the group object.  Kohana_Config passes the config group 
	 * and its config items to the object here.
	 *
	 * @param Kohana_Config  $instance \"Owning\" instance of Kohana_Config
	 * @param string         $group    The group name
	 * @param array          $config   Group\'s config
	 */",
 "/**
	 * Return the current group in serialized form.
	 *
	 *     echo $config;
	 *
	 * @return  string
	 */",
 "/**
	 * Alias for getArrayCopy()
	 *
	 * @return array Array copy of the group\'s config
	 */",
 "/**
	 * Returns the config group\'s name
	 *
	 * @return string The group name
	 */",
 "/**
	 * Get a variable from the configuration or return the default value.
	 *
	 *     $value = $config->get($key);
	 *
	 * @param   string   array key
	 * @param   mixed    default value
	 * @return  mixed
	 */",
 "/**
	 * Sets a value in the configuration array.
	 *
	 *     $config->set($key, $new_value);
	 *
	 * @param   string   array key
	 * @param   mixed    array value
	 * @return  $this
	 */",
 "/**
	 * Overrides ArrayObject::offsetSet()
	 * This method is called when config is changed via 
	 *
	 *     $config->var = \'asd\';
	 *
	 *     // OR
	 *
	 *     $config[\'var\'] = \'asd\';
	 *
	 * @param string $key   The key of the config item we\'re changing
	 * @param mixed  $value The new array value
	 */",
 "/**
 * The group wrapper acts as an interface to all the config directives
 * gathered from across the system.
 *
 * This is the object returned from Kohana_Config::load 
 *
 * Any modifications to configuration items should be done through an instance of this object
 *
 * @package    Kohana
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Returns an HTML string of debugging information about any number of
	 * variables, each wrapped in a \"pre\" tag:
	 *
	 *     // Displays the type and value of each variable
	 *     echo Debug::vars($foo, $bar, $baz);
	 *
	 * @param   mixed   variable to debug
	 * @param   ...
	 * @return  string
	 */",
 "/**
	 * Returns an HTML string of information about a single variable.
	 *
	 * Borrows heavily on concepts from the Debug class of [Nette](http://nettephp.com/).
	 *
	 * @param   mixed    variable to dump
	 * @param   integer  maximum length of strings
	 * @param   integer  recursion limit
	 * @return  string
	 */",
 "/**
	 * Helper for Debug::dump(), handles recursion in arrays and objects.
	 *
	 * @param   mixed    variable to dump
	 * @param   integer  maximum length of strings
	 * @param   integer  recursion limit
	 * @param   integer  current recursion level (internal usage only!)
	 * @return  string
	 */",
 "/**
	 * Removes application, system, modpath, or docroot from a filename,
	 * replacing them with the plain text equivalents. Useful for debugging
	 * when you want to display a shorter path.
	 *
	 *     // Displays SYSPATH/classes/kohana.php
	 *     echo Debug::path(Kohana::find_file(\'classes\', \'kohana\'));
	 *
	 * @param   string  path to debug
	 * @return  string
	 */",
 "/**
	 * Returns an HTML string, highlighting a specific line of a file, with some
	 * number of lines padded above and below.
	 *
	 *     // Highlights the current line of the current file
	 *     echo Debug::source(__FILE__, __LINE__);
	 *
	 * @param   string   file to open
	 * @param   integer  line number to highlight
	 * @param   integer  number of padding lines
	 * @return  string   source of file
	 * @return  FALSE    file is unreadable
	 */",
 "/**
	 * Returns an array of HTML strings that represent each step in the backtrace.
	 *
	 *     // Displays the entire current backtrace
	 *     echo implode(\'<br/>\', Debug::trace());
	 *
	 * @param   string  path to debug
	 * @return  string
	 */",
 "/**
 * Contains debugging and dumping tools.
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * UTF8::from_unicode
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Factory method to create a new Request_Client_External object based on
	 * the client name passed, or defaulting to Request_Client_External::$client
	 * by default.
	 * 
	 * Request_Client_External::$client can be set in the application bootstrap.
	 *
	 * @param   array     parameters to pass to the client
	 * @param   string    external client to use
	 * @return  Request_Client_External
	 * @throws  Request_Exception
	 */",
 "/**
	 * Processes the request, executing the controller action that handles this
	 * request, determined by the [Route].
	 *
	 * 1. Before the controller action is called, the [Controller::before] method
	 * will be called.
	 * 2. Next the controller action will be called.
	 * 3. After the controller action is called, the [Controller::after] method
	 * will be called.
	 *
	 * By default, the output from the controller is captured and returned, and
	 * no headers are sent.
	 *
	 *     $request->execute();
	 *
	 * @param   Request $request A request object
	 * @return  Response
	 * @throws  Kohana_Exception
	 * @uses    [Kohana::$profiling]
	 * @uses    [Profiler]
	 */",
 "/**
	 * Set and get options for this request.
	 *
	 * @param   mixed    $key    Option name, or array of options
	 * @param   mixed    $value  Option value
	 * @return  mixed
	 * @return  Request_Client_External
	 */",
 "/**
	 * Sends the HTTP message [Request] to a remote server and processes
	 * the response.
	 *
	 * @param   Request   request to send
	 * @return  Response
	 */",
 "/**
 * [Request_Client_External] provides a wrapper for all external request
 * processing. This class should be extended by all drivers handling external
 * requests.
 * 
 * Supported out of the box:
 *  - Curl (default)
 *  - PECL HTTP
 *  - Streams
 * 
 * To select a specific external driver to use as the default driver, set the
 * following property within the Application bootstrap. Alternatively, the
 * client can be injected into the request object.
 * 
 * @example
 * 
 *       // In application bootstrap
 *       Request_Client_External::$client = \'Request_Client_Stream\';
 * 
 *       // Add client to request
 *       $request = Request::factory(\'http://some.host.tld/foo/bar\')
 *           ->client(Request_Client_External::factory(\'Request_Client_HTTP));
 * 
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 * @uses       [PECL HTTP](http://php.net/manual/en/book.http.php)
 */",
 "/**
	 * Loads the template [View] object.
	 */",
 "/**
	 * Assigns the template [View] as the request response.
	 */",
 "/**
 * Abstract controller class for automatic templating.
 *
 * @package    Kohana
 * @category   Controller
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Singleton pattern
	 *
	 * @return Auth
	 */",
 "/**
	 * Loads Session and configuration options.
	 *
	 * @return  void
	 */",
 "/**
	 * Gets the currently logged in user from the session.
	 * Returns NULL if no user is currently logged in.
	 *
	 * @return  mixed
	 */",
 "/**
	 * Attempt to log in a user by using an ORM object and plain-text password.
	 *
	 * @param   string   username to log in
	 * @param   string   password to check against
	 * @param   boolean  enable autologin
	 * @return  boolean
	 */",
 "/**
	 * Log out a user by removing the related session variables.
	 *
	 * @param   boolean  completely destroy the session
	 * @param   boolean  remove all tokens for user
	 * @return  boolean
	 */",
 "/**
	 * Check if there is an active session. Optionally allows checking for a
	 * specific role.
	 *
	 * @param   string   role name
	 * @return  mixed
	 */",
 "/**
	 * Creates a hashed hmac password from a plaintext password. This
	 * method is deprecated, [Auth::hash] should be used instead.
	 *
	 * @deprecated
	 * @param   string  plaintext password
	 */",
 "/**
	 * Perform a hmac hash, using the configured method.
	 *
	 * @param   string  string to hash
	 * @return  string
	 */",
 "/**
 * User authorization library. Handles user login and logout, as well as secure
 * password hashing.
 *
 * @package    Kohana/Auth
 * @author     Kohana Team
 * @copyright  (c) 2007-2010 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates a new file logger. Checks that the directory exists and
	 * is writable.
	 *
	 *     $writer = new Log_File($directory);
	 *
	 * @param   string  log directory
	 * @return  void
	 */",
 "/**
	 * Writes each of the messages into the log file. The log file will be
	 * appended to the `YYYY/MM/DD.log.php` file, where YYYY is the current
	 * year, MM is the current month, and DD is the current day.
	 *
	 *     $writer->write($messages);
	 *
	 * @param   array   messages
	 * @return  void
	 */",
 "/**
 * File log writer. Writes out messages and stores them in a YYYY/MM directory.
 *
 * @package    Kohana
 * @category   Logging
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Tests that an initial request won\'t use an external client
	 * 
	 * @expectedException HTTP_Exception_404
	 *
	 * @return null
	 */",
 "/**
	 * Tests that with an empty request, cli requests are routed properly
	 *
	 * @return null
	 */",
 "/**
	 * Provides the data for test_create()
	 * @return  array
	 */",
 "/**
	 * Ensures the create class is created with the correct client
	 *
	 * @test
	 * @dataProvider provider_create
	 */",
 "/**
	 * Ensure that parameters can be read
	 *
	 * @test
	 */",
 "/**
	 * Provides data for Request::create_response()
	 */",
 "/**
	 * Ensures a request creates an empty response, and binds correctly
	 *
	 * @test
	 * @dataProvider  provider_create_response
	 */",
 "/**
	 * Tests Request::response()
	 *
	 * @test
	 */",
 "/**
	 * Tests Request::method()
	 *
	 * @test
	 */",
 "/**
	 * Tests Request::route()
	 *
	 * @test
	 */",
 "/**
	 * Tests Request::accept_type()
	 *
	 * @test
	 * @covers Request::accept_type
	 */",
 "/**
	 * Provides test data for Request::accept_lang()
	 * @return array
	 */",
 "/**
	 * Tests Request::accept_lang()
	 *
	 * @test
	 * @covers Request::accept_lang
	 * @dataProvider provider_accept_lang
	 * @param array $params Query string
	 * @param string $expected Expected result
	 * @param array $enviroment Set environment
	 */",
 "/**
	 * Provides test data for Request::url()
	 * @return array
	 */",
 "/**
	 * Tests Request::url()
	 *
	 * @test
	 * @dataProvider provider_url
	 * @covers Request::url
	 * @param string $route the route to use
	 * @param array $params params to pass to route::uri
	 * @param string $protocol the protocol to use
	 * @param array $expected The string we expect
	 */",
 "/**
	 * Data provider for test_set_protocol() test
	 *
	 * @return array
	 */",
 "/**
	 * Tests the protocol() method
	 *
	 * @dataProvider provider_set_protocol
	 *
	 * @return null
	 */",
 "/**
	 * Provides data for test_post_max_size_exceeded()
	 * 
	 * @return  array
	 */",
 "/**
	 * Tests the post_max_size_exceeded() method
	 * 
	 * @dataProvider provider_post_max_size_exceeded
	 *
	 * @param   int      content_length 
	 * @param   bool     expected 
	 * @return  void
	 */",
 "/**
	 * Provides data for test_uri_only_trimed_on_internal()
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that the uri supplied to Request is only trimed
	 * for internal requests.
	 * 
	 * @dataProvider provider_uri_only_trimed_on_internal
	 *
	 * @return void
	 */",
 "/**
	 * Data provider for test_options_set_to_external_client()
	 *
	 * @return  array
	 */",
 "/**
	 * Test for Request_Client_External::options() to ensure options
	 * can be set to the external client (for cURL and PECL_HTTP)
	 *
	 * @dataProvider provider_options_set_to_external_client
	 * 
	 * @param   array    settings 
	 * @param   array    expected 
	 * @return void
	 */",
 "/**
	 * Provides data for test_headers_get()
	 *
	 * @return  array
	 */",
 "/**
	 * Tests getting headers from the Request object
	 * 
	 * @dataProvider provider_headers_get
	 *
	 * @param   Request  request to test
	 * @param   array    headers to test against
	 * @return  void
	 */",
 "/**
	 * Provides data for test_headers_set
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the setting of headers to the request object
	 * 
	 * @dataProvider provider_headers_set
	 *
	 * @param   Request    request object
	 * @param   array      header(s) to set to the request object
	 * @param   string     expected http header
	 * @return  void
	 */",
 "/**
	 * Provides test data for test_query_parameter_parsing()
	 *
	 * @return  array
	 */",
 "/**
	 * Tests that query parameters are parsed correctly
	 * 
	 * @dataProvider provider_query_parameter_parsing
	 *
	 * @param   Request   request 
	 * @param   array     query 
	 * @param   array    expected 
	 * @return  void
	 */",
 "/**
	 * Provides data for test_client
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the getter/setter for request client
	 * 
	 * @dataProvider provider_client
	 *
	 * @param   Request $request 
	 * @param   Request_Client $client 
	 * @param   Request_Client $expected 
	 * @return  void
	 */",
 "/**
 * Unit tests for request class
 *
 * @group kohana
 * @group kohana.request
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates a new JOIN statement for a table. Optionally, the type of JOIN
	 * can be specified as the second parameter.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  type of JOIN: INNER, RIGHT, LEFT, etc
	 * @return  void
	 */",
 "/**
	 * Adds a new condition for joining.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column name or array($column, $alias) or object
	 * @return  $this
	 */",
 "/**
	 * Adds a new condition for joining.
	 *
	 * @param   string  column name
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Compile the SQL partial for a JOIN statement and return it.
	 *
	 * @param   object  Database instance
	 * @return  string
	 */",
 "/**
 * Database query builder for JOIN statements. See [Query Builder](/database/query/builder) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Sends the HTTP message [Request] to a remote server and processes
	 * the response.
	 *
	 * @param   Request   request to send
	 * @return  Response
	 * @uses    [PHP cURL](http://php.net/manual/en/book.curl.php)
	 */",
 "/**
 * [Request_Client_External] Stream driver performs external requests using php
 * sockets. To use this driver, ensure the following is completed
 * before executing an external request- ideally in the application bootstrap.
 * 
 * @example
 * 
 *       // In application bootstrap
 *       Request_Client_External::$client = \'Request_Client_Stream\';
 * 
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 * @uses       [PHP Streams](http://php.net/manual/en/book.stream.php)
 */",
 "/**
	 * Processes the request, executing the controller action that handles this
	 * request, determined by the [Route].
	 *
	 * 1. Before the controller action is called, the [Controller::before] method
	 * will be called.
	 * 2. Next the controller action will be called.
	 * 3. After the controller action is called, the [Controller::after] method
	 * will be called.
	 *
	 * By default, the output from the controller is captured and returned, and
	 * no headers are sent.
	 *
	 *     $request->execute();
	 *
	 * @param   Request $request
	 * @return  Response
	 * @throws  Kohana_Exception
	 * @uses    [Kohana::$profiling]
	 * @uses    [Profiler]
	 * @deprecated passing $params to controller methods deprecated since version 3.1
	 *             will be removed in 3.2
	 */",
 "/**
 * Request Client for internal execution
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 * @since      3.1.0
 */",
 "/**
 * UTF8::transliterate_to_ascii
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * SetUp test enviroment
	 */",
 "/**
	 * Tear down environment
	 */",
 "/**
	 * Provides test data for test_bytes()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Num::bytes()
	 *
	 * @test
	 * @covers Num::bytes
	 * @dataProvider provider_bytes
	 * @param integer Expected Value
	 * @param string  Input value
	 */",
 "/**
	 * Provides test data for test_ordinal()
	 * @return array
	 */",
 "/**
	 *
	 * @test
	 * @dataProvider provider_ordinal
	 * @param integer $number
	 * @param <type> $expected
	 */",
 "/**
	 * Provides test data for test_format()
	 * @return array
	 */",
 "/**
	 * @todo test locales
	 * @test
	 * @dataProvider provider_format
	 * @param integer $number
	 * @param integer $places
	 * @param boolean $monetary
	 * @param string $expected
	 */",
 "/**
	 * Provides data for test_round()
	 * @return array
	 */",
 "/**
	 * @test
	 * @dataProvider provider_round
	 * @param number $input
	 * @param integer $precision
	 * @param integer $mode
	 * @param number $expected
	 */",
 "/**
 * Tests Num
 *
 * @group      kohana
 * @group      kohana.num
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * UTF8::strcspn
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Parses an Accept(-*) header and detects the quality
	 *
	 * @param   array    accept header parts
	 * @return  array
	 * @since   3.2.0
	 */",
 "/**
	 * Parses the accept header to provide the correct quality values
	 * for each supplied accept type.
	 *
	 * @see     http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1
	 * @param   string   accept content header string to parse
	 * @return  array
	 * @since   3.2.0
	 */",
 "/**
	 * Parses the `Accept-Charset:` HTTP header and returns an array containing
	 * the charset and associated quality.
	 *
	 * @link    http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2
	 * @param   string   charset string to parse
	 * @return  array 
	 * @since   3.2.0
	 */",
 "/**
	 * Parses the `Accept-Encoding:` HTTP header and returns an array containing
	 * the charsets and associated quality.
	 *
	 * @link    http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3
	 * @param   string   charset string to parse
	 * @return  array 
	 * @since   3.2.0
	 */",
 "/**
	 * Parses the `Accept-Language:` HTTP header and returns an array containing
	 * the languages and associated quality.
	 *
	 * @link    http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4
	 * @param   string   charset string to parse
	 * @return  array 
	 * @since   3.2.0
	 */",
 "/**
	 * Generates a Cache-Control HTTP header based on the supplied array.
	 *
	 *     // Set the cache control headers you want to use
	 *     $cache_control = array(
	 *         \'max-age\'          => 3600,
	 *         \'must-revalidate\',
	 *         \'public\'
	 *     );
	 *
	 *     // Create the cache control header, creates :
	 *     // cache-control: max-age=3600, must-revalidate, public
	 *     $response->headers(\'Cache-Control\', HTTP_Header::create_cache_control($cache_control);
	 *
	 * @link    http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13
	 * @param   array     Cache-Control to render to string
	 * @return  string
	 */",
 "/**
	 * Parses the Cache-Control header and returning an array representation of the Cache-Control
	 * header.
	 *
	 *     // Create the cache control header
	 *     $response->headers(\'cache-control\', \'max-age=3600, must-revalidate, public\');
	 *
	 *     // Parse the cache control header
	 *     if ($cache_control = HTTP_Header::parse_cache_control($response->headers(\'cache-control\')))
	 *     {
	 *          // Cache-Control header was found
	 *          $maxage = $cache_control[\'max-age\'];
	 *     }
	 *
	 * @param   array   $cache_control Array of headers
	 * @return  mixed
	 */",
 "/**
		 * @link http://www.w3.org/Protocols/rfc2616/rfc2616.html
		 *
		 * HTTP header declarations should be treated as case-insensitive
		 */",
 "/**
	 * Constructor method for [Kohana_HTTP_Header]. Uses the standard constructor
	 * of the parent `ArrayObject` class.
	 *
	 *     $header_object = new HTTP_Header(array(\'x-powered-by\' => \'Kohana 3.1.x\', \'expires\' => \'...\'));
	 *
	 * @param   mixed    Input array
	 * @param   int      Flags
	 * @param   string   The iterator class to use
	 */",
 "/**
	 * Returns the header object as a string, including
	 * the terminating new line
	 *
	 *     // Return the header as a string
	 *     echo (string) $request->headers();
	 *
	 * @return  string
	 */",
 "/**
	 * Overloads `ArrayObject::offsetSet()` to enable handling of header
	 * with multiple instances of the same directive. If the `$replace` flag
	 * is `FALSE`, the header will be appended rather than replacing the
	 * original setting.
	 *
	 * @param   mixed     index to set `$newval` to
	 * @param   mixed     new value to set
	 * @param   boolean   replace existing value
	 * @return  void
	 * @since   3.2.0
	 */",
 "/**
	 * Overloads the `ArrayObject::offsetExists()` method to ensure keys
	 * are lowercase.
	 *
	 * @param   string $index 
	 * @return  boolean
	 * @since   3.2.0
	 */",
 "/**
	 * Overloads the `ArrayObject::offsetUnset()` method to ensure keys
	 * are lowercase.
	 *
	 * @param   string   index 
	 * @return  void
	 * @since   3.2.0
	 */",
 "/**
	 * Overload the `ArrayObject::offsetGet()` method to ensure that all
	 * keys passed to it are formatted correctly for this object.
	 *
	 * @param   string   index to retrieve
	 * @return  mixed
	 * @since   3.2.0
	 */",
 "/**
	 * Parses a HTTP Message header line and applies it to this HTTP_Header
	 * 
	 *     $header = $response->headers();
	 *     $header->parse_header_string(NULL, \'content-type: application/json\');
	 *
	 * @param   resource  the resource (required by Curl API)
	 * @param   string    the line from the header to parse
	 * @return  int
	 * @since   3.2.0
	 */",
 "/**
	 * Returns the accept quality of a submitted mime type based on the
	 * request `Accept:` header. If the `$explicit` argument is `TRUE`,
	 * only precise matches will be returned, excluding all wildcard (`*`)
	 * directives.
	 * 
	 *     // Accept: application/xml; application/json; q=.5; text/html; q=.2, text/*
	 *     // Accept quality for application/json
	 * 
	 *     // $quality = 0.5
	 *     $quality = $request->headers()->accepts_at_quality(\'application/json\');
	 * 
	 *     // $quality_explicit = FALSE
	 *     $quality_explicit = $request->headers()->accepts_at_quality(\'text/plain\', TRUE);
	 *
	 * @param   string   type 
	 * @param   boolean  explicit check, excludes `*`
	 * @return  mixed
	 * @since   3.2.0
	 */",
 "/**
	 * Returns the preferred response content type based on the accept header
	 * quality settings. If items have the same quality value, the first item
	 * found in the array supplied as `$types` will be returned.
	 * 
	 *     // Get the preferred acceptable content type
	 *     // Accept: text/html, application/json; q=.8, text/*
	 *     $result = $header->preferred_accept(array(
	 *         \'text/html\'
	 *         \'text/rtf\',
	 *         \'application/json\'
	 *     )); // $result = \'application/json\'
	 * 
	 *     $result = $header->preferred_accept(array(
	 *         \'text/rtf\',
	 *         \'application/xml\'
	 *     ), TRUE); // $result = FALSE (none matched explicitly)
	 * 
	 *
	 * @param   array    the content types to examine
	 * @param   boolean  only allow explicit references, no wildcards
	 * @return  string   name of the preferred content type
	 * @since   3.2.0
	 */",
 "/**
	 * Returns the quality of the supplied `$charset` argument. This method
	 * will automatically parse the `Accept-Charset` header if present and
	 * return the associated resolved quality value.
	 * 
	 *      // Accept-Charset: utf-8, utf-16; q=.8, iso-8859-1; q=.5
	 *      $quality = $header->accepts_charset_at_quality(\'utf-8\');
	 *            // $quality = (float) 1
	 *
	 * @param   string   charset to examine
	 * @return  float    the quality of the charset 
	 * @since   3.2.0
	 */",
 "/**
	 * Returns the preferred charset from the supplied array `$charsets` based
	 * on the `Accept-Charset` header directive.
	 * 
	 *      // Accept-Charset: utf-8, utf-16; q=.8, iso-8859-1; q=.5
	 *      $charset = $header->preferred_charset(array(
	 *          \'utf-10\', \'ascii\', \'utf-16\', \'utf-8\'
	 *      )); // $charset = \'utf-8\'
	 *
	 * @param   array    charsets to test
	 * @return  mixed    preferred charset or `FALSE`
	 * @since   3.2.0
	 */",
 "/**
	 * Returns the quality of the `$encoding` type passed to it. Encoding
	 * is usually compression such as `gzip`, but could be some other
	 * message encoding algorithm. This method allows explicit checks to be
	 * done ignoring wildcards.
	 * 
	 *      // Accept-Encoding: compress, gzip, *; q=.5
	 *      $encoding = $header->accepts_encoding_at_quality(\'gzip\');
	 *      // $encoding = (float) 1.0s
	 *
	 * @param   string    encoding type to interrogate
	 * @param   boolean   explicit check, ignoring wildcards and `identity`
	 * @return  float
	 * @since   3.2.0
	 */",
 "/**
	 * Returns the preferred message encoding type based on quality, and can
	 * optionally ignore wildcard references. If two or more encodings have the
	 * same quality, the first listed in `$encodings` will be returned.
	 * 
	 *     // Accept-Encoding: compress, gzip, *; q.5
	 *     $encoding = $header->preferred_encoding(array(
	 *          \'gzip\', \'bzip\', \'blowfish\'
	 *     ));
	 *     // $encoding = \'gzip\';
	 *
	 * @param   array    encodings to test against
	 * @param   boolean  explicit check, if `TRUE` wildcards are excluded
	 * @return  mixed
	 * @since   3.2.0
	 */",
 "/**
	 * Returns the quality of `$language` supplied, optionally ignoring
	 * wildcards if `$explicit` is set to a non-`FALSE` value. If the quality
	 * is not found, `0.0` is returned.
	 * 
	 *     // Accept-Language: en-us, en-gb; q=.7, en; q=.5
	 *     $lang = $header->accepts_language_at_quality(\'en-gb\');
	 *     // $lang = (float) 0.7
	 * 
	 *     $lang2 = $header->accepts_language_at_quality(\'en-au\');
	 *     // $lang2 = (float) 0.5
	 * 
	 *     $lang3 = $header->accepts_language_at_quality(\'en-au\', TRUE);
	 *     // $lang3 = (float) 0.0
	 *
	 * @param   string    language to interrogate
	 * @param   boolean   explicit interrogation, `TRUE` ignores wildcards
	 * @return  float
	 * @since   3.2.0
	 */",
 "/**
	 * Returns the preferred language from the supplied array `$languages` based
	 * on the `Accept-Language` header directive.
	 * 
	 *      // Accept-Language: en-us, en-gb; q=.7, en; q=.5
	 *      $lang = $header->preferred_language(array(
	 *          \'en-gb\', \'en-au\', \'fr\', \'es\'
	 *      )); // $lang = \'en-gb\'
	 *
	 * @param   array     languages 
	 * @param   boolean   explicit 
	 * @return  mixed
	 * @since   3.2.0
	 */",
 "/**
	 * Sends headers to the php processor, or supplied `$callback` argument.
	 * This method formats the headers correctly for output, re-instating their
	 * capitalization for transmission.
	 * 
	 * [!!] if you supply a custom header handler via `$callback`, it is
	 *  recommended that `$response` is returned
	 *
	 * @param   HTTP_Response header to send
	 * @param   boolean   replace existing value
	 * @param   callback  optional callback to replace PHP header function
	 * @return  mixed
	 * @since   3.2.0
	 */",
 "/**
	 * Sends the supplied headers to the PHP output buffer. If cookies
	 * are included in the message they will be handled appropriately.
	 *
	 * @param   array     headers to send to php
	 * @param   boolean   replace existing headers
	 * @return  self
	 * @since   3.2.0
	 */",
 "/**
 * The Kohana_HTTP_Header class provides an Object-Orientated interface
 * to HTTP headers. This can parse header arrays returned from the
 * PHP functions `apache_request_headers()` or the `http_parse_headers()`
 * function available within the PECL HTTP library.
 *
 * @package    Kohana
 * @category   HTTP
 * @author     Kohana Team
 * @since      3.1.0
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Provides test data for test_open()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::open()
	 *
	 * @test
	 * @dataProvider provider_open
	 * @param boolean $input  Input for Form::open
	 * @param boolean $expected Output for Form::open
	 */",
 "/**
	 * Tests Form::close()
	 *
	 * @test
	 */",
 "/**
	 * Provides test data for test_input()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::input()
	 *
	 * @test
	 * @dataProvider provider_input
	 * @param boolean $input  Input for Form::input
	 * @param boolean $expected Output for Form::input
	 */",
 "/**
	 * Provides test data for test_file()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::file()
	 *
	 * @test
	 * @dataProvider provider_file
	 * @param boolean $input  Input for Form::file
	 * @param boolean $expected Output for Form::file
	 */",
 "/**
	 * Provides test data for test_check()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::check()
	 *
	 * @test
	 * @dataProvider provider_check
	 * @param boolean $input  Input for Form::check
	 * @param boolean $expected Output for Form::check
	 */",
 "/**
	 * Provides test data for test_text()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::textarea()
	 *
	 * @test
	 * @dataProvider provider_text
	 * @param boolean $input  Input for Form::textarea
	 * @param boolean $expected Output for Form::textarea
	 */",
 "/**
	 * Provides test data for test_select()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::select()
	 *
	 * @test
	 * @dataProvider provider_select
	 * @param boolean $input  Input for Form::select
	 * @param boolean $expected Output for Form::select
	 */",
 "/**
	 * Provides test data for test_submit()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::submit()
	 *
	 * @test
	 * @dataProvider provider_submit
	 * @param boolean $input  Input for Form::submit
	 * @param boolean $expected Output for Form::submit
	 */",
 "/**
	 * Provides test data for test_image()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::image()
	 *
	 * @test
	 * @dataProvider provider_image
	 * @param boolean $name         Input for Form::image
	 * @param boolean $value        Input for Form::image
	 * @param boolean $attributes  Input for Form::image
	 * @param boolean $expected    Output for Form::image
	 */",
 "/**
	 * Provides test data for test_label()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Form::label()
	 *
	 * @test
	 * @dataProvider provider_label
	 * @param boolean $for         Input for Form::label
	 * @param boolean $text        Input for Form::label
	 * @param boolean $attributes  Input for Form::label
	 * @param boolean $expected    Output for Form::label
	 */",
 "/**
 * Tests Kohana Form helper
 *
 * @group kohana
 * @group kohana.form
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Set a value based on an id. Optionally add tags.
	 * 
	 * Note : Some caching engines do not support
	 * tagging
	 *
	 * @param   string   id 
	 * @param   mixed    data 
	 * @param   integer  lifetime [Optional]
	 * @param   array    tags [Optional]
	 * @return  boolean
	 */",
 "/**
	 * Delete cache entries based on a tag
	 *
	 * @param   string   tag 
	 * @param   integer  timeout [Optional]
	 */",
 "/**
	 * Find cache entries based on a tag
	 *
	 * @param   string   tag 
	 * @return  array
	 */",
 "/**
 * Kohana Cache Tagging Interface
 * 
 * @package    Kohana/Cache
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Creates a new translated exception.
	 *
	 *     throw new Kohana_Exception(\'Something went terrible wrong, :user\',
	 *         array(\':user\' => $user));
	 *
	 * @param   string          error message
	 * @param   array           translation variables
	 * @param   integer|string  the exception code
	 * @return  void
	 */",
 "/**
	 * Magic object-to-string method.
	 *
	 *     echo $exception;
	 *
	 * @uses    Kohana_Exception::text
	 * @return  string
	 */",
 "/**
	 * Inline exception handler, displays the error message, source of the
	 * exception, and the stack trace of the error.
	 *
	 * @uses    Kohana_Exception::text
	 * @param   object   exception object
	 * @return  boolean
	 */",
 "/**
	 * Get a single line of text representing the exception:
	 *
	 * Error [ Code ]: Message ~ File [ Line ]
	 *
	 * @param   object  Exception
	 * @return  string
	 */",
 "/**
 * Kohana exception class. Translates exceptions using the [I18n] class.
 *
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Constructs the memcache Kohana_Cache object
	 *
	 * @param   array     configuration
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Retrieve a cached value entry by id.
	 * 
	 *     // Retrieve cache entry from memcache group
	 *     $data = Cache::instance(\'memcache\')->get(\'foo\');
	 * 
	 *     // Retrieve cache entry from memcache group and return \'bar\' if miss
	 *     $data = Cache::instance(\'memcache\')->get(\'foo\', \'bar\');
	 *
	 * @param   string   id of cache to entry
	 * @param   string   default value to return if cache miss
	 * @return  mixed
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Set a value to cache with id and lifetime
	 * 
	 *     $data = \'bar\';
	 * 
	 *     // Set \'bar\' to \'foo\' in memcache group for 10 minutes
	 *     if (Cache::instance(\'memcache\')->set(\'foo\', $data, 600))
	 *     {
	 *          // Cache was set successfully
	 *          return
	 *     }
	 *
	 * @param   string   id of cache entry
	 * @param   mixed    data to set to cache
	 * @param   integer  lifetime in seconds, maximum value 2592000
	 * @return  boolean
	 */",
 "/**
	 * Delete a cache entry based on id
	 * 
	 *     // Delete the \'foo\' cache entry immediately
	 *     Cache::instance(\'memcache\')->delete(\'foo\');
	 * 
	 *     // Delete the \'bar\' cache entry after 30 seconds
	 *     Cache::instance(\'memcache\')->delete(\'bar\', 30);
	 *
	 * @param   string   id of entry to delete
	 * @param   integer  timeout of entry, if zero item is deleted immediately, otherwise the item will delete after the specified value in seconds
	 * @return  boolean
	 */",
 "/**
	 * Delete all cache entries.
	 * 
	 * Beware of using this method when
	 * using shared memory cache systems, as it will wipe every
	 * entry within the system for all clients.
	 * 
	 *     // Delete all cache entries in the default group
	 *     Cache::instance(\'memcache\')->delete_all();
	 *
	 * @return  boolean
	 */",
 "/**
	 * Callback method for Memcache::failure_callback to use if any Memcache call
	 * on a particular server fails. This method switches off that instance of the
	 * server if the configuration setting `instant_death` is set to `TRUE`.
	 *
	 * @param   string   hostname 
	 * @param   integer  port 
	 * @return  void|boolean
	 * @since   3.0.8
	 */",
 "/**
	 * Increments a given value by the step value supplied.
	 * Useful for shared counters and other persistent integer based
	 * tracking.
	 *
	 * @param   string    id of cache entry to increment
	 * @param   int       step value to increment by
	 * @return  integer
	 * @return  boolean
	 */",
 "/**
	 * Decrements a given value by the step value supplied.
	 * Useful for shared counters and other persistent integer based
	 * tracking.
	 *
	 * @param   string    id of cache entry to decrement
	 * @param   int       step value to decrement by
	 * @return  integer
	 * @return  boolean
	 */",
 "/**
 * [Kohana Cache](api/Kohana_Cache) Memcache driver,
 * 
 * ### Supported cache engines
 * 
 * *  [Memcache](http://www.php.net/manual/en/book.memcache.php)
 * *  [Memcached-tags](http://code.google.com/p/memcached-tags/)
 * 
 * ### Configuration example
 * 
 * Below is an example of a _memcache_ server configuration.
 * 
 *     return array(
 *          \'default\'   => array(                          // Default group
 *                  \'driver\'         => \'memcache\',        // using Memcache driver
 *                  \'servers\'        => array(             // Available server definitions
 *                         // First memcache server server
 *                         array(
 *                              \'host\'             => \'localhost\',
 *                              \'port\'             => 11211,
 *                              \'persistent\'       => FALSE
 *                              \'weight\'           => 1,
 *                              \'timeout\'          => 1,
 *                              \'retry_interval\'   => 15,
 *                              \'status\'           => TRUE,
 *				\'instant_death\'	   => TRUE,
 *                              \'failure_callback\' => array(\'className\', \'classMethod\')
 *                         ),
 *                         // Second memcache server
 *                         array(
 *                              \'host\'             => \'192.168.1.5\',
 *                              \'port\'             => 22122,
 *                              \'persistent\'       => TRUE
 *                         )
 *                  ),
 *                  \'compression\'    => FALSE,             // Use compression?
 *           ),
 *     )
 * 
 * In cases where only one cache group is required, if the group is named `default` there is
 * no need to pass the group name when instantiating a cache instance.
 * 
 * #### General cache group configuration settings
 * 
 * Below are the settings available to all types of cache driver.
 * 
 * Name           | Required | Description
 * -------------- | -------- | ---------------------------------------------------------------
 * driver         | __YES__  | (_string_) The driver type to use
 * servers        | __YES__  | (_array_) Associative array of server details, must include a __host__ key. (see _Memcache server configuration_ below)
 * compression    | __NO__   | (_boolean_) Use data compression when caching
 * 
 * #### Memcache server configuration
 * 
 * The following settings should be used when defining each memcache server
 * 
 * Name             | Required | Description
 * ---------------- | -------- | ---------------------------------------------------------------
 * host             | __YES__  | (_string_) The host of the memcache server, i.e. __localhost__; or __127.0.0.1__; or __memcache.domain.tld__
 * port             | __NO__   | (_integer_) Point to the port where memcached is listening for connections. Set this parameter to 0 when using UNIX domain sockets.  Default __11211__
 * persistent       | __NO__   | (_boolean_) Controls the use of a persistent connection. Default __TRUE__
 * weight           | __NO__   | (_integer_) Number of buckets to create for this server which in turn control its probability of it being selected. The probability is relative to the total weight of all servers. Default __1__
 * timeout          | __NO__   | (_integer_) Value in seconds which will be used for connecting to the daemon. Think twice before changing the default value of 1 second - you can lose all the advantages of caching if your connection is too slow. Default __1__
 * retry_interval   | __NO__   | (_integer_) Controls how often a failed server will be retried, the default value is 15 seconds. Setting this parameter to -1 disables automatic retry. Default __15__
 * status           | __NO__   | (_boolean_) Controls if the server should be flagged as online. Default __TRUE__
 * failure_callback | __NO__   | (_[callback](http://www.php.net/manual/en/language.pseudo-types.php#language.types.callback)_) Allows the user to specify a callback function to run upon encountering an error. The callback is run before failover is attempted. The function takes two parameters, the hostname and port of the failed server. Default __NULL__
 * 
 * ### System requirements
 * 
 * *  Kohana 3.0.x
 * *  PHP 5.2.4 or greater
 * *  Memcache (plus Memcached-tags for native tagging support)
 * *  Zlib
 * 
 * @package    Kohana/Cache
 * @category   Base
 * @version    2.0
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * UTF8::substr_replace
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Creates a predefined environment using the default environment
	 *
	 * Extending classes that have their own setUp() should call
	 * parent::setUp()
	 */",
 "/**
	 * Restores the original environment overriden with setEnvironment()
	 *
	 * Extending classes that have their own tearDown()
	 * should call parent::tearDown()
	 */",
 "/**
	 * Creates a connection to the unittesting database
	 *
	 * @return PDO
	 */",
 "/**
     * Gets a connection to the unittest database
     *
     * @return Kohana_Database The database connection
     */",
 "/**
	 * Removes all kohana related cache files in the cache directory
	 */",
 "/**
	 * Helper function that replaces all occurences of \'/\' with
	 * the OS-specific directory separator
	 *
	 * @param string $path The path to act on
	 * @return string
	 */",
 "/**
	 * Allows easy setting & backing up of enviroment config
	 *
	 * Option types are checked in the following order:
	 *
	 * * Server Var
	 * * Static Variable
	 * * Config option
	 *
	 * @param array $environment List of environment to set
	 */",
 "/**
	 * Check for internet connectivity
	 *
	 * @return boolean Whether an internet connection is available
	 */",
 "/**
	 * Asserts that a variable is of a given type.
	 *
	 * @param string $expected
	 * @param mixed  $actual
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that an attribute is of a given type.
	 *
	 * @param string $expected
	 * @param string $attributeName
	 * @param mixed  $classOrObject
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that a variable is not of a given type.
	 *
	 * @param string $expected
	 * @param mixed  $actual
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that an attribute is of a given type.
	 *
	 * @param string $expected
	 * @param string $attributeName
	 * @param mixed  $classOrObject
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that a variable is of a given type.
	 *
	 * @param string $expected
	 * @param mixed  $actual
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that an attribute is of a given type.
	 *
	 * @param string $expected
	 * @param string $attributeName
	 * @param mixed  $classOrObject
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that a variable is not of a given type.
	 *
	 * @param string $expected
	 * @param mixed  $actual
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that an attribute is of a given type.
	 *
	 * @param string $expected
	 * @param string $attributeName
	 * @param mixed  $classOrObject
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
 * TestCase for testing a database
 *
 * @package    Kohana/UnitTest
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Constructor.
	 *
	 * @return  void
	 */",
 "/**
	 * Runs Codebench on the extending class.
	 *
	 * @return  array  benchmark output
	 */",
 "/**
	 * Callback for array_filter().
	 * Filters out all methods not to benchmark.
	 *
	 * @param   string   method name
	 * @return  boolean
	 */",
 "/**
	 * Returns the applicable grade letter for a score.
	 *
	 * @param   integer|double  score
	 * @return  string  grade letter
	 */",
 "/**
 * Codebench ??? A benchmarking module.
 *
 * @package    Kohana/Codebench
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */",
 "/**
	 * Rules for the user model. Because the password is _always_ a hash
	 * when it\'s set,you need to run an additional not_empty rule in your controller
	 * to make sure you didn\'t hash an empty string. The password rules
	 * should be enforced outside the model or with a model helper method.
	 *
	 * @return array Rules
	 */",
 "/**
	 * Filters to run when data is set in this model. The password filter
	 * automatically hashes the password when it\'s set in the model.
	 *
	 * @return array Filters
	 */",
 "/**
	 * Labels for fields in this model
	 *
	 * @return array Labels
	 */",
 "/**
	 * Complete the login for a user by incrementing the logins and saving login timestamp
	 *
	 * @return void
	 */",
 "/**
	 * Tests if a unique key value exists in the database.
	 *
	 * @param   mixed    the value to test
	 * @param   string   field name
	 * @return  boolean
	 */",
 "/**
	 * Allows a model use both email and username as unique identifiers for login
	 *
	 * @param   string  unique value
	 * @return  string  field name
	 */",
 "/**
	 * Password validation for plain passwords.
	 *
	 * @param array $values
	 * @return Validation
	 */",
 "/**
	 * Create a new user
	 *
	 * Example usage:
	 * ~~~
	 * $user = ORM::factory(\'user\')->create_user($_POST, array(
	 *	\'username\',
	 *	\'password\',
	 *	\'email\',
	 * );
	 * ~~~
	 *
	 * @param array $values
	 * @param array $expected
	 * @throws ORM_Validation_Exception
	 */",
 "/**
	 * Update an existing user
	 *
	 * [!!] We make the assumption that if a user does not supply a password, that they do not wish to update their password.
	 *
	 * Example usage:
	 * ~~~
	 * $user = ORM::factory(\'user\')
	 *	->where(\'username\', \'=\', \'kiall\')
	 *	->find()
	 *	->update_user($_POST, array(
	 *		\'username\',
	 *		\'password\',
	 *		\'email\',
	 *	);
	 * ~~~
	 *
	 * @param array $values
	 * @param array $expected
	 * @throws ORM_Validation_Exception
	 */",
 "/**
 * Default auth user
 *
 * @package    Kohana/Auth
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * MySQL database result.   See [Results](/database/results) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query/Result
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Create a new model instance.
	 *
	 *     $model = Model::factory($name);
	 *
	 * @param   string   model name
	 * @return  Model
	 */",
 "/**
 * Model base class. All models should extend this class.
 *
 * @package    Kohana
 * @category   Models
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Checks if ImageMagick is enabled.
	 *
	 * @throws  Kohana_Exception
	 * @return  boolean
	 */",
 "/**
	 * Runs [Image_Imagick::check] and loads the image.
	 *
	 * @return  void
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Destroys the loaded image to free up resources.
	 *
	 * @return  void
	 */",
 "/**
	 * Get the image type and format for an extension.
	 *
	 * @param   string   image extension: png, jpg, etc
	 * @return  string   IMAGETYPE_* constant
	 * @throws  Kohana_Exception
	 */",
 "/**
 * Support for image manipulation using [Imagick](http://php.net/Imagick).
 *
 * @package    Kohana/Image
 * @category   Drivers
 * @author     Tamas Mihalik tamas.mihalik@gmail.com
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */",
 "/**
	 * Factory method to create a new [Response]. Pass properties
	 * in using an associative array.
	 *
	 *      // Create a new response
	 *      $response = Response::factory();
	 *
	 *      // Create a new response with headers
	 *      $response = Response::factory(array(\'status\' => 200));
	 *
	 * @param   array    $config Setup the response object
	 * @return  Response
	 */",
 "/**
	 * Sets up the response object
	 *
	 * @param   array $config Setup the response object
	 * @return  void
	 */",
 "/**
	 * Outputs the body when cast to string
	 *
	 * @return string
	 */",
 "/**
	 * Gets or sets the body of the response
	 *
	 * @return  mixed
	 */",
 "/**
	 * Gets or sets the HTTP protocol. The standard protocol to use
	 * is `HTTP/1.1`.
	 *
	 * @param   string   $protocol Protocol to set to the request/response
	 * @return  mixed
	 */",
 "/**
	 * Sets or gets the HTTP status from this response.
	 *
	 *      // Set the HTTP status to 404 Not Found
	 *      $response = Response::factory()
	 *              ->status(404);
	 *
	 *      // Get the current status
	 *      $status = $response->status();
	 *
	 * @param   integer  $status Status to set to this response
	 * @return  mixed
	 */",
 "/**
	 * Gets and sets headers to the [Response], allowing chaining
	 * of response methods. If chaining isn\'t required, direct
	 * access to the property should be used instead.
	 *
	 *       // Get a header
	 *       $accept = $response->headers(\'Content-Type\');
	 *
	 *       // Set a header
	 *       $response->headers(\'Content-Type\', \'text/html\');
	 *
	 *       // Get all headers
	 *       $headers = $response->headers();
	 *
	 *       // Set multiple headers
	 *       $response->headers(array(\'Content-Type\' => \'text/html\', \'Cache-Control\' => \'no-cache\'));
	 *
	 * @param mixed $key
	 * @param string $value
	 * @return mixed
	 */",
 "/**
	 * Returns the length of the body for use with
	 * content header
	 *
	 * @return  integer
	 */",
 "/**
	 * Set and get cookies values for this response.
	 * 
	 *     // Get the cookies set to the response
	 *     $cookies = $response->cookie();
	 *     
	 *     // Set a cookie to the response
	 *     $response->cookie(\'session\', array(
	 *          \'value\' => $value,
	 *          \'expiration\' => 12352234
	 *     ));
	 *
	 * @param   mixed     cookie name, or array of cookie values
	 * @param   string    value to set to cookie
	 * @return  string
	 * @return  void
	 * @return  [Response]
	 */",
 "/**
	 * Deletes a cookie set to the response
	 *
	 * @param   string   name
	 * @return  Response
	 */",
 "/**
	 * Deletes all cookies from this response
	 *
	 * @return  Response
	 */",
 "/**
	 * Sends the response status and all set headers.
	 *
	 * @param   boolean   replace existing headers
	 * @param   callback  function to handle header output
	 * @return  mixed
	 */",
 "/**
	 * Send file download as the response. All execution will be halted when
	 * this method is called! Use TRUE for the filename to send the current
	 * response as the file content. The third parameter allows the following
	 * options to be set:
	 *
	 * Type      | Option    | Description                        | Default Value
	 * ----------|-----------|------------------------------------|--------------
	 * `boolean` | inline    | Display inline instead of download | `FALSE`
	 * `string`  | mime_type | Manual mime type                   | Automatic
	 * `boolean` | delete    | Delete the file after sending      | `FALSE`
	 *
	 * Download a file that already exists:
	 *
	 *     $request->send_file(\'media/packages/kohana.zip\');
	 *
	 * Download generated content as a file:
	 *
	 *     $request->response($content);
	 *     $request->send_file(TRUE, $filename);
	 *
	 * [!!] No further processing can be done after this method is called!
	 *
	 * @param   string   filename with path, or TRUE for the current response
	 * @param   string   downloaded file name
	 * @param   array    additional options
	 * @return  void
	 * @throws  Kohana_Exception
	 * @uses    File::mime_by_ext
	 * @uses    File::mime
	 * @uses    Request::send_headers
	 */",
 "/**
	 * Renders the HTTP_Interaction to a string, producing
	 *
	 *  - Protocol
	 *  - Headers
	 *  - Body
	 *
	 * @return  string
	 */",
 "/**
	 * Generate ETag
	 * Generates an ETag from the response ready to be returned
	 *
	 * @throws Request_Exception
	 * @return String Generated ETag
	 */",
 "/**
	 * Check Cache
	 * Checks the browser cache to see the response needs to be returned
	 *
	 * @param   string   $etag Resource ETag
	 * @param   Request  $request The request to test against
	 * @return  Response
	 * @throws  Request_Exception
	 */",
 "/**
	 * Parse the byte ranges from the HTTP_RANGE header used for
	 * resumable downloads.
	 *
	 * @see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35
	 * @return array|FALSE
	 */",
 "/**
	 * Calculates the byte range to use with send_file. If HTTP_RANGE doesn\'t
	 * exist then the complete byte range is returned
	 *
	 * @param  integer $size
	 * @return array
	 */",
 "/**
 * Response wrapper. Created as the result of any [Request] execution
 * or utility method (i.e. Redirect). Implements standard HTTP
 * response format.
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 * @since      3.1.0
 */",
 "/**
	 * Save an uploaded file to a new location. If no filename is provided,
	 * the original filename will be used, with a unique prefix added.
	 *
	 * This method should be used after validating the $_FILES array:
	 *
	 *     if ($array->check())
	 *     {
	 *         // Upload is valid, save it
	 *         Upload::save($array[\'file\']);
	 *     }
	 *
	 * @param   array    uploaded file data
	 * @param   string   new filename
	 * @param   string   new directory
	 * @param   integer  chmod mask
	 * @return  string   on success, full path to new file
	 * @return  FALSE    on failure
	 */",
 "/**
	 * Tests if upload data is valid, even if no file was uploaded. If you
	 * _do_ require a file to be uploaded, add the [Upload::not_empty] rule
	 * before this rule.
	 *
	 *     $array->rule(\'file\', \'Upload::valid\')
	 *
	 * @param   array  $_FILES item
	 * @return  bool
	 */",
 "/**
	 * Tests if a successful upload has been made.
	 *
	 *     $array->rule(\'file\', \'Upload::not_empty\');
	 *
	 * @param   array    $_FILES item
	 * @return  bool
	 */",
 "/**
	 * Test if an uploaded file is an allowed file type, by extension.
	 *
	 *     $array->rule(\'file\', \'Upload::type\', array(\':value\', array(\'jpg\', \'png\', \'gif\')));
	 *
	 * @param   array    $_FILES item
	 * @param   array    allowed file extensions
	 * @return  bool
	 */",
 "/**
	 * Validation rule to test if an uploaded file is allowed by file size.
	 * File sizes are defined as: SB, where S is the size (1, 8.5, 300, etc.)
	 * and B is the byte unit (K, MiB, GB, etc.). All valid byte units are
	 * defined in Num::$byte_units
	 *
	 *     $array->rule(\'file\', \'Upload::size\', array(\':value\', \'1M\'))
	 *     $array->rule(\'file\', \'Upload::size\', array(\':value\', \'2.5KiB\'))
	 *
	 * @param   array    $_FILES item
	 * @param   string   maximum file size allowed
	 * @return  bool
	 */",
 "/**
	 * Validation rule to test if an upload is an image and, optionally, is the correct size.
	 *
	 *     // The \"image\" file must be an image
	 *     $array->rule(\'image\', \'Upload::image\')
	 *
	 *     // The \"photo\" file has a maximum size of 640x480 pixels
	 *     $array->rule(\'photo\', \'Upload::image\', array(640, 480));
	 *
	 *     // The \"image\" file must be exactly 100x100 pixels
	 *     $array->rule(\'image\', \'Upload::image\', array(100, 100, TRUE));
	 *
	 *
	 * @param   array    $_FILES item
	 * @param   integer  maximum width of image
	 * @param   integer  maximum height of image
	 * @param   boolean  match width and height exactly?
	 * @return  boolean
	 */",
 "/**
 * Upload helper class for working with uploaded files and [Validation].
 *
 *     $array = Validation::factory($_FILES);
 *
 * [!!] Remember to define your form with \"enctype=multipart/form-data\" or file
 * uploading will not work!
 *
 * The following configuration properties can be set:
 *
 * - [Upload::$remove_spaces]
 * - [Upload::$default_directory]
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Checks if a session is active.
	 *
	 * @param   mixed    $role Role name string, role ORM object, or array with role names
	 * @return  boolean
	 */",
 "/**
	 * Logs a user in.
	 *
	 * @param   string   username
	 * @param   string   password
	 * @param   boolean  enable autologin
	 * @return  boolean
	 */",
 "/**
	 * Forces a user to be logged in, without specifying a password.
	 *
	 * @param   mixed    username string, or user ORM object
	 * @param   boolean  mark the session as forced
	 * @return  boolean
	 */",
 "/**
	 * Logs a user in, based on the authautologin cookie.
	 *
	 * @return  mixed
	 */",
 "/**
	 * Gets the currently logged in user from the session (with auto_login check).
	 * Returns FALSE if no user is currently logged in.
	 *
	 * @return  mixed
	 */",
 "/**
	 * Log a user out and remove any autologin cookies.
	 *
	 * @param   boolean  completely destroy the session
	 * @param	boolean  remove all tokens for user
	 * @return  boolean
	 */",
 "/**
	 * Get the stored password for a username.
	 *
	 * @param   mixed   username string, or user ORM object
	 * @return  string
	 */",
 "/**
	 * Complete the login for a user by incrementing the logins and setting
	 * session data: user_id, username, roles.
	 *
	 * @param   object  user ORM object
	 * @return  void
	 */",
 "/**
	 * Compare password with original (hashed). Works for current (logged in) user
	 *
	 * @param   string  $password
	 * @return  boolean
	 */",
 "/**
 * ORM Auth driver.
 *
 * @package    Kohana/Auth
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * This method MUST be implemented by each driver to setup the `Cache`
	 * instance for each test.
	 * 
	 * This method should do the following tasks for each driver test:
	 * 
	 *  - Test the Cache instance driver is available, skip test otherwise
	 *  - Setup the Cache instance
	 *  - Call the parent setup method, `parent::setUp()`
	 *
	 * @return  void
	 */",
 "/**
	 * Accessor method to `$_cache_driver`. 
	 *
	 * @return  Cache
	 * @return  self
	 */",
 "/**
	 * Data provider for test_set_get()
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the [Cache::set()] method, testing;
	 * 
	 *  - The value is cached
	 *  - The lifetime is respected
	 *  - The returned value type is as expected
	 *  - The default not-found value is respected
	 * 
	 * @dataProvider provider_set_get
	 *
	 * @param   array    data 
	 * @param   mixed    expected 
	 * @return  void
	 */",
 "/**
	 * Tests the [Cache::delete()] method, testing;
	 * 
	 *  - The a cached value is deleted from cache
	 *  - The cache returns a TRUE value upon deletion
	 *  - The cache returns a FALSE value if no value exists to delete
	 *
	 * @return  void
	 */",
 "/**
	 * Tests [Cache::delete_all()] works as specified
	 *
	 * @return  void
	 * @uses    Kohana_CacheBasicMethodsTest::provider_set_get()
	 */",
 "/**
*  @package    Kohana/Cache
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Creates a new Validation instance.
	 *
	 * @param   array   array to use for validation
	 * @return  Validation
	 */",
 "/**
	 * Sets the unique \"any field\" key and creates an ArrayObject from the
	 * passed array.
	 *
	 * @param   array   array to validate
	 * @return  void
	 */",
 "/**
	 * Throws an exception because Validation is read-only.
	 * Implements ArrayAccess method.
	 *
	 * @throws  object   Kohana_Exception
	 * @param   string   key to set
	 * @param   mixed    value to set
	 * @return  void
	 */",
 "/**
	 * Checks if key is set in array data.
	 * Implements ArrayAccess method.
	 *
	 * @param   string   key to check
	 * @return  bool     whether the key is set
	 */",
 "/**
	 * Throws an exception because Validation is read-only.
	 * Implements ArrayAccess method.
	 *
	 * @throws  object   Kohana_Exception
	 * @param   string   key to unset
	 * @return  void
	 */",
 "/**
	 * Gets a value from the array data.
	 * Implements ArrayAccess method.
	 *
	 * @param   string   key to return
	 * @return  mixed    value from array
	 */",
 "/**
	 * Copies the current rules to a new array.
	 *
	 *     $copy = $array->copy($new_data);
	 *
	 * @param   array   new data set
	 * @return  Validation
	 * @since   3.0.5
	 */",
 "/**
	 * Returns the array representation of the current object.
	 * Deprecated in favor of [Validation::data]
	 *
	 * @deprecated
	 * @return  array
	 */",
 "/**
	 * Returns the array of data to be validated.
	 *
	 * @return  array
	 */",
 "/**
	 * Sets or overwrites the label name for a field.
	 *
	 * @param   string  field name
	 * @param   string  label
	 * @return  $this
	 */",
 "/**
	 * Sets labels using an array.
	 *
	 * @param   array  list of field => label names
	 * @return  $this
	 */",
 "/**
	 * Overwrites or appends rules to a field. Each rule will be executed once.
	 * All rules must be string names of functions method names. Parameters must
	 * match the parameters of the callback function exactly
	 *
	 * Aliases you can use in callback parameters:
	 * - :validation - the validation object
	 * - :field - the field name
	 * - :value - the value of the field
	 *
	 *     // The \"username\" must not be empty and have a minimum length of 4
	 *     $validation->rule(\'username\', \'not_empty\')
	 *                ->rule(\'username\', \'min_length\', array(\':value\', 4));
	 *
	 *     // The \"password\" field must match the \"password_repeat\" field
	 *     $validation->rule(\'password\', \'matches\', array(\':validation\', \'password\', \'password_repeat\'));
	 *
	 * @param   string    field name
	 * @param   callback  valid PHP callback
	 * @param   array     extra parameters for the rule
	 * @return  $this
	 */",
 "/**
	 * Add rules using an array.
	 *
	 * @param   string  field name
	 * @param   array   list of callbacks
	 * @return  $this
	 */",
 "/**
	 * Bind a value to a parameter definition.
	 *
	 *     // This allows you to use :model in the parameter definition of rules
	 *     $validation->bind(\':model\', $model)
	 *         ->rule(\'status\', \'valid_status\', array(\':model\'));
	 *
	 * @param   string  variable name or an array of variables
	 * @param   mixed   value
	 * @return  $this
	 */",
 "/**
	 * Executes all validation rules. This should
	 * typically be called within an if/else block.
	 *
	 *     if ($validation->check())
	 *     {
	 *          // The data is valid, do something here
	 *     }
	 *
	 * @param   boolean   allow empty array?
	 * @return  boolean
	 */",
 "/**
	 * Add an error to a field.
	 *
	 * @param   string  field name
	 * @param   string  error message
	 * @return  $this
	 */",
 "/**
	 * Returns the error messages. If no file is specified, the error message
	 * will be the name of the rule that failed. When a file is specified, the
	 * message will be loaded from \"field/rule\", or if no rule-specific message
	 * exists, \"field/default\" will be used. If neither is set, the returned
	 * message will be \"file/field/rule\".
	 *
	 * By default all messages are translated using the default language.
	 * A string can be used as the second parameter to specified the language
	 * that the message was written in.
	 *
	 *     // Get errors from messages/forms/login.php
	 *     $errors = $Validation->errors(\'forms/login\');
	 *
	 * @uses    Kohana::message
	 * @param   string  file to load error messages from
	 * @param   mixed   translate the message
	 * @return  array
	 */",
 "/**
 * Array and variable validation.
 *
 * @package    Kohana
 * @category   Security
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Loads a class and uses [reflection](http://php.net/reflection) to parse
	 * the class. Reads the class modifiers, constants and comment. Parses the
	 * comment to find the description and tags.
	 *
	 * @param   string   class name
	 * @return  void
	 */",
 "/**
	 * Gets a list of the class properties as [Kodoc_Property] objects.
	 *
	 * @return  array
	 */",
 "/**
	 * Gets a list of the class properties as [Kodoc_Method] objects.
	 *
	 * @return  array
	 */",
 "/**
	 * Sort methods based on their visibility and declaring class based on:
	 *  - methods will be sorted public, protected, then private.
	 *  - methods that are declared by an ancestor will be after classes
	 *    declared by the current class
	 *  - lastly, they will be sorted alphabetically
	 * 
	 */",
 "/**
 * Class documentation generator.
 *
 * @package    Kohana/Userguide
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Provides test data for test_callback()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::callback()
	 *
	 * @test
	 * @dataProvider provider_callback
	 * @param string $str       String to parse
	 * @param array  $expected  Callback and its parameters
	 */",
 "/**
	 * Provides test data for test_extract
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::extract()
	 *
	 * @test
	 * @dataProvider provider_extract
	 * @param array $array
	 * @param array $keys
	 * @param mixed $default
	 * @param array $expected
	 */",
 "/**
	 * Provides test data for test_pluck
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::pluck()
	 *
	 * @test
	 * @dataProvider provider_pluck
	 * @param array $array
	 * @param string $key
	 * @param array $expected
	 */",
 "/**
	 * Provides test data for test_get()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::get()
	 *
	 * @test
	 * @dataProvider provider_get()
	 * @param array          $array      Array to look in
	 * @param string|integer $key        Key to look for
	 * @param mixed          $default    What to return if $key isn\'t set
	 * @param mixed          $expected   The expected value returned
	 */",
 "/**
	 * Provides test data for test_is_assoc()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::is_assoc()
	 *
	 * @test
	 * @dataProvider provider_is_assoc
	 * @param array   $array     Array to check
	 * @param boolean $expected  Is $array assoc
	 */",
 "/**
	 * Provides test data for test_is_array()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::is_array()
	 *
	 * @test
	 * @dataProvider provider_is_array
	 * @param mixed   $value     Value to check
	 * @param boolean $expected  Is $value an array?
	 */",
 "/**
	 *
	 * @test
	 * @dataProvider provider_merge
	 */",
 "/**
	 * Provides test data for test_path()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::path()
	 *
	 * @test
	 * @dataProvider provider_path
	 * @param string  $path       The path to follow
	 * @param mixed   $default    The value to return if dnx
	 * @param boolean $expected   The expected value
	 * @param string  $delimiter  The path delimiter
	 */",
 "/**
	 * Provides test data for test_path()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::path()
	 *
	 * @test
	 * @dataProvider provider_set_path
	 * @param string  $path       The path to follow
	 * @param boolean $expected   The expected value
	 * @param string  $delimiter  The path delimiter
	 */",
 "/**
	 * Provides test data for test_range()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::range()
	 *
	 * @dataProvider provider_range
	 * @param integer $step  The step between each value in the array
	 * @param integer $max   The max value of the range (inclusive)
	 */",
 "/**
	 * Provides test data for test_unshift()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Arr::unshift()
	 *
	 * @test
	 * @dataProvider provider_unshift
	 * @param array $array
	 * @param string $key
	 * @param mixed $value
	 */",
 "/**
	 * Provies test data for test_overwrite
	 *
	 * @return array Test Data
	 */",
 "/**
	 *
	 * @test
	 * @dataProvider provider_overwrite
	 */",
 "/**
	 * Provides test data for test_map
	 *
	 * @return array Test Data
	 */",
 "/**
	 *
	 * @test
	 * @dataProvider provider_map
	 */",
 "/**
	 * Provides test data for test_flatten
	 *
	 * @return array Test Data
	 */",
 "/**
	 *
	 * @test
	 * @dataProvider provider_flatten
	 */",
 "/**
 * Tests the Arr lib that\'s shipped with kohana
 *
 * @group kohana
 * @group kohana.arr
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Handles garbage collection and deleting of expired objects.
	 *
	 * @return  void
	 */",
 "/**
	 * Deletes all expired tokens.
	 *
	 * @return  ORM
	 */",
 "/**
 * Default auth user toke
 *
 * @package    Kohana/Auth
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
 * UTF8::strlen
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Provides test data for test_sanitize()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Kohana::santize()
	 *
	 * @test
	 * @dataProvider provider_sanitize
	 * @covers Kohana::sanitize
	 * @param boolean $value  Input for Kohana::sanitize
	 * @param boolean $result Output for Kohana::sanitize
	 */",
 "/**
	 * Passing FALSE for the file extension should prevent appending any extension.
	 * See issue #3214
	 *
	 * @test
	 * @covers  Kohana::find_file
	 */",
 "/**
	 * If a file can\'t be found then find_file() should return FALSE if
	 * only a single file was requested, or an empty array if multiple files
	 * (i.e. configuration files) were requested
	 *
	 * @test
	 * @covers Kohana::find_file
	 */",
 "/**
	 * Kohana::list_files() should return an array on success and an empty array on failure
	 *
	 * @test
	 * @covers Kohana::list_files
	 */",
 "/**
	 * Tests Kohana::globals()
	 *
	 * @test
	 * @covers Kohana::globals
	 */",
 "/**
	 * Provides test data for testCache()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Kohana::cache()
	 *
	 * @test
	 * @dataProvider provider_cache
	 * @covers Kohana::cache
	 * @param boolean $key      Key to cache/get for Kohana::cache
	 * @param boolean $value    Output from Kohana::cache
	 * @param boolean $lifetime Lifetime for Kohana::cache
	 */",
 "/**
	 * Provides test data for test_message()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Kohana::message()
	 *
	 * @test
	 * @dataProvider provider_message
	 * @covers Kohana::message
	 * @param boolean $expected Output for Kohana::message
	 * @param boolean $file     File to look in for Kohana::message
	 * @param boolean $key      Key for Kohana::message
	 */",
 "/**
	 * Provides test data for test_error_handler()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Kohana::error_handler()
	 *
	 * @test
	 * @dataProvider provider_error_handler
	 * @covers Kohana::error_handler
	 * @param boolean $code  Input for Kohana::sanitize
	 * @param boolean $error  Input for Kohana::sanitize
	 * @param boolean $file  Input for Kohana::sanitize
	 * @param boolean $line Output for Kohana::sanitize
	 */",
 "/**
	 * Provides test data for test_modules_sets_and_returns_valid_modules()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Kohana::modules()
	 *
	 * @test
	 * @dataProvider provider_modules_detects_invalid_modules
	 * @expectedException Kohana_Exception
	 * @param boolean $source   Input for Kohana::modules
	 *
	 */",
 "/**
	 * Provides test data for test_modules_sets_and_returns_valid_modules()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Kohana::modules()
	 *
	 * @test
	 * @dataProvider provider_modules_sets_and_returns_valid_modules
	 * @param boolean $source   Input for Kohana::modules
	 * @param boolean $expected Output for Kohana::modules
	 */",
 "/**
	 * To make the tests as portable as possible this just tests that
	 * you get an array of modules when you can Kohana::modules() and that
	 * said array contains unittest
	 *
	 * @test
	 * @covers Kohana::modules
	 */",
 "/**
	 * Tests Kohana::include_paths()
	 *
	 * The include paths must contain the apppath and syspath
	 * @test
	 * @covers Kohana::include_paths
	 */",
 "/**
 * Tests Kohana Core
 *
 * @TODO Use a virtual filesystem (see phpunit doc on mocking fs) for find_file etc.
 *
 * @group kohana
 * @group kohana.core
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates a new `Request_Client` object,
	 * allows for dependency injection.
	 *
	 * @param   array    $params Params
	 * @throws  Request_Exception
	 */",
 "/**
	 * Sends the HTTP message [Request] to a remote server and processes
	 * the response.
	 *
	 * @param   Request   request to send
	 * @return  Response
	 */",
 "/**
 * [Request_Client_External] HTTP driver performs external requests using the
 * php-http extention. To use this driver, ensure the following is completed
 * before executing an external request- ideally in the application bootstrap.
 * 
 * @example
 * 
 *       // In application bootstrap
 *       Request_Client_External::$client = \'Request_Client_HTTP\';
 * 
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 * @uses       [PECL HTTP](http://php.net/manual/en/book.http.php)
 */",
 "/**
	 * Creates a new file reader using the given directory as a config source
	 *
	 * @param string Configuration directory to search
	 */",
 "/**
	 * Load and merge all of the configuration files in this group.
	 *
	 *     $config->load($name);
	 *
	 * @param   string  configuration group name
	 * @return  $this   current object
	 * @uses    Kohana::load
	 */",
 "/**
 * File-based configuration reader. Multiple configuration directories can be
 * used by attaching multiple instances of this class to [Kohana_Config].
 *
 * @package    Kohana
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Check for existence of the wincache extension This method cannot be invoked externally. The driver must
	 * be instantiated using the `Cache::instance()` method.
	 *
	 * @param  array     configuration
	 * @throws Cache_Exception
	 */",
 "/**
	 * Retrieve a cached value entry by id.
	 * 
	 *     // Retrieve cache entry from wincache group
	 *     $data = Cache::instance(\'wincache\')->get(\'foo\');
	 * 
	 *     // Retrieve cache entry from wincache group and return \'bar\' if miss
	 *     $data = Cache::instance(\'wincache\')->get(\'foo\', \'bar\');
	 *
	 * @param   string   id of cache to entry
	 * @param   string   default value to return if cache miss
	 * @return  mixed
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Set a value to cache with id and lifetime
	 * 
	 *     $data = \'bar\';
	 * 
	 *     // Set \'bar\' to \'foo\' in wincache group, using default expiry
	 *     Cache::instance(\'wincache\')->set(\'foo\', $data);
	 * 
	 *     // Set \'bar\' to \'foo\' in wincache group for 30 seconds
	 *     Cache::instance(\'wincache\')->set(\'foo\', $data, 30);
	 *
	 * @param   string   id of cache entry
	 * @param   string   data to set to cache
	 * @param   integer  lifetime in seconds
	 * @return  boolean
	 */",
 "/**
	 * Delete a cache entry based on id
	 * 
	 *     // Delete \'foo\' entry from the wincache group
	 *     Cache::instance(\'wincache\')->delete(\'foo\');
	 *
	 * @param   string   id to remove from cache
	 * @return  boolean
	 */",
 "/**
	 * Delete all cache entries.
	 * 
	 * Beware of using this method when
	 * using shared memory cache systems, as it will wipe every
	 * entry within the system for all clients.
	 * 
	 *     // Delete all cache entries in the wincache group
	 *     Cache::instance(\'wincache\')->delete_all();
	 *
	 * @return  boolean
	 */",
 "/**
 * [Kohana Cache](api/Kohana_Cache) Wincache driver. Provides an opcode based
 * driver for the Kohana Cache library.
 * 
 * ### Configuration example
 * 
 * Below is an example of an _wincache_ server configuration.
 * 
 *     return array(
 *          \'wincache\' => array(                     // Driver group
 *                  \'driver\'         => \'wincache\',  // using wincache driver
 *           ),
 *     )
 * 
 * In cases where only one cache group is required, if the group is named `default` there is
 * no need to pass the group name when instantiating a cache instance.
 * 
 * #### General cache group configuration settings
 * 
 * Below are the settings available to all types of cache driver.
 * 
 * Name           | Required | Description
 * -------------- | -------- | ---------------------------------------------------------------
 * driver         | __YES__  | (_string_) The driver type to use
 * 
 * ### System requirements
 * 
 * *  Windows XP SP3 with IIS 5.1 and ?? FastCGI Extension
 * *  Windows Server 2003 with IIS 6.0 and ?? FastCGI Extension
 * *  Windows Vista SP1 with IIS 7.0 and FastCGI Module
 * *  Windows Server 2008 with IIS 7.0 and FastCGI Module
 * *  Windows 7 with IIS 7.5 and FastCGI Module
 * *  Windows Server 2008 R2 with IIS 7.5 and FastCGI Module
 * *  PHP 5.2.X, Non-thread-safe build
 * *  PHP 5.3 X86, Non-thread-safe VC9 build
 * 
 * @package    Kohana/Cache
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * The directory in which your application specific resources are located.
 * The application directory must contain the bootstrap.php file.
 *
 * @see  http://kohanaframework.org/guide/about.install#application
 */",
 "/**
 * The directory in which your modules are located.
 *
 * @see  http://kohanaframework.org/guide/about.install#modules
 */",
 "/**
 * The directory in which the Kohana resources are located. The system
 * directory must contain the classes/kohana.php file.
 *
 * @see  http://kohanaframework.org/guide/about.install#system
 */",
 "/**
 * Base Config source Interface
 *
 * Used to identify either config readers or writers when calling [Kohana_Config::attach()]
 *
 * @package    Kohana
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Provider for test_factory()
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the [Request_Client_External::factory()] method
	 * 
	 * @dataProvider provider_factory
	 *
	 * @param   array    params 
	 * @param   string   client 
	 * @param   Request_Client_External expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_options
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the [Request_Client_External::options()] method
	 *
	 * @dataProvider provider_options
	 * 
	 * @param   mixed     key 
	 * @param   mixed     value 
	 * @param   array     expected 
	 * @return  void
	 */",
 "/**
	 * Data provider for test_execute
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the [Request_Client_External::_send_message()] method
	 *
	 * @dataProvider provider_execute
	 * 
	 * @return  void
	 */",
 "/**
 * Unit tests for external request client
 *
 * @group kohana
 * @group kohana.request
 * @group kohana.request.client
 * @group kohana.request.client.external
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * Class method documentation generator.
 *
 * @package    Kohana/Userguide
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Get and set the target language.
	 *
	 *     // Get the current language
	 *     $lang = I18n::lang();
	 *
	 *     // Change the current language to Spanish
	 *     I18n::lang(\'es-es\');
	 *
	 * @param   string   new language setting
	 * @return  string
	 * @since   3.0.2
	 */",
 "/**
	 * Returns translation of a string. If no translation exists, the original
	 * string will be returned. No parameters are replaced.
	 *
	 *     $hello = I18n::get(\'Hello friends, my name is :name\');
	 *
	 * @param   string   text to translate
	 * @param   string   target language
	 * @return  string
	 */",
 "/**
	 * Returns the translation table for a given language.
	 *
	 *     // Get all defined Spanish messages
	 *     $messages = I18n::load(\'es-es\');
	 *
	 * @param   string   language to load
	 * @return  array
	 */",
 "/**
 * Internationalization (i18n) class. Provides language loading and translation
 * methods without dependencies on [gettext](http://php.net/gettext).
 *
 * Typically this class would never be used directly, but used via the __()
 * function, which loads the message and replaces parameters:
 *
 *     // Display a translated message
 *     echo __(\'Hello, world\');
 *
 *     // With parameter replacement
 *     echo __(\'Hello, :user\', array(\':user\' => $username));
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Kohana translation/internationalization function. The PHP function
	 * [strtr](http://php.net/strtr) is used for replacing parameters.
	 *
	 *    __(\'Welcome back, :user\', array(\':user\' => $username));
	 *
	 * [!!] The target language is defined by [I18n::$lang].
	 * 
	 * @uses    I18n::get
	 * @param   string  text to translate
	 * @param   array   values to replace in the translated text
	 * @param   string  source language
	 * @return  string
	 */",
 "/**
 * UTF8::strtoupper
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
 * Class method parameter documentation generator.
 *
 * @package    Kohana/Userguide
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Tests that when a new logger is created the list of messages is initially
	 * empty
	 *
	 * @test
	 * @covers Log
	 */",
 "/**
	 * Tests that when a new logger is created the list of writers is initially
	 * empty
	 *
	 * @test
	 * @covers Log
	 */",
 "/**
	 * Test that attaching a log writer using an array of levels adds it to the array of log writers
	 *
	 * @TODO Is this test too specific?
	 *
	 * @test
	 * @covers Log::attach
	 */",
 "/**
	 * Test that attaching a log writer using a min/max level adds it to the array of log writers
	 *
	 * @TODO Is this test too specific?
	 *
	 * @test
	 * @covers Log::attach
	 */",
 "/**
	 * When we call detach() we expect the specified log writer to be removed
	 *
	 * @test
	 * @covers Log::detach
	 */",
 "/**
 * Tests Kohana Logging API
 *
 * @group kohana
 * @group kohana.logging
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Matt Button <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Provides test data for test_attributes()
	 *
	 * @return array
	 */",
 "/**
	 * Tests HTML::attributes()
	 *
	 * @test
	 * @dataProvider provider_attributes
	 * @param array  $attributes  Attributes to use
	 * @param string $expected    Expected output
	 */",
 "/**
	 * Provides test data for test_script
	 *
	 * @return array Array of test data
	 */",
 "/**
	 * Tests HTML::script()
	 *
	 * @test
	 * @dataProvider  provider_script
	 * @param string  $expected       Expected output
	 * @param string  $file           URL to script
	 * @param array   $attributes     HTML attributes for the anchor
	 * @param string  $protocol       Protocol to use
	 * @param bool    $index          Should the index file be included in url?
	 */",
 "/**
	 * Data provider for the style test
	 *
	 * @return array Array of test data
	 */",
 "/**
	 * Tests HTML::style()
	 *
	 * @test
	 * @dataProvider  provider_style
	 * @param string  $expected     The expected output
	 * @param string  $file         The file to link to
	 * @param array   $attributes   Any extra attributes for the link
	 * @param string  $protocol     Protocol to use
	 * @param bool    $index        Whether the index file should be added to the link
	 */",
 "/**
	 * Provides test data for test_anchor
	 *
	 * @return array Test data
	 */",
 "/**
	 * Tests HTML::anchor
	 *
	 * @test
	 * @dataProvider provider_anchor
	 */",
 "/**
	 * Data provider for test_file_anchor
	 *
	 * @return array
	 */",
 "/**
	 * Test for HTML::file_anchor()
	 *
	 * @test
	 * @covers HTML::file_anchor
	 * @dataProvider provider_file_anchor
	 */",
 "/**
 * Tests HTML
 *
 * @group kohana
 * @group kohana.html
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * Transparent extension of the Kohana_Config_Database_Reader class
 *
 * @package    Kohana/Database
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * UTF8::stristr
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
	 * Gets or sets the HTTP method. Usually GET, POST, PUT or DELETE in
	 * traditional CRUD applications.
	 *
	 * @param   string   $method  Method to use for this request
	 * @return  mixed
	 */",
 "/**
	 * Gets the URI of this request, optionally allows setting
	 * of [Route] specific parameters during the URI generation.
	 * If no parameters are passed, the request will use the
	 * default values defined in the Route.
	 *
	 * @param   array    $params  Optional parameters to include in uri generation
	 * @return  string
	 */",
 "/**
	 * Gets or sets HTTP query string.
	 *
	 * @param   mixed   $key    Key or key value pairs to set
	 * @param   string  $value  Value to set to a key
	 * @return  mixed
	 */",
 "/**
	 * Gets or sets HTTP POST parameters to the request.
	 *
	 * @param   mixed   $key   Key or key value pairs to set
	 * @param   string  $value Value to set to a key
	 * @return  mixed
	 */",
 "/**
 * A HTTP Request specific interface that adds the methods required
 * by HTTP requests. Over and above [Kohana_HTTP_Interaction], this
 * interface provides method, uri, get and post methods.
 *
 * @package    Kohana
 * @category   HTTP
 * @author     Kohana Team
 * @since      3.1.0
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * File-based configuration reader. Multiple configuration directories can be
 * used by attaching multiple instances of this class to [Config].
 *
 * @package    Kohana
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Tests Validation::factory()
	 *
	 * Makes sure that the factory method returns an instance of Validation lib
	 * and that it uses the variables passed
	 *
	 * @test
	 */",
 "/**
	 * When we copy() a validation object, we should have a new validation object
	 * with the exact same attributes, apart from the data, which should be the
	 * same as the array we pass to copy()
	 *
	 * @test
	 * @covers Validation::copy
	 */",
 "/**
	 * When the validation object is initially created there should be no labels
	 * specified
	 *
	 * @test
	 */",
 "/**
	 * Adding a label to a field should set it in the labels array
	 * If the label already exists it should overwrite it
	 *
	 * In both cases thefunction should return a reference to $this
	 *
	 * @test
	 * @covers Validation::label
	 */",
 "/**
	 * Using labels() we should be able to add / overwrite multiple labels
	 *
	 * The function should also return $this for chaining purposes
	 *
	 * @test
	 * @covers Validation::labels
	 */",
 "/**
	 * Using bind() we should be able to add / overwrite multiple bound variables
	 *
	 * The function should also return $this for chaining purposes
	 *
	 * @test
	 * @covers Validation::bind
	 */",
 "/**
	 * We should be able to used bound variables in callbacks
	 *
	 * @test
	 * @covers Validation::check
	 */",
 "/**
	 * Provides test data for test_check
	 *
	 * @return array
	 */",
 "/**
	 * Tests Validation::check()
	 *
	 * @test
	 * @covers Validation::check
	 * @covers Validation::rule
	 * @covers Validation::rules
	 * @covers Validation::errors
	 * @covers Validation::error
	 * @dataProvider provider_check
	 * @param array   $array            The array of data
	 * @param array   $rules            The array of rules
	 * @param array   $labels           The array of labels
	 * @param boolean $expected         Is it valid?
	 * @param boolean $expected_errors  Array of expected errors
	 */",
 "/**
	 * Provides test data for test_errors()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Validation::errors()
	 *
	 * @test
	 * @covers Validation::errors
	 * @dataProvider provider_errors
	 * @param array $array     The array of data
	 * @param array $rules     The array of rules
	 * @param array $expected  Array of expected errors
	 */",
 "/**
	 * Provides test data for test_translated_errors()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Validation::errors()
	 *
	 * @test
	 * @covers Validation::errors
	 * @dataProvider provider_translated_errors
	 * @param array   $data                   The array of data to test
	 * @param array   $rules                  The array of rules to add
	 * @param array   $translated_expected    The array of expected errors when translated
	 * @param array   $untranslated_expected  The array of expected errors when not translated
	 */",
 "/**
	 * Tests Validation::errors()
	 *
	 * @test
	 * @covers Validation::errors
	 */",
 "/**
	 * Tests Validation::errors()
	 *
	 * @test
	 * @covers Validation::errors
	 */",
 "/**
	 * Tests Validation::check()
	 *
	 * @test
	 * @covers Validation::check
	 */",
 "/**
	 * Tests Validation::errors()
	 *
	 * @test
	 * @covers Validation::errors
	 */",
 "/**
	 * Tests Validation::as_array()
	 *
	 * @test
	 * @covers Validation::as_array
	 */",
 "/**
	 * Tests Validation::data()
	 *
	 * @test
	 * @covers Validation::data
	 */",
 "/**
 * Tests the Validation lib that\'s shipped with Kohana
 *
 * @group kohana
 * @group kohana.validation
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * The directory in which your application specific resources are located.
 * The application directory must contain the bootstrap.php file.
 *
 * @see  http://kohanaframework.org/guide/about.install#application
 */",
 "/**
 * The directory in which your modules are located.
 *
 * @see  http://kohanaframework.org/guide/about.install#modules
 */",
 "/**
 * The directory in which the Kohana resources are located. The system
 * directory must contain the classes/kohana.php file.
 *
 * @see  http://kohanaframework.org/guide/about.install#system
 */",
 "/**
	 * Provides test data for test_lang()
	 * 
	 * @return array
	 */",
 "/**
	 * Tests Inflector::uncountable
	 *
	 * @test
	 * @dataProvider provider_uncountable
	 * @param boolean $input  Input for File::mime
	 * @param boolean $expected Output for File::mime
	 */",
 "/**
	 * Provides test data for test_lang()
	 * 
	 * @return array
	 */",
 "/**
	 * Tests Inflector::singular
	 *
	 * @test
	 * @dataProvider provider_singular
	 * @param boolean $input  Input for File::mime
	 * @param boolean $expected Output for File::mime
	 */",
 "/**
	 * Provides test data for test_lang()
	 * 
	 * @return array
	 */",
 "/**
	 * Tests Inflector::plural
	 *
	 * @test
	 * @dataProvider provider_plural
	 * @param boolean $input  Input for File::mime
	 * @param boolean $expected Output for File::mime
	 */",
 "/**
	 * Provides test data for test_camelize()
	 * 
	 * @return array
	 */",
 "/**
	 * Tests Inflector::camelize
	 *
	 * @test
	 * @dataProvider provider_camelize
	 * @param boolean $input  Input for File::mime
	 * @param boolean $expected Output for File::mime
	 */",
 "/**
	 * Provides data for test_decamelize()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Inflector::decamelize()
	 *
	 * @test
	 * @dataProvider provider_decamelize
	 * @param string Camelized string
	 * @param string Glue
	 * @param string Expected string
	 */",
 "/**
 * Tests Kohana inflector class
 *
 * @group kohana
 * @group kohana.inflector
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Set the table for a update.
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @return  void
	 */",
 "/**
	 * Sets the table to update.
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @return  $this
	 */",
 "/**
	 * Set the values to update with an associative array.
	 *
	 * @param   array   associative (column => value) list
	 * @return  $this
	 */",
 "/**
	 * Set the value of a single column.
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @param   mixed  column value
	 * @return  $this
	 */",
 "/**
	 * Compile the SQL query and return it.
	 *
	 * @param   object  Database instance
	 * @return  string
	 */",
 "/**
 * Database query builder for UPDATE statements. See [Query Builder](/database/query/builder) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/** First octet of 5 octet sequence.
				 *
				 * This is illegal because the encoded codepoint must be either
				 * (a) not the shortest form or
				 * (b) outside the Unicode range of 0-0x10FFFF.
				 * Rather than trying to resynchronize, we will carry on until the end
				 * of the sequence and let the later error handling code catch it.
				 **/",
 "/**
 * UTF8::to_unicode
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Test the model\'s factory.
	 *
	 * @test
	 * @covers Model::factory
	 */",
 "/**
 * This test only really exists for code coverage.
 *
 * @group kohana
 * @group kohana.model
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Provides test data for test_clean()
	 */",
 "/**
	 * Tests UTF8::clean
	 *
	 * @test
	 * @dataProvider provider_clean
	 */",
 "/**
	 * Provides test data for test_is_ascii()
	 */",
 "/**
	 * Tests UTF8::is_ascii
	 *
	 * @test
	 * @dataProvider provider_is_ascii
	 */",
 "/**
	 * Provides test data for test_strip_ascii_ctrl()
	 */",
 "/**
	 * Tests UTF8::strip_ascii_ctrl
	 *
	 * @test
	 * @dataProvider provider_strip_ascii_ctrl
	 */",
 "/**
	 * Provides test data for test_strip_non_ascii()
	 */",
 "/**
	 * Tests UTF8::strip_non_ascii
	 *
	 * @test
	 * @dataProvider provider_strip_non_ascii
	 */",
 "/**
	 * Provides test data for test_transliterate_to_ascii()
	 */",
 "/**
	 * Tests UTF8::transliterate_to_ascii
	 *
	 * @test
	 * @dataProvider provider_transliterate_to_ascii
	 */",
 "/**
	 * Provides test data for test_strlen()
	 */",
 "/**
	 * Tests UTF8::strlen
	 *
	 * @test
	 * @dataProvider provider_strlen
	 */",
 "/**
	 * Provides test data for test_strpos()
	 */",
 "/**
	 * Tests UTF8::strpos
	 *
	 * @test
	 * @dataProvider provider_strpos
	 */",
 "/**
	 * Provides test data for test_strrpos()
	 */",
 "/**
	 * Tests UTF8::strrpos
	 *
	 * @test
	 * @dataProvider provider_strrpos
	 */",
 "/**
	 * Provides test data for test_substr()
	 */",
 "/**
	 * Tests UTF8::substr
	 *
	 * @test
	 * @dataProvider provider_substr
	 */",
 "/**
	 * Provides test data for test_substr_replace()
	 */",
 "/**
	 * Tests UTF8::substr_replace
	 *
	 * @test
	 * @dataProvider provider_substr_replace
	 */",
 "/**
	 * Provides test data for test_strtolower()
	 */",
 "/**
	 * Tests UTF8::strtolower
	 *
	 * @test
	 * @dataProvider provider_strtolower
	 */",
 "/**
	 * Provides test data for test_strtoupper()
	 */",
 "/**
	 * Tests UTF8::strtoupper
	 *
	 * @test
	 * @dataProvider provider_strtoupper
	 */",
 "/**
	 * Provides test data for test_ucfirst()
	 */",
 "/**
	 * Tests UTF8::ucfirst
	 *
	 * @test
	 * @dataProvider provider_ucfirst
	 */",
 "/**
	 * Provides test data for test_strip_non_ascii()
	 */",
 "/**
	 * Tests UTF8::ucwords
	 *
	 * @test
	 * @dataProvider provider_ucwords
	 */",
 "/**
	 * Provides test data for test_strcasecmp()
	 */",
 "/**
	 * Tests UTF8::strcasecmp
	 *
	 * @test
	 * @dataProvider provider_strcasecmp
	 */",
 "/**
	 * Provides test data for test_str_ireplace()
	 */",
 "/**
	 * Tests UTF8::str_ireplace
	 *
	 * @test
	 * @dataProvider provider_str_ireplace
	 */",
 "/**
	 * Provides test data for test_stristr()
	 */",
 "/**
	 * Tests UTF8::stristr
	 *
	 * @test
	 * @dataProvider provider_stristr
	 */",
 "/**
	 * Provides test data for test_strspn()
	 */",
 "/**
	 * Tests UTF8::strspn
	 *
	 * @test
	 * @dataProvider provider_strspn
	 */",
 "/**
	 * Provides test data for test_strcspn()
	 */",
 "/**
	 * Tests UTF8::strcspn
	 *
	 * @test
	 * @dataProvider provider_strcspn
	 */",
 "/**
	 * Provides test data for test_str_pad()
	 */",
 "/**
	 * Tests UTF8::str_pad
	 *
	 * @test
	 * @dataProvider provider_str_pad
	 */",
 "/**
	 * Tests UTF8::str_pad error
	 *
	 * @test
	 * @expectedException UTF8_Exception
	 */",
 "/**
	 * Provides test data for test_str_split()
	 */",
 "/**
	 * Tests UTF8::str_split
	 *
	 * @test
	 * @dataProvider provider_str_split
	 */",
 "/**
	 * Provides test data for test_strrev()
	 */",
 "/**
	 * Tests UTF8::strrev
	 *
	 * @test
	 * @dataProvider provider_strrev
	 */",
 "/**
	 * Provides test data for test_trim()
	 */",
 "/**
	 * Tests UTF8::trim
	 *
	 * @test
	 * @dataProvider provider_trim
	 */",
 "/**
	 * Provides test data for test_ltrim()
	 */",
 "/**
	 * Tests UTF8::ltrim
	 *
	 * @test
	 * @dataProvider provider_ltrim
	 */",
 "/**
	 * Provides test data for test_rtrim()
	 */",
 "/**
	 * Tests UTF8::rtrim
	 *
	 * @test
	 * @dataProvider provider_rtrim
	 */",
 "/**
	 * Provides test data for test_ord()
	 */",
 "/**
	 * Tests UTF8::ord
	 *
	 * @test
	 * @dataProvider provider_ord
	 */",
 "/**
 * Tests Kohana_UTF8 class
 *
 * @group kohana
 * @group kohana.utf8
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Sets the total number of rows and stores the result locally.
	 *
	 * @param   mixed   query result
	 * @param   string  SQL query
	 * @return  void
	 */",
 "/**
	 * Result destruction cleans up all open result sets.
	 *
	 * @return  void
	 */",
 "/**
	 * Get a cached database result from the current result iterator.
	 *
	 *     $cachable = serialize($result->cached());
	 *
	 * @return  Database_Result_Cached
	 * @since   3.0.5
	 */",
 "/**
	 * Return all of the rows in the result as an array.
	 *
	 *     // Indexed array of all rows
	 *     $rows = $result->as_array();
	 *
	 *     // Associative array of rows by \"id\"
	 *     $rows = $result->as_array(\'id\');
	 *
	 *     // Associative array of rows, \"id\" => \"name\"
	 *     $rows = $result->as_array(\'id\', \'name\');
	 *
	 * @param   string  column for associative keys
	 * @param   string  column for values
	 * @return  array
	 */",
 "/**
	 * Return the named column from the current row.
	 *
	 *     // Get the \"id\" value
	 *     $id = $result->get(\'id\');
	 *
	 * @param   string  column to get
	 * @param   mixed   default value if the column does not exist
	 * @return  mixed
	 */",
 "/**
	 * Implements [Countable::count], returns the total number of rows.
	 *
	 *     echo count($result);
	 *
	 * @return  integer
	 */",
 "/**
	 * Implements [ArrayAccess::offsetExists], determines if row exists.
	 *
	 *     if (isset($result[10]))
	 *     {
	 *         // Row 10 exists
	 *     }
	 *
	 * @return  boolean
	 */",
 "/**
	 * Implements [ArrayAccess::offsetGet], gets a given row.
	 *
	 *     $row = $result[10];
	 *
	 * @return  mixed
	 */",
 "/**
	 * Implements [ArrayAccess::offsetSet], throws an error.
	 *
	 * [!!] You cannot modify a database result.
	 *
	 * @return  void
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Implements [ArrayAccess::offsetUnset], throws an error.
	 *
	 * [!!] You cannot modify a database result.
	 *
	 * @return  void
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Implements [Iterator::key], returns the current row number.
	 *
	 *     echo key($result);
	 *
	 * @return  integer
	 */",
 "/**
	 * Implements [Iterator::next], moves to the next row.
	 *
	 *     next($result);
	 *
	 * @return  $this
	 */",
 "/**
	 * Implements [Iterator::prev], moves to the previous row.
	 *
	 *     prev($result);
	 *
	 * @return  $this
	 */",
 "/**
	 * Implements [Iterator::rewind], sets the current row to zero.
	 *
	 *     rewind($result);
	 *
	 * @return  $this
	 */",
 "/**
	 * Implements [Iterator::valid], checks if the current row exists.
	 *
	 * [!!] This method is only used internally.
	 *
	 * @return  boolean
	 */",
 "/**
 * Database result wrapper.  See [Results](/database/results) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query/Result
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Create or redefine a SQL aggregate function.
	 *
	 * [!!] Works only with SQLite
	 *
	 * @link http://php.net/manual/function.pdo-sqlitecreateaggregate
	 *
	 * @param   string      $name       Name of the SQL function to be created or redefined
	 * @param   callback    $step       Called for each row of a result set
	 * @param   callback    $final      Called after all rows of a result set have been processed
	 * @param   integer     $arguments  Number of arguments that the SQL function takes
	 *
	 * @return  boolean
	 */",
 "/**
	 * Create or redefine a SQL function.
	 *
	 * [!!] Works only with SQLite
	 *
	 * @link http://php.net/manual/function.pdo-sqlitecreatefunction
	 *
	 * @param   string      $name       Name of the SQL function to be created or redefined
	 * @param   callback    $callback   Callback which implements the SQL function
	 * @param   integer     $arguments  Number of arguments that the SQL function takes
	 *
	 * @return  boolean
	 */",
 "/**
 * PDO database connection.
 *
 * @package    Kohana/Database
 * @category   Drivers
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * This method MUST be implemented by each driver to setup the `Cache`
	 * instance for each test.
	 * 
	 * This method should do the following tasks for each driver test:
	 * 
	 *  - Test the Cache instance driver is available, skip test otherwise
	 *  - Setup the Cache instance
	 *  - Call the parent setup method, `parent::setUp()`
	 *
	 * @return  void
	 */",
 "/**
	 * Tests the [Cache::set()] method, testing;
	 * 
	 *  - The value is cached
	 *  - The lifetime is respected
	 *  - The returned value type is as expected
	 *  - The default not-found value is respected
	 * 
	 * This test doesn\'t test the TTL as there is a known bug/feature
	 * in APC that prevents the same request from killing cache on timeout.
	 * 
	 * @link   http://pecl.php.net/bugs/bug.php?id=16814
	 * 
	 * @dataProvider provider_set_get
	 *
	 * @param   array    data 
	 * @param   mixed    expected 
	 * @return  void
	 */",
 "/**
*  @package    Kohana/Cache/Memcache
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Factory method for HTTP_Cache that provides a convenient dependency
	 * injector for the Cache library.
	 * 
	 *      // Create HTTP_Cache with named cache engine
	 *      $http_cache = HTTP_Cache::factory(\'memcache\', array(
	 *          \'allow_private_cache\' => FALSE
	 *          )
	 *      );
	 * 
	 *      // Create HTTP_Cache with supplied cache engine
	 *      $http_cache = HTTP_Cache::factory(Cache::instance(\'memcache\'),
	 *          array(
	 *              \'allow_private_cache\' => FALSE
	 *          )
	 *      );
	 *
	 * @uses    [Cache]
	 * @param   mixed    cache engine to use
	 * @param   array    options to set to this class
	 * @return  HTTP_Cache
	 */",
 "/**
	 * Basic cache key generator that hashes the entire request and returns
	 * it. This is fine for static content, or dynamic content where user
	 * specific information is encoded into the request.
	 * 
	 *      // Generate cache key
	 *      $cache_key = HTTP_Cache::basic_cache_key_generator($request);
	 *
	 * @param   Request   request 
	 * @return  string
	 */",
 "/**
	 * Constructor method for this class. Allows dependency injection of the
	 * required components such as `Cache` and the cache key generator.
	 *
	 * @param   array $options 
	 */",
 "/**
	 * Executes the supplied [Request] with the supplied [Request_Client].
	 * Before execution, the HTTP_Cache adapter checks the request type,
	 * destructive requests such as `POST`, `PUT` and `DELETE` will bypass
	 * cache completely and ensure the response is not cached. All other
	 * Request methods will allow caching, if the rules are met.
	 *
	 * @param   Request_Client  client to execute with Cache-Control
	 * @param   Request   request to execute with client
	 * @return  [Response]
	 */",
 "/**
	 * Invalidate a cached response for the [Request] supplied.
	 * This has the effect of deleting the response from the
	 * [Cache] entry.
	 *
	 * @param   Request  $request Response to remove from cache
	 * @return  void
	 */",
 "/**
	 * Getter and setter for the internal caching engine,
	 * used to cache responses if available and valid.
	 *
	 * @param   Kohana_Cache  cache engine to use for caching
	 * @return  Kohana_Cache
	 * @return  Kohana_Request_Client
	 */",
 "/**
	 * Gets or sets the [Request_Client::allow_private_cache] setting.
	 * If set to `TRUE`, the client will also cache cache-control directives
	 * that have the `private` setting.
	 *
	 * @see     http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9
	 * @param   boolean  allow caching of privately marked responses
	 * @return  boolean
	 * @return  [Request_Client]
	 */",
 "/**
	 * Sets or gets the cache key generator callback for this caching
	 * class. The cache key generator provides a unique hash based on the
	 * `Request` object passed to it.
	 * 
	 * The default generator is [HTTP_Cache::basic_cache_key_generator()], which
	 * serializes the entire `HTTP_Request` into a unique sha1 hash. This will
	 * provide basic caching for static and simple dynamic pages. More complex
	 * algorithms can be defined and then passed into `HTTP_Cache` using this
	 * method.
	 * 
	 *      // Get the cache key callback
	 *      $callback = $http_cache->cache_key_callback();
	 * 
	 *      // Set the cache key callback
	 *      $http_cache->cache_key_callback(\'Foo::cache_key\');
	 * 
	 *      // Alternatively, in PHP 5.3 use a closure
	 *      $http_cache->cache_key_callback(function (Request $request) {
	 *            return sha1($request->render());
	 *      });
	 *
	 * @param   callback  callback 
	 * @return  mixed
	 * @throws  HTTP_Exception
	 */",
 "/**
	 * Creates a cache key for the request to use for caching
	 * [Kohana_Response] returned by [Request::execute].
	 * 
	 * This is the default cache key generating logic, but can be overridden
	 * by setting [HTTP_Cache::cache_key_callback()].
	 *
	 * @param   Request   request to create key for
	 * @param   callback  optional callback to use instead of built-in method
	 * @return  string
	 */",
 "/**
	 * Controls whether the response can be cached. Uses HTTP
	 * protocol to determine whether the response can be cached.
	 *
	 * @link    RFC 2616 http://www.w3.org/Protocols/rfc2616/
	 * @param   Response  $response The Response
	 * @return  boolean
	 */",
 "/**
	 * Caches a [Response] using the supplied [Cache]
	 * and the key generated by [Request_Client::_create_cache_key].
	 *
	 * If not response is supplied, the cache will be checked for an existing
	 * one that is available.
	 *
	 * @param   string    the cache key to use
	 * @param   Request   the HTTP Request
	 * @param   Response  the HTTP Response
	 * @return  mixed
	 */",
 "/**
	 * Calculates the total Time To Live based on the specification
	 * RFC 2616 cache lifetime rules.
	 *
	 * @param   Response  $response  Response to evaluate
	 * @return  mixed  TTL value or false if the response should not be cached
	 */",
 "/**
	 * Returns the duration of the last request execution.
	 * Either returns the time of completed requests or
	 * `FALSE` if the request hasn\'t finished executing, or
	 * is yet to be run.
	 *
	 * @return  mixed
	 */",
 "/**
 * HTTT Caching adaptor class that provides caching services to the
 * [Request_Client] class, using HTTP cache control logic as defined in
 * RFC 2616.
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 * @since      3.2.0
 */",
 "/**
	 * Setup the enviroment for each test
	 *
	 * PHPUnit automatically backups up & restores global variables
	 */",
 "/**
	 * If for some reason arc != count(argv) then we need
	 * to fail gracefully.
	 *
	 * This test ensures it will
	 *
	 * @test
	 */",
 "/**
	 * Options should only parse arguments requested
	 *
	 * @test
	 */",
 "/**
	 * Options should not parse invalid arguments (i.e. not starting with --_
	 *
	 * @test
	 */",
 "/**
	 * Options should parse multiple arguments & values correctly
	 *
	 * @test
	 */",
 "/**
	 * Options should parse arguments without specified values as NULL
	 *
	 * @test
	 */",
 "/**
	 * If the argument contains an equals sign then it shouldn\'t be split
	 *
	 * @test
	 * @ticket 2642
	 */",
 "/**
	 * Arguments enclosed with quote marks should be allowed to contain
	 * spaces
	 *
	 * @test
	 */",
 "/**
 * Unit tests for CLI
 *
 * Based on the Kohana-unittest test
 *
 * @group kohana
 * @group kohana.cli
 *
 * @see CLI
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Set the table and columns for an insert.
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @param   array  column names
	 * @return  void
	 */",
 "/**
	 * Sets the table to insert into.
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @return  $this
	 */",
 "/**
	 * Set the columns that will be inserted.
	 *
	 * @param   array  column names
	 * @return  $this
	 */",
 "/**
	 * Adds or overwrites values. Multiple value sets can be added.
	 *
	 * @param   array   values list
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Use a sub-query to for the inserted values.
	 *
	 * @param   object  Database_Query of SELECT type
	 * @return  $this
	 */",
 "/**
	 * Compile the SQL query and return it.
	 *
	 * @param   object  Database instance
	 * @return  string
	 */",
 "/**
 * Database query builder for INSERT statements. See [Query Builder](/database/query/builder) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Recursively cleans arrays, objects, and strings. Removes ASCII control
	 * codes and converts to the requested charset while silently discarding
	 * incompatible characters.
	 *
	 *     UTF8::clean($_GET); // Clean GET data
	 *
	 * [!!] This method requires [Iconv](http://php.net/iconv)
	 *
	 * @param   mixed   variable to clean
	 * @param   string  character set, defaults to Kohana::$charset
	 * @return  mixed
	 * @uses    UTF8::strip_ascii_ctrl
	 * @uses    UTF8::is_ascii
	 */",
 "/**
	 * Tests whether a string contains only 7-bit ASCII bytes. This is used to
	 * determine when to use native functions or UTF-8 functions.
	 *
	 *     $ascii = UTF8::is_ascii($str);
	 *
	 * @param   mixed    string or array of strings to check
	 * @return  boolean
	 */",
 "/**
	 * Strips out device control codes in the ASCII range.
	 *
	 *     $str = UTF8::strip_ascii_ctrl($str);
	 *
	 * @param   string  string to clean
	 * @return  string
	 */",
 "/**
	 * Strips out all non-7bit ASCII bytes.
	 *
	 *     $str = UTF8::strip_non_ascii($str);
	 *
	 * @param   string  string to clean
	 * @return  string
	 */",
 "/**
	 * Replaces special/accented UTF-8 characters by ASCII-7 \"equivalents\".
	 *
	 *     $ascii = UTF8::transliterate_to_ascii($utf8);
	 *
	 * @author  Andreas Gohr <andi@splitbrain.org>
	 * @param   string   string to transliterate
	 * @param   integer  -1 lowercase only, +1 uppercase only, 0 both cases
	 * @return  string
	 */",
 "/**
	 * Returns the length of the given string. This is a UTF8-aware version
	 * of [strlen](http://php.net/strlen).
	 *
	 *     $length = UTF8::strlen($str);
	 *
	 * @param   string   string being measured for length
	 * @return  integer
	 * @uses    UTF8::$server_utf8
	 */",
 "/**
	 * Finds position of first occurrence of a UTF-8 string. This is a
	 * UTF8-aware version of [strpos](http://php.net/strpos).
	 *
	 *     $position = UTF8::strpos($str, $search);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   haystack
	 * @param   string   needle
	 * @param   integer  offset from which character in haystack to start searching
	 * @return  integer  position of needle
	 * @return  boolean  FALSE if the needle is not found
	 * @uses    UTF8::$server_utf8
	 */",
 "/**
	 * Finds position of last occurrence of a char in a UTF-8 string. This is
	 * a UTF8-aware version of [strrpos](http://php.net/strrpos).
	 *
	 *     $position = UTF8::strrpos($str, $search);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   haystack
	 * @param   string   needle
	 * @param   integer  offset from which character in haystack to start searching
	 * @return  integer  position of needle
	 * @return  boolean  FALSE if the needle is not found
	 * @uses    UTF8::$server_utf8
	 */",
 "/**
	 * Returns part of a UTF-8 string. This is a UTF8-aware version
	 * of [substr](http://php.net/substr).
	 *
	 *     $sub = UTF8::substr($str, $offset);
	 *
	 * @author  Chris Smith <chris@jalakai.co.uk>
	 * @param   string   input string
	 * @param   integer  offset
	 * @param   integer  length limit
	 * @return  string
	 * @uses    UTF8::$server_utf8
	 * @uses    Kohana::$charset
	 */",
 "/**
	 * Replaces text within a portion of a UTF-8 string. This is a UTF8-aware
	 * version of [substr_replace](http://php.net/substr_replace).
	 *
	 *     $str = UTF8::substr_replace($str, $replacement, $offset);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   input string
	 * @param   string   replacement string
	 * @param   integer  offset
	 * @return  string
	 */",
 "/**
	 * Makes a UTF-8 string lowercase. This is a UTF8-aware version
	 * of [strtolower](http://php.net/strtolower).
	 *
	 *     $str = UTF8::strtolower($str);
	 *
	 * @author  Andreas Gohr <andi@splitbrain.org>
	 * @param   string   mixed case string
	 * @return  string
	 * @uses    UTF8::$server_utf8
	 */",
 "/**
	 * Makes a UTF-8 string uppercase. This is a UTF8-aware version
	 * of [strtoupper](http://php.net/strtoupper).
	 *
	 * @author  Andreas Gohr <andi@splitbrain.org>
	 * @param   string   mixed case string
	 * @return  string
	 * @uses    UTF8::$server_utf8
	 * @uses    Kohana::$charset
	 */",
 "/**
	 * Makes a UTF-8 string\'s first character uppercase. This is a UTF8-aware
	 * version of [ucfirst](http://php.net/ucfirst).
	 *
	 *     $str = UTF8::ucfirst($str);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   mixed case string
	 * @return  string
	 */",
 "/**
	 * Makes the first character of every word in a UTF-8 string uppercase.
	 * This is a UTF8-aware version of [ucwords](http://php.net/ucwords).
	 *
	 *     $str = UTF8::ucwords($str);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   mixed case string
	 * @return  string
	 * @uses    UTF8::$server_utf8
	 */",
 "/**
	 * Case-insensitive UTF-8 string comparison. This is a UTF8-aware version
	 * of [strcasecmp](http://php.net/strcasecmp).
	 *
	 *     $compare = UTF8::strcasecmp($str1, $str2);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   string to compare
	 * @param   string   string to compare
	 * @return  integer  less than 0 if str1 is less than str2
	 * @return  integer  greater than 0 if str1 is greater than str2
	 * @return  integer  0 if they are equal
	 */",
 "/**
	 * Returns a string or an array with all occurrences of search in subject
	 * (ignoring case) and replaced with the given replace value. This is a
	 * UTF8-aware version of [str_ireplace](http://php.net/str_ireplace).
	 *
	 * [!!] This function is very slow compared to the native version. Avoid
	 * using it when possible.
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com
	 * @param   string|array  text to replace
	 * @param   string|array  replacement text
	 * @param   string|array  subject text
	 * @param   integer       number of matched and replaced needles will be returned via this parameter which is passed by reference
	 * @return  string        if the input was a string
	 * @return  array         if the input was an array
	 */",
 "/**
	 * Case-insenstive UTF-8 version of strstr. Returns all of input string
	 * from the first occurrence of needle to the end. This is a UTF8-aware
	 * version of [stristr](http://php.net/stristr).
	 *
	 *     $found = UTF8::stristr($str, $search);
	 *
	 * @author Harry Fuecks <hfuecks@gmail.com>
	 * @param   string  input string
	 * @param   string  needle
	 * @return  string  matched substring if found
	 * @return  FALSE   if the substring was not found
	 */",
 "/**
	 * Finds the length of the initial segment matching mask. This is a
	 * UTF8-aware version of [strspn](http://php.net/strspn).
	 *
	 *     $found = UTF8::strspn($str, $mask);
	 *
	 * @author Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   input string
	 * @param   string   mask for search
	 * @param   integer  start position of the string to examine
	 * @param   integer  length of the string to examine
	 * @return  integer  length of the initial segment that contains characters in the mask
	 */",
 "/**
	 * Finds the length of the initial segment not matching mask. This is a
	 * UTF8-aware version of [strcspn](http://php.net/strcspn).
	 *
	 *     $found = UTF8::strcspn($str, $mask);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   input string
	 * @param   string   mask for search
	 * @param   integer  start position of the string to examine
	 * @param   integer  length of the string to examine
	 * @return  integer  length of the initial segment that contains characters not in the mask
	 */",
 "/**
	 * Pads a UTF-8 string to a certain length with another string. This is a
	 * UTF8-aware version of [str_pad](http://php.net/str_pad).
	 *
	 *     $str = UTF8::str_pad($str, $length);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   input string
	 * @param   integer  desired string length after padding
	 * @param   string   string to use as padding
	 * @param   string   padding type: STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH
	 * @return  string
	 */",
 "/**
	 * Converts a UTF-8 string to an array. This is a UTF8-aware version of
	 * [str_split](http://php.net/str_split).
	 *
	 *     $array = UTF8::str_split($str);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   input string
	 * @param   integer  maximum length of each chunk
	 * @return  array
	 */",
 "/**
	 * Reverses a UTF-8 string. This is a UTF8-aware version of [strrev](http://php.net/strrev).
	 *
	 *     $str = UTF8::strrev($str);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   string to be reversed
	 * @return  string
	 */",
 "/**
	 * Strips whitespace (or other UTF-8 characters) from the beginning and
	 * end of a string. This is a UTF8-aware version of [trim](http://php.net/trim).
	 *
	 *     $str = UTF8::trim($str);
	 *
	 * @author  Andreas Gohr <andi@splitbrain.org>
	 * @param   string   input string
	 * @param   string   string of characters to remove
	 * @return  string
	 */",
 "/**
	 * Strips whitespace (or other UTF-8 characters) from the beginning of
	 * a string. This is a UTF8-aware version of [ltrim](http://php.net/ltrim).
	 *
	 *     $str = UTF8::ltrim($str);
	 *
	 * @author  Andreas Gohr <andi@splitbrain.org>
	 * @param   string   input string
	 * @param   string   string of characters to remove
	 * @return  string
	 */",
 "/**
	 * Strips whitespace (or other UTF-8 characters) from the end of a string.
	 * This is a UTF8-aware version of [rtrim](http://php.net/rtrim).
	 *
	 *     $str = UTF8::rtrim($str);
	 *
	 * @author  Andreas Gohr <andi@splitbrain.org>
	 * @param   string   input string
	 * @param   string   string of characters to remove
	 * @return  string
	 */",
 "/**
	 * Returns the unicode ordinal for a character. This is a UTF8-aware
	 * version of [ord](http://php.net/ord).
	 *
	 *     $digit = UTF8::ord($character);
	 *
	 * @author  Harry Fuecks <hfuecks@gmail.com>
	 * @param   string   UTF-8 encoded character
	 * @return  integer
	 */",
 "/**
	 * Takes an UTF-8 string and returns an array of ints representing the Unicode characters.
	 * Astral planes are supported i.e. the ints in the output can be > 0xFFFF.
	 * Occurrences of the BOM are ignored. Surrogates are not allowed.
	 *
	 *     $array = UTF8::to_unicode($str);
	 *
	 * The Original Code is Mozilla Communicator client code.
	 * The Initial Developer of the Original Code is Netscape Communications Corporation.
	 * Portions created by the Initial Developer are Copyright (C) 1998 the Initial Developer.
	 * Ported to PHP by Henri Sivonen <hsivonen@iki.fi>, see <http://hsivonen.iki.fi/php-utf8/>
	 * Slight modifications to fit with phputf8 library by Harry Fuecks <hfuecks@gmail.com>
	 *
	 * @param   string  UTF-8 encoded string
	 * @return  array   unicode code points
	 * @return  FALSE   if the string is invalid
	 */",
 "/**
	 * Takes an array of ints representing the Unicode characters and returns a UTF-8 string.
	 * Astral planes are supported i.e. the ints in the input can be > 0xFFFF.
	 * Occurrances of the BOM are ignored. Surrogates are not allowed.
	 *
	 *     $str = UTF8::to_unicode($array);
	 *
	 * The Original Code is Mozilla Communicator client code.
	 * The Initial Developer of the Original Code is Netscape Communications Corporation.
	 * Portions created by the Initial Developer are Copyright (C) 1998 the Initial Developer.
	 * Ported to PHP by Henri Sivonen <hsivonen@iki.fi>, see http://hsivonen.iki.fi/php-utf8/
	 * Slight modifications to fit with phputf8 library by Harry Fuecks <hfuecks@gmail.com>.
	 *
	 * @param   array    unicode code points representing a string
	 * @return  string   utf8 string of characters
	 * @return  boolean  FALSE if a code point cannot be found
	 */",
 "/**
 * A port of [phputf8](http://phputf8.sourceforge.net/) to a unified set
 * of files. Provides multi-byte aware replacement string functions.
 *
 * For UTF-8 support to work correctly, the following requirements must be met:
 *
 * - PCRE needs to be compiled with UTF-8 support (--enable-utf8)
 * - Support for [Unicode properties](http://php.net/manual/reference.pcre.pattern.modifiers.php)
 *   is highly recommended (--enable-unicode-properties)
 * - UTF-8 conversion will be much more reliable if the
 *   [iconv extension](http://php.net/iconv) is loaded
 * - The [mbstring extension](http://php.net/mbstring) is highly recommended,
 *   but must not be overloading string functions
 *
 * [!!] This file is licensed differently from the rest of Kohana. As a port of
 * [phputf8](http://phputf8.sourceforge.net/), this file is released under the LGPL.
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Creates and returns a new model.
	 *
	 * @chainable
	 * @param   string  $model  Model name
	 * @param   mixed   $id     Parameter for find()
	 * @return  ORM
	 */",
 "/**
	 * Constructs a new model and loads a record if given
	 *
	 * @param   mixed $id Parameter for find or object to load
	 * @return  void
	 */",
 "/**
	 * Prepares the model database connection, determines the table name,
	 * and loads column information.
	 *
	 * @return void
	 */",
 "/**
	 * Initializes validation rules, and labels
	 *
	 * @return void
	 */",
 "/**
	 * Reload column definitions.
	 *
	 * @chainable
	 * @param   boolean $force Force reloading
	 * @return  ORM
	 */",
 "/**
	 * Unloads the current object and clears the status.
	 *
	 * @chainable
	 * @return ORM
	 */",
 "/**
	 * Reloads the current object from the database.
	 *
	 * @chainable
	 * @return ORM
	 */",
 "/**
	 * Checks if object data is set.
	 *
	 * @param  string $column Column name
	 * @return boolean
	 */",
 "/**
	 * Unsets object data.
	 *
	 * @param  string $column Column name
	 * @return void
	 */",
 "/**
	 * Displays the primary key of a model when it is converted to a string.
	 *
	 * @return string
	 */",
 "/**
	 * Allows serialization of only the object data and state, to prevent
	 * \"stale\" objects being unserialized, which also requires less memory.
	 *
	 * @return array
	 */",
 "/**
	 * Check whether the model data has been modified.
	 * If $field is specified, checks whether that field was modified.
	 *
	 * @param string  field to check for changes
	 * @return  bool  Whether or not the field has changed
	 */",
 "/**
	 * Prepares the database connection and reloads the object.
	 *
	 * @param string $data String for unserialization
	 * @return  void
	 */",
 "/**
	 * Handles retrieval of all model values, relationships, and metadata.
	 *
	 * @param   string $column Column name
	 * @return  mixed
	 */",
 "/**
	 * Base set method - this should not be overridden.
	 *
	 * @param  string $column  Column name
	 * @param  mixed  $value   Column value
	 * @return void
	 */",
 "/**
	 * Handles setting of column
	 *
	 * @param  string $column Column name
	 * @param  mixed  $value  Column value
	 * @return void
	 */",
 "/**
	 * Set values from an array with support for one-one relationships.  This method should be used
	 * for loading in post data, etc.
	 *
	 * @param  array $values   Array of column => val
	 * @param  array $expected Array of keys to take from $values
	 * @return ORM
	 */",
 "/**
	 * Returns the values of this object as an array, including any related one-one
	 * models that have already been loaded using with()
	 *
	 * @return array
	 */",
 "/**
	 * Binds another one-to-one object to this model.  One-to-one objects
	 * can be nested using \'object1:object2\' syntax
	 *
	 * @param  string $target_path Target model to bind to
	 * @return void
	 */",
 "/**
	 * Initializes the Database Builder to given query type
	 *
	 * @param  integer $type Type of Database query
	 * @return ORM
	 */",
 "/**
	 * Finds and loads a single database row into the object.
	 *
	 * @chainable
	 * @return ORM
	 */",
 "/**
	 * Finds multiple database rows and returns an iterator of the rows found.
	 *
	 * @return Database_Result
	 */",
 "/**
	 * Loads a database result, either as a new record for this model, or as
	 * an iterator for multiple rows.
	 *
	 * @chainable
	 * @param  bool $multiple Return an iterator or load a single row
	 * @return ORM|Database_Result
	 */",
 "/**
	 * Loads an array of values into into the current object.
	 *
	 * @chainable
	 * @param  array $values Values to load
	 * @return ORM
	 */",
 "/**
	 * Rule definitions for validation
	 *
	 * @return array
	 */",
 "/**
	 * Filters a value for a specific column
	 *
	 * @param  string $field  The column name
	 * @param  string $value  The value to filter
	 * @return string
	 */",
 "/**
	 * Filter definitions for validation
	 *
	 * @return array
	 */",
 "/**
	 * Label definitions for validation
	 *
	 * @return array
	 */",
 "/**
	 * Validates the current model\'s data
	 *
	 * @param  Validation $extra_validation Validation object
	 * @return ORM
	 */",
 "/**
	 * Insert a new object to the database
	 * @param  Validation $validation Validation object
	 * @return ORM
	 */",
 "/**
	 * Updates a single record or multiple records
	 *
	 * @chainable
	 * @param  Validation $validation Validation object
	 * @return ORM
	 */",
 "/**
	 * Updates or Creates the record depending on loaded()
	 *
	 * @chainable
	 * @param  Validation $validation Validation object
	 * @return ORM
	 */",
 "/**
	 * Deletes a single record or multiple records, ignoring relationships.
	 *
	 * @chainable
	 * @return ORM
	 */",
 "/**
	 * Tests if this object has a relationship to a different model,
	 * or an array of different models.
	 *
	 *     // Check if $model has the login role
	 *     $model->has(\'roles\', ORM::factory(\'role\', array(\'name\' => \'login\')));
	 *     // Check for the login role if you know the roles.id is 5
	 *     $model->has(\'roles\', 5);
	 *     // Check for all of the following roles
	 *     $model->has(\'roles\', array(1, 2, 3, 4));
	 *     // Check if $model has any roles
	 *     $model->has(\'roles\')
	 *
	 * @param  string  $alias    Alias of the has_many \"through\" relationship
	 * @param  mixed   $far_keys Related model, primary key, or an array of primary keys
	 * @return Database_Result
	 */",
 "/**
	 * Adds a new relationship to between this model and another.
	 *
	 *     // Add the login role using a model instance
	 *     $model->add(\'roles\', ORM::factory(\'role\', array(\'name\' => \'login\')));
	 *     // Add the login role if you know the roles.id is 5
	 *     $model->add(\'roles\', 5);
	 *     // Add multiple roles (for example, from checkboxes on a form)
	 *     $model->add(\'roles\', array(1, 2, 3, 4));
	 *
	 * @param  string  $alias    Alias of the has_many \"through\" relationship
	 * @param  mixed   $far_keys Related model, primary key, or an array of primary keys
	 * @return ORM
	 */",
 "/**
	 * Removes a relationship between this model and another.
	 *
	 *     // Remove a role using a model instance
	 *     $model->remove(\'roles\', ORM::factory(\'role\', array(\'name\' => \'login\')));
	 *     // Remove the role knowing the primary key
	 *     $model->remove(\'roles\', 5);
	 *     // Remove multiple roles (for example, from checkboxes on a form)
	 *     $model->remove(\'roles\', array(1, 2, 3, 4));
	 *     // Remove all related roles
	 *     $model->remove(\'roles\');
	 *
	 * @param  string $alias    Alias of the has_many \"through\" relationship
	 * @param  mixed  $far_keys Related model, primary key, or an array of primary keys
	 * @return ORM
	 */",
 "/**
	 * Count the number of records in the table.
	 *
	 * @return integer
	 */",
 "/**
	 * Proxy method to Database list_columns.
	 *
	 * @return array
	 */",
 "/**
	 * Returns an ORM model for the given one-one related alias
	 *
	 * @param  string $alias Alias name
	 * @return ORM
	 */",
 "/**
	 * Returns the value of the primary key
	 *
	 * @return mixed Primary key
	 */",
 "/**
	 * Returns last executed query
	 *
	 * @return string
	 */",
 "/**
	 * Clears query builder.  Passing FALSE is useful to keep the existing
	 * query conditions for another query.
	 *
	 * @param bool $next Pass FALSE to avoid resetting on the next call
	 * @return ORM
	 */",
 "/**
	 * Alias of and_where()
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Creates a new \"AND WHERE\" condition for the query.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Creates a new \"OR WHERE\" condition for the query.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Alias of and_where_open()
	 *
	 * @return  $this
	 */",
 "/**
	 * Opens a new \"AND WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Opens a new \"OR WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"AND WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"AND WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"OR WHERE (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Applies sorting with \"ORDER BY ...\"
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  direction of sorting
	 * @return  $this
	 */",
 "/**
	 * Return up to \"LIMIT ...\" results
	 *
	 * @param   integer  maximum results to return
	 * @return  $this
	 */",
 "/**
	 * Enables or disables selecting only unique columns using \"SELECT DISTINCT\"
	 *
	 * @param   boolean  enable or disable distinct columns
	 * @return  $this
	 */",
 "/**
	 * Choose the columns to select from.
	 *
	 * @param   mixed  column name or array($column, $alias) or object
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Choose the tables to select \"FROM ...\"
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Adds addition tables to \"JOIN ...\".
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  join type (LEFT, RIGHT, INNER, etc)
	 * @return  $this
	 */",
 "/**
	 * Adds \"ON ...\" conditions for the last created JOIN statement.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column name or array($column, $alias) or object
	 * @return  $this
	 */",
 "/**
	 * Creates a \"GROUP BY ...\" filter.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Alias of and_having()
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Creates a new \"AND HAVING\" condition for the query.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Creates a new \"OR HAVING\" condition for the query.
	 *
	 * @param   mixed   column name or array($column, $alias) or object
	 * @param   string  logic operator
	 * @param   mixed   column value
	 * @return  $this
	 */",
 "/**
	 * Alias of and_having_open()
	 *
	 * @return  $this
	 */",
 "/**
	 * Opens a new \"AND HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Opens a new \"OR HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"AND HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"AND HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Closes an open \"OR HAVING (...)\" grouping.
	 *
	 * @return  $this
	 */",
 "/**
	 * Start returning results after \"OFFSET ...\"
	 *
	 * @param   integer   starting result number
	 * @return  $this
	 */",
 "/**
	 * Enables the query to be cached for a specified amount of time.
	 *
	 * @param   integer  number of seconds to cache
	 * @return  $this
	 * @uses    Kohana::$cache_life
	 */",
 "/**
	 * Set the value of a parameter in the query.
	 *
	 * @param   string   parameter key to replace
	 * @param   mixed    value to use
	 * @return  $this
	 */",
 "/**
	 * Checks whether a column value is unique.
	 * Excludes itself if loaded.
	 *
	 * @param   string   the field to check for uniqueness
	 * @param   mixed    the value to check for uniqueness
	 * @return  bool     whteher the value is unique
	 */",
 "/**
 * [Object Relational Mapping][ref-orm] (ORM) is a method of abstracting database
 * access to standard PHP calls. All table rows are represented as model objects,
 * with object properties representing row data. ORM in Kohana generally follows
 * the [Active Record][ref-act] pattern.
 *
 * [ref-orm]: http://wikipedia.org/wiki/Object-relational_mapping
 * [ref-act]: http://wikipedia.org/wiki/Active_record
 *
 * @package    Kohana/ORM
 * @author     Kohana Team
 * @copyright  (c) 2007-2010 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates a predefined environment using the default environment
	 *
	 * Extending classes that have their own setUp() should call
	 * parent::setUp()
	 */",
 "/**
	 * Restores the original environment overriden with setEnvironment()
	 *
	 * Extending classes that have their own tearDown()
	 * should call parent::tearDown()
	 */",
 "/**
	 * Removes all kohana related cache files in the cache directory
	 */",
 "/**
	 * Helper function that replaces all occurences of \'/\' with
	 * the OS-specific directory separator
	 *
	 * @param string $path The path to act on
	 * @return string
	 */",
 "/**
	 * Allows easy setting & backing up of enviroment config
	 *
	 * Option types are checked in the following order:
	 *
	 * * Server Var
	 * * Static Variable
	 * * Config option
	 *
	 * @param array $environment List of environment to set
	 */",
 "/**
	 * Check for internet connectivity
	 *
	 * @return boolean Whether an internet connection is available
	 */",
 "/**
	 * Asserts that a variable is of a given type.
	 *
	 * @param string $expected
	 * @param mixed  $actual
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that an attribute is of a given type.
	 *
	 * @param string $expected
	 * @param string $attributeName
	 * @param mixed  $classOrObject
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that a variable is not of a given type.
	 *
	 * @param string $expected
	 * @param mixed  $actual
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that an attribute is of a given type.
	 *
	 * @param string $expected
	 * @param string $attributeName
	 * @param mixed  $classOrObject
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that a variable is of a given type.
	 *
	 * @param string $expected
	 * @param mixed  $actual
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that an attribute is of a given type.
	 *
	 * @param string $expected
	 * @param string $attributeName
	 * @param mixed  $classOrObject
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that a variable is not of a given type.
	 *
	 * @param string $expected
	 * @param mixed  $actual
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
	 * Asserts that an attribute is of a given type.
	 *
	 * @param string $expected
	 * @param string $attributeName
	 * @param mixed  $classOrObject
	 * @param string $message
	 * @since Method available since Release 3.5.0
	 */",
 "/**
 * A version of the stock PHPUnit testcase that includes some extra helpers
 * and default settings
 */",
 "/**
	 * Starts a new benchmark and returns a unique token. The returned token
	 * _must_ be used when stopping the benchmark.
	 *
	 *     $token = Profiler::start(\'test\', \'profiler\');
	 *
	 * @param   string  group name
	 * @param   string  benchmark name
	 * @return  string
	 */",
 "/**
	 * Stops a benchmark.
	 *
	 *     Profiler::stop($token);
	 *
	 * @param   string  token
	 * @return  void
	 */",
 "/**
	 * Deletes a benchmark. If an error occurs during the benchmark, it is
	 * recommended to delete the benchmark to prevent statistics from being
	 * adversely affected.
	 *
	 *     Profiler::delete($token);
	 *
	 * @param   string  token
	 * @return  void
	 */",
 "/**
	 * Returns all the benchmark tokens by group and name as an array.
	 *
	 *     $groups = Profiler::groups();
	 *
	 * @return  array
	 */",
 "/**
	 * Gets the min, max, average and total of a set of tokens as an array.
	 *
	 *     $stats = Profiler::stats($tokens);
	 *
	 * @param   array  profiler tokens
	 * @return  array  min, max, average, total
	 * @uses    Profiler::total
	 */",
 "/**
	 * Gets the min, max, average and total of profiler groups as an array.
	 *
	 *     $stats = Profiler::group_stats(\'test\');
	 *
	 * @param   mixed  single group name string, or array with group names; all groups by default
	 * @return  array  min, max, average, total
	 * @uses    Profiler::groups
	 * @uses    Profiler::stats
	 */",
 "/**
	 * Gets the total execution time and memory usage of a benchmark as a list.
	 *
	 *     list($time, $memory) = Profiler::total($token);
	 *
	 * @param   string  token
	 * @return  array   execution time, memory
	 */",
 "/**
	 * Gets the total application run time and memory usage. Caches the result
	 * so that it can be compared between requests.
	 *
	 *     list($time, $memory) = Profiler::application();
	 *
	 * @return  array  execution time, memory
	 * @uses    Kohana::cache
	 */",
 "/**
 * Provides simple benchmarking and profiling. To display the statistics that
 * have been collected, load the `profiler/stats` [View]:
 *
 *     echo View::factory(\'profiler/stats\');
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Returns the English ordinal suffix (th, st, nd, etc) of a number.
	 *
	 *     echo 2, Num::ordinal(2);   // \"2nd\"
	 *     echo 10, Num::ordinal(10); // \"10th\"
	 *     echo 33, Num::ordinal(33); // \"33rd\"
	 *
	 * @param   integer  number
	 * @return  string
	 */",
 "/**
	 * Locale-aware number and monetary formatting.
	 *
	 *     // In English, \"1,200.05\"
	 *     // In Spanish, \"1200,05\"
	 *     // In Portuguese, \"1 200,05\"
	 *     echo Num::format(1200.05, 2);
	 *
	 *     // In English, \"1,200.05\"
	 *     // In Spanish, \"1.200,05\"
	 *     // In Portuguese, \"1.200.05\"
	 *     echo Num::format(1200.05, 2, TRUE);
	 *
	 * @param   float    number to format
	 * @param   integer  decimal places
	 * @param   boolean  monetary formatting?
	 * @return  string
	 * @since   3.0.2
	 */",
 "/**
	 * Round a number to a specified precision, using a specified tie breaking technique
	 *
	 * @param float $value Number to round
	 * @param integer $precision Desired precision
	 * @param integer $mode Tie breaking mode, accepts the PHP_ROUND_HALF_* constants
	 * @param boolean $native Set to false to force use of the userland implementation
	 * @return float Rounded number
	 */",
 "/**
	 * Converts a file size number to a byte value. File sizes are defined in
	 * the format: SB, where S is the size (1, 8.5, 300, etc.) and B is the
	 * byte unit (K, MiB, GB, etc.). All valid byte units are defined in
	 * Num::$byte_units
	 *
	 *     echo Num::bytes(\'200K\');  // 204800
	 *     echo Num::bytes(\'5MiB\');  // 5242880
	 *     echo Num::bytes(\'1000\');  // 1000
	 *     echo Num::bytes(\'2.5GB\'); // 2684354560
	 *
	 * @param   string   file size in SB format
	 * @return  float
	 */",
 "/**
 * Number helper class. Provides additional formatting methods that for working
 * with numbers.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Set the table for a delete.
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @return  void
	 */",
 "/**
	 * Sets the table to delete from.
	 *
	 * @param   mixed  table name or array($table, $alias) or object
	 * @return  $this
	 */",
 "/**
	 * Compile the SQL query and return it.
	 *
	 * @param   object  Database instance
	 * @return  string
	 */",
 "/**
 * Database query builder for DELETE statements. See [Query Builder](/database/query/builder) for usage and examples.
 *
 * @package    Kohana/Database
 * @category   Query
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Select the database
	 *
	 * @param   string  Database
	 * @return  void
	 */",
 "/**
	 * Start a SQL transaction
	 *
	 * @link http://dev.mysql.com/doc/refman/5.0/en/set-transaction.html
	 *
	 * @param string Isolation level
	 * @return boolean
	 */",
 "/**
	 * Commit a SQL transaction
	 *
	 * @param string Isolation level
	 * @return boolean
	 */",
 "/**
	 * Rollback a SQL transaction
	 *
	 * @param string Isolation level
	 * @return boolean
	 */",
 "/**
 * MySQL database connection.
 *
 * @package    Kohana/Database
 * @category   Drivers
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
	 * Creates a new controller instance. Each controller must be constructed
	 * with the request object that created it.
	 *
	 * @param   Request   $request  Request that created the controller
	 * @param   Response  $response The request\'s response
	 * @return  void
	 */",
 "/**
	 * Automatically executed before the controller action. Can be used to set
	 * class properties, do authorization checks, and execute other custom code.
	 *
	 * @return  void
	 */",
 "/**
	 * Automatically executed after the controller action. Can be used to apply
	 * transformation to the request response, add extra output, and execute
	 * other custom code.
	 *
	 * @return  void
	 */",
 "/**
 * Abstract controller class. Controllers should only be created using a [Request].
 *
 * Controllers methods will be automatically called in the following order by
 * the request:
 *
 *     $controller = new Controller_Foo($request);
 *     $controller->before();
 *     $controller->action_bar();
 *     $controller->after();
 *
 * The controller action should add the output it creates to
 * `$this->response->body($output)`, typically in the form of a [View], during the
 * \"action\" part of execution.
 *
 * @package    Kohana
 * @category   Controller
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * Kohana user guide and api browser.
 *
 * @package    Kohana/Userguide
 * @category   Controllers
 * @author     Kohana Team
 */",
 "/**
	 * Provides test data for test_alpha()
	 * @return array
	 */",
 "/**
	 * Tests Valid::alpha()
	 *
	 * Checks whether a string consists of alphabetical characters only.
	 *
	 * @test
	 * @dataProvider provider_alpha
	 * @param string  $string
	 * @param boolean $expected
	 */",
 "/**
	 * Tests Valid::alpha_numberic()
	 *
	 * Checks whether a string consists of alphabetical characters and numbers only.
	 *
	 * @test
	 * @dataProvider provide_alpha_numeric
	 * @param string  $input     The string to test
	 * @param boolean $expected  Is $input valid
	 */",
 "/**
	 * Provides test data for test_alpha_dash
	 */",
 "/**
	 * Tests Valid::alpha_dash()
	 *
	 * Checks whether a string consists of alphabetical characters, numbers, underscores and dashes only.
	 *
	 * @test
	 * @dataProvider provider_alpha_dash
	 * @param string  $input          The string to test
	 * @param boolean $contains_utf8  Does the string contain utf8 specific characters
	 * @param boolean $expected       Is $input valid?
	 */",
 "/**
	 * DataProvider for the valid::date() test
	 */",
 "/**
	 * Tests Valid::date()
	 *
	 * @test
	 * @dataProvider provider_date
	 * @param string  $date  The date to validate
	 * @param integer $expected
	 */",
 "/**
	 * DataProvider for the valid::decimal() test
	 */",
 "/**
	 * Tests Valid::decimal()
	 *
	 * @test
	 * @dataProvider provider_decimal
	 * @param string  $decimal  The decimal to validate
	 * @param integer $places   The number of places to check to
	 * @param integer $digits   The number of digits preceding the point to check
	 * @param boolean $expected Whether $decimal conforms to $places AND $digits
	 */",
 "/**
	 * Provides test data for test_digit
	 * @return array
	 */",
 "/**
	 * Tests Valid::digit()
	 *
	 * @test
	 * @dataProvider provider_digit
	 * @param mixed   $input     Input to validate
	 * @param boolean $expected  Is $input valid
	 */",
 "/**
	 * DataProvider for the valid::color() test
	 */",
 "/**
	 * Tests Valid::color()
	 *
	 * @test
	 * @dataProvider provider_color
	 * @param string  $color     The color to test
	 * @param boolean $expected  Is $color valid
	 */",
 "/**
	 * Provides test data for test_credit_card()
	 */",
 "/**
	 * Tests Valid::credit_card()
	 *
	 * @test
	 * @covers Valid::credit_card
	 * @dataProvider  provider_credit_card()
	 * @param string  $number   Credit card number
	 * @param string  $type	    Credit card type
	 * @param boolean $expected
	 */",
 "/**
	 * Provides test data for test_credit_card()
	 */",
 "/**
	 * Tests Valid::luhn()
	 *
	 * @test
	 * @covers Valid::luhn
	 * @dataProvider  provider_luhn()
	 * @param string  $number   Credit card number
	 * @param boolean $expected
	 */",
 "/**
	 * Provides test data for test_email()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Valid::email()
	 *
	 * Check an email address for correct format.
	 *
	 * @test
	 * @dataProvider provider_email
	 * @param string  $email   Address to check
	 * @param boolean $strict  Use strict settings
	 * @param boolean $correct Is $email address valid?
	 */",
 "/**
	 * Returns test data for test_email_domain()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Valid::email_domain()
	 *
	 * Validate the domain of an email address by checking if the domain has a
	 * valid MX record.
	 *
	 * Test skips on windows
	 *
	 * @test
	 * @dataProvider provider_email_domain
	 * @param string  $email   Email domain to check
	 * @param boolean $correct Is it correct?
	 */",
 "/**
	 * Provides data for test_exact_length()
	 *
	 * @return array
	 */",
 "/**
	 *
	 * Tests Valid::exact_length()
	 *
	 * Checks that a field is exactly the right length.
	 *
	 * @test
	 * @dataProvider provider_exact_length
	 * @param string  $string  The string to length check
	 * @param integer $length  The length of the string
	 * @param boolean $correct Is $length the actual length of the string?
	 * @return bool
	 */",
 "/**
	 * Provides data for test_equals()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Valid::equals()
	 *
	 * @test
	 * @dataProvider provider_equals
	 * @param   string   $string    value to check
	 * @param   integer  $required  required value
	 * @param   boolean  $correct   is $string the same as $required?
	 * @return  boolean
	 */",
 "/**
	 * DataProvider for the valid::ip() test
	 * @return array
	 */",
 "/**
	 * Tests Valid::ip()
	 *
	 * @test
	 * @dataProvider  provider_ip
	 * @param string  $input_ip
	 * @param boolean $allow_private
	 * @param boolean $expected_result
	 */",
 "/**
	 * Returns test data for test_max_length()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Valid::max_length()
	 *
	 * Checks that a field is short enough.
	 *
	 * @test
	 * @dataProvider provider_max_length
	 * @param string  $string    String to test
	 * @param integer $maxlength Max length for this string
	 * @param boolean $correct   Is $string <= $maxlength
	 */",
 "/**
	 * Returns test data for test_min_length()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Valid::min_length()
	 *
	 * Checks that a field is long enough.
	 *
	 * @test
	 * @dataProvider provider_min_length
	 * @param string  $string     String to compare
	 * @param integer $minlength  The minimum allowed length
	 * @param boolean $correct    Is $string \'s length >= $minlength
	 */",
 "/**
	 * Returns test data for test_not_empty()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Valid::not_empty()
	 *
	 * Checks if a field is not empty.
	 *
	 * @test
	 * @dataProvider provider_not_empty
	 * @param mixed   $value  Value to check
	 * @param boolean $empty  Is the value really empty?
	 */",
 "/**
	 * DataProvider for the Valid::numeric() test
	 */",
 "/**
	 * Tests Valid::numeric()
	 *
	 * @test
	 * @dataProvider provider_numeric
	 * @param string  $input     Input to test
	 * @param boolean $expected  Whether or not $input is numeric
	 */",
 "/**
	 * Provides test data for test_phone()
	 * @return array
	 */",
 "/**
	 * Tests Valid::phone()
	 *
	 * @test
	 * @dataProvider  provider_phone
	 * @param string  $phone     Phone number to test
	 * @param boolean $expected  Is $phone valid
	 */",
 "/**
	 * DataProvider for the valid::regex() test
	 */",
 "/**
	 * Tests Valid::range()
	 *
	 * Tests if a number is within a range.
	 *
	 * @test
	 * @dataProvider provider_regex
	 * @param string Value to test against
	 * @param string Valid pcre regular expression
	 * @param bool Does the value match the expression?
	 */",
 "/**
	 * DataProvider for the valid::range() test
	 */",
 "/**
	 * Tests Valid::range()
	 *
	 * Tests if a number is within a range.
	 *
	 * @test
	 * @dataProvider provider_range
	 * @param integer $number    Number to test
	 * @param integer $min       Lower bound
	 * @param integer $max       Upper bound
	 * @param boolean $expected  Is Number within the bounds of $min && $max
	 */",
 "/**
	 * Provides test data for test_url()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Valid::url()
	 *
	 * @test
	 * @dataProvider provider_url
	 * @param string  $url       The url to test
	 * @param boolean $expected  Is it valid?
	 */",
 "/**
	 * DataProvider for the valid::matches() test
	 */",
 "/**
	 * Tests Valid::matches()
	 *
	 * Tests if a field matches another from an array of data
	 *
	 * @test
	 * @dataProvider provider_matches
	 * @param array   $data      Array of fields
	 * @param integer $field     First field name
	 * @param integer $match     Field name that must match $field in $data
	 * @param boolean $expected  Do the two fields match?
	 */",
 "/**
 * Tests the Valid class
 *
 * @group kohana
 * @group kohana.valid
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * When a config object is initially created there should be
	 * no readers attached
	 *
	 * @test
	 * @covers Config
	 */",
 "/**
	 * Test that calling attach() on a kohana config object
	 * adds the specified reader to the config object
	 *
	 * @test
	 * @covers Config::attach
	 */",
 "/**
	 * By default (or by passing TRUE as the second parameter) the config object
	 * should prepend the reader to the front of the readers queue
	 *
	 * @test
	 * @covers Config::attach
	 */",
 "/**
	 * Test that attaching a new reader (and passing FALSE as second param) causes
	 * phpunit to append the reader rather than prepend
	 *
	 * @test
	 * @covers Config::attach
	 */",
 "/**
	 * Calling detach() on a config object should remove it from the queue of readers
	 *
	 * @test
	 * @covers Config::detach
	 */",
 "/**
	 * detach() should return $this even if the specified reader does not exist
	 *
	 * @test
	 * @covers Config::detach
	 */",
 "/**
	 * If we request a config variable with a dot path then
	 * Config::load() should load the group and return the requested variable
	 *
	 * @test
	 * @covers Config::load
	 */",
 "/**
	 * If we\'ve already loaded a config group then the correct variable
	 * should be returned if we use the dot path notation to to request 
	 * a var
	 *
	 * @test
	 * @covers Config::load
	 */",
 "/**
	 * If load() is called and there are no readers present then it should throw
	 * a kohana exception
	 *
	 * @test
	 * @covers Config::load
	 * @expectedException Kohana_Exception
	 */",
 "/**
	 * Provides test data for test_load_throws_exception_if_no_group_is_given()
	 *
	 * @return array
	 */",
 "/**
	 * If an invalid group name is specified then an exception should be thrown.
	 *
	 * Invalid means it\'s either a non-string value, or empty
	 *
	 * @test
	 * @dataProvider provider_load_throws_exception_if_no_group_is_given
	 * @covers Config::load
	 * @expectedException Kohana_Exception
	 */",
 "/**
	 * Make sure that _write_config() passes the changed configuration to all 
	 * writers in the queue
	 *
	 * @test
	 * @covers Kohana_Config
	 */",
 "/**
	 * Config sources are stored in a stack, make sure that config at the bottom
	 * of the stack is overriden by config at the top
	 *
	 * @test
	 * @covers Config::load
	 */",
 "/**
	 * load() should keep a record of what config groups have been requested and if
	 * a group is requested more than once the first instance should be returned
	 *
	 * @test
	 * @covers Config::load
	 */",
 "/**
	 * When we call copy() we expect it to copy the merged config to all writers
	 *
	 * @TODO This test sucks due to limitations in the phpunit mock generator.  MAKE THIS AWESOME AGAIN!
	 * @test
	 * @covers Kohana_Config::copy
	 */",
 "/**
 * Tests the Config lib that\'s shipped with kohana
 *
 * @group kohana
 * @group kohana.config
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @author     Matt Button <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Sends the HTTP message [Request] to a remote server and processes
	 * the response.
	 *
	 * @param   Request   request to send
	 * @return  Response
	 */",
 "/**
 * [Request_Client_External] Curl driver performs external requests using the
 * php-curl extention. This is the default driver for all external requests.
 * 
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 * @uses       [PHP cURL](http://php.net/manual/en/book.curl.php)
 */",
 "/**
 * UTF8::strspn
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Generates an opening HTML form tag.
	 *
	 *     // Form will submit back to the current page using POST
	 *     echo Form::open();
	 *
	 *     // Form will submit to \'search\' using GET
	 *     echo Form::open(\'search\', array(\'method\' => \'get\'));
	 *
	 *     // When \"file\" inputs are present, you must include the \"enctype\"
	 *     echo Form::open(NULL, array(\'enctype\' => \'multipart/form-data\'));
	 *
	 * @param   mixed   form action, defaults to the current request URI, or [Request] class to use
	 * @param   array   html attributes
	 * @return  string
	 * @uses    Request::instance
	 * @uses    URL::site
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates the closing form tag.
	 *
	 *     echo Form::close();
	 *
	 * @return  string
	 */",
 "/**
	 * Creates a form input. If no type is specified, a \"text\" type input will
	 * be returned.
	 *
	 *     echo Form::input(\'username\', $username);
	 *
	 * @param   string  input name
	 * @param   string  input value
	 * @param   array   html attributes
	 * @return  string
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates a hidden form input.
	 *
	 *     echo Form::hidden(\'csrf\', $token);
	 *
	 * @param   string  input name
	 * @param   string  input value
	 * @param   array   html attributes
	 * @return  string
	 * @uses    Form::input
	 */",
 "/**
	 * Creates a password form input.
	 *
	 *     echo Form::password(\'password\');
	 *
	 * @param   string  input name
	 * @param   string  input value
	 * @param   array   html attributes
	 * @return  string
	 * @uses    Form::input
	 */",
 "/**
	 * Creates a file upload form input. No input value can be specified.
	 *
	 *     echo Form::file(\'image\');
	 *
	 * @param   string  input name
	 * @param   array   html attributes
	 * @return  string
	 * @uses    Form::input
	 */",
 "/**
	 * Creates a checkbox form input.
	 *
	 *     echo Form::checkbox(\'remember_me\', 1, (bool) $remember);
	 *
	 * @param   string   input name
	 * @param   string   input value
	 * @param   boolean  checked status
	 * @param   array    html attributes
	 * @return  string
	 * @uses    Form::input
	 */",
 "/**
	 * Creates a radio form input.
	 *
	 *     echo Form::radio(\'like_cats\', 1, $cats);
	 *     echo Form::radio(\'like_cats\', 0, ! $cats);
	 *
	 * @param   string   input name
	 * @param   string   input value
	 * @param   boolean  checked status
	 * @param   array    html attributes
	 * @return  string
	 * @uses    Form::input
	 */",
 "/**
	 * Creates a textarea form input.
	 *
	 *     echo Form::textarea(\'about\', $about);
	 *
	 * @param   string   textarea name
	 * @param   string   textarea body
	 * @param   array    html attributes
	 * @param   boolean  encode existing HTML characters
	 * @return  string
	 * @uses    HTML::attributes
	 * @uses    HTML::chars
	 */",
 "/**
	 * Creates a select form input.
	 *
	 *     echo Form::select(\'country\', $countries, $country);
	 *
	 * [!!] Support for multiple selected options was added in v3.0.7.
	 *
	 * @param   string   input name
	 * @param   array    available options
	 * @param   mixed    selected option string, or an array of selected options
	 * @param   array    html attributes
	 * @return  string
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates a submit form input.
	 *
	 *     echo Form::submit(NULL, \'Login\');
	 *
	 * @param   string  input name
	 * @param   string  input value
	 * @param   array   html attributes
	 * @return  string
	 * @uses    Form::input
	 */",
 "/**
	 * Creates a image form input.
	 *
	 *     echo Form::image(NULL, NULL, array(\'src\' => \'media/img/login.png\'));
	 *
	 * @param   string   input name
	 * @param   string   input value
	 * @param   array    html attributes
	 * @param   boolean  add index file to URL?
	 * @return  string
	 * @uses    Form::input
	 */",
 "/**
	 * Creates a button form input. Note that the body of a button is NOT escaped,
	 * to allow images and other HTML to be used.
	 *
	 *     echo Form::button(\'save\', \'Save Profile\', array(\'type\' => \'submit\'));
	 *
	 * @param   string  input name
	 * @param   string  input value
	 * @param   array   html attributes
	 * @return  string
	 * @uses    HTML::attributes
	 */",
 "/**
	 * Creates a form label. Label text is not automatically translated.
	 *
	 *     echo Form::label(\'username\', \'Username\');
	 *
	 * @param   string  target input
	 * @param   string  label text
	 * @param   array   html attributes
	 * @return  string
	 * @uses    HTML::attributes
	 */",
 "/**
 * Form helper class. Unless otherwise noted, all generated HTML will be made
 * safe using the [HTML::chars] method. This prevents against simple XSS
 * attacks that could otherwise be trigged by inserting HTML characters into
 * form fields.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Returns a singleton instance of Encrypt. An encryption key must be
	 * provided in your \"encrypt\" configuration file.
	 *
	 *     $encrypt = Encrypt::instance();
	 *
	 * @param   string  configuration group name
	 * @return  Encrypt
	 */",
 "/**
	 * Creates a new mcrypt wrapper.
	 *
	 * @param   string   encryption key
	 * @param   string   mcrypt mode
	 * @param   string   mcrypt cipher
	 */",
 "/**
	 * Encrypts a string and returns an encrypted string that can be decoded.
	 *
	 *     $data = $encrypt->encode($data);
	 *
	 * The encrypted binary data is encoded using [base64](http://php.net/base64_encode)
	 * to convert it to a string. This string can be stored in a database,
	 * displayed, and passed using most other means without corruption.
	 *
	 * @param   string  data to be encrypted
	 * @return  string
	 */",
 "/**
	 * Decrypts an encoded string back to its original value.
	 *
	 *     $data = $encrypt->decode($data);
	 *
	 * @param   string  encoded string to be decrypted
	 * @return  FALSE   if decryption fails
	 * @return  string
	 */",
 "/**
 * The Encrypt library provides two-way encryption of text and binary strings
 * using the [Mcrypt](http://php.net/mcrypt) extension, which consists of three
 * parts: the key, the cipher, and the mode.
 *
 * The Key
 * :  A secret passphrase that is used for encoding and decoding
 *
 * The Cipher
 * :  A [cipher](http://php.net/mcrypt.ciphers) determines how the encryption
 *    is mathematically calculated. By default, the \"rijndael-128\" cipher
 *    is used. This is commonly known as \"AES-128\" and is an industry standard.
 *
 * The Mode
 * :  The [mode](http://php.net/mcrypt.constants) determines how the encrypted
 *    data is written in binary form. By default, the \"nofb\" mode is used,
 *    which produces short output with high entropy.
 *
 * @package    Kohana
 * @category   Security
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * Transparent extension for the Kohana_Config_Database_Writer class
 *
 * @package    Kohana/Database
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates a new syslog logger.
	 *
	 * @see http://us2.php.net/openlog
	 *
	 * @param   string  syslog identifier
	 * @param   int     facility to log to
	 * @return  void
	 */",
 "/**
	 * Writes each of the messages into the syslog.
	 *
	 * @param   array   messages
	 * @return  void
	 */",
 "/**
	 * Closes the syslog connection
	 *
	 * @return  void
	 */",
 "/**
 * Syslog log writer.
 *
 * @package    Kohana
 * @category   Logging
 * @author     Jeremy Bush
 * @copyright  (c) 2010 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Generate and store a unique token which can be used to help prevent
	 * [CSRF](http://wikipedia.org/wiki/Cross_Site_Request_Forgery) attacks.
	 *
	 *     $token = Security::token();
	 *
	 * You can insert this token into your forms as a hidden field:
	 *
	 *     echo Form::hidden(\'csrf\', Security::token());
	 *
	 * And then check it when using [Validation]:
	 *
	 *     $array->rules(\'csrf\', array(
	 *         \'not_empty\'       => NULL,
	 *         \'Security::check\' => NULL,
	 *     ));
	 *
	 * This provides a basic, but effective, method of preventing CSRF attacks.
	 *
	 * @param   boolean  force a new token to be generated?
	 * @return  string
	 * @uses    Session::instance
	 */",
 "/**
	 * Check that the given token matches the currently stored security token.
	 *
	 *     if (Security::check($token))
	 *     {
	 *         // Pass
	 *     }
	 *
	 * @param   string   token to check
	 * @return  boolean
	 * @uses    Security::token
	 */",
 "/**
	 * Remove image tags from a string.
	 *
	 *     $str = Security::strip_image_tags($str);
	 *
	 * @param   string  string to sanitize
	 * @return  string
	 */",
 "/**
	 * Encodes PHP tags in a string.
	 *
	 *     $str = Security::encode_php_tags($str);
	 *
	 * @param   string  string to sanitize
	 * @return  string
	 */",
 "/**
 * Security helper class.
 *
 * @package    Kohana
 * @category   Security
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Sets up the test enviroment
	 */",
 "/**
	 * This test makes sure that auto_p returns an empty string if
	 * an empty input was provided
	 *
	 * @test
	 * @covers Text::auto_p
	 */",
 "/**
	 *
	 * @return array Test Data
	 */",
 "/**
	 * This test makes sure that auto_p doesn\'t enclose HTML tags
	 * in paragraphs
	 *
	 * @test
	 * @covers Text::auto_p
	 * @dataProvider provider_auto_para_does_not_enclose_html_tags_in_paragraphs
	 */",
 "/**
	 * This test makes sure that auto_p surrounds a single line of text
	 * with paragraph tags
	 *
	 * @test
	 * @covers Text::auto_p
	 */",
 "/**
	 * Make sure that multiple new lines are replaced with paragraph tags
	 *
	 * @test
	 * @covers Text::auto_p
	 */",
 "/**
	 * Data provider for test_limit_words
	 *
	 * @return array Array of test data
	 */",
 "/**
	 *
	 * @test
	 * @dataProvider provider_limit_words
	 */",
 "/**
	 * Provides test data for test_limit_chars()
	 *
	 * @return array Test data
	 */",
 "/**
	 * Tests Text::limit_chars()
	 *
	 * @test
	 * @dataProvider provider_limit_chars
	 */",
 "/**
	 * Test Text::alternate()
	 *
	 * @test
	 */",
 "/**
	 * Tests Text::alternate()
	 *
	 * @test
	 * @covers Text::alternate
	 */",
 "/**
	 * Provides test data for test_reducde_slashes()
	 *
	 * @returns array Array of test data
	 */",
 "/**
	 * Covers Text::reduce_slashes()
	 *
	 * @test
	 * @dataProvider provider_reduce_slashes
	 */",
 "/**
	 * Provides test data for test_censor()
	 *
	 * @return array Test data
	 */",
 "/**
	 * Tests Text::censor
	 *
	 * @test
	 * @dataProvider provider_censor
	 */",
 "/**
	 * Provides test data for test_random
	 *
	 * @return array Test Data
	 */",
 "/**
	 * Tests Text::random() as well as possible
	 *
	 * Obviously you can\'t compare a randomly generated string against a
	 * pre-generated one and check that they are the same as this goes
	 * against the whole ethos of random.
	 *
	 * This test just makes sure that the value returned is of the correct
	 * values and length
	 *
	 * @test
	 * @dataProvider provider_random
	 */",
 "/**
	 * Provides test data for test_similar
	 *
	 * @return array
	 */",
 "/**
	 * Tests Text::similar()
	 *
	 * @test
	 * @dataProvider provider_similar
	 * @covers Text::similar
	 */",
 "/**
	 * Provides test data for test_bytes
	 *
	 * @return array
	 */",
 "/**
	 * Tests Text::bytes()
	 *
	 * @test
	 * @dataProvider provider_bytes
	 */",
 "/**
	 * Provides test data for test_widont()
	 *
	 * @return array Test data
	 */",
 "/**
	 * Tests Text::widont()
	 *
	 * @test
	 * @dataProvider provider_widont
	 */",
 "/**
	 * This checks that auto_link_emails() respects word boundaries and does not
	 * just blindly replace all occurences of the email address in the text.
	 *
	 * In the sample below the algorithm was replacing all occurences of voorzitter@xxxx.com
	 * inc the copy in the second list item.
	 *
	 * It was updated in 6c199366efc1115545ba13108b876acc66c54b2d to respect word boundaries
	 *
	 * @test
	 * @covers Text::auto_link_emails
	 * @ticket 2772
	 */",
 "/**
	 * Provides some test data for test_number()
	 *
	 * @return array
	 */",
 "/**
	 * Checks that Text::number formats a number into english text
	 *
	 * @test
	 * @dataProvider provider_number
	 */",
 "/**
	 * Provides test data for test_auto_link_urls()
	 *
	 * @return array
	 */",
 "/**
	 * Runs tests for Test::auto_link_urls
	 *
	 * @test
	 * @dataProvider provider_auto_link_urls
	 */",
 "/**
	 * Provides test data for test_auto_link_emails()
	 *
	 * @return array
	 */",
 "/**
	 * Runs tests for Test::auto_link_emails
	 *
	 * @test
	 * @dataProvider provider_auto_link_emails
	 */",
 "/**
	 * Provides test data for test_auto_link
	 *
	 * @return array Test data
	 */",
 "/**
	 * Tests Text::auto_link()
	 *
	 * @test
	 * @dataProvider provider_auto_link
	 */",
 "/**
 * Tests the kohana text class (Kohana_Text)
 *
 * @group kohana
 * @group kohana.text
 *
 * @package    Kohana
 * @category   Tests
 */",
 "/**
 * UTF8::strrev
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Returns the offset (in seconds) between two time zones. Use this to
	 * display dates to users in different time zones.
	 *
	 *     $seconds = Date::offset(\'America/Chicago\', \'GMT\');
	 *
	 * [!!] A list of time zones that PHP supports can be found at
	 * <http://php.net/timezones>.
	 *
	 * @param   string   timezone that to find the offset of
	 * @param   string   timezone used as the baseline
	 * @param   mixed    UNIX timestamp or date string
	 * @return  integer
	 */",
 "/**
	 * Number of seconds in a minute, incrementing by a step. Typically used as
	 * a shortcut for generating a list that can used in a form.
	 *
	 *     $seconds = Date::seconds(); // 01, 02, 03, ..., 58, 59, 60
	 *
	 * @param   integer  amount to increment each step by, 1 to 30
	 * @param   integer  start value
	 * @param   integer  end value
	 * @return  array    A mirrored (foo => foo) array from 1-60.
	 */",
 "/**
	 * Number of minutes in an hour, incrementing by a step. Typically used as
	 * a shortcut for generating a list that can be used in a form.
	 *
	 *     $minutes = Date::minutes(); // 05, 10, 15, ..., 50, 55, 60
	 *
	 * @uses    Date::seconds
	 * @param   integer  amount to increment each step by, 1 to 30
	 * @return  array    A mirrored (foo => foo) array from 1-60.
	 */",
 "/**
	 * Number of hours in a day. Typically used as a shortcut for generating a
	 * list that can be used in a form.
	 *
	 *     $hours = Date::hours(); // 01, 02, 03, ..., 10, 11, 12
	 *
	 * @param   integer  amount to increment each step by
	 * @param   boolean  use 24-hour time
	 * @param   integer  the hour to start at
	 * @return  array    A mirrored (foo => foo) array from start-12 or start-23.
	 */",
 "/**
	 * Returns AM or PM, based on a given hour (in 24 hour format).
	 *
	 *     $type = Date::ampm(12); // PM
	 *     $type = Date::ampm(1);  // AM
	 *
	 * @param   integer  number of the hour
	 * @return  string
	 */",
 "/**
	 * Adjusts a non-24-hour number into a 24-hour number.
	 *
	 *     $hour = Date::adjust(3, \'pm\'); // 15
	 *
	 * @param   integer  hour to adjust
	 * @param   string   AM or PM
	 * @return  string
	 */",
 "/**
	 * Number of days in a given month and year. Typically used as a shortcut
	 * for generating a list that can be used in a form.
	 *
	 *     Date::days(4, 2010); // 1, 2, 3, ..., 28, 29, 30
	 *
	 * @param   integer  number of month
	 * @param   integer  number of year to check month, defaults to the current year
	 * @return  array    A mirrored (foo => foo) array of the days.
	 */",
 "/**
	 * Number of months in a year. Typically used as a shortcut for generating
	 * a list that can be used in a form.
	 *
	 * By default a mirrored array of $month_number => $month_number is returned
	 *
	 *     Date::months();
	 *     // aray(1 => 1, 2 => 2, 3 => 3, ..., 12 => 12)
	 *
	 * But you can customise this by passing in either Date::MONTHS_LONG
	 *
	 *     Date::months(Date::MONTHS_LONG);
	 *     // array(1 => \'January\', 2 => \'February\', ..., 12 => \'December\')
	 *
	 * Or Date::MONTHS_SHORT
	 *
	 *     Date::months(Date::MONTHS_SHORT);
	 *     // array(1 => \'Jan\', 2 => \'Feb\', ..., 12 => \'Dec\')
	 *
	 * @uses    Date::hours
	 * @param   string The format to use for months
	 * @return  array  An array of months based on the specified format
	 */",
 "/**
	 * Returns an array of years between a starting and ending year. By default,
	 * the the current year - 5 and current year + 5 will be used. Typically used
	 * as a shortcut for generating a list that can be used in a form.
	 *
	 *     $years = Date::years(2000, 2010); // 2000, 2001, ..., 2009, 2010
	 *
	 * @param   integer  starting year (default is current year - 5)
	 * @param   integer  ending year (default is current year + 5)
	 * @return  array
	 */",
 "/**
	 * Returns time difference between two timestamps, in human readable format.
	 * If the second timestamp is not given, the current time will be used.
	 * Also consider using [Date::fuzzy_span] when displaying a span.
	 *
	 *     $span = Date::span(60, 182, \'minutes,seconds\'); // array(\'minutes\' => 2, \'seconds\' => 2)
	 *     $span = Date::span(60, 182, \'minutes\'); // 2
	 *
	 * @param   integer  timestamp to find the span of
	 * @param   integer  timestamp to use as the baseline
	 * @param   string   formatting string
	 * @return  string   when only a single output is requested
	 * @return  array    associative list of all outputs requested
	 */",
 "/**
	 * Returns the difference between a time and now in a \"fuzzy\" way.
	 * Displaying a fuzzy time instead of a date is usually faster to read and understand.
	 *
	 *     $span = Date::fuzzy_span(time() - 10); // \"moments ago\"
	 *     $span = Date::fuzzy_span(time() + 20); // \"in moments\"
	 *
	 * A second parameter is available to manually set the \"local\" timestamp,
	 * however this parameter shouldn\'t be needed in normal usage and is only
	 * included for unit tests
	 *
	 * @param   integer  \"remote\" timestamp
	 * @param   integer  \"local\" timestamp, defaults to time()
	 * @return  string
	 */",
 "/**
	 * Converts a UNIX timestamp to DOS format. There are very few cases where
	 * this is needed, but some binary formats use it (eg: zip files.)
	 * Converting the other direction is done using {@link Date::dos2unix}.
	 *
	 *     $dos = Date::unix2dos($unix);
	 *
	 * @param   integer  UNIX timestamp
	 * @return  integer
	 */",
 "/**
	 * Converts a DOS timestamp to UNIX format.There are very few cases where
	 * this is needed, but some binary formats use it (eg: zip files.)
	 * Converting the other direction is done using {@link Date::unix2dos}.
	 *
	 *     $unix = Date::dos2unix($dos);
	 *
	 * @param   integer  DOS timestamp
	 * @return  integer
	 */",
 "/**
	 * Returns a date/time string with the specified timestamp format
	 *
	 *     $time = Date::formatted_time(\'5 minutes ago\');
	 *
	 * @see     http://php.net/manual/en/datetime.construct.php
	 * @param   string  datetime_str     datetime string
	 * @param   string  timestamp_format timestamp format
	 * @return  string
	 */",
 "/**
 * Date helper.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Limits a phrase to a given number of words.
	 *
	 *     $text = Text::limit_words($text);
	 *
	 * @param   string   phrase to limit words of
	 * @param   integer  number of words to limit to
	 * @param   string   end character or entity
	 * @return  string
	 */",
 "/**
	 * Limits a phrase to a given number of characters.
	 *
	 *     $text = Text::limit_chars($text);
	 *
	 * @param   string   phrase to limit characters of
	 * @param   integer  number of characters to limit to
	 * @param   string   end character or entity
	 * @param   boolean  enable or disable the preservation of words while limiting
	 * @return  string
	 * @uses    UTF8::strlen
	 */",
 "/**
	 * Alternates between two or more strings.
	 *
	 *     echo Text::alternate(\'one\', \'two\'); // \"one\"
	 *     echo Text::alternate(\'one\', \'two\'); // \"two\"
	 *     echo Text::alternate(\'one\', \'two\'); // \"one\"
	 *
	 * Note that using multiple iterations of different strings may produce
	 * unexpected results.
	 *
	 * @param   string  strings to alternate between
	 * @return  string
	 */",
 "/**
	 * Generates a random string of a given type and length.
	 *
	 *
	 *     $str = Text::random(); // 8 character random string
	 *
	 * The following types are supported:
	 *
	 * alnum
	 * :  Upper and lower case a-z, 0-9 (default)
	 *
	 * alpha
	 * :  Upper and lower case a-z
	 *
	 * hexdec
	 * :  Hexadecimal characters a-f, 0-9
	 *
	 * distinct
	 * :  Uppercase characters and numbers that cannot be confused
	 *
	 * You can also create a custom type by providing the \"pool\" of characters
	 * as the type.
	 *
	 * @param   string   a type of pool, or a string of characters to use as the pool
	 * @param   integer  length of string to return
	 * @return  string
	 * @uses    UTF8::split
	 */",
 "/**
	 * Uppercase words that are not separated by spaces, using a custom
	 * delimiter or the default.
	 * 
	 *      $str = Text::ucfirst(\'content-type\'); // returns \"Content-Type\" 
	 *
	 * @param   string    string to transform
	 * @param   string    delemiter to use
	 * @return  string
	 */",
 "/**
	 * Reduces multiple slashes in a string to single slashes.
	 *
	 *     $str = Text::reduce_slashes(\'foo//bar/baz\'); // \"foo/bar/baz\"
	 *
	 * @param   string  string to reduce slashes of
	 * @return  string
	 */",
 "/**
	 * Replaces the given words with a string.
	 *
	 *     // Displays \"What the #####, man!\"
	 *     echo Text::censor(\'What the frick, man!\', array(
	 *         \'frick\' => \'#####\',
	 *     ));
	 *
	 * @param   string   phrase to replace words in
	 * @param   array    words to replace
	 * @param   string   replacement string
	 * @param   boolean  replace words across word boundries (space, period, etc)
	 * @return  string
	 * @uses    UTF8::strlen
	 */",
 "/**
	 * Finds the text that is similar between a set of words.
	 *
	 *     $match = Text::similar(array(\'fred\', \'fran\', \'free\'); // \"fr\"
	 *
	 * @param   array   words to find similar text of
	 * @return  string
	 */",
 "/**
	 * Converts text email addresses and anchors into links. Existing links
	 * will not be altered.
	 *
	 *     echo Text::auto_link($text);
	 *
	 * [!!] This method is not foolproof since it uses regex to parse HTML.
	 *
	 * @param   string   text to auto link
	 * @return  string
	 * @uses    Text::auto_link_urls
	 * @uses    Text::auto_link_emails
	 */",
 "/**
	 * Converts text anchors into links. Existing links will not be altered.
	 *
	 *     echo Text::auto_link_urls($text);
	 *
	 * [!!] This method is not foolproof since it uses regex to parse HTML.
	 *
	 * @param   string   text to auto link
	 * @return  string
	 * @uses    HTML::anchor
	 */",
 "/**
	 * Converts text email addresses into links. Existing links will not
	 * be altered.
	 *
	 *     echo Text::auto_link_emails($text);
	 *
	 * [!!] This method is not foolproof since it uses regex to parse HTML.
	 *
	 * @param   string   text to auto link
	 * @return  string
	 * @uses    HTML::mailto
	 */",
 "/**
	 * Automatically applies \"p\" and \"br\" markup to text.
	 * Basically [nl2br](http://php.net/nl2br) on steroids.
	 *
	 *     echo Text::auto_p($text);
	 *
	 * [!!] This method is not foolproof since it uses regex to parse HTML.
	 *
	 * @param   string   subject
	 * @param   boolean  convert single linebreaks to <br />
	 * @return  string
	 */",
 "/**
	 * Returns human readable sizes. Based on original functions written by
	 * [Aidan Lister](http://aidanlister.com/repos/v/function.size_readable.php)
	 * and [Quentin Zervaas](http://www.phpriot.com/d/code/strings/filesize-format/).
	 *
	 *     echo Text::bytes(filesize($file));
	 *
	 * @param   integer  size in bytes
	 * @param   string   a definitive unit
	 * @param   string   the return string format
	 * @param   boolean  whether to use SI prefixes or IEC
	 * @return  string
	 */",
 "/**
	 * Format a number to human-readable text.
	 *
	 *     // Display: one thousand and twenty-four
	 *     echo Text::number(1024);
	 *
	 *     // Display: five million, six hundred and thirty-two
	 *     echo Text::number(5000632);
	 *
	 * @param   integer   number to format
	 * @return  string
	 * @since   3.0.8
	 */",
 "/**
	 * Prevents [widow words](http://www.shauninman.com/archive/2006/08/22/widont_wordpress_plugin)
	 * by inserting a non-breaking space between the last two words.
	 *
	 *     echo Text::widont($text);
	 *
	 * @param   string  text to remove widows from
	 * @return  string
	 */",
 "/**
 * Text helper class. Provides simple methods for working with text.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * UTF8::strcasecmp
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Provides test data for test_lang()
	 * 
	 * @return array
	 */",
 "/**
	 * Tests i18n::lang()
	 *
	 * @test
	 * @dataProvider provider_lang
	 * @param boolean $input  Input for File::mime
	 * @param boolean $expected Output for File::mime
	 */",
 "/**
	 * Provides test data for test_get()
	 * 
	 * @return array
	 */",
 "/**
	 * Tests i18n::get()
	 *
	 * @test
	 * @dataProvider provider_get
	 * @param boolean $input  Input for File::mime
	 * @param boolean $expected Output for File::mime
	 */",
 "/**
 * Tests Kohana i18n class
 *
 * @group kohana
 * @group kohana.i18n
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates a singleton of a Kohana Cache group. If no group is supplied
	 * the __default__ cache group is used.
	 * 
	 *     // Create an instance of the default group
	 *     $default_group = Cache::instance();
	 * 
	 *     // Create an instance of a group
	 *     $foo_group = Cache::instance(\'foo\');
	 * 
	 *     // Access an instantiated group directly
	 *     $foo_group = Cache::$instances[\'default\'];
	 *
	 * @param   string   the name of the cache group to use [Optional]
	 * @return  Kohana_Cache
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Ensures singleton pattern is observed, loads the default expiry
	 * 
	 * @param  array     configuration
	 */",
 "/**
	 * Getter and setter for the configuration. If no argument provided, the 
	 * current configuration is returned. Otherwise the configuration is set
	 * to this class.
	 * 
	 *     // Overwrite all configuration
	 *     $cache->config(array(\'driver\' => \'memcache\', \'...\'));
	 * 
	 *     // Set a new configuration setting
	 *     $cache->config(\'servers\', array(
	 *          \'foo\' => \'bar\',
	 *          \'...\'
	 *          ));
	 * 
	 *     // Get a configuration setting
	 *     $servers = $cache->config(\'servers);
	 *
	 * @param   mixed    key to set to array, either array or config path
	 * @param   mixed    value to associate with key
	 * @return  mixed
	 */",
 "/**
	 * Overload the __clone() method to prevent cloning
	 *
	 * @return  void
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Retrieve a cached value entry by id.
	 * 
	 *     // Retrieve cache entry from default group
	 *     $data = Cache::instance()->get(\'foo\');
	 * 
	 *     // Retrieve cache entry from default group and return \'bar\' if miss
	 *     $data = Cache::instance()->get(\'foo\', \'bar\');
	 * 
	 *     // Retrieve cache entry from memcache group
	 *     $data = Cache::instance(\'memcache\')->get(\'foo\');
	 *
	 * @param   string   id of cache to entry
	 * @param   string   default value to return if cache miss
	 * @return  mixed
	 * @throws  Cache_Exception
	 */",
 "/**
	 * Set a value to cache with id and lifetime
	 * 
	 *     $data = \'bar\';
	 * 
	 *     // Set \'bar\' to \'foo\' in default group, using default expiry
	 *     Cache::instance()->set(\'foo\', $data);
	 * 
	 *     // Set \'bar\' to \'foo\' in default group for 30 seconds
	 *     Cache::instance()->set(\'foo\', $data, 30);
	 * 
	 *     // Set \'bar\' to \'foo\' in memcache group for 10 minutes
	 *     if (Cache::instance(\'memcache\')->set(\'foo\', $data, 600))
	 *     {
	 *          // Cache was set successfully
	 *          return
	 *     }
	 *
	 * @param   string   id of cache entry
	 * @param   string   data to set to cache
	 * @param   integer  lifetime in seconds
	 * @return  boolean
	 */",
 "/**
	 * Delete a cache entry based on id
	 * 
	 *     // Delete \'foo\' entry from the default group
	 *     Cache::instance()->delete(\'foo\');
	 * 
	 *     // Delete \'foo\' entry from the memcache group
	 *     Cache::instance(\'memcache\')->delete(\'foo\')
	 *
	 * @param   string   id to remove from cache
	 * @return  boolean
	 */",
 "/**
	 * Delete all cache entries.
	 * 
	 * Beware of using this method when
	 * using shared memory cache systems, as it will wipe every
	 * entry within the system for all clients.
	 * 
	 *     // Delete all cache entries in the default group
	 *     Cache::instance()->delete_all();
	 * 
	 *     // Delete all cache entries in the memcache group
	 *     Cache::instance(\'memcache\')->delete_all();
	 *
	 * @return  boolean
	 */",
 "/**
	*Replacestroublesomecharacterswithunderscores.
	*
	*//Sanitizeacacheid
	*$id=$this->_sanitize_id($id);
	*
	*@paramstringidofcachetosanitize
	*@returnstring
	*/",
 "/**
*KohanaCacheprovidesacommoninterfacetoavarietyofcachingengines.Tagsare
*supportedwhereavailablenativelytothecachesystem.KohanaCachesupportsmultiple
*instancesofcacheenginesthroughagroupedsingletonpattern.
*
*###Supportedcacheengines
*
**[APC](http://php.net/manual/en/book.apc.php)
**[eAccelerator](http://eaccelerator.net/)
**File
**[Memcache](http://memcached.org/)
**[Memcached-tags](http://code.google.com/p/memcached-tags/)
**[SQLite](http://www.sqlite.org/)
**[Xcache](http://xcache.lighttpd.net/)
*
*###Introductiontocaching
*
*Cachingshouldbeimplementedwithconsideration.Generally,cachingtheresultofresources
*isfasterthanreprocessingthem.Choosingwhat,howandwhentocacheisvital.PHPAPCis
*presentlyoneofthefastestcachingsystemsavailable,closelyfollowedbyMemcache.SQLite
*andFilecachingaretwooftheslowestcachemethods,howeverusuallyfasterthanreprocessing
*acomplexsetofinstructions.
*
*Cachingenginesthatusememoryareconsiderablyfasterthanthefilebasedalternatives.But
*memoryislimitedwhereasdiskspaceisplentiful.Ifcachinglargedatasetsitisbesttouse
*filecaching.
*
*###Configurationsettings
*
*KohanaCacheusesconfigurationgroupstocreatecacheinstances.Aconfigurationgroupcan
*useanysupporteddriver,withsuccessivegroupsusingthesamedrivertypeifrequired.
*
*####Configurationexample
*
*Belowisanexampleofa_memcache_serverconfiguration.
*
*returnarray(
*\'default\'=>array(//Defaultgroup
*\'driver\'=>\'memcache\',//usingMemcachedriver
*\'servers\'=>array(//Availableserverdefinitions
*array(
*\'host\'=>\'localhost\',
*\'port\'=>11211,
*\'persistent\'=>FALSE
*)
*),
*\'compression\'=>FALSE,//Usecompression?
*),
*)
*
*Incaseswhereonlyonecachegroupisrequired,ifthegroupisnamed`default`thereis
*noneedtopassthegroupnamewheninstantiatingacacheinstance.
*
*####Generalcachegroupconfigurationsettings
*
*Belowarethesettingsavailabletoalltypesofcachedriver.
*
*Name|Required|Description
*--------------|--------|---------------------------------------------------------------
*driver|__YES__|(_string_)Thedrivertypetouse
*
*Detailsofthesettingsspecifictoeachdriverareavailablewithinthedriversdocumentation.
*
*###Systemrequirements
*
**Kohana3.0.x
**PHP5.2.4orgreater
*
*@packageKohana/Cache
*@categoryBase
*@version2.0
*@authorKohanaTeam
*@copyright(c)2009-2010KohanaTeam
*@licensehttp://kohanaphp.com/license
*/",
 "/**
 * Kohana Cache Exception
 * 
 * @package    Kohana/Cache
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Woody Gilk <woody.gilk@kohanaphp.com>
 */",
 "/**
	 * Parses a remote feed into an array.
	 *
	 * @param   string   remote feed URL
	 * @param   integer  item limit to fetch
	 * @return  array
	 */",
 "/**
	 * Creates a feed from the given parameters.
	 *
	 * @param   array   feed information
	 * @param   array   items to add to the feed
	 * @param   string  define which format to use (only rss2 is supported)
	 * @param   string  define which encoding to use
	 * @return  string
	 */",
 "/**
 * RSS and Atom feed helper.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Checks if a field is not empty.
	 *
	 * @return  boolean
	 */",
 "/**
	 * Checks a field against a regular expression.
	 *
	 * @param   string  value
	 * @param   string  regular expression to match (including delimiters)
	 * @return  boolean
	 */",
 "/**
	 * Checks that a field is long enough.
	 *
	 * @param   string   value
	 * @param   integer  minimum length required
	 * @return  boolean
	 */",
 "/**
	 * Checks that a field is short enough.
	 *
	 * @param   string   value
	 * @param   integer  maximum length required
	 * @return  boolean
	 */",
 "/**
	 * Checks that a field is exactly the right length.
	 *
	 * @param   string   value
	 * @param   integer|array  exact length required, or array of valid lengths
	 * @return  boolean
	 */",
 "/**
	 * Checks that a field is exactly the value required.
	 *
	 * @param   string   value
	 * @param   string   required value
	 * @return  boolean
	 */",
 "/**
	 * Check an email address for correct format.
	 *
	 * @link  http://www.iamcal.com/publish/articles/php/parsing_email/
	 * @link  http://www.w3.org/Protocols/rfc822/
	 *
	 * @param   string   email address
	 * @param   boolean  strict RFC compatibility
	 * @return  boolean
	 */",
 "/**
	 * Validate the domain of an email address by checking if the domain has a
	 * valid MX record.
	 *
	 * @link  http://php.net/checkdnsrr  not added to Windows until PHP 5.3.0
	 *
	 * @param   string   email address
	 * @return  boolean
	 */",
 "/**
	 * Validate a URL.
	 *
	 * @param   string   URL
	 * @return  boolean
	 */",
 "/**
	 * Validate an IP.
	 *
	 * @param   string   IP address
	 * @param   boolean  allow private IP networks
	 * @return  boolean
	 */",
 "/**
	 * Validates a credit card number, with a Luhn check if possible.
	 *
	 * @param   integer       credit card number
	 * @param   string|array  card type, or an array of card types
	 * @return  boolean
	 * @uses    Valid::luhn
	 */",
 "/**
	 * Validate a number against the [Luhn](http://en.wikipedia.org/wiki/Luhn_algorithm)
	 * (mod10) formula.
	 *
	 * @param   string   number to check
	 * @return  boolean
	 */",
 "/**
	 * Checks if a phone number is valid.
	 *
	 * @param   string   phone number to check
	 * @return  boolean
	 */",
 "/**
	 * Tests if a string is a valid date string.
	 *
	 * @param   string   date to check
	 * @return  boolean
	 */",
 "/**
	 * Checks whether a string consists of alphabetical characters only.
	 *
	 * @param   string   input string
	 * @param   boolean  trigger UTF-8 compatibility
	 * @return  boolean
	 */",
 "/**
	 * Checks whether a string consists of alphabetical characters and numbers only.
	 *
	 * @param   string   input string
	 * @param   boolean  trigger UTF-8 compatibility
	 * @return  boolean
	 */",
 "/**
	 * Checks whether a string consists of alphabetical characters, numbers, underscores and dashes only.
	 *
	 * @param   string   input string
	 * @param   boolean  trigger UTF-8 compatibility
	 * @return  boolean
	 */",
 "/**
	 * Checks whether a string consists of digits only (no dots or dashes).
	 *
	 * @param   string   input string
	 * @param   boolean  trigger UTF-8 compatibility
	 * @return  boolean
	 */",
 "/**
	 * Checks whether a string is a valid number (negative and decimal numbers allowed).
	 *
	 * Uses {@link http://www.php.net/manual/en/function.localeconv.php locale conversion}
	 * to allow decimal point to be locale specific.
	 *
	 * @param   string   input string
	 * @return  boolean
	 */",
 "/**
	 * Tests if a number is within a range.
	 *
	 * @param   string   number to check
	 * @param   integer  minimum value
	 * @param   integer  maximum value
	 * @return  boolean
	 */",
 "/**
	 * Checks if a string is a proper decimal format. Optionally, a specific
	 * number of digits can be checked too.
	 *
	 * @param   string   number to check
	 * @param   integer  number of decimal places
	 * @param   integer  number of digits
	 * @return  boolean
	 */",
 "/**
	 * Checks if a string is a proper hexadecimal HTML color value. The validation
	 * is quite flexible as it does not require an initial \"#\" and also allows for
	 * the short notation using only three instead of six hexadecimal characters.
	 *
	 * @param   string   input string
	 * @return  boolean
	 */",
 "/**
	 * Checks if a field matches the value of another field.
	 *
	 * @param   array    array of values
	 * @param   string   field name
	 * @param   string   field name to match
	 * @return  boolean
	 */",
 "/**
 * Validation rules.
 *
 * @package    Kohana
 * @category   Security
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * UTF8::ucfirst
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
 * UTF8::ord
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Get a singleton Database instance. If configuration is not specified,
	 * it will be loaded from the database configuration file using the same
	 * group as the name.
	 *
	 *     // Load the default database
	 *     $db = Database::instance();
	 *
	 *     // Create a custom configured instance
	 *     $db = Database::instance(\'custom\', $config);
	 *
	 * @param   string   instance name
	 * @param   array    configuration parameters
	 * @return  Database
	 */",
 "/**
	 * Stores the database configuration locally and name the instance.
	 *
	 * [!!] This method cannot be accessed directly, you must use [Database::instance].
	 *
	 * @return  void
	 */",
 "/**
	 * Disconnect from the database when the object is destroyed.
	 *
	 *     // Destroy the database instance
	 *     unset(Database::instances[(string) $db], $db);
	 *
	 * [!!] Calling `unset($db)` is not enough to destroy the database, as it
	 * will still be stored in `Database::$instances`.
	 *
	 * @return  void
	 */",
 "/**
	 * Returns the database instance name.
	 *
	 *     echo (string) $db;
	 *
	 * @return  string
	 */",
 "/**
	 * Connect to the database. This is called automatically when the first
	 * query is executed.
	 *
	 *     $db->connect();
	 *
	 * @throws  Database_Exception
	 * @return  void
	 */",
 "/**
	 * Disconnect from the database. This is called automatically by [Database::__destruct].
	 * Clears the database instance from [Database::$instances].
	 *
	 *     $db->disconnect();
	 *
	 * @return  boolean
	 */",
 "/**
	 * Set the connection character set. This is called automatically by [Database::connect].
	 *
	 *     $db->set_charset(\'utf8\');
	 *
	 * @throws  Database_Exception
	 * @param   string   character set name
	 * @return  void
	 */",
 "/**
	 * Perform an SQL query of the given type.
	 *
	 *     // Make a SELECT query and use objects for results
	 *     $db->query(Database::SELECT, \'SELECT * FROM groups\', TRUE);
	 *
	 *     // Make a SELECT query and use \"Model_User\" for the results
	 *     $db->query(Database::SELECT, \'SELECT * FROM users LIMIT 1\', \'Model_User\');
	 *
	 * @param   integer  Database::SELECT, Database::INSERT, etc
	 * @param   string   SQL query
	 * @param   mixed    result object class string, TRUE for stdClass, FALSE for assoc array
	 * @param   array    object construct parameters for result class
	 * @return  object   Database_Result for SELECT queries
	 * @return  array    list (insert id, row count) for INSERT queries
	 * @return  integer  number of affected rows for all other queries
	 */",
 "/**
	 * Start a SQL transaction
	 *
	 *     // Start the transactions
	 *     $db->begin();
	 *
	 *     try {
	 *          DB::insert(\'users\')->values($user1)...
	 *          DB::insert(\'users\')->values($user2)...
	 *          // Insert successful commit the changes
	 *          $db->commit();
	 *     }
	 *     catch (Database_Exception $e)
	 *     {
	 *          // Insert failed. Rolling back changes...
	 *          $db->rollback();
	 *      }
	 *
	 * @param string transaction mode
	 * @return  boolean
	 */",
 "/**
	 * Commit the current transaction
	 *
	 *     // Commit the database changes
	 *     $db->commit();
	 *
	 * @return  boolean
	 */",
 "/**
	 * Abort the current transaction
	 *
	 *     // Undo the changes
	 *     $db->rollback();
	 *
	 * @return  boolean
	 */",
 "/**
	 * Count the number of records in a table.
	 *
	 *     // Get the total number of records in the \"users\" table
	 *     $count = $db->count_records(\'users\');
	 *
	 * @param   mixed    table name string or array(query, alias)
	 * @return  integer
	 */",
 "/**
	 * Returns a normalized array describing the SQL data type
	 *
	 *     $db->datatype(\'char\');
	 *
	 * @param   string  SQL data type
	 * @return  array
	 */",
 "/**
	 * List all of the tables in the database. Optionally, a LIKE string can
	 * be used to search for specific tables.
	 *
	 *     // Get all tables in the current database
	 *     $tables = $db->list_tables();
	 *
	 *     // Get all user-related tables
	 *     $tables = $db->list_tables(\'user%\');
	 *
	 * @param   string   table to search for
	 * @return  array
	 */",
 "/**
	 * Lists all of the columns in a table. Optionally, a LIKE string can be
	 * used to search for specific fields.
	 *
	 *     // Get all columns from the \"users\" table
	 *     $columns = $db->list_columns(\'users\');
	 *
	 *     // Get all name-related columns
	 *     $columns = $db->list_columns(\'users\', \'%name%\');
	 *
	 *     // Get the columns from a table that doesn\'t use the table prefix
	 *     $columns = $db->list_columns(\'users\', NULL, FALSE);
	 *
	 * @param   string  table to get columns from
	 * @param   string  column to search for
	 * @param   boolean whether to add the table prefix automatically or not
	 * @return  array
	 */",
 "/**
	 * Extracts the text between parentheses, if any.
	 *
	 *     // Returns: array(\'CHAR\', \'6\')
	 *     list($type, $length) = $db->_parse_type(\'CHAR(6)\');
	 *
	 * @param   string
	 * @return  array   list containing the type and length, if any
	 */",
 "/**
	 * Return the table prefix defined in the current configuration.
	 *
	 *     $prefix = $db->table_prefix();
	 *
	 * @return  string
	 */",
 "/**
	 * Quote a value for an SQL query.
	 *
	 *     $db->quote(NULL);   // \'NULL\'
	 *     $db->quote(10);     // 10
	 *     $db->quote(\'fred\'); // \'fred\'
	 *
	 * Objects passed to this function will be converted to strings.
	 * [Database_Expression] objects will be compiled.
	 * [Database_Query] objects will be compiled and converted to a sub-query.
	 * All other objects will be converted using the `__toString` method.
	 *
	 * @param   mixed   any value to quote
	 * @return  string
	 * @uses    Database::escape
	 */",
 "/**
	 * Quote a database column name and add the table prefix if needed.
	 *
	 *     $column = $db->quote_column($column);
	 *
	 * You can also use SQL methods within identifiers.
	 *
	 *     // The value of \"column\" will be quoted
	 *     $column = $db->quote_column(\'COUNT(\"column\")\');
	 *
	 * Objects passed to this function will be converted to strings.
	 * [Database_Expression] objects will be compiled.
	 * [Database_Query] objects will be compiled and converted to a sub-query.
	 * All other objects will be converted using the `__toString` method.
	 *
	 * @param   mixed   column name or array(column, alias)
	 * @return  string
	 * @uses    Database::quote_identifier
	 * @uses    Database::table_prefix
	 */",
 "/**
	 * Quote a database table name and adds the table prefix if needed.
	 *
	 *     $table = $db->quote_table($table);
	 *
	 * Objects passed to this function will be converted to strings.
	 * [Database_Expression] objects will be compiled.
	 * [Database_Query] objects will be compiled and converted to a sub-query.
	 * All other objects will be converted using the `__toString` method.
	 *
	 * @param   mixed   table name or array(table, alias)
	 * @return  string
	 * @uses    Database::quote_identifier
	 * @uses    Database::table_prefix
	 */",
 "/**
	 * Quote a database identifier
	 *
	 * Objects passed to this function will be converted to strings.
	 * [Database_Expression] objects will be compiled.
	 * [Database_Query] objects will be compiled and converted to a sub-query.
	 * All other objects will be converted using the `__toString` method.
	 *
	 * @param   mixed   any identifier
	 * @return  string
	 */",
 "/**
	 * Sanitize a string by escaping characters that could cause an SQL
	 * injection attack.
	 *
	 *     $value = $db->escape(\'any string\');
	 *
	 * @param   string   value to quote
	 * @return  string
	 */",
 "/**
 * Database connection wrapper/helper.
 *
 * You may get a database instance using `Database::instance(\'name\')` where
 * name is the [config](database/config) group. 
 *
 * This class provides connection instance management via Database Drivers, as
 * well as quoting, escaping and other related functions. Querys are done using
 * [Database_Query] and [Database_Query_Builder] objects, which can be easily
 * created using the [DB] helper class.
 *
 * @package    Kohana/Database
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Provides test data for test_size()
	 * 
	 * @return array
	 */",
 "/**
	 * Tests Upload::size
	 *
	 * @test
	 * @dataProvider provider_size
	 * @covers upload::size
	 * @param string $field the files field to test
	 * @param string $bytes valid bite size
	 * @param array $environment set the $_FILES array
	 * @param $expected what to expect
	 */",
 "/**
	 * size() should throw an exception of the supplied max size is invalid
	 *
	 * @test
	 * @covers upload::size
	 * @expectedException Kohana_Exception
	 */",
 "/**
	 * Provides test data for test_vali()
	 *
	 * @test
	 * @return array
	 */",
 "/**
	 * Test Upload::valid
	 *
	 * @test
	 * @dataProvider provider_valid
	 * @covers Upload::valid
	 */",
 "/**
	 * Tests Upload::type
	 *
	 * @test
	 * @covers Upload::type
	 */",
 "/**
 * Tests Kohana upload class
 *
 * @group kohana
 * @group kohana.upload
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Creates a new `Request_Client` object,
	 * allows for dependency injection.
	 *
	 * @param   array    $params Params
	 */",
 "/**
	 * Processes the request, executing the controller action that handles this
	 * request, determined by the [Route].
	 *
	 * 1. Before the controller action is called, the [Controller::before] method
	 * will be called.
	 * 2. Next the controller action will be called.
	 * 3. After the controller action is called, the [Controller::after] method
	 * will be called.
	 *
	 * By default, the output from the controller is captured and returned, and
	 * no headers are sent.
	 *
	 *     $request->execute();
	 *
	 * @param   Request $request
	 * @return  Response
	 * @throws  Kohana_Exception
	 * @uses    [Kohana::$profiling]
	 * @uses    [Profiler]
	 */",
 "/**
	 * Processes the request passed to it and returns the response from
	 * the URI resource identified.
	 * 
	 * This method must be implemented by all clients.
	 *
	 * @param   Request   request to execute by client
	 * @return  Response
	 * @since   3.2.0
	 */",
 "/**
	 * Getter and setter for the internal caching engine,
	 * used to cache responses if available and valid.
	 *
	 * @param   [HTTP_Cache] cache engine to use for caching
	 * @return  [HTTP_Cache]
	 * @return  [Request_Client]
	 */",
 "/**
 * Request Client. Processes a [Request] and handles [HTTP_Caching] if 
 * available. Will usually return a [Response] object as a result of the
 * request unless an unexpected error occurs.
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 * @since      3.1.0
 */",
 "/**
	 * Parses a HTTP header string into an associative array
	 *
	 * @param   string   $header_string  Header string to parse
	 * @return  HTTP_Header
	 */",
 "/**
	 * Parses the the HTTP request headers and returns an array containing
	 * key value pairs. This method is slow, but provides an accurate
	 * representation of the HTTP request.
	 *
	 *      // Get http headers into the request
	 *      $request->headers = HTTP::request_headers();
	 *
	 * @return  HTTP_Header
	 */",
 "/**
	 * Processes an array of key value pairs and encodes
	 * the values to meet RFC 3986
	 *
	 * @param   array   $params  Params
	 * @return  string
	 */",
 "/**
 * Contains the most low-level helpers methods in Kohana:
 *
 * - Environment initialization
 * - Locating files within the cascading filesystem
 * - Auto-loading and transparent extension of classes
 * - Variable and path debugging
 *
 * @package    Kohana
 * @category   HTTP
 * @author     Kohana Team
 * @since      3.1.0
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * This method MUST be implemented by each driver to setup the `Cache`
	 * instance for each test.
	 * 
	 * This method should do the following tasks for each driver test:
	 * 
	 *  - Test the Cache instance driver is available, skip test otherwise
	 *  - Setup the Cache instance
	 *  - Call the parent setup method, `parent::setUp()`
	 *
	 * @return  void
	 */",
 "/**
	 * Tests that multiple values set with Memcache do not cause unexpected
	 * results. For accurate results, this should be run with a memcache
	 * configuration that includes multiple servers.
	 * 
	 * This is to test #4110
	 *
	 * @link    http://dev.kohanaframework.org/issues/4110
	 * @return  void
	 */",
 "/**
*  @package    Kohana/Cache
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * UTF8::str_split
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Tests the Image::save() method for files that don\'t have extensions
	 *
	 * @return  void
	 */",
 "/**
*  @package    Kohana/Image
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://http://kohanaframework.org/license
 */",
 "/**
	 * Gets or sets the HTTP protocol. The standard protocol to use
	 * is `HTTP/1.1`.
	 *
	 * @param   string   $protocol  Protocol to set to the request/response
	 * @return  mixed
	 */",
 "/**
	 * Gets or sets HTTP headers to the request or response. All headers
	 * are included immediately after the HTTP protocol definition during
	 * transmission. This method provides a simple array or key/value
	 * interface to the headers.
	 *
	 * @param   mixed   $key    Key or array of key/value pairs to set
	 * @param   string  $value  Value to set to the supplied key
	 * @return  mixed
	 */",
 "/**
	 * Gets or sets the HTTP body to the request or response. The body is
	 * included after the header, separated by a single empty new line.
	 *
	 * @param   string    $content  Content to set to the object
	 * @return  string
	 * @return  void
	 */",
 "/**
	 * Renders the HTTP_Interaction to a string, producing
	 *
	 *  - Protocol
	 *  - Headers
	 *  - Body
	 *
	 * @return  string
	 */",
 "/**
 * The HTTP Interaction interface providing the core HTTP methods that
 * should be implemented by any HTTP request or response class.
 *
 * @package    Kohana
 * @category   HTTP
 * @author     Kohana Team
 * @since      3.1.0
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Sets the expression string.
	 *
	 *     $expression = new Database_Expression(\'COUNT(users.id)\');
	 *
	 * @param   string  $value      raw SQL expression string
	 * @param   array   $parameters unquoted parameter values
	 * @return  void
	 */",
 "/**
	 * Bind a variable to a parameter.
	 *
	 * @param   string  $param  parameter key to replace
	 * @param   mixed   $var    variable to use
	 * @return  $this
	 */",
 "/**
	 * Set the value of a parameter.
	 *
	 * @param   string  $param  parameter key to replace
	 * @param   mixed   $value  value to use
	 * @return  $this
	 */",
 "/**
	 * Add multiple parameter values.
	 *
	 * @param   array   $params list of parameter values
	 * @return  $this
	 */",
 "/**
	 * Get the expression value as a string.
	 *
	 *     $sql = $expression->value();
	 *
	 * @return  string
	 */",
 "/**
	 * Return the value of the expression as a string.
	 *
	 *     echo $expression;
	 *
	 * @return  string
	 * @uses    Database_Expression::value
	 */",
 "/**
	 * Compile the SQL expression and return it. Replaces any parameters with
	 * their given values.
	 *
	 * @param   mixed    Database instance or name of instance
	 * @return  string
	 */",
 "/**
 * Database expressions can be used to add unescaped SQL fragments to a
 * [Database_Query_Builder] object.
 *
 * For example, you can use an expression to generate a column alias:
 *
 *     // SELECT CONCAT(first_name, last_name) AS full_name
 *     $query = DB::select(array(DB::expr(\'CONCAT(first_name, last_name)\'), \'full_name\')));
 *
 * More examples are available on the [Query Builder](database/query/builder#database-expressions) page
 * 
 * @package    Kohana/Database
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * Default auth role
 *
 * @package    Kohana/Auth
 * @author     Kohana Team
 * @copyright  (c) 2007-2009 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */",
 "/**
	 * Creates a singleton session of the given type. Some session types
	 * (native, database) also support restarting a session by passing a
	 * session id as the second parameter.
	 *
	 *     $session = Session::instance();
	 *
	 * [!!] [Session::write] will automatically be called when the request ends.
	 *
	 * @param   string   type of session (native, cookie, etc)
	 * @param   string   session identifier
	 * @return  Session
	 * @uses    Kohana::$config
	 */",
 "/**
	 * Overloads the name, lifetime, and encrypted session settings.
	 *
	 * [!!] Sessions can only be created using the [Session::instance] method.
	 *
	 * @param   array   configuration
	 * @param   string  session id
	 * @return  void
	 * @uses    Session::read
	 */",
 "/**
	 * Session object is rendered to a serialized string. If encryption is
	 * enabled, the session will be encrypted. If not, the output string will
	 * be encoded using [base64_encode].
	 *
	 *     echo $session;
	 *
	 * @return  string
	 * @uses    Encrypt::encode
	 */",
 "/**
	 * Returns the current session array. The returned array can also be
	 * assigned by reference.
	 *
	 *     // Get a copy of the current session data
	 *     $data = $session->as_array();
	 *
	 *     // Assign by reference for modification
	 *     $data =& $session->as_array();
	 *
	 * @return  array
	 */",
 "/**
	 * Get the current session id, if the session supports it.
	 *
	 *     $id = $session->id();
	 *
	 * [!!] Not all session types have ids.
	 *
	 * @return  string
	 * @since   3.0.8
	 */",
 "/**
	 * Get the current session cookie name.
	 *
	 *     $name = $session->name();
	 *
	 * @return  string
	 * @since   3.0.8
	 */",
 "/**
	 * Get a variable from the session array.
	 *
	 *     $foo = $session->get(\'foo\');
	 *
	 * @param   string   variable name
	 * @param   mixed    default value to return
	 * @return  mixed
	 */",
 "/**
	 * Get and delete a variable from the session array.
	 *
	 *     $bar = $session->get_once(\'bar\');
	 *
	 * @param   string  variable name
	 * @param   mixed   default value to return
	 * @return  mixed
	 */",
 "/**
	 * Set a variable in the session array.
	 *
	 *     $session->set(\'foo\', \'bar\');
	 *
	 * @param   string   variable name
	 * @param   mixed    value
	 * @return  $this
	 */",
 "/**
	 * Set a variable by reference.
	 *
	 *     $session->bind(\'foo\', $foo);
	 *
	 * @param   string  variable name
	 * @param   mixed   referenced value
	 * @return  $this
	 */",
 "/**
	 * Removes a variable in the session array.
	 *
	 *     $session->delete(\'foo\');
	 *
	 * @param   string  variable name
	 * @param   ...
	 * @return  $this
	 */",
 "/**
	 * Loads existing session data.
	 *
	 *     $session->read();
	 *
	 * @param   string   session id
	 * @return  void
	 */",
 "/**
	 * Generates a new session id and returns it.
	 *
	 *     $id = $session->regenerate();
	 *
	 * @return  string
	 */",
 "/**
	 * Sets the last_active timestamp and saves the session.
	 *
	 *     $session->write();
	 *
	 * [!!] Any errors that occur during session writing will be logged,
	 * but not displayed, because sessions are written after output has
	 * been sent.
	 *
	 * @return  boolean
	 * @uses    Kohana::$log
	 */",
 "/**
	 * Completely destroy the current session.
	 *
	 *     $success = $session->destroy();
	 *
	 * @return  boolean
	 */",
 "/**
	 * Restart the session.
	 *
	 *     $success = $session->restart();
	 *
	 * @return  boolean
	 */",
 "/**
	 * Loads the raw session data string and returns it.
	 *
	 * @param   string   session id
	 * @return  string
	 */",
 "/**
	 * Generate a new session id and return it.
	 *
	 * @return  string
	 */",
 "/**
	 * Writes the current session.
	 *
	 * @return  boolean
	 */",
 "/**
	 * Destroys the current session.
	 *
	 * @return  boolean
	 */",
 "/**
	 * Restarts the current session.
	 *
	 * @return  boolean
	 */",
 "/**
 * Base session class.
 *
 * @package    Kohana
 * @category   Session
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * This method MUST be implemented by each driver to setup the `Cache`
	 * instance for each test.
	 * 
	 * This method should do the following tasks for each driver test:
	 * 
	 *  - Test the Cache instance driver is available, skip test otherwise
	 *  - Setup the Cache instance
	 *  - Call the parent setup method, `parent::setUp()`
	 *
	 * @return  void
	 */",
 "/**
*  @package    Kohana/Cache/Memcache
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
 * @package    Kohana
 * @category   Exceptions
 * @author     Kohana Team
 * @copyright  (c) 2009-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * @return  string
	 */",
 "/**
	 * @param   string  $id  session id
	 * @return  null
	 */",
 "/**
	 * @return  string
	 */",
 "/**
	 * @return  bool
	 */",
 "/**
	 * @return  bool
	 */",
 "/**
	 * @return  bool
	 */",
 "/**
 * Native PHP session class.
 *
 * @package    Kohana
 * @category   Session
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Gets a mock of the session class
	 *
	 * @return Session
	 */",
 "/**
	 * Provides test data for
	 *
	 * test_constructor_uses_name_from_config_and_casts()
	 *
	 * @return array
	 */",
 "/**
	 * The constructor should change its attributes based on config
	 * passed as the first parameter
	 *
	 * @test
	 * @dataProvider provider_constructor_uses_settings_from_config_and_casts
	 * @covers Session::__construct
	 */",
 "/**
	 * Check that the constructor will load a session if it\'s provided
	 * witha session id
	 *
	 * @test
	 * @covers Session::__construct
	 * @covers Session::read
	 */",
 "/**
	 * Calling $session->bind() should allow you to bind a variable
	 * to a session variable
	 *
	 * @test
	 * @covers Session::bind
	 * @ticket 3164
	 */",
 "/**
	 * When a session is initially created it should have no data
	 *
	 *
	 * @test
	 * @covers Session::__construct
	 * @covers Session::set
	 */",
 "/**
	 * Make sure that the default session name (the one used if the
	 * driver does not set one) is \'session\'
	 *
	 * @test
	 * @covers Session::__construct
	 */",
 "/**
	 * By default sessions are unencrypted
	 *
	 * @test
	 * @covers Session::__construct
	 */",
 "/**
	 * A new session should not be classed as destroyed
	 *
	 * @test
	 * @covers Session::__construct
	 */",
 "/**
	 * Provides test data for test_get_returns_default_if_var_dnx()
	 *
	 * @return array
	 */",
 "/**
	 * Make sure that get() is using the default value we provide and
	 * isn\'t tampering with it
	 *
	 * @test
	 * @dataProvider provider_get_returns_default_if_var_dnx
	 * @covers Session::get
	 */",
 "/**
	 * By default get() should be using null as the var DNX return value
	 *
	 * @test
	 * @covers Session::get
	 */",
 "/**
	 * This test makes sure that session is using array_key_exists
	 * as isset will return FALSE if the value is NULL
	 *
	 * @test
	 * @covers Session::get
	 */",
 "/**
	 * as_array() should return the session data by reference.
	 *
	 * i.e. if we modify the returned data, the session data also changes
	 *
	 * @test
	 * @covers Session::as_array
	 */",
 "/**
	 * set() should add new session data and modify existing ones
	 *
	 * Also makes sure that set() returns $this
	 *
	 * @test
	 * @covers Session::set
	 */",
 "/**
	 * This tests that delete() removes specified session data
	 *
	 * @test
	 * @covers Session::delete
	 */",
 "/**
	 * Provides test data for test_read_loads_session_data()
	 *
	 * @return array
	 */",
 "/**
	 * This is one of the \"big\" tests for the session lib
	 *
	 * The test makes sure that
	 *
	 * 1. Session asks the driver for the data relating to $session_id
	 * 2. That it will load the returned data into the session
	 *
	 * @test
	 * @dataProvider provider_read_loads_session_data
	 * @covers Session::read
	 */",
 "/**
	 * regenerate() should tell the driver to regenerate its id
	 *
	 * @test
	 * @covers Session::regenerate
	 */",
 "/**
	 * If the driver destroys the session then all session data should be
	 * removed
	 *
	 * @test
	 * @covers Session::destroy
	 */",
 "/**
	 * The session data should only be deleted if the driver reports
	 * that the session was destroyed ok
	 *
	 * @test
	 * @covers Session::destroy
	 */",
 "/**
	 * If a session variable exists then get_once should get it then remove it.
	 * If the variable does not exist then it should return the default
	 *
	 * @test
	 * @covers Session::get_once
	 */",
 "/**
 * Tests the session class
 *
 * @group kohana
 * @group kohana.session
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     Jeremy Bush <contractfrombelow@gmail.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * @return  bool
	 */",
 "/**
 * Database-based session class.
 *
 * Sample schema:
 *
 *     CREATE TABLE  `sessions` (
 *         `session_id` VARCHAR( 24 ) NOT NULL,
 *         `last_active` INT UNSIGNED NOT NULL,
 *         `contents` TEXT NOT NULL,
 *         PRIMARY KEY ( `session_id` ),
 *         INDEX ( `last_active` )
 *     ) ENGINE = MYISAM ;
 *
 * @package    Kohana/Database
 * @category   Session
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Stores a named route and returns it. The \"action\" will always be set to
	 * \"index\" if it is not defined.
	 *
	 *     Route::set(\'default\', \'(<controller>(/<action>(/<id>)))\')
	 *         ->defaults(array(
	 *             \'controller\' => \'welcome\',
	 *         ));
	 *
	 * @param   string   route name
	 * @param   string   URI pattern
	 * @param   array    regex patterns for route keys
	 * @return  Route
	 */",
 "/**
	 * Retrieves a named route.
	 *
	 *     $route = Route::get(\'default\');
	 *
	 * @param   string  route name
	 * @return  Route
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Retrieves all named routes.
	 *
	 *     $routes = Route::all();
	 *
	 * @return  array  routes by name
	 */",
 "/**
	 * Get the name of a route.
	 *
	 *     $name = Route::name($route)
	 *
	 * @param   object  Route instance
	 * @return  string
	 */",
 "/**
	 * Saves or loads the route cache. If your routes will remain the same for
	 * a long period of time, use this to reload the routes from the cache
	 * rather than redefining them on every page load.
	 *
	 *     if ( ! Route::cache())
	 *     {
	 *         // Set routes here
	 *         Route::cache(TRUE);
	 *     }
	 *
	 * @param   boolean   cache the current routes
	 * @return  void      when saving routes
	 * @return  boolean   when loading routes
	 * @uses    Kohana::cache
	 */",
 "/**
	 * Create a URL from a route name. This is a shortcut for:
	 *
	 *     echo URL::site(Route::get($name)->uri($params), $protocol);
	 *
	 * @param   string   route name
	 * @param   array    URI parameters
	 * @param   mixed   protocol string or boolean, adds protocol and domain
	 * @return  string
	 * @since   3.0.7
	 * @uses    URL::site
	 */",
 "/**
	 * Returns the compiled regular expression for the route. This translates
	 * keys and optional groups to a proper PCRE regular expression.
	 *
	 *     $compiled = Route::compile(
	 *        \'<controller>(/<action>(/<id>))\',
	 *         array(
	 *           \'controller\' => \'[a-z]+\',
	 *           \'id\' => \'\d+\',
	 *         )
	 *     );
	 *
	 * @return  string
	 * @uses    Route::REGEX_ESCAPE
	 * @uses    Route::REGEX_SEGMENT
	 */",
 "/**
	 * Creates a new route. Sets the URI and regular expressions for keys.
	 * Routes should always be created with [Route::set] or they will not
	 * be properly stored.
	 *
	 *     $route = new Route($uri, $regex);
	 *
	 * The $uri parameter can either be a string for basic regex matching or it
	 * can be a valid callback or anonymous function (php 5.3+). If you use a
	 * callback or anonymous function, your method should return an array
	 * containing the proper keys for the route. If you want the route to be
	 * \"reversable\", you need pass the route string as the third parameter.
	 *
	 *     $route = new Route(function($uri)
	 *     {
	 *     	if (list($controller, $action, $param) = explode(\'/\', $uri) AND $controller == \'foo\' AND $action == \'bar\')
	 *     	{
	 *     		return array(
	 *     			\'controller\' => \'foobar\',
	 *     			\'action\' => $action,
	 *     			\'id\' => $param,
	 *     		);
	 *     	},
	 *     	\'foo/bar/<id>\'
	 *     });
	 *
	 * @param   mixed    route URI pattern or lambda/callback function
	 * @param   array    key patterns
	 * @return  void
	 * @uses    Route::_compile
	 */",
 "/**
	 * Provides default values for keys when they are not present. The default
	 * action will always be \"index\" unless it is overloaded here.
	 *
	 *     $route->defaults(array(
	 *         \'controller\' => \'welcome\',
	 *         \'action\'     => \'index\'
	 *     ));
	 * 
	 * If no parameter is passed, this method will act as a getter.
	 *
	 * @param   array  key values
	 * @return  $this or array
	 */",
 "/**
	 * Tests if the route matches a given URI. A successful match will return
	 * all of the routed parameters as an array. A failed match will return
	 * boolean FALSE.
	 *
	 *     // Params: controller = users, action = edit, id = 10
	 *     $params = $route->matches(\'users/edit/10\');
	 *
	 * This method should almost always be used within an if/else block:
	 *
	 *     if ($params = $route->matches($uri))
	 *     {
	 *         // Parse the parameters
	 *     }
	 *
	 * @param   string  URI to match
	 * @return  array   on success
	 * @return  FALSE   on failure
	 */",
 "/**
	 * Returns whether this route is an external route
	 * to a remote controller.
	 *
	 * @return  boolean
	 */",
 "/**
	 * Generates a URI for the current route based on the parameters given.
	 *
	 *     // Using the \"default\" route: \"users/profile/10\"
	 *     $route->uri(array(
	 *         \'controller\' => \'users\',
	 *         \'action\'     => \'profile\',
	 *         \'id\'         => \'10\'
	 *     ));
	 *
	 * @param   array   URI parameters
	 * @return  string
	 * @throws  Kohana_Exception
	 * @uses    Route::REGEX_Key
	 */",
 "/**
 * Routes are used to determine the controller and action for a requested URI.
 * Every route generates a regular expression which is used to match a URI
 * and a route. Routes may also contain keys which can be used to set the
 * controller, action, and parameters.
 *
 * Each <key> will be translated to a regular expression using a default
 * regular expression pattern. You can override the default pattern by providing
 * a pattern for the key:
 *
 *     // This route will only match when <id> is a digit
 *     Route::set(\'user\', \'user/<action>/<id>\', array(\'id\' => \'\d+\'));
 *
 *     // This route will match when <path> is anything
 *     Route::set(\'file\', \'<path>\', array(\'path\' => \'.*\'));
 *
 * It is also possible to create optional segments by using parentheses in
 * the URI definition:
 *
 *     // This is the standard default route, and no keys are required
 *     Route::set(\'default\', \'(<controller>(/<action>(/<id>)))\');
 *
 *     // This route only requires the <file> key
 *     Route::set(\'file\', \'(<path>/)<file>(.<format>)\', array(\'path\' => \'.*\', \'format\' => \'\w+\'));
 *
 * Routes also provide a way to generate URIs (called \"reverse routing\"), which
 * makes them an extremely powerful and flexible way to generate internal links.
 *
 * @package    Kohana
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
 * Transparent extension for the Kohana_Config_Database class
 *
 * @package    Kohana/Database
 * @category   Configuration
 * @author     Kohana Team
 * @copyright  (c) 2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
 * UTF8::substr
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
 * @package    Kohana/Codebench
 * @category   Tests
 * @author     Geert De Deckere <geert@idoe.be>
 */",
 "/**
	 * Make a class#member API link using an array of matches from [Kodoc::$regex_class_member]
	 *
	 * @param   array   $matches    array( 1 => link text, 2 => class name, [3 => member name] )
	 * @return  string
	 */",
 "/**
	 * Creates an html list of all classes sorted by category (or package if no category)
	 *
	 * @return   string   the html for the menu
	 */",
 "/**
	 * Returns an array of all the classes available, built by listing all files in the classes folder and then trying to create that class.
	 *
	 * This means any empty class files (as in complety empty) will cause an exception
	 *
	 * @param   array   array of files, obtained using Kohana::list_files
	 * @return  array   an array of all the class names
	 */",
 "/**
	 * Get all classes and methods of files in a list.
	 *
	 * >  I personally don\'t like this as it was used on the index page.  Way too much stuff on one page.  It has potential for a package index page though.
	 * >  For example:  class_methods( Kohana::list_files(\'classes/sprig\') ) could make a nice index page for the sprig package in the api browser
	 * >     ~bluehawk
	 *
	 */",
 "/**
	 * Parse a comment to extract the description and the tags
	 *
	 * @param   string  the comment retreived using ReflectionClass->getDocComment()
	 * @return  array   array(string $description, array $tags)
	 */",
 "/**
	 * Get the source of a function
	 *
	 * @param  string   the filename
	 * @param  int      start line?
	 * @param  int      end line?
	 */",
 "/**
	 * Test whether a class should be shown, based on the api_packages config option
	 *
	 * @param  Kodoc_Class  the class to test
	 * @return  bool  whether this class should be shown
	 */",
 "/**
 * Documentation generator.
 *
 * @package    Kohana/Userguide
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Gets the base URL to the application.
	 * To specify a protocol, provide the protocol as a string or request object.
	 * If a protocol is used, a complete URL will be generated using the
	 * `$_SERVER[\'HTTP_HOST\']` variable.
	 *
	 *     // Absolute URL path with no host or protocol
	 *     echo URL::base();
	 *
	 *     // Absolute URL path with host, https protocol and index.php if set
	 *     echo URL::base(\'https\', TRUE);
	 *
	 *     // Absolute URL path with host and protocol from $request
	 *     echo URL::base($request);
	 *
	 * @param   mixed    $protocol Protocol string, [Request], or boolean
	 * @param   boolean  $index    Add index file to URL?
	 * @return  string
	 * @uses    Kohana::$index_file
	 * @uses    Request::protocol()
	 */",
 "/**
	 * Fetches an absolute site URL based on a URI segment.
	 *
	 *     echo URL::site(\'foo/bar\');
	 *
	 * @param   string  $uri        Site URI to convert
	 * @param   mixed   $protocol   Protocol string or [Request] class to use protocol from
	 * @param   boolean $index		Include the index_page in the URL
	 * @return  string
	 * @uses    URL::base
	 */",
 "/**
	 * Merges the current GET parameters with an array of new or overloaded
	 * parameters and returns the resulting query string.
	 *
	 *     // Returns \"?sort=title&limit=10\" combined with any existing GET values
	 *     $query = URL::query(array(\'sort\' => \'title\', \'limit\' => 10));
	 *
	 * Typically you would use this when you are sorting query results,
	 * or something similar.
	 *
	 * [!!] Parameters with a NULL value are left out.
	 *
	 * @param   array    $params   Array of GET parameters
	 * @param   boolean  $use_get  Include current request GET parameters
	 * @return  string
	 */",
 "/**
	 * Convert a phrase to a URL-safe title.
	 *
	 *     echo URL::title(\'My Blog Post\'); // \"my-blog-post\"
	 *
	 * @param   string   $title       Phrase to convert
	 * @param   string   $separator   Word separator (any single character)
	 * @param   boolean  $ascii_only  Transliterate to ASCII?
	 * @return  string
	 * @uses    UTF8::transliterate_to_ascii
	 */",
 "/**
 * URL helper class.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Writes each of the messages to STDERR.
	 *
	 *     $writer->write($messages);
	 *
	 * @param   array   messages
	 * @return  void
	 */",
 "/**
 * STDERR log writer. Writes out messages to STDERR.
 *
 * @package    Kohana
 * @category   Logging
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Checks if a word is defined as uncountable. An uncountable word has a
	 * single form. For instance, one \"fish\" and many \"fish\", not \"fishes\".
	 *
	 *     Inflector::uncountable(\'fish\'); // TRUE
	 *     Inflector::uncountable(\'cat\');  // FALSE
	 *
	 * If you find a word is being pluralized improperly, it has probably not
	 * been defined as uncountable in `config/inflector.php`. If this is the
	 * case, please report [an issue](http://dev.kohanaphp.com/projects/kohana3/issues).
	 *
	 * @param   string   word to check
	 * @return  boolean
	 */",
 "/**
	 * Makes a plural word singular.
	 *
	 *     echo Inflector::singular(\'cats\'); // \"cat\"
	 *     echo Inflector::singular(\'fish\'); // \"fish\", uncountable
	 *
	 * You can also provide the count to make inflection more intelligent.
	 * In this case, it will only return the singular value if the count is
	 * greater than one and not zero.
	 *
	 *     echo Inflector::singular(\'cats\', 2); // \"cats\"
	 *
	 * [!!] Special inflections are defined in `config/inflector.php`.
	 *
	 * @param   string   word to singularize
	 * @param   integer  count of thing
	 * @return  string
	 * @uses    Inflector::uncountable
	 */",
 "/**
	 * Makes a singular word plural.
	 *
	 *     echo Inflector::plural(\'fish\'); // \"fish\", uncountable
	 *     echo Inflector::plural(\'cat\');  // \"cats\"
	 *
	 * You can also provide the count to make inflection more intelligent.
	 * In this case, it will only return the plural value if the count is
	 * not one.
	 *
	 *     echo Inflector::singular(\'cats\', 3); // \"cats\"
	 *
	 * [!!] Special inflections are defined in `config/inflector.php`.
	 *
	 * @param   string   word to pluralize
	 * @param   integer  count of thing
	 * @return  string
	 * @uses    Inflector::uncountable
	 */",
 "/**
	 * Makes a phrase camel case. Spaces and underscores will be removed.
	 *
	 *     $str = Inflector::camelize(\'mother cat\');     // \"motherCat\"
	 *     $str = Inflector::camelize(\'kittens in bed\'); // \"kittensInBed\"
	 *
	 * @param   string  phrase to camelize
	 * @return  string
	 */",
 "/**
	 * Converts a camel case phrase into a spaced phrase.
	 *
	 *     $str = Inflector::decamelize(\'houseCat\');    // \"house cat\"
	 *     $str = Inflector::decamelize(\'kingAllyCat\'); // \"king ally cat\"
	 *
	 * @param   string   phrase to camelize
	 * @param   string   word separator
	 * @return  string
	 */",
 "/**
	 * Makes a phrase underscored instead of spaced.
	 *
	 *     $str = Inflector::underscore(\'five cats\'); // \"five_cats\";
	 *
	 * @param   string  phrase to underscore
	 * @return  string
	 */",
 "/**
	 * Makes an underscored or dashed phrase human-readable.
	 *
	 *     $str = Inflector::humanize(\'kittens-are-cats\'); // \"kittens are cats\"
	 *     $str = Inflector::humanize(\'dogs_as_well\');     // \"dogs as well\"
	 *
	 * @param   string  phrase to make human-readable
	 * @return  string
	 */",
 "/**
 * Inflector helper class. Inflection is changing the form of a word based on
 * the context it is used in. For example, changing a word into a plural form.
 *
 * [!!] Inflection is only tested with English, and is will not work with other languages.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Loads an image and prepares it for manipulation.
	 *
	 *     $image = Image::factory(\'upload/test.jpg\');
	 *
	 * @param   string   image file path
	 * @param   string   driver type: GD, ImageMagick, etc
	 * @return  Image
	 * @uses    Image::$default_driver
	 */",
 "/**
	 * Loads information about the image. Will throw an exception if the image
	 * does not exist or is not an image.
	 *
	 * @param   string   image file path
	 * @return  void
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Render the current image.
	 *
	 *     echo $image;
	 *
	 * [!!] The output of this function is binary and must be rendered with the
	 * appropriate Content-Type header or it will not be displayed correctly!
	 *
	 * @return  string
	 */",
 "/**
	 * Resize the image to the given size. Either the width or the height can
	 * be omitted and the image will be resized proportionally.
	 *
	 *     // Resize to 200 pixels on the shortest side
	 *     $image->resize(200, 200);
	 *
	 *     // Resize to 200x200 pixels, keeping aspect ratio
	 *     $image->resize(200, 200, Image::INVERSE);
	 *
	 *     // Resize to 500 pixel width, keeping aspect ratio
	 *     $image->resize(500, NULL);
	 *
	 *     // Resize to 500 pixel height, keeping aspect ratio
	 *     $image->resize(NULL, 500);
	 *
	 *     // Resize to 200x500 pixels, ignoring aspect ratio
	 *     $image->resize(200, 500, Image::NONE);
	 *
	 * @param   integer  new width
	 * @param   integer  new height
	 * @param   integer  master dimension
	 * @return  $this
	 * @uses    Image::_do_resize
	 */",
 "/**
	 * Crop an image to the given size. Either the width or the height can be
	 * omitted and the current width or height will be used.
	 *
	 * If no offset is specified, the center of the axis will be used.
	 * If an offset of TRUE is specified, the bottom of the axis will be used.
	 *
	 *     // Crop the image to 200x200 pixels, from the center
	 *     $image->crop(200, 200);
	 *
	 * @param   integer  new width
	 * @param   integer  new height
	 * @param   mixed    offset from the left
	 * @param   mixed    offset from the top
	 * @return  $this
	 * @uses    Image::_do_crop
	 */",
 "/**
	 * Rotate the image by a given amount.
	 *
	 *     // Rotate 45 degrees clockwise
	 *     $image->rotate(45);
	 *
	 *     // Rotate 90% counter-clockwise
	 *     $image->rotate(-90);
	 *
	 * @param   integer   degrees to rotate: -360-360
	 * @return  $this
	 * @uses    Image::_do_rotate
	 */",
 "/**
	 * Flip the image along the horizontal or vertical axis.
	 *
	 *     // Flip the image from top to bottom
	 *     $image->flip(Image::HORIZONTAL);
	 *
	 *     // Flip the image from left to right
	 *     $image->flip(Image::VERTICAL);
	 *
	 * @param   integer  direction: Image::HORIZONTAL, Image::VERTICAL
	 * @return  $this
	 * @uses    Image::_do_flip
	 */",
 "/**
	 * Sharpen the image by a given amount.
	 *
	 *     // Sharpen the image by 20%
	 *     $image->sharpen(20);
	 *
	 * @param   integer  amount to sharpen: 1-100
	 * @return  $this
	 * @uses    Image::_do_sharpen
	 */",
 "/**
	 * Add a reflection to an image. The most opaque part of the reflection
	 * will be equal to the opacity setting and fade out to full transparent.
	 * Alpha transparency is preserved.
	 *
	 *     // Create a 50 pixel reflection that fades from 0-100% opacity
	 *     $image->reflection(50);
	 *
	 *     // Create a 50 pixel reflection that fades from 100-0% opacity
	 *     $image->reflection(50, 100, TRUE);
	 *
	 *     // Create a 50 pixel reflection that fades from 0-60% opacity
	 *     $image->reflection(50, 60, TRUE);
	 *
	 * [!!] By default, the reflection will be go from transparent at the top
	 * to opaque at the bottom.
	 *
	 * @param   integer   reflection height
	 * @param   integer   reflection opacity: 0-100
	 * @param   boolean   TRUE to fade in, FALSE to fade out
	 * @return  $this
	 * @uses    Image::_do_reflection
	 */",
 "/**
	 * Add a watermark to an image with a specified opacity. Alpha transparency
	 * will be preserved.
	 *
	 * If no offset is specified, the center of the axis will be used.
	 * If an offset of TRUE is specified, the bottom of the axis will be used.
	 *
	 *     // Add a watermark to the bottom right of the image
	 *     $mark = Image::factory(\'upload/watermark.png\');
	 *     $image->watermark($mark, TRUE, TRUE);
	 *
	 * @param   object   watermark Image instance
	 * @param   integer  offset from the left
	 * @param   integer  offset from the top
	 * @param   integer  opacity of watermark: 1-100
	 * @return  $this
	 * @uses    Image::_do_watermark
	 */",
 "/**
	 * Set the background color of an image. This is only useful for images
	 * with alpha transparency.
	 *
	 *     // Make the image background black
	 *     $image->background(\'#000\');
	 *
	 *     // Make the image background black with 50% opacity
	 *     $image->background(\'#000\', 50);
	 *
	 * @param   string   hexadecimal color value
	 * @param   integer  background opacity: 0-100
	 * @return  $this
	 * @uses    Image::_do_background
	 */",
 "/**
	 * Save the image. If the filename is omitted, the original image will
	 * be overwritten.
	 *
	 *     // Save the image as a PNG
	 *     $image->save(\'saved/cool.png\');
	 *
	 *     // Overwrite the original image
	 *     $image->save();
	 *
	 * [!!] If the file exists, but is not writable, an exception will be thrown.
	 *
	 * [!!] If the file does not exist, and the directory is not writable, an
	 * exception will be thrown.
	 *
	 * @param   string   new image path
	 * @param   integer  quality of image: 1-100
	 * @return  boolean
	 * @uses    Image::_save
	 * @throws  Kohana_Exception
	 */",
 "/**
	 * Render the image and return the binary string.
	 *
	 *     // Render the image at 50% quality
	 *     $data = $image->render(NULL, 50);
	 *
	 *     // Render the image as a PNG
	 *     $data = $image->render(\'png\');
	 *
	 * @param   string   image type to return: png, jpg, gif, etc
	 * @param   integer  quality of image: 1-100
	 * @return  string
	 * @uses    Image::_do_render
	 */",
 "/**
	 * Execute a resize.
	 *
	 * @param   integer  new width
	 * @param   integer  new height
	 * @return  void
	 */",
 "/**
	 * Execute a crop.
	 *
	 * @param   integer  new width
	 * @param   integer  new height
	 * @param   integer  offset from the left
	 * @param   integer  offset from the top
	 * @return  void
	 */",
 "/**
	 * Execute a rotation.
	 *
	 * @param   integer  degrees to rotate
	 * @return  void
	 */",
 "/**
	 * Execute a flip.
	 *
	 * @param   integer  direction to flip
	 * @return  void
	 */",
 "/**
	 * Execute a sharpen.
	 *
	 * @param   integer  amount to sharpen
	 * @return  void
	 */",
 "/**
	 * Execute a reflection.
	 *
	 * @param   integer   reflection height
	 * @param   integer   reflection opacity
	 * @param   boolean   TRUE to fade out, FALSE to fade in
	 * @return  void
	 */",
 "/**
	 * Execute a watermarking.
	 *
	 * @param   object   watermarking Image
	 * @param   integer  offset from the left
	 * @param   integer  offset from the top
	 * @param   integer  opacity of watermark
	 * @return  void
	 */",
 "/**
	 * Execute a background.
	 *
	 * @param   integer  red
	 * @param   integer  green
	 * @param   integer  blue
	 * @param   integer  opacity
	 * @return void
	 */",
 "/**
	 * Execute a save.
	 *
	 * @param   string   new image filename
	 * @param   integer  quality
	 * @return  boolean
	 */",
 "/**
	 * Execute a render.
	 *
	 * @param   string    image type: png, jpg, gif, etc
	 * @param   integer   quality
	 * @return  string
	 */",
 "/**
 * Image manipulation support. Allows images to be resized, cropped, etc.
 *
 * @package    Kohana/Image
 * @category   Base
 * @author     Kohana Team
 * @copyright  (c) 2008-2009 Kohana Team
 * @license    http://kohanaphp.com/license.html
 */",
 "/**
 * UTF8::trim
 *
 * @package    Kohana
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @copyright  (c) 2005 Harry Fuecks
 * @license    http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
 */",
 "/**
	 * Creates a new translated exception.
	 *
	 *     throw new Kohana_Exception(\'Something went terrible wrong, :user\',
	 *         array(\':user\' => $user));
	 *
	 * @param   string   status message, custom content to display with error
	 * @param   array    translation variables
	 * @param   integer  the http status code
	 * @return  void
	 */",
 "/**
	 * Just an empty callback that doesn\'t match anything
	 */",
 "/**
	 * Just an empty callback that matches everything
	 *
	 * @return array
	 */",
 "/**
	 * Route callback for test_matches_returns_array_of_parameters_on_successful_match
	 *
	 * @return array
	 */",
 "/**
	 * Route callback for test_required_parameters_are_needed
	 *
	 * @return array
	 */",
 "/**
	 * Route callback for test reverse_routing_returns_routes_uri_if_route_is_static
	 *
	 * @return array
	 */",
 "/**
 * A holding class for route callback tests
 *
 * @group kohana
 *
 * @package    Unittest
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * This method MUST be implemented by each driver to setup the `Cache`
	 * instance for each test.
	 * 
	 * This method should do the following tasks for each driver test:
	 * 
	 *  - Test the Cache instance driver is available, skip test otherwise
	 *  - Setup the Cache instance
	 *  - Call the parent setup method, `parent::setUp()`
	 *
	 * @return  void
	 */",
 "/**
	 * Tests that ignored files are not removed from file cache
	 *
	 * @return  void
	 */",
 "/**
	 * Provider for test_utf8
	 *
	 * @return  array
	 */",
 "/**
	 * Tests the file driver supports utf-8 strings
	 *
	 * @dataProvider provider_utf8
	 *
	 * @return  void
	 */",
 "/**
*  @package    Kohana/Cache/Memcache
 * @category   Test
 * @author     Kohana Team
 * @copyright  (c) 2009-2010 Kohana Team
 * @license    http://kohanaphp.com/license
 */",
 "/**
	 * Provides test data for test_base()
	 *
	 * @return array
	 */",
 "/**
	 * Tests URL::base()
	 *
	 * @test
	 * @dataProvider provider_base
	 * @param boolean $protocol    Parameter for Url::base()
	 * @param boolean $index       Parameter for Url::base()
	 * @param string  $expected    Expected url
	 * @param array   $enviroment  Array of enviroment vars to change @see Kohana_URLTest::setEnvironment()
	 */",
 "/**
	 * Provides test data for test_site()
	 *
	 * @return array
	 */",
 "/**
	 * Tests URL::site()
	 *
	 * @test
	 * @dataProvider provider_site
	 * @param string          $uri         URI to use
	 * @param boolean|string  $protocol    Protocol to use
	 * @param string          $expected    Expected result
	 * @param array           $enviroment  Array of enviroment vars to set
	 */",
 "/**
	 * Provides test data for test_site_url_encode_uri()
	 * See issue #2680
	 *
	 * @return array
	 */",
 "/**
	 * Tests URL::site for proper URL encoding when working with non-ASCII characters.
	 *
	 * @test
	 * @dataProvider provider_site_url_encode_uri
	 */",
 "/**
	 * Provides test data for test_title()
	 * @return array
	 */",
 "/**
	 * Tests URL::title()
	 *
	 * @test
	 * @dataProvider provider_title
	 * @param string $title        Input to convert
	 * @param string $separator    Seperate to replace invalid characters with
	 * @param string $expected     Expected result
	 */",
 "/**
	 * Provides test data for URL::query()
	 * @return array
	 */",
 "/**
	 * Tests URL::query()
	 *
	 * @test
	 * @dataProvider provider_query
	 * @param array $enviroment Set environment
	 * @param string $expected Expected result
	 * @param array $params Query string
	 * @param boolean $use_get Combine with GET parameters
	 */",
 "/**
 * Tests URL
 *
 * @group kohana
 * @group kohana.url
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Tests if an array is associative or not.
	 *
	 *     // Returns TRUE
	 *     Arr::is_assoc(array(\'username\' => \'john.doe\'));
	 *
	 *     // Returns FALSE
	 *     Arr::is_assoc(\'foo\', \'bar\');
	 *
	 * @param   array   array to check
	 * @return  boolean
	 */",
 "/**
	 * Test if a value is an array with an additional check for array-like objects.
	 *
	 *     // Returns TRUE
	 *     Arr::is_array(array());
	 *     Arr::is_array(new ArrayObject);
	 *
	 *     // Returns FALSE
	 *     Arr::is_array(FALSE);
	 *     Arr::is_array(\'not an array!\');
	 *     Arr::is_array(Database::instance());
	 *
	 * @param   mixed    value to check
	 * @return  boolean
	 */",
 "/**
	 * Gets a value from an array using a dot separated path.
	 *
	 *     // Get the value of $array[\'foo\'][\'bar\']
	 *     $value = Arr::path($array, \'foo.bar\');
	 *
	 * Using a wildcard \"*\" will search intermediate arrays and return an array.
	 *
	 *     // Get the values of \"color\" in theme
	 *     $colors = Arr::path($array, \'theme.*.color\');
	 *
	 *     // Using an array of keys
	 *     $colors = Arr::path($array, array(\'theme\', \'*\', \'color\'));
	 *
	 * @param   array   array to search
	 * @param   mixed   key path string (delimiter separated) or array of keys
	 * @param   mixed   default value if the path is not set
	 * @param   string  key path delimiter
	 * @return  mixed
	 */",
 "/**
	* Set a value on an array by path.
	*
	* @see Arr::path()
	* @param array   $array     Array to update
	* @param string  $path      Path
	* @param mixed   $value     Value to set
	* @param string  $delimiter Path delimiter
	*/",
 "/**
	 * Fill an array with a range of numbers.
	 *
	 *     // Fill an array with values 5, 10, 15, 20
	 *     $values = Arr::range(5, 20);
	 *
	 * @param   integer  stepping
	 * @param   integer  ending number
	 * @return  array
	 */",
 "/**
	 * Retrieve a single key from an array. If the key does not exist in the
	 * array, the default value will be returned instead.
	 *
	 *     // Get the value \"username\" from $_POST, if it exists
	 *     $username = Arr::get($_POST, \'username\');
	 *
	 *     // Get the value \"sorting\" from $_GET, if it exists
	 *     $sorting = Arr::get($_GET, \'sorting\');
	 *
	 * @param   array   array to extract from
	 * @param   string  key name
	 * @param   mixed   default value
	 * @return  mixed
	 */",
 "/**
	 * Retrieves multiple keys from an array. If the key does not exist in the
	 * array, the default value will be added instead.
	 *
	 *     // Get the values \"username\", \"password\" from $_POST
	 *     $auth = Arr::extract($_POST, array(\'username\', \'password\'));
	 *
	 * @param   array   array to extract keys from
	 * @param   array   list of key names
	 * @param   mixed   default value
	 * @return  array
	 */",
 "/**
	 * Retrieves muliple single-key values from a list of arrays.
	 *
	 *     // Get all of the \"id\" values from a result
	 *     $ids = Arr::pluck($result, \'id\');
	 *
	 * [!!] A list of arrays is an array that contains arrays, eg: array(array $a, array $b, array $c, ...)
	 *
	 * @param   array   list of arrays to check
	 * @param   string  key to pluck
	 * @return  array
	 */",
 "/**
	 * Adds a value to the beginning of an associative array.
	 *
	 *     // Add an empty value to the start of a select list
	 *     Arr::unshift($array, \'none\', \'Select a value\');
	 *
	 * @param   array   array to modify
	 * @param   string  array key name
	 * @param   mixed   array value
	 * @return  array
	 */",
 "/**
	 * Recursive version of [array_map](http://php.net/array_map), applies the
	 * same callback to all elements in an array, including sub-arrays.
	 *
	 *     // Apply \"strip_tags\" to every element in the array
	 *     $array = Arr::map(\'strip_tags\', $array);
	 *
	 * [!!] Unlike `array_map`, this method requires a callback and will only map
	 * a single array.
	 *
	 * @param   mixed   callback applied to every element in the array
	 * @param   array   array to map
	 * @param   array   array of keys to apply to
	 * @return  array
	 */",
 "/**
	 * Merges one or more arrays recursively and preserves all keys.
	 * Note that this does not work the same as [array_merge_recursive](http://php.net/array_merge_recursive)!
	 *
	 *     $john = array(\'name\' => \'john\', \'children\' => array(\'fred\', \'paul\', \'sally\', \'jane\'));
	 *     $mary = array(\'name\' => \'mary\', \'children\' => array(\'jane\'));
	 *
	 *     // John and Mary are married, merge them together
	 *     $john = Arr::merge($john, $mary);
	 *
	 *     // The output of $john will now be:
	 *     array(\'name\' => \'mary\', \'children\' => array(\'fred\', \'paul\', \'sally\', \'jane\'))
	 *
	 * @param   array  initial array
	 * @param   array  array to merge
	 * @param   array  ...
	 * @return  array
	 */",
 "/**
	 * Overwrites an array with values from input arrays.
	 * Keys that do not exist in the first array will not be added!
	 *
	 *     $a1 = array(\'name\' => \'john\', \'mood\' => \'happy\', \'food\' => \'bacon\');
	 *     $a2 = array(\'name\' => \'jack\', \'food\' => \'tacos\', \'drink\' => \'beer\');
	 *
	 *     // Overwrite the values of $a1 with $a2
	 *     $array = Arr::overwrite($a1, $a2);
	 *
	 *     // The output of $array will now be:
	 *     array(\'name\' => \'jack\', \'mood\' => \'happy\', \'food\' => \'tacos\')
	 *
	 * @param   array   master array
	 * @param   array   input arrays that will overwrite existing values
	 * @return  array
	 */",
 "/**
	 * Creates a callable function and parameter list from a string representation.
	 * Note that this function does not validate the callback string.
	 *
	 *     // Get the callback function and parameters
	 *     list($func, $params) = Arr::callback(\'Foo::bar(apple,orange)\');
	 *
	 *     // Get the result of the callback
	 *     $result = call_user_func_array($func, $params);
	 *
	 * @param   string  callback string
	 * @return  array   function, params
	 */",
 "/**
	 * Convert a multi-dimensional array into a single-dimensional array.
	 *
	 *     $array = array(\'set\' => array(\'one\' => \'something\'), \'two\' => \'other\');
	 *
	 *     // Flatten the array
	 *     $array = Arr::flatten($array);
	 *
	 *     // The array will now be
	 *     array(\'one\' => \'something\', \'two\' => \'other\');
	 *
	 * [!!] The keys of array values will be discarded.
	 *
	 * @param   array   array to flatten
	 * @return  array
	 * @since   3.0.6
	 */",
 "/**
 * Array helper.
 *
 * @package    Kohana
 * @category   Helpers
 * @author     Kohana Team
 * @copyright  (c) 2007-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * @param   string  $id  session id
	 * @return  string
	 */",
 "/**
	 * @return  null
	 */",
 "/**
	 * @return  bool
	 */",
 "/**
	 * @return  bool
	 */",
 "/**
	 * @return  bool
	 */",
 "/**
 * Cookie-based session class.
 *
 * @package    Kohana
 * @category   Session
 * @author     Kohana Team
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Ensures we have a consistant timezone for testing.
	 */",
 "/**
	 * Restores original timezone after testing.
	 */",
 "/**
	 * Provides test data for test_offset()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Date::offset()
	 *
	 * @test
	 * @dataProvider provider_offset
	 * @covers Date::offset
	 * @param integer $expected Expected offset
	 * @param string  $remote   Remote TZ
	 * @param string  $local    Local TZ
	 * @param integer $now      Current timestamp
	 */",
 "/**
	 * Provides test data for test_date()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Date::ampm()
	 *
	 * @test
	 * @covers Date::ampm
	 * @dataProvider provider_am_pm
	 * @param <type> $hour
	 * @param <type> $expected
	 */",
 "/**
	 * Provides test data for test_adjust()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Date::ampm()
	 *
	 * @test
	 * @dataProvider provider_adjust
	 * @param integer $hour       Hour in 12 hour format
	 * @param string  $ampm       Either am or pm
	 * @param string  $expected   Expected result
	 */",
 "/**
	 * Provides test data for test_days()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Date::days()
	 *
	 * @test
	 * @covers Date::days
	 * @dataProvider provider_days
	 * @param integer $month
	 * @param integer $year
	 * @param integer $expected
	 */",
 "/**
	 * Provides test data for test_formatted_time()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Date::formatted_time()
	 *
	 * @test
	 * @dataProvider provider_formatted_time
	 * @covers Date::formatted_time
	 * @ticket 3035
	 * @param string         $expected         Expected output
	 * @param string|integer $datetime_str     The datetime timestamp / string
	 * @param string|null    $timestamp_format The output format
	 */",
 "/**
	 * Provider for test_months()
	 *
	 * @return array Test data
	 */",
 "/**
	 * Date::months() should allow the user to specify different format types, defaulting
	 * to a mirrored month number => month number array if format is NULL or unrecognised
	 *
	 * @test
	 * @dataProvider provider_months
	 * @covers Date::months
	 */",
 "/**
	 * Provides test data for test_span()
	 *
	 * @return array
	 */",
 "/**
	 * Tests Date::span()
	 *
	 * @test
	 * @covers Date::span
	 * @dataProvider provider_span
	 * @param integer $time1     Time in the past
	 * @param integer $time2     Time to compare against
	 * @param string  $output    Units to output
	 * @param array   $expected  Array of $outputs => values
	 */",
 "/**
	 * Provides test data to test_fuzzy_span
	 *
	 * This test data is provided on the assumption that it
	 * won\'t take phpunit more than 30 seconds to get the
	 * data from this provider to the test... ;)
	 *
	 * @return array Test Data
	 */",
 "/**
	 * Test of Date::fuzy_span()
	 *
	 * @test
	 * @dataProvider provider_fuzzy_span
	 * @param string  $expected        Expected output
	 * @param integer $timestamp       Timestamp to use
	 * @param integer $local_timestamp The local timestamp to use
	 */",
 "/**
	 * Provides test data for test_years()
	 *
	 * @return array Test Data
	 */",
 "/**
	 * Tests Data::years()
	 *
	 * @test
	 * @dataProvider provider_years
	 */",
 "/**
	 * Test for Date::hours
	 *
	 * @test
	 * @dataProvider provider_hours
	 */",
 "/**
	 * Provides test data for test_seconds
	 *
	 * @return array Test data
	 */",
 "/**
	 *
	 * @test
	 * @dataProvider provider_seconds
	 * @covers Date::seconds
	 */",
 "/**
	 * Provides test data for test_minutes
	 *
	 * @return array Test data
	 */",
 "/**
	 *
	 * @test
	 * @dataProvider provider_minutes
	 */",
 "/**
	 * This tests that the minutes helper defaults to using a $step of 5
	 * and thus returns an array of 5 minute itervals
	 *
	 * @test
	 * @covers Date::minutes
	 */",
 "/**
	 * Provids for test_unix2dos
	 *
	 * @return array Test Data
	 */",
 "/**
	 * Test Date::unix2dos()
	 *
	 * You should always pass a timestamp as otherwise the current
	 * date/time would be used and that\'s oviously variable
	 *
	 * Geert seems to be the only person who knows how unix2dos() works
	 * so we just throw in some random values and see what happens
	 *
	 * @test
	 * @dataProvider provider_unix2dos
	 * @covers Date::unix2dos
	 * @param integer $expected  Expected output
	 * @param integer $timestamp Input timestamp
	 */",
 "/**
	 * Provides test data for test_dos2unix
	 *
	 * @return array Test data
	 */",
 "/**
	 * Tests Date::dos2unix
	 *
	 * @test
	 * @dataProvider provider_dos2unix
	 * @param integer $expected  Expected output
	 * @param integer $timestamp Input timestamp
	 */",
 "/**
 * Tests Date class
 *
 * @group kohana
 * @group kohana.date
 *
 * @package    Kohana
 * @category   Tests
 * @author     Kohana Team
 * @author     BRMatt <matthew@sigswitch.com>
 * @copyright  (c) 2008-2011 Kohana Team
 * @license    http://kohanaframework.org/license
 */",
 "/**
	 * Check for internet connectivity
	 *
	 * @return boolean Whether an internet connection is available
	 */",
 "/**
	 * Helper function which replaces the \"/\" to OS-specific delimiter
	 * 
	 * @param string $path
	 * @return string
	 */",
 "/**
	 * Removes all cache files from the kohana cache dir 
	 *
	 * @return void
	 */",
 "/**
	 * Allows easy setting & backing up of enviroment config
	 *
	 * Option types are checked in the following order:
	 *
	 * * Server Var
	 * * Static Variable
	 * * Config option
	 *
	 * @param array $environment List of environment to set
	 */",
 "/**
	 * Restores the environment to the original state
	 *
	 * @chainable
	 * @return Kohana_Unittest_Helpers $this 
	 */",
 "/**
 * Unit testing helpers
 */"
]
